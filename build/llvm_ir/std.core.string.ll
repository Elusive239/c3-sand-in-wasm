; ModuleID = 'std::core::string'
source_filename = "std::core::string"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"char[][]" = type { ptr, i64 }
%"ushort[]" = type { ptr, i64 }
%"uint[]" = type { ptr, i64 }
%StringIterator = type { %"char[]", i64 }
%Splitter = type { %"char[]", %"char[]", i64, i8, i32 }

$std.core.String.trim = comdat any

$std.core.String.starts_with = comdat any

$std.core.String.ends_with = comdat any

$std.core.String.strip = comdat any

$std.core.String.strip_end = comdat any

$std.core.String.split = comdat any

$std.core.String.new_split = comdat any

$std.core.String.tsplit = comdat any

$std.core.String.split_to_buffer = comdat any

$std.core.String.contains = comdat any

$std.core.String.index_of_char = comdat any

$std.core.String.index_of_char_from = comdat any

$std.core.String.rindex_of_char = comdat any

$std.core.String.index_of = comdat any

$std.core.String.rindex_of = comdat any

$std.core.string.ZString.str_view = comdat any

$std.core.string.ZString.char_len = comdat any

$std.core.string.ZString.len = comdat any

$std.core.String.zstr_copy = comdat any

$std.core.String.concat = comdat any

$std.core.String.tconcat = comdat any

$std.core.String.zstr_tcopy = comdat any

$std.core.String.copy = comdat any

$std.core.String.free = comdat any

$std.core.String.tcopy = comdat any

$std.core.string.ZString.copy = comdat any

$std.core.string.ZString.tcopy = comdat any

$std.core.String.to_new_utf16 = comdat any

$std.core.String.to_temp_utf16 = comdat any

$std.core.String.to_wstring = comdat any

$std.core.String.to_temp_wstring = comdat any

$std.core.String.to_new_wstring = comdat any

$std.core.String.to_utf32 = comdat any

$std.core.String.to_new_utf32 = comdat any

$std.core.String.to_temp_utf32 = comdat any

$std.core.String.convert_ascii_to_lower = comdat any

$std.core.String.new_ascii_to_lower = comdat any

$std.core.String.temp_ascii_to_lower = comdat any

$std.core.String.convert_ascii_to_upper = comdat any

$std.core.String.new_ascii_to_upper = comdat any

$std.core.String.iterator = comdat any

$std.core.String.temp_ascii_to_upper = comdat any

$std.core.String.utf8_codepoints = comdat any

$std.core.String.to_int128 = comdat any

$std.core.String.to_long = comdat any

$std.core.String.to_int = comdat any

$std.core.String.to_short = comdat any

$std.core.String.to_ichar = comdat any

$std.core.String.to_uint128 = comdat any

$std.core.String.to_ulong = comdat any

$std.core.String.to_uint = comdat any

$std.core.String.to_ushort = comdat any

$std.core.String.to_uchar = comdat any

$std.core.String.to_double = comdat any

$std.core.String.to_float = comdat any

$std.core.String.splitter = comdat any

$std.core.String.tokenize = comdat any

$std.core.string.Splitter.reset = comdat any

$std.core.string.Splitter.next = comdat any

$std.core.string.tformat_zstr = comdat any

$std.core.string.format = comdat any

$std.core.string.new_format = comdat any

$std.core.string.tformat = comdat any

$std.core.string.new_format_zstr = comdat any

$std.core.string.join_new = comdat any

$std.core.string.new_from_utf32 = comdat any

$std.core.string.new_from_utf16 = comdat any

$std.core.string.new_from_wstring = comdat any

$std.core.string.temp_from_wstring = comdat any

$std.core.string.temp_from_utf16 = comdat any

$.dyn_search = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.core.string.WString" = comdat any

$"$ct.p$ushort" = comdat any

$"$ct.ushort" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF8" = comdat any

$"std.core.string.UnicodeResult$INVALID_UTF16" = comdat any

$"std.core.string.UnicodeResult$CONVERSION_FAILED" = comdat any

$"$ct.std.core.string.UnicodeResult" = comdat any

$"std.core.string.NumberConversion$EMPTY_STRING" = comdat any

$"std.core.string.NumberConversion$NEGATIVE_VALUE" = comdat any

$"std.core.string.NumberConversion$MALFORMED_INTEGER" = comdat any

$"std.core.string.NumberConversion$INTEGER_OVERFLOW" = comdat any

$"std.core.string.NumberConversion$MALFORMED_FLOAT" = comdat any

$"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = comdat any

$"$ct.std.core.string.NumberConversion" = comdat any

$"std.core.string.SplitResult$BUFFER_EXCEEDED" = comdat any

$"$ct.std.core.string.SplitResult" = comdat any

$"$ct.std.core.string.Splitter" = comdat any

$"$sel.acquire" = comdat any

$"$ct.anyfault" = comdat any

$"$ct.long" = comdat any

$"$ct.ulong" = comdat any

$"$sel.release" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"std.core.builtin.SearchResult$MISSING" = comdat any

$"$ct.std.core.builtin.SearchResult" = comdat any

$"$sel.resize" = comdat any

$"$ct.uint" = comdat any

$"$ct.int" = comdat any

$"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = comdat any

$"$ct.std.core.builtin.IteratorResult" = comdat any

$std.core.string.KMAX = comdat any

$std.core.string.MASK = comdat any

$std.core.string.B1B_DIG = comdat any

$std.core.string.B1B_MAX = comdat any

@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.WString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$ushort" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.UnicodeResult$INVALID_UTF8" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault, i64 12 }, i64 1 }, comdat, align 8
@.fault = internal constant [13 x i8] c"INVALID_UTF8\00", align 1
@"std.core.string.UnicodeResult$INVALID_UTF16" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.1, i64 13 }, i64 2 }, comdat, align 8
@.fault.1 = internal constant [14 x i8] c"INVALID_UTF16\00", align 1
@"std.core.string.UnicodeResult$CONVERSION_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.2, i64 17 }, i64 3 }, comdat, align 8
@.fault.2 = internal constant [18 x i8] c"CONVERSION_FAILED\00", align 1
@"$ct.std.core.string.UnicodeResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.NumberConversion$EMPTY_STRING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.3, i64 12 }, i64 1 }, comdat, align 8
@.fault.3 = internal constant [13 x i8] c"EMPTY_STRING\00", align 1
@"std.core.string.NumberConversion$NEGATIVE_VALUE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.4, i64 14 }, i64 2 }, comdat, align 8
@.fault.4 = internal constant [15 x i8] c"NEGATIVE_VALUE\00", align 1
@"std.core.string.NumberConversion$MALFORMED_INTEGER" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.5, i64 17 }, i64 3 }, comdat, align 8
@.fault.5 = internal constant [18 x i8] c"MALFORMED_INTEGER\00", align 1
@"std.core.string.NumberConversion$INTEGER_OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.6, i64 16 }, i64 4 }, comdat, align 8
@.fault.6 = internal constant [17 x i8] c"INTEGER_OVERFLOW\00", align 1
@"std.core.string.NumberConversion$MALFORMED_FLOAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.7, i64 15 }, i64 5 }, comdat, align 8
@.fault.7 = internal constant [16 x i8] c"MALFORMED_FLOAT\00", align 1
@"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.8, i64 18 }, i64 6 }, comdat, align 8
@.fault.8 = internal constant [19 x i8] c"FLOAT_OUT_OF_RANGE\00", align 1
@"$ct.std.core.string.NumberConversion" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"std.core.string.SplitResult$BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.SplitResult" to i64), %"char[]" { ptr @.fault.9, i64 15 }, i64 1 }, comdat, align 8
@.fault.9 = internal constant [16 x i8] c"BUFFER_EXCEEDED\00", align 1
@"$ct.std.core.string.SplitResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.string.Splitter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.SURROGATE_OFFSET = internal unnamed_addr constant i32 65536, align 4, !dbg !0
@std.core.string.SURROGATE_GENERIC_MASK = internal unnamed_addr constant i32 63488, align 4, !dbg !4
@std.core.string.SURROGATE_MASK = internal unnamed_addr constant i32 64512, align 4, !dbg !6
@std.core.string.SURROGATE_CODEPOINT_MASK = internal unnamed_addr constant i32 1023, align 4, !dbg !8
@std.core.string.SURROGATE_BITS = internal unnamed_addr constant i32 10, align 4, !dbg !10
@std.core.string.SURROGATE_LOW_VALUE = internal unnamed_addr constant i32 56320, align 4, !dbg !12
@std.core.string.SURROGATE_HIGH_VALUE = internal unnamed_addr constant i32 55296, align 4, !dbg !14
@std.core.mem.allocator.thread_temp_allocator = external thread_local global ptr, align 8
@std.core.mem.allocator.thread_allocator = external thread_local global %any, align 8
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.file = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func = internal constant [9 x i8] c"join_new\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.16 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.17 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.18 = internal constant [10 x i8] c"string.c3\00", align 1
@.panic_msg.19 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.20 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.21 = internal constant [45 x i8] c"Dereference of null pointer, 'str' was null.\00", align 1
@.panic_msg.22 = internal constant [48 x i8] c"Dereference of null pointer, 's[1..]' was null.\00", align 1
@.func.23 = internal constant [15 x i8] c"new_from_utf32\00", align 1
@.func.24 = internal constant [15 x i8] c"new_from_utf16\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.25 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.func.26 = internal constant [5 x i8] c"trim\00", align 1
@.panic_msg.27 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.func.28 = internal constant [12 x i8] c"starts_with\00", align 1
@.func.29 = internal constant [10 x i8] c"ends_with\00", align 1
@.func.30 = internal constant [6 x i8] c"strip\00", align 1
@.func.31 = internal constant [10 x i8] c"strip_end\00", align 1
@.panic_msg.32 = internal constant [84 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be at least 1 character long'.\00", align 1
@.func.33 = internal constant [6 x i8] c"split\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.34, i64 7 }, i64 1 }, comdat, align 8
@.fault.34 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.35 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.36 = internal constant [35 x i8] c"@ensure \22return.len > 0\22 violated.\00", align 1
@.func.37 = internal constant [10 x i8] c"new_split\00", align 1
@.func.38 = internal constant [16 x i8] c"split_to_buffer\00", align 1
@.func.39 = internal constant [14 x i8] c"index_of_char\00", align 1
@.panic_msg.40 = internal constant [35 x i8] c"@ensure \22return < s.len\22 violated.\00", align 1
@.func.41 = internal constant [19 x i8] c"index_of_char_from\00", align 1
@.func.42 = internal constant [15 x i8] c"rindex_of_char\00", align 1
@.panic_msg.43 = internal constant [72 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be len 1 or more'.\00", align 1
@.func.44 = internal constant [9 x i8] c"index_of\00", align 1
@.panic_msg.45 = internal constant [54 x i8] c"Dereference of null pointer, 's[..^needed]' was null.\00", align 1
@.func.46 = internal constant [10 x i8] c"rindex_of\00", align 1
@.func.47 = internal constant [10 x i8] c"zstr_copy\00", align 1
@.panic_msg.48 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.49 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.50 = internal constant [7 x i8] c"concat\00", align 1
@.func.51 = internal constant [5 x i8] c"copy\00", align 1
@.panic_msg.52 = internal constant [60 x i8] c"Reference parameter 's' was passed a null pointer argument.\00", align 1
@.func.53 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.54 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.55 = internal constant [13 x i8] c"to_new_utf16\00", align 1
@.func.56 = internal constant [9 x i8] c"to_utf32\00", align 1
@.func.57 = internal constant [23 x i8] c"convert_ascii_to_lower\00", align 1
@.panic_msg.58 = internal constant [43 x i8] c"Dereference of null pointer, 'c' was null.\00", align 1
@.func.59 = internal constant [23 x i8] c"convert_ascii_to_upper\00", align 1
@.func.60 = internal constant [16 x i8] c"utf8_codepoints\00", align 1
@.panic_msg.61 = internal constant [80 x i8] c"@require \22(base <= 10 && base > 1) || base == 16\22 violated: 'Unsupported base'.\00", align 1
@.func.62 = internal constant [10 x i8] c"to_int128\00", align 1
@.func.63 = internal constant [8 x i8] c"to_long\00", align 1
@.func.64 = internal constant [7 x i8] c"to_int\00", align 1
@.func.65 = internal constant [9 x i8] c"to_short\00", align 1
@.func.66 = internal constant [9 x i8] c"to_ichar\00", align 1
@.func.67 = internal constant [11 x i8] c"to_uint128\00", align 1
@.func.68 = internal constant [9 x i8] c"to_ulong\00", align 1
@.func.69 = internal constant [8 x i8] c"to_uint\00", align 1
@.func.70 = internal constant [10 x i8] c"to_ushort\00", align 1
@.func.71 = internal constant [9 x i8] c"to_uchar\00", align 1
@to_double.BITS = internal unnamed_addr constant i32 53, align 4, !dbg !16
@to_double.EMIN = internal unnamed_addr constant i32 -1074, align 4, !dbg !19
@.file.72 = internal constant [18 x i8] c"string_to_real.c3\00", align 1
@.func.73 = internal constant [10 x i8] c"to_double\00", align 1
@.str = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.74 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.75 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.76 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.77 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.panic_msg.78 = internal constant [35 x i8] c"@require \22chars.len > 0\22 violated.\00", align 1
@to_double.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !21
@to_double.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !26
@.panic_msg.79 = internal constant [17 x i8] c"Assert violation\00", align 1
@.panic_msg.80 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.81 = internal constant [18 x i8] c"Division by zero.\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.82 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.83 = internal constant [11 x i8] c"% by zero.\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@to_float.BITS = internal unnamed_addr constant i32 24, align 4, !dbg !31
@to_float.EMIN = internal unnamed_addr constant i32 -149, align 4, !dbg !33
@.func.84 = internal constant [9 x i8] c"to_float\00", align 1
@.str.85 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.86 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.87 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.88 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@to_float.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !35
@to_float.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 16, !dbg !37
@.panic_msg.89 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.func.90 = internal constant [6 x i8] c"reset\00", align 1
@.func.91 = internal constant [5 x i8] c"next\00", align 1
@"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.IteratorResult" to i64), %"char[]" { ptr @.fault.92, i64 15 }, i64 1 }, comdat, align 8
@.fault.92 = internal constant [16 x i8] c"NO_MORE_ELEMENT\00", align 1
@"$ct.std.core.builtin.IteratorResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@std.core.string.KMAX = weak_odr local_unnamed_addr constant i32 128, comdat, align 4, !dbg !39
@std.core.string.MASK = weak_odr local_unnamed_addr constant i32 127, comdat, align 4, !dbg !42
@std.core.string.B1B_DIG = weak_odr local_unnamed_addr constant i32 2, comdat, align 4, !dbg !44
@std.core.string.B1B_MAX = weak_odr local_unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], comdat, align 4, !dbg !46

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.trim(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !56 {
entry:
  %start = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %.anon9 = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %end = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca i64, align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %indirectarg64 = alloca %"char[]", align 8
  %varargslots65 = alloca [2 x %any], align 16
  %indirectarg68 = alloca %"any[]", align 8
  %c71 = alloca i8, align 1
  %set72 = alloca %"char[]", align 8
  %blockret73 = alloca i8, align 1
  %.anon74 = alloca i64, align 8
  %.anon76 = alloca i64, align 8
  %ch80 = alloca i8, align 1
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %taddr108 = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %varargslots113 = alloca [2 x %any], align 16
  %indirectarg116 = alloca %"any[]", align 8
  %taddr120 = alloca i64, align 8
  %taddr121 = alloca i64, align 8
  %indirectarg122 = alloca %"char[]", align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %varargslots125 = alloca [2 x %any], align 16
  %indirectarg128 = alloca %"any[]", align 8
  %taddr131 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %indirectarg135 = alloca %"char[]", align 8
  %varargslots136 = alloca [2 x %any], align 16
  %indirectarg139 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !69, !DIExpression(), !70)
    #dbg_declare(ptr %2, !71, !DIExpression(), !70)
    #dbg_declare(ptr %start, !72, !DIExpression(), !73)
  store i64 0, ptr %start, align 8, !dbg !73
    #dbg_declare(ptr %len, !74, !DIExpression(), !75)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !75
  %3 = load i64, ptr %ptradd, align 8, !dbg !75
  store i64 %3, ptr %len, align 8, !dbg !75
  br label %loop.cond, !dbg !76

loop.cond:                                        ; preds = %loop.body26, %entry
  %4 = load i64, ptr %start, align 8, !dbg !77
  %5 = load i64, ptr %len, align 8, !dbg !77
  %lt = icmp ult i64 %4, %5, !dbg !77
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !77

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !77
  %6 = load i64, ptr %ptradd1, align 8, !dbg !77
  %7 = load ptr, ptr %1, align 8, !dbg !77
  %8 = load i64, ptr %start, align 8, !dbg !77
  %ge = icmp uge i64 %8, %6, !dbg !77
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !77
  br i1 %9, label %panic, label %checkok, !dbg !77

checkok:                                          ; preds = %and.rhs
  %ptradd7 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !77
  %10 = load i8, ptr %ptradd7, align 1
  store i8 %10, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %2, i32 16, i1 false)
    #dbg_declare(ptr %.anon, !79, !DIExpression(), !82)
  %ptradd8 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !82
  %11 = load i64, ptr %ptradd8, align 8, !dbg !82
  store i64 %11, ptr %.anon, align 8, !dbg !82
    #dbg_declare(ptr %.anon9, !79, !DIExpression(), !82)
  store i64 0, ptr %.anon9, align 8, !dbg !82
  br label %loop.cond10, !dbg !82

loop.cond10:                                      ; preds = %if.exit, %checkok
  %12 = load i64, ptr %.anon9, align 8, !dbg !82
  %13 = load i64, ptr %.anon, align 8, !dbg !82
  %lt11 = icmp ult i64 %12, %13, !dbg !82
  br i1 %lt11, label %loop.body, label %loop.exit, !dbg !82

loop.body:                                        ; preds = %loop.cond10
    #dbg_declare(ptr %ch, !83, !DIExpression(), !85)
  %ptradd12 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !85
  %14 = load i64, ptr %ptradd12, align 8, !dbg !85
  %15 = load ptr, ptr %set, align 8, !dbg !85
  %16 = load i64, ptr %.anon9, align 8, !dbg !85
  %ge13 = icmp uge i64 %16, %14, !dbg !85
  %17 = call i1 @llvm.expect.i1(i1 %ge13, i1 false), !dbg !85
  br i1 %17, label %panic14, label %checkok24, !dbg !85

checkok24:                                        ; preds = %loop.body
  %ptradd25 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !85
  %18 = load i8, ptr %ptradd25, align 1, !dbg !85
  store i8 %18, ptr %ch, align 1, !dbg !85
  %19 = load i8, ptr %ch, align 1, !dbg !85
  %20 = load i8, ptr %c, align 1, !dbg !85
  %eq = icmp eq i8 %19, %20, !dbg !85
  br i1 %eq, label %if.then, label %if.exit, !dbg !85

if.then:                                          ; preds = %checkok24
  store i8 1, ptr %blockret, align 1, !dbg !85
  br label %expr_block.exit, !dbg !85

if.exit:                                          ; preds = %checkok24
  %21 = load i64, ptr %.anon9, align 8, !dbg !82
  %addnuw = add nuw i64 %21, 1, !dbg !82
  store i64 %addnuw, ptr %.anon9, align 8, !dbg !82
  br label %loop.cond10, !dbg !82

loop.exit:                                        ; preds = %loop.cond10
  store i8 0, ptr %blockret, align 1, !dbg !86
  br label %expr_block.exit, !dbg !86

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %22 = load i8, ptr %blockret, align 1, !dbg !86
  %23 = trunc i8 %22 to i1, !dbg !86
  br label %and.phi, !dbg !86

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %23, %expr_block.exit ], !dbg !86
  br i1 %val, label %loop.body26, label %loop.exit27, !dbg !86

loop.body26:                                      ; preds = %and.phi
  %24 = load i64, ptr %start, align 8, !dbg !77
  %add = add i64 %24, 1, !dbg !77
  store i64 %add, ptr %start, align 8, !dbg !77
  br label %loop.cond, !dbg !77

loop.exit27:                                      ; preds = %and.phi
  %25 = load i64, ptr %start, align 8, !dbg !87
  %26 = load i64, ptr %len, align 8, !dbg !87
  %eq28 = icmp eq i64 %25, %26, !dbg !87
  br i1 %eq28, label %if.then29, label %if.exit53, !dbg !87

if.then29:                                        ; preds = %loop.exit27
  %27 = load %"char[]", ptr %1, align 8, !dbg !87
  %28 = extractvalue %"char[]" %27, 0, !dbg !87
  %29 = extractvalue %"char[]" %27, 1, !dbg !87
  %gt = icmp sgt i64 0, %29, !dbg !87
  %30 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !87
  br i1 %30, label %panic30, label %checkok40, !dbg !87

checkok40:                                        ; preds = %if.then29
  %lt41 = icmp slt i64 %29, 0, !dbg !87
  %31 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !87
  br i1 %31, label %panic42, label %checkok52, !dbg !87

checkok52:                                        ; preds = %checkok40
  %32 = insertvalue %"char[]" undef, ptr %28, 0, !dbg !87
  %33 = insertvalue %"char[]" %32, i64 0, 1, !dbg !87
  store %"char[]" %33, ptr %0, align 8, !dbg !87
  ret void, !dbg !87

if.exit53:                                        ; preds = %loop.exit27
    #dbg_declare(ptr %end, !88, !DIExpression(), !89)
  %34 = load i64, ptr %len, align 8, !dbg !89
  %sub = sub i64 %34, 1, !dbg !89
  store i64 %sub, ptr %end, align 8, !dbg !89
  br label %loop.cond54, !dbg !90

loop.cond54:                                      ; preds = %loop.body103, %if.exit53
  %35 = load i64, ptr %end, align 8, !dbg !91
  %36 = load i64, ptr %start, align 8, !dbg !91
  %gt55 = icmp ugt i64 %35, %36, !dbg !91
  br i1 %gt55, label %and.rhs56, label %and.phi101, !dbg !91

and.rhs56:                                        ; preds = %loop.cond54
  %ptradd57 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !91
  %37 = load i64, ptr %ptradd57, align 8, !dbg !91
  %38 = load ptr, ptr %1, align 8, !dbg !91
  %39 = load i64, ptr %end, align 8, !dbg !91
  %ge58 = icmp uge i64 %39, %37, !dbg !91
  %40 = call i1 @llvm.expect.i1(i1 %ge58, i1 false), !dbg !91
  br i1 %40, label %panic59, label %checkok69, !dbg !91

checkok69:                                        ; preds = %and.rhs56
  %ptradd70 = getelementptr inbounds i8, ptr %38, i64 %39, !dbg !91
  %41 = load i8, ptr %ptradd70, align 1
  store i8 %41, ptr %c71, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set72, ptr align 8 %2, i32 16, i1 false)
    #dbg_declare(ptr %.anon74, !93, !DIExpression(), !96)
  %ptradd75 = getelementptr inbounds i8, ptr %set72, i64 8, !dbg !96
  %42 = load i64, ptr %ptradd75, align 8, !dbg !96
  store i64 %42, ptr %.anon74, align 8, !dbg !96
    #dbg_declare(ptr %.anon76, !93, !DIExpression(), !96)
  store i64 0, ptr %.anon76, align 8, !dbg !96
  br label %loop.cond77, !dbg !96

loop.cond77:                                      ; preds = %if.exit97, %checkok69
  %43 = load i64, ptr %.anon76, align 8, !dbg !96
  %44 = load i64, ptr %.anon74, align 8, !dbg !96
  %lt78 = icmp ult i64 %43, %44, !dbg !96
  br i1 %lt78, label %loop.body79, label %loop.exit99, !dbg !96

loop.body79:                                      ; preds = %loop.cond77
    #dbg_declare(ptr %ch80, !97, !DIExpression(), !99)
  %ptradd81 = getelementptr inbounds i8, ptr %set72, i64 8, !dbg !99
  %45 = load i64, ptr %ptradd81, align 8, !dbg !99
  %46 = load ptr, ptr %set72, align 8, !dbg !99
  %47 = load i64, ptr %.anon76, align 8, !dbg !99
  %ge82 = icmp uge i64 %47, %45, !dbg !99
  %48 = call i1 @llvm.expect.i1(i1 %ge82, i1 false), !dbg !99
  br i1 %48, label %panic83, label %checkok93, !dbg !99

checkok93:                                        ; preds = %loop.body79
  %ptradd94 = getelementptr inbounds i8, ptr %46, i64 %47, !dbg !99
  %49 = load i8, ptr %ptradd94, align 1, !dbg !99
  store i8 %49, ptr %ch80, align 1, !dbg !99
  %50 = load i8, ptr %ch80, align 1, !dbg !99
  %51 = load i8, ptr %c71, align 1, !dbg !99
  %eq95 = icmp eq i8 %50, %51, !dbg !99
  br i1 %eq95, label %if.then96, label %if.exit97, !dbg !99

if.then96:                                        ; preds = %checkok93
  store i8 1, ptr %blockret73, align 1, !dbg !99
  br label %expr_block.exit100, !dbg !99

if.exit97:                                        ; preds = %checkok93
  %52 = load i64, ptr %.anon76, align 8, !dbg !96
  %addnuw98 = add nuw i64 %52, 1, !dbg !96
  store i64 %addnuw98, ptr %.anon76, align 8, !dbg !96
  br label %loop.cond77, !dbg !96

loop.exit99:                                      ; preds = %loop.cond77
  store i8 0, ptr %blockret73, align 1, !dbg !100
  br label %expr_block.exit100, !dbg !100

expr_block.exit100:                               ; preds = %loop.exit99, %if.then96
  %53 = load i8, ptr %blockret73, align 1, !dbg !100
  %54 = trunc i8 %53 to i1, !dbg !100
  br label %and.phi101, !dbg !100

and.phi101:                                       ; preds = %expr_block.exit100, %loop.cond54
  %val102 = phi i1 [ false, %loop.cond54 ], [ %54, %expr_block.exit100 ], !dbg !100
  br i1 %val102, label %loop.body103, label %loop.exit105, !dbg !100

loop.body103:                                     ; preds = %and.phi101
  %55 = load i64, ptr %end, align 8, !dbg !91
  %sub104 = sub i64 %55, 1, !dbg !91
  store i64 %sub104, ptr %end, align 8, !dbg !91
  br label %loop.cond54, !dbg !91

loop.exit105:                                     ; preds = %and.phi101
  %56 = load %"char[]", ptr %1, align 8, !dbg !101
  %57 = extractvalue %"char[]" %56, 0, !dbg !101
  %58 = load i64, ptr %start, align 8, !dbg !101
  %59 = extractvalue %"char[]" %56, 1, !dbg !101
  %gt106 = icmp ugt i64 %58, %59, !dbg !101
  %60 = call i1 @llvm.expect.i1(i1 %gt106, i1 false), !dbg !101
  br i1 %60, label %panic107, label %checkok117, !dbg !101

checkok117:                                       ; preds = %loop.exit105
  %61 = load i64, ptr %end, align 8, !dbg !101
  %gt118 = icmp ugt i64 %58, %61, !dbg !101
  %62 = call i1 @llvm.expect.i1(i1 %gt118, i1 false), !dbg !101
  br i1 %62, label %panic119, label %checkok129, !dbg !101

checkok129:                                       ; preds = %checkok117
  %le = icmp ule i64 %59, %61, !dbg !101
  %63 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !101
  br i1 %63, label %panic130, label %checkok140, !dbg !101

checkok140:                                       ; preds = %checkok129
  %64 = add i64 %61, 1, !dbg !101
  %size = sub i64 %64, %58, !dbg !101
  %ptradd141 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !101
  %65 = insertvalue %"char[]" undef, ptr %ptradd141, 0, !dbg !101
  %66 = insertvalue %"char[]" %65, i64 %size, 1, !dbg !101
  store %"char[]" %66, ptr %0, align 8, !dbg !101
  ret void, !dbg !101

panic:                                            ; preds = %and.rhs
  store i64 %6, ptr %taddr, align 8
  %67 = insertvalue %any undef, ptr %taddr, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr2, align 8
  %69 = insertvalue %any undef, ptr %taddr2, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg4, align 8
  store %any %68, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %70, ptr %ptradd5, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 151, ptr align 8 %indirectarg6), !dbg !77
  unreachable, !dbg !77

panic14:                                          ; preds = %loop.body
  store i64 %14, ptr %taddr15, align 8
  %72 = insertvalue %any undef, ptr %taddr15, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr16, align 8
  %74 = insertvalue %any undef, ptr %taddr16, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg19, align 8
  store %any %73, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %75, ptr %ptradd21, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 110, ptr align 8 %indirectarg23), !dbg !85
  unreachable, !dbg !85

panic30:                                          ; preds = %if.then29
  store i64 %29, ptr %taddr31, align 8
  %77 = insertvalue %any undef, ptr %taddr31, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %79 = insertvalue %any undef, ptr %taddr32, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg35, align 8
  store %any %78, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %80, ptr %ptradd37, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 152, ptr align 8 %indirectarg39), !dbg !87
  unreachable, !dbg !87

panic42:                                          ; preds = %checkok40
  store i64 -1, ptr %taddr43, align 8
  %82 = insertvalue %any undef, ptr %taddr43, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %29, ptr %taddr44, align 8
  %84 = insertvalue %any undef, ptr %taddr44, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg47, align 8
  store %any %83, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %85, ptr %ptradd49, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 152, ptr align 8 %indirectarg51), !dbg !87
  unreachable, !dbg !87

panic59:                                          ; preds = %and.rhs56
  store i64 %37, ptr %taddr60, align 8
  %87 = insertvalue %any undef, ptr %taddr60, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr61, align 8
  %89 = insertvalue %any undef, ptr %taddr61, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg63, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg64, align 8
  store %any %88, ptr %varargslots65, align 16
  %ptradd66 = getelementptr inbounds i8, ptr %varargslots65, i64 16
  store %any %90, ptr %ptradd66, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots65, 0
  %"$$temp67" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp67", ptr %indirectarg68, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, ptr align 8 %indirectarg64, i32 154, ptr align 8 %indirectarg68), !dbg !91
  unreachable, !dbg !91

panic83:                                          ; preds = %loop.body79
  store i64 %45, ptr %taddr84, align 8
  %92 = insertvalue %any undef, ptr %taddr84, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr85, align 8
  %94 = insertvalue %any undef, ptr %taddr85, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg88, align 8
  store %any %93, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %95, ptr %ptradd90, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 110, ptr align 8 %indirectarg92), !dbg !99
  unreachable, !dbg !99

panic107:                                         ; preds = %loop.exit105
  store i64 %59, ptr %taddr108, align 8
  %97 = insertvalue %any undef, ptr %taddr108, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr109, align 8
  %99 = insertvalue %any undef, ptr %taddr109, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg112, align 8
  store %any %98, ptr %varargslots113, align 16
  %ptradd114 = getelementptr inbounds i8, ptr %varargslots113, i64 16
  store %any %100, ptr %ptradd114, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots113, 0
  %"$$temp115" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp115", ptr %indirectarg116, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 155, ptr align 8 %indirectarg116), !dbg !101
  unreachable, !dbg !101

panic119:                                         ; preds = %checkok117
  store i64 %58, ptr %taddr120, align 8
  %102 = insertvalue %any undef, ptr %taddr120, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %61, ptr %taddr121, align 8
  %104 = insertvalue %any undef, ptr %taddr121, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 44 }, ptr %indirectarg122, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg124, align 8
  store %any %103, ptr %varargslots125, align 16
  %ptradd126 = getelementptr inbounds i8, ptr %varargslots125, i64 16
  store %any %105, ptr %ptradd126, align 16
  %106 = insertvalue %"any[]" undef, ptr %varargslots125, 0
  %"$$temp127" = insertvalue %"any[]" %106, i64 2, 1
  store %"any[]" %"$$temp127", ptr %indirectarg128, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg122, ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, i32 155, ptr align 8 %indirectarg128), !dbg !101
  unreachable, !dbg !101

panic130:                                         ; preds = %checkok129
  store i64 %61, ptr %taddr131, align 8
  %107 = insertvalue %any undef, ptr %taddr131, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %59, ptr %taddr132, align 8
  %109 = insertvalue %any undef, ptr %taddr132, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg134, align 8
  store %"char[]" { ptr @.func.26, i64 4 }, ptr %indirectarg135, align 8
  store %any %108, ptr %varargslots136, align 16
  %ptradd137 = getelementptr inbounds i8, ptr %varargslots136, i64 16
  store %any %110, ptr %ptradd137, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp138" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp138", ptr %indirectarg139, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, ptr align 8 %indirectarg135, i32 155, ptr align 8 %indirectarg139), !dbg !101
  unreachable, !dbg !101
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.String.starts_with(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !102 {
entry:
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
    #dbg_declare(ptr %0, !106, !DIExpression(), !107)
    #dbg_declare(ptr %1, !108, !DIExpression(), !107)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !109
  %2 = load i64, ptr %ptradd, align 8, !dbg !109
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !109
  %3 = load i64, ptr %ptradd1, align 8, !dbg !109
  %gt = icmp ugt i64 %2, %3, !dbg !109
  br i1 %gt, label %if.then, label %if.exit, !dbg !109

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !109

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !110
  %4 = load i64, ptr %ptradd2, align 8, !dbg !110
  %i2nb = icmp eq i64 %4, 0, !dbg !110
  br i1 %i2nb, label %if.then3, label %if.exit4, !dbg !110

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !110

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %0, align 8, !dbg !111
  %6 = extractvalue %"char[]" %5, 0, !dbg !111
  %7 = extractvalue %"char[]" %5, 1, !dbg !111
  %gt5 = icmp ugt i64 0, %7, !dbg !111
  %8 = call i1 @llvm.expect.i1(i1 %gt5, i1 false), !dbg !111
  br i1 %8, label %panic, label %checkok, !dbg !111

checkok:                                          ; preds = %if.exit4
  %ptradd11 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !111
  %9 = load i64, ptr %ptradd11, align 8, !dbg !111
  %add = add i64 0, %9, !dbg !111
  %lt = icmp ult i64 %7, %add, !dbg !111
  %sub = sub i64 %add, 1, !dbg !111
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !111
  br i1 %10, label %panic12, label %checkok22, !dbg !111

checkok22:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !111
  %11 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !111
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !111
  %13 = load %"char[]", ptr %1, align 8, !dbg !111
  %14 = extractvalue %"char[]" %12, 1, !dbg !111
  %15 = extractvalue %"char[]" %13, 1, !dbg !111
  %16 = extractvalue %"char[]" %12, 0, !dbg !111
  %17 = extractvalue %"char[]" %13, 0, !dbg !111
  %eq = icmp eq i64 %14, %15, !dbg !111
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !111

slice_cmp_values:                                 ; preds = %checkok22
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %18 = load i64, ptr %cmp.idx, align 8
  %lt23 = icmp slt i64 %18, %14
  br i1 %lt23, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd24 = getelementptr inbounds i8, ptr %16, i64 %18
  %ptradd25 = getelementptr inbounds i8, ptr %17, i64 %18
  %19 = load i8, ptr %ptradd24, align 1
  %20 = load i8, ptr %ptradd25, align 1
  %eq26 = icmp eq i8 %19, %20
  %21 = add i64 %18, 1
  store i64 %21, ptr %cmp.idx, align 8
  br i1 %eq26, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok22
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok22 ], [ false, %slice_loop_comparison ]
  %22 = zext i1 %slice_cmp_phi to i8
  ret i8 %22

panic:                                            ; preds = %if.exit4
  store i64 %7, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %25 = insertvalue %any undef, ptr %taddr6, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.28, i64 11 }, ptr %indirectarg8, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd9, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 170, ptr align 8 %indirectarg10), !dbg !111
  unreachable, !dbg !111

panic12:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr13, align 8
  %28 = insertvalue %any undef, ptr %taddr13, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr14, align 8
  %30 = insertvalue %any undef, ptr %taddr14, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.28, i64 11 }, ptr %indirectarg17, align 8
  store %any %29, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %31, ptr %ptradd19, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 170, ptr align 8 %indirectarg21), !dbg !111
  unreachable, !dbg !111
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.String.ends_with(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !112 {
entry:
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
    #dbg_declare(ptr %0, !113, !DIExpression(), !114)
    #dbg_declare(ptr %1, !115, !DIExpression(), !114)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !116
  %2 = load i64, ptr %ptradd, align 8, !dbg !116
  %ptradd1 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !116
  %3 = load i64, ptr %ptradd1, align 8, !dbg !116
  %gt = icmp ugt i64 %2, %3, !dbg !116
  br i1 %gt, label %if.then, label %if.exit, !dbg !116

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !116

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !117
  %4 = load i64, ptr %ptradd2, align 8, !dbg !117
  %i2nb = icmp eq i64 %4, 0, !dbg !117
  br i1 %i2nb, label %if.then3, label %if.exit4, !dbg !117

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !117

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %0, align 8, !dbg !118
  %6 = extractvalue %"char[]" %5, 0, !dbg !118
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !118
  %7 = load i64, ptr %ptradd5, align 8, !dbg !118
  %8 = extractvalue %"char[]" %5, 1, !dbg !118
  %sub = sub i64 %8, %7, !dbg !118
  %gt6 = icmp ugt i64 %sub, %8, !dbg !118
  %9 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !118
  br i1 %9, label %panic, label %checkok, !dbg !118

checkok:                                          ; preds = %if.exit4
  %size = sub i64 %8, %sub, !dbg !118
  %ptradd12 = getelementptr inbounds i8, ptr %6, i64 %sub, !dbg !118
  %10 = insertvalue %"char[]" undef, ptr %ptradd12, 0, !dbg !118
  %11 = insertvalue %"char[]" %10, i64 %size, 1, !dbg !118
  %12 = load %"char[]", ptr %1, align 8, !dbg !118
  %13 = extractvalue %"char[]" %11, 1, !dbg !118
  %14 = extractvalue %"char[]" %12, 1, !dbg !118
  %15 = extractvalue %"char[]" %11, 0, !dbg !118
  %16 = extractvalue %"char[]" %12, 0, !dbg !118
  %eq = icmp eq i64 %13, %14, !dbg !118
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !118

slice_cmp_values:                                 ; preds = %checkok
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %17 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %17, %13
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd13 = getelementptr inbounds i8, ptr %15, i64 %17
  %ptradd14 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = load i8, ptr %ptradd13, align 1
  %19 = load i8, ptr %ptradd14, align 1
  %eq15 = icmp eq i8 %18, %19
  %20 = add i64 %17, 1
  store i64 %20, ptr %cmp.idx, align 8
  br i1 %eq15, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok ], [ false, %slice_loop_comparison ]
  %21 = zext i1 %slice_cmp_phi to i8
  ret i8 %21

panic:                                            ; preds = %if.exit4
  store i64 %8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr7, align 8
  %24 = insertvalue %any undef, ptr %taddr7, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.29, i64 9 }, ptr %indirectarg9, align 8
  store %any %23, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd10, align 16
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 185, ptr align 8 %indirectarg11), !dbg !118
  unreachable, !dbg !118
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.strip(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !119 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !120, !DIExpression(), !121)
    #dbg_declare(ptr %2, !122, !DIExpression(), !121)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !123
  %3 = load i64, ptr %ptradd, align 8, !dbg !123
  %i2nb = icmp eq i64 %3, 0, !dbg !123
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !123

or.rhs:                                           ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %4 = call i8 @std.core.String.starts_with(ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !123
  %5 = trunc i8 %4 to i1, !dbg !123
  %not = xor i1 %5, true, !dbg !123
  br label %or.phi, !dbg !123

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !123
  br i1 %val, label %if.then, label %if.exit, !dbg !123

if.then:                                          ; preds = %or.phi
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %1, i32 16, i1 false), !dbg !123
  ret void, !dbg !123

if.exit:                                          ; preds = %or.phi
  %6 = load %"char[]", ptr %1, align 8, !dbg !124
  %7 = extractvalue %"char[]" %6, 0, !dbg !124
  %ptradd2 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !124
  %8 = load i64, ptr %ptradd2, align 8, !dbg !124
  %9 = extractvalue %"char[]" %6, 1, !dbg !124
  %gt = icmp ugt i64 %8, %9, !dbg !124
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !124
  br i1 %10, label %panic, label %checkok, !dbg !124

checkok:                                          ; preds = %if.exit
  %size = sub i64 %9, %8, !dbg !124
  %ptradd9 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !124
  %11 = insertvalue %"char[]" undef, ptr %ptradd9, 0, !dbg !124
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !124
  store %"char[]" %12, ptr %0, align 8, !dbg !124
  ret void, !dbg !124

panic:                                            ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr3, align 8
  %15 = insertvalue %any undef, ptr %taddr3, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 5 }, ptr %indirectarg6, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd7, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 199, ptr align 8 %indirectarg8), !dbg !124
  unreachable, !dbg !124
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.strip_end(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !125 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !126, !DIExpression(), !127)
    #dbg_declare(ptr %2, !128, !DIExpression(), !127)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !129
  %3 = load i64, ptr %ptradd, align 8, !dbg !129
  %i2nb = icmp eq i64 %3, 0, !dbg !129
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !129

or.rhs:                                           ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %4 = call i8 @std.core.String.ends_with(ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !129
  %5 = trunc i8 %4 to i1, !dbg !129
  %not = xor i1 %5, true, !dbg !129
  br label %or.phi, !dbg !129

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !129
  br i1 %val, label %if.then, label %if.exit, !dbg !129

if.then:                                          ; preds = %or.phi
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %1, i32 16, i1 false), !dbg !129
  ret void, !dbg !129

if.exit:                                          ; preds = %or.phi
  %6 = load %"char[]", ptr %1, align 8, !dbg !130
  %7 = extractvalue %"char[]" %6, 0, !dbg !130
  %8 = extractvalue %"char[]" %6, 1, !dbg !130
  %gt = icmp ugt i64 0, %8, !dbg !130
  %9 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !130
  br i1 %9, label %panic, label %checkok, !dbg !130

checkok:                                          ; preds = %if.exit
  %ptradd8 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !130
  %10 = load i64, ptr %ptradd8, align 8, !dbg !130
  %ptradd9 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !130
  %11 = load i64, ptr %ptradd9, align 8, !dbg !130
  %sub = sub i64 %10, %11, !dbg !130
  %add = add i64 0, %sub, !dbg !130
  %lt = icmp ult i64 %8, %add, !dbg !130
  %sub10 = sub i64 %add, 1, !dbg !130
  %12 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !130
  br i1 %12, label %panic11, label %checkok21, !dbg !130

checkok21:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !130
  %13 = insertvalue %"char[]" undef, ptr %7, 0, !dbg !130
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !130
  store %"char[]" %14, ptr %0, align 8, !dbg !130
  ret void, !dbg !130

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %17 = insertvalue %any undef, ptr %taddr2, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.31, i64 9 }, ptr %indirectarg5, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd6, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 214, ptr align 8 %indirectarg7), !dbg !130
  unreachable, !dbg !130

panic11:                                          ; preds = %checkok
  store i64 %sub10, ptr %taddr12, align 8
  %20 = insertvalue %any undef, ptr %taddr12, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr13, align 8
  %22 = insertvalue %any undef, ptr %taddr13, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.31, i64 9 }, ptr %indirectarg16, align 8
  store %any %21, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %23, ptr %ptradd18, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 214, ptr align 8 %indirectarg20), !dbg !130
  unreachable, !dbg !130
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.split(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i64 %3, ptr align 8 %4, i8 zeroext %5) #0 comdat !dbg !131 {
entry:
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %holder = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %elements4 = alloca i64, align 8
  %allocator5 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %res = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %varargslots56 = alloca [2 x %any], align 16
  %indirectarg59 = alloca %"any[]", align 8
  %allocator71 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var73 = alloca i64, align 8
  %allocator74 = alloca %any, align 8
  %ptr75 = alloca ptr, align 8
  %new_size76 = alloca i64, align 8
  %blockret77 = alloca ptr, align 8
  %allocator80 = alloca %any, align 8
  %ptr81 = alloca ptr, align 8
  %.inlinecache86 = alloca ptr, align 8
  %.cachedtype87 = alloca ptr, align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %.inlinecache104 = alloca ptr, align 8
  %.cachedtype105 = alloca ptr, align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %retparam117 = alloca ptr, align 8
  %.inlinecache123 = alloca ptr, align 8
  %.cachedtype124 = alloca ptr, align 8
  %indirectarg132 = alloca %"char[]", align 8
  %indirectarg133 = alloca %"char[]", align 8
  %indirectarg134 = alloca %"char[]", align 8
  %retparam136 = alloca ptr, align 8
  %indirectarg142 = alloca %"char[]", align 8
  %indirectarg143 = alloca %"char[]", align 8
  %indirectarg144 = alloca %"char[]", align 8
  %varargslots145 = alloca [1 x %any], align 16
  %indirectarg147 = alloca %"any[]", align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !145, !DIExpression(), !146)
    #dbg_declare(ptr %2, !147, !DIExpression(), !146)
  store ptr null, ptr %.cachedtype124, align 8
  store ptr null, ptr %.cachedtype105, align 8
  store ptr null, ptr %.cachedtype87, align 8
  store ptr null, ptr %.cachedtype, align 8
  store i64 %3, ptr %max, align 8
    #dbg_declare(ptr %max, !148, !DIExpression(), !146)
    #dbg_declare(ptr %4, !149, !DIExpression(), !146)
  store i8 %5, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !150, !DIExpression(), !146)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !151
  %6 = load i64, ptr %ptradd, align 8, !dbg !151
  %lt = icmp ult i64 0, %6, !dbg !151
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !151

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.32, i64 83 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 226), !dbg !151
  unreachable, !dbg !151

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %capacity, !153, !DIExpression(), !154)
  store i64 16, ptr %capacity, align 8, !dbg !154
    #dbg_declare(ptr %i, !155, !DIExpression(), !156)
  store i64 0, ptr %i, align 8, !dbg !156
    #dbg_declare(ptr %holder, !157, !DIExpression(), !158)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %4, i32 16, i1 false)
  %8 = load i64, ptr %capacity, align 8
  store i64 %8, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %9 = load i64, ptr %elements, align 8
  store i64 %9, ptr %elements4, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator5, ptr align 8 %allocator3, i32 16, i1 false)
  %10 = load i64, ptr %elements4, align 8, !dbg !159
  %mul = mul i64 16, %10, !dbg !159
  store i64 %mul, ptr %size, align 8
  %11 = load i64, ptr %size, align 8, !dbg !164
  %i2nb = icmp eq i64 %11, 0, !dbg !164
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !164

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !164
  br label %expr_block.exit, !dbg !164

if.exit:                                          ; preds = %assert_ok
  %ptradd6 = getelementptr inbounds i8, ptr %allocator5, i64 8, !dbg !166
  %12 = load i64, ptr %ptradd6, align 8, !dbg !166
  %13 = inttoptr i64 %12 to ptr, !dbg !166
  %type = load ptr, ptr %.cachedtype, align 8
  %14 = icmp eq ptr %13, %type
  br i1 %14, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 16
  %15 = load ptr, ptr %ptradd7, align 8
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.acquire")
  store ptr %16, ptr %.inlinecache, align 8
  store ptr %13, ptr %.cachedtype, align 8
  br label %17

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %17

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ]
  %18 = icmp eq ptr %fn_phi, null
  br i1 %18, label %missing_function, label %match

missing_function:                                 ; preds = %17
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg10, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 68), !dbg !168
  unreachable, !dbg !168

match:                                            ; preds = %17
  %20 = load ptr, ptr %allocator5, align 8
  %21 = load i64, ptr %size, align 8
  %22 = call i64 %fn_phi(ptr %retparam, ptr %20, i64 %21, i32 0, i64 0), !dbg !168
  %not_err = icmp eq i64 %22, 0, !dbg !168
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !168
  br i1 %23, label %after_check, label %assign_optional, !dbg !168

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var, align 8, !dbg !168
  br label %panic_block, !dbg !168

after_check:                                      ; preds = %match
  %24 = load ptr, ptr %retparam, align 8, !dbg !168
  store ptr %24, ptr %blockret, align 8, !dbg !168
  br label %expr_block.exit, !dbg !168

expr_block.exit:                                  ; preds = %after_check, %if.then
  %25 = load ptr, ptr %blockret, align 8, !dbg !168
  store ptr %25, ptr %taddr, align 8
  %26 = load ptr, ptr %taddr, align 8
  %27 = load i64, ptr %elements4, align 8, !dbg !159
  %add = add i64 0, %27, !dbg !159
  %size11 = sub i64 %add, 0, !dbg !159
  %28 = insertvalue %"char[][]" undef, ptr %26, 0, !dbg !159
  %29 = insertvalue %"char[][]" %28, i64 %size11, 1, !dbg !159
  br label %noerr_block, !dbg !159

panic_block:                                      ; preds = %assign_optional
  %30 = insertvalue %any undef, ptr %error_var, 0, !dbg !159
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !159
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg14, align 8
  store %any %31, ptr %varargslots, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 269, ptr align 8 %indirectarg15), !dbg !162
  unreachable, !dbg !162

noerr_block:                                      ; preds = %expr_block.exit
  %33 = extractvalue %"char[][]" %29, 0, !dbg !162
  store ptr %33, ptr %holder, align 8, !dbg !162
    #dbg_declare(ptr %no_more, !169, !DIExpression(), !170)
  store i8 0, ptr %no_more, align 1, !dbg !170
  br label %loop.cond, !dbg !171

loop.cond:                                        ; preds = %if.exit149, %if.then66, %noerr_block
  %34 = load i8, ptr %no_more, align 1, !dbg !172
  %35 = trunc i8 %34 to i1, !dbg !172
  %not = xor i1 %35, true, !dbg !172
  br i1 %not, label %loop.body, label %loop.exit, !dbg !172

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !174, !DIExpression(), !176)
  %36 = load i64, ptr %i, align 8, !dbg !176
  %37 = load i64, ptr %max, align 8, !dbg !176
  %sub = sub i64 %37, 1, !dbg !176
  %eq = icmp eq i64 %sub, %36, !dbg !176
  %check = icmp sge i64 %sub, 0, !dbg !176
  %siui-eq = and i1 %check, %eq, !dbg !176
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !176

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !176
  br label %after_assign, !dbg !176

cond.rhs:                                         ; preds = %loop.body
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg17, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg18, ptr align 8 %2, i32 16, i1 false)
  %38 = call i64 @std.core.String.index_of(ptr %retparam16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18), !dbg !176
  %not_err19 = icmp eq i64 %38, 0, !dbg !176
  %39 = call i1 @llvm.expect.i1(i1 %not_err19, i1 true), !dbg !176
  br i1 %39, label %after_check21, label %assign_optional20, !dbg !176

assign_optional20:                                ; preds = %cond.rhs
  store i64 %38, ptr %index.f, align 8, !dbg !176
  br label %after_assign, !dbg !176

after_check21:                                    ; preds = %cond.rhs
  %40 = load i64, ptr %retparam16, align 8, !dbg !176
  br label %cond.phi, !dbg !176

cond.phi:                                         ; preds = %after_check21
  store i64 %40, ptr %index, align 8, !dbg !176
  store i64 0, ptr %index.f, align 8, !dbg !176
  br label %after_assign, !dbg !176

after_assign:                                     ; preds = %cond.phi, %assign_optional20, %cond.lhs
    #dbg_declare(ptr %res, !177, !DIExpression(), !178)
  %load.err = load i64, ptr %index.f, align 8, !dbg !179
  %result = icmp eq i64 %load.err, 0, !dbg !179
  br i1 %result, label %if.then22, label %if.else, !dbg !179

if.then22:                                        ; preds = %after_assign
  %41 = load %"char[]", ptr %1, align 8, !dbg !180
  %42 = extractvalue %"char[]" %41, 0, !dbg !180
  %43 = extractvalue %"char[]" %41, 1, !dbg !180
  %gt = icmp ugt i64 0, %43, !dbg !180
  %44 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !180
  br i1 %44, label %panic, label %checkok, !dbg !180

checkok:                                          ; preds = %if.then22
  %45 = load i64, ptr %index, align 8, !dbg !180
  %add32 = add i64 0, %45, !dbg !180
  %lt33 = icmp ult i64 %43, %add32, !dbg !180
  %sub34 = sub i64 %add32, 1, !dbg !180
  %46 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !180
  br i1 %46, label %panic35, label %checkok45, !dbg !180

checkok45:                                        ; preds = %checkok
  %size46 = sub i64 %add32, 0, !dbg !180
  %47 = insertvalue %"char[]" undef, ptr %42, 0, !dbg !180
  %48 = insertvalue %"char[]" %47, i64 %size46, 1, !dbg !180
  store %"char[]" %48, ptr %res, align 8, !dbg !180
  %49 = load %"char[]", ptr %1, align 8, !dbg !182
  %50 = extractvalue %"char[]" %49, 0, !dbg !182
  %51 = load i64, ptr %index, align 8, !dbg !182
  %ptradd47 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !182
  %52 = load i64, ptr %ptradd47, align 8, !dbg !182
  %add48 = add i64 %51, %52, !dbg !182
  %53 = extractvalue %"char[]" %49, 1, !dbg !182
  %gt49 = icmp ugt i64 %add48, %53, !dbg !182
  %54 = call i1 @llvm.expect.i1(i1 %gt49, i1 false), !dbg !182
  br i1 %54, label %panic50, label %checkok60, !dbg !182

checkok60:                                        ; preds = %checkok45
  %size61 = sub i64 %53, %add48, !dbg !182
  %ptradd62 = getelementptr inbounds i8, ptr %50, i64 %add48, !dbg !182
  %55 = insertvalue %"char[]" undef, ptr %ptradd62, 0, !dbg !182
  %56 = insertvalue %"char[]" %55, i64 %size61, 1, !dbg !182
  store %"char[]" %56, ptr %1, align 8, !dbg !182
  br label %if.exit63, !dbg !182

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %1, i32 16, i1 false), !dbg !183
  store i8 1, ptr %no_more, align 1, !dbg !185
  br label %if.exit63, !dbg !185

if.exit63:                                        ; preds = %if.else, %checkok60
  %ptradd64 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !186
  %57 = load i64, ptr %ptradd64, align 8, !dbg !186
  %i2nb65 = icmp eq i64 %57, 0, !dbg !186
  br i1 %i2nb65, label %and.rhs, label %and.phi, !dbg !186

and.rhs:                                          ; preds = %if.exit63
  %58 = load i8, ptr %skip_empty, align 1, !dbg !186
  %59 = trunc i8 %58 to i1, !dbg !186
  br label %and.phi, !dbg !186

and.phi:                                          ; preds = %and.rhs, %if.exit63
  %val = phi i1 [ false, %if.exit63 ], [ %59, %and.rhs ], !dbg !186
  br i1 %val, label %if.then66, label %if.exit67, !dbg !186

if.then66:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !187

if.exit67:                                        ; preds = %and.phi
  %60 = load i64, ptr %i, align 8, !dbg !189
  %61 = load i64, ptr %capacity, align 8, !dbg !189
  %eq68 = icmp eq i64 %60, %61, !dbg !189
  br i1 %eq68, label %if.then69, label %if.exit149, !dbg !189

if.then69:                                        ; preds = %if.exit67
  %62 = load i64, ptr %capacity, align 8, !dbg !190
  %mul70 = mul i64 %62, 2, !dbg !190
  store i64 %mul70, ptr %capacity, align 8, !dbg !190
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator71, ptr align 8 %4, i32 16, i1 false)
  %63 = load ptr, ptr %holder, align 8, !dbg !192
  store ptr %63, ptr %ptr, align 8
  %64 = load i64, ptr %capacity, align 8, !dbg !192
  %mul72 = mul i64 16, %64, !dbg !192
  store i64 %mul72, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator74, ptr align 8 %allocator71, i32 16, i1 false)
  %65 = load ptr, ptr %ptr, align 8
  store ptr %65, ptr %ptr75, align 8
  %66 = load i64, ptr %new_size, align 8
  store i64 %66, ptr %new_size76, align 8
  %67 = load i64, ptr %new_size76, align 8, !dbg !193
  %i2nb78 = icmp eq i64 %67, 0, !dbg !193
  br i1 %i2nb78, label %if.then79, label %if.exit100, !dbg !193

if.then79:                                        ; preds = %if.then69
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator80, ptr align 8 %allocator74, i32 16, i1 false)
  %68 = load ptr, ptr %ptr75, align 8
  store ptr %68, ptr %ptr81, align 8
  %69 = load ptr, ptr %ptr81, align 8, !dbg !197
  %i2nb82 = icmp eq ptr %69, null, !dbg !197
  br i1 %i2nb82, label %if.then83, label %if.exit84, !dbg !197

if.then83:                                        ; preds = %if.then79
  br label %expr_block.exit99, !dbg !197

if.exit84:                                        ; preds = %if.then79
  %ptradd85 = getelementptr inbounds i8, ptr %allocator80, i64 8, !dbg !201
  %70 = load i64, ptr %ptradd85, align 8, !dbg !201
  %71 = inttoptr i64 %70 to ptr, !dbg !201
  %type88 = load ptr, ptr %.cachedtype87, align 8
  %72 = icmp eq ptr %71, %type88
  br i1 %72, label %cache_hit91, label %cache_miss89

cache_miss89:                                     ; preds = %if.exit84
  %ptradd90 = getelementptr inbounds i8, ptr %71, i64 16
  %73 = load ptr, ptr %ptradd90, align 8
  %74 = call ptr @.dyn_search(ptr %73, ptr @"$sel.release")
  store ptr %74, ptr %.inlinecache86, align 8
  store ptr %71, ptr %.cachedtype87, align 8
  br label %75

cache_hit91:                                      ; preds = %if.exit84
  %cache_hit_fn92 = load ptr, ptr %.inlinecache86, align 8
  br label %75

75:                                               ; preds = %cache_hit91, %cache_miss89
  %fn_phi93 = phi ptr [ %cache_hit_fn92, %cache_hit91 ], [ %74, %cache_miss89 ]
  %76 = icmp eq ptr %fn_phi93, null
  br i1 %76, label %missing_function94, label %match98

missing_function94:                               ; preds = %75
  store %"char[]" { ptr @.panic_msg.25, i64 44 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg97, align 8
  %77 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %77(ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, i32 105), !dbg !201
  unreachable, !dbg !201

match98:                                          ; preds = %75
  %78 = load ptr, ptr %allocator80, align 8, !dbg !201
  %79 = load ptr, ptr %ptr81, align 8, !dbg !201
  call void %fn_phi93(ptr %78, ptr %79, i8 zeroext 0), !dbg !201
  br label %expr_block.exit99, !dbg !201

expr_block.exit99:                                ; preds = %match98, %if.then83
  store ptr null, ptr %blockret77, align 8, !dbg !202
  br label %expr_block.exit140, !dbg !202

if.exit100:                                       ; preds = %if.then69
  %80 = load ptr, ptr %ptr75, align 8, !dbg !203
  %i2nb101 = icmp eq ptr %80, null, !dbg !203
  br i1 %i2nb101, label %if.then102, label %if.exit121, !dbg !203

if.then102:                                       ; preds = %if.exit100
  %ptradd103 = getelementptr inbounds i8, ptr %allocator74, i64 8, !dbg !204
  %81 = load i64, ptr %ptradd103, align 8, !dbg !204
  %82 = inttoptr i64 %81 to ptr, !dbg !204
  %type106 = load ptr, ptr %.cachedtype105, align 8
  %83 = icmp eq ptr %82, %type106
  br i1 %83, label %cache_hit109, label %cache_miss107

cache_miss107:                                    ; preds = %if.then102
  %ptradd108 = getelementptr inbounds i8, ptr %82, i64 16
  %84 = load ptr, ptr %ptradd108, align 8
  %85 = call ptr @.dyn_search(ptr %84, ptr @"$sel.acquire")
  store ptr %85, ptr %.inlinecache104, align 8
  store ptr %82, ptr %.cachedtype105, align 8
  br label %86

cache_hit109:                                     ; preds = %if.then102
  %cache_hit_fn110 = load ptr, ptr %.inlinecache104, align 8
  br label %86

86:                                               ; preds = %cache_hit109, %cache_miss107
  %fn_phi111 = phi ptr [ %cache_hit_fn110, %cache_hit109 ], [ %85, %cache_miss107 ]
  %87 = icmp eq ptr %fn_phi111, null
  br i1 %87, label %missing_function112, label %match116

missing_function112:                              ; preds = %86
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg115, align 8
  %88 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %88(ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, i32 95), !dbg !203
  unreachable, !dbg !203

match116:                                         ; preds = %86
  %89 = load ptr, ptr %allocator74, align 8
  %90 = load i64, ptr %new_size76, align 8
  %91 = call i64 %fn_phi111(ptr %retparam117, ptr %89, i64 %90, i32 0, i64 0), !dbg !203
  %not_err118 = icmp eq i64 %91, 0, !dbg !203
  %92 = call i1 @llvm.expect.i1(i1 %not_err118, i1 true), !dbg !203
  br i1 %92, label %after_check120, label %assign_optional119, !dbg !203

assign_optional119:                               ; preds = %match116
  store i64 %91, ptr %error_var73, align 8, !dbg !203
  br label %panic_block141, !dbg !203

after_check120:                                   ; preds = %match116
  %93 = load ptr, ptr %retparam117, align 8, !dbg !203
  store ptr %93, ptr %blockret77, align 8, !dbg !203
  br label %expr_block.exit140, !dbg !203

if.exit121:                                       ; preds = %if.exit100
  %ptradd122 = getelementptr inbounds i8, ptr %allocator74, i64 8, !dbg !206
  %94 = load i64, ptr %ptradd122, align 8, !dbg !206
  %95 = inttoptr i64 %94 to ptr, !dbg !206
  %type125 = load ptr, ptr %.cachedtype124, align 8
  %96 = icmp eq ptr %95, %type125
  br i1 %96, label %cache_hit128, label %cache_miss126

cache_miss126:                                    ; preds = %if.exit121
  %ptradd127 = getelementptr inbounds i8, ptr %95, i64 16
  %97 = load ptr, ptr %ptradd127, align 8
  %98 = call ptr @.dyn_search(ptr %97, ptr @"$sel.resize")
  store ptr %98, ptr %.inlinecache123, align 8
  store ptr %95, ptr %.cachedtype124, align 8
  br label %99

cache_hit128:                                     ; preds = %if.exit121
  %cache_hit_fn129 = load ptr, ptr %.inlinecache123, align 8
  br label %99

99:                                               ; preds = %cache_hit128, %cache_miss126
  %fn_phi130 = phi ptr [ %cache_hit_fn129, %cache_hit128 ], [ %98, %cache_miss126 ]
  %100 = icmp eq ptr %fn_phi130, null
  br i1 %100, label %missing_function131, label %match135

missing_function131:                              ; preds = %99
  store %"char[]" { ptr @.panic_msg.35, i64 43 }, ptr %indirectarg132, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg133, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg134, align 8
  %101 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %101(ptr align 8 %indirectarg132, ptr align 8 %indirectarg133, ptr align 8 %indirectarg134, i32 96), !dbg !208
  unreachable, !dbg !208

match135:                                         ; preds = %99
  %102 = load ptr, ptr %allocator74, align 8
  %103 = load ptr, ptr %ptr75, align 8
  %104 = load i64, ptr %new_size76, align 8
  %105 = call i64 %fn_phi130(ptr %retparam136, ptr %102, ptr %103, i64 %104, i64 0), !dbg !208
  %not_err137 = icmp eq i64 %105, 0, !dbg !208
  %106 = call i1 @llvm.expect.i1(i1 %not_err137, i1 true), !dbg !208
  br i1 %106, label %after_check139, label %assign_optional138, !dbg !208

assign_optional138:                               ; preds = %match135
  store i64 %105, ptr %error_var73, align 8, !dbg !208
  br label %panic_block141, !dbg !208

after_check139:                                   ; preds = %match135
  %107 = load ptr, ptr %retparam136, align 8, !dbg !208
  store ptr %107, ptr %blockret77, align 8, !dbg !208
  br label %expr_block.exit140, !dbg !208

expr_block.exit140:                               ; preds = %after_check139, %after_check120, %expr_block.exit99
  br label %noerr_block148, !dbg !208

panic_block141:                                   ; preds = %assign_optional138, %assign_optional119
  %108 = insertvalue %any undef, ptr %error_var73, 0, !dbg !208
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !208
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %indirectarg142, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg143, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg144, align 8
  store %any %109, ptr %varargslots145, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots145, 0
  %"$$temp146" = insertvalue %"any[]" %110, i64 1, 1
  store %"any[]" %"$$temp146", ptr %indirectarg147, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg142, ptr align 8 %indirectarg143, ptr align 8 %indirectarg144, i32 85, ptr align 8 %indirectarg147), !dbg !195
  unreachable, !dbg !195

noerr_block148:                                   ; preds = %expr_block.exit140
  %111 = load ptr, ptr %blockret77, align 8, !dbg !195
  store ptr %111, ptr %holder, align 8, !dbg !195
  br label %if.exit149, !dbg !195

if.exit149:                                       ; preds = %noerr_block148, %if.exit67
  %112 = load ptr, ptr %holder, align 8, !dbg !209
  %113 = load i64, ptr %i, align 8, !dbg !209
  %add150 = add i64 %113, 1, !dbg !209
  store i64 %add150, ptr %i, align 8, !dbg !209
  %ptroffset = getelementptr inbounds [16 x i8], ptr %112, i64 %113, !dbg !209
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !209
  br label %loop.cond, !dbg !209

loop.exit:                                        ; preds = %loop.cond
  %114 = load ptr, ptr %holder, align 8, !dbg !210
  %115 = load i64, ptr %i, align 8, !dbg !210
  %add151 = add i64 0, %115, !dbg !210
  %size152 = sub i64 %add151, 0, !dbg !210
  %116 = insertvalue %"char[][]" undef, ptr %114, 0, !dbg !210
  %117 = insertvalue %"char[][]" %116, i64 %size152, 1, !dbg !210
  %118 = extractvalue %"char[][]" %117, 1, !dbg !211
  %lt153 = icmp ult i64 0, %118, !dbg !211
  br i1 %lt153, label %assert_ok158, label %assert_fail154, !dbg !211

assert_fail154:                                   ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.36, i64 34 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg157, align 8
  %119 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %119(ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, i32 227), !dbg !211
  unreachable, !dbg !211

assert_ok158:                                     ; preds = %loop.exit
  store %"char[][]" %117, ptr %0, align 8, !dbg !211
  ret void, !dbg !211

panic:                                            ; preds = %if.then22
  store i64 %43, ptr %taddr23, align 8
  %120 = insertvalue %any undef, ptr %taddr23, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr24, align 8
  %122 = insertvalue %any undef, ptr %taddr24, 0
  %123 = insertvalue %any %122, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg27, align 8
  store %any %121, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %123, ptr %ptradd29, align 16
  %124 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %124, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 241, ptr align 8 %indirectarg31), !dbg !180
  unreachable, !dbg !180

panic35:                                          ; preds = %checkok
  store i64 %sub34, ptr %taddr36, align 8
  %125 = insertvalue %any undef, ptr %taddr36, 0
  %126 = insertvalue %any %125, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr37, align 8
  %127 = insertvalue %any undef, ptr %taddr37, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg40, align 8
  store %any %126, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %128, ptr %ptradd42, align 16
  %129 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %129, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 241, ptr align 8 %indirectarg44), !dbg !180
  unreachable, !dbg !180

panic50:                                          ; preds = %checkok45
  store i64 %53, ptr %taddr51, align 8
  %130 = insertvalue %any undef, ptr %taddr51, 0
  %131 = insertvalue %any %130, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add48, ptr %taddr52, align 8
  %132 = insertvalue %any undef, ptr %taddr52, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.33, i64 5 }, ptr %indirectarg55, align 8
  store %any %131, ptr %varargslots56, align 16
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %133, ptr %ptradd57, align 16
  %134 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %134, i64 2, 1
  store %"any[]" %"$$temp58", ptr %indirectarg59, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 242, ptr align 8 %indirectarg59), !dbg !182
  unreachable, !dbg !182
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.new_split(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i64 %3, i8 zeroext %4) #0 comdat !dbg !212 {
entry:
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %sretparam = alloca %"char[][]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %any, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !215, !DIExpression(), !216)
    #dbg_declare(ptr %2, !217, !DIExpression(), !216)
  store i64 %3, ptr %max, align 8
    #dbg_declare(ptr %max, !218, !DIExpression(), !216)
  store i8 %4, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !219, !DIExpression(), !216)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !220
  %5 = load i64, ptr %ptradd, align 8, !dbg !220
  %lt = icmp ult i64 0, %5, !dbg !220
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !220

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.32, i64 83 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.37, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 272), !dbg !220
  unreachable, !dbg !220

assert_ok:                                        ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %2, i32 16, i1 false)
  %7 = load i64, ptr %max, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  %8 = load i8, ptr %skip_empty, align 1
  call void @std.core.String.split(ptr sret(%"char[][]") align 8 %sretparam, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i64 %7, ptr align 8 %indirectarg5, i8 zeroext %8) #5, !dbg !216
  %9 = load %"char[][]", ptr %sretparam, align 8, !dbg !216
  %ptradd6 = getelementptr inbounds i8, ptr %sretparam, i64 8, !dbg !222
  %10 = load i64, ptr %ptradd6, align 8, !dbg !222
  %lt7 = icmp ult i64 0, %10, !dbg !222
  br i1 %lt7, label %assert_ok12, label %assert_fail8, !dbg !222

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.36, i64 34 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.37, i64 9 }, ptr %indirectarg11, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 273), !dbg !222
  unreachable, !dbg !222

assert_ok12:                                      ; preds = %assert_ok
  store %"char[][]" %9, ptr %0, align 8, !dbg !222
  ret void, !dbg !222
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tsplit(ptr noalias sret(%"char[][]") align 8 %0, ptr align 8 %1, ptr align 8 %2, i64 %3, i8 zeroext %4) #0 comdat !dbg !223 {
entry:
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %sretparam = alloca %"char[][]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
    #dbg_declare(ptr %1, !224, !DIExpression(), !225)
    #dbg_declare(ptr %2, !226, !DIExpression(), !225)
  store i64 %3, ptr %max, align 8
    #dbg_declare(ptr %max, !227, !DIExpression(), !225)
  store i8 %4, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !228, !DIExpression(), !225)
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !229
  %i2nb = icmp eq ptr %5, null, !dbg !229
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !229

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !231
  br label %if.exit, !dbg !231

if.exit:                                          ; preds = %if.then, %entry
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !233
  %7 = insertvalue %any undef, ptr %6, 0, !dbg !225
  %8 = insertvalue %any %7, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !225
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %9 = load i64, ptr %max, align 8
  store %any %8, ptr %indirectarg2, align 8
  %10 = load i8, ptr %skip_empty, align 1
  call void @std.core.String.split(ptr sret(%"char[][]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, i64 %9, ptr align 8 %indirectarg2, i8 zeroext %10) #5, !dbg !225
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !225
  ret void, !dbg !225
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.split_to_buffer(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3, i64 %4, i8 zeroext %5) #0 comdat !dbg !234 {
entry:
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %max_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %res = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %varargslots67 = alloca [2 x %any], align 16
  %indirectarg70 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !240, !DIExpression(), !241)
    #dbg_declare(ptr %2, !242, !DIExpression(), !241)
    #dbg_declare(ptr %3, !243, !DIExpression(), !241)
  store i64 %4, ptr %max, align 8
    #dbg_declare(ptr %max, !244, !DIExpression(), !241)
  store i8 %5, ptr %skip_empty, align 1
    #dbg_declare(ptr %skip_empty, !245, !DIExpression(), !241)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !246
  %6 = load i64, ptr %ptradd, align 8, !dbg !246
  %lt = icmp ult i64 0, %6, !dbg !246
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !246

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.32, i64 83 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 297), !dbg !246
  unreachable, !dbg !246

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %max_capacity, !248, !DIExpression(), !249)
  %ptradd3 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !249
  %8 = load i64, ptr %ptradd3, align 8, !dbg !249
  store i64 %8, ptr %max_capacity, align 8, !dbg !249
    #dbg_declare(ptr %i, !250, !DIExpression(), !251)
  store i64 0, ptr %i, align 8, !dbg !251
    #dbg_declare(ptr %no_more, !252, !DIExpression(), !253)
  store i8 0, ptr %no_more, align 1, !dbg !253
  br label %loop.cond, !dbg !254

loop.cond:                                        ; preds = %checkok59, %if.then42, %assert_ok
  %9 = load i8, ptr %no_more, align 1, !dbg !255
  %10 = trunc i8 %9 to i1, !dbg !255
  %not = xor i1 %10, true, !dbg !255
  br i1 %not, label %loop.body, label %loop.exit, !dbg !255

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %index, !257, !DIExpression(), !259)
  %11 = load i64, ptr %i, align 8, !dbg !259
  %12 = load i64, ptr %max, align 8, !dbg !259
  %sub = sub i64 %12, 1, !dbg !259
  %eq = icmp eq i64 %sub, %11, !dbg !259
  %check = icmp sge i64 %sub, 0, !dbg !259
  %siui-eq = and i1 %check, %eq, !dbg !259
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !259

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !259
  br label %after_assign, !dbg !259

cond.rhs:                                         ; preds = %loop.body
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %2, i32 16, i1 false)
  %13 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5), !dbg !259
  %not_err = icmp eq i64 %13, 0, !dbg !259
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !259
  br i1 %14, label %after_check, label %assign_optional, !dbg !259

assign_optional:                                  ; preds = %cond.rhs
  store i64 %13, ptr %index.f, align 8, !dbg !259
  br label %after_assign, !dbg !259

after_check:                                      ; preds = %cond.rhs
  %15 = load i64, ptr %retparam, align 8, !dbg !259
  br label %cond.phi, !dbg !259

cond.phi:                                         ; preds = %after_check
  store i64 %15, ptr %index, align 8, !dbg !259
  store i64 0, ptr %index.f, align 8, !dbg !259
  br label %after_assign, !dbg !259

after_assign:                                     ; preds = %cond.phi, %assign_optional, %cond.lhs
    #dbg_declare(ptr %res, !260, !DIExpression(), !261)
  %load.err = load i64, ptr %index.f, align 8, !dbg !262
  %result = icmp eq i64 %load.err, 0, !dbg !262
  br i1 %result, label %if.then, label %if.else, !dbg !262

if.then:                                          ; preds = %after_assign
  %16 = load %"char[]", ptr %1, align 8, !dbg !263
  %17 = extractvalue %"char[]" %16, 0, !dbg !263
  %18 = extractvalue %"char[]" %16, 1, !dbg !263
  %gt = icmp ugt i64 0, %18, !dbg !263
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !263
  br i1 %19, label %panic, label %checkok, !dbg !263

checkok:                                          ; preds = %if.then
  %20 = load i64, ptr %index, align 8, !dbg !263
  %add = add i64 0, %20, !dbg !263
  %lt12 = icmp ult i64 %18, %add, !dbg !263
  %sub13 = sub i64 %add, 1, !dbg !263
  %21 = call i1 @llvm.expect.i1(i1 %lt12, i1 false), !dbg !263
  br i1 %21, label %panic14, label %checkok24, !dbg !263

checkok24:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !263
  %22 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !263
  %23 = insertvalue %"char[]" %22, i64 %size, 1, !dbg !263
  store %"char[]" %23, ptr %res, align 8, !dbg !263
  %24 = load %"char[]", ptr %1, align 8, !dbg !265
  %25 = extractvalue %"char[]" %24, 0, !dbg !265
  %26 = load i64, ptr %index, align 8, !dbg !265
  %ptradd25 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !265
  %27 = load i64, ptr %ptradd25, align 8, !dbg !265
  %add26 = add i64 %26, %27, !dbg !265
  %28 = extractvalue %"char[]" %24, 1, !dbg !265
  %gt27 = icmp ugt i64 %add26, %28, !dbg !265
  %29 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !265
  br i1 %29, label %panic28, label %checkok38, !dbg !265

checkok38:                                        ; preds = %checkok24
  %size39 = sub i64 %28, %add26, !dbg !265
  %ptradd40 = getelementptr inbounds i8, ptr %25, i64 %add26, !dbg !265
  %30 = insertvalue %"char[]" undef, ptr %ptradd40, 0, !dbg !265
  %31 = insertvalue %"char[]" %30, i64 %size39, 1, !dbg !265
  store %"char[]" %31, ptr %1, align 8, !dbg !265
  br label %if.exit, !dbg !265

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %1, i32 16, i1 false), !dbg !266
  store i8 1, ptr %no_more, align 1, !dbg !268
  br label %if.exit, !dbg !268

if.exit:                                          ; preds = %if.else, %checkok38
  %ptradd41 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !269
  %32 = load i64, ptr %ptradd41, align 8, !dbg !269
  %i2nb = icmp eq i64 %32, 0, !dbg !269
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !269

and.rhs:                                          ; preds = %if.exit
  %33 = load i8, ptr %skip_empty, align 1, !dbg !269
  %34 = trunc i8 %33 to i1, !dbg !269
  br label %and.phi, !dbg !269

and.phi:                                          ; preds = %and.rhs, %if.exit
  %val = phi i1 [ false, %if.exit ], [ %34, %and.rhs ], !dbg !269
  br i1 %val, label %if.then42, label %if.exit43, !dbg !269

if.then42:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !270

if.exit43:                                        ; preds = %and.phi
  %35 = load i64, ptr %i, align 8, !dbg !272
  %36 = load i64, ptr %max_capacity, align 8, !dbg !272
  %eq44 = icmp eq i64 %35, %36, !dbg !272
  br i1 %eq44, label %if.then45, label %if.exit46, !dbg !272

if.then45:                                        ; preds = %if.exit43
  ret i64 ptrtoint (ptr @"std.core.string.SplitResult$BUFFER_EXCEEDED" to i64), !dbg !273

if.exit46:                                        ; preds = %if.exit43
  %ptradd47 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !275
  %37 = load i64, ptr %ptradd47, align 8, !dbg !275
  %38 = load ptr, ptr %3, align 8, !dbg !275
  %39 = load i64, ptr %i, align 8, !dbg !275
  %add48 = add i64 %39, 1, !dbg !275
  store i64 %add48, ptr %i, align 8, !dbg !275
  %ge = icmp uge i64 %39, %37, !dbg !275
  %40 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !275
  br i1 %40, label %panic49, label %checkok59, !dbg !275

checkok59:                                        ; preds = %if.exit46
  %ptroffset = getelementptr inbounds [16 x i8], ptr %38, i64 %39, !dbg !275
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !275
  br label %loop.cond, !dbg !275

loop.exit:                                        ; preds = %loop.cond
  %41 = load %"char[][]", ptr %3, align 8, !dbg !276
  %42 = extractvalue %"char[][]" %41, 0, !dbg !276
  %43 = extractvalue %"char[][]" %41, 1, !dbg !276
  %gt60 = icmp ugt i64 0, %43, !dbg !276
  %44 = call i1 @llvm.expect.i1(i1 %gt60, i1 false), !dbg !276
  br i1 %44, label %panic61, label %checkok71, !dbg !276

checkok71:                                        ; preds = %loop.exit
  %45 = load i64, ptr %i, align 8, !dbg !276
  %add72 = add i64 0, %45, !dbg !276
  %lt73 = icmp ult i64 %43, %add72, !dbg !276
  %sub74 = sub i64 %add72, 1, !dbg !276
  %46 = call i1 @llvm.expect.i1(i1 %lt73, i1 false), !dbg !276
  br i1 %46, label %panic75, label %checkok85, !dbg !276

checkok85:                                        ; preds = %checkok71
  %size86 = sub i64 %add72, 0, !dbg !276
  %47 = insertvalue %"char[][]" undef, ptr %42, 0, !dbg !276
  %48 = insertvalue %"char[][]" %47, i64 %size86, 1, !dbg !276
  %49 = extractvalue %"char[][]" %48, 1, !dbg !277
  %lt87 = icmp ult i64 0, %49, !dbg !277
  br i1 %lt87, label %assert_ok92, label %assert_fail88, !dbg !277

assert_fail88:                                    ; preds = %checkok85
  store %"char[]" { ptr @.panic_msg.36, i64 34 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg90, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg91, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, ptr align 8 %indirectarg91, i32 298), !dbg !277
  unreachable, !dbg !277

assert_ok92:                                      ; preds = %checkok85
  store %"char[][]" %48, ptr %0, align 8, !dbg !277
  ret i64 0, !dbg !277

panic:                                            ; preds = %if.then
  store i64 %18, ptr %taddr, align 8
  %51 = insertvalue %any undef, ptr %taddr, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %53 = insertvalue %any undef, ptr %taddr6, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg9, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd10, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 312, ptr align 8 %indirectarg11), !dbg !263
  unreachable, !dbg !263

panic14:                                          ; preds = %checkok
  store i64 %sub13, ptr %taddr15, align 8
  %56 = insertvalue %any undef, ptr %taddr15, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr16, align 8
  %58 = insertvalue %any undef, ptr %taddr16, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg19, align 8
  store %any %57, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %59, ptr %ptradd21, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 312, ptr align 8 %indirectarg23), !dbg !263
  unreachable, !dbg !263

panic28:                                          ; preds = %checkok24
  store i64 %28, ptr %taddr29, align 8
  %61 = insertvalue %any undef, ptr %taddr29, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add26, ptr %taddr30, align 8
  %63 = insertvalue %any undef, ptr %taddr30, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg33, align 8
  store %any %62, ptr %varargslots34, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %64, ptr %ptradd35, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 313, ptr align 8 %indirectarg37), !dbg !265
  unreachable, !dbg !265

panic49:                                          ; preds = %if.exit46
  store i64 %37, ptr %taddr50, align 8
  %66 = insertvalue %any undef, ptr %taddr50, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr51, align 8
  %68 = insertvalue %any undef, ptr %taddr51, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg54, align 8
  store %any %67, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %69, ptr %ptradd56, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 328, ptr align 8 %indirectarg58), !dbg !275
  unreachable, !dbg !275

panic61:                                          ; preds = %loop.exit
  store i64 %43, ptr %taddr62, align 8
  %71 = insertvalue %any undef, ptr %taddr62, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr63, align 8
  %73 = insertvalue %any undef, ptr %taddr63, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg66, align 8
  store %any %72, ptr %varargslots67, align 16
  %ptradd68 = getelementptr inbounds i8, ptr %varargslots67, i64 16
  store %any %74, ptr %ptradd68, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots67, 0
  %"$$temp69" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp69", ptr %indirectarg70, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, i32 330, ptr align 8 %indirectarg70), !dbg !276
  unreachable, !dbg !276

panic75:                                          ; preds = %checkok71
  store i64 %sub74, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.38, i64 15 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 330, ptr align 8 %indirectarg84), !dbg !276
  unreachable, !dbg !276
}

; Function Attrs: nounwind ssp uwtable
define weak_odr zeroext i8 @std.core.String.contains(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !278 {
entry:
  %blockret = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !279, !DIExpression(), !280)
    #dbg_declare(ptr %1, !281, !DIExpression(), !280)
  br label %testblock

testblock:                                        ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %1, i32 16, i1 false)
  %2 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !282
  %not_err = icmp eq i64 %2, 0, !dbg !282
  %3 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !282
  br i1 %3, label %after_check, label %assign_optional, !dbg !282

assign_optional:                                  ; preds = %testblock
  store i64 %2, ptr %temp_err, align 8, !dbg !282
  br label %end_block, !dbg !282

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !282
  br label %end_block, !dbg !282

end_block:                                        ; preds = %after_check, %assign_optional
  %4 = load i64, ptr %temp_err, align 8, !dbg !282
  %i2b = icmp ne i64 %4, 0, !dbg !282
  br i1 %i2b, label %if.then, label %if.exit, !dbg !282

if.then:                                          ; preds = %end_block
  store i8 0, ptr %blockret, align 1, !dbg !282
  br label %expr_block.exit, !dbg !282

if.exit:                                          ; preds = %end_block
  store i8 1, ptr %blockret, align 1, !dbg !286
  br label %expr_block.exit, !dbg !286

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %5 = load i8, ptr %blockret, align 1, !dbg !286
  ret i8 %5, !dbg !286
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.index_of_char(ptr %0, ptr align 8 %1, i8 %2) #0 comdat !dbg !287 {
entry:
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !291, !DIExpression(), !292)
  store i8 %2, ptr %needle, align 1
    #dbg_declare(ptr %needle, !293, !DIExpression(), !292)
    #dbg_declare(ptr %.anon, !294, !DIExpression(), !296)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !296
  %3 = load i64, ptr %ptradd, align 8, !dbg !296
  store i64 %3, ptr %.anon, align 8, !dbg !296
    #dbg_declare(ptr %.anon1, !294, !DIExpression(), !296)
  store i64 0, ptr %.anon1, align 8, !dbg !296
  br label %loop.cond, !dbg !296

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon1, align 8, !dbg !296
  %5 = load i64, ptr %.anon, align 8, !dbg !296
  %lt = icmp ult i64 %4, %5, !dbg !296
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !296

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !297, !DIExpression(), !299)
  %6 = load i64, ptr %.anon1, align 8, !dbg !299
  store i64 %6, ptr %i, align 8, !dbg !299
    #dbg_declare(ptr %c, !300, !DIExpression(), !299)
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !299
  %7 = load i64, ptr %ptradd2, align 8, !dbg !299
  %8 = load ptr, ptr %1, align 8, !dbg !299
  %9 = load i64, ptr %.anon1, align 8, !dbg !299
  %ge = icmp uge i64 %9, %7, !dbg !299
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !299
  br i1 %10, label %panic, label %checkok, !dbg !299

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !299
  %11 = load i8, ptr %ptradd8, align 1, !dbg !299
  store i8 %11, ptr %c, align 1, !dbg !299
  %12 = load i8, ptr %c, align 1, !dbg !301
  %13 = load i8, ptr %needle, align 1, !dbg !301
  %eq = icmp eq i8 %12, %13, !dbg !301
  br i1 %eq, label %if.then, label %if.exit, !dbg !301

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !301
  %15 = load i64, ptr %i, align 8, !dbg !303
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !303
  %16 = load i64, ptr %ptradd9, align 8, !dbg !303
  %lt10 = icmp ult i64 %15, %16, !dbg !303
  br i1 %lt10, label %assert_ok, label %assert_fail, !dbg !303

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.40, i64 34 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.39, i64 13 }, ptr %indirectarg13, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 352), !dbg !303
  unreachable, !dbg !303

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !303
  ret i64 0, !dbg !303

if.exit:                                          ; preds = %checkok
  %18 = load i64, ptr %.anon1, align 8, !dbg !296
  %addnuw = add nuw i64 %18, 1, !dbg !296
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !296
  br label %loop.cond, !dbg !296

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !304

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr3, align 8
  %21 = insertvalue %any undef, ptr %taddr3, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.39, i64 13 }, ptr %indirectarg5, align 8
  store %any %20, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd6, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 358, ptr align 8 %indirectarg7), !dbg !299
  unreachable, !dbg !299
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.index_of_char_from(ptr %0, ptr align 8 %1, i8 %2, i64 %3) #0 comdat !dbg !305 {
entry:
  %needle = alloca i8, align 1
  %start_index = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !308, !DIExpression(), !309)
  store i8 %2, ptr %needle, align 1
    #dbg_declare(ptr %needle, !310, !DIExpression(), !309)
  store i64 %3, ptr %start_index, align 8
    #dbg_declare(ptr %start_index, !311, !DIExpression(), !309)
    #dbg_declare(ptr %len, !312, !DIExpression(), !313)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !313
  %4 = load i64, ptr %ptradd, align 8, !dbg !313
  store i64 %4, ptr %len, align 8, !dbg !313
  %5 = load i64, ptr %len, align 8, !dbg !314
  %6 = load i64, ptr %start_index, align 8, !dbg !314
  %le = icmp ule i64 %5, %6, !dbg !314
  br i1 %le, label %if.then, label %if.exit, !dbg !314

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !314

if.exit:                                          ; preds = %entry
    #dbg_declare(ptr %i, !315, !DIExpression(), !317)
  %7 = load i64, ptr %start_index, align 8, !dbg !317
  store i64 %7, ptr %i, align 8, !dbg !317
  br label %loop.cond, !dbg !317

loop.cond:                                        ; preds = %if.exit14, %if.exit
  %8 = load i64, ptr %i, align 8, !dbg !317
  %9 = load i64, ptr %len, align 8, !dbg !317
  %lt = icmp ult i64 %8, %9, !dbg !317
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !317

loop.body:                                        ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !318
  %10 = load i64, ptr %ptradd1, align 8, !dbg !318
  %11 = load ptr, ptr %1, align 8, !dbg !318
  %12 = load i64, ptr %i, align 8, !dbg !318
  %ge = icmp uge i64 %12, %10, !dbg !318
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !318
  br i1 %13, label %panic, label %checkok, !dbg !318

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !318
  %14 = load i8, ptr %ptradd7, align 1, !dbg !318
  %15 = load i8, ptr %needle, align 1, !dbg !318
  %eq = icmp eq i8 %14, %15, !dbg !318
  br i1 %eq, label %if.then8, label %if.exit14, !dbg !318

if.then8:                                         ; preds = %checkok
  %16 = load i64, ptr %i, align 8, !dbg !318
  %17 = load i64, ptr %i, align 8, !dbg !320
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !320
  %18 = load i64, ptr %ptradd9, align 8, !dbg !320
  %lt10 = icmp ult i64 %17, %18, !dbg !320
  br i1 %lt10, label %assert_ok, label %assert_fail, !dbg !320

assert_fail:                                      ; preds = %if.then8
  store %"char[]" { ptr @.panic_msg.40, i64 34 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.41, i64 18 }, ptr %indirectarg13, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 372), !dbg !320
  unreachable, !dbg !320

assert_ok:                                        ; preds = %if.then8
  store i64 %16, ptr %0, align 8, !dbg !320
  ret i64 0, !dbg !320

if.exit14:                                        ; preds = %checkok
  %20 = load i64, ptr %i, align 8, !dbg !317
  %add = add i64 %20, 1, !dbg !317
  store i64 %add, ptr %i, align 8, !dbg !317
  br label %loop.cond, !dbg !317

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !321

panic:                                            ; preds = %loop.body
  store i64 %10, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr2, align 8
  %23 = insertvalue %any undef, ptr %taddr2, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.41, i64 18 }, ptr %indirectarg4, align 8
  store %any %22, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd5, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 382, ptr align 8 %indirectarg6), !dbg !318
  unreachable, !dbg !318
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.rindex_of_char(ptr %0, ptr align 8 %1, i8 %2) #0 comdat !dbg !322 {
entry:
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !323, !DIExpression(), !324)
  store i8 %2, ptr %needle, align 1
    #dbg_declare(ptr %needle, !325, !DIExpression(), !324)
    #dbg_declare(ptr %.anon, !326, !DIExpression(), !328)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !328
  %3 = load i64, ptr %ptradd, align 8, !dbg !328
  store i64 %3, ptr %.anon, align 8, !dbg !328
  br label %loop.cond, !dbg !328

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !328
  %gt = icmp ugt i64 %4, 0, !dbg !328
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !328

loop.body:                                        ; preds = %loop.cond
  %5 = load i64, ptr %.anon, align 8, !dbg !329
  %subnuw = sub nuw i64 %5, 1, !dbg !329
  store i64 %subnuw, ptr %.anon, align 8, !dbg !329
    #dbg_declare(ptr %i, !331, !DIExpression(), !329)
  %6 = load i64, ptr %.anon, align 8, !dbg !329
  store i64 %6, ptr %i, align 8, !dbg !329
    #dbg_declare(ptr %c, !332, !DIExpression(), !329)
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !329
  %7 = load i64, ptr %ptradd1, align 8, !dbg !329
  %8 = load ptr, ptr %1, align 8, !dbg !329
  %9 = load i64, ptr %.anon, align 8, !dbg !329
  %ge = icmp uge i64 %9, %7, !dbg !329
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !329
  br i1 %10, label %panic, label %checkok, !dbg !329

checkok:                                          ; preds = %loop.body
  %ptradd7 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !329
  %11 = load i8, ptr %ptradd7, align 1, !dbg !329
  store i8 %11, ptr %c, align 1, !dbg !329
  %12 = load i8, ptr %c, align 1, !dbg !333
  %13 = load i8, ptr %needle, align 1, !dbg !333
  %eq = icmp eq i8 %12, %13, !dbg !333
  br i1 %eq, label %if.then, label %if.exit, !dbg !333

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !333
  %15 = load i64, ptr %i, align 8, !dbg !335
  %ptradd8 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !335
  %16 = load i64, ptr %ptradd8, align 8, !dbg !335
  %lt = icmp ult i64 %15, %16, !dbg !335
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !335

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.40, i64 34 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.42, i64 14 }, ptr %indirectarg11, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 393), !dbg !335
  unreachable, !dbg !335

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !335
  ret i64 0, !dbg !335

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !335

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !336

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr2, align 8
  %20 = insertvalue %any undef, ptr %taddr2, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.42, i64 14 }, ptr %indirectarg4, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd5, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 399, ptr align 8 %indirectarg6), !dbg !329
  unreachable, !dbg !329
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.index_of(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !337 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %.anon = alloca ptr, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %.anon49 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %.anon56 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %varargslots72 = alloca [2 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca i64, align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %varargslots86 = alloca [2 x %any], align 16
  %indirectarg89 = alloca %"any[]", align 8
  %taddr94 = alloca i64, align 8
  %taddr95 = alloca i64, align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %varargslots99 = alloca [2 x %any], align 16
  %indirectarg102 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !340, !DIExpression(), !341)
    #dbg_declare(ptr %2, !342, !DIExpression(), !341)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !343
  %3 = load i64, ptr %ptradd, align 8, !dbg !343
  %lt = icmp ult i64 0, %3, !dbg !343
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !343

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.43, i64 71 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 413), !dbg !343
  unreachable, !dbg !343

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !345, !DIExpression(), !346)
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !346
  %5 = load i64, ptr %ptradd3, align 8, !dbg !346
  store i64 %5, ptr %needed, align 8, !dbg !346
  %6 = load i64, ptr %needed, align 8, !dbg !347
  %lt4 = icmp ult i64 0, %6, !dbg !347
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !347

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !347
  %7 = load i64, ptr %ptradd5, align 8, !dbg !347
  %8 = load i64, ptr %needed, align 8, !dbg !347
  %ge = icmp uge i64 %7, %8, !dbg !347
  br label %and.phi, !dbg !347

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !347
  br i1 %val, label %if.then, label %if.exit121, !dbg !347

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !348, !DIExpression(), !350)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !350
  %9 = load i64, ptr %ptradd6, align 8, !dbg !350
  %10 = load ptr, ptr %2, align 8, !dbg !350
  %ge7 = icmp sge i64 0, %9, !dbg !350
  %11 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !350
  br i1 %11, label %panic, label %checkok, !dbg !350

checkok:                                          ; preds = %if.then
  %12 = load i8, ptr %10, align 1, !dbg !350
  store i8 %12, ptr %first, align 1, !dbg !350
    #dbg_declare(ptr %.anon, !351, !DIExpression(), !353)
  %13 = load %"char[]", ptr %1, align 8, !dbg !353
  %14 = extractvalue %"char[]" %13, 0, !dbg !353
  %15 = extractvalue %"char[]" %13, 1, !dbg !353
  %gt = icmp ugt i64 0, %15, !dbg !353
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !353
  br i1 %16, label %panic14, label %checkok24, !dbg !353

checkok24:                                        ; preds = %checkok
  %17 = load i64, ptr %needed, align 8, !dbg !353
  %sub = sub i64 %15, %17, !dbg !353
  %gt25 = icmp ugt i64 0, %sub, !dbg !353
  %18 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !353
  br i1 %18, label %panic26, label %checkok36, !dbg !353

checkok36:                                        ; preds = %checkok24
  %le = icmp ule i64 %15, %sub, !dbg !353
  %19 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !353
  br i1 %19, label %panic37, label %checkok47, !dbg !353

checkok47:                                        ; preds = %checkok36
  %20 = add i64 %sub, 1, !dbg !353
  %size = sub i64 %20, 0, !dbg !353
  %21 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !353
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !353
  store %"char[]" %22, ptr %taddr48, align 8
  store ptr %taddr48, ptr %.anon, align 8
    #dbg_declare(ptr %.anon49, !354, !DIExpression(), !353)
  %23 = load ptr, ptr %.anon, align 8, !dbg !353
  %checknull = icmp eq ptr %23, null, !dbg !353
  %24 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !353
  br i1 %24, label %panic50, label %checkok54, !dbg !353

checkok54:                                        ; preds = %checkok47
  %ptradd55 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !353
  %25 = load i64, ptr %ptradd55, align 8, !dbg !353
  store i64 %25, ptr %.anon49, align 8, !dbg !353
    #dbg_declare(ptr %.anon56, !354, !DIExpression(), !353)
  store i64 0, ptr %.anon56, align 8, !dbg !353
  br label %loop.cond, !dbg !353

loop.cond:                                        ; preds = %if.exit, %checkok54
  %26 = load i64, ptr %.anon56, align 8, !dbg !353
  %27 = load i64, ptr %.anon49, align 8, !dbg !353
  %lt57 = icmp ult i64 %26, %27, !dbg !353
  br i1 %lt57, label %loop.body, label %loop.exit, !dbg !353

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !355, !DIExpression(), !357)
  %28 = load i64, ptr %.anon56, align 8, !dbg !357
  store i64 %28, ptr %i, align 8, !dbg !357
    #dbg_declare(ptr %c, !358, !DIExpression(), !357)
  %29 = load ptr, ptr %.anon, align 8, !dbg !357
  %checknull58 = icmp eq ptr %29, null, !dbg !357
  %30 = call i1 @llvm.expect.i1(i1 %checknull58, i1 false), !dbg !357
  br i1 %30, label %panic59, label %checkok63, !dbg !357

checkok63:                                        ; preds = %loop.body
  %ptradd64 = getelementptr inbounds i8, ptr %29, i64 8, !dbg !357
  %31 = load i64, ptr %ptradd64, align 8, !dbg !357
  %32 = load ptr, ptr %29, align 8, !dbg !357
  %33 = load i64, ptr %.anon56, align 8, !dbg !357
  %ge65 = icmp uge i64 %33, %31, !dbg !357
  %34 = call i1 @llvm.expect.i1(i1 %ge65, i1 false), !dbg !357
  br i1 %34, label %panic66, label %checkok76, !dbg !357

checkok76:                                        ; preds = %checkok63
  %ptradd77 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !357
  %35 = load i8, ptr %ptradd77, align 1, !dbg !357
  store i8 %35, ptr %c, align 1, !dbg !357
  %36 = load i8, ptr %c, align 1, !dbg !359
  %37 = load i8, ptr %first, align 1, !dbg !359
  %eq = icmp eq i8 %36, %37, !dbg !359
  br i1 %eq, label %and.rhs78, label %and.phi111, !dbg !359

and.rhs78:                                        ; preds = %checkok76
  %38 = load %"char[]", ptr %1, align 8, !dbg !359
  %39 = extractvalue %"char[]" %38, 0, !dbg !359
  %40 = load i64, ptr %i, align 8, !dbg !359
  %41 = extractvalue %"char[]" %38, 1, !dbg !359
  %gt79 = icmp ugt i64 %40, %41, !dbg !359
  %42 = call i1 @llvm.expect.i1(i1 %gt79, i1 false), !dbg !359
  br i1 %42, label %panic80, label %checkok90, !dbg !359

checkok90:                                        ; preds = %and.rhs78
  %43 = load i64, ptr %needed, align 8, !dbg !359
  %add = add i64 %40, %43, !dbg !359
  %lt91 = icmp ult i64 %41, %add, !dbg !359
  %sub92 = sub i64 %add, 1, !dbg !359
  %44 = call i1 @llvm.expect.i1(i1 %lt91, i1 false), !dbg !359
  br i1 %44, label %panic93, label %checkok103, !dbg !359

checkok103:                                       ; preds = %checkok90
  %size104 = sub i64 %add, %40, !dbg !359
  %ptradd105 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !359
  %45 = insertvalue %"char[]" undef, ptr %ptradd105, 0, !dbg !359
  %46 = insertvalue %"char[]" %45, i64 %size104, 1, !dbg !359
  %47 = load %"char[]", ptr %2, align 8, !dbg !359
  %48 = extractvalue %"char[]" %46, 1, !dbg !359
  %49 = extractvalue %"char[]" %47, 1, !dbg !359
  %50 = extractvalue %"char[]" %46, 0, !dbg !359
  %51 = extractvalue %"char[]" %47, 0, !dbg !359
  %eq106 = icmp eq i64 %48, %49, !dbg !359
  br i1 %eq106, label %slice_cmp_values, label %slice_cmp_exit, !dbg !359

slice_cmp_values:                                 ; preds = %checkok103
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %52 = load i64, ptr %cmp.idx, align 8
  %lt107 = icmp slt i64 %52, %48
  br i1 %lt107, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd108 = getelementptr inbounds i8, ptr %50, i64 %52
  %ptradd109 = getelementptr inbounds i8, ptr %51, i64 %52
  %53 = load i8, ptr %ptradd108, align 1
  %54 = load i8, ptr %ptradd109, align 1
  %eq110 = icmp eq i8 %53, %54
  %55 = add i64 %52, 1
  store i64 %55, ptr %cmp.idx, align 8
  br i1 %eq110, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok103
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok103 ], [ false, %slice_loop_comparison ]
  br label %and.phi111

and.phi111:                                       ; preds = %slice_cmp_exit, %checkok76
  %val112 = phi i1 [ false, %checkok76 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val112, label %if.then113, label %if.exit

if.then113:                                       ; preds = %and.phi111
  %56 = load i64, ptr %i, align 8, !dbg !359
  %57 = load i64, ptr %i, align 8, !dbg !361
  %ptradd114 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !361
  %58 = load i64, ptr %ptradd114, align 8, !dbg !361
  %lt115 = icmp ult i64 %57, %58, !dbg !361
  br i1 %lt115, label %assert_ok120, label %assert_fail116, !dbg !361

assert_fail116:                                   ; preds = %if.then113
  store %"char[]" { ptr @.panic_msg.40, i64 34 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg119, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, i32 412), !dbg !361
  unreachable, !dbg !361

assert_ok120:                                     ; preds = %if.then113
  store i64 %56, ptr %0, align 8, !dbg !361
  ret i64 0, !dbg !361

if.exit:                                          ; preds = %and.phi111
  %60 = load i64, ptr %.anon56, align 8, !dbg !353
  %addnuw = add nuw i64 %60, 1, !dbg !353
  store i64 %addnuw, ptr %.anon56, align 8, !dbg !353
  br label %loop.cond, !dbg !353

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit121, !dbg !353

if.exit121:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !362

panic:                                            ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %61 = insertvalue %any undef, ptr %taddr, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %63 = insertvalue %any undef, ptr %taddr8, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg11, align 8
  store %any %62, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd12, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 422, ptr align 8 %indirectarg13), !dbg !350
  unreachable, !dbg !350

panic14:                                          ; preds = %checkok
  store i64 %15, ptr %taddr15, align 8
  %66 = insertvalue %any undef, ptr %taddr15, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %68 = insertvalue %any undef, ptr %taddr16, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg19, align 8
  store %any %67, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %69, ptr %ptradd21, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 423, ptr align 8 %indirectarg23), !dbg !353
  unreachable, !dbg !353

panic26:                                          ; preds = %checkok24
  store i64 0, ptr %taddr27, align 8
  %71 = insertvalue %any undef, ptr %taddr27, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr28, align 8
  %73 = insertvalue %any undef, ptr %taddr28, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 44 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg31, align 8
  store %any %72, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %74, ptr %ptradd33, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 423, ptr align 8 %indirectarg35), !dbg !353
  unreachable, !dbg !353

panic37:                                          ; preds = %checkok36
  store i64 %sub, ptr %taddr38, align 8
  %76 = insertvalue %any undef, ptr %taddr38, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr39, align 8
  %78 = insertvalue %any undef, ptr %taddr39, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg42, align 8
  store %any %77, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %79, ptr %ptradd44, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 423, ptr align 8 %indirectarg46), !dbg !353
  unreachable, !dbg !353

panic50:                                          ; preds = %checkok47
  store %"char[]" { ptr @.panic_msg.45, i64 53 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg53, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 423), !dbg !353
  unreachable, !dbg !353

panic59:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.45, i64 53 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg62, align 8
  %82 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %82(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 423), !dbg !357
  unreachable, !dbg !357

panic66:                                          ; preds = %checkok63
  store i64 %31, ptr %taddr67, align 8
  %83 = insertvalue %any undef, ptr %taddr67, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr68, align 8
  %85 = insertvalue %any undef, ptr %taddr68, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg71, align 8
  store %any %84, ptr %varargslots72, align 16
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %86, ptr %ptradd73, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 423, ptr align 8 %indirectarg75), !dbg !357
  unreachable, !dbg !357

panic80:                                          ; preds = %and.rhs78
  store i64 %41, ptr %taddr81, align 8
  %88 = insertvalue %any undef, ptr %taddr81, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr82, align 8
  %90 = insertvalue %any undef, ptr %taddr82, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg85, align 8
  store %any %89, ptr %varargslots86, align 16
  %ptradd87 = getelementptr inbounds i8, ptr %varargslots86, i64 16
  store %any %91, ptr %ptradd87, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots86, 0
  %"$$temp88" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp88", ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 425, ptr align 8 %indirectarg89), !dbg !359
  unreachable, !dbg !359

panic93:                                          ; preds = %checkok90
  store i64 %sub92, ptr %taddr94, align 8
  %93 = insertvalue %any undef, ptr %taddr94, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr95, align 8
  %95 = insertvalue %any undef, ptr %taddr95, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %indirectarg98, align 8
  store %any %94, ptr %varargslots99, align 16
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %96, ptr %ptradd100, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp101", ptr %indirectarg102, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, i32 425, ptr align 8 %indirectarg102), !dbg !359
  unreachable, !dbg !359
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.rindex_of(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !363 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %.anon = alloca ptr, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %.anon49 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 16
  %indirectarg74 = alloca %"any[]", align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca i64, align 8
  %indirectarg95 = alloca %"char[]", align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %varargslots98 = alloca [2 x %any], align 16
  %indirectarg101 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %indirectarg118 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !364, !DIExpression(), !365)
    #dbg_declare(ptr %2, !366, !DIExpression(), !365)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !367
  %3 = load i64, ptr %ptradd, align 8, !dbg !367
  %lt = icmp ult i64 0, %3, !dbg !367
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !367

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.43, i64 71 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 438), !dbg !367
  unreachable, !dbg !367

assert_ok:                                        ; preds = %entry
    #dbg_declare(ptr %needed, !369, !DIExpression(), !370)
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !370
  %5 = load i64, ptr %ptradd3, align 8, !dbg !370
  store i64 %5, ptr %needed, align 8, !dbg !370
  %6 = load i64, ptr %needed, align 8, !dbg !371
  %lt4 = icmp ult i64 0, %6, !dbg !371
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !371

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !371
  %7 = load i64, ptr %ptradd5, align 8, !dbg !371
  %8 = load i64, ptr %needed, align 8, !dbg !371
  %ge = icmp uge i64 %7, %8, !dbg !371
  br label %and.phi, !dbg !371

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !371
  br i1 %val, label %if.then, label %if.exit120, !dbg !371

if.then:                                          ; preds = %and.phi
    #dbg_declare(ptr %first, !372, !DIExpression(), !374)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !374
  %9 = load i64, ptr %ptradd6, align 8, !dbg !374
  %10 = load ptr, ptr %2, align 8, !dbg !374
  %ge7 = icmp sge i64 0, %9, !dbg !374
  %11 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !374
  br i1 %11, label %panic, label %checkok, !dbg !374

checkok:                                          ; preds = %if.then
  %12 = load i8, ptr %10, align 1, !dbg !374
  store i8 %12, ptr %first, align 1, !dbg !374
    #dbg_declare(ptr %.anon, !375, !DIExpression(), !377)
  %13 = load %"char[]", ptr %1, align 8, !dbg !377
  %14 = extractvalue %"char[]" %13, 0, !dbg !377
  %15 = extractvalue %"char[]" %13, 1, !dbg !377
  %gt = icmp ugt i64 0, %15, !dbg !377
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !377
  br i1 %16, label %panic14, label %checkok24, !dbg !377

checkok24:                                        ; preds = %checkok
  %17 = load i64, ptr %needed, align 8, !dbg !377
  %sub = sub i64 %15, %17, !dbg !377
  %gt25 = icmp ugt i64 0, %sub, !dbg !377
  %18 = call i1 @llvm.expect.i1(i1 %gt25, i1 false), !dbg !377
  br i1 %18, label %panic26, label %checkok36, !dbg !377

checkok36:                                        ; preds = %checkok24
  %le = icmp ule i64 %15, %sub, !dbg !377
  %19 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !377
  br i1 %19, label %panic37, label %checkok47, !dbg !377

checkok47:                                        ; preds = %checkok36
  %20 = add i64 %sub, 1, !dbg !377
  %size = sub i64 %20, 0, !dbg !377
  %21 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !377
  %22 = insertvalue %"char[]" %21, i64 %size, 1, !dbg !377
  store %"char[]" %22, ptr %taddr48, align 8
  store ptr %taddr48, ptr %.anon, align 8
    #dbg_declare(ptr %.anon49, !378, !DIExpression(), !377)
  %23 = load ptr, ptr %.anon, align 8, !dbg !377
  %checknull = icmp eq ptr %23, null, !dbg !377
  %24 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !377
  br i1 %24, label %panic50, label %checkok54, !dbg !377

checkok54:                                        ; preds = %checkok47
  %ptradd55 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !377
  %25 = load i64, ptr %ptradd55, align 8, !dbg !377
  store i64 %25, ptr %.anon49, align 8, !dbg !377
  br label %loop.cond, !dbg !377

loop.cond:                                        ; preds = %if.exit, %checkok54
  %26 = load i64, ptr %.anon49, align 8, !dbg !377
  %gt56 = icmp ugt i64 %26, 0, !dbg !377
  br i1 %gt56, label %loop.body, label %loop.exit, !dbg !377

loop.body:                                        ; preds = %loop.cond
  %27 = load i64, ptr %.anon49, align 8, !dbg !379
  %subnuw = sub nuw i64 %27, 1, !dbg !379
  store i64 %subnuw, ptr %.anon49, align 8, !dbg !379
    #dbg_declare(ptr %i, !381, !DIExpression(), !379)
  %28 = load i64, ptr %.anon49, align 8, !dbg !379
  store i64 %28, ptr %i, align 8, !dbg !379
    #dbg_declare(ptr %c, !382, !DIExpression(), !379)
  %29 = load ptr, ptr %.anon, align 8, !dbg !379
  %checknull57 = icmp eq ptr %29, null, !dbg !379
  %30 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !379
  br i1 %30, label %panic58, label %checkok62, !dbg !379

checkok62:                                        ; preds = %loop.body
  %ptradd63 = getelementptr inbounds i8, ptr %29, i64 8, !dbg !379
  %31 = load i64, ptr %ptradd63, align 8, !dbg !379
  %32 = load ptr, ptr %29, align 8, !dbg !379
  %33 = load i64, ptr %.anon49, align 8, !dbg !379
  %ge64 = icmp uge i64 %33, %31, !dbg !379
  %34 = call i1 @llvm.expect.i1(i1 %ge64, i1 false), !dbg !379
  br i1 %34, label %panic65, label %checkok75, !dbg !379

checkok75:                                        ; preds = %checkok62
  %ptradd76 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !379
  %35 = load i8, ptr %ptradd76, align 1, !dbg !379
  store i8 %35, ptr %c, align 1, !dbg !379
  %36 = load i8, ptr %c, align 1, !dbg !383
  %37 = load i8, ptr %first, align 1, !dbg !383
  %eq = icmp eq i8 %36, %37, !dbg !383
  br i1 %eq, label %and.rhs77, label %and.phi110, !dbg !383

and.rhs77:                                        ; preds = %checkok75
  %38 = load %"char[]", ptr %1, align 8, !dbg !383
  %39 = extractvalue %"char[]" %38, 0, !dbg !383
  %40 = load i64, ptr %i, align 8, !dbg !383
  %41 = extractvalue %"char[]" %38, 1, !dbg !383
  %gt78 = icmp ugt i64 %40, %41, !dbg !383
  %42 = call i1 @llvm.expect.i1(i1 %gt78, i1 false), !dbg !383
  br i1 %42, label %panic79, label %checkok89, !dbg !383

checkok89:                                        ; preds = %and.rhs77
  %43 = load i64, ptr %needed, align 8, !dbg !383
  %add = add i64 %40, %43, !dbg !383
  %lt90 = icmp ult i64 %41, %add, !dbg !383
  %sub91 = sub i64 %add, 1, !dbg !383
  %44 = call i1 @llvm.expect.i1(i1 %lt90, i1 false), !dbg !383
  br i1 %44, label %panic92, label %checkok102, !dbg !383

checkok102:                                       ; preds = %checkok89
  %size103 = sub i64 %add, %40, !dbg !383
  %ptradd104 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !383
  %45 = insertvalue %"char[]" undef, ptr %ptradd104, 0, !dbg !383
  %46 = insertvalue %"char[]" %45, i64 %size103, 1, !dbg !383
  %47 = load %"char[]", ptr %2, align 8, !dbg !383
  %48 = extractvalue %"char[]" %46, 1, !dbg !383
  %49 = extractvalue %"char[]" %47, 1, !dbg !383
  %50 = extractvalue %"char[]" %46, 0, !dbg !383
  %51 = extractvalue %"char[]" %47, 0, !dbg !383
  %eq105 = icmp eq i64 %48, %49, !dbg !383
  br i1 %eq105, label %slice_cmp_values, label %slice_cmp_exit, !dbg !383

slice_cmp_values:                                 ; preds = %checkok102
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %52 = load i64, ptr %cmp.idx, align 8
  %lt106 = icmp slt i64 %52, %48
  br i1 %lt106, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd107 = getelementptr inbounds i8, ptr %50, i64 %52
  %ptradd108 = getelementptr inbounds i8, ptr %51, i64 %52
  %53 = load i8, ptr %ptradd107, align 1
  %54 = load i8, ptr %ptradd108, align 1
  %eq109 = icmp eq i8 %53, %54
  %55 = add i64 %52, 1
  store i64 %55, ptr %cmp.idx, align 8
  br i1 %eq109, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok102
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok102 ], [ false, %slice_loop_comparison ]
  br label %and.phi110

and.phi110:                                       ; preds = %slice_cmp_exit, %checkok75
  %val111 = phi i1 [ false, %checkok75 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val111, label %if.then112, label %if.exit

if.then112:                                       ; preds = %and.phi110
  %56 = load i64, ptr %i, align 8, !dbg !383
  %57 = load i64, ptr %i, align 8, !dbg !385
  %ptradd113 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !385
  %58 = load i64, ptr %ptradd113, align 8, !dbg !385
  %lt114 = icmp ult i64 %57, %58, !dbg !385
  br i1 %lt114, label %assert_ok119, label %assert_fail115, !dbg !385

assert_fail115:                                   ; preds = %if.then112
  store %"char[]" { ptr @.panic_msg.40, i64 34 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg117, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg118, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59(ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, ptr align 8 %indirectarg118, i32 437), !dbg !385
  unreachable, !dbg !385

assert_ok119:                                     ; preds = %if.then112
  store i64 %56, ptr %0, align 8, !dbg !385
  ret i64 0, !dbg !385

if.exit:                                          ; preds = %and.phi110
  br label %loop.cond, !dbg !385

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit120, !dbg !385

if.exit120:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !386

panic:                                            ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %60 = insertvalue %any undef, ptr %taddr, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %62 = insertvalue %any undef, ptr %taddr8, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg11, align 8
  store %any %61, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %63, ptr %ptradd12, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 447, ptr align 8 %indirectarg13), !dbg !374
  unreachable, !dbg !374

panic14:                                          ; preds = %checkok
  store i64 %15, ptr %taddr15, align 8
  %65 = insertvalue %any undef, ptr %taddr15, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %67 = insertvalue %any undef, ptr %taddr16, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg19, align 8
  store %any %66, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %68, ptr %ptradd21, align 16
  %69 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %69, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 448, ptr align 8 %indirectarg23), !dbg !377
  unreachable, !dbg !377

panic26:                                          ; preds = %checkok24
  store i64 0, ptr %taddr27, align 8
  %70 = insertvalue %any undef, ptr %taddr27, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr28, align 8
  %72 = insertvalue %any undef, ptr %taddr28, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 44 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg31, align 8
  store %any %71, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %73, ptr %ptradd33, align 16
  %74 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %74, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 448, ptr align 8 %indirectarg35), !dbg !377
  unreachable, !dbg !377

panic37:                                          ; preds = %checkok36
  store i64 %sub, ptr %taddr38, align 8
  %75 = insertvalue %any undef, ptr %taddr38, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr39, align 8
  %77 = insertvalue %any undef, ptr %taddr39, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg42, align 8
  store %any %76, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %78, ptr %ptradd44, align 16
  %79 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %79, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 448, ptr align 8 %indirectarg46), !dbg !377
  unreachable, !dbg !377

panic50:                                          ; preds = %checkok47
  store %"char[]" { ptr @.panic_msg.45, i64 53 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg53, align 8
  %80 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %80(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 448), !dbg !377
  unreachable, !dbg !377

panic58:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.45, i64 53 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg61, align 8
  %81 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %81(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 448), !dbg !379
  unreachable, !dbg !379

panic65:                                          ; preds = %checkok62
  store i64 %31, ptr %taddr66, align 8
  %82 = insertvalue %any undef, ptr %taddr66, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr67, align 8
  %84 = insertvalue %any undef, ptr %taddr67, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg70, align 8
  store %any %83, ptr %varargslots71, align 16
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %85, ptr %ptradd72, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp73", ptr %indirectarg74, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, i32 448, ptr align 8 %indirectarg74), !dbg !379
  unreachable, !dbg !379

panic79:                                          ; preds = %and.rhs77
  store i64 %41, ptr %taddr80, align 8
  %87 = insertvalue %any undef, ptr %taddr80, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr81, align 8
  %89 = insertvalue %any undef, ptr %taddr81, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg84, align 8
  store %any %88, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %90, ptr %ptradd86, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, i32 450, ptr align 8 %indirectarg88), !dbg !383
  unreachable, !dbg !383

panic92:                                          ; preds = %checkok89
  store i64 %sub91, ptr %taddr93, align 8
  %92 = insertvalue %any undef, ptr %taddr93, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr94, align 8
  %94 = insertvalue %any undef, ptr %taddr94, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg95, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %indirectarg97, align 8
  store %any %93, ptr %varargslots98, align 16
  %ptradd99 = getelementptr inbounds i8, ptr %varargslots98, i64 16
  store %any %95, ptr %ptradd99, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp100" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp100", ptr %indirectarg101, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg95, ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, i32 450, ptr align 8 %indirectarg101), !dbg !383
  unreachable, !dbg !383
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.ZString.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !387 {
entry:
  %str = alloca ptr, align 8
  store ptr %1, ptr %str, align 8
    #dbg_declare(ptr %str, !391, !DIExpression(), !392)
  %2 = load ptr, ptr %str, align 8, !dbg !393
  %3 = load ptr, ptr %str, align 8, !dbg !393
  %4 = call i64 @std.core.string.ZString.len(ptr %3), !dbg !393
  %add = add i64 0, %4, !dbg !393
  %size = sub i64 %add, 0, !dbg !393
  %5 = insertvalue %"char[]" undef, ptr %2, 0, !dbg !393
  %6 = insertvalue %"char[]" %5, i64 %size, 1, !dbg !393
  store %"char[]" %6, ptr %0, align 8, !dbg !393
  ret void, !dbg !393
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.ZString.char_len(ptr %0) #0 comdat !dbg !394 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
    #dbg_declare(ptr %str, !397, !DIExpression(), !398)
    #dbg_declare(ptr %len, !399, !DIExpression(), !400)
  store i64 0, ptr %len, align 8, !dbg !400
    #dbg_declare(ptr %ptr, !401, !DIExpression(), !402)
  %1 = load ptr, ptr %str, align 8, !dbg !402
  store ptr %1, ptr %ptr, align 8, !dbg !402
  br label %loop.cond, !dbg !403

loop.cond:                                        ; preds = %if.exit, %entry
    #dbg_declare(ptr %c, !404, !DIExpression(), !406)
  %2 = load ptr, ptr %ptr, align 8, !dbg !406
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !406
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !406
  %3 = load i8, ptr %2, align 1, !dbg !406
  store i8 %3, ptr %c, align 1, !dbg !406
  %4 = load i8, ptr %c, align 1, !dbg !406
  %intbool = icmp ne i8 %4, 0, !dbg !406
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !406

loop.body:                                        ; preds = %loop.cond
  %5 = load i8, ptr %c, align 1, !dbg !407
  %zext = zext i8 %5 to i32, !dbg !407
  %and = and i32 %zext, 192, !dbg !407
  %neq = icmp ne i32 %and, 128, !dbg !407
  br i1 %neq, label %if.then, label %if.exit, !dbg !407

if.then:                                          ; preds = %loop.body
  %6 = load i64, ptr %len, align 8, !dbg !407
  %add = add i64 %6, 1, !dbg !407
  store i64 %add, ptr %len, align 8, !dbg !407
  br label %if.exit, !dbg !407

if.exit:                                          ; preds = %if.then, %loop.body
  br label %loop.cond, !dbg !407

loop.exit:                                        ; preds = %loop.cond
  %7 = load i64, ptr %len, align 8, !dbg !409
  ret i64 %7, !dbg !409
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.ZString.len(ptr %0) #0 comdat !dbg !410 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
    #dbg_declare(ptr %str, !411, !DIExpression(), !412)
    #dbg_declare(ptr %len, !413, !DIExpression(), !414)
  store i64 0, ptr %len, align 8, !dbg !414
    #dbg_declare(ptr %ptr, !415, !DIExpression(), !416)
  %1 = load ptr, ptr %str, align 8, !dbg !416
  store ptr %1, ptr %ptr, align 8, !dbg !416
  br label %loop.cond, !dbg !417

loop.cond:                                        ; preds = %loop.body, %entry
    #dbg_declare(ptr %c, !418, !DIExpression(), !420)
  %2 = load ptr, ptr %ptr, align 8, !dbg !420
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !420
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !420
  %3 = load i8, ptr %2, align 1, !dbg !420
  store i8 %3, ptr %c, align 1, !dbg !420
  %4 = load i8, ptr %c, align 1, !dbg !420
  %intbool = icmp ne i8 %4, 0, !dbg !420
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !420

loop.body:                                        ; preds = %loop.cond
  %5 = load i64, ptr %len, align 8, !dbg !420
  %add = add i64 %5, 1, !dbg !420
  store i64 %add, ptr %len, align 8, !dbg !420
  br label %loop.cond, !dbg !420

loop.exit:                                        ; preds = %loop.cond
  %6 = load i64, ptr %len, align 8, !dbg !421
  ret i64 %6, !dbg !421
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.String.zstr_copy(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !422 {
entry:
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size2 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len11 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !425, !DIExpression(), !426)
    #dbg_declare(ptr %1, !427, !DIExpression(), !426)
    #dbg_declare(ptr %len, !428, !DIExpression(), !429)
  store ptr null, ptr %.cachedtype, align 8, !dbg !429
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !429
  %2 = load i64, ptr %ptradd, align 8, !dbg !429
  store i64 %2, ptr %len, align 8, !dbg !429
    #dbg_declare(ptr %str, !430, !DIExpression(), !431)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %3 = load i64, ptr %len, align 8, !dbg !431
  %add = add i64 %3, 1, !dbg !431
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %4 = load i64, ptr %size, align 8
  store i64 %4, ptr %size2, align 8
  %5 = load i64, ptr %size2, align 8, !dbg !432
  %i2nb = icmp eq i64 %5, 0, !dbg !432
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !432

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !432
  br label %expr_block.exit, !dbg !432

if.exit:                                          ; preds = %entry
  %ptradd3 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !436
  %6 = load i64, ptr %ptradd3, align 8, !dbg !436
  %7 = inttoptr i64 %6 to ptr, !dbg !436
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !429
  %8 = icmp eq ptr %7, %type, !dbg !429
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !429

cache_miss:                                       ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !429
  %9 = load ptr, ptr %ptradd4, align 8, !dbg !429
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire"), !dbg !429
  store ptr %10, ptr %.inlinecache, align 8, !dbg !429
  store ptr %7, ptr %.cachedtype, align 8, !dbg !429
  br label %11, !dbg !429

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !429
  br label %11, !dbg !429

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !429
  %12 = icmp eq ptr %fn_phi, null, !dbg !429
  br i1 %12, label %missing_function, label %match, !dbg !429

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.47, i64 9 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 68), !dbg !438
  unreachable, !dbg !438

match:                                            ; preds = %11
  %14 = load ptr, ptr %allocator1, align 8
  %15 = load i64, ptr %size2, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %14, i64 %15, i32 0, i64 0), !dbg !438
  %not_err = icmp eq i64 %16, 0, !dbg !438
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !438
  br i1 %17, label %after_check, label %assign_optional, !dbg !438

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !438
  br label %panic_block, !dbg !438

after_check:                                      ; preds = %match
  %18 = load ptr, ptr %retparam, align 8, !dbg !438
  store ptr %18, ptr %blockret, align 8, !dbg !438
  br label %expr_block.exit, !dbg !438

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !438

panic_block:                                      ; preds = %assign_optional
  %19 = insertvalue %any undef, ptr %error_var, 0, !dbg !438
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !438
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.47, i64 9 }, ptr %indirectarg9, align 8
  store %any %20, ptr %varargslots, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 57, ptr align 8 %indirectarg10), !dbg !434
  unreachable, !dbg !434

noerr_block:                                      ; preds = %expr_block.exit
  %22 = load ptr, ptr %blockret, align 8, !dbg !434
  store ptr %22, ptr %str, align 8, !dbg !434
  %23 = load ptr, ptr %str, align 8, !dbg !439
  store ptr %23, ptr %dst, align 8
  %24 = load ptr, ptr %0, align 8, !dbg !439
  store ptr %24, ptr %src, align 8
  %25 = load i64, ptr %len, align 8
  store i64 %25, ptr %len11, align 8
  %26 = load i64, ptr %len11, align 8, !dbg !440
  %eq = icmp eq i64 0, %26, !dbg !440
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !440

or.rhs:                                           ; preds = %noerr_block
  %27 = load ptr, ptr %dst, align 8, !dbg !440
  %28 = load i64, ptr %len11, align 8, !dbg !440
  %ptradd_any = getelementptr i8, ptr %27, i64 %28, !dbg !440
  %29 = load ptr, ptr %src, align 8, !dbg !440
  %le = icmp ule ptr %ptradd_any, %29, !dbg !440
  br label %or.phi, !dbg !440

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !440
  br i1 %val, label %or.phi15, label %or.rhs12, !dbg !440

or.rhs12:                                         ; preds = %or.phi
  %30 = load ptr, ptr %src, align 8, !dbg !440
  %31 = load i64, ptr %len11, align 8, !dbg !440
  %ptradd_any13 = getelementptr i8, ptr %30, i64 %31, !dbg !440
  %32 = load ptr, ptr %dst, align 8, !dbg !440
  %le14 = icmp ule ptr %ptradd_any13, %32, !dbg !440
  br label %or.phi15, !dbg !440

or.phi15:                                         ; preds = %or.rhs12, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %le14, %or.rhs12 ], !dbg !440
  br i1 %val16, label %assert_ok, label %assert_fail, !dbg !440

assert_fail:                                      ; preds = %or.phi15
  store %"char[]" { ptr @.panic_msg.48, i64 95 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.49, i64 6 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.47, i64 9 }, ptr %indirectarg19, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 309), !dbg !440
  unreachable, !dbg !440

assert_ok:                                        ; preds = %or.phi15
  %34 = load ptr, ptr %dst, align 8, !dbg !444
  %35 = load ptr, ptr %src, align 8, !dbg !444
  %36 = load i64, ptr %len11, align 8, !dbg !444
  call void @llvm.memcpy.p0.p0.i64(ptr %34, ptr %35, i64 %36, i1 false), !dbg !444
  %37 = load ptr, ptr %str, align 8, !dbg !445
  %38 = load i64, ptr %len, align 8, !dbg !445
  %ptradd20 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !445
  store i8 0, ptr %ptradd20, align 1, !dbg !445
  %39 = load ptr, ptr %str, align 8, !dbg !446
  ret ptr %39, !dbg !446
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.concat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !447 {
entry:
  %full_len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size4 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %s1_len = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %dst23 = alloca ptr, align 8
  %src24 = alloca ptr, align 8
  %len26 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !450, !DIExpression(), !451)
    #dbg_declare(ptr %2, !452, !DIExpression(), !451)
    #dbg_declare(ptr %3, !453, !DIExpression(), !451)
    #dbg_declare(ptr %full_len, !454, !DIExpression(), !455)
  store ptr null, ptr %.cachedtype, align 8, !dbg !455
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !455
  %4 = load i64, ptr %ptradd, align 8, !dbg !455
  %ptradd1 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !455
  %5 = load i64, ptr %ptradd1, align 8, !dbg !455
  %add = add i64 %4, %5, !dbg !455
  store i64 %add, ptr %full_len, align 8, !dbg !455
    #dbg_declare(ptr %str, !456, !DIExpression(), !457)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %3, i32 16, i1 false)
  %6 = load i64, ptr %full_len, align 8, !dbg !457
  %add2 = add i64 %6, 1, !dbg !457
  store i64 %add2, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %7 = load i64, ptr %size, align 8
  store i64 %7, ptr %size4, align 8
  %8 = load i64, ptr %size4, align 8, !dbg !458
  %i2nb = icmp eq i64 %8, 0, !dbg !458
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !458

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !458
  br label %expr_block.exit, !dbg !458

if.exit:                                          ; preds = %entry
  %ptradd5 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !462
  %9 = load i64, ptr %ptradd5, align 8, !dbg !462
  %10 = inttoptr i64 %9 to ptr, !dbg !462
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !455
  %11 = icmp eq ptr %10, %type, !dbg !455
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !455

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !455
  %12 = load ptr, ptr %ptradd6, align 8, !dbg !455
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.acquire"), !dbg !455
  store ptr %13, ptr %.inlinecache, align 8, !dbg !455
  store ptr %10, ptr %.cachedtype, align 8, !dbg !455
  br label %14, !dbg !455

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !455
  br label %14, !dbg !455

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !455
  %15 = icmp eq ptr %fn_phi, null, !dbg !455
  br i1 %15, label %missing_function, label %match, !dbg !455

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.50, i64 6 }, ptr %indirectarg8, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 68), !dbg !464
  unreachable, !dbg !464

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator3, align 8
  %18 = load i64, ptr %size4, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !464
  %not_err = icmp eq i64 %19, 0, !dbg !464
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !464
  br i1 %20, label %after_check, label %assign_optional, !dbg !464

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !464
  br label %panic_block, !dbg !464

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !464
  store ptr %21, ptr %blockret, align 8, !dbg !464
  br label %expr_block.exit, !dbg !464

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !464

panic_block:                                      ; preds = %assign_optional
  %22 = insertvalue %any undef, ptr %error_var, 0, !dbg !464
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !464
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.50, i64 6 }, ptr %indirectarg11, align 8
  store %any %23, ptr %varargslots, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %24, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 57, ptr align 8 %indirectarg12), !dbg !460
  unreachable, !dbg !460

noerr_block:                                      ; preds = %expr_block.exit
  %25 = load ptr, ptr %blockret, align 8, !dbg !460
  store ptr %25, ptr %str, align 8, !dbg !460
    #dbg_declare(ptr %s1_len, !465, !DIExpression(), !466)
  %ptradd13 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !466
  %26 = load i64, ptr %ptradd13, align 8, !dbg !466
  store i64 %26, ptr %s1_len, align 8, !dbg !466
  %27 = load ptr, ptr %str, align 8, !dbg !467
  store ptr %27, ptr %dst, align 8
  %28 = load ptr, ptr %1, align 8, !dbg !467
  store ptr %28, ptr %src, align 8
  %29 = load i64, ptr %s1_len, align 8
  store i64 %29, ptr %len, align 8
  %30 = load i64, ptr %len, align 8, !dbg !468
  %eq = icmp eq i64 0, %30, !dbg !468
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !468

or.rhs:                                           ; preds = %noerr_block
  %31 = load ptr, ptr %dst, align 8, !dbg !468
  %32 = load i64, ptr %len, align 8, !dbg !468
  %ptradd_any = getelementptr i8, ptr %31, i64 %32, !dbg !468
  %33 = load ptr, ptr %src, align 8, !dbg !468
  %le = icmp ule ptr %ptradd_any, %33, !dbg !468
  br label %or.phi, !dbg !468

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !468
  br i1 %val, label %or.phi17, label %or.rhs14, !dbg !468

or.rhs14:                                         ; preds = %or.phi
  %34 = load ptr, ptr %src, align 8, !dbg !468
  %35 = load i64, ptr %len, align 8, !dbg !468
  %ptradd_any15 = getelementptr i8, ptr %34, i64 %35, !dbg !468
  %36 = load ptr, ptr %dst, align 8, !dbg !468
  %le16 = icmp ule ptr %ptradd_any15, %36, !dbg !468
  br label %or.phi17, !dbg !468

or.phi17:                                         ; preds = %or.rhs14, %or.phi
  %val18 = phi i1 [ true, %or.phi ], [ %le16, %or.rhs14 ], !dbg !468
  br i1 %val18, label %assert_ok, label %assert_fail, !dbg !468

assert_fail:                                      ; preds = %or.phi17
  store %"char[]" { ptr @.panic_msg.48, i64 95 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.49, i64 6 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.50, i64 6 }, ptr %indirectarg21, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 309), !dbg !468
  unreachable, !dbg !468

assert_ok:                                        ; preds = %or.phi17
  %38 = load ptr, ptr %dst, align 8, !dbg !471
  %39 = load ptr, ptr %src, align 8, !dbg !471
  %40 = load i64, ptr %len, align 8, !dbg !471
  call void @llvm.memcpy.p0.p0.i64(ptr %38, ptr %39, i64 %40, i1 false), !dbg !471
  %41 = load ptr, ptr %str, align 8, !dbg !472
  %42 = load i64, ptr %s1_len, align 8, !dbg !472
  %ptradd_any22 = getelementptr i8, ptr %41, i64 %42, !dbg !472
  store ptr %ptradd_any22, ptr %dst23, align 8
  %43 = load ptr, ptr %2, align 8, !dbg !472
  store ptr %43, ptr %src24, align 8
  %ptradd25 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !472
  %44 = load i64, ptr %ptradd25, align 8
  store i64 %44, ptr %len26, align 8
  %45 = load i64, ptr %len26, align 8, !dbg !473
  %eq27 = icmp eq i64 0, %45, !dbg !473
  br i1 %eq27, label %or.phi31, label %or.rhs28, !dbg !473

or.rhs28:                                         ; preds = %assert_ok
  %46 = load ptr, ptr %dst23, align 8, !dbg !473
  %47 = load i64, ptr %len26, align 8, !dbg !473
  %ptradd_any29 = getelementptr i8, ptr %46, i64 %47, !dbg !473
  %48 = load ptr, ptr %src24, align 8, !dbg !473
  %le30 = icmp ule ptr %ptradd_any29, %48, !dbg !473
  br label %or.phi31, !dbg !473

or.phi31:                                         ; preds = %or.rhs28, %assert_ok
  %val32 = phi i1 [ true, %assert_ok ], [ %le30, %or.rhs28 ], !dbg !473
  br i1 %val32, label %or.phi36, label %or.rhs33, !dbg !473

or.rhs33:                                         ; preds = %or.phi31
  %49 = load ptr, ptr %src24, align 8, !dbg !473
  %50 = load i64, ptr %len26, align 8, !dbg !473
  %ptradd_any34 = getelementptr i8, ptr %49, i64 %50, !dbg !473
  %51 = load ptr, ptr %dst23, align 8, !dbg !473
  %le35 = icmp ule ptr %ptradd_any34, %51, !dbg !473
  br label %or.phi36, !dbg !473

or.phi36:                                         ; preds = %or.rhs33, %or.phi31
  %val37 = phi i1 [ true, %or.phi31 ], [ %le35, %or.rhs33 ], !dbg !473
  br i1 %val37, label %assert_ok42, label %assert_fail38, !dbg !473

assert_fail38:                                    ; preds = %or.phi36
  store %"char[]" { ptr @.panic_msg.48, i64 95 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.49, i64 6 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.50, i64 6 }, ptr %indirectarg41, align 8
  %52 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %52(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 309), !dbg !473
  unreachable, !dbg !473

assert_ok42:                                      ; preds = %or.phi36
  %53 = load ptr, ptr %dst23, align 8, !dbg !476
  %54 = load ptr, ptr %src24, align 8, !dbg !476
  %55 = load i64, ptr %len26, align 8, !dbg !476
  call void @llvm.memcpy.p0.p0.i64(ptr %53, ptr %54, i64 %55, i1 false), !dbg !476
  %56 = load ptr, ptr %str, align 8, !dbg !477
  %57 = load i64, ptr %full_len, align 8, !dbg !477
  %ptradd43 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !477
  store i8 0, ptr %ptradd43, align 1, !dbg !477
  %58 = load ptr, ptr %str, align 8, !dbg !478
  %59 = load i64, ptr %full_len, align 8, !dbg !478
  %add44 = add i64 0, %59, !dbg !478
  %size45 = sub i64 %add44, 0, !dbg !478
  %60 = insertvalue %"char[]" undef, ptr %58, 0, !dbg !478
  %61 = insertvalue %"char[]" %60, i64 %size45, 1, !dbg !478
  store %"char[]" %61, ptr %0, align 8, !dbg !478
  ret void, !dbg !478
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tconcat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !479 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
    #dbg_declare(ptr %1, !480, !DIExpression(), !481)
    #dbg_declare(ptr %2, !482, !DIExpression(), !481)
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !483
  %i2nb = icmp eq ptr %3, null, !dbg !483
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !483

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !485
  br label %if.exit, !dbg !485

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !487
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !481
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !481
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  store %any %6, ptr %indirectarg2, align 8
  call void @std.core.String.concat(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2), !dbg !481
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !481
  ret void, !dbg !481
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.String.zstr_tcopy(ptr align 8 %0) #0 comdat !dbg !488 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %0, !491, !DIExpression(), !492)
  %1 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !493
  %i2nb = icmp eq ptr %1, null, !dbg !493
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !493

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !495
  br label %if.exit, !dbg !495

if.exit:                                          ; preds = %if.then, %entry
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !497
  %3 = insertvalue %any undef, ptr %2, 0, !dbg !492
  %4 = insertvalue %any %3, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !492
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  store %any %4, ptr %indirectarg1, align 8
  %5 = call ptr @std.core.String.zstr_copy(ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !492
  ret ptr %5, !dbg !492
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.copy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !498 {
entry:
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size2 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len11 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !501, !DIExpression(), !502)
    #dbg_declare(ptr %2, !503, !DIExpression(), !502)
    #dbg_declare(ptr %len, !504, !DIExpression(), !505)
  store ptr null, ptr %.cachedtype, align 8, !dbg !505
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !505
  %3 = load i64, ptr %ptradd, align 8, !dbg !505
  store i64 %3, ptr %len, align 8, !dbg !505
    #dbg_declare(ptr %str, !506, !DIExpression(), !507)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !507
  %add = add i64 %4, 1, !dbg !507
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %size, align 8
  store i64 %5, ptr %size2, align 8
  %6 = load i64, ptr %size2, align 8, !dbg !508
  %i2nb = icmp eq i64 %6, 0, !dbg !508
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !508

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !508
  br label %expr_block.exit, !dbg !508

if.exit:                                          ; preds = %entry
  %ptradd3 = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !512
  %7 = load i64, ptr %ptradd3, align 8, !dbg !512
  %8 = inttoptr i64 %7 to ptr, !dbg !512
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !505
  %9 = icmp eq ptr %8, %type, !dbg !505
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !505

cache_miss:                                       ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !505
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !505
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire"), !dbg !505
  store ptr %11, ptr %.inlinecache, align 8, !dbg !505
  store ptr %8, ptr %.cachedtype, align 8, !dbg !505
  br label %12, !dbg !505

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !505
  br label %12, !dbg !505

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !505
  %13 = icmp eq ptr %fn_phi, null, !dbg !505
  br i1 %13, label %missing_function, label %match, !dbg !505

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.51, i64 4 }, ptr %indirectarg6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 68), !dbg !514
  unreachable, !dbg !514

match:                                            ; preds = %12
  %15 = load ptr, ptr %allocator1, align 8
  %16 = load i64, ptr %size2, align 8
  %17 = call i64 %fn_phi(ptr %retparam, ptr %15, i64 %16, i32 0, i64 0), !dbg !514
  %not_err = icmp eq i64 %17, 0, !dbg !514
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !514
  br i1 %18, label %after_check, label %assign_optional, !dbg !514

assign_optional:                                  ; preds = %match
  store i64 %17, ptr %error_var, align 8, !dbg !514
  br label %panic_block, !dbg !514

after_check:                                      ; preds = %match
  %19 = load ptr, ptr %retparam, align 8, !dbg !514
  store ptr %19, ptr %blockret, align 8, !dbg !514
  br label %expr_block.exit, !dbg !514

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !514

panic_block:                                      ; preds = %assign_optional
  %20 = insertvalue %any undef, ptr %error_var, 0, !dbg !514
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !514
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.51, i64 4 }, ptr %indirectarg9, align 8
  store %any %21, ptr %varargslots, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 57, ptr align 8 %indirectarg10), !dbg !510
  unreachable, !dbg !510

noerr_block:                                      ; preds = %expr_block.exit
  %23 = load ptr, ptr %blockret, align 8, !dbg !510
  store ptr %23, ptr %str, align 8, !dbg !510
  %24 = load ptr, ptr %str, align 8, !dbg !515
  store ptr %24, ptr %dst, align 8
  %25 = load ptr, ptr %1, align 8, !dbg !515
  store ptr %25, ptr %src, align 8
  %26 = load i64, ptr %len, align 8
  store i64 %26, ptr %len11, align 8
  %27 = load i64, ptr %len11, align 8, !dbg !516
  %eq = icmp eq i64 0, %27, !dbg !516
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !516

or.rhs:                                           ; preds = %noerr_block
  %28 = load ptr, ptr %dst, align 8, !dbg !516
  %29 = load i64, ptr %len11, align 8, !dbg !516
  %ptradd_any = getelementptr i8, ptr %28, i64 %29, !dbg !516
  %30 = load ptr, ptr %src, align 8, !dbg !516
  %le = icmp ule ptr %ptradd_any, %30, !dbg !516
  br label %or.phi, !dbg !516

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !516
  br i1 %val, label %or.phi15, label %or.rhs12, !dbg !516

or.rhs12:                                         ; preds = %or.phi
  %31 = load ptr, ptr %src, align 8, !dbg !516
  %32 = load i64, ptr %len11, align 8, !dbg !516
  %ptradd_any13 = getelementptr i8, ptr %31, i64 %32, !dbg !516
  %33 = load ptr, ptr %dst, align 8, !dbg !516
  %le14 = icmp ule ptr %ptradd_any13, %33, !dbg !516
  br label %or.phi15, !dbg !516

or.phi15:                                         ; preds = %or.rhs12, %or.phi
  %val16 = phi i1 [ true, %or.phi ], [ %le14, %or.rhs12 ], !dbg !516
  br i1 %val16, label %assert_ok, label %assert_fail, !dbg !516

assert_fail:                                      ; preds = %or.phi15
  store %"char[]" { ptr @.panic_msg.48, i64 95 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.49, i64 6 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.51, i64 4 }, ptr %indirectarg19, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 309), !dbg !516
  unreachable, !dbg !516

assert_ok:                                        ; preds = %or.phi15
  %35 = load ptr, ptr %dst, align 8, !dbg !519
  %36 = load ptr, ptr %src, align 8, !dbg !519
  %37 = load i64, ptr %len11, align 8, !dbg !519
  call void @llvm.memcpy.p0.p0.i64(ptr %35, ptr %36, i64 %37, i1 false), !dbg !519
  %38 = load ptr, ptr %str, align 8, !dbg !520
  %39 = load i64, ptr %len, align 8, !dbg !520
  %ptradd20 = getelementptr inbounds i8, ptr %38, i64 %39, !dbg !520
  store i8 0, ptr %ptradd20, align 1, !dbg !520
  %40 = load ptr, ptr %str, align 8, !dbg !521
  %41 = load i64, ptr %len, align 8, !dbg !521
  %add21 = add i64 0, %41, !dbg !521
  %size22 = sub i64 %add21, 0, !dbg !521
  %42 = insertvalue %"char[]" undef, ptr %40, 0, !dbg !521
  %43 = insertvalue %"char[]" %42, i64 %size22, 1, !dbg !521
  store %"char[]" %43, ptr %0, align 8, !dbg !521
  ret void, !dbg !521
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.free(ptr %0, ptr align 8 %1) #0 comdat !dbg !522 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %s = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !525
  %2 = icmp eq ptr %0, null, !dbg !525
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !525
  br i1 %3, label %panic, label %checkok, !dbg !525

checkok:                                          ; preds = %entry
  store ptr %0, ptr %s, align 8
    #dbg_declare(ptr %s, !526, !DIExpression(), !527)
    #dbg_declare(ptr %1, !528, !DIExpression(), !527)
  %4 = load ptr, ptr %s, align 8, !dbg !529
  %checknull = icmp eq ptr %4, null, !dbg !529
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !529
  br i1 %5, label %panic3, label %checkok7, !dbg !529

checkok7:                                         ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !529
  %6 = load i64, ptr %ptradd, align 8, !dbg !529
  %i2nb = icmp eq i64 %6, 0, !dbg !529
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !529

if.then:                                          ; preds = %checkok7
  ret void, !dbg !529

if.exit:                                          ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %1, i32 16, i1 false)
  %7 = load ptr, ptr %s, align 8, !dbg !530
  %checknull8 = icmp eq ptr %7, null, !dbg !530
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !530
  br i1 %8, label %panic9, label %checkok13, !dbg !530

checkok13:                                        ; preds = %if.exit
  %9 = load ptr, ptr %7, align 8, !dbg !530
  store ptr %9, ptr %ptr, align 8
  %10 = load ptr, ptr %ptr, align 8, !dbg !531
  %i2nb14 = icmp eq ptr %10, null, !dbg !531
  br i1 %i2nb14, label %if.then15, label %if.exit16, !dbg !531

if.then15:                                        ; preds = %checkok13
  br label %expr_block.exit, !dbg !531

if.exit16:                                        ; preds = %checkok13
  %ptradd17 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !533
  %11 = load i64, ptr %ptradd17, align 8, !dbg !533
  %12 = inttoptr i64 %11 to ptr, !dbg !533
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !525
  %13 = icmp eq ptr %12, %type, !dbg !525
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !525

cache_miss:                                       ; preds = %if.exit16
  %ptradd18 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !525
  %14 = load ptr, ptr %ptradd18, align 8, !dbg !525
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !525
  store ptr %15, ptr %.inlinecache, align 8, !dbg !525
  store ptr %12, ptr %.cachedtype, align 8, !dbg !525
  br label %16, !dbg !525

cache_hit:                                        ; preds = %if.exit16
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !525
  br label %16, !dbg !525

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !525
  %17 = icmp eq ptr %fn_phi, null, !dbg !525
  br i1 %17, label %missing_function, label %match, !dbg !525

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.25, i64 44 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.53, i64 4 }, ptr %indirectarg21, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 105), !dbg !533
  unreachable, !dbg !533

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !533
  %20 = load ptr, ptr %ptr, align 8, !dbg !533
  call void %fn_phi(ptr %19, ptr %20, i8 zeroext 0), !dbg !533
  br label %expr_block.exit, !dbg !533

expr_block.exit:                                  ; preds = %match, %if.then15
  %21 = load ptr, ptr %s, align 8, !dbg !534
  %checknull22 = icmp eq ptr %21, null, !dbg !534
  %22 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !534
  br i1 %22, label %panic23, label %checkok27, !dbg !534

checkok27:                                        ; preds = %expr_block.exit
  store %"char[]" zeroinitializer, ptr %21, align 8, !dbg !534
  ret void, !dbg !534

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.52, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.53, i64 4 }, ptr %indirectarg2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 515), !dbg !527
  unreachable, !dbg !527

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.54, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.53, i64 4 }, ptr %indirectarg6, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 517), !dbg !529
  unreachable, !dbg !529

panic9:                                           ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.54, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.53, i64 4 }, ptr %indirectarg12, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 518), !dbg !530
  unreachable, !dbg !530

panic23:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.54, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.53, i64 4 }, ptr %indirectarg26, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 519), !dbg !534
  unreachable, !dbg !534
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !535 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !538, !DIExpression(), !539)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !540
  %i2nb = icmp eq ptr %2, null, !dbg !540
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !540

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !542
  br label %if.exit, !dbg !542

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !544
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !539
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !539
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !539
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !539
  ret void, !dbg !539
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.ZString.copy(ptr noalias sret(%"char[]") align 8 %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !545 {
entry:
  %z = alloca ptr, align 8
  %sretparam = alloca %"char[]", align 8
  %sretparam1 = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %z, align 8
    #dbg_declare(ptr %z, !548, !DIExpression(), !549)
    #dbg_declare(ptr %2, !550, !DIExpression(), !549)
  %3 = load ptr, ptr %z, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %3), !dbg !551
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %sretparam, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam1, ptr align 8 %indirectarg, ptr align 8 %indirectarg2) #5, !dbg !551
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam1, i32 16, i1 false), !dbg !551
  ret void, !dbg !551
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.ZString.tcopy(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !552 {
entry:
  %z = alloca ptr, align 8
  %sretparam = alloca %"char[]", align 8
  %sretparam1 = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %z, align 8
    #dbg_declare(ptr %z, !553, !DIExpression(), !554)
  %2 = load ptr, ptr %z, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %2), !dbg !555
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !556
  %i2nb = icmp eq ptr %3, null, !dbg !556
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !556

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !558
  br label %if.exit, !dbg !558

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !560
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !555
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !555
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %sretparam, i32 16, i1 false)
  store %any %6, ptr %indirectarg2, align 8
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %sretparam1, ptr align 8 %indirectarg, ptr align 8 %indirectarg2) #5, !dbg !555
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam1, i32 16, i1 false), !dbg !555
  ret void, !dbg !555
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_new_utf16(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !561 {
entry:
  %len16 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !572, !DIExpression(), !573)
    #dbg_declare(ptr %2, !574, !DIExpression(), !573)
    #dbg_declare(ptr %len16, !575, !DIExpression(), !576)
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf16len_for_utf8(ptr align 8 %indirectarg), !dbg !576
  store i64 %3, ptr %len16, align 8, !dbg !576
    #dbg_declare(ptr %data, !577, !DIExpression(), !578)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len16, align 8, !dbg !578
  %add = add i64 %4, 1, !dbg !578
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8, !dbg !579
  %mul = mul i64 2, %5, !dbg !579
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !581
  %i2nb = icmp eq i64 %6, 0, !dbg !581
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !581

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !581
  br label %expr_block.exit, !dbg !581

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !583
  %7 = load i64, ptr %ptradd, align 8, !dbg !583
  %8 = inttoptr i64 %7 to ptr, !dbg !583
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd2, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.55, i64 12 }, ptr %indirectarg5, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 68), !dbg !585
  unreachable, !dbg !585

match:                                            ; preds = %12
  %15 = load ptr, ptr %allocator1, align 8
  %16 = load i64, ptr %size, align 8
  %17 = call i64 %fn_phi(ptr %retparam, ptr %15, i64 %16, i32 0, i64 0), !dbg !585
  %not_err = icmp eq i64 %17, 0, !dbg !585
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !585
  br i1 %18, label %after_check, label %assign_optional, !dbg !585

assign_optional:                                  ; preds = %match
  store i64 %17, ptr %error_var, align 8, !dbg !585
  br label %guard_block, !dbg !585

after_check:                                      ; preds = %match
  %19 = load ptr, ptr %retparam, align 8, !dbg !585
  store ptr %19, ptr %blockret, align 8, !dbg !585
  br label %expr_block.exit, !dbg !585

expr_block.exit:                                  ; preds = %after_check, %if.then
  %20 = load ptr, ptr %blockret, align 8, !dbg !585
  store ptr %20, ptr %taddr, align 8
  %21 = load ptr, ptr %taddr, align 8
  %22 = load i64, ptr %elements, align 8, !dbg !579
  %add6 = add i64 0, %22, !dbg !579
  %size7 = sub i64 %add6, 0, !dbg !579
  %23 = insertvalue %"ushort[]" undef, ptr %21, 0, !dbg !579
  %24 = insertvalue %"ushort[]" %23, i64 %size7, 1, !dbg !579
  br label %noerr_block, !dbg !579

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !579
  ret i64 %25, !dbg !579

noerr_block:                                      ; preds = %expr_block.exit
  %26 = extractvalue %"ushort[]" %24, 0, !dbg !579
  store ptr %26, ptr %data, align 8, !dbg !579
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg9, ptr align 8 %1, i32 16, i1 false)
  %27 = load ptr, ptr %data, align 8
  %28 = call i64 @std.core.string.conv.utf8to16_unsafe(ptr align 8 %indirectarg9, ptr %27), !dbg !586
  %not_err10 = icmp eq i64 %28, 0, !dbg !586
  %29 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !586
  br i1 %29, label %after_check12, label %assign_optional11, !dbg !586

assign_optional11:                                ; preds = %noerr_block
  store i64 %28, ptr %error_var8, align 8, !dbg !586
  br label %guard_block13, !dbg !586

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !586

guard_block13:                                    ; preds = %assign_optional11
  %30 = load i64, ptr %error_var8, align 8, !dbg !586
  ret i64 %30, !dbg !586

noerr_block14:                                    ; preds = %after_check12
  %31 = load ptr, ptr %data, align 8, !dbg !587
  %32 = load i64, ptr %len16, align 8, !dbg !587
  %ptroffset = getelementptr inbounds [2 x i8], ptr %31, i64 %32, !dbg !587
  store i16 0, ptr %ptroffset, align 2, !dbg !587
  %33 = load ptr, ptr %data, align 8, !dbg !588
  %34 = load i64, ptr %len16, align 8, !dbg !588
  %add15 = add i64 0, %34, !dbg !588
  %size16 = sub i64 %add15, 0, !dbg !588
  %35 = insertvalue %"ushort[]" undef, ptr %33, 0, !dbg !588
  %36 = insertvalue %"ushort[]" %35, i64 %size16, 1, !dbg !588
  store %"ushort[]" %36, ptr %0, align 8, !dbg !588
  ret i64 0, !dbg !588
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_temp_utf16(ptr %0, ptr align 8 %1) #0 comdat !dbg !589 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !592, !DIExpression(), !593)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !594
  %i2nb = icmp eq ptr %2, null, !dbg !594
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !594

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !597
  br label %if.exit, !dbg !597

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !599
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !596
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !596
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !596
  %not_err = icmp eq i64 %6, 0, !dbg !596
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !596
  br i1 %7, label %after_check, label %assign_optional, !dbg !596

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !596
  br label %err_retblock, !dbg !596

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !596
  ret i64 0, !dbg !596

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !596
  ret i64 %8, !dbg !596
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_wstring(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !600 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !606, !DIExpression(), !607)
    #dbg_declare(ptr %2, !608, !DIExpression(), !607)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.core.String.to_new_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !609
  %not_err = icmp eq i64 %3, 0, !dbg !609
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !609
  br i1 %4, label %after_check, label %assign_optional, !dbg !609

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !609
  br label %err_retblock, !dbg !609

after_check:                                      ; preds = %entry
  %5 = load ptr, ptr %retparam, align 8, !dbg !609
  store ptr %5, ptr %0, align 8, !dbg !609
  ret i64 0, !dbg !609

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !609
  ret i64 %6, !dbg !609
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_temp_wstring(ptr %0, ptr align 8 %1) #0 comdat !dbg !610 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !613, !DIExpression(), !614)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !615
  %i2nb = icmp eq ptr %2, null, !dbg !615
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !615

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !617
  br label %if.exit, !dbg !617

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !619
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !614
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !614
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !614
  %not_err = icmp eq i64 %6, 0, !dbg !614
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !614
  br i1 %7, label %after_check, label %assign_optional, !dbg !614

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !614
  br label %err_retblock, !dbg !614

after_check:                                      ; preds = %if.exit
  %8 = load ptr, ptr %retparam, align 8, !dbg !614
  store ptr %8, ptr %0, align 8, !dbg !614
  ret i64 0, !dbg !614

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !614
  ret i64 %9, !dbg !614
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_new_wstring(ptr %0, ptr align 8 %1) #0 comdat !dbg !620 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !621, !DIExpression(), !622)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  %2 = call i64 @std.core.String.to_wstring(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !622
  %not_err = icmp eq i64 %2, 0, !dbg !622
  %3 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !622
  br i1 %3, label %after_check, label %assign_optional, !dbg !622

assign_optional:                                  ; preds = %entry
  store i64 %2, ptr %reterr, align 8, !dbg !622
  br label %err_retblock, !dbg !622

after_check:                                      ; preds = %entry
  %4 = load ptr, ptr %retparam, align 8, !dbg !622
  store ptr %4, ptr %0, align 8, !dbg !622
  ret i64 0, !dbg !622

err_retblock:                                     ; preds = %assign_optional
  %5 = load i64, ptr %reterr, align 8, !dbg !622
  ret i64 %5, !dbg !622
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_utf32(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !623 {
entry:
  %codepoints = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %error_var8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !633, !DIExpression(), !634)
    #dbg_declare(ptr %2, !635, !DIExpression(), !634)
    #dbg_declare(ptr %codepoints, !636, !DIExpression(), !637)
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8_codepoints(ptr align 8 %indirectarg), !dbg !637
  store i64 %3, ptr %codepoints, align 8, !dbg !637
    #dbg_declare(ptr %data, !638, !DIExpression(), !639)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %codepoints, align 8, !dbg !639
  %add = add i64 %4, 1, !dbg !639
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8, !dbg !640
  %mul = mul i64 4, %5, !dbg !640
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !642
  %i2nb = icmp eq i64 %6, 0, !dbg !642
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !642

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !642
  br label %expr_block.exit, !dbg !642

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !644
  %7 = load i64, ptr %ptradd, align 8, !dbg !644
  %8 = inttoptr i64 %7 to ptr, !dbg !644
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd2, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %indirectarg5, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 68), !dbg !646
  unreachable, !dbg !646

match:                                            ; preds = %12
  %15 = load ptr, ptr %allocator1, align 8
  %16 = load i64, ptr %size, align 8
  %17 = call i64 %fn_phi(ptr %retparam, ptr %15, i64 %16, i32 0, i64 0), !dbg !646
  %not_err = icmp eq i64 %17, 0, !dbg !646
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !646
  br i1 %18, label %after_check, label %assign_optional, !dbg !646

assign_optional:                                  ; preds = %match
  store i64 %17, ptr %error_var, align 8, !dbg !646
  br label %guard_block, !dbg !646

after_check:                                      ; preds = %match
  %19 = load ptr, ptr %retparam, align 8, !dbg !646
  store ptr %19, ptr %blockret, align 8, !dbg !646
  br label %expr_block.exit, !dbg !646

expr_block.exit:                                  ; preds = %after_check, %if.then
  %20 = load ptr, ptr %blockret, align 8, !dbg !646
  store ptr %20, ptr %taddr, align 8
  %21 = load ptr, ptr %taddr, align 8
  %22 = load i64, ptr %elements, align 8, !dbg !640
  %add6 = add i64 0, %22, !dbg !640
  %size7 = sub i64 %add6, 0, !dbg !640
  %23 = insertvalue %"uint[]" undef, ptr %21, 0, !dbg !640
  %24 = insertvalue %"uint[]" %23, i64 %size7, 1, !dbg !640
  br label %noerr_block, !dbg !640

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !640
  ret i64 %25, !dbg !640

noerr_block:                                      ; preds = %expr_block.exit
  %26 = extractvalue %"uint[]" %24, 0, !dbg !640
  store ptr %26, ptr %data, align 8, !dbg !640
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg9, ptr align 8 %1, i32 16, i1 false)
  %27 = load ptr, ptr %data, align 8
  %28 = call i64 @std.core.string.conv.utf8to32_unsafe(ptr align 8 %indirectarg9, ptr %27), !dbg !647
  %not_err10 = icmp eq i64 %28, 0, !dbg !647
  %29 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !647
  br i1 %29, label %after_check12, label %assign_optional11, !dbg !647

assign_optional11:                                ; preds = %noerr_block
  store i64 %28, ptr %error_var8, align 8, !dbg !647
  br label %guard_block13, !dbg !647

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !647

guard_block13:                                    ; preds = %assign_optional11
  %30 = load i64, ptr %error_var8, align 8, !dbg !647
  ret i64 %30, !dbg !647

noerr_block14:                                    ; preds = %after_check12
  %31 = load ptr, ptr %data, align 8, !dbg !648
  %32 = load i64, ptr %codepoints, align 8, !dbg !648
  %ptroffset = getelementptr inbounds [4 x i8], ptr %31, i64 %32, !dbg !648
  store i32 0, ptr %ptroffset, align 4, !dbg !648
  %33 = load ptr, ptr %data, align 8, !dbg !649
  %34 = load i64, ptr %codepoints, align 8, !dbg !649
  %add15 = add i64 0, %34, !dbg !649
  %size16 = sub i64 %add15, 0, !dbg !649
  %35 = insertvalue %"uint[]" undef, ptr %33, 0, !dbg !649
  %36 = insertvalue %"uint[]" %35, i64 %size16, 1, !dbg !649
  store %"uint[]" %36, ptr %0, align 8, !dbg !649
  ret i64 0, !dbg !649
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_new_utf32(ptr %0, ptr align 8 %1) #0 comdat !dbg !650 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !653, !DIExpression(), !654)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  %2 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !654
  %not_err = icmp eq i64 %2, 0, !dbg !654
  %3 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !654
  br i1 %3, label %after_check, label %assign_optional, !dbg !654

assign_optional:                                  ; preds = %entry
  store i64 %2, ptr %reterr, align 8, !dbg !654
  br label %err_retblock, !dbg !654

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !654
  ret i64 0, !dbg !654

err_retblock:                                     ; preds = %assign_optional
  %4 = load i64, ptr %reterr, align 8, !dbg !654
  ret i64 %4, !dbg !654
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_temp_utf32(ptr %0, ptr align 8 %1) #0 comdat !dbg !655 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !656, !DIExpression(), !657)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !658
  %i2nb = icmp eq ptr %2, null, !dbg !658
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !658

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !660
  br label %if.exit, !dbg !660

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !662
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !657
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !657
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.String.to_utf32(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !657
  %not_err = icmp eq i64 %6, 0, !dbg !657
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !657
  br i1 %7, label %after_check, label %assign_optional, !dbg !657

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !657
  br label %err_retblock, !dbg !657

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !657
  ret i64 0, !dbg !657

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !657
  ret i64 %8, !dbg !657
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.convert_ascii_to_lower(ptr align 8 %0) #0 comdat !dbg !663 {
entry:
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !666, !DIExpression(), !667)
    #dbg_declare(ptr %.anon, !668, !DIExpression(), !670)
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !670
  %1 = load i64, ptr %ptradd, align 8, !dbg !670
  store i64 %1, ptr %.anon, align 8, !dbg !670
    #dbg_declare(ptr %.anon1, !668, !DIExpression(), !670)
  store i64 0, ptr %.anon1, align 8, !dbg !670
  br label %loop.cond, !dbg !670

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon1, align 8, !dbg !670
  %3 = load i64, ptr %.anon, align 8, !dbg !670
  %lt = icmp ult i64 %2, %3, !dbg !670
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !670

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !671, !DIExpression(), !673)
  %ptradd2 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !673
  %4 = load i64, ptr %ptradd2, align 8, !dbg !673
  %5 = load ptr, ptr %0, align 8, !dbg !673
  %6 = load i64, ptr %.anon1, align 8, !dbg !673
  %ge = icmp uge i64 %6, %4, !dbg !673
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !673
  br i1 %7, label %panic, label %checkok, !dbg !673

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !673
  store ptr %ptradd8, ptr %c, align 8, !dbg !673
  %8 = load ptr, ptr %c, align 8, !dbg !673
  %checknull = icmp eq ptr %8, null, !dbg !673
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !673
  br i1 %9, label %panic9, label %checkok13, !dbg !673

checkok13:                                        ; preds = %checkok
  %10 = load i8, ptr %8, align 1, !dbg !673
  %11 = call i8 @std.ascii.char.is_upper(i8 %10), !dbg !673
  %12 = trunc i8 %11 to i1, !dbg !673
  br i1 %12, label %if.then, label %if.exit, !dbg !673

if.then:                                          ; preds = %checkok13
  %13 = load ptr, ptr %c, align 8, !dbg !673
  %checknull14 = icmp eq ptr %13, null, !dbg !673
  %14 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !673
  br i1 %14, label %panic15, label %checkok19, !dbg !673

checkok19:                                        ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !673
  %add = add i8 %15, 32, !dbg !673
  store i8 %add, ptr %13, align 1, !dbg !673
  br label %if.exit, !dbg !673

if.exit:                                          ; preds = %checkok19, %checkok13
  %16 = load i64, ptr %.anon1, align 8, !dbg !670
  %addnuw = add nuw i64 %16, 1, !dbg !670
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !670
  br label %loop.cond, !dbg !670

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !670

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %19 = insertvalue %any undef, ptr %taddr3, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.57, i64 22 }, ptr %indirectarg5, align 8
  store %any %18, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd6, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 588, ptr align 8 %indirectarg7), !dbg !673
  unreachable, !dbg !673

panic9:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.58, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.57, i64 22 }, ptr %indirectarg12, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 588), !dbg !673
  unreachable, !dbg !673

panic15:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.58, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.57, i64 22 }, ptr %indirectarg18, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 588), !dbg !673
  unreachable, !dbg !673
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.new_ascii_to_lower(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !674 {
entry:
  %copy = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %indirectarg2 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !675, !DIExpression(), !676)
    #dbg_declare(ptr %2, !677, !DIExpression(), !676)
    #dbg_declare(ptr %copy, !678, !DIExpression(), !679)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %copy, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !679
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %copy, i32 16, i1 false)
  call void @std.core.String.convert_ascii_to_lower(ptr align 8 %indirectarg2), !dbg !680
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %copy, i32 16, i1 false), !dbg !681
  ret void, !dbg !681
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.temp_ascii_to_lower(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !682 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !683, !DIExpression(), !684)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !685
  %i2nb = icmp eq ptr %2, null, !dbg !685
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !685

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !688
  br label %if.exit, !dbg !688

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !690
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !687
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !687
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  call void @std.core.String.new_ascii_to_lower(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !687
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !687
  ret void, !dbg !687
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.convert_ascii_to_upper(ptr align 8 %0) #0 comdat !dbg !691 {
entry:
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !692, !DIExpression(), !693)
    #dbg_declare(ptr %.anon, !694, !DIExpression(), !696)
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !696
  %1 = load i64, ptr %ptradd, align 8, !dbg !696
  store i64 %1, ptr %.anon, align 8, !dbg !696
    #dbg_declare(ptr %.anon1, !694, !DIExpression(), !696)
  store i64 0, ptr %.anon1, align 8, !dbg !696
  br label %loop.cond, !dbg !696

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon1, align 8, !dbg !696
  %3 = load i64, ptr %.anon, align 8, !dbg !696
  %lt = icmp ult i64 %2, %3, !dbg !696
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !696

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !697, !DIExpression(), !699)
  %ptradd2 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !699
  %4 = load i64, ptr %ptradd2, align 8, !dbg !699
  %5 = load ptr, ptr %0, align 8, !dbg !699
  %6 = load i64, ptr %.anon1, align 8, !dbg !699
  %ge = icmp uge i64 %6, %4, !dbg !699
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !699
  br i1 %7, label %panic, label %checkok, !dbg !699

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !699
  store ptr %ptradd8, ptr %c, align 8, !dbg !699
  %8 = load ptr, ptr %c, align 8, !dbg !699
  %checknull = icmp eq ptr %8, null, !dbg !699
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !699
  br i1 %9, label %panic9, label %checkok13, !dbg !699

checkok13:                                        ; preds = %checkok
  %10 = load i8, ptr %8, align 1, !dbg !699
  %11 = call i8 @std.ascii.char.is_lower(i8 %10), !dbg !699
  %12 = trunc i8 %11 to i1, !dbg !699
  br i1 %12, label %if.then, label %if.exit, !dbg !699

if.then:                                          ; preds = %checkok13
  %13 = load ptr, ptr %c, align 8, !dbg !699
  %checknull14 = icmp eq ptr %13, null, !dbg !699
  %14 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !699
  br i1 %14, label %panic15, label %checkok19, !dbg !699

checkok19:                                        ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !699
  %sub = sub i8 %15, 32, !dbg !699
  store i8 %sub, ptr %13, align 1, !dbg !699
  br label %if.exit, !dbg !699

if.exit:                                          ; preds = %checkok19, %checkok13
  %16 = load i64, ptr %.anon1, align 8, !dbg !696
  %addnuw = add nuw i64 %16, 1, !dbg !696
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !696
  br label %loop.cond, !dbg !696

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !696

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %17 = insertvalue %any undef, ptr %taddr, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %19 = insertvalue %any undef, ptr %taddr3, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.59, i64 22 }, ptr %indirectarg5, align 8
  store %any %18, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %20, ptr %ptradd6, align 16
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 611, ptr align 8 %indirectarg7), !dbg !699
  unreachable, !dbg !699

panic9:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.58, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.59, i64 22 }, ptr %indirectarg12, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 611), !dbg !699
  unreachable, !dbg !699

panic15:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.58, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.59, i64 22 }, ptr %indirectarg18, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 611), !dbg !699
  unreachable, !dbg !699
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.new_ascii_to_upper(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !700 {
entry:
  %copy = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
  %indirectarg2 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !701, !DIExpression(), !702)
    #dbg_declare(ptr %2, !703, !DIExpression(), !702)
    #dbg_declare(ptr %copy, !704, !DIExpression(), !705)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  call void @std.core.String.copy(ptr sret(%"char[]") align 8 %copy, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !705
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %copy, i32 16, i1 false)
  call void @std.core.String.convert_ascii_to_upper(ptr align 8 %indirectarg2), !dbg !706
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %copy, i32 16, i1 false), !dbg !707
  ret void, !dbg !707
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.iterator(ptr noalias sret(%StringIterator) align 8 %0, ptr align 8 %1) #0 comdat !dbg !708 {
entry:
  %literal = alloca %StringIterator, align 8
    #dbg_declare(ptr %1, !715, !DIExpression(), !716)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !717
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !717
  store i64 0, ptr %ptradd, align 8, !dbg !717
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !717
  ret void, !dbg !717
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.temp_ascii_to_upper(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1) #0 comdat !dbg !718 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !719, !DIExpression(), !720)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !721
  %i2nb = icmp eq ptr %2, null, !dbg !721
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !721

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !724
  br label %if.exit, !dbg !724

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !726
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !723
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !723
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  call void @std.core.String.new_ascii_to_upper(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !723
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !723
  ret void, !dbg !723
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.utf8_codepoints(ptr align 8 %0) #0 comdat !dbg !727 {
entry:
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %.anon1 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr3 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
    #dbg_declare(ptr %0, !730, !DIExpression(), !731)
    #dbg_declare(ptr %len, !732, !DIExpression(), !733)
  store i64 0, ptr %len, align 8, !dbg !733
    #dbg_declare(ptr %.anon, !734, !DIExpression(), !736)
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !736
  %1 = load i64, ptr %ptradd, align 8, !dbg !736
  store i64 %1, ptr %.anon, align 8, !dbg !736
    #dbg_declare(ptr %.anon1, !734, !DIExpression(), !736)
  store i64 0, ptr %.anon1, align 8, !dbg !736
  br label %loop.cond, !dbg !736

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon1, align 8, !dbg !736
  %3 = load i64, ptr %.anon, align 8, !dbg !736
  %lt = icmp ult i64 %2, %3, !dbg !736
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !736

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !737, !DIExpression(), !739)
  %ptradd2 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !739
  %4 = load i64, ptr %ptradd2, align 8, !dbg !739
  %5 = load ptr, ptr %0, align 8, !dbg !739
  %6 = load i64, ptr %.anon1, align 8, !dbg !739
  %ge = icmp uge i64 %6, %4, !dbg !739
  %7 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !739
  br i1 %7, label %panic, label %checkok, !dbg !739

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %5, i64 %6, !dbg !739
  %8 = load i8, ptr %ptradd8, align 1, !dbg !739
  store i8 %8, ptr %c, align 1, !dbg !739
  %9 = load i8, ptr %c, align 1, !dbg !740
  %zext = zext i8 %9 to i32, !dbg !740
  %and = and i32 %zext, 192, !dbg !740
  %neq = icmp ne i32 %and, 128, !dbg !740
  br i1 %neq, label %if.then, label %if.exit, !dbg !740

if.then:                                          ; preds = %checkok
  %10 = load i64, ptr %len, align 8, !dbg !740
  %add = add i64 %10, 1, !dbg !740
  store i64 %add, ptr %len, align 8, !dbg !740
  br label %if.exit, !dbg !740

if.exit:                                          ; preds = %if.then, %checkok
  %11 = load i64, ptr %.anon1, align 8, !dbg !736
  %addnuw = add nuw i64 %11, 1, !dbg !736
  store i64 %addnuw, ptr %.anon1, align 8, !dbg !736
  br label %loop.cond, !dbg !736

loop.exit:                                        ; preds = %loop.cond
  %12 = load i64, ptr %len, align 8, !dbg !742
  ret i64 %12, !dbg !742

panic:                                            ; preds = %loop.body
  store i64 %4, ptr %taddr, align 8
  %13 = insertvalue %any undef, ptr %taddr, 0
  %14 = insertvalue %any %13, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr3, align 8
  %15 = insertvalue %any undef, ptr %taddr3, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.60, i64 15 }, ptr %indirectarg5, align 8
  store %any %14, ptr %varargslots, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %16, ptr %ptradd6, align 16
  %17 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %17, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 677, ptr align 8 %indirectarg7), !dbg !739
  unreachable, !dbg !739
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_int128(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !743 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i128, align 16
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value138 = alloca i128, align 16
    #dbg_declare(ptr %1, !748, !DIExpression(), !749)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !750, !DIExpression(), !749)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !751
  %le = icmp sle i32 %4, 10, !dbg !751
  br i1 %le, label %and.rhs, label %and.phi, !dbg !751

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !751
  %gt = icmp sgt i32 %5, 1, !dbg !751
  br label %and.phi, !dbg !751

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !751
  br i1 %val, label %or.phi, label %or.rhs, !dbg !751

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !751
  %eq = icmp eq i32 %6, 16, !dbg !751
  br label %or.phi, !dbg !751

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !751
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !751

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.62, i64 9 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !751
  unreachable, !dbg !751

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !754, !DIExpression(), !755)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !755
  %8 = load i64, ptr %ptradd, align 8, !dbg !755
  store i64 %8, ptr %len, align 8, !dbg !755
    #dbg_declare(ptr %index, !756, !DIExpression(), !757)
  store i64 0, ptr %index, align 8, !dbg !757
    #dbg_declare(ptr %ptr, !758, !DIExpression(), !759)
  %9 = load ptr, ptr %string, align 8, !dbg !759
  store ptr %9, ptr %ptr, align 8, !dbg !759
  br label %loop.cond, !dbg !760

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !761
  %11 = load i64, ptr %len, align 8, !dbg !761
  %lt = icmp ult i64 %10, %11, !dbg !761
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !761

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !761
  %13 = load i64, ptr %index, align 8, !dbg !761
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !761
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !763
  %eq7 = icmp eq i8 %15, 32, !dbg !763
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !763

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !763
  %eq9 = icmp eq i8 %16, 9, !dbg !763
  br label %or.phi10, !dbg !763

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !763
  br label %and.phi12, !dbg !763

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !763
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !763

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !761
  %add = add i64 %17, 1, !dbg !761
  store i64 %add, ptr %index, align 8, !dbg !761
  br label %loop.cond, !dbg !761

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !766
  %19 = load i64, ptr %index, align 8, !dbg !766
  %eq14 = icmp eq i64 %18, %19, !dbg !766
  br i1 %eq14, label %if.then, label %if.exit, !dbg !766

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !766
  br label %err_retblock, !dbg !766

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !767, !DIExpression(), !768)
  store i8 0, ptr %is_negative, align 1, !dbg !768
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !769
  %20 = load i64, ptr %ptradd15, align 8, !dbg !769
  %21 = load ptr, ptr %string, align 8, !dbg !769
  %22 = load i64, ptr %index, align 8, !dbg !769
  %ge = icmp uge i64 %22, %20, !dbg !769
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !769
  br i1 %23, label %panic, label %checkok, !dbg !769

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !769
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !771

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !773
  %26 = load i64, ptr %index, align 8, !dbg !774
  %add24 = add i64 %26, 1, !dbg !774
  store i64 %add24, ptr %index, align 8, !dbg !774
  br label %switch.exit, !dbg !774

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !775
  %add26 = add i64 %27, 1, !dbg !775
  store i64 %add26, ptr %index, align 8, !dbg !775
  br label %switch.exit, !dbg !775

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !777

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !779
  %29 = load i64, ptr %index, align 8, !dbg !779
  %eq27 = icmp eq i64 %28, %29, !dbg !779
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !779

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !779
  br label %err_retblock, !dbg !779

if.exit29:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !780, !DIExpression(), !781)
  %30 = load i32, ptr %base1, align 4, !dbg !781
  %sext = sext i32 %30 to i128, !dbg !781
  store i128 %sext, ptr %base_used, align 16, !dbg !781
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !782
  %31 = load i64, ptr %ptradd30, align 8, !dbg !782
  %32 = load ptr, ptr %string, align 8, !dbg !782
  %33 = load i64, ptr %index, align 8, !dbg !782
  %ge31 = icmp uge i64 %33, %31, !dbg !782
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !782
  br i1 %34, label %panic32, label %checkok42, !dbg !782

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !782
  %35 = load i8, ptr %ptradd43, align 1, !dbg !782
  %eq44 = icmp eq i8 %35, 48, !dbg !782
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !782

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !782
  %eq46 = icmp eq i32 %36, 10, !dbg !782
  br label %and.phi47, !dbg !782

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !782
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !782

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !783
  %add50 = add i64 %37, 1, !dbg !783
  store i64 %add50, ptr %index, align 8, !dbg !783
  %38 = load i64, ptr %index, align 8, !dbg !785
  %39 = load i64, ptr %len, align 8, !dbg !785
  %eq51 = icmp eq i64 %38, %39, !dbg !785
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !785

if.then52:                                        ; preds = %if.then49
  store i128 0, ptr %blockret, align 16, !dbg !785
  br label %expr_block.exit149, !dbg !785

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !786
  %40 = load i64, ptr %ptradd54, align 8, !dbg !786
  %41 = load ptr, ptr %string, align 8, !dbg !786
  %42 = load i64, ptr %index, align 8, !dbg !786
  %ge55 = icmp uge i64 %42, %40, !dbg !786
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !786
  br i1 %43, label %panic56, label %checkok66, !dbg !786

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !786
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i128 16, ptr %base_used, align 16, !dbg !788
  %46 = load i64, ptr %index, align 8, !dbg !790
  %add71 = add i64 %46, 1, !dbg !790
  store i64 %add71, ptr %index, align 8, !dbg !790
  br label %switch.exit77, !dbg !790

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i128 2, ptr %base_used, align 16, !dbg !791
  %47 = load i64, ptr %index, align 8, !dbg !793
  %add73 = add i64 %47, 1, !dbg !793
  store i64 %add73, ptr %index, align 8, !dbg !793
  br label %switch.exit77, !dbg !793

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i128 8, ptr %base_used, align 16, !dbg !794
  %48 = load i64, ptr %index, align 8, !dbg !796
  %add75 = add i64 %48, 1, !dbg !796
  store i64 %add75, ptr %index, align 8, !dbg !796
  br label %switch.exit77, !dbg !796

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !797

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !799
  %50 = load i64, ptr %index, align 8, !dbg !799
  %eq78 = icmp eq i64 %49, %50, !dbg !799
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !799

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !799
  br label %err_retblock, !dbg !799

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !799

if.exit81:                                        ; preds = %if.exit80, %and.phi47
    #dbg_declare(ptr %value, !800, !DIExpression(), !801)
  store i128 0, ptr %value, align 16, !dbg !801
  br label %loop.cond82, !dbg !802

loop.cond82:                                      ; preds = %noerr_block147, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !803
  %52 = load i64, ptr %len, align 8, !dbg !803
  %neq = icmp ne i64 %51, %52, !dbg !803
  br i1 %neq, label %loop.body83, label %loop.exit148, !dbg !803

loop.body83:                                      ; preds = %loop.cond82
    #dbg_declare(ptr %c84, !805, !DIExpression(), !807)
    #dbg_declare(ptr %ch, !808, !DIExpression(), !810)
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !810
  %53 = load i64, ptr %ptradd86, align 8, !dbg !810
  %54 = load ptr, ptr %string, align 8, !dbg !810
  %55 = load i64, ptr %index, align 8, !dbg !810
  %add87 = add i64 %55, 1, !dbg !810
  store i64 %add87, ptr %index, align 8, !dbg !810
  %ge88 = icmp uge i64 %55, %53, !dbg !810
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !810
  br i1 %56, label %panic89, label %checkok99, !dbg !810

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !810
  %57 = load i8, ptr %ptradd100, align 1, !dbg !810
  store i8 %57, ptr %ch, align 1, !dbg !810
  %58 = load i128, ptr %base_used, align 16, !dbg !811
  %neq101 = icmp ne i128 %58, 16, !dbg !811
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !811

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !811
  %lt103 = icmp ult i8 %59, 65, !dbg !811
  br label %or.phi104, !dbg !811

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !811
  br i1 %val105, label %if.then106, label %if.exit107, !dbg !811

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !811
  %zext = zext i8 %60 to i32, !dbg !811
  %sub = sub i32 %zext, 48, !dbg !811
  %trunc = trunc i32 %sub to i8, !dbg !811
  store i8 %trunc, ptr %blockret85, align 1, !dbg !811
  br label %expr_block.exit, !dbg !811

if.exit107:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !812
  %le108 = icmp ule i8 %61, 70, !dbg !812
  br i1 %le108, label %if.then109, label %if.exit114, !dbg !812

if.then109:                                       ; preds = %if.exit107
  %62 = load i8, ptr %ch, align 1, !dbg !812
  %zext110 = zext i8 %62 to i32, !dbg !812
  %sub111 = sub i32 %zext110, 65, !dbg !812
  %add112 = add i32 %sub111, 10, !dbg !812
  %trunc113 = trunc i32 %add112 to i8, !dbg !812
  store i8 %trunc113, ptr %blockret85, align 1, !dbg !812
  br label %expr_block.exit, !dbg !812

if.exit114:                                       ; preds = %if.exit107
  %63 = load i8, ptr %ch, align 1, !dbg !813
  %lt115 = icmp ult i8 %63, 97, !dbg !813
  br i1 %lt115, label %if.then116, label %if.exit117, !dbg !813

if.then116:                                       ; preds = %if.exit114
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !813
  br label %guard_block, !dbg !813

if.exit117:                                       ; preds = %if.exit114
  %64 = load i8, ptr %ch, align 1, !dbg !814
  %gt118 = icmp ugt i8 %64, 102, !dbg !814
  br i1 %gt118, label %if.then119, label %if.exit120, !dbg !814

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !814
  br label %guard_block, !dbg !814

if.exit120:                                       ; preds = %if.exit117
  %65 = load i8, ptr %ch, align 1, !dbg !815
  %zext121 = zext i8 %65 to i32, !dbg !815
  %sub122 = sub i32 %zext121, 97, !dbg !815
  %add123 = add i32 %sub122, 10, !dbg !815
  %trunc124 = trunc i32 %add123 to i8, !dbg !815
  store i8 %trunc124, ptr %blockret85, align 1, !dbg !815
  br label %expr_block.exit, !dbg !815

expr_block.exit:                                  ; preds = %if.exit120, %if.then109, %if.then106
  br label %noerr_block, !dbg !815

guard_block:                                      ; preds = %if.then119, %if.then116
  %66 = load i64, ptr %error_var, align 8, !dbg !815
  store i64 %66, ptr %reterr, align 8, !dbg !815
  br label %err_retblock, !dbg !815

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !815
  store i8 %67, ptr %c84, align 1, !dbg !815
  %68 = load i8, ptr %c84, align 1, !dbg !816
  %zext125 = zext i8 %68 to i128, !dbg !816
  %69 = load i128, ptr %base_used, align 16, !dbg !816
  %le126 = icmp sle i128 %69, %zext125, !dbg !816
  %check = icmp slt i128 %zext125, 0, !dbg !816
  %siui-le = or i1 %check, %le126, !dbg !816
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !816

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !816
  br label %err_retblock, !dbg !816

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !817
  %71 = trunc i8 %70 to i1, !dbg !817
  br i1 %71, label %if.then131, label %if.exit137, !dbg !817

if.then131:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value, !819, !DIExpression(), !821)
  %72 = load i128, ptr %value, align 16, !dbg !821
  %73 = load i128, ptr %base_used, align 16, !dbg !821
  %mul = mul i128 %72, %73, !dbg !821
  %74 = load i8, ptr %c84, align 1, !dbg !821
  %zext132 = zext i8 %74 to i128, !dbg !821
  %sub133 = sub i128 %mul, %zext132, !dbg !821
  store i128 %sub133, ptr %new_value, align 16, !dbg !821
  %75 = load i128, ptr %new_value, align 16, !dbg !822
  %76 = load i128, ptr %value, align 16, !dbg !822
  %gt134 = icmp sgt i128 %75, %76, !dbg !822
  br i1 %gt134, label %if.then135, label %if.exit136, !dbg !822

if.then135:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !822
  br label %guard_block146, !dbg !822

if.exit136:                                       ; preds = %if.then131
  %77 = load i128, ptr %new_value, align 16, !dbg !823
  store i128 %77, ptr %blockret130, align 16, !dbg !823
  br label %expr_block.exit145, !dbg !823

if.exit137:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value138, !824, !DIExpression(), !825)
  %78 = load i128, ptr %value, align 16, !dbg !825
  %79 = load i128, ptr %base_used, align 16, !dbg !825
  %mul139 = mul i128 %78, %79, !dbg !825
  %80 = load i8, ptr %c84, align 1, !dbg !825
  %zext140 = zext i8 %80 to i128, !dbg !825
  %add141 = add i128 %mul139, %zext140, !dbg !825
  store i128 %add141, ptr %new_value138, align 16, !dbg !825
  %81 = load i128, ptr %new_value138, align 16, !dbg !826
  %82 = load i128, ptr %value, align 16, !dbg !826
  %lt142 = icmp slt i128 %81, %82, !dbg !826
  br i1 %lt142, label %if.then143, label %if.exit144, !dbg !826

if.then143:                                       ; preds = %if.exit137
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !826
  br label %guard_block146, !dbg !826

if.exit144:                                       ; preds = %if.exit137
  %83 = load i128, ptr %new_value138, align 16, !dbg !827
  store i128 %83, ptr %blockret130, align 16, !dbg !827
  br label %expr_block.exit145, !dbg !827

expr_block.exit145:                               ; preds = %if.exit144, %if.exit136
  br label %noerr_block147, !dbg !827

guard_block146:                                   ; preds = %if.then143, %if.then135
  %84 = load i64, ptr %error_var129, align 8, !dbg !827
  store i64 %84, ptr %reterr, align 8, !dbg !827
  br label %err_retblock, !dbg !827

noerr_block147:                                   ; preds = %expr_block.exit145
  %85 = load i128, ptr %blockret130, align 16, !dbg !827
  store i128 %85, ptr %value, align 16, !dbg !827
  br label %loop.cond82, !dbg !827

loop.exit148:                                     ; preds = %loop.cond82
  %86 = load i128, ptr %value, align 16, !dbg !828
  store i128 %86, ptr %blockret, align 16, !dbg !828
  br label %expr_block.exit149, !dbg !828

expr_block.exit149:                               ; preds = %loop.exit148, %if.then52
  %87 = load i128, ptr %blockret, align 16, !dbg !828
  store i128 %87, ptr %0, align 16, !dbg !828
  ret i64 0, !dbg !828

err_retblock:                                     ; preds = %guard_block146, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !828
  ret i64 %88, !dbg !828

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.62, i64 9 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !769
  unreachable, !dbg !769

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.62, i64 9 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 709, ptr align 8 %indirectarg41), !dbg !782
  unreachable, !dbg !782

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.62, i64 9 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 713, ptr align 8 %indirectarg65), !dbg !786
  unreachable, !dbg !786

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.62, i64 9 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 736, ptr align 8 %indirectarg98), !dbg !810
  unreachable, !dbg !810
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_long(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !829 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i64, align 8
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value138 = alloca i64, align 8
    #dbg_declare(ptr %1, !833, !DIExpression(), !834)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !835, !DIExpression(), !834)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !836
  %le = icmp sle i32 %4, 10, !dbg !836
  br i1 %le, label %and.rhs, label %and.phi, !dbg !836

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !836
  %gt = icmp sgt i32 %5, 1, !dbg !836
  br label %and.phi, !dbg !836

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !836
  br i1 %val, label %or.phi, label %or.rhs, !dbg !836

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !836
  %eq = icmp eq i32 %6, 16, !dbg !836
  br label %or.phi, !dbg !836

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !836
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !836

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.63, i64 7 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !836
  unreachable, !dbg !836

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !839, !DIExpression(), !840)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !840
  %8 = load i64, ptr %ptradd, align 8, !dbg !840
  store i64 %8, ptr %len, align 8, !dbg !840
    #dbg_declare(ptr %index, !841, !DIExpression(), !842)
  store i64 0, ptr %index, align 8, !dbg !842
    #dbg_declare(ptr %ptr, !843, !DIExpression(), !844)
  %9 = load ptr, ptr %string, align 8, !dbg !844
  store ptr %9, ptr %ptr, align 8, !dbg !844
  br label %loop.cond, !dbg !845

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !846
  %11 = load i64, ptr %len, align 8, !dbg !846
  %lt = icmp ult i64 %10, %11, !dbg !846
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !846

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !846
  %13 = load i64, ptr %index, align 8, !dbg !846
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !846
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !848
  %eq7 = icmp eq i8 %15, 32, !dbg !848
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !848

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !848
  %eq9 = icmp eq i8 %16, 9, !dbg !848
  br label %or.phi10, !dbg !848

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !848
  br label %and.phi12, !dbg !848

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !848
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !848

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !846
  %add = add i64 %17, 1, !dbg !846
  store i64 %add, ptr %index, align 8, !dbg !846
  br label %loop.cond, !dbg !846

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !850
  %19 = load i64, ptr %index, align 8, !dbg !850
  %eq14 = icmp eq i64 %18, %19, !dbg !850
  br i1 %eq14, label %if.then, label %if.exit, !dbg !850

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !850
  br label %err_retblock, !dbg !850

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !851, !DIExpression(), !852)
  store i8 0, ptr %is_negative, align 1, !dbg !852
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !853
  %20 = load i64, ptr %ptradd15, align 8, !dbg !853
  %21 = load ptr, ptr %string, align 8, !dbg !853
  %22 = load i64, ptr %index, align 8, !dbg !853
  %ge = icmp uge i64 %22, %20, !dbg !853
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !853
  br i1 %23, label %panic, label %checkok, !dbg !853

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !853
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !855

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !857
  %26 = load i64, ptr %index, align 8, !dbg !858
  %add24 = add i64 %26, 1, !dbg !858
  store i64 %add24, ptr %index, align 8, !dbg !858
  br label %switch.exit, !dbg !858

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !859
  %add26 = add i64 %27, 1, !dbg !859
  store i64 %add26, ptr %index, align 8, !dbg !859
  br label %switch.exit, !dbg !859

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !861

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !863
  %29 = load i64, ptr %index, align 8, !dbg !863
  %eq27 = icmp eq i64 %28, %29, !dbg !863
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !863

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !863
  br label %err_retblock, !dbg !863

if.exit29:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !864, !DIExpression(), !865)
  %30 = load i32, ptr %base1, align 4, !dbg !865
  %sext = sext i32 %30 to i64, !dbg !865
  store i64 %sext, ptr %base_used, align 8, !dbg !865
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !866
  %31 = load i64, ptr %ptradd30, align 8, !dbg !866
  %32 = load ptr, ptr %string, align 8, !dbg !866
  %33 = load i64, ptr %index, align 8, !dbg !866
  %ge31 = icmp uge i64 %33, %31, !dbg !866
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !866
  br i1 %34, label %panic32, label %checkok42, !dbg !866

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !866
  %35 = load i8, ptr %ptradd43, align 1, !dbg !866
  %eq44 = icmp eq i8 %35, 48, !dbg !866
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !866

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !866
  %eq46 = icmp eq i32 %36, 10, !dbg !866
  br label %and.phi47, !dbg !866

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !866
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !866

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !867
  %add50 = add i64 %37, 1, !dbg !867
  store i64 %add50, ptr %index, align 8, !dbg !867
  %38 = load i64, ptr %index, align 8, !dbg !869
  %39 = load i64, ptr %len, align 8, !dbg !869
  %eq51 = icmp eq i64 %38, %39, !dbg !869
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !869

if.then52:                                        ; preds = %if.then49
  store i64 0, ptr %blockret, align 8, !dbg !869
  br label %expr_block.exit149, !dbg !869

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !870
  %40 = load i64, ptr %ptradd54, align 8, !dbg !870
  %41 = load ptr, ptr %string, align 8, !dbg !870
  %42 = load i64, ptr %index, align 8, !dbg !870
  %ge55 = icmp uge i64 %42, %40, !dbg !870
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !870
  br i1 %43, label %panic56, label %checkok66, !dbg !870

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !870
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i64 16, ptr %base_used, align 8, !dbg !872
  %46 = load i64, ptr %index, align 8, !dbg !874
  %add71 = add i64 %46, 1, !dbg !874
  store i64 %add71, ptr %index, align 8, !dbg !874
  br label %switch.exit77, !dbg !874

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i64 2, ptr %base_used, align 8, !dbg !875
  %47 = load i64, ptr %index, align 8, !dbg !877
  %add73 = add i64 %47, 1, !dbg !877
  store i64 %add73, ptr %index, align 8, !dbg !877
  br label %switch.exit77, !dbg !877

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i64 8, ptr %base_used, align 8, !dbg !878
  %48 = load i64, ptr %index, align 8, !dbg !880
  %add75 = add i64 %48, 1, !dbg !880
  store i64 %add75, ptr %index, align 8, !dbg !880
  br label %switch.exit77, !dbg !880

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !881

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !883
  %50 = load i64, ptr %index, align 8, !dbg !883
  %eq78 = icmp eq i64 %49, %50, !dbg !883
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !883

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !883
  br label %err_retblock, !dbg !883

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !883

if.exit81:                                        ; preds = %if.exit80, %and.phi47
    #dbg_declare(ptr %value, !884, !DIExpression(), !885)
  store i64 0, ptr %value, align 8, !dbg !885
  br label %loop.cond82, !dbg !886

loop.cond82:                                      ; preds = %noerr_block147, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !887
  %52 = load i64, ptr %len, align 8, !dbg !887
  %neq = icmp ne i64 %51, %52, !dbg !887
  br i1 %neq, label %loop.body83, label %loop.exit148, !dbg !887

loop.body83:                                      ; preds = %loop.cond82
    #dbg_declare(ptr %c84, !889, !DIExpression(), !891)
    #dbg_declare(ptr %ch, !892, !DIExpression(), !894)
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !894
  %53 = load i64, ptr %ptradd86, align 8, !dbg !894
  %54 = load ptr, ptr %string, align 8, !dbg !894
  %55 = load i64, ptr %index, align 8, !dbg !894
  %add87 = add i64 %55, 1, !dbg !894
  store i64 %add87, ptr %index, align 8, !dbg !894
  %ge88 = icmp uge i64 %55, %53, !dbg !894
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !894
  br i1 %56, label %panic89, label %checkok99, !dbg !894

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !894
  %57 = load i8, ptr %ptradd100, align 1, !dbg !894
  store i8 %57, ptr %ch, align 1, !dbg !894
  %58 = load i64, ptr %base_used, align 8, !dbg !895
  %neq101 = icmp ne i64 %58, 16, !dbg !895
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !895

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !895
  %lt103 = icmp ult i8 %59, 65, !dbg !895
  br label %or.phi104, !dbg !895

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !895
  br i1 %val105, label %if.then106, label %if.exit107, !dbg !895

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !895
  %zext = zext i8 %60 to i32, !dbg !895
  %sub = sub i32 %zext, 48, !dbg !895
  %trunc = trunc i32 %sub to i8, !dbg !895
  store i8 %trunc, ptr %blockret85, align 1, !dbg !895
  br label %expr_block.exit, !dbg !895

if.exit107:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !896
  %le108 = icmp ule i8 %61, 70, !dbg !896
  br i1 %le108, label %if.then109, label %if.exit114, !dbg !896

if.then109:                                       ; preds = %if.exit107
  %62 = load i8, ptr %ch, align 1, !dbg !896
  %zext110 = zext i8 %62 to i32, !dbg !896
  %sub111 = sub i32 %zext110, 65, !dbg !896
  %add112 = add i32 %sub111, 10, !dbg !896
  %trunc113 = trunc i32 %add112 to i8, !dbg !896
  store i8 %trunc113, ptr %blockret85, align 1, !dbg !896
  br label %expr_block.exit, !dbg !896

if.exit114:                                       ; preds = %if.exit107
  %63 = load i8, ptr %ch, align 1, !dbg !897
  %lt115 = icmp ult i8 %63, 97, !dbg !897
  br i1 %lt115, label %if.then116, label %if.exit117, !dbg !897

if.then116:                                       ; preds = %if.exit114
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !897
  br label %guard_block, !dbg !897

if.exit117:                                       ; preds = %if.exit114
  %64 = load i8, ptr %ch, align 1, !dbg !898
  %gt118 = icmp ugt i8 %64, 102, !dbg !898
  br i1 %gt118, label %if.then119, label %if.exit120, !dbg !898

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !898
  br label %guard_block, !dbg !898

if.exit120:                                       ; preds = %if.exit117
  %65 = load i8, ptr %ch, align 1, !dbg !899
  %zext121 = zext i8 %65 to i32, !dbg !899
  %sub122 = sub i32 %zext121, 97, !dbg !899
  %add123 = add i32 %sub122, 10, !dbg !899
  %trunc124 = trunc i32 %add123 to i8, !dbg !899
  store i8 %trunc124, ptr %blockret85, align 1, !dbg !899
  br label %expr_block.exit, !dbg !899

expr_block.exit:                                  ; preds = %if.exit120, %if.then109, %if.then106
  br label %noerr_block, !dbg !899

guard_block:                                      ; preds = %if.then119, %if.then116
  %66 = load i64, ptr %error_var, align 8, !dbg !899
  store i64 %66, ptr %reterr, align 8, !dbg !899
  br label %err_retblock, !dbg !899

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !899
  store i8 %67, ptr %c84, align 1, !dbg !899
  %68 = load i8, ptr %c84, align 1, !dbg !900
  %zext125 = zext i8 %68 to i64, !dbg !900
  %69 = load i64, ptr %base_used, align 8, !dbg !900
  %le126 = icmp sle i64 %69, %zext125, !dbg !900
  %check = icmp slt i64 %zext125, 0, !dbg !900
  %siui-le = or i1 %check, %le126, !dbg !900
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !900

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !900
  br label %err_retblock, !dbg !900

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !901
  %71 = trunc i8 %70 to i1, !dbg !901
  br i1 %71, label %if.then131, label %if.exit137, !dbg !901

if.then131:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value, !903, !DIExpression(), !905)
  %72 = load i64, ptr %value, align 8, !dbg !905
  %73 = load i64, ptr %base_used, align 8, !dbg !905
  %mul = mul i64 %72, %73, !dbg !905
  %74 = load i8, ptr %c84, align 1, !dbg !905
  %zext132 = zext i8 %74 to i64, !dbg !905
  %sub133 = sub i64 %mul, %zext132, !dbg !905
  store i64 %sub133, ptr %new_value, align 8, !dbg !905
  %75 = load i64, ptr %new_value, align 8, !dbg !906
  %76 = load i64, ptr %value, align 8, !dbg !906
  %gt134 = icmp sgt i64 %75, %76, !dbg !906
  br i1 %gt134, label %if.then135, label %if.exit136, !dbg !906

if.then135:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !906
  br label %guard_block146, !dbg !906

if.exit136:                                       ; preds = %if.then131
  %77 = load i64, ptr %new_value, align 8, !dbg !907
  store i64 %77, ptr %blockret130, align 8, !dbg !907
  br label %expr_block.exit145, !dbg !907

if.exit137:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value138, !908, !DIExpression(), !909)
  %78 = load i64, ptr %value, align 8, !dbg !909
  %79 = load i64, ptr %base_used, align 8, !dbg !909
  %mul139 = mul i64 %78, %79, !dbg !909
  %80 = load i8, ptr %c84, align 1, !dbg !909
  %zext140 = zext i8 %80 to i64, !dbg !909
  %add141 = add i64 %mul139, %zext140, !dbg !909
  store i64 %add141, ptr %new_value138, align 8, !dbg !909
  %81 = load i64, ptr %new_value138, align 8, !dbg !910
  %82 = load i64, ptr %value, align 8, !dbg !910
  %lt142 = icmp slt i64 %81, %82, !dbg !910
  br i1 %lt142, label %if.then143, label %if.exit144, !dbg !910

if.then143:                                       ; preds = %if.exit137
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !910
  br label %guard_block146, !dbg !910

if.exit144:                                       ; preds = %if.exit137
  %83 = load i64, ptr %new_value138, align 8, !dbg !911
  store i64 %83, ptr %blockret130, align 8, !dbg !911
  br label %expr_block.exit145, !dbg !911

expr_block.exit145:                               ; preds = %if.exit144, %if.exit136
  br label %noerr_block147, !dbg !911

guard_block146:                                   ; preds = %if.then143, %if.then135
  %84 = load i64, ptr %error_var129, align 8, !dbg !911
  store i64 %84, ptr %reterr, align 8, !dbg !911
  br label %err_retblock, !dbg !911

noerr_block147:                                   ; preds = %expr_block.exit145
  %85 = load i64, ptr %blockret130, align 8, !dbg !911
  store i64 %85, ptr %value, align 8, !dbg !911
  br label %loop.cond82, !dbg !911

loop.exit148:                                     ; preds = %loop.cond82
  %86 = load i64, ptr %value, align 8, !dbg !912
  store i64 %86, ptr %blockret, align 8, !dbg !912
  br label %expr_block.exit149, !dbg !912

expr_block.exit149:                               ; preds = %loop.exit148, %if.then52
  %87 = load i64, ptr %blockret, align 8, !dbg !912
  store i64 %87, ptr %0, align 8, !dbg !912
  ret i64 0, !dbg !912

err_retblock:                                     ; preds = %guard_block146, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !912
  ret i64 %88, !dbg !912

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.63, i64 7 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !853
  unreachable, !dbg !853

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.63, i64 7 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 709, ptr align 8 %indirectarg41), !dbg !866
  unreachable, !dbg !866

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.63, i64 7 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 713, ptr align 8 %indirectarg65), !dbg !870
  unreachable, !dbg !870

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.63, i64 7 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 736, ptr align 8 %indirectarg98), !dbg !894
  unreachable, !dbg !894
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_int(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !913 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i32, align 4
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value138 = alloca i32, align 4
    #dbg_declare(ptr %1, !917, !DIExpression(), !918)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !919, !DIExpression(), !918)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !920
  %le = icmp sle i32 %4, 10, !dbg !920
  br i1 %le, label %and.rhs, label %and.phi, !dbg !920

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !920
  %gt = icmp sgt i32 %5, 1, !dbg !920
  br label %and.phi, !dbg !920

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !920
  br i1 %val, label %or.phi, label %or.rhs, !dbg !920

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !920
  %eq = icmp eq i32 %6, 16, !dbg !920
  br label %or.phi, !dbg !920

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !920
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !920

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !920
  unreachable, !dbg !920

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !923, !DIExpression(), !924)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !924
  %8 = load i64, ptr %ptradd, align 8, !dbg !924
  store i64 %8, ptr %len, align 8, !dbg !924
    #dbg_declare(ptr %index, !925, !DIExpression(), !926)
  store i64 0, ptr %index, align 8, !dbg !926
    #dbg_declare(ptr %ptr, !927, !DIExpression(), !928)
  %9 = load ptr, ptr %string, align 8, !dbg !928
  store ptr %9, ptr %ptr, align 8, !dbg !928
  br label %loop.cond, !dbg !929

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !930
  %11 = load i64, ptr %len, align 8, !dbg !930
  %lt = icmp ult i64 %10, %11, !dbg !930
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !930

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !930
  %13 = load i64, ptr %index, align 8, !dbg !930
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !930
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !932
  %eq7 = icmp eq i8 %15, 32, !dbg !932
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !932

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !932
  %eq9 = icmp eq i8 %16, 9, !dbg !932
  br label %or.phi10, !dbg !932

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !932
  br label %and.phi12, !dbg !932

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !932
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !932

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !930
  %add = add i64 %17, 1, !dbg !930
  store i64 %add, ptr %index, align 8, !dbg !930
  br label %loop.cond, !dbg !930

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !934
  %19 = load i64, ptr %index, align 8, !dbg !934
  %eq14 = icmp eq i64 %18, %19, !dbg !934
  br i1 %eq14, label %if.then, label %if.exit, !dbg !934

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !934
  br label %err_retblock, !dbg !934

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !935, !DIExpression(), !936)
  store i8 0, ptr %is_negative, align 1, !dbg !936
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !937
  %20 = load i64, ptr %ptradd15, align 8, !dbg !937
  %21 = load ptr, ptr %string, align 8, !dbg !937
  %22 = load i64, ptr %index, align 8, !dbg !937
  %ge = icmp uge i64 %22, %20, !dbg !937
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !937
  br i1 %23, label %panic, label %checkok, !dbg !937

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !937
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !939

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !941
  %26 = load i64, ptr %index, align 8, !dbg !942
  %add24 = add i64 %26, 1, !dbg !942
  store i64 %add24, ptr %index, align 8, !dbg !942
  br label %switch.exit, !dbg !942

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !943
  %add26 = add i64 %27, 1, !dbg !943
  store i64 %add26, ptr %index, align 8, !dbg !943
  br label %switch.exit, !dbg !943

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !945

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !947
  %29 = load i64, ptr %index, align 8, !dbg !947
  %eq27 = icmp eq i64 %28, %29, !dbg !947
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !947

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !947
  br label %err_retblock, !dbg !947

if.exit29:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !948, !DIExpression(), !949)
  %30 = load i32, ptr %base1, align 4, !dbg !949
  store i32 %30, ptr %base_used, align 4, !dbg !949
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !950
  %31 = load i64, ptr %ptradd30, align 8, !dbg !950
  %32 = load ptr, ptr %string, align 8, !dbg !950
  %33 = load i64, ptr %index, align 8, !dbg !950
  %ge31 = icmp uge i64 %33, %31, !dbg !950
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !950
  br i1 %34, label %panic32, label %checkok42, !dbg !950

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !950
  %35 = load i8, ptr %ptradd43, align 1, !dbg !950
  %eq44 = icmp eq i8 %35, 48, !dbg !950
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !950

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !950
  %eq46 = icmp eq i32 %36, 10, !dbg !950
  br label %and.phi47, !dbg !950

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !950
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !950

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !951
  %add50 = add i64 %37, 1, !dbg !951
  store i64 %add50, ptr %index, align 8, !dbg !951
  %38 = load i64, ptr %index, align 8, !dbg !953
  %39 = load i64, ptr %len, align 8, !dbg !953
  %eq51 = icmp eq i64 %38, %39, !dbg !953
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !953

if.then52:                                        ; preds = %if.then49
  store i32 0, ptr %blockret, align 4, !dbg !953
  br label %expr_block.exit149, !dbg !953

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !954
  %40 = load i64, ptr %ptradd54, align 8, !dbg !954
  %41 = load ptr, ptr %string, align 8, !dbg !954
  %42 = load i64, ptr %index, align 8, !dbg !954
  %ge55 = icmp uge i64 %42, %40, !dbg !954
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !954
  br i1 %43, label %panic56, label %checkok66, !dbg !954

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !954
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i32 16, ptr %base_used, align 4, !dbg !956
  %46 = load i64, ptr %index, align 8, !dbg !958
  %add71 = add i64 %46, 1, !dbg !958
  store i64 %add71, ptr %index, align 8, !dbg !958
  br label %switch.exit77, !dbg !958

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i32 2, ptr %base_used, align 4, !dbg !959
  %47 = load i64, ptr %index, align 8, !dbg !961
  %add73 = add i64 %47, 1, !dbg !961
  store i64 %add73, ptr %index, align 8, !dbg !961
  br label %switch.exit77, !dbg !961

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i32 8, ptr %base_used, align 4, !dbg !962
  %48 = load i64, ptr %index, align 8, !dbg !964
  %add75 = add i64 %48, 1, !dbg !964
  store i64 %add75, ptr %index, align 8, !dbg !964
  br label %switch.exit77, !dbg !964

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !965

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !967
  %50 = load i64, ptr %index, align 8, !dbg !967
  %eq78 = icmp eq i64 %49, %50, !dbg !967
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !967

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !967
  br label %err_retblock, !dbg !967

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !967

if.exit81:                                        ; preds = %if.exit80, %and.phi47
    #dbg_declare(ptr %value, !968, !DIExpression(), !969)
  store i32 0, ptr %value, align 4, !dbg !969
  br label %loop.cond82, !dbg !970

loop.cond82:                                      ; preds = %noerr_block147, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !971
  %52 = load i64, ptr %len, align 8, !dbg !971
  %neq = icmp ne i64 %51, %52, !dbg !971
  br i1 %neq, label %loop.body83, label %loop.exit148, !dbg !971

loop.body83:                                      ; preds = %loop.cond82
    #dbg_declare(ptr %c84, !973, !DIExpression(), !975)
    #dbg_declare(ptr %ch, !976, !DIExpression(), !978)
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !978
  %53 = load i64, ptr %ptradd86, align 8, !dbg !978
  %54 = load ptr, ptr %string, align 8, !dbg !978
  %55 = load i64, ptr %index, align 8, !dbg !978
  %add87 = add i64 %55, 1, !dbg !978
  store i64 %add87, ptr %index, align 8, !dbg !978
  %ge88 = icmp uge i64 %55, %53, !dbg !978
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !978
  br i1 %56, label %panic89, label %checkok99, !dbg !978

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !978
  %57 = load i8, ptr %ptradd100, align 1, !dbg !978
  store i8 %57, ptr %ch, align 1, !dbg !978
  %58 = load i32, ptr %base_used, align 4, !dbg !979
  %neq101 = icmp ne i32 %58, 16, !dbg !979
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !979

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !979
  %lt103 = icmp ult i8 %59, 65, !dbg !979
  br label %or.phi104, !dbg !979

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !979
  br i1 %val105, label %if.then106, label %if.exit107, !dbg !979

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !979
  %zext = zext i8 %60 to i32, !dbg !979
  %sub = sub i32 %zext, 48, !dbg !979
  %trunc = trunc i32 %sub to i8, !dbg !979
  store i8 %trunc, ptr %blockret85, align 1, !dbg !979
  br label %expr_block.exit, !dbg !979

if.exit107:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !980
  %le108 = icmp ule i8 %61, 70, !dbg !980
  br i1 %le108, label %if.then109, label %if.exit114, !dbg !980

if.then109:                                       ; preds = %if.exit107
  %62 = load i8, ptr %ch, align 1, !dbg !980
  %zext110 = zext i8 %62 to i32, !dbg !980
  %sub111 = sub i32 %zext110, 65, !dbg !980
  %add112 = add i32 %sub111, 10, !dbg !980
  %trunc113 = trunc i32 %add112 to i8, !dbg !980
  store i8 %trunc113, ptr %blockret85, align 1, !dbg !980
  br label %expr_block.exit, !dbg !980

if.exit114:                                       ; preds = %if.exit107
  %63 = load i8, ptr %ch, align 1, !dbg !981
  %lt115 = icmp ult i8 %63, 97, !dbg !981
  br i1 %lt115, label %if.then116, label %if.exit117, !dbg !981

if.then116:                                       ; preds = %if.exit114
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !981
  br label %guard_block, !dbg !981

if.exit117:                                       ; preds = %if.exit114
  %64 = load i8, ptr %ch, align 1, !dbg !982
  %gt118 = icmp ugt i8 %64, 102, !dbg !982
  br i1 %gt118, label %if.then119, label %if.exit120, !dbg !982

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !982
  br label %guard_block, !dbg !982

if.exit120:                                       ; preds = %if.exit117
  %65 = load i8, ptr %ch, align 1, !dbg !983
  %zext121 = zext i8 %65 to i32, !dbg !983
  %sub122 = sub i32 %zext121, 97, !dbg !983
  %add123 = add i32 %sub122, 10, !dbg !983
  %trunc124 = trunc i32 %add123 to i8, !dbg !983
  store i8 %trunc124, ptr %blockret85, align 1, !dbg !983
  br label %expr_block.exit, !dbg !983

expr_block.exit:                                  ; preds = %if.exit120, %if.then109, %if.then106
  br label %noerr_block, !dbg !983

guard_block:                                      ; preds = %if.then119, %if.then116
  %66 = load i64, ptr %error_var, align 8, !dbg !983
  store i64 %66, ptr %reterr, align 8, !dbg !983
  br label %err_retblock, !dbg !983

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !983
  store i8 %67, ptr %c84, align 1, !dbg !983
  %68 = load i8, ptr %c84, align 1, !dbg !984
  %zext125 = zext i8 %68 to i32, !dbg !984
  %69 = load i32, ptr %base_used, align 4, !dbg !984
  %le126 = icmp sle i32 %69, %zext125, !dbg !984
  %check = icmp slt i32 %zext125, 0, !dbg !984
  %siui-le = or i1 %check, %le126, !dbg !984
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !984

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !984
  br label %err_retblock, !dbg !984

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !985
  %71 = trunc i8 %70 to i1, !dbg !985
  br i1 %71, label %if.then131, label %if.exit137, !dbg !985

if.then131:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value, !987, !DIExpression(), !989)
  %72 = load i32, ptr %value, align 4, !dbg !989
  %73 = load i32, ptr %base_used, align 4, !dbg !989
  %mul = mul i32 %72, %73, !dbg !989
  %74 = load i8, ptr %c84, align 1, !dbg !989
  %zext132 = zext i8 %74 to i32, !dbg !989
  %sub133 = sub i32 %mul, %zext132, !dbg !989
  store i32 %sub133, ptr %new_value, align 4, !dbg !989
  %75 = load i32, ptr %new_value, align 4, !dbg !990
  %76 = load i32, ptr %value, align 4, !dbg !990
  %gt134 = icmp sgt i32 %75, %76, !dbg !990
  br i1 %gt134, label %if.then135, label %if.exit136, !dbg !990

if.then135:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !990
  br label %guard_block146, !dbg !990

if.exit136:                                       ; preds = %if.then131
  %77 = load i32, ptr %new_value, align 4, !dbg !991
  store i32 %77, ptr %blockret130, align 4, !dbg !991
  br label %expr_block.exit145, !dbg !991

if.exit137:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value138, !992, !DIExpression(), !993)
  %78 = load i32, ptr %value, align 4, !dbg !993
  %79 = load i32, ptr %base_used, align 4, !dbg !993
  %mul139 = mul i32 %78, %79, !dbg !993
  %80 = load i8, ptr %c84, align 1, !dbg !993
  %zext140 = zext i8 %80 to i32, !dbg !993
  %add141 = add i32 %mul139, %zext140, !dbg !993
  store i32 %add141, ptr %new_value138, align 4, !dbg !993
  %81 = load i32, ptr %new_value138, align 4, !dbg !994
  %82 = load i32, ptr %value, align 4, !dbg !994
  %lt142 = icmp slt i32 %81, %82, !dbg !994
  br i1 %lt142, label %if.then143, label %if.exit144, !dbg !994

if.then143:                                       ; preds = %if.exit137
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !994
  br label %guard_block146, !dbg !994

if.exit144:                                       ; preds = %if.exit137
  %83 = load i32, ptr %new_value138, align 4, !dbg !995
  store i32 %83, ptr %blockret130, align 4, !dbg !995
  br label %expr_block.exit145, !dbg !995

expr_block.exit145:                               ; preds = %if.exit144, %if.exit136
  br label %noerr_block147, !dbg !995

guard_block146:                                   ; preds = %if.then143, %if.then135
  %84 = load i64, ptr %error_var129, align 8, !dbg !995
  store i64 %84, ptr %reterr, align 8, !dbg !995
  br label %err_retblock, !dbg !995

noerr_block147:                                   ; preds = %expr_block.exit145
  %85 = load i32, ptr %blockret130, align 4, !dbg !995
  store i32 %85, ptr %value, align 4, !dbg !995
  br label %loop.cond82, !dbg !995

loop.exit148:                                     ; preds = %loop.cond82
  %86 = load i32, ptr %value, align 4, !dbg !996
  store i32 %86, ptr %blockret, align 4, !dbg !996
  br label %expr_block.exit149, !dbg !996

expr_block.exit149:                               ; preds = %loop.exit148, %if.then52
  %87 = load i32, ptr %blockret, align 4, !dbg !996
  store i32 %87, ptr %0, align 4, !dbg !996
  ret i64 0, !dbg !996

err_retblock:                                     ; preds = %guard_block146, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !996
  ret i64 %88, !dbg !996

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !937
  unreachable, !dbg !937

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 709, ptr align 8 %indirectarg41), !dbg !950
  unreachable, !dbg !950

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 713, ptr align 8 %indirectarg65), !dbg !954
  unreachable, !dbg !954

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.64, i64 6 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 736, ptr align 8 %indirectarg98), !dbg !978
  unreachable, !dbg !978
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_short(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !997 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i16, align 2
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value142 = alloca i16, align 2
    #dbg_declare(ptr %1, !1002, !DIExpression(), !1003)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1004, !DIExpression(), !1003)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1005
  %le = icmp sle i32 %4, 10, !dbg !1005
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1005

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1005
  %gt = icmp sgt i32 %5, 1, !dbg !1005
  br label %and.phi, !dbg !1005

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1005
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1005

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1005
  %eq = icmp eq i32 %6, 16, !dbg !1005
  br label %or.phi, !dbg !1005

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1005
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1005

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !1005
  unreachable, !dbg !1005

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1008, !DIExpression(), !1009)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1009
  %8 = load i64, ptr %ptradd, align 8, !dbg !1009
  store i64 %8, ptr %len, align 8, !dbg !1009
    #dbg_declare(ptr %index, !1010, !DIExpression(), !1011)
  store i64 0, ptr %index, align 8, !dbg !1011
    #dbg_declare(ptr %ptr, !1012, !DIExpression(), !1013)
  %9 = load ptr, ptr %string, align 8, !dbg !1013
  store ptr %9, ptr %ptr, align 8, !dbg !1013
  br label %loop.cond, !dbg !1014

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1015
  %11 = load i64, ptr %len, align 8, !dbg !1015
  %lt = icmp ult i64 %10, %11, !dbg !1015
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1015

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1015
  %13 = load i64, ptr %index, align 8, !dbg !1015
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1015
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1017
  %eq7 = icmp eq i8 %15, 32, !dbg !1017
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1017

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1017
  %eq9 = icmp eq i8 %16, 9, !dbg !1017
  br label %or.phi10, !dbg !1017

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1017
  br label %and.phi12, !dbg !1017

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1017
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1017

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1015
  %add = add i64 %17, 1, !dbg !1015
  store i64 %add, ptr %index, align 8, !dbg !1015
  br label %loop.cond, !dbg !1015

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1019
  %19 = load i64, ptr %index, align 8, !dbg !1019
  %eq14 = icmp eq i64 %18, %19, !dbg !1019
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1019

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1019
  br label %err_retblock, !dbg !1019

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1020, !DIExpression(), !1021)
  store i8 0, ptr %is_negative, align 1, !dbg !1021
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1022
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1022
  %21 = load ptr, ptr %string, align 8, !dbg !1022
  %22 = load i64, ptr %index, align 8, !dbg !1022
  %ge = icmp uge i64 %22, %20, !dbg !1022
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1022
  br i1 %23, label %panic, label %checkok, !dbg !1022

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1022
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !1024

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1026
  %26 = load i64, ptr %index, align 8, !dbg !1027
  %add24 = add i64 %26, 1, !dbg !1027
  store i64 %add24, ptr %index, align 8, !dbg !1027
  br label %switch.exit, !dbg !1027

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1028
  %add26 = add i64 %27, 1, !dbg !1028
  store i64 %add26, ptr %index, align 8, !dbg !1028
  br label %switch.exit, !dbg !1028

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1030

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !1032
  %29 = load i64, ptr %index, align 8, !dbg !1032
  %eq27 = icmp eq i64 %28, %29, !dbg !1032
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !1032

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1032
  br label %err_retblock, !dbg !1032

if.exit29:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1033, !DIExpression(), !1034)
  %30 = load i32, ptr %base1, align 4, !dbg !1034
  %trunc = trunc i32 %30 to i16, !dbg !1034
  store i16 %trunc, ptr %base_used, align 2, !dbg !1034
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1035
  %31 = load i64, ptr %ptradd30, align 8, !dbg !1035
  %32 = load ptr, ptr %string, align 8, !dbg !1035
  %33 = load i64, ptr %index, align 8, !dbg !1035
  %ge31 = icmp uge i64 %33, %31, !dbg !1035
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1035
  br i1 %34, label %panic32, label %checkok42, !dbg !1035

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1035
  %35 = load i8, ptr %ptradd43, align 1, !dbg !1035
  %eq44 = icmp eq i8 %35, 48, !dbg !1035
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !1035

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !1035
  %eq46 = icmp eq i32 %36, 10, !dbg !1035
  br label %and.phi47, !dbg !1035

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !1035
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !1035

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !1036
  %add50 = add i64 %37, 1, !dbg !1036
  store i64 %add50, ptr %index, align 8, !dbg !1036
  %38 = load i64, ptr %index, align 8, !dbg !1038
  %39 = load i64, ptr %len, align 8, !dbg !1038
  %eq51 = icmp eq i64 %38, %39, !dbg !1038
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !1038

if.then52:                                        ; preds = %if.then49
  store i16 0, ptr %blockret, align 2, !dbg !1038
  br label %expr_block.exit156, !dbg !1038

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1039
  %40 = load i64, ptr %ptradd54, align 8, !dbg !1039
  %41 = load ptr, ptr %string, align 8, !dbg !1039
  %42 = load i64, ptr %index, align 8, !dbg !1039
  %ge55 = icmp uge i64 %42, %40, !dbg !1039
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1039
  br i1 %43, label %panic56, label %checkok66, !dbg !1039

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1039
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i16 16, ptr %base_used, align 2, !dbg !1041
  %46 = load i64, ptr %index, align 8, !dbg !1043
  %add71 = add i64 %46, 1, !dbg !1043
  store i64 %add71, ptr %index, align 8, !dbg !1043
  br label %switch.exit77, !dbg !1043

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i16 2, ptr %base_used, align 2, !dbg !1044
  %47 = load i64, ptr %index, align 8, !dbg !1046
  %add73 = add i64 %47, 1, !dbg !1046
  store i64 %add73, ptr %index, align 8, !dbg !1046
  br label %switch.exit77, !dbg !1046

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i16 8, ptr %base_used, align 2, !dbg !1047
  %48 = load i64, ptr %index, align 8, !dbg !1049
  %add75 = add i64 %48, 1, !dbg !1049
  store i64 %add75, ptr %index, align 8, !dbg !1049
  br label %switch.exit77, !dbg !1049

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !1050

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !1052
  %50 = load i64, ptr %index, align 8, !dbg !1052
  %eq78 = icmp eq i64 %49, %50, !dbg !1052
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !1052

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1052
  br label %err_retblock, !dbg !1052

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !1052

if.exit81:                                        ; preds = %if.exit80, %and.phi47
    #dbg_declare(ptr %value, !1053, !DIExpression(), !1054)
  store i16 0, ptr %value, align 2, !dbg !1054
  br label %loop.cond82, !dbg !1055

loop.cond82:                                      ; preds = %noerr_block154, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !1056
  %52 = load i64, ptr %len, align 8, !dbg !1056
  %neq = icmp ne i64 %51, %52, !dbg !1056
  br i1 %neq, label %loop.body83, label %loop.exit155, !dbg !1056

loop.body83:                                      ; preds = %loop.cond82
    #dbg_declare(ptr %c84, !1058, !DIExpression(), !1060)
    #dbg_declare(ptr %ch, !1061, !DIExpression(), !1063)
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1063
  %53 = load i64, ptr %ptradd86, align 8, !dbg !1063
  %54 = load ptr, ptr %string, align 8, !dbg !1063
  %55 = load i64, ptr %index, align 8, !dbg !1063
  %add87 = add i64 %55, 1, !dbg !1063
  store i64 %add87, ptr %index, align 8, !dbg !1063
  %ge88 = icmp uge i64 %55, %53, !dbg !1063
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !1063
  br i1 %56, label %panic89, label %checkok99, !dbg !1063

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1063
  %57 = load i8, ptr %ptradd100, align 1, !dbg !1063
  store i8 %57, ptr %ch, align 1, !dbg !1063
  %58 = load i16, ptr %base_used, align 2, !dbg !1064
  %sext = sext i16 %58 to i32, !dbg !1064
  %neq101 = icmp ne i32 %sext, 16, !dbg !1064
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !1064

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !1064
  %lt103 = icmp ult i8 %59, 65, !dbg !1064
  br label %or.phi104, !dbg !1064

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !1064
  br i1 %val105, label %if.then106, label %if.exit108, !dbg !1064

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !1064
  %zext = zext i8 %60 to i32, !dbg !1064
  %sub = sub i32 %zext, 48, !dbg !1064
  %trunc107 = trunc i32 %sub to i8, !dbg !1064
  store i8 %trunc107, ptr %blockret85, align 1, !dbg !1064
  br label %expr_block.exit, !dbg !1064

if.exit108:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !1065
  %le109 = icmp ule i8 %61, 70, !dbg !1065
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1065

if.then110:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1065
  %zext111 = zext i8 %62 to i32, !dbg !1065
  %sub112 = sub i32 %zext111, 65, !dbg !1065
  %add113 = add i32 %sub112, 10, !dbg !1065
  %trunc114 = trunc i32 %add113 to i8, !dbg !1065
  store i8 %trunc114, ptr %blockret85, align 1, !dbg !1065
  br label %expr_block.exit, !dbg !1065

if.exit115:                                       ; preds = %if.exit108
  %63 = load i8, ptr %ch, align 1, !dbg !1066
  %lt116 = icmp ult i8 %63, 97, !dbg !1066
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1066

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1066
  br label %guard_block, !dbg !1066

if.exit118:                                       ; preds = %if.exit115
  %64 = load i8, ptr %ch, align 1, !dbg !1067
  %gt119 = icmp ugt i8 %64, 102, !dbg !1067
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1067

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1067
  br label %guard_block, !dbg !1067

if.exit121:                                       ; preds = %if.exit118
  %65 = load i8, ptr %ch, align 1, !dbg !1068
  %zext122 = zext i8 %65 to i32, !dbg !1068
  %sub123 = sub i32 %zext122, 97, !dbg !1068
  %add124 = add i32 %sub123, 10, !dbg !1068
  %trunc125 = trunc i32 %add124 to i8, !dbg !1068
  store i8 %trunc125, ptr %blockret85, align 1, !dbg !1068
  br label %expr_block.exit, !dbg !1068

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then106
  br label %noerr_block, !dbg !1068

guard_block:                                      ; preds = %if.then120, %if.then117
  %66 = load i64, ptr %error_var, align 8, !dbg !1068
  store i64 %66, ptr %reterr, align 8, !dbg !1068
  br label %err_retblock, !dbg !1068

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !1068
  store i8 %67, ptr %c84, align 1, !dbg !1068
  %68 = load i8, ptr %c84, align 1, !dbg !1069
  %zext126 = zext i8 %68 to i16, !dbg !1069
  %69 = load i16, ptr %base_used, align 2, !dbg !1069
  %le127 = icmp sle i16 %69, %zext126, !dbg !1069
  %check = icmp slt i16 %zext126, 0, !dbg !1069
  %siui-le = or i1 %check, %le127, !dbg !1069
  br i1 %siui-le, label %if.then128, label %if.exit129, !dbg !1069

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1069
  br label %err_retblock, !dbg !1069

if.exit129:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1070
  %71 = trunc i8 %70 to i1, !dbg !1070
  br i1 %71, label %if.then132, label %if.exit141, !dbg !1070

if.then132:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value, !1072, !DIExpression(), !1074)
  %72 = load i16, ptr %value, align 2, !dbg !1074
  %sext133 = sext i16 %72 to i32, !dbg !1074
  %73 = load i16, ptr %base_used, align 2, !dbg !1074
  %sext134 = sext i16 %73 to i32, !dbg !1074
  %mul = mul i32 %sext133, %sext134, !dbg !1074
  %74 = load i8, ptr %c84, align 1, !dbg !1074
  %zext135 = zext i8 %74 to i32, !dbg !1074
  %sub136 = sub i32 %mul, %zext135, !dbg !1074
  %trunc137 = trunc i32 %sub136 to i16, !dbg !1074
  store i16 %trunc137, ptr %new_value, align 2, !dbg !1074
  %75 = load i16, ptr %new_value, align 2, !dbg !1075
  %76 = load i16, ptr %value, align 2, !dbg !1075
  %gt138 = icmp sgt i16 %75, %76, !dbg !1075
  br i1 %gt138, label %if.then139, label %if.exit140, !dbg !1075

if.then139:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1075
  br label %guard_block153, !dbg !1075

if.exit140:                                       ; preds = %if.then132
  %77 = load i16, ptr %new_value, align 2, !dbg !1076
  store i16 %77, ptr %blockret131, align 2, !dbg !1076
  br label %expr_block.exit152, !dbg !1076

if.exit141:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value142, !1077, !DIExpression(), !1078)
  %78 = load i16, ptr %value, align 2, !dbg !1078
  %sext143 = sext i16 %78 to i32, !dbg !1078
  %79 = load i16, ptr %base_used, align 2, !dbg !1078
  %sext144 = sext i16 %79 to i32, !dbg !1078
  %mul145 = mul i32 %sext143, %sext144, !dbg !1078
  %80 = load i8, ptr %c84, align 1, !dbg !1078
  %zext146 = zext i8 %80 to i32, !dbg !1078
  %add147 = add i32 %mul145, %zext146, !dbg !1078
  %trunc148 = trunc i32 %add147 to i16, !dbg !1078
  store i16 %trunc148, ptr %new_value142, align 2, !dbg !1078
  %81 = load i16, ptr %new_value142, align 2, !dbg !1079
  %82 = load i16, ptr %value, align 2, !dbg !1079
  %lt149 = icmp slt i16 %81, %82, !dbg !1079
  br i1 %lt149, label %if.then150, label %if.exit151, !dbg !1079

if.then150:                                       ; preds = %if.exit141
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1079
  br label %guard_block153, !dbg !1079

if.exit151:                                       ; preds = %if.exit141
  %83 = load i16, ptr %new_value142, align 2, !dbg !1080
  store i16 %83, ptr %blockret131, align 2, !dbg !1080
  br label %expr_block.exit152, !dbg !1080

expr_block.exit152:                               ; preds = %if.exit151, %if.exit140
  br label %noerr_block154, !dbg !1080

guard_block153:                                   ; preds = %if.then150, %if.then139
  %84 = load i64, ptr %error_var130, align 8, !dbg !1080
  store i64 %84, ptr %reterr, align 8, !dbg !1080
  br label %err_retblock, !dbg !1080

noerr_block154:                                   ; preds = %expr_block.exit152
  %85 = load i16, ptr %blockret131, align 2, !dbg !1080
  store i16 %85, ptr %value, align 2, !dbg !1080
  br label %loop.cond82, !dbg !1080

loop.exit155:                                     ; preds = %loop.cond82
  %86 = load i16, ptr %value, align 2, !dbg !1081
  store i16 %86, ptr %blockret, align 2, !dbg !1081
  br label %expr_block.exit156, !dbg !1081

expr_block.exit156:                               ; preds = %loop.exit155, %if.then52
  %87 = load i16, ptr %blockret, align 2, !dbg !1081
  store i16 %87, ptr %0, align 2, !dbg !1081
  ret i64 0, !dbg !1081

err_retblock:                                     ; preds = %guard_block153, %if.then128, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1081
  ret i64 %88, !dbg !1081

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !1022
  unreachable, !dbg !1022

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 709, ptr align 8 %indirectarg41), !dbg !1035
  unreachable, !dbg !1035

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 713, ptr align 8 %indirectarg65), !dbg !1039
  unreachable, !dbg !1039

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.65, i64 8 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 736, ptr align 8 %indirectarg98), !dbg !1063
  unreachable, !dbg !1063
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_ichar(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1082 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 16
  %indirectarg65 = alloca %"any[]", align 8
  %switch68 = alloca i8, align 1
  %value = alloca i8, align 1
  %c84 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret85 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %error_var129 = alloca i64, align 8
  %blockret130 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value141 = alloca i8, align 1
    #dbg_declare(ptr %1, !1087, !DIExpression(), !1088)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1089, !DIExpression(), !1088)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1090
  %le = icmp sle i32 %4, 10, !dbg !1090
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1090

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1090
  %gt = icmp sgt i32 %5, 1, !dbg !1090
  br label %and.phi, !dbg !1090

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1090
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1090

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1090
  %eq = icmp eq i32 %6, 16, !dbg !1090
  br label %or.phi, !dbg !1090

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1090
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1090

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !1090
  unreachable, !dbg !1090

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1093, !DIExpression(), !1094)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1094
  %8 = load i64, ptr %ptradd, align 8, !dbg !1094
  store i64 %8, ptr %len, align 8, !dbg !1094
    #dbg_declare(ptr %index, !1095, !DIExpression(), !1096)
  store i64 0, ptr %index, align 8, !dbg !1096
    #dbg_declare(ptr %ptr, !1097, !DIExpression(), !1098)
  %9 = load ptr, ptr %string, align 8, !dbg !1098
  store ptr %9, ptr %ptr, align 8, !dbg !1098
  br label %loop.cond, !dbg !1099

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1100
  %11 = load i64, ptr %len, align 8, !dbg !1100
  %lt = icmp ult i64 %10, %11, !dbg !1100
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1100

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1100
  %13 = load i64, ptr %index, align 8, !dbg !1100
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1100
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1102
  %eq7 = icmp eq i8 %15, 32, !dbg !1102
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1102

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1102
  %eq9 = icmp eq i8 %16, 9, !dbg !1102
  br label %or.phi10, !dbg !1102

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1102
  br label %and.phi12, !dbg !1102

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1102
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1102

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1100
  %add = add i64 %17, 1, !dbg !1100
  store i64 %add, ptr %index, align 8, !dbg !1100
  br label %loop.cond, !dbg !1100

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1104
  %19 = load i64, ptr %index, align 8, !dbg !1104
  %eq14 = icmp eq i64 %18, %19, !dbg !1104
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1104

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1104
  br label %err_retblock, !dbg !1104

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1105, !DIExpression(), !1106)
  store i8 0, ptr %is_negative, align 1, !dbg !1106
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1107
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1107
  %21 = load ptr, ptr %string, align 8, !dbg !1107
  %22 = load i64, ptr %index, align 8, !dbg !1107
  %ge = icmp uge i64 %22, %20, !dbg !1107
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1107
  br i1 %23, label %panic, label %checkok, !dbg !1107

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1107
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case25
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit23, !dbg !1109

if.exit23:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1111
  %26 = load i64, ptr %index, align 8, !dbg !1112
  %add24 = add i64 %26, 1, !dbg !1112
  store i64 %add24, ptr %index, align 8, !dbg !1112
  br label %switch.exit, !dbg !1112

switch.case25:                                    ; preds = %switch.entry
  %27 = load i64, ptr %index, align 8, !dbg !1113
  %add26 = add i64 %27, 1, !dbg !1113
  store i64 %add26, ptr %index, align 8, !dbg !1113
  br label %switch.exit, !dbg !1113

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1115

switch.exit:                                      ; preds = %switch.default, %switch.case25, %if.exit23
  %28 = load i64, ptr %len, align 8, !dbg !1117
  %29 = load i64, ptr %index, align 8, !dbg !1117
  %eq27 = icmp eq i64 %28, %29, !dbg !1117
  br i1 %eq27, label %if.then28, label %if.exit29, !dbg !1117

if.then28:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1117
  br label %err_retblock, !dbg !1117

if.exit29:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1118, !DIExpression(), !1119)
  %30 = load i32, ptr %base1, align 4, !dbg !1119
  %trunc = trunc i32 %30 to i8, !dbg !1119
  store i8 %trunc, ptr %base_used, align 1, !dbg !1119
  %ptradd30 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1120
  %31 = load i64, ptr %ptradd30, align 8, !dbg !1120
  %32 = load ptr, ptr %string, align 8, !dbg !1120
  %33 = load i64, ptr %index, align 8, !dbg !1120
  %ge31 = icmp uge i64 %33, %31, !dbg !1120
  %34 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1120
  br i1 %34, label %panic32, label %checkok42, !dbg !1120

checkok42:                                        ; preds = %if.exit29
  %ptradd43 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !1120
  %35 = load i8, ptr %ptradd43, align 1, !dbg !1120
  %eq44 = icmp eq i8 %35, 48, !dbg !1120
  br i1 %eq44, label %and.rhs45, label %and.phi47, !dbg !1120

and.rhs45:                                        ; preds = %checkok42
  %36 = load i32, ptr %base1, align 4, !dbg !1120
  %eq46 = icmp eq i32 %36, 10, !dbg !1120
  br label %and.phi47, !dbg !1120

and.phi47:                                        ; preds = %and.rhs45, %checkok42
  %val48 = phi i1 [ false, %checkok42 ], [ %eq46, %and.rhs45 ], !dbg !1120
  br i1 %val48, label %if.then49, label %if.exit81, !dbg !1120

if.then49:                                        ; preds = %and.phi47
  %37 = load i64, ptr %index, align 8, !dbg !1121
  %add50 = add i64 %37, 1, !dbg !1121
  store i64 %add50, ptr %index, align 8, !dbg !1121
  %38 = load i64, ptr %index, align 8, !dbg !1123
  %39 = load i64, ptr %len, align 8, !dbg !1123
  %eq51 = icmp eq i64 %38, %39, !dbg !1123
  br i1 %eq51, label %if.then52, label %if.exit53, !dbg !1123

if.then52:                                        ; preds = %if.then49
  store i8 0, ptr %blockret, align 1, !dbg !1123
  br label %expr_block.exit155, !dbg !1123

if.exit53:                                        ; preds = %if.then49
  %ptradd54 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1124
  %40 = load i64, ptr %ptradd54, align 8, !dbg !1124
  %41 = load ptr, ptr %string, align 8, !dbg !1124
  %42 = load i64, ptr %index, align 8, !dbg !1124
  %ge55 = icmp uge i64 %42, %40, !dbg !1124
  %43 = call i1 @llvm.expect.i1(i1 %ge55, i1 false), !dbg !1124
  br i1 %43, label %panic56, label %checkok66, !dbg !1124

checkok66:                                        ; preds = %if.exit53
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 %42, !dbg !1124
  %44 = load i8, ptr %ptradd67, align 1
  store i8 %44, ptr %switch68, align 1
  br label %switch.entry69

switch.entry69:                                   ; preds = %checkok66
  %45 = load i8, ptr %switch68, align 1
  switch i8 %45, label %switch.default76 [
    i8 120, label %switch.case70
    i8 88, label %switch.case70
    i8 98, label %switch.case72
    i8 66, label %switch.case72
    i8 111, label %switch.case74
    i8 79, label %switch.case74
  ]

switch.case70:                                    ; preds = %switch.entry69, %switch.entry69
  store i8 16, ptr %base_used, align 1, !dbg !1126
  %46 = load i64, ptr %index, align 8, !dbg !1128
  %add71 = add i64 %46, 1, !dbg !1128
  store i64 %add71, ptr %index, align 8, !dbg !1128
  br label %switch.exit77, !dbg !1128

switch.case72:                                    ; preds = %switch.entry69, %switch.entry69
  store i8 2, ptr %base_used, align 1, !dbg !1129
  %47 = load i64, ptr %index, align 8, !dbg !1131
  %add73 = add i64 %47, 1, !dbg !1131
  store i64 %add73, ptr %index, align 8, !dbg !1131
  br label %switch.exit77, !dbg !1131

switch.case74:                                    ; preds = %switch.entry69, %switch.entry69
  store i8 8, ptr %base_used, align 1, !dbg !1132
  %48 = load i64, ptr %index, align 8, !dbg !1134
  %add75 = add i64 %48, 1, !dbg !1134
  store i64 %add75, ptr %index, align 8, !dbg !1134
  br label %switch.exit77, !dbg !1134

switch.default76:                                 ; preds = %switch.entry69
  br label %switch.exit77, !dbg !1135

switch.exit77:                                    ; preds = %switch.default76, %switch.case74, %switch.case72, %switch.case70
  %49 = load i64, ptr %len, align 8, !dbg !1137
  %50 = load i64, ptr %index, align 8, !dbg !1137
  %eq78 = icmp eq i64 %49, %50, !dbg !1137
  br i1 %eq78, label %if.then79, label %if.exit80, !dbg !1137

if.then79:                                        ; preds = %switch.exit77
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1137
  br label %err_retblock, !dbg !1137

if.exit80:                                        ; preds = %switch.exit77
  br label %if.exit81, !dbg !1137

if.exit81:                                        ; preds = %if.exit80, %and.phi47
    #dbg_declare(ptr %value, !1138, !DIExpression(), !1139)
  store i8 0, ptr %value, align 1, !dbg !1139
  br label %loop.cond82, !dbg !1140

loop.cond82:                                      ; preds = %noerr_block153, %if.exit81
  %51 = load i64, ptr %index, align 8, !dbg !1141
  %52 = load i64, ptr %len, align 8, !dbg !1141
  %neq = icmp ne i64 %51, %52, !dbg !1141
  br i1 %neq, label %loop.body83, label %loop.exit154, !dbg !1141

loop.body83:                                      ; preds = %loop.cond82
    #dbg_declare(ptr %c84, !1143, !DIExpression(), !1145)
    #dbg_declare(ptr %ch, !1146, !DIExpression(), !1148)
  %ptradd86 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1148
  %53 = load i64, ptr %ptradd86, align 8, !dbg !1148
  %54 = load ptr, ptr %string, align 8, !dbg !1148
  %55 = load i64, ptr %index, align 8, !dbg !1148
  %add87 = add i64 %55, 1, !dbg !1148
  store i64 %add87, ptr %index, align 8, !dbg !1148
  %ge88 = icmp uge i64 %55, %53, !dbg !1148
  %56 = call i1 @llvm.expect.i1(i1 %ge88, i1 false), !dbg !1148
  br i1 %56, label %panic89, label %checkok99, !dbg !1148

checkok99:                                        ; preds = %loop.body83
  %ptradd100 = getelementptr inbounds i8, ptr %54, i64 %55, !dbg !1148
  %57 = load i8, ptr %ptradd100, align 1, !dbg !1148
  store i8 %57, ptr %ch, align 1, !dbg !1148
  %58 = load i8, ptr %base_used, align 1, !dbg !1149
  %sext = sext i8 %58 to i32, !dbg !1149
  %neq101 = icmp ne i32 %sext, 16, !dbg !1149
  br i1 %neq101, label %or.phi104, label %or.rhs102, !dbg !1149

or.rhs102:                                        ; preds = %checkok99
  %59 = load i8, ptr %ch, align 1, !dbg !1149
  %lt103 = icmp ult i8 %59, 65, !dbg !1149
  br label %or.phi104, !dbg !1149

or.phi104:                                        ; preds = %or.rhs102, %checkok99
  %val105 = phi i1 [ true, %checkok99 ], [ %lt103, %or.rhs102 ], !dbg !1149
  br i1 %val105, label %if.then106, label %if.exit108, !dbg !1149

if.then106:                                       ; preds = %or.phi104
  %60 = load i8, ptr %ch, align 1, !dbg !1149
  %zext = zext i8 %60 to i32, !dbg !1149
  %sub = sub i32 %zext, 48, !dbg !1149
  %trunc107 = trunc i32 %sub to i8, !dbg !1149
  store i8 %trunc107, ptr %blockret85, align 1, !dbg !1149
  br label %expr_block.exit, !dbg !1149

if.exit108:                                       ; preds = %or.phi104
  %61 = load i8, ptr %ch, align 1, !dbg !1150
  %le109 = icmp ule i8 %61, 70, !dbg !1150
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1150

if.then110:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1150
  %zext111 = zext i8 %62 to i32, !dbg !1150
  %sub112 = sub i32 %zext111, 65, !dbg !1150
  %add113 = add i32 %sub112, 10, !dbg !1150
  %trunc114 = trunc i32 %add113 to i8, !dbg !1150
  store i8 %trunc114, ptr %blockret85, align 1, !dbg !1150
  br label %expr_block.exit, !dbg !1150

if.exit115:                                       ; preds = %if.exit108
  %63 = load i8, ptr %ch, align 1, !dbg !1151
  %lt116 = icmp ult i8 %63, 97, !dbg !1151
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1151

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1151
  br label %guard_block, !dbg !1151

if.exit118:                                       ; preds = %if.exit115
  %64 = load i8, ptr %ch, align 1, !dbg !1152
  %gt119 = icmp ugt i8 %64, 102, !dbg !1152
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1152

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1152
  br label %guard_block, !dbg !1152

if.exit121:                                       ; preds = %if.exit118
  %65 = load i8, ptr %ch, align 1, !dbg !1153
  %zext122 = zext i8 %65 to i32, !dbg !1153
  %sub123 = sub i32 %zext122, 97, !dbg !1153
  %add124 = add i32 %sub123, 10, !dbg !1153
  %trunc125 = trunc i32 %add124 to i8, !dbg !1153
  store i8 %trunc125, ptr %blockret85, align 1, !dbg !1153
  br label %expr_block.exit, !dbg !1153

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then106
  br label %noerr_block, !dbg !1153

guard_block:                                      ; preds = %if.then120, %if.then117
  %66 = load i64, ptr %error_var, align 8, !dbg !1153
  store i64 %66, ptr %reterr, align 8, !dbg !1153
  br label %err_retblock, !dbg !1153

noerr_block:                                      ; preds = %expr_block.exit
  %67 = load i8, ptr %blockret85, align 1, !dbg !1153
  store i8 %67, ptr %c84, align 1, !dbg !1153
  %68 = load i8, ptr %c84, align 1, !dbg !1154
  %69 = load i8, ptr %base_used, align 1, !dbg !1154
  %le126 = icmp sle i8 %69, %68, !dbg !1154
  %check = icmp slt i8 %68, 0, !dbg !1154
  %siui-le = or i1 %check, %le126, !dbg !1154
  br i1 %siui-le, label %if.then127, label %if.exit128, !dbg !1154

if.then127:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1154
  br label %err_retblock, !dbg !1154

if.exit128:                                       ; preds = %noerr_block
  %70 = load i8, ptr %is_negative, align 1, !dbg !1155
  %71 = trunc i8 %70 to i1, !dbg !1155
  br i1 %71, label %if.then131, label %if.exit140, !dbg !1155

if.then131:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value, !1157, !DIExpression(), !1159)
  %72 = load i8, ptr %value, align 1, !dbg !1159
  %sext132 = sext i8 %72 to i32, !dbg !1159
  %73 = load i8, ptr %base_used, align 1, !dbg !1159
  %sext133 = sext i8 %73 to i32, !dbg !1159
  %mul = mul i32 %sext132, %sext133, !dbg !1159
  %74 = load i8, ptr %c84, align 1, !dbg !1159
  %zext134 = zext i8 %74 to i32, !dbg !1159
  %sub135 = sub i32 %mul, %zext134, !dbg !1159
  %trunc136 = trunc i32 %sub135 to i8, !dbg !1159
  store i8 %trunc136, ptr %new_value, align 1, !dbg !1159
  %75 = load i8, ptr %new_value, align 1, !dbg !1160
  %76 = load i8, ptr %value, align 1, !dbg !1160
  %gt137 = icmp sgt i8 %75, %76, !dbg !1160
  br i1 %gt137, label %if.then138, label %if.exit139, !dbg !1160

if.then138:                                       ; preds = %if.then131
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1160
  br label %guard_block152, !dbg !1160

if.exit139:                                       ; preds = %if.then131
  %77 = load i8, ptr %new_value, align 1, !dbg !1161
  store i8 %77, ptr %blockret130, align 1, !dbg !1161
  br label %expr_block.exit151, !dbg !1161

if.exit140:                                       ; preds = %if.exit128
    #dbg_declare(ptr %new_value141, !1162, !DIExpression(), !1163)
  %78 = load i8, ptr %value, align 1, !dbg !1163
  %sext142 = sext i8 %78 to i32, !dbg !1163
  %79 = load i8, ptr %base_used, align 1, !dbg !1163
  %sext143 = sext i8 %79 to i32, !dbg !1163
  %mul144 = mul i32 %sext142, %sext143, !dbg !1163
  %80 = load i8, ptr %c84, align 1, !dbg !1163
  %zext145 = zext i8 %80 to i32, !dbg !1163
  %add146 = add i32 %mul144, %zext145, !dbg !1163
  %trunc147 = trunc i32 %add146 to i8, !dbg !1163
  store i8 %trunc147, ptr %new_value141, align 1, !dbg !1163
  %81 = load i8, ptr %new_value141, align 1, !dbg !1164
  %82 = load i8, ptr %value, align 1, !dbg !1164
  %lt148 = icmp slt i8 %81, %82, !dbg !1164
  br i1 %lt148, label %if.then149, label %if.exit150, !dbg !1164

if.then149:                                       ; preds = %if.exit140
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var129, align 8, !dbg !1164
  br label %guard_block152, !dbg !1164

if.exit150:                                       ; preds = %if.exit140
  %83 = load i8, ptr %new_value141, align 1, !dbg !1165
  store i8 %83, ptr %blockret130, align 1, !dbg !1165
  br label %expr_block.exit151, !dbg !1165

expr_block.exit151:                               ; preds = %if.exit150, %if.exit139
  br label %noerr_block153, !dbg !1165

guard_block152:                                   ; preds = %if.then149, %if.then138
  %84 = load i64, ptr %error_var129, align 8, !dbg !1165
  store i64 %84, ptr %reterr, align 8, !dbg !1165
  br label %err_retblock, !dbg !1165

noerr_block153:                                   ; preds = %expr_block.exit151
  %85 = load i8, ptr %blockret130, align 1, !dbg !1165
  store i8 %85, ptr %value, align 1, !dbg !1165
  br label %loop.cond82, !dbg !1165

loop.exit154:                                     ; preds = %loop.cond82
  %86 = load i8, ptr %value, align 1, !dbg !1166
  store i8 %86, ptr %blockret, align 1, !dbg !1166
  br label %expr_block.exit155, !dbg !1166

expr_block.exit155:                               ; preds = %loop.exit154, %if.then52
  %87 = load i8, ptr %blockret, align 1, !dbg !1166
  store i8 %87, ptr %0, align 1, !dbg !1166
  ret i64 0, !dbg !1166

err_retblock:                                     ; preds = %guard_block152, %if.then127, %guard_block, %if.then79, %if.then28, %if.then
  %88 = load i64, ptr %reterr, align 8, !dbg !1166
  ret i64 %88, !dbg !1166

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %89 = insertvalue %any undef, ptr %taddr, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg19, align 8
  store %any %90, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %92, ptr %ptradd20, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !1107
  unreachable, !dbg !1107

panic32:                                          ; preds = %if.exit29
  store i64 %31, ptr %taddr33, align 8
  %94 = insertvalue %any undef, ptr %taddr33, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr34, align 8
  %96 = insertvalue %any undef, ptr %taddr34, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg37, align 8
  store %any %95, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %97, ptr %ptradd39, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 709, ptr align 8 %indirectarg41), !dbg !1120
  unreachable, !dbg !1120

panic56:                                          ; preds = %if.exit53
  store i64 %40, ptr %taddr57, align 8
  %99 = insertvalue %any undef, ptr %taddr57, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr58, align 8
  %101 = insertvalue %any undef, ptr %taddr58, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg61, align 8
  store %any %100, ptr %varargslots62, align 16
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %102, ptr %ptradd63, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp64", ptr %indirectarg65, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 713, ptr align 8 %indirectarg65), !dbg !1124
  unreachable, !dbg !1124

panic89:                                          ; preds = %loop.body83
  store i64 %53, ptr %taddr90, align 8
  %104 = insertvalue %any undef, ptr %taddr90, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr91, align 8
  %106 = insertvalue %any undef, ptr %taddr91, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.66, i64 8 }, ptr %indirectarg94, align 8
  store %any %105, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %107, ptr %ptradd96, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 736, ptr align 8 %indirectarg98), !dbg !1148
  unreachable, !dbg !1148
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_uint128(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1167 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i128, align 16
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value139 = alloca i128, align 16
    #dbg_declare(ptr %1, !1172, !DIExpression(), !1173)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1174, !DIExpression(), !1173)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1175
  %le = icmp sle i32 %4, 10, !dbg !1175
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1175

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1175
  %gt = icmp sgt i32 %5, 1, !dbg !1175
  br label %and.phi, !dbg !1175

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1175
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1175

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1175
  %eq = icmp eq i32 %6, 16, !dbg !1175
  br label %or.phi, !dbg !1175

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1175
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1175

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.67, i64 10 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !1175
  unreachable, !dbg !1175

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1178, !DIExpression(), !1179)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1179
  %8 = load i64, ptr %ptradd, align 8, !dbg !1179
  store i64 %8, ptr %len, align 8, !dbg !1179
    #dbg_declare(ptr %index, !1180, !DIExpression(), !1181)
  store i64 0, ptr %index, align 8, !dbg !1181
    #dbg_declare(ptr %ptr, !1182, !DIExpression(), !1183)
  %9 = load ptr, ptr %string, align 8, !dbg !1183
  store ptr %9, ptr %ptr, align 8, !dbg !1183
  br label %loop.cond, !dbg !1184

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1185
  %11 = load i64, ptr %len, align 8, !dbg !1185
  %lt = icmp ult i64 %10, %11, !dbg !1185
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1185

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1185
  %13 = load i64, ptr %index, align 8, !dbg !1185
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1185
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1187
  %eq7 = icmp eq i8 %15, 32, !dbg !1187
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1187

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1187
  %eq9 = icmp eq i8 %16, 9, !dbg !1187
  br label %or.phi10, !dbg !1187

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1187
  br label %and.phi12, !dbg !1187

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1187
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1187

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1185
  %add = add i64 %17, 1, !dbg !1185
  store i64 %add, ptr %index, align 8, !dbg !1185
  br label %loop.cond, !dbg !1185

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1189
  %19 = load i64, ptr %index, align 8, !dbg !1189
  %eq14 = icmp eq i64 %18, %19, !dbg !1189
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1189

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1189
  br label %err_retblock, !dbg !1189

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1190, !DIExpression(), !1191)
  store i8 0, ptr %is_negative, align 1, !dbg !1191
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1192
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1192
  %21 = load ptr, ptr %string, align 8, !dbg !1192
  %22 = load i64, ptr %index, align 8, !dbg !1192
  %ge = icmp uge i64 %22, %20, !dbg !1192
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1192
  br i1 %23, label %panic, label %checkok, !dbg !1192

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1192
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1194

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1194
  br label %err_retblock, !dbg !1194

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1196
  %add27 = add i64 %26, 1, !dbg !1196
  store i64 %add27, ptr %index, align 8, !dbg !1196
  br label %switch.exit, !dbg !1196

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1198

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1200
  %28 = load i64, ptr %index, align 8, !dbg !1200
  %eq28 = icmp eq i64 %27, %28, !dbg !1200
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1200

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1200
  br label %err_retblock, !dbg !1200

if.exit30:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1201, !DIExpression(), !1202)
  %29 = load i32, ptr %base1, align 4, !dbg !1202
  %sext = sext i32 %29 to i128, !dbg !1202
  store i128 %sext, ptr %base_used, align 16, !dbg !1202
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1203
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1203
  %31 = load ptr, ptr %string, align 8, !dbg !1203
  %32 = load i64, ptr %index, align 8, !dbg !1203
  %ge32 = icmp uge i64 %32, %30, !dbg !1203
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1203
  br i1 %33, label %panic33, label %checkok43, !dbg !1203

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1203
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1203
  %eq45 = icmp eq i8 %34, 48, !dbg !1203
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1203

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1203
  %eq47 = icmp eq i32 %35, 10, !dbg !1203
  br label %and.phi48, !dbg !1203

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1203
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1203

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1204
  %add51 = add i64 %36, 1, !dbg !1204
  store i64 %add51, ptr %index, align 8, !dbg !1204
  %37 = load i64, ptr %index, align 8, !dbg !1206
  %38 = load i64, ptr %len, align 8, !dbg !1206
  %eq52 = icmp eq i64 %37, %38, !dbg !1206
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1206

if.then53:                                        ; preds = %if.then50
  store i128 0, ptr %blockret, align 16, !dbg !1206
  br label %expr_block.exit150, !dbg !1206

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1207
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1207
  %40 = load ptr, ptr %string, align 8, !dbg !1207
  %41 = load i64, ptr %index, align 8, !dbg !1207
  %ge56 = icmp uge i64 %41, %39, !dbg !1207
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1207
  br i1 %42, label %panic57, label %checkok67, !dbg !1207

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1207
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 16, ptr %base_used, align 16, !dbg !1209
  %45 = load i64, ptr %index, align 8, !dbg !1211
  %add72 = add i64 %45, 1, !dbg !1211
  store i64 %add72, ptr %index, align 8, !dbg !1211
  br label %switch.exit78, !dbg !1211

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 2, ptr %base_used, align 16, !dbg !1212
  %46 = load i64, ptr %index, align 8, !dbg !1214
  %add74 = add i64 %46, 1, !dbg !1214
  store i64 %add74, ptr %index, align 8, !dbg !1214
  br label %switch.exit78, !dbg !1214

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 8, ptr %base_used, align 16, !dbg !1215
  %47 = load i64, ptr %index, align 8, !dbg !1217
  %add76 = add i64 %47, 1, !dbg !1217
  store i64 %add76, ptr %index, align 8, !dbg !1217
  br label %switch.exit78, !dbg !1217

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1218

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !1220
  %49 = load i64, ptr %index, align 8, !dbg !1220
  %eq79 = icmp eq i64 %48, %49, !dbg !1220
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1220

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1220
  br label %err_retblock, !dbg !1220

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1220

if.exit82:                                        ; preds = %if.exit81, %and.phi48
    #dbg_declare(ptr %value, !1221, !DIExpression(), !1222)
  store i128 0, ptr %value, align 16, !dbg !1222
  br label %loop.cond83, !dbg !1223

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !1224
  %51 = load i64, ptr %len, align 8, !dbg !1224
  %neq = icmp ne i64 %50, %51, !dbg !1224
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1224

loop.body84:                                      ; preds = %loop.cond83
    #dbg_declare(ptr %c85, !1226, !DIExpression(), !1228)
    #dbg_declare(ptr %ch, !1229, !DIExpression(), !1231)
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1231
  %52 = load i64, ptr %ptradd87, align 8, !dbg !1231
  %53 = load ptr, ptr %string, align 8, !dbg !1231
  %54 = load i64, ptr %index, align 8, !dbg !1231
  %add88 = add i64 %54, 1, !dbg !1231
  store i64 %add88, ptr %index, align 8, !dbg !1231
  %ge89 = icmp uge i64 %54, %52, !dbg !1231
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1231
  br i1 %55, label %panic90, label %checkok100, !dbg !1231

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !1231
  %56 = load i8, ptr %ptradd101, align 1, !dbg !1231
  store i8 %56, ptr %ch, align 1, !dbg !1231
  %57 = load i128, ptr %base_used, align 16, !dbg !1232
  %neq102 = icmp ne i128 16, %57, !dbg !1232
  %siui-ne = or i1 false, %neq102, !dbg !1232
  br i1 %siui-ne, label %or.phi105, label %or.rhs103, !dbg !1232

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !1232
  %lt104 = icmp ult i8 %58, 65, !dbg !1232
  br label %or.phi105, !dbg !1232

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1232
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1232

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !1232
  %zext = zext i8 %59 to i32, !dbg !1232
  %sub = sub i32 %zext, 48, !dbg !1232
  %trunc = trunc i32 %sub to i8, !dbg !1232
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1232
  br label %expr_block.exit, !dbg !1232

if.exit108:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !1233
  %le109 = icmp ule i8 %60, 70, !dbg !1233
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1233

if.then110:                                       ; preds = %if.exit108
  %61 = load i8, ptr %ch, align 1, !dbg !1233
  %zext111 = zext i8 %61 to i32, !dbg !1233
  %sub112 = sub i32 %zext111, 65, !dbg !1233
  %add113 = add i32 %sub112, 10, !dbg !1233
  %trunc114 = trunc i32 %add113 to i8, !dbg !1233
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1233
  br label %expr_block.exit, !dbg !1233

if.exit115:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1234
  %lt116 = icmp ult i8 %62, 97, !dbg !1234
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1234

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1234
  br label %guard_block, !dbg !1234

if.exit118:                                       ; preds = %if.exit115
  %63 = load i8, ptr %ch, align 1, !dbg !1235
  %gt119 = icmp ugt i8 %63, 102, !dbg !1235
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1235

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1235
  br label %guard_block, !dbg !1235

if.exit121:                                       ; preds = %if.exit118
  %64 = load i8, ptr %ch, align 1, !dbg !1236
  %zext122 = zext i8 %64 to i32, !dbg !1236
  %sub123 = sub i32 %zext122, 97, !dbg !1236
  %add124 = add i32 %sub123, 10, !dbg !1236
  %trunc125 = trunc i32 %add124 to i8, !dbg !1236
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1236
  br label %expr_block.exit, !dbg !1236

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1236

guard_block:                                      ; preds = %if.then120, %if.then117
  %65 = load i64, ptr %error_var, align 8, !dbg !1236
  store i64 %65, ptr %reterr, align 8, !dbg !1236
  br label %err_retblock, !dbg !1236

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !1236
  store i8 %66, ptr %c85, align 1, !dbg !1236
  %67 = load i8, ptr %c85, align 1, !dbg !1237
  %zext126 = zext i8 %67 to i128, !dbg !1237
  %68 = load i128, ptr %base_used, align 16, !dbg !1237
  %ge127 = icmp uge i128 %zext126, %68, !dbg !1237
  br i1 %ge127, label %if.then128, label %if.exit129, !dbg !1237

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1237
  br label %err_retblock, !dbg !1237

if.exit129:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !1238
  %70 = trunc i8 %69 to i1, !dbg !1238
  br i1 %70, label %if.then132, label %if.exit138, !dbg !1238

if.then132:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value, !1240, !DIExpression(), !1242)
  %71 = load i128, ptr %value, align 16, !dbg !1242
  %72 = load i128, ptr %base_used, align 16, !dbg !1242
  %mul = mul i128 %71, %72, !dbg !1242
  %73 = load i8, ptr %c85, align 1, !dbg !1242
  %zext133 = zext i8 %73 to i128, !dbg !1242
  %sub134 = sub i128 %mul, %zext133, !dbg !1242
  store i128 %sub134, ptr %new_value, align 16, !dbg !1242
  %74 = load i128, ptr %new_value, align 16, !dbg !1243
  %75 = load i128, ptr %value, align 16, !dbg !1243
  %gt135 = icmp ugt i128 %74, %75, !dbg !1243
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1243

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1243
  br label %guard_block147, !dbg !1243

if.exit137:                                       ; preds = %if.then132
  %76 = load i128, ptr %new_value, align 16, !dbg !1244
  store i128 %76, ptr %blockret131, align 16, !dbg !1244
  br label %expr_block.exit146, !dbg !1244

if.exit138:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value139, !1245, !DIExpression(), !1246)
  %77 = load i128, ptr %value, align 16, !dbg !1246
  %78 = load i128, ptr %base_used, align 16, !dbg !1246
  %mul140 = mul i128 %77, %78, !dbg !1246
  %79 = load i8, ptr %c85, align 1, !dbg !1246
  %zext141 = zext i8 %79 to i128, !dbg !1246
  %add142 = add i128 %mul140, %zext141, !dbg !1246
  store i128 %add142, ptr %new_value139, align 16, !dbg !1246
  %80 = load i128, ptr %new_value139, align 16, !dbg !1247
  %81 = load i128, ptr %value, align 16, !dbg !1247
  %lt143 = icmp ult i128 %80, %81, !dbg !1247
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1247

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1247
  br label %guard_block147, !dbg !1247

if.exit145:                                       ; preds = %if.exit138
  %82 = load i128, ptr %new_value139, align 16, !dbg !1248
  store i128 %82, ptr %blockret131, align 16, !dbg !1248
  br label %expr_block.exit146, !dbg !1248

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1248

guard_block147:                                   ; preds = %if.then144, %if.then136
  %83 = load i64, ptr %error_var130, align 8, !dbg !1248
  store i64 %83, ptr %reterr, align 8, !dbg !1248
  br label %err_retblock, !dbg !1248

noerr_block148:                                   ; preds = %expr_block.exit146
  %84 = load i128, ptr %blockret131, align 16, !dbg !1248
  store i128 %84, ptr %value, align 16, !dbg !1248
  br label %loop.cond83, !dbg !1248

loop.exit149:                                     ; preds = %loop.cond83
  %85 = load i128, ptr %value, align 16, !dbg !1249
  store i128 %85, ptr %blockret, align 16, !dbg !1249
  br label %expr_block.exit150, !dbg !1249

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %86 = load i128, ptr %blockret, align 16, !dbg !1249
  store i128 %86, ptr %0, align 16, !dbg !1249
  ret i64 0, !dbg !1249

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !1249
  ret i64 %87, !dbg !1249

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.67, i64 10 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !1192
  unreachable, !dbg !1192

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.67, i64 10 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 709, ptr align 8 %indirectarg42), !dbg !1203
  unreachable, !dbg !1203

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.67, i64 10 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 713, ptr align 8 %indirectarg66), !dbg !1207
  unreachable, !dbg !1207

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.67, i64 10 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 736, ptr align 8 %indirectarg99), !dbg !1231
  unreachable, !dbg !1231
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_ulong(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1250 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i64, align 8
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value139 = alloca i64, align 8
    #dbg_declare(ptr %1, !1254, !DIExpression(), !1255)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1256, !DIExpression(), !1255)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1257
  %le = icmp sle i32 %4, 10, !dbg !1257
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1257

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1257
  %gt = icmp sgt i32 %5, 1, !dbg !1257
  br label %and.phi, !dbg !1257

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1257
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1257

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1257
  %eq = icmp eq i32 %6, 16, !dbg !1257
  br label %or.phi, !dbg !1257

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1257
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1257

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !1257
  unreachable, !dbg !1257

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1260, !DIExpression(), !1261)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1261
  %8 = load i64, ptr %ptradd, align 8, !dbg !1261
  store i64 %8, ptr %len, align 8, !dbg !1261
    #dbg_declare(ptr %index, !1262, !DIExpression(), !1263)
  store i64 0, ptr %index, align 8, !dbg !1263
    #dbg_declare(ptr %ptr, !1264, !DIExpression(), !1265)
  %9 = load ptr, ptr %string, align 8, !dbg !1265
  store ptr %9, ptr %ptr, align 8, !dbg !1265
  br label %loop.cond, !dbg !1266

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1267
  %11 = load i64, ptr %len, align 8, !dbg !1267
  %lt = icmp ult i64 %10, %11, !dbg !1267
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1267

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1267
  %13 = load i64, ptr %index, align 8, !dbg !1267
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1267
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1269
  %eq7 = icmp eq i8 %15, 32, !dbg !1269
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1269

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1269
  %eq9 = icmp eq i8 %16, 9, !dbg !1269
  br label %or.phi10, !dbg !1269

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1269
  br label %and.phi12, !dbg !1269

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1269
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1269

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1267
  %add = add i64 %17, 1, !dbg !1267
  store i64 %add, ptr %index, align 8, !dbg !1267
  br label %loop.cond, !dbg !1267

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1271
  %19 = load i64, ptr %index, align 8, !dbg !1271
  %eq14 = icmp eq i64 %18, %19, !dbg !1271
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1271

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1271
  br label %err_retblock, !dbg !1271

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1272, !DIExpression(), !1273)
  store i8 0, ptr %is_negative, align 1, !dbg !1273
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1274
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1274
  %21 = load ptr, ptr %string, align 8, !dbg !1274
  %22 = load i64, ptr %index, align 8, !dbg !1274
  %ge = icmp uge i64 %22, %20, !dbg !1274
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1274
  br i1 %23, label %panic, label %checkok, !dbg !1274

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1274
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1276

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1276
  br label %err_retblock, !dbg !1276

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1278
  %add27 = add i64 %26, 1, !dbg !1278
  store i64 %add27, ptr %index, align 8, !dbg !1278
  br label %switch.exit, !dbg !1278

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1280

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1282
  %28 = load i64, ptr %index, align 8, !dbg !1282
  %eq28 = icmp eq i64 %27, %28, !dbg !1282
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1282

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1282
  br label %err_retblock, !dbg !1282

if.exit30:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1283, !DIExpression(), !1284)
  %29 = load i32, ptr %base1, align 4, !dbg !1284
  %sext = sext i32 %29 to i64, !dbg !1284
  store i64 %sext, ptr %base_used, align 8, !dbg !1284
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1285
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1285
  %31 = load ptr, ptr %string, align 8, !dbg !1285
  %32 = load i64, ptr %index, align 8, !dbg !1285
  %ge32 = icmp uge i64 %32, %30, !dbg !1285
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1285
  br i1 %33, label %panic33, label %checkok43, !dbg !1285

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1285
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1285
  %eq45 = icmp eq i8 %34, 48, !dbg !1285
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1285

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1285
  %eq47 = icmp eq i32 %35, 10, !dbg !1285
  br label %and.phi48, !dbg !1285

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1285
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1285

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1286
  %add51 = add i64 %36, 1, !dbg !1286
  store i64 %add51, ptr %index, align 8, !dbg !1286
  %37 = load i64, ptr %index, align 8, !dbg !1288
  %38 = load i64, ptr %len, align 8, !dbg !1288
  %eq52 = icmp eq i64 %37, %38, !dbg !1288
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1288

if.then53:                                        ; preds = %if.then50
  store i64 0, ptr %blockret, align 8, !dbg !1288
  br label %expr_block.exit150, !dbg !1288

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1289
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1289
  %40 = load ptr, ptr %string, align 8, !dbg !1289
  %41 = load i64, ptr %index, align 8, !dbg !1289
  %ge56 = icmp uge i64 %41, %39, !dbg !1289
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1289
  br i1 %42, label %panic57, label %checkok67, !dbg !1289

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1289
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 16, ptr %base_used, align 8, !dbg !1291
  %45 = load i64, ptr %index, align 8, !dbg !1293
  %add72 = add i64 %45, 1, !dbg !1293
  store i64 %add72, ptr %index, align 8, !dbg !1293
  br label %switch.exit78, !dbg !1293

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 2, ptr %base_used, align 8, !dbg !1294
  %46 = load i64, ptr %index, align 8, !dbg !1296
  %add74 = add i64 %46, 1, !dbg !1296
  store i64 %add74, ptr %index, align 8, !dbg !1296
  br label %switch.exit78, !dbg !1296

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 8, ptr %base_used, align 8, !dbg !1297
  %47 = load i64, ptr %index, align 8, !dbg !1299
  %add76 = add i64 %47, 1, !dbg !1299
  store i64 %add76, ptr %index, align 8, !dbg !1299
  br label %switch.exit78, !dbg !1299

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1300

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !1302
  %49 = load i64, ptr %index, align 8, !dbg !1302
  %eq79 = icmp eq i64 %48, %49, !dbg !1302
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1302

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1302
  br label %err_retblock, !dbg !1302

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1302

if.exit82:                                        ; preds = %if.exit81, %and.phi48
    #dbg_declare(ptr %value, !1303, !DIExpression(), !1304)
  store i64 0, ptr %value, align 8, !dbg !1304
  br label %loop.cond83, !dbg !1305

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !1306
  %51 = load i64, ptr %len, align 8, !dbg !1306
  %neq = icmp ne i64 %50, %51, !dbg !1306
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1306

loop.body84:                                      ; preds = %loop.cond83
    #dbg_declare(ptr %c85, !1308, !DIExpression(), !1310)
    #dbg_declare(ptr %ch, !1311, !DIExpression(), !1313)
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1313
  %52 = load i64, ptr %ptradd87, align 8, !dbg !1313
  %53 = load ptr, ptr %string, align 8, !dbg !1313
  %54 = load i64, ptr %index, align 8, !dbg !1313
  %add88 = add i64 %54, 1, !dbg !1313
  store i64 %add88, ptr %index, align 8, !dbg !1313
  %ge89 = icmp uge i64 %54, %52, !dbg !1313
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1313
  br i1 %55, label %panic90, label %checkok100, !dbg !1313

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !1313
  %56 = load i8, ptr %ptradd101, align 1, !dbg !1313
  store i8 %56, ptr %ch, align 1, !dbg !1313
  %57 = load i64, ptr %base_used, align 8, !dbg !1314
  %neq102 = icmp ne i64 16, %57, !dbg !1314
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1314

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !1314
  %lt104 = icmp ult i8 %58, 65, !dbg !1314
  br label %or.phi105, !dbg !1314

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1314
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1314

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !1314
  %zext = zext i8 %59 to i32, !dbg !1314
  %sub = sub i32 %zext, 48, !dbg !1314
  %trunc = trunc i32 %sub to i8, !dbg !1314
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1314
  br label %expr_block.exit, !dbg !1314

if.exit108:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !1315
  %le109 = icmp ule i8 %60, 70, !dbg !1315
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1315

if.then110:                                       ; preds = %if.exit108
  %61 = load i8, ptr %ch, align 1, !dbg !1315
  %zext111 = zext i8 %61 to i32, !dbg !1315
  %sub112 = sub i32 %zext111, 65, !dbg !1315
  %add113 = add i32 %sub112, 10, !dbg !1315
  %trunc114 = trunc i32 %add113 to i8, !dbg !1315
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1315
  br label %expr_block.exit, !dbg !1315

if.exit115:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1316
  %lt116 = icmp ult i8 %62, 97, !dbg !1316
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1316

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1316
  br label %guard_block, !dbg !1316

if.exit118:                                       ; preds = %if.exit115
  %63 = load i8, ptr %ch, align 1, !dbg !1317
  %gt119 = icmp ugt i8 %63, 102, !dbg !1317
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1317

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1317
  br label %guard_block, !dbg !1317

if.exit121:                                       ; preds = %if.exit118
  %64 = load i8, ptr %ch, align 1, !dbg !1318
  %zext122 = zext i8 %64 to i32, !dbg !1318
  %sub123 = sub i32 %zext122, 97, !dbg !1318
  %add124 = add i32 %sub123, 10, !dbg !1318
  %trunc125 = trunc i32 %add124 to i8, !dbg !1318
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1318
  br label %expr_block.exit, !dbg !1318

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1318

guard_block:                                      ; preds = %if.then120, %if.then117
  %65 = load i64, ptr %error_var, align 8, !dbg !1318
  store i64 %65, ptr %reterr, align 8, !dbg !1318
  br label %err_retblock, !dbg !1318

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !1318
  store i8 %66, ptr %c85, align 1, !dbg !1318
  %67 = load i8, ptr %c85, align 1, !dbg !1319
  %zext126 = zext i8 %67 to i64, !dbg !1319
  %68 = load i64, ptr %base_used, align 8, !dbg !1319
  %ge127 = icmp uge i64 %zext126, %68, !dbg !1319
  br i1 %ge127, label %if.then128, label %if.exit129, !dbg !1319

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1319
  br label %err_retblock, !dbg !1319

if.exit129:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !1320
  %70 = trunc i8 %69 to i1, !dbg !1320
  br i1 %70, label %if.then132, label %if.exit138, !dbg !1320

if.then132:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value, !1322, !DIExpression(), !1324)
  %71 = load i64, ptr %value, align 8, !dbg !1324
  %72 = load i64, ptr %base_used, align 8, !dbg !1324
  %mul = mul i64 %71, %72, !dbg !1324
  %73 = load i8, ptr %c85, align 1, !dbg !1324
  %zext133 = zext i8 %73 to i64, !dbg !1324
  %sub134 = sub i64 %mul, %zext133, !dbg !1324
  store i64 %sub134, ptr %new_value, align 8, !dbg !1324
  %74 = load i64, ptr %new_value, align 8, !dbg !1325
  %75 = load i64, ptr %value, align 8, !dbg !1325
  %gt135 = icmp ugt i64 %74, %75, !dbg !1325
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1325

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1325
  br label %guard_block147, !dbg !1325

if.exit137:                                       ; preds = %if.then132
  %76 = load i64, ptr %new_value, align 8, !dbg !1326
  store i64 %76, ptr %blockret131, align 8, !dbg !1326
  br label %expr_block.exit146, !dbg !1326

if.exit138:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value139, !1327, !DIExpression(), !1328)
  %77 = load i64, ptr %value, align 8, !dbg !1328
  %78 = load i64, ptr %base_used, align 8, !dbg !1328
  %mul140 = mul i64 %77, %78, !dbg !1328
  %79 = load i8, ptr %c85, align 1, !dbg !1328
  %zext141 = zext i8 %79 to i64, !dbg !1328
  %add142 = add i64 %mul140, %zext141, !dbg !1328
  store i64 %add142, ptr %new_value139, align 8, !dbg !1328
  %80 = load i64, ptr %new_value139, align 8, !dbg !1329
  %81 = load i64, ptr %value, align 8, !dbg !1329
  %lt143 = icmp ult i64 %80, %81, !dbg !1329
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1329

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1329
  br label %guard_block147, !dbg !1329

if.exit145:                                       ; preds = %if.exit138
  %82 = load i64, ptr %new_value139, align 8, !dbg !1330
  store i64 %82, ptr %blockret131, align 8, !dbg !1330
  br label %expr_block.exit146, !dbg !1330

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1330

guard_block147:                                   ; preds = %if.then144, %if.then136
  %83 = load i64, ptr %error_var130, align 8, !dbg !1330
  store i64 %83, ptr %reterr, align 8, !dbg !1330
  br label %err_retblock, !dbg !1330

noerr_block148:                                   ; preds = %expr_block.exit146
  %84 = load i64, ptr %blockret131, align 8, !dbg !1330
  store i64 %84, ptr %value, align 8, !dbg !1330
  br label %loop.cond83, !dbg !1330

loop.exit149:                                     ; preds = %loop.cond83
  %85 = load i64, ptr %value, align 8, !dbg !1331
  store i64 %85, ptr %blockret, align 8, !dbg !1331
  br label %expr_block.exit150, !dbg !1331

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %86 = load i64, ptr %blockret, align 8, !dbg !1331
  store i64 %86, ptr %0, align 8, !dbg !1331
  ret i64 0, !dbg !1331

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !1331
  ret i64 %87, !dbg !1331

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !1274
  unreachable, !dbg !1274

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 709, ptr align 8 %indirectarg42), !dbg !1285
  unreachable, !dbg !1285

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 713, ptr align 8 %indirectarg66), !dbg !1289
  unreachable, !dbg !1289

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 736, ptr align 8 %indirectarg99), !dbg !1313
  unreachable, !dbg !1313
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_uint(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1332 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i32, align 4
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value139 = alloca i32, align 4
    #dbg_declare(ptr %1, !1336, !DIExpression(), !1337)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1338, !DIExpression(), !1337)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1339
  %le = icmp sle i32 %4, 10, !dbg !1339
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1339

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1339
  %gt = icmp sgt i32 %5, 1, !dbg !1339
  br label %and.phi, !dbg !1339

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1339
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1339

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1339
  %eq = icmp eq i32 %6, 16, !dbg !1339
  br label %or.phi, !dbg !1339

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1339
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1339

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.69, i64 7 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !1339
  unreachable, !dbg !1339

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1342, !DIExpression(), !1343)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1343
  %8 = load i64, ptr %ptradd, align 8, !dbg !1343
  store i64 %8, ptr %len, align 8, !dbg !1343
    #dbg_declare(ptr %index, !1344, !DIExpression(), !1345)
  store i64 0, ptr %index, align 8, !dbg !1345
    #dbg_declare(ptr %ptr, !1346, !DIExpression(), !1347)
  %9 = load ptr, ptr %string, align 8, !dbg !1347
  store ptr %9, ptr %ptr, align 8, !dbg !1347
  br label %loop.cond, !dbg !1348

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1349
  %11 = load i64, ptr %len, align 8, !dbg !1349
  %lt = icmp ult i64 %10, %11, !dbg !1349
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1349

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1349
  %13 = load i64, ptr %index, align 8, !dbg !1349
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1349
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1351
  %eq7 = icmp eq i8 %15, 32, !dbg !1351
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1351

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1351
  %eq9 = icmp eq i8 %16, 9, !dbg !1351
  br label %or.phi10, !dbg !1351

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1351
  br label %and.phi12, !dbg !1351

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1351
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1351

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1349
  %add = add i64 %17, 1, !dbg !1349
  store i64 %add, ptr %index, align 8, !dbg !1349
  br label %loop.cond, !dbg !1349

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1353
  %19 = load i64, ptr %index, align 8, !dbg !1353
  %eq14 = icmp eq i64 %18, %19, !dbg !1353
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1353

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1353
  br label %err_retblock, !dbg !1353

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1354, !DIExpression(), !1355)
  store i8 0, ptr %is_negative, align 1, !dbg !1355
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1356
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1356
  %21 = load ptr, ptr %string, align 8, !dbg !1356
  %22 = load i64, ptr %index, align 8, !dbg !1356
  %ge = icmp uge i64 %22, %20, !dbg !1356
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1356
  br i1 %23, label %panic, label %checkok, !dbg !1356

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1356
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1358

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1358
  br label %err_retblock, !dbg !1358

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1360
  %add27 = add i64 %26, 1, !dbg !1360
  store i64 %add27, ptr %index, align 8, !dbg !1360
  br label %switch.exit, !dbg !1360

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1362

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1364
  %28 = load i64, ptr %index, align 8, !dbg !1364
  %eq28 = icmp eq i64 %27, %28, !dbg !1364
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1364

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1364
  br label %err_retblock, !dbg !1364

if.exit30:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1365, !DIExpression(), !1366)
  %29 = load i32, ptr %base1, align 4, !dbg !1366
  store i32 %29, ptr %base_used, align 4, !dbg !1366
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1367
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1367
  %31 = load ptr, ptr %string, align 8, !dbg !1367
  %32 = load i64, ptr %index, align 8, !dbg !1367
  %ge32 = icmp uge i64 %32, %30, !dbg !1367
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1367
  br i1 %33, label %panic33, label %checkok43, !dbg !1367

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1367
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1367
  %eq45 = icmp eq i8 %34, 48, !dbg !1367
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1367

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1367
  %eq47 = icmp eq i32 %35, 10, !dbg !1367
  br label %and.phi48, !dbg !1367

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1367
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1367

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1368
  %add51 = add i64 %36, 1, !dbg !1368
  store i64 %add51, ptr %index, align 8, !dbg !1368
  %37 = load i64, ptr %index, align 8, !dbg !1370
  %38 = load i64, ptr %len, align 8, !dbg !1370
  %eq52 = icmp eq i64 %37, %38, !dbg !1370
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1370

if.then53:                                        ; preds = %if.then50
  store i32 0, ptr %blockret, align 4, !dbg !1370
  br label %expr_block.exit150, !dbg !1370

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1371
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1371
  %40 = load ptr, ptr %string, align 8, !dbg !1371
  %41 = load i64, ptr %index, align 8, !dbg !1371
  %ge56 = icmp uge i64 %41, %39, !dbg !1371
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1371
  br i1 %42, label %panic57, label %checkok67, !dbg !1371

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1371
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 16, ptr %base_used, align 4, !dbg !1373
  %45 = load i64, ptr %index, align 8, !dbg !1375
  %add72 = add i64 %45, 1, !dbg !1375
  store i64 %add72, ptr %index, align 8, !dbg !1375
  br label %switch.exit78, !dbg !1375

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 2, ptr %base_used, align 4, !dbg !1376
  %46 = load i64, ptr %index, align 8, !dbg !1378
  %add74 = add i64 %46, 1, !dbg !1378
  store i64 %add74, ptr %index, align 8, !dbg !1378
  br label %switch.exit78, !dbg !1378

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 8, ptr %base_used, align 4, !dbg !1379
  %47 = load i64, ptr %index, align 8, !dbg !1381
  %add76 = add i64 %47, 1, !dbg !1381
  store i64 %add76, ptr %index, align 8, !dbg !1381
  br label %switch.exit78, !dbg !1381

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1382

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !1384
  %49 = load i64, ptr %index, align 8, !dbg !1384
  %eq79 = icmp eq i64 %48, %49, !dbg !1384
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1384

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1384
  br label %err_retblock, !dbg !1384

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1384

if.exit82:                                        ; preds = %if.exit81, %and.phi48
    #dbg_declare(ptr %value, !1385, !DIExpression(), !1386)
  store i32 0, ptr %value, align 4, !dbg !1386
  br label %loop.cond83, !dbg !1387

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !1388
  %51 = load i64, ptr %len, align 8, !dbg !1388
  %neq = icmp ne i64 %50, %51, !dbg !1388
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1388

loop.body84:                                      ; preds = %loop.cond83
    #dbg_declare(ptr %c85, !1390, !DIExpression(), !1392)
    #dbg_declare(ptr %ch, !1393, !DIExpression(), !1395)
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1395
  %52 = load i64, ptr %ptradd87, align 8, !dbg !1395
  %53 = load ptr, ptr %string, align 8, !dbg !1395
  %54 = load i64, ptr %index, align 8, !dbg !1395
  %add88 = add i64 %54, 1, !dbg !1395
  store i64 %add88, ptr %index, align 8, !dbg !1395
  %ge89 = icmp uge i64 %54, %52, !dbg !1395
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1395
  br i1 %55, label %panic90, label %checkok100, !dbg !1395

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !1395
  %56 = load i8, ptr %ptradd101, align 1, !dbg !1395
  store i8 %56, ptr %ch, align 1, !dbg !1395
  %57 = load i32, ptr %base_used, align 4, !dbg !1396
  %neq102 = icmp ne i32 16, %57, !dbg !1396
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1396

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !1396
  %lt104 = icmp ult i8 %58, 65, !dbg !1396
  br label %or.phi105, !dbg !1396

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1396
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1396

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !1396
  %zext = zext i8 %59 to i32, !dbg !1396
  %sub = sub i32 %zext, 48, !dbg !1396
  %trunc = trunc i32 %sub to i8, !dbg !1396
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1396
  br label %expr_block.exit, !dbg !1396

if.exit108:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !1397
  %le109 = icmp ule i8 %60, 70, !dbg !1397
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1397

if.then110:                                       ; preds = %if.exit108
  %61 = load i8, ptr %ch, align 1, !dbg !1397
  %zext111 = zext i8 %61 to i32, !dbg !1397
  %sub112 = sub i32 %zext111, 65, !dbg !1397
  %add113 = add i32 %sub112, 10, !dbg !1397
  %trunc114 = trunc i32 %add113 to i8, !dbg !1397
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1397
  br label %expr_block.exit, !dbg !1397

if.exit115:                                       ; preds = %if.exit108
  %62 = load i8, ptr %ch, align 1, !dbg !1398
  %lt116 = icmp ult i8 %62, 97, !dbg !1398
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1398

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1398
  br label %guard_block, !dbg !1398

if.exit118:                                       ; preds = %if.exit115
  %63 = load i8, ptr %ch, align 1, !dbg !1399
  %gt119 = icmp ugt i8 %63, 102, !dbg !1399
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1399

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1399
  br label %guard_block, !dbg !1399

if.exit121:                                       ; preds = %if.exit118
  %64 = load i8, ptr %ch, align 1, !dbg !1400
  %zext122 = zext i8 %64 to i32, !dbg !1400
  %sub123 = sub i32 %zext122, 97, !dbg !1400
  %add124 = add i32 %sub123, 10, !dbg !1400
  %trunc125 = trunc i32 %add124 to i8, !dbg !1400
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1400
  br label %expr_block.exit, !dbg !1400

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1400

guard_block:                                      ; preds = %if.then120, %if.then117
  %65 = load i64, ptr %error_var, align 8, !dbg !1400
  store i64 %65, ptr %reterr, align 8, !dbg !1400
  br label %err_retblock, !dbg !1400

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !1400
  store i8 %66, ptr %c85, align 1, !dbg !1400
  %67 = load i8, ptr %c85, align 1, !dbg !1401
  %zext126 = zext i8 %67 to i32, !dbg !1401
  %68 = load i32, ptr %base_used, align 4, !dbg !1401
  %ge127 = icmp uge i32 %zext126, %68, !dbg !1401
  br i1 %ge127, label %if.then128, label %if.exit129, !dbg !1401

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1401
  br label %err_retblock, !dbg !1401

if.exit129:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !1402
  %70 = trunc i8 %69 to i1, !dbg !1402
  br i1 %70, label %if.then132, label %if.exit138, !dbg !1402

if.then132:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value, !1404, !DIExpression(), !1406)
  %71 = load i32, ptr %value, align 4, !dbg !1406
  %72 = load i32, ptr %base_used, align 4, !dbg !1406
  %mul = mul i32 %71, %72, !dbg !1406
  %73 = load i8, ptr %c85, align 1, !dbg !1406
  %zext133 = zext i8 %73 to i32, !dbg !1406
  %sub134 = sub i32 %mul, %zext133, !dbg !1406
  store i32 %sub134, ptr %new_value, align 4, !dbg !1406
  %74 = load i32, ptr %new_value, align 4, !dbg !1407
  %75 = load i32, ptr %value, align 4, !dbg !1407
  %gt135 = icmp ugt i32 %74, %75, !dbg !1407
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1407

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1407
  br label %guard_block147, !dbg !1407

if.exit137:                                       ; preds = %if.then132
  %76 = load i32, ptr %new_value, align 4, !dbg !1408
  store i32 %76, ptr %blockret131, align 4, !dbg !1408
  br label %expr_block.exit146, !dbg !1408

if.exit138:                                       ; preds = %if.exit129
    #dbg_declare(ptr %new_value139, !1409, !DIExpression(), !1410)
  %77 = load i32, ptr %value, align 4, !dbg !1410
  %78 = load i32, ptr %base_used, align 4, !dbg !1410
  %mul140 = mul i32 %77, %78, !dbg !1410
  %79 = load i8, ptr %c85, align 1, !dbg !1410
  %zext141 = zext i8 %79 to i32, !dbg !1410
  %add142 = add i32 %mul140, %zext141, !dbg !1410
  store i32 %add142, ptr %new_value139, align 4, !dbg !1410
  %80 = load i32, ptr %new_value139, align 4, !dbg !1411
  %81 = load i32, ptr %value, align 4, !dbg !1411
  %lt143 = icmp ult i32 %80, %81, !dbg !1411
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1411

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1411
  br label %guard_block147, !dbg !1411

if.exit145:                                       ; preds = %if.exit138
  %82 = load i32, ptr %new_value139, align 4, !dbg !1412
  store i32 %82, ptr %blockret131, align 4, !dbg !1412
  br label %expr_block.exit146, !dbg !1412

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1412

guard_block147:                                   ; preds = %if.then144, %if.then136
  %83 = load i64, ptr %error_var130, align 8, !dbg !1412
  store i64 %83, ptr %reterr, align 8, !dbg !1412
  br label %err_retblock, !dbg !1412

noerr_block148:                                   ; preds = %expr_block.exit146
  %84 = load i32, ptr %blockret131, align 4, !dbg !1412
  store i32 %84, ptr %value, align 4, !dbg !1412
  br label %loop.cond83, !dbg !1412

loop.exit149:                                     ; preds = %loop.cond83
  %85 = load i32, ptr %value, align 4, !dbg !1413
  store i32 %85, ptr %blockret, align 4, !dbg !1413
  br label %expr_block.exit150, !dbg !1413

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %86 = load i32, ptr %blockret, align 4, !dbg !1413
  store i32 %86, ptr %0, align 4, !dbg !1413
  ret i64 0, !dbg !1413

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !1413
  ret i64 %87, !dbg !1413

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.69, i64 7 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !1356
  unreachable, !dbg !1356

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.69, i64 7 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 709, ptr align 8 %indirectarg42), !dbg !1367
  unreachable, !dbg !1367

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.69, i64 7 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 713, ptr align 8 %indirectarg66), !dbg !1371
  unreachable, !dbg !1371

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.69, i64 7 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 736, ptr align 8 %indirectarg99), !dbg !1395
  unreachable, !dbg !1395
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_ushort(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1414 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i16, align 2
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var132 = alloca i64, align 8
  %blockret133 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value144 = alloca i16, align 2
    #dbg_declare(ptr %1, !1417, !DIExpression(), !1418)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1419, !DIExpression(), !1418)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1420
  %le = icmp sle i32 %4, 10, !dbg !1420
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1420

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1420
  %gt = icmp sgt i32 %5, 1, !dbg !1420
  br label %and.phi, !dbg !1420

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1420
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1420

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1420
  %eq = icmp eq i32 %6, 16, !dbg !1420
  br label %or.phi, !dbg !1420

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1420
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1420

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.70, i64 9 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !1420
  unreachable, !dbg !1420

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1423, !DIExpression(), !1424)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1424
  %8 = load i64, ptr %ptradd, align 8, !dbg !1424
  store i64 %8, ptr %len, align 8, !dbg !1424
    #dbg_declare(ptr %index, !1425, !DIExpression(), !1426)
  store i64 0, ptr %index, align 8, !dbg !1426
    #dbg_declare(ptr %ptr, !1427, !DIExpression(), !1428)
  %9 = load ptr, ptr %string, align 8, !dbg !1428
  store ptr %9, ptr %ptr, align 8, !dbg !1428
  br label %loop.cond, !dbg !1429

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1430
  %11 = load i64, ptr %len, align 8, !dbg !1430
  %lt = icmp ult i64 %10, %11, !dbg !1430
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1430

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1430
  %13 = load i64, ptr %index, align 8, !dbg !1430
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1430
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1432
  %eq7 = icmp eq i8 %15, 32, !dbg !1432
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1432

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1432
  %eq9 = icmp eq i8 %16, 9, !dbg !1432
  br label %or.phi10, !dbg !1432

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1432
  br label %and.phi12, !dbg !1432

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1432
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1432

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1430
  %add = add i64 %17, 1, !dbg !1430
  store i64 %add, ptr %index, align 8, !dbg !1430
  br label %loop.cond, !dbg !1430

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1434
  %19 = load i64, ptr %index, align 8, !dbg !1434
  %eq14 = icmp eq i64 %18, %19, !dbg !1434
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1434

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1434
  br label %err_retblock, !dbg !1434

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1435, !DIExpression(), !1436)
  store i8 0, ptr %is_negative, align 1, !dbg !1436
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1437
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1437
  %21 = load ptr, ptr %string, align 8, !dbg !1437
  %22 = load i64, ptr %index, align 8, !dbg !1437
  %ge = icmp uge i64 %22, %20, !dbg !1437
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1437
  br i1 %23, label %panic, label %checkok, !dbg !1437

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1437
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1439

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1439
  br label %err_retblock, !dbg !1439

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1441
  %add27 = add i64 %26, 1, !dbg !1441
  store i64 %add27, ptr %index, align 8, !dbg !1441
  br label %switch.exit, !dbg !1441

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1443

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1445
  %28 = load i64, ptr %index, align 8, !dbg !1445
  %eq28 = icmp eq i64 %27, %28, !dbg !1445
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1445

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1445
  br label %err_retblock, !dbg !1445

if.exit30:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1446, !DIExpression(), !1447)
  %29 = load i32, ptr %base1, align 4, !dbg !1447
  %trunc = trunc i32 %29 to i16, !dbg !1447
  store i16 %trunc, ptr %base_used, align 2, !dbg !1447
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1448
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1448
  %31 = load ptr, ptr %string, align 8, !dbg !1448
  %32 = load i64, ptr %index, align 8, !dbg !1448
  %ge32 = icmp uge i64 %32, %30, !dbg !1448
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1448
  br i1 %33, label %panic33, label %checkok43, !dbg !1448

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1448
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1448
  %eq45 = icmp eq i8 %34, 48, !dbg !1448
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1448

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1448
  %eq47 = icmp eq i32 %35, 10, !dbg !1448
  br label %and.phi48, !dbg !1448

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1448
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1448

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1449
  %add51 = add i64 %36, 1, !dbg !1449
  store i64 %add51, ptr %index, align 8, !dbg !1449
  %37 = load i64, ptr %index, align 8, !dbg !1451
  %38 = load i64, ptr %len, align 8, !dbg !1451
  %eq52 = icmp eq i64 %37, %38, !dbg !1451
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1451

if.then53:                                        ; preds = %if.then50
  store i16 0, ptr %blockret, align 2, !dbg !1451
  br label %expr_block.exit158, !dbg !1451

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1452
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1452
  %40 = load ptr, ptr %string, align 8, !dbg !1452
  %41 = load i64, ptr %index, align 8, !dbg !1452
  %ge56 = icmp uge i64 %41, %39, !dbg !1452
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1452
  br i1 %42, label %panic57, label %checkok67, !dbg !1452

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1452
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 16, ptr %base_used, align 2, !dbg !1454
  %45 = load i64, ptr %index, align 8, !dbg !1456
  %add72 = add i64 %45, 1, !dbg !1456
  store i64 %add72, ptr %index, align 8, !dbg !1456
  br label %switch.exit78, !dbg !1456

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 2, ptr %base_used, align 2, !dbg !1457
  %46 = load i64, ptr %index, align 8, !dbg !1459
  %add74 = add i64 %46, 1, !dbg !1459
  store i64 %add74, ptr %index, align 8, !dbg !1459
  br label %switch.exit78, !dbg !1459

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 8, ptr %base_used, align 2, !dbg !1460
  %47 = load i64, ptr %index, align 8, !dbg !1462
  %add76 = add i64 %47, 1, !dbg !1462
  store i64 %add76, ptr %index, align 8, !dbg !1462
  br label %switch.exit78, !dbg !1462

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1463

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !1465
  %49 = load i64, ptr %index, align 8, !dbg !1465
  %eq79 = icmp eq i64 %48, %49, !dbg !1465
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1465

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1465
  br label %err_retblock, !dbg !1465

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1465

if.exit82:                                        ; preds = %if.exit81, %and.phi48
    #dbg_declare(ptr %value, !1466, !DIExpression(), !1467)
  store i16 0, ptr %value, align 2, !dbg !1467
  br label %loop.cond83, !dbg !1468

loop.cond83:                                      ; preds = %noerr_block156, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !1469
  %51 = load i64, ptr %len, align 8, !dbg !1469
  %neq = icmp ne i64 %50, %51, !dbg !1469
  br i1 %neq, label %loop.body84, label %loop.exit157, !dbg !1469

loop.body84:                                      ; preds = %loop.cond83
    #dbg_declare(ptr %c85, !1471, !DIExpression(), !1473)
    #dbg_declare(ptr %ch, !1474, !DIExpression(), !1476)
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1476
  %52 = load i64, ptr %ptradd87, align 8, !dbg !1476
  %53 = load ptr, ptr %string, align 8, !dbg !1476
  %54 = load i64, ptr %index, align 8, !dbg !1476
  %add88 = add i64 %54, 1, !dbg !1476
  store i64 %add88, ptr %index, align 8, !dbg !1476
  %ge89 = icmp uge i64 %54, %52, !dbg !1476
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1476
  br i1 %55, label %panic90, label %checkok100, !dbg !1476

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !1476
  %56 = load i8, ptr %ptradd101, align 1, !dbg !1476
  store i8 %56, ptr %ch, align 1, !dbg !1476
  %57 = load i16, ptr %base_used, align 2, !dbg !1477
  %zext = zext i16 %57 to i32, !dbg !1477
  %neq102 = icmp ne i32 16, %zext, !dbg !1477
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1477

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !1477
  %lt104 = icmp ult i8 %58, 65, !dbg !1477
  br label %or.phi105, !dbg !1477

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1477
  br i1 %val106, label %if.then107, label %if.exit110, !dbg !1477

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !1477
  %zext108 = zext i8 %59 to i32, !dbg !1477
  %sub = sub i32 %zext108, 48, !dbg !1477
  %trunc109 = trunc i32 %sub to i8, !dbg !1477
  store i8 %trunc109, ptr %blockret86, align 1, !dbg !1477
  br label %expr_block.exit, !dbg !1477

if.exit110:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !1478
  %le111 = icmp ule i8 %60, 70, !dbg !1478
  br i1 %le111, label %if.then112, label %if.exit117, !dbg !1478

if.then112:                                       ; preds = %if.exit110
  %61 = load i8, ptr %ch, align 1, !dbg !1478
  %zext113 = zext i8 %61 to i32, !dbg !1478
  %sub114 = sub i32 %zext113, 65, !dbg !1478
  %add115 = add i32 %sub114, 10, !dbg !1478
  %trunc116 = trunc i32 %add115 to i8, !dbg !1478
  store i8 %trunc116, ptr %blockret86, align 1, !dbg !1478
  br label %expr_block.exit, !dbg !1478

if.exit117:                                       ; preds = %if.exit110
  %62 = load i8, ptr %ch, align 1, !dbg !1479
  %lt118 = icmp ult i8 %62, 97, !dbg !1479
  br i1 %lt118, label %if.then119, label %if.exit120, !dbg !1479

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1479
  br label %guard_block, !dbg !1479

if.exit120:                                       ; preds = %if.exit117
  %63 = load i8, ptr %ch, align 1, !dbg !1480
  %gt121 = icmp ugt i8 %63, 102, !dbg !1480
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !1480

if.then122:                                       ; preds = %if.exit120
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1480
  br label %guard_block, !dbg !1480

if.exit123:                                       ; preds = %if.exit120
  %64 = load i8, ptr %ch, align 1, !dbg !1481
  %zext124 = zext i8 %64 to i32, !dbg !1481
  %sub125 = sub i32 %zext124, 97, !dbg !1481
  %add126 = add i32 %sub125, 10, !dbg !1481
  %trunc127 = trunc i32 %add126 to i8, !dbg !1481
  store i8 %trunc127, ptr %blockret86, align 1, !dbg !1481
  br label %expr_block.exit, !dbg !1481

expr_block.exit:                                  ; preds = %if.exit123, %if.then112, %if.then107
  br label %noerr_block, !dbg !1481

guard_block:                                      ; preds = %if.then122, %if.then119
  %65 = load i64, ptr %error_var, align 8, !dbg !1481
  store i64 %65, ptr %reterr, align 8, !dbg !1481
  br label %err_retblock, !dbg !1481

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !1481
  store i8 %66, ptr %c85, align 1, !dbg !1481
  %67 = load i8, ptr %c85, align 1, !dbg !1482
  %zext128 = zext i8 %67 to i16, !dbg !1482
  %68 = load i16, ptr %base_used, align 2, !dbg !1482
  %ge129 = icmp uge i16 %zext128, %68, !dbg !1482
  br i1 %ge129, label %if.then130, label %if.exit131, !dbg !1482

if.then130:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1482
  br label %err_retblock, !dbg !1482

if.exit131:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !1483
  %70 = trunc i8 %69 to i1, !dbg !1483
  br i1 %70, label %if.then134, label %if.exit143, !dbg !1483

if.then134:                                       ; preds = %if.exit131
    #dbg_declare(ptr %new_value, !1485, !DIExpression(), !1487)
  %71 = load i16, ptr %value, align 2, !dbg !1487
  %zext135 = zext i16 %71 to i32, !dbg !1487
  %72 = load i16, ptr %base_used, align 2, !dbg !1487
  %zext136 = zext i16 %72 to i32, !dbg !1487
  %mul = mul i32 %zext135, %zext136, !dbg !1487
  %73 = load i8, ptr %c85, align 1, !dbg !1487
  %zext137 = zext i8 %73 to i32, !dbg !1487
  %sub138 = sub i32 %mul, %zext137, !dbg !1487
  %trunc139 = trunc i32 %sub138 to i16, !dbg !1487
  store i16 %trunc139, ptr %new_value, align 2, !dbg !1487
  %74 = load i16, ptr %new_value, align 2, !dbg !1488
  %75 = load i16, ptr %value, align 2, !dbg !1488
  %gt140 = icmp ugt i16 %74, %75, !dbg !1488
  br i1 %gt140, label %if.then141, label %if.exit142, !dbg !1488

if.then141:                                       ; preds = %if.then134
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var132, align 8, !dbg !1488
  br label %guard_block155, !dbg !1488

if.exit142:                                       ; preds = %if.then134
  %76 = load i16, ptr %new_value, align 2, !dbg !1489
  store i16 %76, ptr %blockret133, align 2, !dbg !1489
  br label %expr_block.exit154, !dbg !1489

if.exit143:                                       ; preds = %if.exit131
    #dbg_declare(ptr %new_value144, !1490, !DIExpression(), !1491)
  %77 = load i16, ptr %value, align 2, !dbg !1491
  %zext145 = zext i16 %77 to i32, !dbg !1491
  %78 = load i16, ptr %base_used, align 2, !dbg !1491
  %zext146 = zext i16 %78 to i32, !dbg !1491
  %mul147 = mul i32 %zext145, %zext146, !dbg !1491
  %79 = load i8, ptr %c85, align 1, !dbg !1491
  %zext148 = zext i8 %79 to i32, !dbg !1491
  %add149 = add i32 %mul147, %zext148, !dbg !1491
  %trunc150 = trunc i32 %add149 to i16, !dbg !1491
  store i16 %trunc150, ptr %new_value144, align 2, !dbg !1491
  %80 = load i16, ptr %new_value144, align 2, !dbg !1492
  %81 = load i16, ptr %value, align 2, !dbg !1492
  %lt151 = icmp ult i16 %80, %81, !dbg !1492
  br i1 %lt151, label %if.then152, label %if.exit153, !dbg !1492

if.then152:                                       ; preds = %if.exit143
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var132, align 8, !dbg !1492
  br label %guard_block155, !dbg !1492

if.exit153:                                       ; preds = %if.exit143
  %82 = load i16, ptr %new_value144, align 2, !dbg !1493
  store i16 %82, ptr %blockret133, align 2, !dbg !1493
  br label %expr_block.exit154, !dbg !1493

expr_block.exit154:                               ; preds = %if.exit153, %if.exit142
  br label %noerr_block156, !dbg !1493

guard_block155:                                   ; preds = %if.then152, %if.then141
  %83 = load i64, ptr %error_var132, align 8, !dbg !1493
  store i64 %83, ptr %reterr, align 8, !dbg !1493
  br label %err_retblock, !dbg !1493

noerr_block156:                                   ; preds = %expr_block.exit154
  %84 = load i16, ptr %blockret133, align 2, !dbg !1493
  store i16 %84, ptr %value, align 2, !dbg !1493
  br label %loop.cond83, !dbg !1493

loop.exit157:                                     ; preds = %loop.cond83
  %85 = load i16, ptr %value, align 2, !dbg !1494
  store i16 %85, ptr %blockret, align 2, !dbg !1494
  br label %expr_block.exit158, !dbg !1494

expr_block.exit158:                               ; preds = %loop.exit157, %if.then53
  %86 = load i16, ptr %blockret, align 2, !dbg !1494
  store i16 %86, ptr %0, align 2, !dbg !1494
  ret i64 0, !dbg !1494

err_retblock:                                     ; preds = %guard_block155, %if.then130, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !1494
  ret i64 %87, !dbg !1494

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.70, i64 9 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !1437
  unreachable, !dbg !1437

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.70, i64 9 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 709, ptr align 8 %indirectarg42), !dbg !1448
  unreachable, !dbg !1448

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.70, i64 9 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 713, ptr align 8 %indirectarg66), !dbg !1452
  unreachable, !dbg !1452

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.70, i64 9 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 736, ptr align 8 %indirectarg99), !dbg !1476
  unreachable, !dbg !1476
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_uchar(ptr %0, ptr align 8 %1, i32 %2) #0 comdat !dbg !1495 {
entry:
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i8, align 1
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %indirectarg95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 16
  %indirectarg99 = alloca %"any[]", align 8
  %error_var131 = alloca i64, align 8
  %blockret132 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value143 = alloca i8, align 1
    #dbg_declare(ptr %1, !1498, !DIExpression(), !1499)
  store i32 %2, ptr %base, align 4
    #dbg_declare(ptr %base, !1500, !DIExpression(), !1499)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %1, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1501
  %le = icmp sle i32 %4, 10, !dbg !1501
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1501

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1501
  %gt = icmp sgt i32 %5, 1, !dbg !1501
  br label %and.phi, !dbg !1501

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1501
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1501

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1501
  %eq = icmp eq i32 %6, 16, !dbg !1501
  br label %or.phi, !dbg !1501

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1501
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1501

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.61, i64 79 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %indirectarg4, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 686), !dbg !1501
  unreachable, !dbg !1501

assert_ok:                                        ; preds = %or.phi
    #dbg_declare(ptr %len, !1504, !DIExpression(), !1505)
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1505
  %8 = load i64, ptr %ptradd, align 8, !dbg !1505
  store i64 %8, ptr %len, align 8, !dbg !1505
    #dbg_declare(ptr %index, !1506, !DIExpression(), !1507)
  store i64 0, ptr %index, align 8, !dbg !1507
    #dbg_declare(ptr %ptr, !1508, !DIExpression(), !1509)
  %9 = load ptr, ptr %string, align 8, !dbg !1509
  store ptr %9, ptr %ptr, align 8, !dbg !1509
  br label %loop.cond, !dbg !1510

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %10 = load i64, ptr %index, align 8, !dbg !1511
  %11 = load i64, ptr %len, align 8, !dbg !1511
  %lt = icmp ult i64 %10, %11, !dbg !1511
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1511

and.rhs5:                                         ; preds = %loop.cond
  %12 = load ptr, ptr %ptr, align 8, !dbg !1511
  %13 = load i64, ptr %index, align 8, !dbg !1511
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1511
  %14 = load i8, ptr %ptradd6, align 1
  store i8 %14, ptr %c, align 1
  %15 = load i8, ptr %c, align 1, !dbg !1513
  %eq7 = icmp eq i8 %15, 32, !dbg !1513
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1513

or.rhs8:                                          ; preds = %and.rhs5
  %16 = load i8, ptr %c, align 1, !dbg !1513
  %eq9 = icmp eq i8 %16, 9, !dbg !1513
  br label %or.phi10, !dbg !1513

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1513
  br label %and.phi12, !dbg !1513

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1513
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1513

loop.body:                                        ; preds = %and.phi12
  %17 = load i64, ptr %index, align 8, !dbg !1511
  %add = add i64 %17, 1, !dbg !1511
  store i64 %add, ptr %index, align 8, !dbg !1511
  br label %loop.cond, !dbg !1511

loop.exit:                                        ; preds = %and.phi12
  %18 = load i64, ptr %len, align 8, !dbg !1515
  %19 = load i64, ptr %index, align 8, !dbg !1515
  %eq14 = icmp eq i64 %18, %19, !dbg !1515
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1515

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1515
  br label %err_retblock, !dbg !1515

if.exit:                                          ; preds = %loop.exit
    #dbg_declare(ptr %is_negative, !1516, !DIExpression(), !1517)
  store i8 0, ptr %is_negative, align 1, !dbg !1517
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1518
  %20 = load i64, ptr %ptradd15, align 8, !dbg !1518
  %21 = load ptr, ptr %string, align 8, !dbg !1518
  %22 = load i64, ptr %index, align 8, !dbg !1518
  %ge = icmp uge i64 %22, %20, !dbg !1518
  %23 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1518
  br i1 %23, label %panic, label %checkok, !dbg !1518

checkok:                                          ; preds = %if.exit
  %ptradd22 = getelementptr inbounds i8, ptr %21, i64 %22, !dbg !1518
  %24 = load i8, ptr %ptradd22, align 1
  store i8 %24, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %25 = load i8, ptr %switch, align 1
  switch i8 %25, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then23, !dbg !1520

if.then23:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1520
  br label %err_retblock, !dbg !1520

switch.case26:                                    ; preds = %switch.entry
  %26 = load i64, ptr %index, align 8, !dbg !1522
  %add27 = add i64 %26, 1, !dbg !1522
  store i64 %add27, ptr %index, align 8, !dbg !1522
  br label %switch.exit, !dbg !1522

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1524

switch.exit:                                      ; preds = %switch.default, %switch.case26
  %27 = load i64, ptr %len, align 8, !dbg !1526
  %28 = load i64, ptr %index, align 8, !dbg !1526
  %eq28 = icmp eq i64 %27, %28, !dbg !1526
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1526

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1526
  br label %err_retblock, !dbg !1526

if.exit30:                                        ; preds = %switch.exit
    #dbg_declare(ptr %base_used, !1527, !DIExpression(), !1528)
  %29 = load i32, ptr %base1, align 4, !dbg !1528
  %trunc = trunc i32 %29 to i8, !dbg !1528
  store i8 %trunc, ptr %base_used, align 1, !dbg !1528
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1529
  %30 = load i64, ptr %ptradd31, align 8, !dbg !1529
  %31 = load ptr, ptr %string, align 8, !dbg !1529
  %32 = load i64, ptr %index, align 8, !dbg !1529
  %ge32 = icmp uge i64 %32, %30, !dbg !1529
  %33 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1529
  br i1 %33, label %panic33, label %checkok43, !dbg !1529

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %31, i64 %32, !dbg !1529
  %34 = load i8, ptr %ptradd44, align 1, !dbg !1529
  %eq45 = icmp eq i8 %34, 48, !dbg !1529
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1529

and.rhs46:                                        ; preds = %checkok43
  %35 = load i32, ptr %base1, align 4, !dbg !1529
  %eq47 = icmp eq i32 %35, 10, !dbg !1529
  br label %and.phi48, !dbg !1529

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1529
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1529

if.then50:                                        ; preds = %and.phi48
  %36 = load i64, ptr %index, align 8, !dbg !1530
  %add51 = add i64 %36, 1, !dbg !1530
  store i64 %add51, ptr %index, align 8, !dbg !1530
  %37 = load i64, ptr %index, align 8, !dbg !1532
  %38 = load i64, ptr %len, align 8, !dbg !1532
  %eq52 = icmp eq i64 %37, %38, !dbg !1532
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1532

if.then53:                                        ; preds = %if.then50
  store i8 0, ptr %blockret, align 1, !dbg !1532
  br label %expr_block.exit157, !dbg !1532

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1533
  %39 = load i64, ptr %ptradd55, align 8, !dbg !1533
  %40 = load ptr, ptr %string, align 8, !dbg !1533
  %41 = load i64, ptr %index, align 8, !dbg !1533
  %ge56 = icmp uge i64 %41, %39, !dbg !1533
  %42 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1533
  br i1 %42, label %panic57, label %checkok67, !dbg !1533

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !1533
  %43 = load i8, ptr %ptradd68, align 1
  store i8 %43, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %44 = load i8, ptr %switch69, align 1
  switch i8 %44, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 16, ptr %base_used, align 1, !dbg !1535
  %45 = load i64, ptr %index, align 8, !dbg !1537
  %add72 = add i64 %45, 1, !dbg !1537
  store i64 %add72, ptr %index, align 8, !dbg !1537
  br label %switch.exit78, !dbg !1537

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 2, ptr %base_used, align 1, !dbg !1538
  %46 = load i64, ptr %index, align 8, !dbg !1540
  %add74 = add i64 %46, 1, !dbg !1540
  store i64 %add74, ptr %index, align 8, !dbg !1540
  br label %switch.exit78, !dbg !1540

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 8, ptr %base_used, align 1, !dbg !1541
  %47 = load i64, ptr %index, align 8, !dbg !1543
  %add76 = add i64 %47, 1, !dbg !1543
  store i64 %add76, ptr %index, align 8, !dbg !1543
  br label %switch.exit78, !dbg !1543

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1544

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %48 = load i64, ptr %len, align 8, !dbg !1546
  %49 = load i64, ptr %index, align 8, !dbg !1546
  %eq79 = icmp eq i64 %48, %49, !dbg !1546
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1546

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1546
  br label %err_retblock, !dbg !1546

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1546

if.exit82:                                        ; preds = %if.exit81, %and.phi48
    #dbg_declare(ptr %value, !1547, !DIExpression(), !1548)
  store i8 0, ptr %value, align 1, !dbg !1548
  br label %loop.cond83, !dbg !1549

loop.cond83:                                      ; preds = %noerr_block155, %if.exit82
  %50 = load i64, ptr %index, align 8, !dbg !1550
  %51 = load i64, ptr %len, align 8, !dbg !1550
  %neq = icmp ne i64 %50, %51, !dbg !1550
  br i1 %neq, label %loop.body84, label %loop.exit156, !dbg !1550

loop.body84:                                      ; preds = %loop.cond83
    #dbg_declare(ptr %c85, !1552, !DIExpression(), !1554)
    #dbg_declare(ptr %ch, !1555, !DIExpression(), !1557)
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1557
  %52 = load i64, ptr %ptradd87, align 8, !dbg !1557
  %53 = load ptr, ptr %string, align 8, !dbg !1557
  %54 = load i64, ptr %index, align 8, !dbg !1557
  %add88 = add i64 %54, 1, !dbg !1557
  store i64 %add88, ptr %index, align 8, !dbg !1557
  %ge89 = icmp uge i64 %54, %52, !dbg !1557
  %55 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1557
  br i1 %55, label %panic90, label %checkok100, !dbg !1557

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %53, i64 %54, !dbg !1557
  %56 = load i8, ptr %ptradd101, align 1, !dbg !1557
  store i8 %56, ptr %ch, align 1, !dbg !1557
  %57 = load i8, ptr %base_used, align 1, !dbg !1558
  %zext = zext i8 %57 to i32, !dbg !1558
  %neq102 = icmp ne i32 16, %zext, !dbg !1558
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1558

or.rhs103:                                        ; preds = %checkok100
  %58 = load i8, ptr %ch, align 1, !dbg !1558
  %lt104 = icmp ult i8 %58, 65, !dbg !1558
  br label %or.phi105, !dbg !1558

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1558
  br i1 %val106, label %if.then107, label %if.exit110, !dbg !1558

if.then107:                                       ; preds = %or.phi105
  %59 = load i8, ptr %ch, align 1, !dbg !1558
  %zext108 = zext i8 %59 to i32, !dbg !1558
  %sub = sub i32 %zext108, 48, !dbg !1558
  %trunc109 = trunc i32 %sub to i8, !dbg !1558
  store i8 %trunc109, ptr %blockret86, align 1, !dbg !1558
  br label %expr_block.exit, !dbg !1558

if.exit110:                                       ; preds = %or.phi105
  %60 = load i8, ptr %ch, align 1, !dbg !1559
  %le111 = icmp ule i8 %60, 70, !dbg !1559
  br i1 %le111, label %if.then112, label %if.exit117, !dbg !1559

if.then112:                                       ; preds = %if.exit110
  %61 = load i8, ptr %ch, align 1, !dbg !1559
  %zext113 = zext i8 %61 to i32, !dbg !1559
  %sub114 = sub i32 %zext113, 65, !dbg !1559
  %add115 = add i32 %sub114, 10, !dbg !1559
  %trunc116 = trunc i32 %add115 to i8, !dbg !1559
  store i8 %trunc116, ptr %blockret86, align 1, !dbg !1559
  br label %expr_block.exit, !dbg !1559

if.exit117:                                       ; preds = %if.exit110
  %62 = load i8, ptr %ch, align 1, !dbg !1560
  %lt118 = icmp ult i8 %62, 97, !dbg !1560
  br i1 %lt118, label %if.then119, label %if.exit120, !dbg !1560

if.then119:                                       ; preds = %if.exit117
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1560
  br label %guard_block, !dbg !1560

if.exit120:                                       ; preds = %if.exit117
  %63 = load i8, ptr %ch, align 1, !dbg !1561
  %gt121 = icmp ugt i8 %63, 102, !dbg !1561
  br i1 %gt121, label %if.then122, label %if.exit123, !dbg !1561

if.then122:                                       ; preds = %if.exit120
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1561
  br label %guard_block, !dbg !1561

if.exit123:                                       ; preds = %if.exit120
  %64 = load i8, ptr %ch, align 1, !dbg !1562
  %zext124 = zext i8 %64 to i32, !dbg !1562
  %sub125 = sub i32 %zext124, 97, !dbg !1562
  %add126 = add i32 %sub125, 10, !dbg !1562
  %trunc127 = trunc i32 %add126 to i8, !dbg !1562
  store i8 %trunc127, ptr %blockret86, align 1, !dbg !1562
  br label %expr_block.exit, !dbg !1562

expr_block.exit:                                  ; preds = %if.exit123, %if.then112, %if.then107
  br label %noerr_block, !dbg !1562

guard_block:                                      ; preds = %if.then122, %if.then119
  %65 = load i64, ptr %error_var, align 8, !dbg !1562
  store i64 %65, ptr %reterr, align 8, !dbg !1562
  br label %err_retblock, !dbg !1562

noerr_block:                                      ; preds = %expr_block.exit
  %66 = load i8, ptr %blockret86, align 1, !dbg !1562
  store i8 %66, ptr %c85, align 1, !dbg !1562
  %67 = load i8, ptr %c85, align 1, !dbg !1563
  %68 = load i8, ptr %base_used, align 1, !dbg !1563
  %ge128 = icmp uge i8 %67, %68, !dbg !1563
  br i1 %ge128, label %if.then129, label %if.exit130, !dbg !1563

if.then129:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1563
  br label %err_retblock, !dbg !1563

if.exit130:                                       ; preds = %noerr_block
  %69 = load i8, ptr %is_negative, align 1, !dbg !1564
  %70 = trunc i8 %69 to i1, !dbg !1564
  br i1 %70, label %if.then133, label %if.exit142, !dbg !1564

if.then133:                                       ; preds = %if.exit130
    #dbg_declare(ptr %new_value, !1566, !DIExpression(), !1568)
  %71 = load i8, ptr %value, align 1, !dbg !1568
  %zext134 = zext i8 %71 to i32, !dbg !1568
  %72 = load i8, ptr %base_used, align 1, !dbg !1568
  %zext135 = zext i8 %72 to i32, !dbg !1568
  %mul = mul i32 %zext134, %zext135, !dbg !1568
  %73 = load i8, ptr %c85, align 1, !dbg !1568
  %zext136 = zext i8 %73 to i32, !dbg !1568
  %sub137 = sub i32 %mul, %zext136, !dbg !1568
  %trunc138 = trunc i32 %sub137 to i8, !dbg !1568
  store i8 %trunc138, ptr %new_value, align 1, !dbg !1568
  %74 = load i8, ptr %new_value, align 1, !dbg !1569
  %75 = load i8, ptr %value, align 1, !dbg !1569
  %gt139 = icmp ugt i8 %74, %75, !dbg !1569
  br i1 %gt139, label %if.then140, label %if.exit141, !dbg !1569

if.then140:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !1569
  br label %guard_block154, !dbg !1569

if.exit141:                                       ; preds = %if.then133
  %76 = load i8, ptr %new_value, align 1, !dbg !1570
  store i8 %76, ptr %blockret132, align 1, !dbg !1570
  br label %expr_block.exit153, !dbg !1570

if.exit142:                                       ; preds = %if.exit130
    #dbg_declare(ptr %new_value143, !1571, !DIExpression(), !1572)
  %77 = load i8, ptr %value, align 1, !dbg !1572
  %zext144 = zext i8 %77 to i32, !dbg !1572
  %78 = load i8, ptr %base_used, align 1, !dbg !1572
  %zext145 = zext i8 %78 to i32, !dbg !1572
  %mul146 = mul i32 %zext144, %zext145, !dbg !1572
  %79 = load i8, ptr %c85, align 1, !dbg !1572
  %zext147 = zext i8 %79 to i32, !dbg !1572
  %add148 = add i32 %mul146, %zext147, !dbg !1572
  %trunc149 = trunc i32 %add148 to i8, !dbg !1572
  store i8 %trunc149, ptr %new_value143, align 1, !dbg !1572
  %80 = load i8, ptr %new_value143, align 1, !dbg !1573
  %81 = load i8, ptr %value, align 1, !dbg !1573
  %lt150 = icmp ult i8 %80, %81, !dbg !1573
  br i1 %lt150, label %if.then151, label %if.exit152, !dbg !1573

if.then151:                                       ; preds = %if.exit142
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !1573
  br label %guard_block154, !dbg !1573

if.exit152:                                       ; preds = %if.exit142
  %82 = load i8, ptr %new_value143, align 1, !dbg !1574
  store i8 %82, ptr %blockret132, align 1, !dbg !1574
  br label %expr_block.exit153, !dbg !1574

expr_block.exit153:                               ; preds = %if.exit152, %if.exit141
  br label %noerr_block155, !dbg !1574

guard_block154:                                   ; preds = %if.then151, %if.then140
  %83 = load i64, ptr %error_var131, align 8, !dbg !1574
  store i64 %83, ptr %reterr, align 8, !dbg !1574
  br label %err_retblock, !dbg !1574

noerr_block155:                                   ; preds = %expr_block.exit153
  %84 = load i8, ptr %blockret132, align 1, !dbg !1574
  store i8 %84, ptr %value, align 1, !dbg !1574
  br label %loop.cond83, !dbg !1574

loop.exit156:                                     ; preds = %loop.cond83
  %85 = load i8, ptr %value, align 1, !dbg !1575
  store i8 %85, ptr %blockret, align 1, !dbg !1575
  br label %expr_block.exit157, !dbg !1575

expr_block.exit157:                               ; preds = %loop.exit156, %if.then53
  %86 = load i8, ptr %blockret, align 1, !dbg !1575
  store i8 %86, ptr %0, align 1, !dbg !1575
  ret i64 0, !dbg !1575

err_retblock:                                     ; preds = %guard_block154, %if.then129, %guard_block, %if.then80, %if.then29, %if.then23, %if.then
  %87 = load i64, ptr %reterr, align 8, !dbg !1575
  ret i64 %87, !dbg !1575

panic:                                            ; preds = %if.exit
  store i64 %20, ptr %taddr, align 8
  %88 = insertvalue %any undef, ptr %taddr, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr16, align 8
  %90 = insertvalue %any undef, ptr %taddr16, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %indirectarg19, align 8
  store %any %89, ptr %varargslots, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %91, ptr %ptradd20, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 696, ptr align 8 %indirectarg21), !dbg !1518
  unreachable, !dbg !1518

panic33:                                          ; preds = %if.exit30
  store i64 %30, ptr %taddr34, align 8
  %93 = insertvalue %any undef, ptr %taddr34, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr35, align 8
  %95 = insertvalue %any undef, ptr %taddr35, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %indirectarg38, align 8
  store %any %94, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %96, ptr %ptradd40, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 709, ptr align 8 %indirectarg42), !dbg !1529
  unreachable, !dbg !1529

panic57:                                          ; preds = %if.exit54
  store i64 %39, ptr %taddr58, align 8
  %98 = insertvalue %any undef, ptr %taddr58, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr59, align 8
  %100 = insertvalue %any undef, ptr %taddr59, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %indirectarg62, align 8
  store %any %99, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %101, ptr %ptradd64, align 16
  %102 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 713, ptr align 8 %indirectarg66), !dbg !1533
  unreachable, !dbg !1533

panic90:                                          ; preds = %loop.body84
  store i64 %52, ptr %taddr91, align 8
  %103 = insertvalue %any undef, ptr %taddr91, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr92, align 8
  %105 = insertvalue %any undef, ptr %taddr92, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg94, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %indirectarg95, align 8
  store %any %104, ptr %varargslots96, align 16
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %106, ptr %ptradd97, align 16
  %107 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp98", ptr %indirectarg99, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, ptr align 8 %indirectarg95, i32 736, ptr align 8 %indirectarg99), !dbg !1557
  unreachable, !dbg !1557
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_double(ptr %0, ptr align 8 %1) #0 comdat !dbg !1576 {
entry:
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca double, align 8
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx54 = alloca i64, align 8
  %cmp.idx68 = alloca i64, align 8
  %cmp.idx80 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %indirectarg135 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %varargslots138 = alloca [2 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %chars145 = alloca %"char[]", align 8
  %sign146 = alloca i32, align 4
  %blockret147 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %varargslots158 = alloca [2 x %any], align 16
  %indirectarg161 = alloca %"any[]", align 8
  %taddr184 = alloca i64, align 8
  %taddr185 = alloca i64, align 8
  %indirectarg186 = alloca %"char[]", align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %varargslots189 = alloca [2 x %any], align 16
  %indirectarg192 = alloca %"any[]", align 8
  %taddr207 = alloca i64, align 8
  %taddr208 = alloca i64, align 8
  %indirectarg209 = alloca %"char[]", align 8
  %indirectarg210 = alloca %"char[]", align 8
  %indirectarg211 = alloca %"char[]", align 8
  %varargslots212 = alloca [2 x %any], align 16
  %indirectarg215 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret246 = alloca i32, align 4
  %switch256 = alloca i8, align 1
  %taddr288 = alloca i64, align 8
  %taddr289 = alloca i64, align 8
  %indirectarg290 = alloca %"char[]", align 8
  %indirectarg291 = alloca %"char[]", align 8
  %indirectarg292 = alloca %"char[]", align 8
  %varargslots293 = alloca [2 x %any], align 16
  %indirectarg296 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr321 = alloca i64, align 8
  %taddr322 = alloca i64, align 8
  %indirectarg323 = alloca %"char[]", align 8
  %indirectarg324 = alloca %"char[]", align 8
  %indirectarg325 = alloca %"char[]", align 8
  %varargslots326 = alloca [2 x %any], align 16
  %indirectarg329 = alloca %"any[]", align 8
  %taddr332 = alloca i64, align 8
  %indirectarg333 = alloca %"char[]", align 8
  %indirectarg334 = alloca %"char[]", align 8
  %indirectarg335 = alloca %"char[]", align 8
  %varargslots336 = alloca [1 x %any], align 16
  %indirectarg338 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg342 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x384 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x388 = alloca double, align 8
  %y389 = alloca double, align 8
  %x413 = alloca double, align 8
  %n415 = alloca i32, align 4
  %chars419 = alloca %"char[]", align 8
  %sign420 = alloca i32, align 4
  %blockret421 = alloca double, align 8
  %indirectarg424 = alloca %"char[]", align 8
  %indirectarg425 = alloca %"char[]", align 8
  %indirectarg426 = alloca %"char[]", align 8
  %x427 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index428 = alloca i64, align 8
  %got_digit429 = alloca i8, align 1
  %taddr433 = alloca i64, align 8
  %taddr434 = alloca i64, align 8
  %indirectarg435 = alloca %"char[]", align 8
  %indirectarg436 = alloca %"char[]", align 8
  %indirectarg437 = alloca %"char[]", align 8
  %varargslots438 = alloca [2 x %any], align 16
  %indirectarg441 = alloca %"any[]", align 8
  %got_rad444 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc445 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len446 = alloca i64, align 8
  %last_char448 = alloca i64, align 8
  %indirectarg452 = alloca %"char[]", align 8
  %indirectarg453 = alloca %"char[]", align 8
  %indirectarg454 = alloca %"char[]", align 8
  %c456 = alloca i8, align 1
  %taddr461 = alloca i64, align 8
  %taddr462 = alloca i64, align 8
  %indirectarg463 = alloca %"char[]", align 8
  %indirectarg464 = alloca %"char[]", align 8
  %indirectarg465 = alloca %"char[]", align 8
  %varargslots466 = alloca [2 x %any], align 16
  %indirectarg469 = alloca %"any[]", align 8
  %taddr497 = alloca i64, align 8
  %taddr498 = alloca i64, align 8
  %indirectarg499 = alloca %"char[]", align 8
  %indirectarg500 = alloca %"char[]", align 8
  %indirectarg501 = alloca %"char[]", align 8
  %varargslots502 = alloca [2 x %any], align 16
  %indirectarg505 = alloca %"any[]", align 8
  %taddr520 = alloca i64, align 8
  %taddr521 = alloca i64, align 8
  %indirectarg522 = alloca %"char[]", align 8
  %indirectarg523 = alloca %"char[]", align 8
  %indirectarg524 = alloca %"char[]", align 8
  %varargslots525 = alloca [2 x %any], align 16
  %indirectarg528 = alloca %"any[]", align 8
  %switch548 = alloca i8, align 1
  %taddr568 = alloca i64, align 8
  %indirectarg569 = alloca %"char[]", align 8
  %indirectarg570 = alloca %"char[]", align 8
  %indirectarg571 = alloca %"char[]", align 8
  %varargslots572 = alloca [1 x %any], align 16
  %indirectarg574 = alloca %"any[]", align 8
  %taddr578 = alloca i64, align 8
  %taddr579 = alloca i64, align 8
  %indirectarg580 = alloca %"char[]", align 8
  %indirectarg581 = alloca %"char[]", align 8
  %indirectarg582 = alloca %"char[]", align 8
  %varargslots583 = alloca [2 x %any], align 16
  %indirectarg586 = alloca %"any[]", align 8
  %taddr591 = alloca i64, align 8
  %indirectarg592 = alloca %"char[]", align 8
  %indirectarg593 = alloca %"char[]", align 8
  %indirectarg594 = alloca %"char[]", align 8
  %varargslots595 = alloca [1 x %any], align 16
  %indirectarg597 = alloca %"any[]", align 8
  %taddr601 = alloca i64, align 8
  %taddr602 = alloca i64, align 8
  %indirectarg603 = alloca %"char[]", align 8
  %indirectarg604 = alloca %"char[]", align 8
  %indirectarg605 = alloca %"char[]", align 8
  %varargslots606 = alloca [2 x %any], align 16
  %indirectarg609 = alloca %"any[]", align 8
  %taddr620 = alloca i64, align 8
  %indirectarg621 = alloca %"char[]", align 8
  %indirectarg622 = alloca %"char[]", align 8
  %indirectarg623 = alloca %"char[]", align 8
  %varargslots624 = alloca [1 x %any], align 16
  %indirectarg626 = alloca %"any[]", align 8
  %taddr630 = alloca i64, align 8
  %taddr631 = alloca i64, align 8
  %indirectarg632 = alloca %"char[]", align 8
  %indirectarg633 = alloca %"char[]", align 8
  %indirectarg634 = alloca %"char[]", align 8
  %varargslots635 = alloca [2 x %any], align 16
  %indirectarg638 = alloca %"any[]", align 8
  %indirectarg662 = alloca %"char[]", align 8
  %indirectarg663 = alloca %"char[]", align 8
  %indirectarg664 = alloca %"char[]", align 8
  %taddr670 = alloca i64, align 8
  %taddr671 = alloca i64, align 8
  %indirectarg672 = alloca %"char[]", align 8
  %indirectarg673 = alloca %"char[]", align 8
  %indirectarg674 = alloca %"char[]", align 8
  %varargslots675 = alloca [2 x %any], align 16
  %indirectarg678 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr700 = alloca i64, align 8
  %taddr701 = alloca i64, align 8
  %indirectarg702 = alloca %"char[]", align 8
  %indirectarg703 = alloca %"char[]", align 8
  %indirectarg704 = alloca %"char[]", align 8
  %varargslots705 = alloca [2 x %any], align 16
  %indirectarg708 = alloca %"any[]", align 8
  %taddr712 = alloca i64, align 8
  %indirectarg713 = alloca %"char[]", align 8
  %indirectarg714 = alloca %"char[]", align 8
  %indirectarg715 = alloca %"char[]", align 8
  %varargslots716 = alloca [1 x %any], align 16
  %indirectarg718 = alloca %"any[]", align 8
  %retparam722 = alloca i64, align 8
  %indirectarg723 = alloca %"char[]", align 8
  %error_var727 = alloca i64, align 8
  %taddr773 = alloca i64, align 8
  %indirectarg774 = alloca %"char[]", align 8
  %indirectarg775 = alloca %"char[]", align 8
  %indirectarg776 = alloca %"char[]", align 8
  %varargslots777 = alloca [1 x %any], align 16
  %indirectarg779 = alloca %"any[]", align 8
  %taddr783 = alloca i64, align 8
  %taddr784 = alloca i64, align 8
  %indirectarg785 = alloca %"char[]", align 8
  %indirectarg786 = alloca %"char[]", align 8
  %indirectarg787 = alloca %"char[]", align 8
  %varargslots788 = alloca [2 x %any], align 16
  %indirectarg791 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2799 = alloca i32, align 4
  %rp800 = alloca i64, align 8
  %taddr825 = alloca i64, align 8
  %indirectarg826 = alloca %"char[]", align 8
  %indirectarg827 = alloca %"char[]", align 8
  %indirectarg828 = alloca %"char[]", align 8
  %varargslots829 = alloca [1 x %any], align 16
  %indirectarg831 = alloca %"any[]", align 8
  %taddr835 = alloca i64, align 8
  %taddr836 = alloca i64, align 8
  %indirectarg837 = alloca %"char[]", align 8
  %indirectarg838 = alloca %"char[]", align 8
  %indirectarg839 = alloca %"char[]", align 8
  %varargslots840 = alloca [2 x %any], align 16
  %indirectarg843 = alloca %"any[]", align 8
  %indirectarg848 = alloca %"char[]", align 8
  %indirectarg849 = alloca %"char[]", align 8
  %indirectarg850 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr861 = alloca i32, align 4
  %indirectarg862 = alloca %"char[]", align 8
  %indirectarg863 = alloca %"char[]", align 8
  %indirectarg864 = alloca %"char[]", align 8
  %varargslots865 = alloca [1 x %any], align 16
  %indirectarg867 = alloca %"any[]", align 8
  %taddr880 = alloca i64, align 8
  %indirectarg881 = alloca %"char[]", align 8
  %indirectarg882 = alloca %"char[]", align 8
  %indirectarg883 = alloca %"char[]", align 8
  %varargslots884 = alloca [1 x %any], align 16
  %indirectarg886 = alloca %"any[]", align 8
  %taddr890 = alloca i64, align 8
  %taddr891 = alloca i64, align 8
  %indirectarg892 = alloca %"char[]", align 8
  %indirectarg893 = alloca %"char[]", align 8
  %indirectarg894 = alloca %"char[]", align 8
  %varargslots895 = alloca [2 x %any], align 16
  %indirectarg898 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr915 = alloca i64, align 8
  %indirectarg916 = alloca %"char[]", align 8
  %indirectarg917 = alloca %"char[]", align 8
  %indirectarg918 = alloca %"char[]", align 8
  %varargslots919 = alloca [1 x %any], align 16
  %indirectarg921 = alloca %"any[]", align 8
  %taddr925 = alloca i64, align 8
  %taddr926 = alloca i64, align 8
  %indirectarg927 = alloca %"char[]", align 8
  %indirectarg928 = alloca %"char[]", align 8
  %indirectarg929 = alloca %"char[]", align 8
  %varargslots930 = alloca [2 x %any], align 16
  %indirectarg933 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr942 = alloca i64, align 8
  %indirectarg943 = alloca %"char[]", align 8
  %indirectarg944 = alloca %"char[]", align 8
  %indirectarg945 = alloca %"char[]", align 8
  %varargslots946 = alloca [1 x %any], align 16
  %indirectarg948 = alloca %"any[]", align 8
  %taddr952 = alloca i64, align 8
  %taddr953 = alloca i64, align 8
  %indirectarg954 = alloca %"char[]", align 8
  %indirectarg955 = alloca %"char[]", align 8
  %indirectarg956 = alloca %"char[]", align 8
  %varargslots957 = alloca [2 x %any], align 16
  %indirectarg960 = alloca %"any[]", align 8
  %indirectarg965 = alloca %"char[]", align 8
  %indirectarg966 = alloca %"char[]", align 8
  %indirectarg967 = alloca %"char[]", align 8
  %taddr973 = alloca i64, align 8
  %indirectarg974 = alloca %"char[]", align 8
  %indirectarg975 = alloca %"char[]", align 8
  %indirectarg976 = alloca %"char[]", align 8
  %varargslots977 = alloca [1 x %any], align 16
  %indirectarg979 = alloca %"any[]", align 8
  %taddr983 = alloca i64, align 8
  %taddr984 = alloca i64, align 8
  %indirectarg985 = alloca %"char[]", align 8
  %indirectarg986 = alloca %"char[]", align 8
  %indirectarg987 = alloca %"char[]", align 8
  %varargslots988 = alloca [2 x %any], align 16
  %indirectarg991 = alloca %"any[]", align 8
  %taddr997 = alloca i64, align 8
  %indirectarg998 = alloca %"char[]", align 8
  %indirectarg999 = alloca %"char[]", align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %varargslots1001 = alloca [1 x %any], align 16
  %indirectarg1003 = alloca %"any[]", align 8
  %taddr1007 = alloca i64, align 8
  %taddr1008 = alloca i64, align 8
  %indirectarg1009 = alloca %"char[]", align 8
  %indirectarg1010 = alloca %"char[]", align 8
  %indirectarg1011 = alloca %"char[]", align 8
  %varargslots1012 = alloca [2 x %any], align 16
  %indirectarg1015 = alloca %"any[]", align 8
  %indirectarg1020 = alloca %"char[]", align 8
  %indirectarg1021 = alloca %"char[]", align 8
  %indirectarg1022 = alloca %"char[]", align 8
  %indirectarg1027 = alloca %"char[]", align 8
  %indirectarg1028 = alloca %"char[]", align 8
  %indirectarg1029 = alloca %"char[]", align 8
  %taddr1038 = alloca i64, align 8
  %indirectarg1039 = alloca %"char[]", align 8
  %indirectarg1040 = alloca %"char[]", align 8
  %indirectarg1041 = alloca %"char[]", align 8
  %varargslots1042 = alloca [1 x %any], align 16
  %indirectarg1044 = alloca %"any[]", align 8
  %taddr1048 = alloca i64, align 8
  %taddr1049 = alloca i64, align 8
  %indirectarg1050 = alloca %"char[]", align 8
  %indirectarg1051 = alloca %"char[]", align 8
  %indirectarg1052 = alloca %"char[]", align 8
  %varargslots1053 = alloca [2 x %any], align 16
  %indirectarg1056 = alloca %"any[]", align 8
  %taddr1075 = alloca i64, align 8
  %indirectarg1076 = alloca %"char[]", align 8
  %indirectarg1077 = alloca %"char[]", align 8
  %indirectarg1078 = alloca %"char[]", align 8
  %varargslots1079 = alloca [1 x %any], align 16
  %indirectarg1081 = alloca %"any[]", align 8
  %taddr1085 = alloca i64, align 8
  %taddr1086 = alloca i64, align 8
  %indirectarg1087 = alloca %"char[]", align 8
  %indirectarg1088 = alloca %"char[]", align 8
  %indirectarg1089 = alloca %"char[]", align 8
  %varargslots1090 = alloca [2 x %any], align 16
  %indirectarg1093 = alloca %"any[]", align 8
  %taddr1108 = alloca i64, align 8
  %indirectarg1109 = alloca %"char[]", align 8
  %indirectarg1110 = alloca %"char[]", align 8
  %indirectarg1111 = alloca %"char[]", align 8
  %varargslots1112 = alloca [1 x %any], align 16
  %indirectarg1114 = alloca %"any[]", align 8
  %taddr1118 = alloca i64, align 8
  %taddr1119 = alloca i64, align 8
  %indirectarg1120 = alloca %"char[]", align 8
  %indirectarg1121 = alloca %"char[]", align 8
  %indirectarg1122 = alloca %"char[]", align 8
  %varargslots1123 = alloca [2 x %any], align 16
  %indirectarg1126 = alloca %"any[]", align 8
  %carry1135 = alloca i32, align 4
  %tmp1140 = alloca i64, align 8
  %taddr1144 = alloca i64, align 8
  %indirectarg1145 = alloca %"char[]", align 8
  %indirectarg1146 = alloca %"char[]", align 8
  %indirectarg1147 = alloca %"char[]", align 8
  %varargslots1148 = alloca [1 x %any], align 16
  %indirectarg1150 = alloca %"any[]", align 8
  %taddr1154 = alloca i64, align 8
  %taddr1155 = alloca i64, align 8
  %indirectarg1156 = alloca %"char[]", align 8
  %indirectarg1157 = alloca %"char[]", align 8
  %indirectarg1158 = alloca %"char[]", align 8
  %varargslots1159 = alloca [2 x %any], align 16
  %indirectarg1162 = alloca %"any[]", align 8
  %taddr1175 = alloca i64, align 8
  %indirectarg1176 = alloca %"char[]", align 8
  %indirectarg1177 = alloca %"char[]", align 8
  %indirectarg1178 = alloca %"char[]", align 8
  %varargslots1179 = alloca [1 x %any], align 16
  %indirectarg1181 = alloca %"any[]", align 8
  %taddr1185 = alloca i64, align 8
  %taddr1186 = alloca i64, align 8
  %indirectarg1187 = alloca %"char[]", align 8
  %indirectarg1188 = alloca %"char[]", align 8
  %indirectarg1189 = alloca %"char[]", align 8
  %varargslots1190 = alloca [2 x %any], align 16
  %indirectarg1193 = alloca %"any[]", align 8
  %taddr1202 = alloca i64, align 8
  %indirectarg1203 = alloca %"char[]", align 8
  %indirectarg1204 = alloca %"char[]", align 8
  %indirectarg1205 = alloca %"char[]", align 8
  %varargslots1206 = alloca [1 x %any], align 16
  %indirectarg1208 = alloca %"any[]", align 8
  %taddr1212 = alloca i64, align 8
  %taddr1213 = alloca i64, align 8
  %indirectarg1214 = alloca %"char[]", align 8
  %indirectarg1215 = alloca %"char[]", align 8
  %indirectarg1216 = alloca %"char[]", align 8
  %varargslots1217 = alloca [2 x %any], align 16
  %indirectarg1220 = alloca %"any[]", align 8
  %taddr1236 = alloca i64, align 8
  %indirectarg1237 = alloca %"char[]", align 8
  %indirectarg1238 = alloca %"char[]", align 8
  %indirectarg1239 = alloca %"char[]", align 8
  %varargslots1240 = alloca [1 x %any], align 16
  %indirectarg1242 = alloca %"any[]", align 8
  %taddr1246 = alloca i64, align 8
  %taddr1247 = alloca i64, align 8
  %indirectarg1248 = alloca %"char[]", align 8
  %indirectarg1249 = alloca %"char[]", align 8
  %indirectarg1250 = alloca %"char[]", align 8
  %varargslots1251 = alloca [2 x %any], align 16
  %indirectarg1254 = alloca %"any[]", align 8
  %taddr1282 = alloca i64, align 8
  %indirectarg1283 = alloca %"char[]", align 8
  %indirectarg1284 = alloca %"char[]", align 8
  %indirectarg1285 = alloca %"char[]", align 8
  %varargslots1286 = alloca [1 x %any], align 16
  %indirectarg1288 = alloca %"any[]", align 8
  %taddr1292 = alloca i64, align 8
  %taddr1293 = alloca i64, align 8
  %indirectarg1294 = alloca %"char[]", align 8
  %indirectarg1295 = alloca %"char[]", align 8
  %indirectarg1296 = alloca %"char[]", align 8
  %varargslots1297 = alloca [2 x %any], align 16
  %indirectarg1300 = alloca %"any[]", align 8
  %taddr1306 = alloca i64, align 8
  %indirectarg1307 = alloca %"char[]", align 8
  %indirectarg1308 = alloca %"char[]", align 8
  %indirectarg1309 = alloca %"char[]", align 8
  %varargslots1310 = alloca [1 x %any], align 16
  %indirectarg1312 = alloca %"any[]", align 8
  %taddr1316 = alloca i64, align 8
  %taddr1317 = alloca i64, align 8
  %indirectarg1318 = alloca %"char[]", align 8
  %indirectarg1319 = alloca %"char[]", align 8
  %indirectarg1320 = alloca %"char[]", align 8
  %varargslots1321 = alloca [2 x %any], align 16
  %indirectarg1324 = alloca %"any[]", align 8
  %taddr1332 = alloca i64, align 8
  %indirectarg1333 = alloca %"char[]", align 8
  %indirectarg1334 = alloca %"char[]", align 8
  %indirectarg1335 = alloca %"char[]", align 8
  %varargslots1336 = alloca [1 x %any], align 16
  %indirectarg1338 = alloca %"any[]", align 8
  %taddr1342 = alloca i64, align 8
  %taddr1343 = alloca i64, align 8
  %indirectarg1344 = alloca %"char[]", align 8
  %indirectarg1345 = alloca %"char[]", align 8
  %indirectarg1346 = alloca %"char[]", align 8
  %varargslots1347 = alloca [2 x %any], align 16
  %indirectarg1350 = alloca %"any[]", align 8
  %carry1356 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1367 = alloca i64, align 8
  %indirectarg1368 = alloca %"char[]", align 8
  %indirectarg1369 = alloca %"char[]", align 8
  %indirectarg1370 = alloca %"char[]", align 8
  %varargslots1371 = alloca [1 x %any], align 16
  %indirectarg1373 = alloca %"any[]", align 8
  %taddr1377 = alloca i64, align 8
  %taddr1378 = alloca i64, align 8
  %indirectarg1379 = alloca %"char[]", align 8
  %indirectarg1380 = alloca %"char[]", align 8
  %indirectarg1381 = alloca %"char[]", align 8
  %varargslots1382 = alloca [2 x %any], align 16
  %indirectarg1385 = alloca %"any[]", align 8
  %taddr1391 = alloca i64, align 8
  %indirectarg1392 = alloca %"char[]", align 8
  %indirectarg1393 = alloca %"char[]", align 8
  %indirectarg1394 = alloca %"char[]", align 8
  %varargslots1395 = alloca [1 x %any], align 16
  %indirectarg1397 = alloca %"any[]", align 8
  %taddr1401 = alloca i64, align 8
  %taddr1402 = alloca i64, align 8
  %indirectarg1403 = alloca %"char[]", align 8
  %indirectarg1404 = alloca %"char[]", align 8
  %indirectarg1405 = alloca %"char[]", align 8
  %varargslots1406 = alloca [2 x %any], align 16
  %indirectarg1409 = alloca %"any[]", align 8
  %taddr1422 = alloca i64, align 8
  %indirectarg1423 = alloca %"char[]", align 8
  %indirectarg1424 = alloca %"char[]", align 8
  %indirectarg1425 = alloca %"char[]", align 8
  %varargslots1426 = alloca [1 x %any], align 16
  %indirectarg1428 = alloca %"any[]", align 8
  %taddr1432 = alloca i64, align 8
  %taddr1433 = alloca i64, align 8
  %indirectarg1434 = alloca %"char[]", align 8
  %indirectarg1435 = alloca %"char[]", align 8
  %indirectarg1436 = alloca %"char[]", align 8
  %varargslots1437 = alloca [2 x %any], align 16
  %indirectarg1440 = alloca %"any[]", align 8
  %taddr1446 = alloca i64, align 8
  %indirectarg1447 = alloca %"char[]", align 8
  %indirectarg1448 = alloca %"char[]", align 8
  %indirectarg1449 = alloca %"char[]", align 8
  %varargslots1450 = alloca [1 x %any], align 16
  %indirectarg1452 = alloca %"any[]", align 8
  %taddr1456 = alloca i64, align 8
  %taddr1457 = alloca i64, align 8
  %indirectarg1458 = alloca %"char[]", align 8
  %indirectarg1459 = alloca %"char[]", align 8
  %indirectarg1460 = alloca %"char[]", align 8
  %varargslots1461 = alloca [2 x %any], align 16
  %indirectarg1464 = alloca %"any[]", align 8
  %tmp1486 = alloca i32, align 4
  %taddr1490 = alloca i64, align 8
  %indirectarg1491 = alloca %"char[]", align 8
  %indirectarg1492 = alloca %"char[]", align 8
  %indirectarg1493 = alloca %"char[]", align 8
  %varargslots1494 = alloca [1 x %any], align 16
  %indirectarg1496 = alloca %"any[]", align 8
  %taddr1500 = alloca i64, align 8
  %taddr1501 = alloca i64, align 8
  %indirectarg1502 = alloca %"char[]", align 8
  %indirectarg1503 = alloca %"char[]", align 8
  %indirectarg1504 = alloca %"char[]", align 8
  %varargslots1505 = alloca [2 x %any], align 16
  %indirectarg1508 = alloca %"any[]", align 8
  %taddr1512 = alloca i32, align 4
  %indirectarg1513 = alloca %"char[]", align 8
  %indirectarg1514 = alloca %"char[]", align 8
  %indirectarg1515 = alloca %"char[]", align 8
  %varargslots1516 = alloca [1 x %any], align 16
  %indirectarg1518 = alloca %"any[]", align 8
  %taddr1522 = alloca i32, align 4
  %indirectarg1523 = alloca %"char[]", align 8
  %indirectarg1524 = alloca %"char[]", align 8
  %indirectarg1525 = alloca %"char[]", align 8
  %varargslots1526 = alloca [1 x %any], align 16
  %indirectarg1528 = alloca %"any[]", align 8
  %taddr1536 = alloca i64, align 8
  %indirectarg1537 = alloca %"char[]", align 8
  %indirectarg1538 = alloca %"char[]", align 8
  %indirectarg1539 = alloca %"char[]", align 8
  %varargslots1540 = alloca [1 x %any], align 16
  %indirectarg1542 = alloca %"any[]", align 8
  %taddr1546 = alloca i64, align 8
  %taddr1547 = alloca i64, align 8
  %indirectarg1548 = alloca %"char[]", align 8
  %indirectarg1549 = alloca %"char[]", align 8
  %indirectarg1550 = alloca %"char[]", align 8
  %varargslots1551 = alloca [2 x %any], align 16
  %indirectarg1554 = alloca %"any[]", align 8
  %taddr1560 = alloca i64, align 8
  %indirectarg1561 = alloca %"char[]", align 8
  %indirectarg1562 = alloca %"char[]", align 8
  %indirectarg1563 = alloca %"char[]", align 8
  %varargslots1564 = alloca [1 x %any], align 16
  %indirectarg1566 = alloca %"any[]", align 8
  %taddr1570 = alloca i64, align 8
  %taddr1571 = alloca i64, align 8
  %indirectarg1572 = alloca %"char[]", align 8
  %indirectarg1573 = alloca %"char[]", align 8
  %indirectarg1574 = alloca %"char[]", align 8
  %varargslots1575 = alloca [2 x %any], align 16
  %indirectarg1578 = alloca %"any[]", align 8
  %taddr1583 = alloca i32, align 4
  %indirectarg1584 = alloca %"char[]", align 8
  %indirectarg1585 = alloca %"char[]", align 8
  %indirectarg1586 = alloca %"char[]", align 8
  %varargslots1587 = alloca [1 x %any], align 16
  %indirectarg1589 = alloca %"any[]", align 8
  %taddr1595 = alloca i32, align 4
  %indirectarg1596 = alloca %"char[]", align 8
  %indirectarg1597 = alloca %"char[]", align 8
  %indirectarg1598 = alloca %"char[]", align 8
  %varargslots1599 = alloca [1 x %any], align 16
  %indirectarg1601 = alloca %"any[]", align 8
  %taddr1605 = alloca i32, align 4
  %indirectarg1606 = alloca %"char[]", align 8
  %indirectarg1607 = alloca %"char[]", align 8
  %indirectarg1608 = alloca %"char[]", align 8
  %varargslots1609 = alloca [1 x %any], align 16
  %indirectarg1611 = alloca %"any[]", align 8
  %taddr1619 = alloca i64, align 8
  %indirectarg1620 = alloca %"char[]", align 8
  %indirectarg1621 = alloca %"char[]", align 8
  %indirectarg1622 = alloca %"char[]", align 8
  %varargslots1623 = alloca [1 x %any], align 16
  %indirectarg1625 = alloca %"any[]", align 8
  %taddr1629 = alloca i64, align 8
  %taddr1630 = alloca i64, align 8
  %indirectarg1631 = alloca %"char[]", align 8
  %indirectarg1632 = alloca %"char[]", align 8
  %indirectarg1633 = alloca %"char[]", align 8
  %varargslots1634 = alloca [2 x %any], align 16
  %indirectarg1637 = alloca %"any[]", align 8
  %taddr1661 = alloca i64, align 8
  %indirectarg1662 = alloca %"char[]", align 8
  %indirectarg1663 = alloca %"char[]", align 8
  %indirectarg1664 = alloca %"char[]", align 8
  %varargslots1665 = alloca [1 x %any], align 16
  %indirectarg1667 = alloca %"any[]", align 8
  %taddr1671 = alloca i64, align 8
  %taddr1672 = alloca i64, align 8
  %indirectarg1673 = alloca %"char[]", align 8
  %indirectarg1674 = alloca %"char[]", align 8
  %indirectarg1675 = alloca %"char[]", align 8
  %varargslots1676 = alloca [2 x %any], align 16
  %indirectarg1679 = alloca %"any[]", align 8
  %taddr1690 = alloca i64, align 8
  %indirectarg1691 = alloca %"char[]", align 8
  %indirectarg1692 = alloca %"char[]", align 8
  %indirectarg1693 = alloca %"char[]", align 8
  %varargslots1694 = alloca [1 x %any], align 16
  %indirectarg1696 = alloca %"any[]", align 8
  %taddr1700 = alloca i64, align 8
  %taddr1701 = alloca i64, align 8
  %indirectarg1702 = alloca %"char[]", align 8
  %indirectarg1703 = alloca %"char[]", align 8
  %indirectarg1704 = alloca %"char[]", align 8
  %varargslots1705 = alloca [2 x %any], align 16
  %indirectarg1708 = alloca %"any[]", align 8
  %y1715 = alloca double, align 8
  %i1716 = alloca i32, align 4
  %taddr1730 = alloca i64, align 8
  %indirectarg1731 = alloca %"char[]", align 8
  %indirectarg1732 = alloca %"char[]", align 8
  %indirectarg1733 = alloca %"char[]", align 8
  %varargslots1734 = alloca [1 x %any], align 16
  %indirectarg1736 = alloca %"any[]", align 8
  %taddr1740 = alloca i64, align 8
  %taddr1741 = alloca i64, align 8
  %indirectarg1742 = alloca %"char[]", align 8
  %indirectarg1743 = alloca %"char[]", align 8
  %indirectarg1744 = alloca %"char[]", align 8
  %varargslots1745 = alloca [2 x %any], align 16
  %indirectarg1748 = alloca %"any[]", align 8
  %taddr1758 = alloca i64, align 8
  %indirectarg1759 = alloca %"char[]", align 8
  %indirectarg1760 = alloca %"char[]", align 8
  %indirectarg1761 = alloca %"char[]", align 8
  %varargslots1762 = alloca [1 x %any], align 16
  %indirectarg1764 = alloca %"any[]", align 8
  %taddr1768 = alloca i64, align 8
  %taddr1769 = alloca i64, align 8
  %indirectarg1770 = alloca %"char[]", align 8
  %indirectarg1771 = alloca %"char[]", align 8
  %indirectarg1772 = alloca %"char[]", align 8
  %varargslots1773 = alloca [2 x %any], align 16
  %indirectarg1776 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1785 = alloca i32, align 4
  %bias1798 = alloca double, align 8
  %frac = alloca double, align 8
  %x1801 = alloca double, align 8
  %n1804 = alloca i32, align 4
  %mag1805 = alloca double, align 8
  %sgn1806 = alloca double, align 8
  %x1807 = alloca double, align 8
  %y1808 = alloca double, align 8
  %x1809 = alloca double, align 8
  %n1811 = alloca i32, align 4
  %indirectarg1814 = alloca %"char[]", align 8
  %indirectarg1815 = alloca %"char[]", align 8
  %indirectarg1816 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1830 = alloca i64, align 8
  %indirectarg1831 = alloca %"char[]", align 8
  %indirectarg1832 = alloca %"char[]", align 8
  %indirectarg1833 = alloca %"char[]", align 8
  %varargslots1834 = alloca [1 x %any], align 16
  %indirectarg1836 = alloca %"any[]", align 8
  %taddr1840 = alloca i64, align 8
  %taddr1841 = alloca i64, align 8
  %indirectarg1842 = alloca %"char[]", align 8
  %indirectarg1843 = alloca %"char[]", align 8
  %indirectarg1844 = alloca %"char[]", align 8
  %varargslots1845 = alloca [2 x %any], align 16
  %indirectarg1848 = alloca %"any[]", align 8
  %switch1851 = alloca i8, align 1
  %x1914 = alloca double, align 8
  %x1942 = alloca double, align 8
  %n1943 = alloca i32, align 4
    #dbg_declare(ptr %1, !1581, !DIExpression(), !1582)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %sign, !1583, !DIExpression(), !1585)
  store i32 1, ptr %sign, align 4, !dbg !1585
  br label %loop.cond, !dbg !1586

loop.cond:                                        ; preds = %checkok17, %entry
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1587
  %2 = load i64, ptr %ptradd, align 8, !dbg !1587
  %i2b = icmp ne i64 %2, 0, !dbg !1587
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1587

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1587
  %3 = load i64, ptr %ptradd1, align 8, !dbg !1587
  %4 = load ptr, ptr %chars, align 8, !dbg !1587
  %ge = icmp sge i64 0, %3, !dbg !1587
  %5 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1587
  br i1 %5, label %panic, label %checkok, !dbg !1587

checkok:                                          ; preds = %and.rhs
  %6 = load i8, ptr %4, align 1, !dbg !1587
  %eq = icmp eq i8 %6, 32, !dbg !1587
  br label %and.phi, !dbg !1587

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !1587
  br i1 %val, label %loop.body, label %loop.exit, !dbg !1587

loop.body:                                        ; preds = %and.phi
  %7 = load %"char[]", ptr %chars, align 8, !dbg !1587
  %8 = extractvalue %"char[]" %7, 0, !dbg !1587
  %9 = extractvalue %"char[]" %7, 1, !dbg !1587
  %gt = icmp sgt i64 1, %9, !dbg !1587
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1587
  br i1 %10, label %panic7, label %checkok17, !dbg !1587

checkok17:                                        ; preds = %loop.body
  %size = sub i64 %9, 1, !dbg !1587
  %ptradd18 = getelementptr inbounds i8, ptr %8, i64 1, !dbg !1587
  %11 = insertvalue %"char[]" undef, ptr %ptradd18, 0, !dbg !1587
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !1587
  store %"char[]" %12, ptr %chars, align 8, !dbg !1587
  br label %loop.cond, !dbg !1587

loop.exit:                                        ; preds = %and.phi
  %ptradd19 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1589
  %13 = load i64, ptr %ptradd19, align 8, !dbg !1589
  %i2nb = icmp eq i64 %13, 0, !dbg !1589
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1589

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1589
  br label %err_retblock, !dbg !1589

if.exit:                                          ; preds = %loop.exit
  %ptradd20 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1590
  %14 = load i64, ptr %ptradd20, align 8, !dbg !1590
  %15 = load ptr, ptr %chars, align 8, !dbg !1590
  %ge21 = icmp sge i64 0, %14, !dbg !1590
  %16 = call i1 @llvm.expect.i1(i1 %ge21, i1 false), !dbg !1590
  br i1 %16, label %panic22, label %checkok32, !dbg !1590

checkok32:                                        ; preds = %if.exit
  %17 = load i8, ptr %15, align 1
  store i8 %17, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok32
  %18 = load i8, ptr %switch, align 1
  switch i8 %18, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case33
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !1592
  br label %switch.case33, !dbg !1594

switch.case33:                                    ; preds = %switch.entry, %switch.case
  %19 = load %"char[]", ptr %chars, align 8, !dbg !1595
  %20 = extractvalue %"char[]" %19, 0, !dbg !1595
  %21 = extractvalue %"char[]" %19, 1, !dbg !1595
  %gt34 = icmp sgt i64 1, %21, !dbg !1595
  %22 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1595
  br i1 %22, label %panic35, label %checkok45, !dbg !1595

checkok45:                                        ; preds = %switch.case33
  %size46 = sub i64 %21, 1, !dbg !1595
  %ptradd47 = getelementptr inbounds i8, ptr %20, i64 1, !dbg !1595
  %23 = insertvalue %"char[]" undef, ptr %ptradd47, 0, !dbg !1595
  %24 = insertvalue %"char[]" %23, i64 %size46, 1, !dbg !1595
  store %"char[]" %24, ptr %chars, align 8, !dbg !1595
  br label %switch.exit, !dbg !1595

switch.exit:                                      ; preds = %checkok45, %switch.entry
  %25 = load %"char[]", ptr %chars, align 8, !dbg !1597
  %26 = extractvalue %"char[]" %25, 1, !dbg !1597
  %27 = extractvalue %"char[]" %25, 0, !dbg !1597
  %eq48 = icmp eq i64 %26, 8, !dbg !1597
  br i1 %eq48, label %slice_cmp_values, label %slice_cmp_exit, !dbg !1597

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %28 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %28, %26
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd49 = getelementptr inbounds i8, ptr %27, i64 %28
  %ptradd50 = getelementptr inbounds i8, ptr @.str, i64 %28
  %29 = load i8, ptr %ptradd49, align 1
  %30 = load i8, ptr %ptradd50, align 1
  %eq51 = icmp eq i8 %29, %30
  %31 = add i64 %28, 1
  store i64 %31, ptr %cmp.idx, align 8
  br i1 %eq51, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %32 = load %"char[]", ptr %chars, align 8, !dbg !1597
  %33 = extractvalue %"char[]" %32, 1, !dbg !1597
  %34 = extractvalue %"char[]" %32, 0, !dbg !1597
  %eq52 = icmp eq i64 %33, 8, !dbg !1597
  br i1 %eq52, label %slice_cmp_values53, label %slice_cmp_exit61, !dbg !1597

slice_cmp_values53:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx54, align 8
  br label %slice_loop_start55

slice_loop_start55:                               ; preds = %slice_loop_comparison57, %slice_cmp_values53
  %35 = load i64, ptr %cmp.idx54, align 8
  %lt56 = icmp slt i64 %35, %33
  br i1 %lt56, label %slice_loop_comparison57, label %slice_cmp_exit61

slice_loop_comparison57:                          ; preds = %slice_loop_start55
  %ptradd58 = getelementptr inbounds i8, ptr %34, i64 %35
  %ptradd59 = getelementptr inbounds i8, ptr @.str.74, i64 %35
  %36 = load i8, ptr %ptradd58, align 1
  %37 = load i8, ptr %ptradd59, align 1
  %eq60 = icmp eq i8 %36, %37
  %38 = add i64 %35, 1
  store i64 %38, ptr %cmp.idx54, align 8
  br i1 %eq60, label %slice_loop_start55, label %slice_cmp_exit61

slice_cmp_exit61:                                 ; preds = %slice_loop_comparison57, %slice_loop_start55, %or.rhs
  %slice_cmp_phi62 = phi i1 [ true, %slice_loop_start55 ], [ false, %or.rhs ], [ false, %slice_loop_comparison57 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit61, %slice_cmp_exit
  %val63 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi62, %slice_cmp_exit61 ]
  br i1 %val63, label %if.then64, label %if.exit65

if.then64:                                        ; preds = %or.phi
  %39 = load i32, ptr %sign, align 4, !dbg !1597
  %sifp = sitofp i32 %39 to double, !dbg !1597
  %fmul = fmul double %sifp, 0x7FF0000000000000, !dbg !1597
  store double %fmul, ptr %blockret, align 8, !dbg !1597
  br label %expr_block.exit1946, !dbg !1597

if.exit65:                                        ; preds = %or.phi
  %40 = load %"char[]", ptr %chars, align 8, !dbg !1598
  %41 = extractvalue %"char[]" %40, 1, !dbg !1598
  %42 = extractvalue %"char[]" %40, 0, !dbg !1598
  %eq66 = icmp eq i64 %41, 3, !dbg !1598
  br i1 %eq66, label %slice_cmp_values67, label %slice_cmp_exit75, !dbg !1598

slice_cmp_values67:                               ; preds = %if.exit65
  store i64 0, ptr %cmp.idx68, align 8
  br label %slice_loop_start69

slice_loop_start69:                               ; preds = %slice_loop_comparison71, %slice_cmp_values67
  %43 = load i64, ptr %cmp.idx68, align 8
  %lt70 = icmp slt i64 %43, %41
  br i1 %lt70, label %slice_loop_comparison71, label %slice_cmp_exit75

slice_loop_comparison71:                          ; preds = %slice_loop_start69
  %ptradd72 = getelementptr inbounds i8, ptr %42, i64 %43
  %ptradd73 = getelementptr inbounds i8, ptr @.str.75, i64 %43
  %44 = load i8, ptr %ptradd72, align 1
  %45 = load i8, ptr %ptradd73, align 1
  %eq74 = icmp eq i8 %44, %45
  %46 = add i64 %43, 1
  store i64 %46, ptr %cmp.idx68, align 8
  br i1 %eq74, label %slice_loop_start69, label %slice_cmp_exit75

slice_cmp_exit75:                                 ; preds = %slice_loop_comparison71, %slice_loop_start69, %if.exit65
  %slice_cmp_phi76 = phi i1 [ true, %slice_loop_start69 ], [ false, %if.exit65 ], [ false, %slice_loop_comparison71 ]
  br i1 %slice_cmp_phi76, label %or.phi89, label %or.rhs77

or.rhs77:                                         ; preds = %slice_cmp_exit75
  %47 = load %"char[]", ptr %chars, align 8, !dbg !1598
  %48 = extractvalue %"char[]" %47, 1, !dbg !1598
  %49 = extractvalue %"char[]" %47, 0, !dbg !1598
  %eq78 = icmp eq i64 %48, 3, !dbg !1598
  br i1 %eq78, label %slice_cmp_values79, label %slice_cmp_exit87, !dbg !1598

slice_cmp_values79:                               ; preds = %or.rhs77
  store i64 0, ptr %cmp.idx80, align 8
  br label %slice_loop_start81

slice_loop_start81:                               ; preds = %slice_loop_comparison83, %slice_cmp_values79
  %50 = load i64, ptr %cmp.idx80, align 8
  %lt82 = icmp slt i64 %50, %48
  br i1 %lt82, label %slice_loop_comparison83, label %slice_cmp_exit87

slice_loop_comparison83:                          ; preds = %slice_loop_start81
  %ptradd84 = getelementptr inbounds i8, ptr %49, i64 %50
  %ptradd85 = getelementptr inbounds i8, ptr @.str.76, i64 %50
  %51 = load i8, ptr %ptradd84, align 1
  %52 = load i8, ptr %ptradd85, align 1
  %eq86 = icmp eq i8 %51, %52
  %53 = add i64 %50, 1
  store i64 %53, ptr %cmp.idx80, align 8
  br i1 %eq86, label %slice_loop_start81, label %slice_cmp_exit87

slice_cmp_exit87:                                 ; preds = %slice_loop_comparison83, %slice_loop_start81, %or.rhs77
  %slice_cmp_phi88 = phi i1 [ true, %slice_loop_start81 ], [ false, %or.rhs77 ], [ false, %slice_loop_comparison83 ]
  br label %or.phi89

or.phi89:                                         ; preds = %slice_cmp_exit87, %slice_cmp_exit75
  %val90 = phi i1 [ true, %slice_cmp_exit75 ], [ %slice_cmp_phi88, %slice_cmp_exit87 ]
  br i1 %val90, label %if.then91, label %if.exit92

if.then91:                                        ; preds = %or.phi89
  store double 0x7FF8000000000000, ptr %blockret, align 8, !dbg !1598
  br label %expr_block.exit1946, !dbg !1598

if.exit92:                                        ; preds = %or.phi89
  %ptradd93 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1599
  %54 = load i64, ptr %ptradd93, align 8, !dbg !1599
  %lt94 = icmp ult i64 2, %54, !dbg !1599
  br i1 %lt94, label %and.rhs95, label %and.phi110, !dbg !1599

and.rhs95:                                        ; preds = %if.exit92
  %ptradd96 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1599
  %55 = load i64, ptr %ptradd96, align 8, !dbg !1599
  %56 = load ptr, ptr %chars, align 8, !dbg !1599
  %ge97 = icmp sge i64 0, %55, !dbg !1599
  %57 = call i1 @llvm.expect.i1(i1 %ge97, i1 false), !dbg !1599
  br i1 %57, label %panic98, label %checkok108, !dbg !1599

checkok108:                                       ; preds = %and.rhs95
  %58 = load i8, ptr %56, align 1, !dbg !1599
  %eq109 = icmp eq i8 %58, 48, !dbg !1599
  br label %and.phi110, !dbg !1599

and.phi110:                                       ; preds = %checkok108, %if.exit92
  %val111 = phi i1 [ false, %if.exit92 ], [ %eq109, %checkok108 ], !dbg !1599
  br i1 %val111, label %and.rhs112, label %and.phi128, !dbg !1599

and.rhs112:                                       ; preds = %and.phi110
  %ptradd113 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !1599
  %59 = load i64, ptr %ptradd113, align 8, !dbg !1599
  %60 = load ptr, ptr %chars, align 8, !dbg !1599
  %ge114 = icmp sge i64 1, %59, !dbg !1599
  %61 = call i1 @llvm.expect.i1(i1 %ge114, i1 false), !dbg !1599
  br i1 %61, label %panic115, label %checkok125, !dbg !1599

checkok125:                                       ; preds = %and.rhs112
  %ptradd126 = getelementptr inbounds i8, ptr %60, i64 1, !dbg !1599
  %62 = load i8, ptr %ptradd126, align 1, !dbg !1599
  %zext = zext i8 %62 to i32, !dbg !1599
  %or = or i32 %zext, 32, !dbg !1599
  %eq127 = icmp eq i32 %or, 120, !dbg !1599
  %check = icmp sge i32 %or, 0, !dbg !1599
  %siui-eq = and i1 %check, %eq127, !dbg !1599
  br label %and.phi128, !dbg !1599

and.phi128:                                       ; preds = %checkok125, %and.phi110
  %val129 = phi i1 [ false, %and.phi110 ], [ %siui-eq, %checkok125 ], !dbg !1599
  br i1 %val129, label %if.then130, label %if.exit418, !dbg !1599

if.then130:                                       ; preds = %and.phi128
  %63 = load %"char[]", ptr %chars, align 8, !dbg !1600
  %64 = extractvalue %"char[]" %63, 0, !dbg !1600
  %65 = extractvalue %"char[]" %63, 1, !dbg !1600
  %gt131 = icmp sgt i64 2, %65, !dbg !1600
  %66 = call i1 @llvm.expect.i1(i1 %gt131, i1 false), !dbg !1600
  br i1 %66, label %panic132, label %checkok142, !dbg !1600

checkok142:                                       ; preds = %if.then130
  %size143 = sub i64 %65, 2, !dbg !1600
  %ptradd144 = getelementptr inbounds i8, ptr %64, i64 2, !dbg !1600
  %67 = insertvalue %"char[]" undef, ptr %ptradd144, 0, !dbg !1600
  %68 = insertvalue %"char[]" %67, i64 %size143, 1, !dbg !1600
  store %"char[]" %68, ptr %chars145, align 8
  %69 = load i32, ptr %sign, align 4
  store i32 %69, ptr %sign146, align 4
    #dbg_declare(ptr %scale, !1602, !DIExpression(), !1604)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !1604
    #dbg_declare(ptr %x, !1605, !DIExpression(), !1606)
  store i32 0, ptr %x, align 4, !dbg !1606
    #dbg_declare(ptr %rp, !1607, !DIExpression(), !1608)
  store i64 0, ptr %rp, align 8, !dbg !1608
    #dbg_declare(ptr %dc, !1609, !DIExpression(), !1610)
  store i64 0, ptr %dc, align 8, !dbg !1610
    #dbg_declare(ptr %c, !1611, !DIExpression(), !1612)
    #dbg_declare(ptr %got_rad, !1613, !DIExpression(), !1614)
  store i8 0, ptr %got_rad, align 1, !dbg !1614
    #dbg_declare(ptr %got_digit, !1615, !DIExpression(), !1616)
  store i8 0, ptr %got_digit, align 1, !dbg !1616
    #dbg_declare(ptr %got_tail, !1617, !DIExpression(), !1618)
  store i8 0, ptr %got_tail, align 1, !dbg !1618
    #dbg_declare(ptr %len, !1619, !DIExpression(), !1620)
  %ptradd148 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !1620
  %70 = load i64, ptr %ptradd148, align 8, !dbg !1620
  store i64 %70, ptr %len, align 8, !dbg !1620
    #dbg_declare(ptr %last_char, !1621, !DIExpression(), !1622)
  %71 = load i64, ptr %len, align 8, !dbg !1622
  %sub = sub i64 %71, 1, !dbg !1622
  store i64 %sub, ptr %last_char, align 8, !dbg !1622
    #dbg_declare(ptr %index, !1623, !DIExpression(), !1624)
  store i64 0, ptr %index, align 8, !dbg !1624
    #dbg_declare(ptr %y, !1625, !DIExpression(), !1626)
  store double 0.000000e+00, ptr %y, align 8, !dbg !1626
  br label %loop.cond149, !dbg !1627

loop.cond149:                                     ; preds = %if.exit168, %checkok142
  %ptradd150 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !1628
  %72 = load i64, ptr %ptradd150, align 8, !dbg !1628
  %73 = load ptr, ptr %chars145, align 8, !dbg !1628
  %74 = load i64, ptr %index, align 8, !dbg !1628
  %ge151 = icmp uge i64 %74, %72, !dbg !1628
  %75 = call i1 @llvm.expect.i1(i1 %ge151, i1 false), !dbg !1628
  br i1 %75, label %panic152, label %checkok162, !dbg !1628

checkok162:                                       ; preds = %loop.cond149
  %ptradd163 = getelementptr inbounds i8, ptr %73, i64 %74, !dbg !1628
  %76 = load i8, ptr %ptradd163, align 1, !dbg !1628
  store i8 %76, ptr %c, align 1, !dbg !1628
  %eq164 = icmp eq i8 %76, 48, !dbg !1628
  br i1 %eq164, label %loop.body165, label %loop.exit169, !dbg !1628

loop.body165:                                     ; preds = %checkok162
  %77 = load i64, ptr %index, align 8, !dbg !1630
  %78 = load i64, ptr %last_char, align 8, !dbg !1630
  %eq166 = icmp eq i64 %77, %78, !dbg !1630
  br i1 %eq166, label %if.then167, label %if.exit168, !dbg !1630

if.then167:                                       ; preds = %loop.body165
  store double 0.000000e+00, ptr %blockret147, align 8, !dbg !1630
  br label %expr_block.exit417, !dbg !1630

if.exit168:                                       ; preds = %loop.body165
  %79 = load i64, ptr %index, align 8, !dbg !1632
  %add = add i64 %79, 1, !dbg !1632
  store i64 %add, ptr %index, align 8, !dbg !1632
  br label %loop.cond149, !dbg !1632

loop.exit169:                                     ; preds = %checkok162
  %80 = load i8, ptr %c, align 1, !dbg !1633
  %eq170 = icmp eq i8 %80, 46, !dbg !1633
  br i1 %eq170, label %if.then171, label %if.exit225, !dbg !1633

if.then171:                                       ; preds = %loop.exit169
  store i8 1, ptr %got_rad, align 1, !dbg !1634
  %81 = load i64, ptr %index, align 8, !dbg !1636
  %82 = load i64, ptr %last_char, align 8, !dbg !1636
  %eq172 = icmp eq i64 %81, %82, !dbg !1636
  br i1 %eq172, label %if.then173, label %if.exit178, !dbg !1636

if.then173:                                       ; preds = %if.then171
  %83 = load i8, ptr %got_digit, align 1, !dbg !1637
  %84 = trunc i8 %83 to i1, !dbg !1637
  %not = xor i1 %84, true, !dbg !1637
  br i1 %not, label %if.then174, label %if.exit175, !dbg !1637

if.then174:                                       ; preds = %if.then173
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1637
  br label %err_retblock, !dbg !1637

if.exit175:                                       ; preds = %if.then173
  %85 = load i32, ptr %sign146, align 4, !dbg !1639
  %sifp176 = sitofp i32 %85 to double, !dbg !1639
  %fmul177 = fmul double %sifp176, 0.000000e+00, !dbg !1639
  store double %fmul177, ptr %blockret147, align 8, !dbg !1639
  br label %expr_block.exit417, !dbg !1639

if.exit178:                                       ; preds = %if.then171
  %86 = load i64, ptr %index, align 8, !dbg !1640
  %87 = load i64, ptr %last_char, align 8, !dbg !1640
  %neq = icmp ne i64 %86, %87, !dbg !1640
  br i1 %neq, label %and.rhs179, label %and.phi196, !dbg !1640

and.rhs179:                                       ; preds = %if.exit178
  %ptradd180 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !1640
  %88 = load i64, ptr %ptradd180, align 8, !dbg !1640
  %89 = load ptr, ptr %chars145, align 8, !dbg !1640
  %90 = load i64, ptr %index, align 8, !dbg !1640
  %add181 = add i64 %90, 1, !dbg !1640
  store i64 %add181, ptr %index, align 8, !dbg !1640
  %ge182 = icmp uge i64 %add181, %88, !dbg !1640
  %91 = call i1 @llvm.expect.i1(i1 %ge182, i1 false), !dbg !1640
  br i1 %91, label %panic183, label %checkok193, !dbg !1640

checkok193:                                       ; preds = %and.rhs179
  %ptradd194 = getelementptr inbounds i8, ptr %89, i64 %add181, !dbg !1640
  %92 = load i8, ptr %ptradd194, align 1, !dbg !1640
  store i8 %92, ptr %c, align 1, !dbg !1640
  %eq195 = icmp eq i8 %92, 48, !dbg !1640
  br label %and.phi196, !dbg !1640

and.phi196:                                       ; preds = %checkok193, %if.exit178
  %val197 = phi i1 [ false, %if.exit178 ], [ %eq195, %checkok193 ], !dbg !1640
  br i1 %val197, label %if.then198, label %if.exit224, !dbg !1640

if.then198:                                       ; preds = %and.phi196
  %93 = load i64, ptr %rp, align 8, !dbg !1641
  %sub199 = sub i64 %93, 1, !dbg !1641
  store i64 %sub199, ptr %rp, align 8, !dbg !1641
  store i8 1, ptr %got_digit, align 1, !dbg !1643
  br label %loop.cond200, !dbg !1644

loop.cond200:                                     ; preds = %loop.body221, %if.then198
  %94 = load i64, ptr %last_char, align 8, !dbg !1645
  %95 = load i64, ptr %index, align 8, !dbg !1645
  %neq201 = icmp ne i64 %94, %95, !dbg !1645
  br i1 %neq201, label %and.rhs202, label %and.phi219, !dbg !1645

and.rhs202:                                       ; preds = %loop.cond200
  %ptradd203 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !1645
  %96 = load i64, ptr %ptradd203, align 8, !dbg !1645
  %97 = load ptr, ptr %chars145, align 8, !dbg !1645
  %98 = load i64, ptr %index, align 8, !dbg !1645
  %add204 = add i64 %98, 1, !dbg !1645
  store i64 %add204, ptr %index, align 8, !dbg !1645
  %ge205 = icmp uge i64 %add204, %96, !dbg !1645
  %99 = call i1 @llvm.expect.i1(i1 %ge205, i1 false), !dbg !1645
  br i1 %99, label %panic206, label %checkok216, !dbg !1645

checkok216:                                       ; preds = %and.rhs202
  %ptradd217 = getelementptr inbounds i8, ptr %97, i64 %add204, !dbg !1645
  %100 = load i8, ptr %ptradd217, align 1, !dbg !1645
  store i8 %100, ptr %c, align 1, !dbg !1645
  %eq218 = icmp eq i8 %100, 48, !dbg !1645
  br label %and.phi219, !dbg !1645

and.phi219:                                       ; preds = %checkok216, %loop.cond200
  %val220 = phi i1 [ false, %loop.cond200 ], [ %eq218, %checkok216 ], !dbg !1645
  br i1 %val220, label %loop.body221, label %loop.exit223, !dbg !1645

loop.body221:                                     ; preds = %and.phi219
  %101 = load i64, ptr %rp, align 8, !dbg !1647
  %sub222 = sub i64 %101, 1, !dbg !1647
  store i64 %sub222, ptr %rp, align 8, !dbg !1647
  br label %loop.cond200, !dbg !1647

loop.exit223:                                     ; preds = %and.phi219
  br label %if.exit224, !dbg !1647

if.exit224:                                       ; preds = %loop.exit223, %and.phi196
  br label %if.exit225, !dbg !1647

if.exit225:                                       ; preds = %if.exit224, %loop.exit169
  br label %loop.cond226, !dbg !1649

loop.cond226:                                     ; preds = %checkok297, %if.exit225
  %102 = load i8, ptr %c, align 1, !dbg !1650
  %zext227 = zext i8 %102 to i32, !dbg !1650
  %sub228 = sub i32 %zext227, 48, !dbg !1650
  %lt229 = icmp ult i32 %sub228, 10, !dbg !1650
  br i1 %lt229, label %or.phi235, label %or.rhs230, !dbg !1650

or.rhs230:                                        ; preds = %loop.cond226
  %103 = load i8, ptr %c, align 1, !dbg !1650
  %zext231 = zext i8 %103 to i32, !dbg !1650
  %or232 = or i32 %zext231, 32, !dbg !1650
  %sub233 = sub i32 %or232, 97, !dbg !1650
  %lt234 = icmp slt i32 %sub233, 6, !dbg !1650
  %siui-lt = or i1 false, %lt234, !dbg !1650
  br label %or.phi235, !dbg !1650

or.phi235:                                        ; preds = %or.rhs230, %loop.cond226
  %val236 = phi i1 [ true, %loop.cond226 ], [ %siui-lt, %or.rhs230 ], !dbg !1650
  br i1 %val236, label %or.phi239, label %or.rhs237, !dbg !1650

or.rhs237:                                        ; preds = %or.phi235
  %104 = load i8, ptr %c, align 1, !dbg !1650
  %eq238 = icmp eq i8 %104, 46, !dbg !1650
  br label %or.phi239, !dbg !1650

or.phi239:                                        ; preds = %or.rhs237, %or.phi235
  %val240 = phi i1 [ true, %or.phi235 ], [ %eq238, %or.rhs237 ], !dbg !1650
  br i1 %val240, label %loop.body241, label %loop.exit299, !dbg !1650

loop.body241:                                     ; preds = %or.phi239
  %105 = load i8, ptr %c, align 1, !dbg !1652
  %eq242 = icmp eq i8 %105, 46, !dbg !1652
  br i1 %eq242, label %if.then243, label %if.else, !dbg !1652

if.then243:                                       ; preds = %loop.body241
  %106 = load i8, ptr %got_rad, align 1, !dbg !1654
  %107 = trunc i8 %106 to i1, !dbg !1654
  br i1 %107, label %if.then244, label %if.exit245, !dbg !1654

if.then244:                                       ; preds = %if.then243
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1654
  br label %err_retblock, !dbg !1654

if.exit245:                                       ; preds = %if.then243
  store i8 1, ptr %got_rad, align 1, !dbg !1656
  %108 = load i64, ptr %dc, align 8, !dbg !1657
  store i64 %108, ptr %rp, align 8, !dbg !1657
  br label %if.exit280, !dbg !1657

if.else:                                          ; preds = %loop.body241
  store i8 1, ptr %got_digit, align 1, !dbg !1658
    #dbg_declare(ptr %d, !1660, !DIExpression(), !1661)
  %109 = load i8, ptr %c, align 1, !dbg !1662
  %gt247 = icmp ugt i8 %109, 57, !dbg !1662
  br i1 %gt247, label %if.then248, label %if.exit253, !dbg !1662

if.then248:                                       ; preds = %if.else
  %110 = load i8, ptr %c, align 1, !dbg !1662
  %zext249 = zext i8 %110 to i32, !dbg !1662
  %or250 = or i32 %zext249, 32, !dbg !1662
  %add251 = add i32 %or250, 10, !dbg !1662
  %sub252 = sub i32 %add251, 97, !dbg !1662
  store i32 %sub252, ptr %blockret246, align 4, !dbg !1662
  br label %expr_block.exit, !dbg !1662

if.exit253:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !1664
  %zext254 = zext i8 %111 to i32, !dbg !1664
  %sub255 = sub i32 %zext254, 48, !dbg !1664
  store i32 %sub255, ptr %blockret246, align 4, !dbg !1664
  br label %expr_block.exit, !dbg !1664

expr_block.exit:                                  ; preds = %if.exit253, %if.then248
  %112 = load i32, ptr %blockret246, align 4, !dbg !1664
  store i32 %112, ptr %d, align 4, !dbg !1664
  store i8 1, ptr %switch256, align 1
  br label %switch.entry257

switch.entry257:                                  ; preds = %expr_block.exit
  %113 = load i8, ptr %switch256, align 1
  %114 = trunc i8 %113 to i1
  %115 = load i64, ptr %dc, align 8, !dbg !1665
  %lt258 = icmp slt i64 %115, 8, !dbg !1665
  %eq259 = icmp eq i1 %lt258, %114, !dbg !1665
  br i1 %eq259, label %switch.case260, label %next_if, !dbg !1665

switch.case260:                                   ; preds = %switch.entry257
  %116 = load i32, ptr %x, align 4, !dbg !1667
  %mul = mul i32 %116, 16, !dbg !1667
  %117 = load i32, ptr %d, align 4, !dbg !1667
  %add261 = add i32 %mul, %117, !dbg !1667
  store i32 %add261, ptr %x, align 4, !dbg !1667
  br label %switch.exit278, !dbg !1667

next_if:                                          ; preds = %switch.entry257
  %118 = load i64, ptr %dc, align 8, !dbg !1669
  %lt262 = icmp slt i64 %118, 14, !dbg !1669
  %eq263 = icmp eq i1 %lt262, %114, !dbg !1669
  br i1 %eq263, label %switch.case264, label %next_if267, !dbg !1669

switch.case264:                                   ; preds = %next_if
  %119 = load double, ptr %y, align 8, !dbg !1670
  %120 = load i32, ptr %d, align 4, !dbg !1670
  %sifp265 = sitofp i32 %120 to double, !dbg !1670
  %121 = load double, ptr %scale, align 8, !dbg !1670
  %fdiv = fdiv double %121, 1.600000e+01, !dbg !1670
  store double %fdiv, ptr %scale, align 8, !dbg !1670
  %fmul266 = fmul double %sifp265, %fdiv, !dbg !1670
  %fadd = fadd double %119, %fmul266, !dbg !1670
  store double %fadd, ptr %y, align 8, !dbg !1670
  store i8 1, ptr %got_tail, align 1, !dbg !1672
  br label %switch.exit278, !dbg !1672

next_if267:                                       ; preds = %next_if
  %122 = load i32, ptr %d, align 4, !dbg !1673
  %i2b268 = icmp ne i32 %122, 0, !dbg !1673
  br i1 %i2b268, label %and.rhs269, label %and.phi271, !dbg !1673

and.rhs269:                                       ; preds = %next_if267
  %123 = load i8, ptr %got_tail, align 1, !dbg !1673
  %124 = trunc i8 %123 to i1, !dbg !1673
  %not270 = xor i1 %124, true, !dbg !1673
  br label %and.phi271, !dbg !1673

and.phi271:                                       ; preds = %and.rhs269, %next_if267
  %val272 = phi i1 [ false, %next_if267 ], [ %not270, %and.rhs269 ], !dbg !1673
  %eq273 = icmp eq i1 %val272, %114, !dbg !1673
  br i1 %eq273, label %switch.case274, label %next_if277, !dbg !1673

switch.case274:                                   ; preds = %and.phi271
  %125 = load double, ptr %y, align 8, !dbg !1674
  %126 = load double, ptr %scale, align 8, !dbg !1674
  %fmul275 = fmul double 5.000000e-01, %126, !dbg !1674
  %fadd276 = fadd double %125, %fmul275, !dbg !1674
  store double %fadd276, ptr %y, align 8, !dbg !1674
  store i8 1, ptr %got_tail, align 1, !dbg !1676
  br label %switch.exit278, !dbg !1676

next_if277:                                       ; preds = %and.phi271
  br label %switch.exit278, !dbg !1676

switch.exit278:                                   ; preds = %next_if277, %switch.case274, %switch.case264, %switch.case260
  %127 = load i64, ptr %dc, align 8, !dbg !1677
  %add279 = add i64 %127, 1, !dbg !1677
  store i64 %add279, ptr %dc, align 8, !dbg !1677
  br label %if.exit280, !dbg !1677

if.exit280:                                       ; preds = %switch.exit278, %if.exit245
  %128 = load i64, ptr %index, align 8, !dbg !1678
  %129 = load i64, ptr %last_char, align 8, !dbg !1678
  %eq281 = icmp eq i64 %128, %129, !dbg !1678
  br i1 %eq281, label %if.then282, label %if.exit283, !dbg !1678

if.then282:                                       ; preds = %if.exit280
  br label %loop.exit299, !dbg !1678

if.exit283:                                       ; preds = %if.exit280
  %ptradd284 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !1679
  %130 = load i64, ptr %ptradd284, align 8, !dbg !1679
  %131 = load ptr, ptr %chars145, align 8, !dbg !1679
  %132 = load i64, ptr %index, align 8, !dbg !1679
  %add285 = add i64 %132, 1, !dbg !1679
  store i64 %add285, ptr %index, align 8, !dbg !1679
  %ge286 = icmp uge i64 %add285, %130, !dbg !1679
  %133 = call i1 @llvm.expect.i1(i1 %ge286, i1 false), !dbg !1679
  br i1 %133, label %panic287, label %checkok297, !dbg !1679

checkok297:                                       ; preds = %if.exit283
  %ptradd298 = getelementptr inbounds i8, ptr %131, i64 %add285, !dbg !1679
  %134 = load i8, ptr %ptradd298, align 1, !dbg !1679
  store i8 %134, ptr %c, align 1, !dbg !1679
  br label %loop.cond226, !dbg !1679

loop.exit299:                                     ; preds = %if.then282, %or.phi239
  %135 = load i8, ptr %got_digit, align 1, !dbg !1680
  %136 = trunc i8 %135 to i1, !dbg !1680
  %not300 = xor i1 %136, true, !dbg !1680
  br i1 %not300, label %if.then301, label %if.exit302, !dbg !1680

if.then301:                                       ; preds = %loop.exit299
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1680
  br label %err_retblock, !dbg !1680

if.exit302:                                       ; preds = %loop.exit299
  %137 = load i8, ptr %got_rad, align 1, !dbg !1681
  %138 = trunc i8 %137 to i1, !dbg !1681
  %not303 = xor i1 %138, true, !dbg !1681
  br i1 %not303, label %if.then304, label %if.exit305, !dbg !1681

if.then304:                                       ; preds = %if.exit302
  %139 = load i64, ptr %dc, align 8, !dbg !1681
  store i64 %139, ptr %rp, align 8, !dbg !1681
  br label %if.exit305, !dbg !1681

if.exit305:                                       ; preds = %if.then304, %if.exit302
  br label %loop.cond306, !dbg !1682

loop.cond306:                                     ; preds = %loop.body308, %if.exit305
  %140 = load i64, ptr %dc, align 8, !dbg !1683
  %lt307 = icmp slt i64 %140, 8, !dbg !1683
  br i1 %lt307, label %loop.body308, label %loop.exit311, !dbg !1683

loop.body308:                                     ; preds = %loop.cond306
  %141 = load i32, ptr %x, align 4, !dbg !1683
  %mul309 = mul i32 %141, 16, !dbg !1683
  store i32 %mul309, ptr %x, align 4, !dbg !1683
  %142 = load i64, ptr %dc, align 8, !dbg !1683
  %add310 = add i64 %142, 1, !dbg !1683
  store i64 %add310, ptr %dc, align 8, !dbg !1683
  br label %loop.cond306, !dbg !1683

loop.exit311:                                     ; preds = %loop.cond306
    #dbg_declare(ptr %e2, !1685, !DIExpression(), !1686)
  store i64 0, ptr %e2, align 8, !dbg !1686
  %143 = load i8, ptr %c, align 1, !dbg !1687
  %zext312 = zext i8 %143 to i32, !dbg !1687
  %or313 = or i32 %zext312, 32, !dbg !1687
  %eq314 = icmp eq i32 %or313, 112, !dbg !1687
  %check315 = icmp sge i32 %or313, 0, !dbg !1687
  %siui-eq316 = and i1 %check315, %eq314, !dbg !1687
  br i1 %siui-eq316, label %if.then317, label %if.exit343, !dbg !1687

if.then317:                                       ; preds = %loop.exit311
    #dbg_declare(ptr %e2val, !1688, !DIExpression(), !1690)
  %144 = load %"char[]", ptr %chars145, align 8, !dbg !1690
  %145 = extractvalue %"char[]" %144, 0, !dbg !1690
  %146 = load i64, ptr %index, align 8, !dbg !1690
  %add318 = add i64 %146, 1, !dbg !1690
  %147 = extractvalue %"char[]" %144, 1, !dbg !1690
  %gt319 = icmp sgt i64 %add318, %147, !dbg !1690
  %148 = call i1 @llvm.expect.i1(i1 %gt319, i1 false), !dbg !1690
  br i1 %148, label %panic320, label %checkok330, !dbg !1690

checkok330:                                       ; preds = %if.then317
  %underflow = icmp slt i64 %add318, 0, !dbg !1690
  %149 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !1690
  br i1 %149, label %panic331, label %checkok339, !dbg !1690

checkok339:                                       ; preds = %checkok330
  %size340 = sub i64 %147, %add318, !dbg !1690
  %ptradd341 = getelementptr inbounds i8, ptr %145, i64 %add318, !dbg !1690
  %150 = insertvalue %"char[]" undef, ptr %ptradd341, 0, !dbg !1690
  %151 = insertvalue %"char[]" %150, i64 %size340, 1, !dbg !1690
  store %"char[]" %151, ptr %indirectarg342, align 8
  %152 = call i64 @std.core.String.to_long(ptr %retparam, ptr align 8 %indirectarg342, i32 10), !dbg !1690
  %not_err = icmp eq i64 %152, 0, !dbg !1690
  %153 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1690
  br i1 %153, label %after_check, label %else_block, !dbg !1690

after_check:                                      ; preds = %checkok339
  %154 = load i64, ptr %retparam, align 8, !dbg !1690
  br label %phi_block, !dbg !1690

else_block:                                       ; preds = %checkok339
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !1690
  br label %guard_block, !dbg !1690

guard_block:                                      ; preds = %else_block
  %155 = load i64, ptr %error_var, align 8, !dbg !1690
  store i64 %155, ptr %reterr, align 8, !dbg !1690
  br label %err_retblock, !dbg !1690

phi_block:                                        ; preds = %after_check
  store i64 %154, ptr %e2val, align 8, !dbg !1690
  %156 = load i64, ptr %e2val, align 8, !dbg !1691
  store i64 %156, ptr %e2, align 8, !dbg !1691
  br label %if.exit343, !dbg !1691

if.exit343:                                       ; preds = %phi_block, %loop.exit311
  %157 = load i64, ptr %e2, align 8, !dbg !1692
  %158 = load i64, ptr %rp, align 8, !dbg !1692
  %mul344 = mul i64 4, %158, !dbg !1692
  %sub345 = sub i64 %mul344, 32, !dbg !1692
  %add346 = add i64 %157, %sub345, !dbg !1692
  store i64 %add346, ptr %e2, align 8, !dbg !1692
  %159 = load i32, ptr %x, align 4, !dbg !1693
  %i2nb347 = icmp eq i32 %159, 0, !dbg !1693
  br i1 %i2nb347, label %if.then348, label %if.exit351, !dbg !1693

if.then348:                                       ; preds = %if.exit343
  %160 = load i32, ptr %sign146, align 4, !dbg !1693
  %sifp349 = sitofp i32 %160 to double, !dbg !1693
  %fmul350 = fmul double %sifp349, 0.000000e+00, !dbg !1693
  store double %fmul350, ptr %blockret147, align 8, !dbg !1693
  br label %expr_block.exit417, !dbg !1693

if.exit351:                                       ; preds = %if.exit343
  %161 = load i64, ptr %e2, align 8, !dbg !1694
  %gt352 = icmp sgt i64 %161, 1074, !dbg !1694
  br i1 %gt352, label %if.then353, label %if.exit354, !dbg !1694

if.then353:                                       ; preds = %if.exit351
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !1694
  br label %err_retblock, !dbg !1694

if.exit354:                                       ; preds = %if.exit351
  %162 = load i64, ptr %e2, align 8, !dbg !1695
  %lt355 = icmp slt i64 %162, -1180, !dbg !1695
  br i1 %lt355, label %if.then356, label %if.exit357, !dbg !1695

if.then356:                                       ; preds = %if.exit354
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !1695
  br label %err_retblock, !dbg !1695

if.exit357:                                       ; preds = %if.exit354
  br label %loop.cond358, !dbg !1696

loop.cond358:                                     ; preds = %if.exit369, %if.exit357
  %163 = load i32, ptr %x, align 4, !dbg !1697
  %lt359 = icmp ult i32 %163, -2147483648, !dbg !1697
  br i1 %lt359, label %loop.body360, label %loop.exit371, !dbg !1697

loop.body360:                                     ; preds = %loop.cond358
  %164 = load double, ptr %y, align 8, !dbg !1699
  %ge361 = fcmp oge double %164, 5.000000e-01, !dbg !1699
  br i1 %ge361, label %if.then362, label %if.else366, !dbg !1699

if.then362:                                       ; preds = %loop.body360
  %165 = load i32, ptr %x, align 4, !dbg !1701
  %166 = load i32, ptr %x, align 4, !dbg !1701
  %add363 = add i32 %166, 1, !dbg !1701
  %add364 = add i32 %165, %add363, !dbg !1701
  store i32 %add364, ptr %x, align 4, !dbg !1701
  %167 = load double, ptr %y, align 8, !dbg !1703
  %168 = load double, ptr %y, align 8, !dbg !1703
  %fsub = fsub double %168, 1.000000e+00, !dbg !1703
  %fadd365 = fadd double %167, %fsub, !dbg !1703
  store double %fadd365, ptr %y, align 8, !dbg !1703
  br label %if.exit369, !dbg !1703

if.else366:                                       ; preds = %loop.body360
  %169 = load i32, ptr %x, align 4, !dbg !1704
  %170 = load i32, ptr %x, align 4, !dbg !1704
  %add367 = add i32 %169, %170, !dbg !1704
  store i32 %add367, ptr %x, align 4, !dbg !1704
  %171 = load double, ptr %y, align 8, !dbg !1706
  %172 = load double, ptr %y, align 8, !dbg !1706
  %fadd368 = fadd double %171, %172, !dbg !1706
  store double %fadd368, ptr %y, align 8, !dbg !1706
  br label %if.exit369, !dbg !1706

if.exit369:                                       ; preds = %if.else366, %if.then362
  %173 = load i64, ptr %e2, align 8, !dbg !1707
  %sub370 = sub i64 %173, 1, !dbg !1707
  store i64 %sub370, ptr %e2, align 8, !dbg !1707
  br label %loop.cond358, !dbg !1707

loop.exit371:                                     ; preds = %loop.cond358
    #dbg_declare(ptr %bits, !1708, !DIExpression(), !1709)
  store i32 53, ptr %bits, align 4, !dbg !1709
  %174 = load i64, ptr %e2, align 8, !dbg !1710
  %add372 = add i64 32, %174, !dbg !1710
  %sub373 = sub i64 %add372, -1074, !dbg !1710
  %gt374 = icmp sgt i64 53, %sub373, !dbg !1710
  br i1 %gt374, label %if.then375, label %if.exit381, !dbg !1710

if.then375:                                       ; preds = %loop.exit371
  %175 = load i64, ptr %e2, align 8, !dbg !1711
  %add376 = add i64 32, %175, !dbg !1711
  %sub377 = sub i64 %add376, -1074, !dbg !1711
  %trunc = trunc i64 %sub377 to i32, !dbg !1711
  store i32 %trunc, ptr %bits, align 4, !dbg !1711
  %176 = load i32, ptr %bits, align 4, !dbg !1713
  %lt378 = icmp slt i32 %176, 0, !dbg !1713
  br i1 %lt378, label %if.then379, label %if.exit380, !dbg !1713

if.then379:                                       ; preds = %if.then375
  store i32 0, ptr %bits, align 4, !dbg !1713
  br label %if.exit380, !dbg !1713

if.exit380:                                       ; preds = %if.then379, %if.then375
  br label %if.exit381, !dbg !1713

if.exit381:                                       ; preds = %if.exit380, %loop.exit371
    #dbg_declare(ptr %bias, !1714, !DIExpression(), !1715)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !1715
  %177 = load i32, ptr %bits, align 4, !dbg !1716
  %lt382 = icmp slt i32 %177, 53, !dbg !1716
  br i1 %lt382, label %if.then383, label %if.exit390, !dbg !1716

if.then383:                                       ; preds = %if.exit381
  store double 1.000000e+00, ptr %x384, align 8
  %178 = load i32, ptr %bits, align 4, !dbg !1717
  %sub385 = sub i32 85, %178, !dbg !1717
  %sub386 = sub i32 %sub385, 1, !dbg !1717
  store i32 %sub386, ptr %n, align 4
  %179 = load double, ptr %x384, align 8, !dbg !1719
  %180 = load i32, ptr %n, align 4, !dbg !1719
  %181 = call double @scalbn(double %179, i32 %180), !dbg !1719
  store double %181, ptr %mag, align 8
  %182 = load i32, ptr %sign146, align 4, !dbg !1717
  %sifp387 = sitofp i32 %182 to double, !dbg !1717
  store double %sifp387, ptr %sgn, align 8
  %183 = load double, ptr %mag, align 8
  store double %183, ptr %x388, align 8
  %184 = load double, ptr %sgn, align 8
  store double %184, ptr %y389, align 8
  %185 = load double, ptr %x388, align 8, !dbg !1722
  %186 = load double, ptr %sgn, align 8, !dbg !1725
  %187 = call double @llvm.copysign.f64(double %185, double %186), !dbg !1725
  store double %187, ptr %bias, align 8, !dbg !1725
  br label %if.exit390, !dbg !1725

if.exit390:                                       ; preds = %if.then383, %if.exit381
  %188 = load i32, ptr %bits, align 4, !dbg !1727
  %lt391 = icmp slt i32 %188, 32, !dbg !1727
  br i1 %lt391, label %and.rhs392, label %and.phi393, !dbg !1727

and.rhs392:                                       ; preds = %if.exit390
  %189 = load double, ptr %y, align 8, !dbg !1727
  %fpbool = fcmp une double %189, 0.000000e+00, !dbg !1727
  br label %and.phi393, !dbg !1727

and.phi393:                                       ; preds = %and.rhs392, %if.exit390
  %val394 = phi i1 [ false, %if.exit390 ], [ %fpbool, %and.rhs392 ], !dbg !1727
  br i1 %val394, label %and.rhs395, label %and.phi397, !dbg !1727

and.rhs395:                                       ; preds = %and.phi393
  %190 = load i32, ptr %x, align 4, !dbg !1727
  %and = and i32 %190, 1, !dbg !1727
  %i2nb396 = icmp eq i32 %and, 0, !dbg !1727
  br label %and.phi397, !dbg !1727

and.phi397:                                       ; preds = %and.rhs395, %and.phi393
  %val398 = phi i1 [ false, %and.phi393 ], [ %i2nb396, %and.rhs395 ], !dbg !1727
  br i1 %val398, label %if.then399, label %if.exit401, !dbg !1727

if.then399:                                       ; preds = %and.phi397
  %191 = load i32, ptr %x, align 4, !dbg !1728
  %add400 = add i32 %191, 1, !dbg !1728
  store i32 %add400, ptr %x, align 4, !dbg !1728
  store double 0.000000e+00, ptr %y, align 8, !dbg !1730
  br label %if.exit401, !dbg !1730

if.exit401:                                       ; preds = %if.then399, %and.phi397
  %192 = load double, ptr %bias, align 8, !dbg !1731
  %193 = load i32, ptr %sign146, align 4, !dbg !1731
  %sifp402 = sitofp i32 %193 to double, !dbg !1731
  %194 = load i32, ptr %x, align 4, !dbg !1731
  %uifp = uitofp i32 %194 to double, !dbg !1731
  %fmul403 = fmul double %sifp402, %uifp, !dbg !1731
  %fadd404 = fadd double %192, %fmul403, !dbg !1731
  %195 = load i32, ptr %sign146, align 4, !dbg !1731
  %sifp405 = sitofp i32 %195 to double, !dbg !1731
  %196 = load double, ptr %y, align 8, !dbg !1731
  %fmul406 = fmul double %sifp405, %196, !dbg !1731
  %fadd407 = fadd double %fadd404, %fmul406, !dbg !1731
  store double %fadd407, ptr %y, align 8, !dbg !1731
  %197 = load double, ptr %y, align 8, !dbg !1732
  %198 = load double, ptr %bias, align 8, !dbg !1732
  %fsub408 = fsub double %197, %198, !dbg !1732
  store double %fsub408, ptr %y, align 8, !dbg !1732
  %199 = load double, ptr %y, align 8, !dbg !1733
  %fpbool409 = fcmp une double %199, 0.000000e+00, !dbg !1733
  %not410 = xor i1 %fpbool409, true, !dbg !1733
  br i1 %not410, label %if.then411, label %if.exit412, !dbg !1733

if.then411:                                       ; preds = %if.exit401
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !1733
  br label %err_retblock, !dbg !1733

if.exit412:                                       ; preds = %if.exit401
  %200 = load double, ptr %y, align 8
  store double %200, ptr %x413, align 8
  %201 = load i64, ptr %e2, align 8, !dbg !1734
  %trunc414 = trunc i64 %201 to i32, !dbg !1734
  store i32 %trunc414, ptr %n415, align 4
  %202 = load double, ptr %x413, align 8, !dbg !1735
  %203 = load i32, ptr %n415, align 4, !dbg !1735
  %204 = call double @scalbn(double %202, i32 %203), !dbg !1735
  store double %204, ptr %blockret147, align 8, !dbg !1735
  br label %expr_block.exit417, !dbg !1735

expr_block.exit417:                               ; preds = %if.exit412, %if.then348, %if.exit175, %if.then167
  %205 = load double, ptr %blockret147, align 8, !dbg !1735
  store double %205, ptr %blockret, align 8, !dbg !1735
  br label %expr_block.exit1946, !dbg !1735

if.exit418:                                       ; preds = %and.phi128
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars419, ptr align 8 %chars, i32 16, i1 false)
  %206 = load i32, ptr %sign, align 4
  store i32 %206, ptr %sign420, align 4
  %ptradd422 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !1737
  %207 = load i64, ptr %ptradd422, align 8, !dbg !1737
  %lt423 = icmp ult i64 0, %207, !dbg !1737
  br i1 %lt423, label %assert_ok, label %assert_fail, !dbg !1737

assert_fail:                                      ; preds = %if.exit418
  store %"char[]" { ptr @.panic_msg.78, i64 34 }, ptr %indirectarg424, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg425, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg426, align 8
  %208 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %208(ptr align 8 %indirectarg424, ptr align 8 %indirectarg425, ptr align 8 %indirectarg426, i32 35), !dbg !1737
  unreachable, !dbg !1737

assert_ok:                                        ; preds = %if.exit418
    #dbg_declare(ptr %x427, !1741, !DIExpression(), !1745)
  call void @llvm.memset.p0.i64(ptr align 16 %x427, i8 0, i64 512, i1 false), !dbg !1745
    #dbg_declare(ptr %emax, !1746, !DIExpression(), !1747)
  store i32 1024, ptr %emax, align 4, !dbg !1747
    #dbg_declare(ptr %index428, !1748, !DIExpression(), !1749)
  store i64 0, ptr %index428, align 8, !dbg !1749
    #dbg_declare(ptr %got_digit429, !1750, !DIExpression(), !1751)
  %ptradd430 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !1751
  %209 = load i64, ptr %ptradd430, align 8, !dbg !1751
  %210 = load ptr, ptr %chars419, align 8, !dbg !1751
  %ge431 = icmp sge i64 0, %209, !dbg !1751
  %211 = call i1 @llvm.expect.i1(i1 %ge431, i1 false), !dbg !1751
  br i1 %211, label %panic432, label %checkok442, !dbg !1751

checkok442:                                       ; preds = %assert_ok
  %212 = load i8, ptr %210, align 1, !dbg !1751
  %eq443 = icmp eq i8 %212, 48, !dbg !1751
  %213 = zext i1 %eq443 to i8, !dbg !1751
  store i8 %213, ptr %got_digit429, align 1, !dbg !1751
    #dbg_declare(ptr %got_rad444, !1752, !DIExpression(), !1753)
  store i8 0, ptr %got_rad444, align 1, !dbg !1753
    #dbg_declare(ptr %lrp, !1754, !DIExpression(), !1755)
  store i64 0, ptr %lrp, align 8, !dbg !1755
    #dbg_declare(ptr %dc445, !1756, !DIExpression(), !1755)
  store i64 0, ptr %dc445, align 8, !dbg !1755
    #dbg_declare(ptr %k, !1757, !DIExpression(), !1758)
  store i32 0, ptr %k, align 4, !dbg !1758
    #dbg_declare(ptr %j, !1759, !DIExpression(), !1758)
  store i32 0, ptr %j, align 4, !dbg !1758
    #dbg_declare(ptr %lnz, !1760, !DIExpression(), !1758)
  store i32 0, ptr %lnz, align 4, !dbg !1758
    #dbg_declare(ptr %len446, !1761, !DIExpression(), !1762)
  %ptradd447 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !1762
  %214 = load i64, ptr %ptradd447, align 8, !dbg !1762
  store i64 %214, ptr %len446, align 8, !dbg !1762
    #dbg_declare(ptr %last_char448, !1763, !DIExpression(), !1764)
  %215 = load i64, ptr %len446, align 8, !dbg !1764
  %sub449 = sub i64 %215, 1, !dbg !1764
  store i64 %sub449, ptr %last_char448, align 8, !dbg !1764
  %216 = load i64, ptr %len446, align 8, !dbg !1765
  %i2b450 = icmp ne i64 %216, 0, !dbg !1765
  br i1 %i2b450, label %assert_ok455, label %assert_fail451, !dbg !1765

assert_fail451:                                   ; preds = %checkok442
  store %"char[]" { ptr @.panic_msg.79, i64 16 }, ptr %indirectarg452, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg453, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg454, align 8
  %217 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %217(ptr align 8 %indirectarg452, ptr align 8 %indirectarg453, ptr align 8 %indirectarg454, i32 52), !dbg !1765
  unreachable, !dbg !1765

assert_ok455:                                     ; preds = %checkok442
    #dbg_declare(ptr %c456, !1766, !DIExpression(), !1767)
  br label %loop.cond457, !dbg !1768

loop.cond457:                                     ; preds = %if.exit478, %assert_ok455
  %ptradd458 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !1769
  %218 = load i64, ptr %ptradd458, align 8, !dbg !1769
  %219 = load ptr, ptr %chars419, align 8, !dbg !1769
  %220 = load i64, ptr %index428, align 8, !dbg !1769
  %ge459 = icmp uge i64 %220, %218, !dbg !1769
  %221 = call i1 @llvm.expect.i1(i1 %ge459, i1 false), !dbg !1769
  br i1 %221, label %panic460, label %checkok470, !dbg !1769

checkok470:                                       ; preds = %loop.cond457
  %ptradd471 = getelementptr inbounds i8, ptr %219, i64 %220, !dbg !1769
  %222 = load i8, ptr %ptradd471, align 1, !dbg !1769
  store i8 %222, ptr %c456, align 1, !dbg !1769
  %eq472 = icmp eq i8 %222, 48, !dbg !1769
  br i1 %eq472, label %loop.body473, label %loop.exit480, !dbg !1769

loop.body473:                                     ; preds = %checkok470
  %223 = load i64, ptr %index428, align 8, !dbg !1771
  %224 = load i64, ptr %last_char448, align 8, !dbg !1771
  %eq474 = icmp eq i64 %223, %224, !dbg !1771
  br i1 %eq474, label %if.then475, label %if.exit478, !dbg !1771

if.then475:                                       ; preds = %loop.body473
  %225 = load i32, ptr %sign420, align 4, !dbg !1771
  %sifp476 = sitofp i32 %225 to double, !dbg !1771
  %fmul477 = fmul double %sifp476, 0.000000e+00, !dbg !1771
  store double %fmul477, ptr %blockret421, align 8, !dbg !1771
  br label %expr_block.exit1945, !dbg !1771

if.exit478:                                       ; preds = %loop.body473
  %226 = load i64, ptr %index428, align 8, !dbg !1773
  %add479 = add i64 %226, 1, !dbg !1773
  store i64 %add479, ptr %index428, align 8, !dbg !1773
  br label %loop.cond457, !dbg !1773

loop.exit480:                                     ; preds = %checkok470
  %227 = load i8, ptr %c456, align 1, !dbg !1774
  %eq481 = icmp eq i8 %227, 46, !dbg !1774
  br i1 %eq481, label %if.then482, label %if.exit538, !dbg !1774

if.then482:                                       ; preds = %loop.exit480
  store i8 1, ptr %got_rad444, align 1, !dbg !1775
  %228 = load i64, ptr %index428, align 8, !dbg !1777
  %229 = load i64, ptr %last_char448, align 8, !dbg !1777
  %eq483 = icmp eq i64 %228, %229, !dbg !1777
  br i1 %eq483, label %if.then484, label %if.exit490, !dbg !1777

if.then484:                                       ; preds = %if.then482
  %230 = load i8, ptr %got_digit429, align 1, !dbg !1778
  %231 = trunc i8 %230 to i1, !dbg !1778
  %not485 = xor i1 %231, true, !dbg !1778
  br i1 %not485, label %if.then486, label %if.exit487, !dbg !1778

if.then486:                                       ; preds = %if.then484
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1778
  br label %err_retblock, !dbg !1778

if.exit487:                                       ; preds = %if.then484
  %232 = load i32, ptr %sign420, align 4, !dbg !1780
  %sifp488 = sitofp i32 %232 to double, !dbg !1780
  %fmul489 = fmul double %sifp488, 0.000000e+00, !dbg !1780
  store double %fmul489, ptr %blockret421, align 8, !dbg !1780
  br label %expr_block.exit1945, !dbg !1780

if.exit490:                                       ; preds = %if.then482
  %233 = load i64, ptr %index428, align 8, !dbg !1781
  %234 = load i64, ptr %last_char448, align 8, !dbg !1781
  %neq491 = icmp ne i64 %233, %234, !dbg !1781
  br i1 %neq491, label %and.rhs492, label %and.phi509, !dbg !1781

and.rhs492:                                       ; preds = %if.exit490
  %ptradd493 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !1781
  %235 = load i64, ptr %ptradd493, align 8, !dbg !1781
  %236 = load ptr, ptr %chars419, align 8, !dbg !1781
  %237 = load i64, ptr %index428, align 8, !dbg !1781
  %add494 = add i64 %237, 1, !dbg !1781
  store i64 %add494, ptr %index428, align 8, !dbg !1781
  %ge495 = icmp uge i64 %add494, %235, !dbg !1781
  %238 = call i1 @llvm.expect.i1(i1 %ge495, i1 false), !dbg !1781
  br i1 %238, label %panic496, label %checkok506, !dbg !1781

checkok506:                                       ; preds = %and.rhs492
  %ptradd507 = getelementptr inbounds i8, ptr %236, i64 %add494, !dbg !1781
  %239 = load i8, ptr %ptradd507, align 1, !dbg !1781
  store i8 %239, ptr %c456, align 1, !dbg !1781
  %eq508 = icmp eq i8 %239, 48, !dbg !1781
  br label %and.phi509, !dbg !1781

and.phi509:                                       ; preds = %checkok506, %if.exit490
  %val510 = phi i1 [ false, %if.exit490 ], [ %eq508, %checkok506 ], !dbg !1781
  br i1 %val510, label %if.then511, label %if.exit537, !dbg !1781

if.then511:                                       ; preds = %and.phi509
  %240 = load i64, ptr %lrp, align 8, !dbg !1782
  %sub512 = sub i64 %240, 1, !dbg !1782
  store i64 %sub512, ptr %lrp, align 8, !dbg !1782
  store i8 1, ptr %got_digit429, align 1, !dbg !1784
  br label %loop.cond513, !dbg !1785

loop.cond513:                                     ; preds = %loop.body534, %if.then511
  %241 = load i64, ptr %last_char448, align 8, !dbg !1786
  %242 = load i64, ptr %index428, align 8, !dbg !1786
  %neq514 = icmp ne i64 %241, %242, !dbg !1786
  br i1 %neq514, label %and.rhs515, label %and.phi532, !dbg !1786

and.rhs515:                                       ; preds = %loop.cond513
  %ptradd516 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !1786
  %243 = load i64, ptr %ptradd516, align 8, !dbg !1786
  %244 = load ptr, ptr %chars419, align 8, !dbg !1786
  %245 = load i64, ptr %index428, align 8, !dbg !1786
  %add517 = add i64 %245, 1, !dbg !1786
  store i64 %add517, ptr %index428, align 8, !dbg !1786
  %ge518 = icmp uge i64 %add517, %243, !dbg !1786
  %246 = call i1 @llvm.expect.i1(i1 %ge518, i1 false), !dbg !1786
  br i1 %246, label %panic519, label %checkok529, !dbg !1786

checkok529:                                       ; preds = %and.rhs515
  %ptradd530 = getelementptr inbounds i8, ptr %244, i64 %add517, !dbg !1786
  %247 = load i8, ptr %ptradd530, align 1, !dbg !1786
  store i8 %247, ptr %c456, align 1, !dbg !1786
  %eq531 = icmp eq i8 %247, 48, !dbg !1786
  br label %and.phi532, !dbg !1786

and.phi532:                                       ; preds = %checkok529, %loop.cond513
  %val533 = phi i1 [ false, %loop.cond513 ], [ %eq531, %checkok529 ], !dbg !1786
  br i1 %val533, label %loop.body534, label %loop.exit536, !dbg !1786

loop.body534:                                     ; preds = %and.phi532
  %248 = load i64, ptr %lrp, align 8, !dbg !1788
  %sub535 = sub i64 %248, 1, !dbg !1788
  store i64 %sub535, ptr %lrp, align 8, !dbg !1788
  br label %loop.cond513, !dbg !1788

loop.exit536:                                     ; preds = %and.phi532
  br label %if.exit537, !dbg !1788

if.exit537:                                       ; preds = %loop.exit536, %and.phi509
  br label %if.exit538, !dbg !1788

if.exit538:                                       ; preds = %if.exit537, %loop.exit480
  br label %loop.cond539, !dbg !1790

loop.cond539:                                     ; preds = %checkok679, %if.exit538
  %249 = load i8, ptr %c456, align 1, !dbg !1791
  %zext540 = zext i8 %249 to i32, !dbg !1791
  %sub541 = sub i32 %zext540, 48, !dbg !1791
  %lt542 = icmp ult i32 %sub541, 10, !dbg !1791
  br i1 %lt542, label %or.phi545, label %or.rhs543, !dbg !1791

or.rhs543:                                        ; preds = %loop.cond539
  %250 = load i8, ptr %c456, align 1, !dbg !1791
  %eq544 = icmp eq i8 %250, 46, !dbg !1791
  br label %or.phi545, !dbg !1791

or.phi545:                                        ; preds = %or.rhs543, %loop.cond539
  %val546 = phi i1 [ true, %loop.cond539 ], [ %eq544, %or.rhs543 ], !dbg !1791
  br i1 %val546, label %loop.body547, label %loop.exit681, !dbg !1791

loop.body547:                                     ; preds = %or.phi545
  store i8 1, ptr %switch548, align 1
  br label %switch.entry549

switch.entry549:                                  ; preds = %loop.body547
  %251 = load i8, ptr %switch548, align 1
  %252 = trunc i8 %251 to i1
  %253 = load i8, ptr %c456, align 1, !dbg !1793
  %eq550 = icmp eq i8 %253, 46, !dbg !1793
  %eq551 = icmp eq i1 %eq550, %252, !dbg !1793
  br i1 %eq551, label %switch.case552, label %next_if555, !dbg !1793

switch.case552:                                   ; preds = %switch.entry549
  %254 = load i8, ptr %got_rad444, align 1, !dbg !1796
  %255 = trunc i8 %254 to i1, !dbg !1796
  br i1 %255, label %if.then553, label %if.exit554, !dbg !1796

if.then553:                                       ; preds = %switch.case552
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1796
  br label %err_retblock, !dbg !1796

if.exit554:                                       ; preds = %switch.case552
  store i8 1, ptr %got_rad444, align 1, !dbg !1798
  %256 = load i64, ptr %dc445, align 8, !dbg !1799
  store i64 %256, ptr %lrp, align 8, !dbg !1799
  br label %switch.exit656, !dbg !1799

next_if555:                                       ; preds = %switch.entry549
  %257 = load i32, ptr %k, align 4, !dbg !1800
  %lt556 = icmp slt i32 %257, 125, !dbg !1800
  %eq557 = icmp eq i1 %lt556, %252, !dbg !1800
  br i1 %eq557, label %switch.case558, label %next_if649, !dbg !1800

switch.case558:                                   ; preds = %next_if555
  %258 = load i64, ptr %dc445, align 8, !dbg !1801
  %add559 = add i64 %258, 1, !dbg !1801
  store i64 %add559, ptr %dc445, align 8, !dbg !1801
  %259 = load i8, ptr %c456, align 1, !dbg !1803
  %neq560 = icmp ne i8 %259, 48, !dbg !1803
  br i1 %neq560, label %if.then561, label %if.exit563, !dbg !1803

if.then561:                                       ; preds = %switch.case558
  %260 = load i64, ptr %dc445, align 8, !dbg !1803
  %trunc562 = trunc i64 %260 to i32, !dbg !1803
  store i32 %trunc562, ptr %lnz, align 4, !dbg !1803
  br label %if.exit563, !dbg !1803

if.exit563:                                       ; preds = %if.then561, %switch.case558
  %261 = load i32, ptr %j, align 4, !dbg !1804
  %i2b564 = icmp ne i32 %261, 0, !dbg !1804
  br i1 %i2b564, label %if.then565, label %if.else616, !dbg !1804

if.then565:                                       ; preds = %if.exit563
  %262 = load i32, ptr %k, align 4, !dbg !1805
  %sext = sext i32 %262 to i64, !dbg !1805
  %lt566 = icmp slt i64 %sext, 0, !dbg !1805
  %263 = call i1 @llvm.expect.i1(i1 %lt566, i1 false), !dbg !1805
  br i1 %263, label %panic567, label %checkok575, !dbg !1805

checkok575:                                       ; preds = %if.then565
  %ge576 = icmp sge i64 %sext, 128, !dbg !1805
  %264 = call i1 @llvm.expect.i1(i1 %ge576, i1 false), !dbg !1805
  br i1 %264, label %panic577, label %checkok587, !dbg !1805

checkok587:                                       ; preds = %checkok575
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext, !dbg !1805
  %265 = load i32, ptr %k, align 4, !dbg !1805
  %sext588 = sext i32 %265 to i64, !dbg !1805
  %lt589 = icmp slt i64 %sext588, 0, !dbg !1805
  %266 = call i1 @llvm.expect.i1(i1 %lt589, i1 false), !dbg !1805
  br i1 %266, label %panic590, label %checkok598, !dbg !1805

checkok598:                                       ; preds = %checkok587
  %ge599 = icmp sge i64 %sext588, 128, !dbg !1805
  %267 = call i1 @llvm.expect.i1(i1 %ge599, i1 false), !dbg !1805
  br i1 %267, label %panic600, label %checkok610, !dbg !1805

checkok610:                                       ; preds = %checkok598
  %ptroffset611 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext588, !dbg !1805
  %268 = load i32, ptr %ptroffset611, align 4, !dbg !1805
  %mul612 = mul i32 %268, 10, !dbg !1805
  %269 = load i8, ptr %c456, align 1, !dbg !1805
  %zext613 = zext i8 %269 to i32, !dbg !1805
  %add614 = add i32 %mul612, %zext613, !dbg !1805
  %sub615 = sub i32 %add614, 48, !dbg !1805
  store i32 %sub615, ptr %ptroffset, align 4, !dbg !1805
  br label %if.exit643, !dbg !1805

if.else616:                                       ; preds = %if.exit563
  %270 = load i32, ptr %k, align 4, !dbg !1807
  %sext617 = sext i32 %270 to i64, !dbg !1807
  %lt618 = icmp slt i64 %sext617, 0, !dbg !1807
  %271 = call i1 @llvm.expect.i1(i1 %lt618, i1 false), !dbg !1807
  br i1 %271, label %panic619, label %checkok627, !dbg !1807

checkok627:                                       ; preds = %if.else616
  %ge628 = icmp sge i64 %sext617, 128, !dbg !1807
  %272 = call i1 @llvm.expect.i1(i1 %ge628, i1 false), !dbg !1807
  br i1 %272, label %panic629, label %checkok639, !dbg !1807

checkok639:                                       ; preds = %checkok627
  %ptroffset640 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext617, !dbg !1807
  %273 = load i8, ptr %c456, align 1, !dbg !1807
  %zext641 = zext i8 %273 to i32, !dbg !1807
  %sub642 = sub i32 %zext641, 48, !dbg !1807
  store i32 %sub642, ptr %ptroffset640, align 4, !dbg !1807
  br label %if.exit643, !dbg !1807

if.exit643:                                       ; preds = %checkok639, %checkok610
  %274 = load i32, ptr %j, align 4, !dbg !1809
  %add644 = add i32 %274, 1, !dbg !1809
  store i32 %add644, ptr %j, align 4, !dbg !1809
  %eq645 = icmp eq i32 %add644, 9, !dbg !1809
  br i1 %eq645, label %if.then646, label %if.exit648, !dbg !1809

if.then646:                                       ; preds = %if.exit643
  %275 = load i32, ptr %k, align 4, !dbg !1810
  %add647 = add i32 %275, 1, !dbg !1810
  store i32 %add647, ptr %k, align 4, !dbg !1810
  store i32 0, ptr %j, align 4, !dbg !1812
  br label %if.exit648, !dbg !1812

if.exit648:                                       ; preds = %if.then646, %if.exit643
  store i8 1, ptr %got_digit429, align 1, !dbg !1813
  br label %switch.exit656, !dbg !1813

next_if649:                                       ; preds = %next_if555
  br label %switch.default, !dbg !1813

switch.default:                                   ; preds = %next_if649
  %276 = load i64, ptr %dc445, align 8, !dbg !1814
  %add650 = add i64 %276, 1, !dbg !1814
  store i64 %add650, ptr %dc445, align 8, !dbg !1814
  %277 = load i8, ptr %c456, align 1, !dbg !1816
  %neq651 = icmp ne i8 %277, 48, !dbg !1816
  br i1 %neq651, label %if.then652, label %if.exit655, !dbg !1816

if.then652:                                       ; preds = %switch.default
  %ptradd653 = getelementptr inbounds i8, ptr %x427, i64 496, !dbg !1816
  %278 = load i32, ptr %ptradd653, align 4, !dbg !1816
  %or654 = or i32 %278, 1, !dbg !1816
  store i32 %or654, ptr %ptradd653, align 4, !dbg !1816
  br label %if.exit655, !dbg !1816

if.exit655:                                       ; preds = %if.then652, %switch.default
  br label %switch.exit656, !dbg !1816

switch.exit656:                                   ; preds = %if.exit655, %if.exit648, %if.exit554
  %279 = load i64, ptr %index428, align 8, !dbg !1817
  %280 = load i64, ptr %last_char448, align 8, !dbg !1817
  %eq657 = icmp eq i64 %279, %280, !dbg !1817
  br i1 %eq657, label %if.then658, label %if.exit659, !dbg !1817

if.then658:                                       ; preds = %switch.exit656
  br label %loop.exit681, !dbg !1817

if.exit659:                                       ; preds = %switch.exit656
  %281 = load i64, ptr %index428, align 8, !dbg !1818
  %282 = load i64, ptr %last_char448, align 8, !dbg !1818
  %lt660 = icmp ult i64 %281, %282, !dbg !1818
  br i1 %lt660, label %assert_ok665, label %assert_fail661, !dbg !1818

assert_fail661:                                   ; preds = %if.exit659
  store %"char[]" { ptr @.panic_msg.79, i64 16 }, ptr %indirectarg662, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg663, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg664, align 8
  %283 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %283(ptr align 8 %indirectarg662, ptr align 8 %indirectarg663, ptr align 8 %indirectarg664, i32 112), !dbg !1818
  unreachable, !dbg !1818

assert_ok665:                                     ; preds = %if.exit659
  %ptradd666 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !1819
  %284 = load i64, ptr %ptradd666, align 8, !dbg !1819
  %285 = load ptr, ptr %chars419, align 8, !dbg !1819
  %286 = load i64, ptr %index428, align 8, !dbg !1819
  %add667 = add i64 %286, 1, !dbg !1819
  store i64 %add667, ptr %index428, align 8, !dbg !1819
  %ge668 = icmp uge i64 %add667, %284, !dbg !1819
  %287 = call i1 @llvm.expect.i1(i1 %ge668, i1 false), !dbg !1819
  br i1 %287, label %panic669, label %checkok679, !dbg !1819

checkok679:                                       ; preds = %assert_ok665
  %ptradd680 = getelementptr inbounds i8, ptr %285, i64 %add667, !dbg !1819
  %288 = load i8, ptr %ptradd680, align 1, !dbg !1819
  store i8 %288, ptr %c456, align 1, !dbg !1819
  br label %loop.cond539, !dbg !1819

loop.exit681:                                     ; preds = %if.then658, %or.phi545
  %289 = load i8, ptr %got_rad444, align 1, !dbg !1820
  %290 = trunc i8 %289 to i1, !dbg !1820
  %not682 = xor i1 %290, true, !dbg !1820
  br i1 %not682, label %if.then683, label %if.exit684, !dbg !1820

if.then683:                                       ; preds = %loop.exit681
  %291 = load i64, ptr %dc445, align 8, !dbg !1820
  store i64 %291, ptr %lrp, align 8, !dbg !1820
  br label %if.exit684, !dbg !1820

if.exit684:                                       ; preds = %if.then683, %loop.exit681
  %292 = load i8, ptr %got_digit429, align 1, !dbg !1821
  %293 = trunc i8 %292 to i1, !dbg !1821
  %not685 = xor i1 %293, true, !dbg !1821
  br i1 %not685, label %if.then686, label %if.exit687, !dbg !1821

if.then686:                                       ; preds = %if.exit684
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1821
  br label %err_retblock, !dbg !1821

if.exit687:                                       ; preds = %if.exit684
  %294 = load i8, ptr %c456, align 1, !dbg !1822
  %zext688 = zext i8 %294 to i32, !dbg !1822
  %or689 = or i32 %zext688, 32, !dbg !1822
  %eq690 = icmp eq i32 %or689, 101, !dbg !1822
  %check691 = icmp sge i32 %or689, 0, !dbg !1822
  %siui-eq692 = and i1 %check691, %eq690, !dbg !1822
  br i1 %siui-eq692, label %if.then693, label %if.else731, !dbg !1822

if.then693:                                       ; preds = %if.exit687
  %295 = load i64, ptr %last_char448, align 8, !dbg !1823
  %296 = load i64, ptr %index428, align 8, !dbg !1823
  %eq694 = icmp eq i64 %295, %296, !dbg !1823
  br i1 %eq694, label %if.then695, label %if.exit696, !dbg !1823

if.then695:                                       ; preds = %if.then693
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1823
  br label %err_retblock, !dbg !1823

if.exit696:                                       ; preds = %if.then693
    #dbg_declare(ptr %e10, !1825, !DIExpression(), !1826)
  %297 = load %"char[]", ptr %chars419, align 8, !dbg !1826
  %298 = extractvalue %"char[]" %297, 0, !dbg !1826
  %299 = load i64, ptr %index428, align 8, !dbg !1826
  %add697 = add i64 %299, 1, !dbg !1826
  %300 = extractvalue %"char[]" %297, 1, !dbg !1826
  %gt698 = icmp sgt i64 %add697, %300, !dbg !1826
  %301 = call i1 @llvm.expect.i1(i1 %gt698, i1 false), !dbg !1826
  br i1 %301, label %panic699, label %checkok709, !dbg !1826

checkok709:                                       ; preds = %if.exit696
  %underflow710 = icmp slt i64 %add697, 0, !dbg !1826
  %302 = call i1 @llvm.expect.i1(i1 %underflow710, i1 false), !dbg !1826
  br i1 %302, label %panic711, label %checkok719, !dbg !1826

checkok719:                                       ; preds = %checkok709
  %size720 = sub i64 %300, %add697, !dbg !1826
  %ptradd721 = getelementptr inbounds i8, ptr %298, i64 %add697, !dbg !1826
  %303 = insertvalue %"char[]" undef, ptr %ptradd721, 0, !dbg !1826
  %304 = insertvalue %"char[]" %303, i64 %size720, 1, !dbg !1826
  store %"char[]" %304, ptr %indirectarg723, align 8
  %305 = call i64 @std.core.String.to_long(ptr %retparam722, ptr align 8 %indirectarg723, i32 10), !dbg !1826
  %not_err724 = icmp eq i64 %305, 0, !dbg !1826
  %306 = call i1 @llvm.expect.i1(i1 %not_err724, i1 true), !dbg !1826
  br i1 %306, label %after_check725, label %else_block726, !dbg !1826

after_check725:                                   ; preds = %checkok719
  %307 = load i64, ptr %retparam722, align 8, !dbg !1826
  br label %phi_block729, !dbg !1826

else_block726:                                    ; preds = %checkok719
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var727, align 8, !dbg !1826
  br label %guard_block728, !dbg !1826

guard_block728:                                   ; preds = %else_block726
  %308 = load i64, ptr %error_var727, align 8, !dbg !1826
  store i64 %308, ptr %reterr, align 8, !dbg !1826
  br label %err_retblock, !dbg !1826

phi_block729:                                     ; preds = %after_check725
  store i64 %307, ptr %e10, align 8, !dbg !1826
  %309 = load i64, ptr %lrp, align 8, !dbg !1827
  %310 = load i64, ptr %e10, align 8, !dbg !1827
  %add730 = add i64 %309, %310, !dbg !1827
  store i64 %add730, ptr %lrp, align 8, !dbg !1827
  br label %if.exit735, !dbg !1827

if.else731:                                       ; preds = %if.exit687
  %311 = load i64, ptr %index428, align 8, !dbg !1828
  %312 = load i64, ptr %last_char448, align 8, !dbg !1828
  %neq732 = icmp ne i64 %311, %312, !dbg !1828
  br i1 %neq732, label %if.then733, label %if.exit734, !dbg !1828

if.then733:                                       ; preds = %if.else731
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !1829
  br label %err_retblock, !dbg !1829

if.exit734:                                       ; preds = %if.else731
  br label %if.exit735, !dbg !1829

if.exit735:                                       ; preds = %if.exit734, %phi_block729
  %313 = load i32, ptr %x427, align 4, !dbg !1831
  %i2nb736 = icmp eq i32 %313, 0, !dbg !1831
  br i1 %i2nb736, label %if.then737, label %if.exit740, !dbg !1831

if.then737:                                       ; preds = %if.exit735
  %314 = load i32, ptr %sign420, align 4, !dbg !1831
  %sifp738 = sitofp i32 %314 to double, !dbg !1831
  %fmul739 = fmul double %sifp738, 0.000000e+00, !dbg !1831
  store double %fmul739, ptr %blockret421, align 8, !dbg !1831
  br label %expr_block.exit1945, !dbg !1831

if.exit740:                                       ; preds = %if.exit735
  %315 = load i64, ptr %lrp, align 8, !dbg !1832
  %316 = load i64, ptr %dc445, align 8, !dbg !1832
  %eq741 = icmp eq i64 %315, %316, !dbg !1832
  br i1 %eq741, label %and.rhs742, label %and.phi744, !dbg !1832

and.rhs742:                                       ; preds = %if.exit740
  %317 = load i64, ptr %dc445, align 8, !dbg !1832
  %lt743 = icmp slt i64 %317, 10, !dbg !1832
  br label %and.phi744, !dbg !1832

and.phi744:                                       ; preds = %and.rhs742, %if.exit740
  %val745 = phi i1 [ false, %if.exit740 ], [ %lt743, %and.rhs742 ], !dbg !1832
  br i1 %val745, label %and.rhs746, label %and.phi752, !dbg !1832

and.rhs746:                                       ; preds = %and.phi744
  br i1 true, label %or.phi750, label %or.rhs747, !dbg !1832

or.rhs747:                                        ; preds = %and.rhs746
  %318 = load i32, ptr %x427, align 4, !dbg !1832
  %zext748 = zext i32 %318 to i64, !dbg !1832
  %lshr = lshr i64 %zext748, 53, !dbg !1832
  %319 = freeze i64 %lshr, !dbg !1832
  %eq749 = icmp eq i64 0, %319, !dbg !1832
  br label %or.phi750, !dbg !1832

or.phi750:                                        ; preds = %or.rhs747, %and.rhs746
  %val751 = phi i1 [ true, %and.rhs746 ], [ %eq749, %or.rhs747 ], !dbg !1832
  br label %and.phi752, !dbg !1832

and.phi752:                                       ; preds = %or.phi750, %and.phi744
  %val753 = phi i1 [ false, %and.phi744 ], [ %val751, %or.phi750 ], !dbg !1832
  br i1 %val753, label %if.then754, label %if.exit758, !dbg !1832

if.then754:                                       ; preds = %and.phi752
  %320 = load i32, ptr %sign420, align 4, !dbg !1832
  %sifp755 = sitofp i32 %320 to double, !dbg !1832
  %321 = load i32, ptr %x427, align 4, !dbg !1832
  %uifp756 = uitofp i32 %321 to double, !dbg !1832
  %fmul757 = fmul double %sifp755, %uifp756, !dbg !1832
  store double %fmul757, ptr %blockret421, align 8, !dbg !1832
  br label %expr_block.exit1945, !dbg !1832

if.exit758:                                       ; preds = %and.phi752
  %322 = load i64, ptr %lrp, align 8, !dbg !1833
  %gt759 = icmp sgt i64 %322, 537, !dbg !1833
  br i1 %gt759, label %if.then760, label %if.exit761, !dbg !1833

if.then760:                                       ; preds = %if.exit758
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !1833
  br label %err_retblock, !dbg !1833

if.exit761:                                       ; preds = %if.exit758
  %323 = load i64, ptr %lrp, align 8, !dbg !1834
  %lt762 = icmp slt i64 %323, -1180, !dbg !1834
  br i1 %lt762, label %if.then763, label %if.exit764, !dbg !1834

if.then763:                                       ; preds = %if.exit761
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !1834
  br label %err_retblock, !dbg !1834

if.exit764:                                       ; preds = %if.exit761
  %324 = load i32, ptr %j, align 4, !dbg !1835
  %i2b765 = icmp ne i32 %324, 0, !dbg !1835
  br i1 %i2b765, label %if.then766, label %if.exit798, !dbg !1835

if.then766:                                       ; preds = %if.exit764
  br label %loop.cond767, !dbg !1836

loop.cond767:                                     ; preds = %checkok792, %if.then766
  %325 = load i32, ptr %j, align 4, !dbg !1838
  %lt768 = icmp slt i32 %325, 9, !dbg !1838
  br i1 %lt768, label %loop.body769, label %loop.exit796, !dbg !1838

loop.body769:                                     ; preds = %loop.cond767
  %326 = load i32, ptr %k, align 4, !dbg !1838
  %sext770 = sext i32 %326 to i64, !dbg !1838
  %lt771 = icmp slt i64 %sext770, 0, !dbg !1838
  %327 = call i1 @llvm.expect.i1(i1 %lt771, i1 false), !dbg !1838
  br i1 %327, label %panic772, label %checkok780, !dbg !1838

checkok780:                                       ; preds = %loop.body769
  %ge781 = icmp sge i64 %sext770, 128, !dbg !1838
  %328 = call i1 @llvm.expect.i1(i1 %ge781, i1 false), !dbg !1838
  br i1 %328, label %panic782, label %checkok792, !dbg !1838

checkok792:                                       ; preds = %checkok780
  %ptroffset793 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext770, !dbg !1838
  %329 = load i32, ptr %ptroffset793, align 4, !dbg !1838
  %mul794 = mul i32 %329, 10, !dbg !1838
  store i32 %mul794, ptr %ptroffset793, align 4, !dbg !1838
  %330 = load i32, ptr %j, align 4, !dbg !1838
  %add795 = add i32 %330, 1, !dbg !1838
  store i32 %add795, ptr %j, align 4, !dbg !1838
  br label %loop.cond767, !dbg !1838

loop.exit796:                                     ; preds = %loop.cond767
  %331 = load i32, ptr %k, align 4, !dbg !1840
  %add797 = add i32 %331, 1, !dbg !1840
  store i32 %add797, ptr %k, align 4, !dbg !1840
  store i32 0, ptr %j, align 4, !dbg !1841
  br label %if.exit798, !dbg !1841

if.exit798:                                       ; preds = %loop.exit796, %if.exit764
    #dbg_declare(ptr %a, !1842, !DIExpression(), !1843)
  store i32 0, ptr %a, align 4, !dbg !1843
    #dbg_declare(ptr %z, !1844, !DIExpression(), !1845)
  %332 = load i32, ptr %k, align 4, !dbg !1845
  store i32 %332, ptr %z, align 4, !dbg !1845
    #dbg_declare(ptr %e2799, !1846, !DIExpression(), !1847)
  store i32 0, ptr %e2799, align 4, !dbg !1847
    #dbg_declare(ptr %rp800, !1848, !DIExpression(), !1849)
  %333 = load i64, ptr %lrp, align 8, !dbg !1849
  store i64 %333, ptr %rp800, align 8, !dbg !1849
  %334 = load i32, ptr %lnz, align 4, !dbg !1850
  %lt801 = icmp slt i32 %334, 9, !dbg !1850
  br i1 %lt801, label %and.rhs802, label %and.phi804, !dbg !1850

and.rhs802:                                       ; preds = %if.exit798
  %335 = load i32, ptr %lnz, align 4, !dbg !1850
  %sext803 = sext i32 %335 to i64, !dbg !1850
  %336 = load i64, ptr %rp800, align 8, !dbg !1850
  %le = icmp sle i64 %sext803, %336, !dbg !1850
  br label %and.phi804, !dbg !1850

and.phi804:                                       ; preds = %and.rhs802, %if.exit798
  %val805 = phi i1 [ false, %if.exit798 ], [ %le, %and.rhs802 ], !dbg !1850
  br i1 %val805, label %and.rhs806, label %and.phi808, !dbg !1850

and.rhs806:                                       ; preds = %and.phi804
  %337 = load i64, ptr %rp800, align 8, !dbg !1850
  %lt807 = icmp slt i64 %337, 18, !dbg !1850
  br label %and.phi808, !dbg !1850

and.phi808:                                       ; preds = %and.rhs806, %and.phi804
  %val809 = phi i1 [ false, %and.phi804 ], [ %lt807, %and.rhs806 ], !dbg !1850
  br i1 %val809, label %if.then810, label %if.exit904, !dbg !1850

if.then810:                                       ; preds = %and.phi808
  %338 = load i64, ptr %rp800, align 8, !dbg !1851
  %eq811 = icmp eq i64 %338, 9, !dbg !1851
  br i1 %eq811, label %if.then812, label %if.exit816, !dbg !1851

if.then812:                                       ; preds = %if.then810
  %339 = load i32, ptr %sign420, align 4, !dbg !1851
  %sifp813 = sitofp i32 %339 to double, !dbg !1851
  %340 = load i32, ptr %x427, align 4, !dbg !1851
  %uifp814 = uitofp i32 %340 to double, !dbg !1851
  %fmul815 = fmul double %sifp813, %uifp814, !dbg !1851
  store double %fmul815, ptr %blockret421, align 8, !dbg !1851
  br label %expr_block.exit1945, !dbg !1851

if.exit816:                                       ; preds = %if.then810
  %341 = load i64, ptr %rp800, align 8, !dbg !1853
  %lt817 = icmp slt i64 %341, 9, !dbg !1853
  br i1 %lt817, label %if.then818, label %if.exit853, !dbg !1853

if.then818:                                       ; preds = %if.exit816
  %342 = load i32, ptr %sign420, align 4, !dbg !1853
  %sifp819 = sitofp i32 %342 to double, !dbg !1853
  %343 = load i32, ptr %x427, align 4, !dbg !1853
  %uifp820 = uitofp i32 %343 to double, !dbg !1853
  %fmul821 = fmul double %sifp819, %uifp820, !dbg !1853
  %344 = load i64, ptr %rp800, align 8, !dbg !1853
  %sub822 = sub i64 8, %344, !dbg !1853
  %lt823 = icmp slt i64 %sub822, 0, !dbg !1853
  %345 = call i1 @llvm.expect.i1(i1 %lt823, i1 false), !dbg !1853
  br i1 %345, label %panic824, label %checkok832, !dbg !1853

checkok832:                                       ; preds = %if.then818
  %ge833 = icmp sge i64 %sub822, 8, !dbg !1853
  %346 = call i1 @llvm.expect.i1(i1 %ge833, i1 false), !dbg !1853
  br i1 %346, label %panic834, label %checkok844, !dbg !1853

checkok844:                                       ; preds = %checkok832
  %ptroffset845 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub822, !dbg !1853
  %347 = load i32, ptr %ptroffset845, align 4, !dbg !1853
  %sifp846 = sitofp i32 %347 to double, !dbg !1853
  %zero = fcmp ueq double %sifp846, 0.000000e+00, !dbg !1853
  %348 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1853
  br i1 %348, label %panic847, label %checkok851, !dbg !1853

checkok851:                                       ; preds = %checkok844
  %fdiv852 = fdiv double %fmul821, %sifp846, !dbg !1853
  store double %fdiv852, ptr %blockret421, align 8, !dbg !1853
  br label %expr_block.exit1945, !dbg !1853

if.exit853:                                       ; preds = %if.exit816
    #dbg_declare(ptr %bitlim, !1854, !DIExpression(), !1855)
  %349 = load i64, ptr %rp800, align 8, !dbg !1855
  %sub854 = sub i64 %349, 9, !dbg !1855
  %trunc855 = trunc i64 %sub854 to i32, !dbg !1855
  %mul856 = mul i32 3, %trunc855, !dbg !1855
  %sub857 = sub i32 53, %mul856, !dbg !1855
  store i32 %sub857, ptr %bitlim, align 4, !dbg !1855
  %350 = load i32, ptr %bitlim, align 4, !dbg !1856
  %gt858 = icmp sgt i32 %350, 30, !dbg !1856
  br i1 %gt858, label %or.phi871, label %or.rhs859, !dbg !1856

or.rhs859:                                        ; preds = %if.exit853
  %351 = load i32, ptr %x427, align 4, !dbg !1856
  %352 = load i32, ptr %bitlim, align 4, !dbg !1856
  %shift_exceeds = icmp uge i32 %352, 32, !dbg !1856
  %353 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !1856
  br i1 %353, label %panic860, label %checkok868, !dbg !1856

checkok868:                                       ; preds = %or.rhs859
  %lshr869 = lshr i32 %351, %352, !dbg !1856
  %354 = freeze i32 %lshr869, !dbg !1856
  %eq870 = icmp eq i32 0, %354, !dbg !1856
  br label %or.phi871, !dbg !1856

or.phi871:                                        ; preds = %checkok868, %if.exit853
  %val872 = phi i1 [ true, %if.exit853 ], [ %eq870, %checkok868 ], !dbg !1856
  br i1 %val872, label %if.then873, label %if.exit903, !dbg !1856

if.then873:                                       ; preds = %or.phi871
  %355 = load i32, ptr %sign420, align 4, !dbg !1856
  %sifp874 = sitofp i32 %355 to double, !dbg !1856
  %356 = load i32, ptr %x427, align 4, !dbg !1856
  %uifp875 = uitofp i32 %356 to double, !dbg !1856
  %fmul876 = fmul double %sifp874, %uifp875, !dbg !1856
  %357 = load i64, ptr %rp800, align 8, !dbg !1856
  %sub877 = sub i64 %357, 10, !dbg !1856
  %lt878 = icmp slt i64 %sub877, 0, !dbg !1856
  %358 = call i1 @llvm.expect.i1(i1 %lt878, i1 false), !dbg !1856
  br i1 %358, label %panic879, label %checkok887, !dbg !1856

checkok887:                                       ; preds = %if.then873
  %ge888 = icmp sge i64 %sub877, 8, !dbg !1856
  %359 = call i1 @llvm.expect.i1(i1 %ge888, i1 false), !dbg !1856
  br i1 %359, label %panic889, label %checkok899, !dbg !1856

checkok899:                                       ; preds = %checkok887
  %ptroffset900 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub877, !dbg !1856
  %360 = load i32, ptr %ptroffset900, align 4, !dbg !1856
  %sifp901 = sitofp i32 %360 to double, !dbg !1856
  %fmul902 = fmul double %fmul876, %sifp901, !dbg !1856
  store double %fmul902, ptr %blockret421, align 8, !dbg !1856
  br label %expr_block.exit1945, !dbg !1856

if.exit903:                                       ; preds = %or.phi871
  br label %if.exit904, !dbg !1856

if.exit904:                                       ; preds = %if.exit903, %and.phi808
  %361 = load i64, ptr %rp800, align 8, !dbg !1857
  %smod = srem i64 %361, 9, !dbg !1857
  %i2b905 = icmp ne i64 %smod, 0, !dbg !1857
  br i1 %i2b905, label %if.then906, label %if.exit1099, !dbg !1857

if.then906:                                       ; preds = %if.exit904
    #dbg_declare(ptr %rpm9, !1858, !DIExpression(), !1860)
  %362 = load i64, ptr %rp800, align 8, !dbg !1860
  %ge907 = icmp sge i64 %362, 0, !dbg !1860
  br i1 %ge907, label %cond.lhs, label %cond.rhs, !dbg !1860

cond.lhs:                                         ; preds = %if.then906
  %363 = load i64, ptr %rp800, align 8, !dbg !1860
  %smod908 = srem i64 %363, 9, !dbg !1860
  br label %cond.phi, !dbg !1860

cond.rhs:                                         ; preds = %if.then906
  %364 = load i64, ptr %rp800, align 8, !dbg !1860
  %smod909 = srem i64 %364, 9, !dbg !1860
  %add910 = add i64 %smod909, 9, !dbg !1860
  br label %cond.phi, !dbg !1860

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val911 = phi i64 [ %smod908, %cond.lhs ], [ %add910, %cond.rhs ], !dbg !1860
  store i64 %val911, ptr %rpm9, align 8, !dbg !1860
    #dbg_declare(ptr %p10, !1861, !DIExpression(), !1862)
  %365 = load i64, ptr %rpm9, align 8, !dbg !1862
  %sub912 = sub i64 8, %365, !dbg !1862
  %lt913 = icmp slt i64 %sub912, 0, !dbg !1862
  %366 = call i1 @llvm.expect.i1(i1 %lt913, i1 false), !dbg !1862
  br i1 %366, label %panic914, label %checkok922, !dbg !1862

checkok922:                                       ; preds = %cond.phi
  %ge923 = icmp sge i64 %sub912, 8, !dbg !1862
  %367 = call i1 @llvm.expect.i1(i1 %ge923, i1 false), !dbg !1862
  br i1 %367, label %panic924, label %checkok934, !dbg !1862

checkok934:                                       ; preds = %checkok922
  %ptroffset935 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub912, !dbg !1862
  %368 = load i32, ptr %ptroffset935, align 4, !dbg !1862
  store i32 %368, ptr %p10, align 4, !dbg !1862
    #dbg_declare(ptr %carry, !1863, !DIExpression(), !1864)
  store i32 0, ptr %carry, align 4, !dbg !1864
  %369 = load i32, ptr %a, align 4, !dbg !1865
  store i32 %369, ptr %k, align 4, !dbg !1865
  br label %loop.cond936, !dbg !1865

loop.cond936:                                     ; preds = %if.exit1066, %checkok934
  %370 = load i32, ptr %k, align 4, !dbg !1865
  %371 = load i32, ptr %z, align 4, !dbg !1865
  %neq937 = icmp ne i32 %370, %371, !dbg !1865
  br i1 %neq937, label %loop.body938, label %loop.exit1068, !dbg !1865

loop.body938:                                     ; preds = %loop.cond936
    #dbg_declare(ptr %tmp, !1867, !DIExpression(), !1869)
  %372 = load i32, ptr %k, align 4, !dbg !1869
  %sext939 = sext i32 %372 to i64, !dbg !1869
  %lt940 = icmp slt i64 %sext939, 0, !dbg !1869
  %373 = call i1 @llvm.expect.i1(i1 %lt940, i1 false), !dbg !1869
  br i1 %373, label %panic941, label %checkok949, !dbg !1869

checkok949:                                       ; preds = %loop.body938
  %ge950 = icmp sge i64 %sext939, 128, !dbg !1869
  %374 = call i1 @llvm.expect.i1(i1 %ge950, i1 false), !dbg !1869
  br i1 %374, label %panic951, label %checkok961, !dbg !1869

checkok961:                                       ; preds = %checkok949
  %ptroffset962 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext939, !dbg !1869
  %375 = load i32, ptr %ptroffset962, align 4, !dbg !1869
  %376 = load i32, ptr %p10, align 4, !dbg !1869
  %zero963 = icmp eq i32 %376, 0, !dbg !1869
  %377 = call i1 @llvm.expect.i1(i1 %zero963, i1 false), !dbg !1869
  br i1 %377, label %panic964, label %checkok968, !dbg !1869

checkok968:                                       ; preds = %checkok961
  %smod969 = srem i32 %375, %376, !dbg !1869
  store i32 %smod969, ptr %tmp, align 4, !dbg !1869
  %378 = load i32, ptr %k, align 4, !dbg !1870
  %sext970 = sext i32 %378 to i64, !dbg !1870
  %lt971 = icmp slt i64 %sext970, 0, !dbg !1870
  %379 = call i1 @llvm.expect.i1(i1 %lt971, i1 false), !dbg !1870
  br i1 %379, label %panic972, label %checkok980, !dbg !1870

checkok980:                                       ; preds = %checkok968
  %ge981 = icmp sge i64 %sext970, 128, !dbg !1870
  %380 = call i1 @llvm.expect.i1(i1 %ge981, i1 false), !dbg !1870
  br i1 %380, label %panic982, label %checkok992, !dbg !1870

checkok992:                                       ; preds = %checkok980
  %ptroffset993 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext970, !dbg !1870
  %381 = load i32, ptr %k, align 4, !dbg !1870
  %sext994 = sext i32 %381 to i64, !dbg !1870
  %lt995 = icmp slt i64 %sext994, 0, !dbg !1870
  %382 = call i1 @llvm.expect.i1(i1 %lt995, i1 false), !dbg !1870
  br i1 %382, label %panic996, label %checkok1004, !dbg !1870

checkok1004:                                      ; preds = %checkok992
  %ge1005 = icmp sge i64 %sext994, 128, !dbg !1870
  %383 = call i1 @llvm.expect.i1(i1 %ge1005, i1 false), !dbg !1870
  br i1 %383, label %panic1006, label %checkok1016, !dbg !1870

checkok1016:                                      ; preds = %checkok1004
  %ptroffset1017 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext994, !dbg !1870
  %384 = load i32, ptr %ptroffset1017, align 4, !dbg !1870
  %385 = load i32, ptr %p10, align 4, !dbg !1870
  %zero1018 = icmp eq i32 %385, 0, !dbg !1870
  %386 = call i1 @llvm.expect.i1(i1 %zero1018, i1 false), !dbg !1870
  br i1 %386, label %panic1019, label %checkok1023, !dbg !1870

checkok1023:                                      ; preds = %checkok1016
  %sdiv = sdiv i32 %384, %385, !dbg !1870
  %387 = load i32, ptr %carry, align 4, !dbg !1870
  %add1024 = add i32 %sdiv, %387, !dbg !1870
  store i32 %add1024, ptr %ptroffset993, align 4, !dbg !1870
  %388 = load i32, ptr %p10, align 4, !dbg !1871
  %zero1025 = icmp eq i32 %388, 0, !dbg !1871
  %389 = call i1 @llvm.expect.i1(i1 %zero1025, i1 false), !dbg !1871
  br i1 %389, label %panic1026, label %checkok1030, !dbg !1871

checkok1030:                                      ; preds = %checkok1023
  %sdiv1031 = sdiv i32 1000000000, %388, !dbg !1871
  %390 = load i32, ptr %tmp, align 4, !dbg !1871
  %mul1032 = mul i32 %sdiv1031, %390, !dbg !1871
  store i32 %mul1032, ptr %carry, align 4, !dbg !1871
  %391 = load i32, ptr %k, align 4, !dbg !1872
  %392 = load i32, ptr %a, align 4, !dbg !1872
  %eq1033 = icmp eq i32 %391, %392, !dbg !1872
  br i1 %eq1033, label %and.rhs1034, label %and.phi1060, !dbg !1872

and.rhs1034:                                      ; preds = %checkok1030
  %393 = load i32, ptr %k, align 4, !dbg !1872
  %sext1035 = sext i32 %393 to i64, !dbg !1872
  %lt1036 = icmp slt i64 %sext1035, 0, !dbg !1872
  %394 = call i1 @llvm.expect.i1(i1 %lt1036, i1 false), !dbg !1872
  br i1 %394, label %panic1037, label %checkok1045, !dbg !1872

checkok1045:                                      ; preds = %and.rhs1034
  %ge1046 = icmp sge i64 %sext1035, 128, !dbg !1872
  %395 = call i1 @llvm.expect.i1(i1 %ge1046, i1 false), !dbg !1872
  br i1 %395, label %panic1047, label %checkok1057, !dbg !1872

checkok1057:                                      ; preds = %checkok1045
  %ptroffset1058 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1035, !dbg !1872
  %396 = load i32, ptr %ptroffset1058, align 4, !dbg !1872
  %i2nb1059 = icmp eq i32 %396, 0, !dbg !1872
  br label %and.phi1060, !dbg !1872

and.phi1060:                                      ; preds = %checkok1057, %checkok1030
  %val1061 = phi i1 [ false, %checkok1030 ], [ %i2nb1059, %checkok1057 ], !dbg !1872
  br i1 %val1061, label %if.then1062, label %if.exit1066, !dbg !1872

if.then1062:                                      ; preds = %and.phi1060
  %397 = load i32, ptr %a, align 4, !dbg !1873
  %add1063 = add i32 %397, 1, !dbg !1873
  %and1064 = and i32 %add1063, 127, !dbg !1873
  store i32 %and1064, ptr %a, align 4, !dbg !1873
  %398 = load i64, ptr %rp800, align 8, !dbg !1875
  %sub1065 = sub i64 %398, 9, !dbg !1875
  store i64 %sub1065, ptr %rp800, align 8, !dbg !1875
  br label %if.exit1066, !dbg !1875

if.exit1066:                                      ; preds = %if.then1062, %and.phi1060
  %399 = load i32, ptr %k, align 4, !dbg !1865
  %add1067 = add i32 %399, 1, !dbg !1865
  store i32 %add1067, ptr %k, align 4, !dbg !1865
  br label %loop.cond936, !dbg !1865

loop.exit1068:                                    ; preds = %loop.cond936
  %400 = load i32, ptr %carry, align 4, !dbg !1876
  %i2b1069 = icmp ne i32 %400, 0, !dbg !1876
  br i1 %i2b1069, label %if.then1070, label %if.exit1096, !dbg !1876

if.then1070:                                      ; preds = %loop.exit1068
  %401 = load i32, ptr %z, align 4, !dbg !1876
  %add1071 = add i32 %401, 1, !dbg !1876
  store i32 %add1071, ptr %z, align 4, !dbg !1876
  %sext1072 = sext i32 %401 to i64, !dbg !1876
  %lt1073 = icmp slt i64 %sext1072, 0, !dbg !1876
  %402 = call i1 @llvm.expect.i1(i1 %lt1073, i1 false), !dbg !1876
  br i1 %402, label %panic1074, label %checkok1082, !dbg !1876

checkok1082:                                      ; preds = %if.then1070
  %ge1083 = icmp sge i64 %sext1072, 128, !dbg !1876
  %403 = call i1 @llvm.expect.i1(i1 %ge1083, i1 false), !dbg !1876
  br i1 %403, label %panic1084, label %checkok1094, !dbg !1876

checkok1094:                                      ; preds = %checkok1082
  %ptroffset1095 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1072, !dbg !1876
  %404 = load i32, ptr %carry, align 4, !dbg !1876
  store i32 %404, ptr %ptroffset1095, align 4, !dbg !1876
  br label %if.exit1096, !dbg !1876

if.exit1096:                                      ; preds = %checkok1094, %loop.exit1068
  %405 = load i64, ptr %rp800, align 8, !dbg !1877
  %406 = load i64, ptr %rpm9, align 8, !dbg !1877
  %sub1097 = sub i64 9, %406, !dbg !1877
  %add1098 = add i64 %405, %sub1097, !dbg !1877
  store i64 %add1098, ptr %rp800, align 8, !dbg !1877
  br label %if.exit1099, !dbg !1877

if.exit1099:                                      ; preds = %if.exit1096, %if.exit904
  br label %loop.cond1100, !dbg !1878

loop.cond1100:                                    ; preds = %if.exit1353, %if.exit1099
  %407 = load i64, ptr %rp800, align 8, !dbg !1879
  %lt1101 = icmp slt i64 %407, 18, !dbg !1879
  br i1 %lt1101, label %or.phi1132, label %or.rhs1102, !dbg !1879

or.rhs1102:                                       ; preds = %loop.cond1100
  %408 = load i64, ptr %rp800, align 8, !dbg !1879
  %eq1103 = icmp eq i64 %408, 18, !dbg !1879
  br i1 %eq1103, label %and.rhs1104, label %and.phi1130, !dbg !1879

and.rhs1104:                                      ; preds = %or.rhs1102
  %409 = load i32, ptr %a, align 4, !dbg !1879
  %sext1105 = sext i32 %409 to i64, !dbg !1879
  %lt1106 = icmp slt i64 %sext1105, 0, !dbg !1879
  %410 = call i1 @llvm.expect.i1(i1 %lt1106, i1 false), !dbg !1879
  br i1 %410, label %panic1107, label %checkok1115, !dbg !1879

checkok1115:                                      ; preds = %and.rhs1104
  %ge1116 = icmp sge i64 %sext1105, 128, !dbg !1879
  %411 = call i1 @llvm.expect.i1(i1 %ge1116, i1 false), !dbg !1879
  br i1 %411, label %panic1117, label %checkok1127, !dbg !1879

checkok1127:                                      ; preds = %checkok1115
  %ptroffset1128 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1105, !dbg !1879
  %412 = load i32, ptr %ptroffset1128, align 4, !dbg !1879
  %lt1129 = icmp ult i32 %412, 9007199, !dbg !1879
  br label %and.phi1130, !dbg !1879

and.phi1130:                                      ; preds = %checkok1127, %or.rhs1102
  %val1131 = phi i1 [ false, %or.rhs1102 ], [ %lt1129, %checkok1127 ], !dbg !1879
  br label %or.phi1132, !dbg !1879

or.phi1132:                                       ; preds = %and.phi1130, %loop.cond1100
  %val1133 = phi i1 [ true, %loop.cond1100 ], [ %val1131, %and.phi1130 ], !dbg !1879
  br i1 %val1133, label %loop.body1134, label %loop.exit1354, !dbg !1879

loop.body1134:                                    ; preds = %or.phi1132
    #dbg_declare(ptr %carry1135, !1881, !DIExpression(), !1883)
  store i32 0, ptr %carry1135, align 4, !dbg !1883
  %413 = load i32, ptr %e2799, align 4, !dbg !1884
  %sub1136 = sub i32 %413, 29, !dbg !1884
  store i32 %sub1136, ptr %e2799, align 4, !dbg !1884
  %414 = load i32, ptr %z, align 4, !dbg !1885
  %sub1137 = sub i32 %414, 1, !dbg !1885
  %and1138 = and i32 %sub1137, 127, !dbg !1885
  store i32 %and1138, ptr %k, align 4, !dbg !1885
  br label %loop.body1139, !dbg !1885

loop.body1139:                                    ; preds = %if.exit1264, %loop.body1134
    #dbg_declare(ptr %tmp1140, !1887, !DIExpression(), !1889)
  %415 = load i32, ptr %k, align 4, !dbg !1889
  %sext1141 = sext i32 %415 to i64, !dbg !1889
  %lt1142 = icmp slt i64 %sext1141, 0, !dbg !1889
  %416 = call i1 @llvm.expect.i1(i1 %lt1142, i1 false), !dbg !1889
  br i1 %416, label %panic1143, label %checkok1151, !dbg !1889

checkok1151:                                      ; preds = %loop.body1139
  %ge1152 = icmp sge i64 %sext1141, 128, !dbg !1889
  %417 = call i1 @llvm.expect.i1(i1 %ge1152, i1 false), !dbg !1889
  br i1 %417, label %panic1153, label %checkok1163, !dbg !1889

checkok1163:                                      ; preds = %checkok1151
  %ptroffset1164 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1141, !dbg !1889
  %418 = load i32, ptr %ptroffset1164, align 4, !dbg !1889
  %zext1165 = zext i32 %418 to i64, !dbg !1889
  %shl = shl i64 %zext1165, 29, !dbg !1889
  %419 = freeze i64 %shl, !dbg !1889
  %420 = load i32, ptr %carry1135, align 4, !dbg !1889
  %zext1166 = zext i32 %420 to i64, !dbg !1889
  %add1167 = add i64 %419, %zext1166, !dbg !1889
  store i64 %add1167, ptr %tmp1140, align 8, !dbg !1889
  %421 = load i64, ptr %tmp1140, align 8, !dbg !1890
  %lt1168 = icmp ult i64 1000000000, %421, !dbg !1890
  br i1 %lt1168, label %if.then1169, label %if.else1198, !dbg !1890

if.then1169:                                      ; preds = %checkok1163
  %422 = load i64, ptr %tmp1140, align 8, !dbg !1891
  %sdiv1170 = sdiv i64 %422, 1000000000, !dbg !1891
  %trunc1171 = trunc i64 %sdiv1170 to i32, !dbg !1891
  store i32 %trunc1171, ptr %carry1135, align 4, !dbg !1891
  %423 = load i32, ptr %k, align 4, !dbg !1893
  %sext1172 = sext i32 %423 to i64, !dbg !1893
  %lt1173 = icmp slt i64 %sext1172, 0, !dbg !1893
  %424 = call i1 @llvm.expect.i1(i1 %lt1173, i1 false), !dbg !1893
  br i1 %424, label %panic1174, label %checkok1182, !dbg !1893

checkok1182:                                      ; preds = %if.then1169
  %ge1183 = icmp sge i64 %sext1172, 128, !dbg !1893
  %425 = call i1 @llvm.expect.i1(i1 %ge1183, i1 false), !dbg !1893
  br i1 %425, label %panic1184, label %checkok1194, !dbg !1893

checkok1194:                                      ; preds = %checkok1182
  %ptroffset1195 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1172, !dbg !1893
  %426 = load i64, ptr %tmp1140, align 8, !dbg !1893
  %smod1196 = srem i64 %426, 1000000000, !dbg !1893
  %trunc1197 = trunc i64 %smod1196 to i32, !dbg !1893
  store i32 %trunc1197, ptr %ptroffset1195, align 4, !dbg !1893
  br label %if.exit1224, !dbg !1893

if.else1198:                                      ; preds = %checkok1163
  store i32 0, ptr %carry1135, align 4, !dbg !1894
  %427 = load i32, ptr %k, align 4, !dbg !1896
  %sext1199 = sext i32 %427 to i64, !dbg !1896
  %lt1200 = icmp slt i64 %sext1199, 0, !dbg !1896
  %428 = call i1 @llvm.expect.i1(i1 %lt1200, i1 false), !dbg !1896
  br i1 %428, label %panic1201, label %checkok1209, !dbg !1896

checkok1209:                                      ; preds = %if.else1198
  %ge1210 = icmp sge i64 %sext1199, 128, !dbg !1896
  %429 = call i1 @llvm.expect.i1(i1 %ge1210, i1 false), !dbg !1896
  br i1 %429, label %panic1211, label %checkok1221, !dbg !1896

checkok1221:                                      ; preds = %checkok1209
  %ptroffset1222 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1199, !dbg !1896
  %430 = load i64, ptr %tmp1140, align 8, !dbg !1896
  %trunc1223 = trunc i64 %430 to i32, !dbg !1896
  store i32 %trunc1223, ptr %ptroffset1222, align 4, !dbg !1896
  br label %if.exit1224, !dbg !1896

if.exit1224:                                      ; preds = %checkok1221, %checkok1194
  %431 = load i32, ptr %k, align 4, !dbg !1897
  %432 = load i32, ptr %z, align 4, !dbg !1897
  %sub1225 = sub i32 %432, 1, !dbg !1897
  %and1226 = and i32 %sub1225, 127, !dbg !1897
  %eq1227 = icmp eq i32 %431, %and1226, !dbg !1897
  br i1 %eq1227, label %and.rhs1228, label %and.phi1230, !dbg !1897

and.rhs1228:                                      ; preds = %if.exit1224
  %433 = load i32, ptr %k, align 4, !dbg !1897
  %434 = load i32, ptr %a, align 4, !dbg !1897
  %neq1229 = icmp ne i32 %433, %434, !dbg !1897
  br label %and.phi1230, !dbg !1897

and.phi1230:                                      ; preds = %and.rhs1228, %if.exit1224
  %val1231 = phi i1 [ false, %if.exit1224 ], [ %neq1229, %and.rhs1228 ], !dbg !1897
  br i1 %val1231, label %and.rhs1232, label %and.phi1258, !dbg !1897

and.rhs1232:                                      ; preds = %and.phi1230
  %435 = load i32, ptr %k, align 4, !dbg !1897
  %sext1233 = sext i32 %435 to i64, !dbg !1897
  %lt1234 = icmp slt i64 %sext1233, 0, !dbg !1897
  %436 = call i1 @llvm.expect.i1(i1 %lt1234, i1 false), !dbg !1897
  br i1 %436, label %panic1235, label %checkok1243, !dbg !1897

checkok1243:                                      ; preds = %and.rhs1232
  %ge1244 = icmp sge i64 %sext1233, 128, !dbg !1897
  %437 = call i1 @llvm.expect.i1(i1 %ge1244, i1 false), !dbg !1897
  br i1 %437, label %panic1245, label %checkok1255, !dbg !1897

checkok1255:                                      ; preds = %checkok1243
  %ptroffset1256 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1233, !dbg !1897
  %438 = load i32, ptr %ptroffset1256, align 4, !dbg !1897
  %i2nb1257 = icmp eq i32 %438, 0, !dbg !1897
  br label %and.phi1258, !dbg !1897

and.phi1258:                                      ; preds = %checkok1255, %and.phi1230
  %val1259 = phi i1 [ false, %and.phi1230 ], [ %i2nb1257, %checkok1255 ], !dbg !1897
  br i1 %val1259, label %if.then1260, label %if.exit1261, !dbg !1897

if.then1260:                                      ; preds = %and.phi1258
  %439 = load i32, ptr %k, align 4, !dbg !1897
  store i32 %439, ptr %z, align 4, !dbg !1897
  br label %if.exit1261, !dbg !1897

if.exit1261:                                      ; preds = %if.then1260, %and.phi1258
  %440 = load i32, ptr %k, align 4, !dbg !1898
  %441 = load i32, ptr %a, align 4, !dbg !1898
  %eq1262 = icmp eq i32 %440, %441, !dbg !1898
  br i1 %eq1262, label %if.then1263, label %if.exit1264, !dbg !1898

if.then1263:                                      ; preds = %if.exit1261
  br label %loop.exit1267, !dbg !1898

if.exit1264:                                      ; preds = %if.exit1261
  %442 = load i32, ptr %k, align 4, !dbg !1885
  %sub1265 = sub i32 %442, 1, !dbg !1885
  %and1266 = and i32 %sub1265, 127, !dbg !1885
  store i32 %and1266, ptr %k, align 4, !dbg !1885
  br label %loop.body1139, !dbg !1885

loop.exit1267:                                    ; preds = %if.then1263
  %443 = load i32, ptr %carry1135, align 4, !dbg !1899
  %i2b1268 = icmp ne i32 %443, 0, !dbg !1899
  br i1 %i2b1268, label %if.then1269, label %if.exit1353, !dbg !1899

if.then1269:                                      ; preds = %loop.exit1267
  %444 = load i64, ptr %rp800, align 8, !dbg !1900
  %add1270 = add i64 %444, 9, !dbg !1900
  store i64 %add1270, ptr %rp800, align 8, !dbg !1900
  %445 = load i32, ptr %a, align 4, !dbg !1902
  %sub1271 = sub i32 %445, 1, !dbg !1902
  %and1272 = and i32 %sub1271, 127, !dbg !1902
  store i32 %and1272, ptr %a, align 4, !dbg !1902
  %446 = load i32, ptr %a, align 4, !dbg !1903
  %447 = load i32, ptr %z, align 4, !dbg !1903
  %eq1273 = icmp eq i32 %446, %447, !dbg !1903
  br i1 %eq1273, label %if.then1274, label %if.exit1328, !dbg !1903

if.then1274:                                      ; preds = %if.then1269
  %448 = load i32, ptr %z, align 4, !dbg !1904
  %sub1275 = sub i32 %448, 1, !dbg !1904
  %and1276 = and i32 %sub1275, 127, !dbg !1904
  store i32 %and1276, ptr %z, align 4, !dbg !1904
  %449 = load i32, ptr %z, align 4, !dbg !1906
  %sub1277 = sub i32 %449, 1, !dbg !1906
  %and1278 = and i32 %sub1277, 127, !dbg !1906
  %sext1279 = sext i32 %and1278 to i64, !dbg !1906
  %lt1280 = icmp slt i64 %sext1279, 0, !dbg !1906
  %450 = call i1 @llvm.expect.i1(i1 %lt1280, i1 false), !dbg !1906
  br i1 %450, label %panic1281, label %checkok1289, !dbg !1906

checkok1289:                                      ; preds = %if.then1274
  %ge1290 = icmp sge i64 %sext1279, 128, !dbg !1906
  %451 = call i1 @llvm.expect.i1(i1 %ge1290, i1 false), !dbg !1906
  br i1 %451, label %panic1291, label %checkok1301, !dbg !1906

checkok1301:                                      ; preds = %checkok1289
  %ptroffset1302 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1279, !dbg !1906
  %452 = load i32, ptr %ptroffset1302, align 4, !dbg !1906
  %453 = load i32, ptr %z, align 4, !dbg !1906
  %sext1303 = sext i32 %453 to i64, !dbg !1906
  %lt1304 = icmp slt i64 %sext1303, 0, !dbg !1906
  %454 = call i1 @llvm.expect.i1(i1 %lt1304, i1 false), !dbg !1906
  br i1 %454, label %panic1305, label %checkok1313, !dbg !1906

checkok1313:                                      ; preds = %checkok1301
  %ge1314 = icmp sge i64 %sext1303, 128, !dbg !1906
  %455 = call i1 @llvm.expect.i1(i1 %ge1314, i1 false), !dbg !1906
  br i1 %455, label %panic1315, label %checkok1325, !dbg !1906

checkok1325:                                      ; preds = %checkok1313
  %ptroffset1326 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1303, !dbg !1906
  %456 = load i32, ptr %ptroffset1326, align 4, !dbg !1906
  %or1327 = or i32 %452, %456, !dbg !1906
  store i32 %or1327, ptr %ptroffset1302, align 4, !dbg !1906
  br label %if.exit1328, !dbg !1906

if.exit1328:                                      ; preds = %checkok1325, %if.then1269
  %457 = load i32, ptr %a, align 4, !dbg !1907
  %sext1329 = sext i32 %457 to i64, !dbg !1907
  %lt1330 = icmp slt i64 %sext1329, 0, !dbg !1907
  %458 = call i1 @llvm.expect.i1(i1 %lt1330, i1 false), !dbg !1907
  br i1 %458, label %panic1331, label %checkok1339, !dbg !1907

checkok1339:                                      ; preds = %if.exit1328
  %ge1340 = icmp sge i64 %sext1329, 128, !dbg !1907
  %459 = call i1 @llvm.expect.i1(i1 %ge1340, i1 false), !dbg !1907
  br i1 %459, label %panic1341, label %checkok1351, !dbg !1907

checkok1351:                                      ; preds = %checkok1339
  %ptroffset1352 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1329, !dbg !1907
  %460 = load i32, ptr %carry1135, align 4, !dbg !1907
  store i32 %460, ptr %ptroffset1352, align 4, !dbg !1907
  br label %if.exit1353, !dbg !1907

if.exit1353:                                      ; preds = %checkok1351, %loop.exit1267
  br label %loop.cond1100, !dbg !1907

loop.exit1354:                                    ; preds = %or.phi1132
  br label %loop.body1355, !dbg !1908

loop.body1355:                                    ; preds = %if.exit1713, %loop.exit1354
    #dbg_declare(ptr %carry1356, !1909, !DIExpression(), !1912)
  store i32 0, ptr %carry1356, align 4, !dbg !1912
    #dbg_declare(ptr %sh, !1913, !DIExpression(), !1914)
  store i32 1, ptr %sh, align 4, !dbg !1914
    #dbg_declare(ptr %i, !1915, !DIExpression(), !1916)
  store i32 0, ptr %i, align 4, !dbg !1916
  store i32 0, ptr %i, align 4, !dbg !1917
  br label %loop.cond1357, !dbg !1917

loop.cond1357:                                    ; preds = %if.exit1469, %loop.body1355
  %461 = load i32, ptr %i, align 4, !dbg !1917
  %lt1358 = icmp slt i32 %461, 2, !dbg !1917
  br i1 %lt1358, label %loop.body1359, label %loop.exit1471, !dbg !1917

loop.body1359:                                    ; preds = %loop.cond1357
  %462 = load i32, ptr %a, align 4, !dbg !1919
  %463 = load i32, ptr %i, align 4, !dbg !1919
  %add1360 = add i32 %462, %463, !dbg !1919
  %and1361 = and i32 %add1360, 127, !dbg !1919
  store i32 %and1361, ptr %k, align 4, !dbg !1919
  %464 = load i32, ptr %k, align 4, !dbg !1921
  %465 = load i32, ptr %z, align 4, !dbg !1921
  %eq1362 = icmp eq i32 %464, %465, !dbg !1921
  br i1 %eq1362, label %or.phi1413, label %or.rhs1363, !dbg !1921

or.rhs1363:                                       ; preds = %loop.body1359
  %466 = load i32, ptr %k, align 4, !dbg !1921
  %sext1364 = sext i32 %466 to i64, !dbg !1921
  %lt1365 = icmp slt i64 %sext1364, 0, !dbg !1921
  %467 = call i1 @llvm.expect.i1(i1 %lt1365, i1 false), !dbg !1921
  br i1 %467, label %panic1366, label %checkok1374, !dbg !1921

checkok1374:                                      ; preds = %or.rhs1363
  %ge1375 = icmp sge i64 %sext1364, 128, !dbg !1921
  %468 = call i1 @llvm.expect.i1(i1 %ge1375, i1 false), !dbg !1921
  br i1 %468, label %panic1376, label %checkok1386, !dbg !1921

checkok1386:                                      ; preds = %checkok1374
  %ptroffset1387 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1364, !dbg !1921
  %469 = load i32, ptr %ptroffset1387, align 4, !dbg !1921
  %470 = load i32, ptr %i, align 4, !dbg !1921
  %sext1388 = sext i32 %470 to i64, !dbg !1921
  %lt1389 = icmp slt i64 %sext1388, 0, !dbg !1921
  %471 = call i1 @llvm.expect.i1(i1 %lt1389, i1 false), !dbg !1921
  br i1 %471, label %panic1390, label %checkok1398, !dbg !1921

checkok1398:                                      ; preds = %checkok1386
  %ge1399 = icmp sge i64 %sext1388, 2, !dbg !1921
  %472 = call i1 @llvm.expect.i1(i1 %ge1399, i1 false), !dbg !1921
  br i1 %472, label %panic1400, label %checkok1410, !dbg !1921

checkok1410:                                      ; preds = %checkok1398
  %ptroffset1411 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1388, !dbg !1921
  %473 = load i32, ptr %ptroffset1411, align 4, !dbg !1921
  %lt1412 = icmp ult i32 %469, %473, !dbg !1921
  br label %or.phi1413, !dbg !1921

or.phi1413:                                       ; preds = %checkok1410, %loop.body1359
  %val1414 = phi i1 [ true, %loop.body1359 ], [ %lt1412, %checkok1410 ], !dbg !1921
  br i1 %val1414, label %if.then1415, label %if.exit1416, !dbg !1921

if.then1415:                                      ; preds = %or.phi1413
  store i32 2, ptr %i, align 4, !dbg !1922
  br label %loop.exit1471, !dbg !1924

if.exit1416:                                      ; preds = %or.phi1413
  %474 = load i32, ptr %a, align 4, !dbg !1925
  %475 = load i32, ptr %i, align 4, !dbg !1925
  %add1417 = add i32 %474, %475, !dbg !1925
  %and1418 = and i32 %add1417, 127, !dbg !1925
  %sext1419 = sext i32 %and1418 to i64, !dbg !1925
  %lt1420 = icmp slt i64 %sext1419, 0, !dbg !1925
  %476 = call i1 @llvm.expect.i1(i1 %lt1420, i1 false), !dbg !1925
  br i1 %476, label %panic1421, label %checkok1429, !dbg !1925

checkok1429:                                      ; preds = %if.exit1416
  %ge1430 = icmp sge i64 %sext1419, 128, !dbg !1925
  %477 = call i1 @llvm.expect.i1(i1 %ge1430, i1 false), !dbg !1925
  br i1 %477, label %panic1431, label %checkok1441, !dbg !1925

checkok1441:                                      ; preds = %checkok1429
  %ptroffset1442 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1419, !dbg !1925
  %478 = load i32, ptr %ptroffset1442, align 4, !dbg !1925
  %479 = load i32, ptr %i, align 4, !dbg !1925
  %sext1443 = sext i32 %479 to i64, !dbg !1925
  %lt1444 = icmp slt i64 %sext1443, 0, !dbg !1925
  %480 = call i1 @llvm.expect.i1(i1 %lt1444, i1 false), !dbg !1925
  br i1 %480, label %panic1445, label %checkok1453, !dbg !1925

checkok1453:                                      ; preds = %checkok1441
  %ge1454 = icmp sge i64 %sext1443, 2, !dbg !1925
  %481 = call i1 @llvm.expect.i1(i1 %ge1454, i1 false), !dbg !1925
  br i1 %481, label %panic1455, label %checkok1465, !dbg !1925

checkok1465:                                      ; preds = %checkok1453
  %ptroffset1466 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1443, !dbg !1925
  %482 = load i32, ptr %ptroffset1466, align 4, !dbg !1925
  %gt1467 = icmp ugt i32 %478, %482, !dbg !1925
  br i1 %gt1467, label %if.then1468, label %if.exit1469, !dbg !1925

if.then1468:                                      ; preds = %checkok1465
  br label %loop.exit1471, !dbg !1925

if.exit1469:                                      ; preds = %checkok1465
  %483 = load i32, ptr %i, align 4, !dbg !1917
  %add1470 = add i32 %483, 1, !dbg !1917
  store i32 %add1470, ptr %i, align 4, !dbg !1917
  br label %loop.cond1357, !dbg !1917

loop.exit1471:                                    ; preds = %if.then1468, %if.then1415, %loop.cond1357
  %484 = load i32, ptr %i, align 4, !dbg !1926
  %eq1472 = icmp eq i32 %484, 2, !dbg !1926
  br i1 %eq1472, label %and.rhs1473, label %and.phi1475, !dbg !1926

and.rhs1473:                                      ; preds = %loop.exit1471
  %485 = load i64, ptr %rp800, align 8, !dbg !1926
  %eq1474 = icmp eq i64 %485, 18, !dbg !1926
  br label %and.phi1475, !dbg !1926

and.phi1475:                                      ; preds = %and.rhs1473, %loop.exit1471
  %val1476 = phi i1 [ false, %loop.exit1471 ], [ %eq1474, %and.rhs1473 ], !dbg !1926
  br i1 %val1476, label %if.then1477, label %if.exit1478, !dbg !1926

if.then1477:                                      ; preds = %and.phi1475
  br label %loop.exit1714, !dbg !1926

if.exit1478:                                      ; preds = %and.phi1475
  %486 = load i64, ptr %rp800, align 8, !dbg !1927
  %gt1479 = icmp sgt i64 %486, 27, !dbg !1927
  br i1 %gt1479, label %if.then1480, label %if.exit1481, !dbg !1927

if.then1480:                                      ; preds = %if.exit1478
  store i32 9, ptr %sh, align 4, !dbg !1927
  br label %if.exit1481, !dbg !1927

if.exit1481:                                      ; preds = %if.then1480, %if.exit1478
  %487 = load i32, ptr %e2799, align 4, !dbg !1928
  %488 = load i32, ptr %sh, align 4, !dbg !1928
  %add1482 = add i32 %487, %488, !dbg !1928
  store i32 %add1482, ptr %e2799, align 4, !dbg !1928
  %489 = load i32, ptr %a, align 4, !dbg !1929
  store i32 %489, ptr %k, align 4, !dbg !1929
  br label %loop.cond1483, !dbg !1929

loop.cond1483:                                    ; preds = %if.exit1648, %if.exit1481
  %490 = load i32, ptr %k, align 4, !dbg !1929
  %491 = load i32, ptr %z, align 4, !dbg !1929
  %neq1484 = icmp ne i32 %490, %491, !dbg !1929
  br i1 %neq1484, label %loop.body1485, label %loop.exit1651, !dbg !1929

loop.body1485:                                    ; preds = %loop.cond1483
    #dbg_declare(ptr %tmp1486, !1931, !DIExpression(), !1933)
  %492 = load i32, ptr %k, align 4, !dbg !1933
  %sext1487 = sext i32 %492 to i64, !dbg !1933
  %lt1488 = icmp slt i64 %sext1487, 0, !dbg !1933
  %493 = call i1 @llvm.expect.i1(i1 %lt1488, i1 false), !dbg !1933
  br i1 %493, label %panic1489, label %checkok1497, !dbg !1933

checkok1497:                                      ; preds = %loop.body1485
  %ge1498 = icmp sge i64 %sext1487, 128, !dbg !1933
  %494 = call i1 @llvm.expect.i1(i1 %ge1498, i1 false), !dbg !1933
  br i1 %494, label %panic1499, label %checkok1509, !dbg !1933

checkok1509:                                      ; preds = %checkok1497
  %ptroffset1510 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1487, !dbg !1933
  %495 = load i32, ptr %ptroffset1510, align 4, !dbg !1933
  %496 = load i32, ptr %sh, align 4, !dbg !1933
  %shift_underflow = icmp slt i32 %496, 0, !dbg !1933
  %497 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !1933
  br i1 %497, label %panic1511, label %checkok1519, !dbg !1933

checkok1519:                                      ; preds = %checkok1509
  %shift_exceeds1520 = icmp sge i32 %496, 32, !dbg !1933
  %498 = call i1 @llvm.expect.i1(i1 %shift_exceeds1520, i1 false), !dbg !1933
  br i1 %498, label %panic1521, label %checkok1529, !dbg !1933

checkok1529:                                      ; preds = %checkok1519
  %shl1530 = shl i32 1, %496, !dbg !1933
  %499 = freeze i32 %shl1530, !dbg !1933
  %sub1531 = sub i32 %499, 1, !dbg !1933
  %and1532 = and i32 %495, %sub1531, !dbg !1933
  store i32 %and1532, ptr %tmp1486, align 4, !dbg !1933
  %500 = load i32, ptr %k, align 4, !dbg !1934
  %sext1533 = sext i32 %500 to i64, !dbg !1934
  %lt1534 = icmp slt i64 %sext1533, 0, !dbg !1934
  %501 = call i1 @llvm.expect.i1(i1 %lt1534, i1 false), !dbg !1934
  br i1 %501, label %panic1535, label %checkok1543, !dbg !1934

checkok1543:                                      ; preds = %checkok1529
  %ge1544 = icmp sge i64 %sext1533, 128, !dbg !1934
  %502 = call i1 @llvm.expect.i1(i1 %ge1544, i1 false), !dbg !1934
  br i1 %502, label %panic1545, label %checkok1555, !dbg !1934

checkok1555:                                      ; preds = %checkok1543
  %ptroffset1556 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1533, !dbg !1934
  %503 = load i32, ptr %k, align 4, !dbg !1934
  %sext1557 = sext i32 %503 to i64, !dbg !1934
  %lt1558 = icmp slt i64 %sext1557, 0, !dbg !1934
  %504 = call i1 @llvm.expect.i1(i1 %lt1558, i1 false), !dbg !1934
  br i1 %504, label %panic1559, label %checkok1567, !dbg !1934

checkok1567:                                      ; preds = %checkok1555
  %ge1568 = icmp sge i64 %sext1557, 128, !dbg !1934
  %505 = call i1 @llvm.expect.i1(i1 %ge1568, i1 false), !dbg !1934
  br i1 %505, label %panic1569, label %checkok1579, !dbg !1934

checkok1579:                                      ; preds = %checkok1567
  %ptroffset1580 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1557, !dbg !1934
  %506 = load i32, ptr %ptroffset1580, align 4, !dbg !1934
  %507 = load i32, ptr %sh, align 4, !dbg !1934
  %shift_exceeds1581 = icmp uge i32 %507, 32, !dbg !1934
  %508 = call i1 @llvm.expect.i1(i1 %shift_exceeds1581, i1 false), !dbg !1934
  br i1 %508, label %panic1582, label %checkok1590, !dbg !1934

checkok1590:                                      ; preds = %checkok1579
  %lshr1591 = lshr i32 %506, %507, !dbg !1934
  %509 = freeze i32 %lshr1591, !dbg !1934
  %510 = load i32, ptr %carry1356, align 4, !dbg !1934
  %add1592 = add i32 %509, %510, !dbg !1934
  store i32 %add1592, ptr %ptroffset1556, align 4, !dbg !1934
  %511 = load i32, ptr %sh, align 4, !dbg !1935
  %shift_underflow1593 = icmp slt i32 %511, 0, !dbg !1935
  %512 = call i1 @llvm.expect.i1(i1 %shift_underflow1593, i1 false), !dbg !1935
  br i1 %512, label %panic1594, label %checkok1602, !dbg !1935

checkok1602:                                      ; preds = %checkok1590
  %shift_exceeds1603 = icmp sge i32 %511, 32, !dbg !1935
  %513 = call i1 @llvm.expect.i1(i1 %shift_exceeds1603, i1 false), !dbg !1935
  br i1 %513, label %panic1604, label %checkok1612, !dbg !1935

checkok1612:                                      ; preds = %checkok1602
  %ashr = ashr i32 1000000000, %511, !dbg !1935
  %514 = freeze i32 %ashr, !dbg !1935
  %515 = load i32, ptr %tmp1486, align 4, !dbg !1935
  %mul1613 = mul i32 %514, %515, !dbg !1935
  store i32 %mul1613, ptr %carry1356, align 4, !dbg !1935
  %516 = load i32, ptr %k, align 4, !dbg !1936
  %517 = load i32, ptr %a, align 4, !dbg !1936
  %eq1614 = icmp eq i32 %516, %517, !dbg !1936
  br i1 %eq1614, label %and.rhs1615, label %and.phi1641, !dbg !1936

and.rhs1615:                                      ; preds = %checkok1612
  %518 = load i32, ptr %k, align 4, !dbg !1936
  %sext1616 = sext i32 %518 to i64, !dbg !1936
  %lt1617 = icmp slt i64 %sext1616, 0, !dbg !1936
  %519 = call i1 @llvm.expect.i1(i1 %lt1617, i1 false), !dbg !1936
  br i1 %519, label %panic1618, label %checkok1626, !dbg !1936

checkok1626:                                      ; preds = %and.rhs1615
  %ge1627 = icmp sge i64 %sext1616, 128, !dbg !1936
  %520 = call i1 @llvm.expect.i1(i1 %ge1627, i1 false), !dbg !1936
  br i1 %520, label %panic1628, label %checkok1638, !dbg !1936

checkok1638:                                      ; preds = %checkok1626
  %ptroffset1639 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1616, !dbg !1936
  %521 = load i32, ptr %ptroffset1639, align 4, !dbg !1936
  %i2nb1640 = icmp eq i32 %521, 0, !dbg !1936
  br label %and.phi1641, !dbg !1936

and.phi1641:                                      ; preds = %checkok1638, %checkok1612
  %val1642 = phi i1 [ false, %checkok1612 ], [ %i2nb1640, %checkok1638 ], !dbg !1936
  br i1 %val1642, label %if.then1643, label %if.exit1648, !dbg !1936

if.then1643:                                      ; preds = %and.phi1641
  %522 = load i32, ptr %a, align 4, !dbg !1937
  %add1644 = add i32 %522, 1, !dbg !1937
  %and1645 = and i32 %add1644, 127, !dbg !1937
  store i32 %and1645, ptr %a, align 4, !dbg !1937
  %523 = load i32, ptr %i, align 4, !dbg !1939
  %sub1646 = sub i32 %523, 1, !dbg !1939
  store i32 %sub1646, ptr %i, align 4, !dbg !1939
  %524 = load i64, ptr %rp800, align 8, !dbg !1940
  %sub1647 = sub i64 %524, 9, !dbg !1940
  store i64 %sub1647, ptr %rp800, align 8, !dbg !1940
  br label %if.exit1648, !dbg !1940

if.exit1648:                                      ; preds = %if.then1643, %and.phi1641
  %525 = load i32, ptr %k, align 4, !dbg !1929
  %add1649 = add i32 %525, 1, !dbg !1929
  %and1650 = and i32 %add1649, 127, !dbg !1929
  store i32 %and1650, ptr %k, align 4, !dbg !1929
  br label %loop.cond1483, !dbg !1929

loop.exit1651:                                    ; preds = %loop.cond1483
  %526 = load i32, ptr %carry1356, align 4, !dbg !1941
  %i2b1652 = icmp ne i32 %526, 0, !dbg !1941
  br i1 %i2b1652, label %if.then1653, label %if.exit1713, !dbg !1941

if.then1653:                                      ; preds = %loop.exit1651
  %527 = load i32, ptr %z, align 4, !dbg !1942
  %add1654 = add i32 %527, 1, !dbg !1942
  %and1655 = and i32 %add1654, 127, !dbg !1942
  %528 = load i32, ptr %a, align 4, !dbg !1942
  %neq1656 = icmp ne i32 %and1655, %528, !dbg !1942
  br i1 %neq1656, label %if.then1657, label %if.else1684, !dbg !1942

if.then1657:                                      ; preds = %if.then1653
  %529 = load i32, ptr %z, align 4, !dbg !1944
  %sext1658 = sext i32 %529 to i64, !dbg !1944
  %lt1659 = icmp slt i64 %sext1658, 0, !dbg !1944
  %530 = call i1 @llvm.expect.i1(i1 %lt1659, i1 false), !dbg !1944
  br i1 %530, label %panic1660, label %checkok1668, !dbg !1944

checkok1668:                                      ; preds = %if.then1657
  %ge1669 = icmp sge i64 %sext1658, 128, !dbg !1944
  %531 = call i1 @llvm.expect.i1(i1 %ge1669, i1 false), !dbg !1944
  br i1 %531, label %panic1670, label %checkok1680, !dbg !1944

checkok1680:                                      ; preds = %checkok1668
  %ptroffset1681 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1658, !dbg !1944
  %532 = load i32, ptr %carry1356, align 4, !dbg !1944
  store i32 %532, ptr %ptroffset1681, align 4, !dbg !1944
  %533 = load i32, ptr %z, align 4, !dbg !1946
  %add1682 = add i32 %533, 1, !dbg !1946
  %and1683 = and i32 %add1682, 127, !dbg !1946
  store i32 %and1683, ptr %z, align 4, !dbg !1946
  br label %if.exit1712, !dbg !1946

if.else1684:                                      ; preds = %if.then1653
  %534 = load i32, ptr %z, align 4, !dbg !1947
  %sub1685 = sub i32 %534, 1, !dbg !1947
  %and1686 = and i32 %sub1685, 127, !dbg !1947
  %sext1687 = sext i32 %and1686 to i64, !dbg !1947
  %lt1688 = icmp slt i64 %sext1687, 0, !dbg !1947
  %535 = call i1 @llvm.expect.i1(i1 %lt1688, i1 false), !dbg !1947
  br i1 %535, label %panic1689, label %checkok1697, !dbg !1947

checkok1697:                                      ; preds = %if.else1684
  %ge1698 = icmp sge i64 %sext1687, 128, !dbg !1947
  %536 = call i1 @llvm.expect.i1(i1 %ge1698, i1 false), !dbg !1947
  br i1 %536, label %panic1699, label %checkok1709, !dbg !1947

checkok1709:                                      ; preds = %checkok1697
  %ptroffset1710 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1687, !dbg !1947
  %537 = load i32, ptr %ptroffset1710, align 4, !dbg !1947
  %or1711 = or i32 %537, 1, !dbg !1947
  store i32 %or1711, ptr %ptroffset1710, align 4, !dbg !1947
  br label %if.exit1712, !dbg !1947

if.exit1712:                                      ; preds = %checkok1709, %checkok1680
  br label %if.exit1713, !dbg !1947

if.exit1713:                                      ; preds = %if.exit1712, %loop.exit1651
  br label %loop.body1355, !dbg !1947

loop.exit1714:                                    ; preds = %if.then1477
    #dbg_declare(ptr %y1715, !1949, !DIExpression(), !1950)
  store double 0.000000e+00, ptr %y1715, align 8, !dbg !1950
    #dbg_declare(ptr %i1716, !1951, !DIExpression(), !1952)
  store i32 0, ptr %i1716, align 4, !dbg !1952
  store i32 0, ptr %i1716, align 4, !dbg !1953
  br label %loop.cond1717, !dbg !1953

loop.cond1717:                                    ; preds = %checkok1777, %loop.exit1714
  %538 = load i32, ptr %i1716, align 4, !dbg !1953
  %lt1718 = icmp slt i32 %538, 2, !dbg !1953
  br i1 %lt1718, label %loop.body1719, label %loop.exit1782, !dbg !1953

loop.body1719:                                    ; preds = %loop.cond1717
  %539 = load i32, ptr %a, align 4, !dbg !1955
  %540 = load i32, ptr %i1716, align 4, !dbg !1955
  %add1720 = add i32 %539, %540, !dbg !1955
  %and1721 = and i32 %add1720, 127, !dbg !1955
  %541 = load i32, ptr %z, align 4, !dbg !1955
  %eq1722 = icmp eq i32 %and1721, %541, !dbg !1955
  br i1 %eq1722, label %if.then1723, label %if.exit1751, !dbg !1955

if.then1723:                                      ; preds = %loop.body1719
  %542 = load i32, ptr %z, align 4, !dbg !1955
  %add1724 = add i32 %542, 1, !dbg !1955
  %and1725 = and i32 %add1724, 127, !dbg !1955
  store i32 %and1725, ptr %z, align 4, !dbg !1955
  %sub1726 = sub i32 %and1725, 1, !dbg !1955
  %sext1727 = sext i32 %sub1726 to i64, !dbg !1955
  %lt1728 = icmp slt i64 %sext1727, 0, !dbg !1955
  %543 = call i1 @llvm.expect.i1(i1 %lt1728, i1 false), !dbg !1955
  br i1 %543, label %panic1729, label %checkok1737, !dbg !1955

checkok1737:                                      ; preds = %if.then1723
  %ge1738 = icmp sge i64 %sext1727, 128, !dbg !1955
  %544 = call i1 @llvm.expect.i1(i1 %ge1738, i1 false), !dbg !1955
  br i1 %544, label %panic1739, label %checkok1749, !dbg !1955

checkok1749:                                      ; preds = %checkok1737
  %ptroffset1750 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1727, !dbg !1955
  store i32 0, ptr %ptroffset1750, align 4, !dbg !1955
  br label %if.exit1751, !dbg !1955

if.exit1751:                                      ; preds = %checkok1749, %loop.body1719
  %545 = load double, ptr %y1715, align 8, !dbg !1957
  %fmul1752 = fmul double 1.000000e+09, %545, !dbg !1957
  %546 = load i32, ptr %a, align 4, !dbg !1957
  %547 = load i32, ptr %i1716, align 4, !dbg !1957
  %add1753 = add i32 %546, %547, !dbg !1957
  %and1754 = and i32 %add1753, 127, !dbg !1957
  %sext1755 = sext i32 %and1754 to i64, !dbg !1957
  %lt1756 = icmp slt i64 %sext1755, 0, !dbg !1957
  %548 = call i1 @llvm.expect.i1(i1 %lt1756, i1 false), !dbg !1957
  br i1 %548, label %panic1757, label %checkok1765, !dbg !1957

checkok1765:                                      ; preds = %if.exit1751
  %ge1766 = icmp sge i64 %sext1755, 128, !dbg !1957
  %549 = call i1 @llvm.expect.i1(i1 %ge1766, i1 false), !dbg !1957
  br i1 %549, label %panic1767, label %checkok1777, !dbg !1957

checkok1777:                                      ; preds = %checkok1765
  %ptroffset1778 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1755, !dbg !1957
  %550 = load i32, ptr %ptroffset1778, align 4, !dbg !1957
  %uifp1779 = uitofp i32 %550 to double, !dbg !1957
  %fadd1780 = fadd double %fmul1752, %uifp1779, !dbg !1957
  store double %fadd1780, ptr %y1715, align 8, !dbg !1957
  %551 = load i32, ptr %i1716, align 4, !dbg !1953
  %add1781 = add i32 %551, 1, !dbg !1953
  store i32 %add1781, ptr %i1716, align 4, !dbg !1953
  br label %loop.cond1717, !dbg !1953

loop.exit1782:                                    ; preds = %loop.cond1717
  %552 = load double, ptr %y1715, align 8, !dbg !1958
  %553 = load i32, ptr %sign420, align 4, !dbg !1958
  %sifp1783 = sitofp i32 %553 to double, !dbg !1958
  %fmul1784 = fmul double %552, %sifp1783, !dbg !1958
  store double %fmul1784, ptr %y1715, align 8, !dbg !1958
    #dbg_declare(ptr %denormal, !1959, !DIExpression(), !1960)
  store i8 0, ptr %denormal, align 1, !dbg !1960
    #dbg_declare(ptr %bits1785, !1961, !DIExpression(), !1962)
  store i32 53, ptr %bits1785, align 4, !dbg !1962
  %554 = load i32, ptr %bits1785, align 4, !dbg !1963
  %555 = load i32, ptr %e2799, align 4, !dbg !1963
  %add1786 = add i32 53, %555, !dbg !1963
  %sub1787 = sub i32 %add1786, -1074, !dbg !1963
  %lt1788 = icmp slt i32 %sub1787, %554, !dbg !1963
  %check1789 = icmp slt i32 %554, 0, !dbg !1963
  %siui-lt1790 = or i1 %check1789, %lt1788, !dbg !1963
  br i1 %siui-lt1790, label %if.then1791, label %if.exit1797, !dbg !1963

if.then1791:                                      ; preds = %loop.exit1782
  %556 = load i32, ptr %e2799, align 4, !dbg !1964
  %add1792 = add i32 53, %556, !dbg !1964
  %sub1793 = sub i32 %add1792, -1074, !dbg !1964
  store i32 %sub1793, ptr %bits1785, align 4, !dbg !1964
  %557 = load i32, ptr %bits1785, align 4, !dbg !1966
  %gt1794 = icmp ugt i32 0, %557, !dbg !1966
  br i1 %gt1794, label %if.then1795, label %if.exit1796, !dbg !1966

if.then1795:                                      ; preds = %if.then1791
  store i32 0, ptr %bits1785, align 4, !dbg !1966
  br label %if.exit1796, !dbg !1966

if.exit1796:                                      ; preds = %if.then1795, %if.then1791
  store i8 1, ptr %denormal, align 1, !dbg !1967
  br label %if.exit1797, !dbg !1967

if.exit1797:                                      ; preds = %if.exit1796, %loop.exit1782
    #dbg_declare(ptr %bias1798, !1968, !DIExpression(), !1969)
  store double 0.000000e+00, ptr %bias1798, align 8, !dbg !1969
    #dbg_declare(ptr %frac, !1970, !DIExpression(), !1971)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !1971
  %558 = load i32, ptr %bits1785, align 4, !dbg !1972
  %gt1799 = icmp ugt i32 53, %558, !dbg !1972
  br i1 %gt1799, label %if.then1800, label %if.exit1820, !dbg !1972

if.then1800:                                      ; preds = %if.exit1797
  store double 1.000000e+00, ptr %x1801, align 8
  %559 = load i32, ptr %bits1785, align 4, !dbg !1973
  %sub1802 = sub i32 106, %559, !dbg !1973
  %sub1803 = sub i32 %sub1802, 1, !dbg !1973
  store i32 %sub1803, ptr %n1804, align 4
  %560 = load double, ptr %x1801, align 8, !dbg !1975
  %561 = load i32, ptr %n1804, align 4, !dbg !1975
  %562 = call double @scalbn(double %560, i32 %561), !dbg !1975
  store double %562, ptr %mag1805, align 8
  %563 = load double, ptr %y1715, align 8
  store double %563, ptr %sgn1806, align 8
  %564 = load double, ptr %mag1805, align 8
  store double %564, ptr %x1807, align 8
  %565 = load double, ptr %sgn1806, align 8
  store double %565, ptr %y1808, align 8
  %566 = load double, ptr %x1807, align 8, !dbg !1977
  %567 = load double, ptr %sgn1806, align 8, !dbg !1979
  %568 = call double @llvm.copysign.f64(double %566, double %567), !dbg !1979
  store double %568, ptr %bias1798, align 8, !dbg !1979
  %569 = load double, ptr %y1715, align 8, !dbg !1981
  store double 1.000000e+00, ptr %x1809, align 8
  %570 = load i32, ptr %bits1785, align 4, !dbg !1981
  %sub1810 = sub i32 53, %570, !dbg !1981
  store i32 %sub1810, ptr %n1811, align 4
  %571 = load double, ptr %x1809, align 8, !dbg !1982
  %572 = load i32, ptr %n1811, align 4, !dbg !1982
  %573 = call double @scalbn(double %571, i32 %572), !dbg !1982
  %zero1812 = fcmp ueq double %573, 0.000000e+00, !dbg !1981
  %574 = call i1 @llvm.expect.i1(i1 %zero1812, i1 false), !dbg !1981
  br i1 %574, label %panic1813, label %checkok1817, !dbg !1981

checkok1817:                                      ; preds = %if.then1800
  %fmod = frem double %569, %573, !dbg !1981
  store double %fmod, ptr %frac, align 8, !dbg !1981
  %575 = load double, ptr %y1715, align 8, !dbg !1984
  %576 = load double, ptr %frac, align 8, !dbg !1984
  %fsub1818 = fsub double %575, %576, !dbg !1984
  store double %fsub1818, ptr %y1715, align 8, !dbg !1984
  %577 = load double, ptr %y1715, align 8, !dbg !1985
  %578 = load double, ptr %bias1798, align 8, !dbg !1985
  %fadd1819 = fadd double %577, %578, !dbg !1985
  store double %fadd1819, ptr %y1715, align 8, !dbg !1985
  br label %if.exit1820, !dbg !1985

if.exit1820:                                      ; preds = %checkok1817, %if.exit1797
  %579 = load i32, ptr %a, align 4, !dbg !1986
  %580 = load i32, ptr %i1716, align 4, !dbg !1986
  %add1821 = add i32 %579, %580, !dbg !1986
  %and1822 = and i32 %add1821, 127, !dbg !1986
  %581 = load i32, ptr %z, align 4, !dbg !1986
  %neq1823 = icmp ne i32 %and1822, %581, !dbg !1986
  br i1 %neq1823, label %if.then1824, label %if.exit1906, !dbg !1986

if.then1824:                                      ; preds = %if.exit1820
    #dbg_declare(ptr %t, !1987, !DIExpression(), !1989)
  %582 = load i32, ptr %a, align 4, !dbg !1989
  %583 = load i32, ptr %i1716, align 4, !dbg !1989
  %add1825 = add i32 %582, %583, !dbg !1989
  %and1826 = and i32 %add1825, 127, !dbg !1989
  %sext1827 = sext i32 %and1826 to i64, !dbg !1989
  %lt1828 = icmp slt i64 %sext1827, 0, !dbg !1989
  %584 = call i1 @llvm.expect.i1(i1 %lt1828, i1 false), !dbg !1989
  br i1 %584, label %panic1829, label %checkok1837, !dbg !1989

checkok1837:                                      ; preds = %if.then1824
  %ge1838 = icmp sge i64 %sext1827, 128, !dbg !1989
  %585 = call i1 @llvm.expect.i1(i1 %ge1838, i1 false), !dbg !1989
  br i1 %585, label %panic1839, label %checkok1849, !dbg !1989

checkok1849:                                      ; preds = %checkok1837
  %ptroffset1850 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1827, !dbg !1989
  %586 = load i32, ptr %ptroffset1850, align 4, !dbg !1989
  store i32 %586, ptr %t, align 4, !dbg !1989
  store i8 1, ptr %switch1851, align 1
  br label %switch.entry1852

switch.entry1852:                                 ; preds = %checkok1849
  %587 = load i8, ptr %switch1851, align 1
  %588 = trunc i8 %587 to i1
  %589 = load i32, ptr %t, align 4, !dbg !1990
  %gt1853 = icmp ugt i32 500000000, %589, !dbg !1990
  br i1 %gt1853, label %and.rhs1854, label %and.phi1863, !dbg !1990

and.rhs1854:                                      ; preds = %switch.entry1852
  %590 = load i32, ptr %t, align 4, !dbg !1990
  %i2b1855 = icmp ne i32 %590, 0, !dbg !1990
  br i1 %i2b1855, label %or.phi1861, label %or.rhs1856, !dbg !1990

or.rhs1856:                                       ; preds = %and.rhs1854
  %591 = load i32, ptr %a, align 4, !dbg !1990
  %592 = load i32, ptr %i1716, align 4, !dbg !1990
  %add1857 = add i32 %591, %592, !dbg !1990
  %add1858 = add i32 %add1857, 1, !dbg !1990
  %and1859 = and i32 %add1858, 127, !dbg !1990
  %593 = load i32, ptr %z, align 4, !dbg !1990
  %neq1860 = icmp ne i32 %and1859, %593, !dbg !1990
  br label %or.phi1861, !dbg !1990

or.phi1861:                                       ; preds = %or.rhs1856, %and.rhs1854
  %val1862 = phi i1 [ true, %and.rhs1854 ], [ %neq1860, %or.rhs1856 ], !dbg !1990
  br label %and.phi1863, !dbg !1990

and.phi1863:                                      ; preds = %or.phi1861, %switch.entry1852
  %val1864 = phi i1 [ false, %switch.entry1852 ], [ %val1862, %or.phi1861 ], !dbg !1990
  %eq1865 = icmp eq i1 %val1864, %588, !dbg !1990
  br i1 %eq1865, label %switch.case1866, label %next_if1870, !dbg !1990

switch.case1866:                                  ; preds = %and.phi1863
  %594 = load double, ptr %frac, align 8, !dbg !1992
  %595 = load i32, ptr %sign420, align 4, !dbg !1992
  %sifp1867 = sitofp i32 %595 to double, !dbg !1992
  %fmul1868 = fmul double 2.500000e-01, %sifp1867, !dbg !1992
  %fadd1869 = fadd double %594, %fmul1868, !dbg !1992
  store double %fadd1869, ptr %frac, align 8, !dbg !1992
  br label %switch.exit1895, !dbg !1992

next_if1870:                                      ; preds = %and.phi1863
  %596 = load i32, ptr %t, align 4, !dbg !1994
  %lt1871 = icmp ult i32 500000000, %596, !dbg !1994
  %eq1872 = icmp eq i1 %lt1871, %588, !dbg !1994
  br i1 %eq1872, label %switch.case1873, label %next_if1877, !dbg !1994

switch.case1873:                                  ; preds = %next_if1870
  %597 = load double, ptr %frac, align 8, !dbg !1995
  %598 = load i32, ptr %sign420, align 4, !dbg !1995
  %sifp1874 = sitofp i32 %598 to double, !dbg !1995
  %fmul1875 = fmul double 7.500000e-01, %sifp1874, !dbg !1995
  %fadd1876 = fadd double %597, %fmul1875, !dbg !1995
  store double %fadd1876, ptr %frac, align 8, !dbg !1995
  br label %switch.exit1895, !dbg !1995

next_if1877:                                      ; preds = %next_if1870
  %599 = load i32, ptr %t, align 4, !dbg !1997
  %eq1878 = icmp eq i32 500000000, %599, !dbg !1997
  %eq1879 = icmp eq i1 %eq1878, %588, !dbg !1997
  br i1 %eq1879, label %switch.case1880, label %next_if1894, !dbg !1997

switch.case1880:                                  ; preds = %next_if1877
  %600 = load i32, ptr %a, align 4, !dbg !1998
  %601 = load i32, ptr %i1716, align 4, !dbg !1998
  %add1881 = add i32 %600, %601, !dbg !1998
  %add1882 = add i32 %add1881, 1, !dbg !1998
  %and1883 = and i32 %add1882, 127, !dbg !1998
  %602 = load i32, ptr %z, align 4, !dbg !1998
  %eq1884 = icmp eq i32 %and1883, %602, !dbg !1998
  br i1 %eq1884, label %if.then1885, label %if.else1889, !dbg !1998

if.then1885:                                      ; preds = %switch.case1880
  %603 = load double, ptr %frac, align 8, !dbg !2000
  %604 = load i32, ptr %sign420, align 4, !dbg !2000
  %sifp1886 = sitofp i32 %604 to double, !dbg !2000
  %fmul1887 = fmul double 5.000000e-01, %sifp1886, !dbg !2000
  %fadd1888 = fadd double %603, %fmul1887, !dbg !2000
  store double %fadd1888, ptr %frac, align 8, !dbg !2000
  br label %if.exit1893, !dbg !2000

if.else1889:                                      ; preds = %switch.case1880
  %605 = load double, ptr %frac, align 8, !dbg !2002
  %606 = load i32, ptr %sign420, align 4, !dbg !2002
  %sifp1890 = sitofp i32 %606 to double, !dbg !2002
  %fmul1891 = fmul double 7.500000e-01, %sifp1890, !dbg !2002
  %fadd1892 = fadd double %605, %fmul1891, !dbg !2002
  store double %fadd1892, ptr %frac, align 8, !dbg !2002
  br label %if.exit1893, !dbg !2002

if.exit1893:                                      ; preds = %if.else1889, %if.then1885
  br label %switch.exit1895, !dbg !2002

next_if1894:                                      ; preds = %next_if1877
  br label %switch.exit1895, !dbg !2002

switch.exit1895:                                  ; preds = %next_if1894, %if.exit1893, %switch.case1873, %switch.case1866
  %607 = load i32, ptr %bits1785, align 4, !dbg !2004
  %sub1896 = sub i32 53, %607, !dbg !2004
  %ge1897 = icmp sge i32 %sub1896, 2, !dbg !2004
  br i1 %ge1897, label %and.rhs1898, label %and.phi1902, !dbg !2004

and.rhs1898:                                      ; preds = %switch.exit1895
  %608 = load double, ptr %frac, align 8, !dbg !2004
  %fmod1899 = frem double %608, 1.000000e+00, !dbg !2004
  %fpbool1900 = fcmp une double %fmod1899, 0.000000e+00, !dbg !2004
  %not1901 = xor i1 %fpbool1900, true, !dbg !2004
  br label %and.phi1902, !dbg !2004

and.phi1902:                                      ; preds = %and.rhs1898, %switch.exit1895
  %val1903 = phi i1 [ false, %switch.exit1895 ], [ %not1901, %and.rhs1898 ], !dbg !2004
  br i1 %val1903, label %if.then1904, label %if.exit1905, !dbg !2004

if.then1904:                                      ; preds = %and.phi1902
  %609 = load double, ptr %frac, align 8, !dbg !2004
  %fincdec = fadd double %609, 1.000000e+00, !dbg !2004
  store double %fincdec, ptr %frac, align 8, !dbg !2004
  br label %if.exit1905, !dbg !2004

if.exit1905:                                      ; preds = %if.then1904, %and.phi1902
  br label %if.exit1906, !dbg !2004

if.exit1906:                                      ; preds = %if.exit1905, %if.exit1820
  %610 = load double, ptr %y1715, align 8, !dbg !2005
  %611 = load double, ptr %frac, align 8, !dbg !2005
  %fadd1907 = fadd double %610, %611, !dbg !2005
  store double %fadd1907, ptr %y1715, align 8, !dbg !2005
  %612 = load double, ptr %y1715, align 8, !dbg !2006
  %613 = load double, ptr %bias1798, align 8, !dbg !2006
  %fsub1908 = fsub double %612, %613, !dbg !2006
  store double %fsub1908, ptr %y1715, align 8, !dbg !2006
  %614 = load i32, ptr %e2799, align 4, !dbg !2007
  %add1909 = add i32 %614, 53, !dbg !2007
  %and1910 = and i32 %add1909, 2147483647, !dbg !2007
  %615 = load i32, ptr %emax, align 4, !dbg !2007
  %sub1911 = sub i32 %615, 5, !dbg !2007
  %gt1912 = icmp sgt i32 %and1910, %sub1911, !dbg !2007
  br i1 %gt1912, label %if.then1913, label %if.exit1941, !dbg !2007

if.then1913:                                      ; preds = %if.exit1906
  %616 = load double, ptr %y1715, align 8
  store double %616, ptr %x1914, align 8
  %617 = load double, ptr %x1914, align 8, !dbg !2008
  %618 = call double @llvm.fabs.f64(double %617), !dbg !2008
  %ge1915 = fcmp oge double %618, 0x4340000000000000, !dbg !2010
  br i1 %ge1915, label %if.then1916, label %if.exit1929, !dbg !2010

if.then1916:                                      ; preds = %if.then1913
  %619 = load i8, ptr %denormal, align 1, !dbg !2012
  %620 = trunc i8 %619 to i1, !dbg !2012
  br i1 %620, label %and.rhs1917, label %and.phi1923, !dbg !2012

and.rhs1917:                                      ; preds = %if.then1916
  %621 = load i32, ptr %bits1785, align 4, !dbg !2012
  %622 = load i32, ptr %e2799, align 4, !dbg !2012
  %add1918 = add i32 53, %622, !dbg !2012
  %sub1919 = sub i32 %add1918, -1074, !dbg !2012
  %eq1920 = icmp eq i32 %sub1919, %621, !dbg !2012
  %check1921 = icmp sge i32 %sub1919, 0, !dbg !2012
  %siui-eq1922 = and i1 %check1921, %eq1920, !dbg !2012
  br label %and.phi1923, !dbg !2012

and.phi1923:                                      ; preds = %and.rhs1917, %if.then1916
  %val1924 = phi i1 [ false, %if.then1916 ], [ %siui-eq1922, %and.rhs1917 ], !dbg !2012
  br i1 %val1924, label %if.then1925, label %if.exit1926, !dbg !2012

if.then1925:                                      ; preds = %and.phi1923
  store i8 0, ptr %denormal, align 1, !dbg !2012
  br label %if.exit1926, !dbg !2012

if.exit1926:                                      ; preds = %if.then1925, %and.phi1923
  %623 = load double, ptr %y1715, align 8, !dbg !2014
  %fmul1927 = fmul double %623, 5.000000e-01, !dbg !2014
  store double %fmul1927, ptr %y1715, align 8, !dbg !2014
  %624 = load i32, ptr %e2799, align 4, !dbg !2015
  %add1928 = add i32 %624, 1, !dbg !2015
  store i32 %add1928, ptr %e2799, align 4, !dbg !2015
  br label %if.exit1929, !dbg !2015

if.exit1929:                                      ; preds = %if.exit1926, %if.then1913
  %625 = load i32, ptr %e2799, align 4, !dbg !2016
  %add1930 = add i32 %625, 53, !dbg !2016
  %626 = load i32, ptr %emax, align 4, !dbg !2016
  %gt1931 = icmp sgt i32 %add1930, %626, !dbg !2016
  br i1 %gt1931, label %or.phi1937, label %or.rhs1932, !dbg !2016

or.rhs1932:                                       ; preds = %if.exit1929
  %627 = load i8, ptr %denormal, align 1, !dbg !2016
  %628 = trunc i8 %627 to i1, !dbg !2016
  br i1 %628, label %and.rhs1933, label %and.phi1935, !dbg !2016

and.rhs1933:                                      ; preds = %or.rhs1932
  %629 = load double, ptr %frac, align 8, !dbg !2016
  %fpbool1934 = fcmp une double %629, 0.000000e+00, !dbg !2016
  br label %and.phi1935, !dbg !2016

and.phi1935:                                      ; preds = %and.rhs1933, %or.rhs1932
  %val1936 = phi i1 [ false, %or.rhs1932 ], [ %fpbool1934, %and.rhs1933 ], !dbg !2016
  br label %or.phi1937, !dbg !2016

or.phi1937:                                       ; preds = %and.phi1935, %if.exit1929
  %val1938 = phi i1 [ true, %if.exit1929 ], [ %val1936, %and.phi1935 ], !dbg !2016
  br i1 %val1938, label %if.then1939, label %if.exit1940, !dbg !2016

if.then1939:                                      ; preds = %or.phi1937
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2016
  br label %err_retblock, !dbg !2016

if.exit1940:                                      ; preds = %or.phi1937
  br label %if.exit1941, !dbg !2016

if.exit1941:                                      ; preds = %if.exit1940, %if.exit1906
  %630 = load double, ptr %y1715, align 8
  store double %630, ptr %x1942, align 8
  %631 = load i32, ptr %e2799, align 4
  store i32 %631, ptr %n1943, align 4
  %632 = load double, ptr %x1942, align 8, !dbg !2017
  %633 = load i32, ptr %n1943, align 4, !dbg !2017
  %634 = call double @scalbn(double %632, i32 %633), !dbg !2017
  store double %634, ptr %blockret421, align 8, !dbg !2017
  br label %expr_block.exit1945, !dbg !2017

expr_block.exit1945:                              ; preds = %if.exit1941, %checkok899, %checkok851, %if.then812, %if.then754, %if.then737, %if.exit487, %if.then475
  %635 = load double, ptr %blockret421, align 8, !dbg !2017
  store double %635, ptr %blockret, align 8, !dbg !2017
  br label %expr_block.exit1946, !dbg !2017

expr_block.exit1946:                              ; preds = %expr_block.exit1945, %expr_block.exit417, %if.then91, %if.then64
  %636 = load double, ptr %blockret, align 8, !dbg !2017
  store double %636, ptr %0, align 8, !dbg !2017
  ret i64 0, !dbg !2017

err_retblock:                                     ; preds = %if.then1939, %if.then763, %if.then760, %if.then733, %guard_block728, %if.then695, %if.then686, %if.then553, %if.then486, %if.then411, %if.then356, %if.then353, %guard_block, %if.then301, %if.then244, %if.then174, %if.then
  %637 = load i64, ptr %reterr, align 8, !dbg !2017
  ret i64 %637, !dbg !2017

panic:                                            ; preds = %and.rhs
  store i64 %3, ptr %taddr, align 8
  %638 = insertvalue %any undef, ptr %taddr, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %640 = insertvalue %any undef, ptr %taddr2, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg4, align 8
  store %any %639, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %641, ptr %ptradd5, align 16
  %642 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %642, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 468, ptr align 8 %indirectarg6), !dbg !1587
  unreachable, !dbg !1587

panic7:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr8, align 8
  %643 = insertvalue %any undef, ptr %taddr8, 0
  %644 = insertvalue %any %643, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr9, align 8
  %645 = insertvalue %any undef, ptr %taddr9, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg12, align 8
  store %any %644, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %646, ptr %ptradd14, align 16
  %647 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %647, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 468, ptr align 8 %indirectarg16), !dbg !1587
  unreachable, !dbg !1587

panic22:                                          ; preds = %if.exit
  store i64 %14, ptr %taddr23, align 8
  %648 = insertvalue %any undef, ptr %taddr23, 0
  %649 = insertvalue %any %648, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr24, align 8
  %650 = insertvalue %any undef, ptr %taddr24, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg27, align 8
  store %any %649, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %651, ptr %ptradd29, align 16
  %652 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %652, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 470, ptr align 8 %indirectarg31), !dbg !1590
  unreachable, !dbg !1590

panic35:                                          ; preds = %switch.case33
  store i64 %21, ptr %taddr36, align 8
  %653 = insertvalue %any undef, ptr %taddr36, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr37, align 8
  %655 = insertvalue %any undef, ptr %taddr37, 0
  %656 = insertvalue %any %655, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg40, align 8
  store %any %654, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %656, ptr %ptradd42, align 16
  %657 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %657, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 476, ptr align 8 %indirectarg44), !dbg !1595
  unreachable, !dbg !1595

panic98:                                          ; preds = %and.rhs95
  store i64 %55, ptr %taddr99, align 8
  %658 = insertvalue %any undef, ptr %taddr99, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr100, align 8
  %660 = insertvalue %any undef, ptr %taddr100, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg103, align 8
  store %any %659, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %661, ptr %ptradd105, align 16
  %662 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %662, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 481, ptr align 8 %indirectarg107), !dbg !1599
  unreachable, !dbg !1599

panic115:                                         ; preds = %and.rhs112
  store i64 %59, ptr %taddr116, align 8
  %663 = insertvalue %any undef, ptr %taddr116, 0
  %664 = insertvalue %any %663, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr117, align 8
  %665 = insertvalue %any undef, ptr %taddr117, 0
  %666 = insertvalue %any %665, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg120, align 8
  store %any %664, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %666, ptr %ptradd122, align 16
  %667 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %667, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, i32 481, ptr align 8 %indirectarg124), !dbg !1599
  unreachable, !dbg !1599

panic132:                                         ; preds = %if.then130
  store i64 %65, ptr %taddr133, align 8
  %668 = insertvalue %any undef, ptr %taddr133, 0
  %669 = insertvalue %any %668, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr134, align 8
  %670 = insertvalue %any undef, ptr %taddr134, 0
  %671 = insertvalue %any %670, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg135, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg137, align 8
  store %any %669, ptr %varargslots138, align 16
  %ptradd139 = getelementptr inbounds i8, ptr %varargslots138, i64 16
  store %any %671, ptr %ptradd139, align 16
  %672 = insertvalue %"any[]" undef, ptr %varargslots138, 0
  %"$$temp140" = insertvalue %"any[]" %672, i64 2, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg135, ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, i32 483, ptr align 8 %indirectarg141), !dbg !1600
  unreachable, !dbg !1600

panic152:                                         ; preds = %loop.cond149
  store i64 %72, ptr %taddr153, align 8
  %673 = insertvalue %any undef, ptr %taddr153, 0
  %674 = insertvalue %any %673, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %74, ptr %taddr154, align 8
  %675 = insertvalue %any undef, ptr %taddr154, 0
  %676 = insertvalue %any %675, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg157, align 8
  store %any %674, ptr %varargslots158, align 16
  %ptradd159 = getelementptr inbounds i8, ptr %varargslots158, i64 16
  store %any %676, ptr %ptradd159, align 16
  %677 = insertvalue %"any[]" undef, ptr %varargslots158, 0
  %"$$temp160" = insertvalue %"any[]" %677, i64 2, 1
  store %"any[]" %"$$temp160", ptr %indirectarg161, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, i32 344, ptr align 8 %indirectarg161), !dbg !1628
  unreachable, !dbg !1628

panic183:                                         ; preds = %and.rhs179
  store i64 %88, ptr %taddr184, align 8
  %678 = insertvalue %any undef, ptr %taddr184, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add181, ptr %taddr185, align 8
  %680 = insertvalue %any undef, ptr %taddr185, 0
  %681 = insertvalue %any %680, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg186, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg188, align 8
  store %any %679, ptr %varargslots189, align 16
  %ptradd190 = getelementptr inbounds i8, ptr %varargslots189, i64 16
  store %any %681, ptr %ptradd190, align 16
  %682 = insertvalue %"any[]" undef, ptr %varargslots189, 0
  %"$$temp191" = insertvalue %"any[]" %682, i64 2, 1
  store %"any[]" %"$$temp191", ptr %indirectarg192, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg186, ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, i32 357, ptr align 8 %indirectarg192), !dbg !1640
  unreachable, !dbg !1640

panic206:                                         ; preds = %and.rhs202
  store i64 %96, ptr %taddr207, align 8
  %683 = insertvalue %any undef, ptr %taddr207, 0
  %684 = insertvalue %any %683, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add204, ptr %taddr208, align 8
  %685 = insertvalue %any undef, ptr %taddr208, 0
  %686 = insertvalue %any %685, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg209, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg210, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg211, align 8
  store %any %684, ptr %varargslots212, align 16
  %ptradd213 = getelementptr inbounds i8, ptr %varargslots212, i64 16
  store %any %686, ptr %ptradd213, align 16
  %687 = insertvalue %"any[]" undef, ptr %varargslots212, 0
  %"$$temp214" = insertvalue %"any[]" %687, i64 2, 1
  store %"any[]" %"$$temp214", ptr %indirectarg215, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg209, ptr align 8 %indirectarg210, ptr align 8 %indirectarg211, i32 361, ptr align 8 %indirectarg215), !dbg !1645
  unreachable, !dbg !1645

panic287:                                         ; preds = %if.exit283
  store i64 %130, ptr %taddr288, align 8
  %688 = insertvalue %any undef, ptr %taddr288, 0
  %689 = insertvalue %any %688, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add285, ptr %taddr289, align 8
  %690 = insertvalue %any undef, ptr %taddr289, 0
  %691 = insertvalue %any %690, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg290, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg291, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg292, align 8
  store %any %689, ptr %varargslots293, align 16
  %ptradd294 = getelementptr inbounds i8, ptr %varargslots293, i64 16
  store %any %691, ptr %ptradd294, align 16
  %692 = insertvalue %"any[]" undef, ptr %varargslots293, 0
  %"$$temp295" = insertvalue %"any[]" %692, i64 2, 1
  store %"any[]" %"$$temp295", ptr %indirectarg296, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg290, ptr align 8 %indirectarg291, ptr align 8 %indirectarg292, i32 397, ptr align 8 %indirectarg296), !dbg !1679
  unreachable, !dbg !1679

panic320:                                         ; preds = %if.then317
  store i64 %147, ptr %taddr321, align 8
  %693 = insertvalue %any undef, ptr %taddr321, 0
  %694 = insertvalue %any %693, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add318, ptr %taddr322, align 8
  %695 = insertvalue %any undef, ptr %taddr322, 0
  %696 = insertvalue %any %695, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg323, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg324, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg325, align 8
  store %any %694, ptr %varargslots326, align 16
  %ptradd327 = getelementptr inbounds i8, ptr %varargslots326, i64 16
  store %any %696, ptr %ptradd327, align 16
  %697 = insertvalue %"any[]" undef, ptr %varargslots326, 0
  %"$$temp328" = insertvalue %"any[]" %697, i64 2, 1
  store %"any[]" %"$$temp328", ptr %indirectarg329, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg323, ptr align 8 %indirectarg324, ptr align 8 %indirectarg325, i32 406, ptr align 8 %indirectarg329), !dbg !1690
  unreachable, !dbg !1690

panic331:                                         ; preds = %checkok330
  store i64 %add318, ptr %taddr332, align 8
  %698 = insertvalue %any undef, ptr %taddr332, 0
  %699 = insertvalue %any %698, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.77, i64 22 }, ptr %indirectarg333, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg334, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg335, align 8
  store %any %699, ptr %varargslots336, align 16
  %700 = insertvalue %"any[]" undef, ptr %varargslots336, 0
  %"$$temp337" = insertvalue %"any[]" %700, i64 1, 1
  store %"any[]" %"$$temp337", ptr %indirectarg338, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg333, ptr align 8 %indirectarg334, ptr align 8 %indirectarg335, i32 406, ptr align 8 %indirectarg338), !dbg !1690
  unreachable, !dbg !1690

panic432:                                         ; preds = %assert_ok
  store i64 %209, ptr %taddr433, align 8
  %701 = insertvalue %any undef, ptr %taddr433, 0
  %702 = insertvalue %any %701, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr434, align 8
  %703 = insertvalue %any undef, ptr %taddr434, 0
  %704 = insertvalue %any %703, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg435, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg436, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg437, align 8
  store %any %702, ptr %varargslots438, align 16
  %ptradd439 = getelementptr inbounds i8, ptr %varargslots438, i64 16
  store %any %704, ptr %ptradd439, align 16
  %705 = insertvalue %"any[]" undef, ptr %varargslots438, 0
  %"$$temp440" = insertvalue %"any[]" %705, i64 2, 1
  store %"any[]" %"$$temp440", ptr %indirectarg441, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg435, ptr align 8 %indirectarg436, ptr align 8 %indirectarg437, i32 45, ptr align 8 %indirectarg441), !dbg !1751
  unreachable, !dbg !1751

panic460:                                         ; preds = %loop.cond457
  store i64 %218, ptr %taddr461, align 8
  %706 = insertvalue %any undef, ptr %taddr461, 0
  %707 = insertvalue %any %706, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %220, ptr %taddr462, align 8
  %708 = insertvalue %any undef, ptr %taddr462, 0
  %709 = insertvalue %any %708, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg463, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg464, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg465, align 8
  store %any %707, ptr %varargslots466, align 16
  %ptradd467 = getelementptr inbounds i8, ptr %varargslots466, i64 16
  store %any %709, ptr %ptradd467, align 16
  %710 = insertvalue %"any[]" undef, ptr %varargslots466, 0
  %"$$temp468" = insertvalue %"any[]" %710, i64 2, 1
  store %"any[]" %"$$temp468", ptr %indirectarg469, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg463, ptr align 8 %indirectarg464, ptr align 8 %indirectarg465, i32 56, ptr align 8 %indirectarg469), !dbg !1769
  unreachable, !dbg !1769

panic496:                                         ; preds = %and.rhs492
  store i64 %235, ptr %taddr497, align 8
  %711 = insertvalue %any undef, ptr %taddr497, 0
  %712 = insertvalue %any %711, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add494, ptr %taddr498, align 8
  %713 = insertvalue %any undef, ptr %taddr498, 0
  %714 = insertvalue %any %713, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg499, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg500, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg501, align 8
  store %any %712, ptr %varargslots502, align 16
  %ptradd503 = getelementptr inbounds i8, ptr %varargslots502, i64 16
  store %any %714, ptr %ptradd503, align 16
  %715 = insertvalue %"any[]" undef, ptr %varargslots502, 0
  %"$$temp504" = insertvalue %"any[]" %715, i64 2, 1
  store %"any[]" %"$$temp504", ptr %indirectarg505, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg499, ptr align 8 %indirectarg500, ptr align 8 %indirectarg501, i32 70, ptr align 8 %indirectarg505), !dbg !1781
  unreachable, !dbg !1781

panic519:                                         ; preds = %and.rhs515
  store i64 %243, ptr %taddr520, align 8
  %716 = insertvalue %any undef, ptr %taddr520, 0
  %717 = insertvalue %any %716, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add517, ptr %taddr521, align 8
  %718 = insertvalue %any undef, ptr %taddr521, 0
  %719 = insertvalue %any %718, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg522, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg523, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg524, align 8
  store %any %717, ptr %varargslots525, align 16
  %ptradd526 = getelementptr inbounds i8, ptr %varargslots525, i64 16
  store %any %719, ptr %ptradd526, align 16
  %720 = insertvalue %"any[]" undef, ptr %varargslots525, 0
  %"$$temp527" = insertvalue %"any[]" %720, i64 2, 1
  store %"any[]" %"$$temp527", ptr %indirectarg528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg522, ptr align 8 %indirectarg523, ptr align 8 %indirectarg524, i32 74, ptr align 8 %indirectarg528), !dbg !1786
  unreachable, !dbg !1786

panic567:                                         ; preds = %if.then565
  store i64 %sext, ptr %taddr568, align 8
  %721 = insertvalue %any undef, ptr %taddr568, 0
  %722 = insertvalue %any %721, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg569, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg570, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg571, align 8
  store %any %722, ptr %varargslots572, align 16
  %723 = insertvalue %"any[]" undef, ptr %varargslots572, 0
  %"$$temp573" = insertvalue %"any[]" %723, i64 1, 1
  store %"any[]" %"$$temp573", ptr %indirectarg574, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg569, ptr align 8 %indirectarg570, ptr align 8 %indirectarg571, i32 94, ptr align 8 %indirectarg574), !dbg !1805
  unreachable, !dbg !1805

panic577:                                         ; preds = %checkok575
  store i64 128, ptr %taddr578, align 8
  %724 = insertvalue %any undef, ptr %taddr578, 0
  %725 = insertvalue %any %724, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr579, align 8
  %726 = insertvalue %any undef, ptr %taddr579, 0
  %727 = insertvalue %any %726, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg580, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg581, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg582, align 8
  store %any %725, ptr %varargslots583, align 16
  %ptradd584 = getelementptr inbounds i8, ptr %varargslots583, i64 16
  store %any %727, ptr %ptradd584, align 16
  %728 = insertvalue %"any[]" undef, ptr %varargslots583, 0
  %"$$temp585" = insertvalue %"any[]" %728, i64 2, 1
  store %"any[]" %"$$temp585", ptr %indirectarg586, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg580, ptr align 8 %indirectarg581, ptr align 8 %indirectarg582, i32 94, ptr align 8 %indirectarg586), !dbg !1805
  unreachable, !dbg !1805

panic590:                                         ; preds = %checkok587
  store i64 %sext588, ptr %taddr591, align 8
  %729 = insertvalue %any undef, ptr %taddr591, 0
  %730 = insertvalue %any %729, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg592, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg593, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg594, align 8
  store %any %730, ptr %varargslots595, align 16
  %731 = insertvalue %"any[]" undef, ptr %varargslots595, 0
  %"$$temp596" = insertvalue %"any[]" %731, i64 1, 1
  store %"any[]" %"$$temp596", ptr %indirectarg597, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg592, ptr align 8 %indirectarg593, ptr align 8 %indirectarg594, i32 94, ptr align 8 %indirectarg597), !dbg !1805
  unreachable, !dbg !1805

panic600:                                         ; preds = %checkok598
  store i64 128, ptr %taddr601, align 8
  %732 = insertvalue %any undef, ptr %taddr601, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext588, ptr %taddr602, align 8
  %734 = insertvalue %any undef, ptr %taddr602, 0
  %735 = insertvalue %any %734, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg603, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg604, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg605, align 8
  store %any %733, ptr %varargslots606, align 16
  %ptradd607 = getelementptr inbounds i8, ptr %varargslots606, i64 16
  store %any %735, ptr %ptradd607, align 16
  %736 = insertvalue %"any[]" undef, ptr %varargslots606, 0
  %"$$temp608" = insertvalue %"any[]" %736, i64 2, 1
  store %"any[]" %"$$temp608", ptr %indirectarg609, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg603, ptr align 8 %indirectarg604, ptr align 8 %indirectarg605, i32 94, ptr align 8 %indirectarg609), !dbg !1805
  unreachable, !dbg !1805

panic619:                                         ; preds = %if.else616
  store i64 %sext617, ptr %taddr620, align 8
  %737 = insertvalue %any undef, ptr %taddr620, 0
  %738 = insertvalue %any %737, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg621, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg622, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg623, align 8
  store %any %738, ptr %varargslots624, align 16
  %739 = insertvalue %"any[]" undef, ptr %varargslots624, 0
  %"$$temp625" = insertvalue %"any[]" %739, i64 1, 1
  store %"any[]" %"$$temp625", ptr %indirectarg626, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg621, ptr align 8 %indirectarg622, ptr align 8 %indirectarg623, i32 98, ptr align 8 %indirectarg626), !dbg !1807
  unreachable, !dbg !1807

panic629:                                         ; preds = %checkok627
  store i64 128, ptr %taddr630, align 8
  %740 = insertvalue %any undef, ptr %taddr630, 0
  %741 = insertvalue %any %740, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext617, ptr %taddr631, align 8
  %742 = insertvalue %any undef, ptr %taddr631, 0
  %743 = insertvalue %any %742, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg632, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg633, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg634, align 8
  store %any %741, ptr %varargslots635, align 16
  %ptradd636 = getelementptr inbounds i8, ptr %varargslots635, i64 16
  store %any %743, ptr %ptradd636, align 16
  %744 = insertvalue %"any[]" undef, ptr %varargslots635, 0
  %"$$temp637" = insertvalue %"any[]" %744, i64 2, 1
  store %"any[]" %"$$temp637", ptr %indirectarg638, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg632, ptr align 8 %indirectarg633, ptr align 8 %indirectarg634, i32 98, ptr align 8 %indirectarg638), !dbg !1807
  unreachable, !dbg !1807

panic669:                                         ; preds = %assert_ok665
  store i64 %284, ptr %taddr670, align 8
  %745 = insertvalue %any undef, ptr %taddr670, 0
  %746 = insertvalue %any %745, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add667, ptr %taddr671, align 8
  %747 = insertvalue %any undef, ptr %taddr671, 0
  %748 = insertvalue %any %747, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg672, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg673, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg674, align 8
  store %any %746, ptr %varargslots675, align 16
  %ptradd676 = getelementptr inbounds i8, ptr %varargslots675, i64 16
  store %any %748, ptr %ptradd676, align 16
  %749 = insertvalue %"any[]" undef, ptr %varargslots675, 0
  %"$$temp677" = insertvalue %"any[]" %749, i64 2, 1
  store %"any[]" %"$$temp677", ptr %indirectarg678, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg672, ptr align 8 %indirectarg673, ptr align 8 %indirectarg674, i32 113, ptr align 8 %indirectarg678), !dbg !1819
  unreachable, !dbg !1819

panic699:                                         ; preds = %if.exit696
  store i64 %300, ptr %taddr700, align 8
  %750 = insertvalue %any undef, ptr %taddr700, 0
  %751 = insertvalue %any %750, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add697, ptr %taddr701, align 8
  %752 = insertvalue %any undef, ptr %taddr701, 0
  %753 = insertvalue %any %752, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg702, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg703, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg704, align 8
  store %any %751, ptr %varargslots705, align 16
  %ptradd706 = getelementptr inbounds i8, ptr %varargslots705, i64 16
  store %any %753, ptr %ptradd706, align 16
  %754 = insertvalue %"any[]" undef, ptr %varargslots705, 0
  %"$$temp707" = insertvalue %"any[]" %754, i64 2, 1
  store %"any[]" %"$$temp707", ptr %indirectarg708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg702, ptr align 8 %indirectarg703, ptr align 8 %indirectarg704, i32 120, ptr align 8 %indirectarg708), !dbg !1826
  unreachable, !dbg !1826

panic711:                                         ; preds = %checkok709
  store i64 %add697, ptr %taddr712, align 8
  %755 = insertvalue %any undef, ptr %taddr712, 0
  %756 = insertvalue %any %755, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.77, i64 22 }, ptr %indirectarg713, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg714, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg715, align 8
  store %any %756, ptr %varargslots716, align 16
  %757 = insertvalue %"any[]" undef, ptr %varargslots716, 0
  %"$$temp717" = insertvalue %"any[]" %757, i64 1, 1
  store %"any[]" %"$$temp717", ptr %indirectarg718, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg713, ptr align 8 %indirectarg714, ptr align 8 %indirectarg715, i32 120, ptr align 8 %indirectarg718), !dbg !1826
  unreachable, !dbg !1826

panic772:                                         ; preds = %loop.body769
  store i64 %sext770, ptr %taddr773, align 8
  %758 = insertvalue %any undef, ptr %taddr773, 0
  %759 = insertvalue %any %758, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg774, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg775, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg776, align 8
  store %any %759, ptr %varargslots777, align 16
  %760 = insertvalue %"any[]" undef, ptr %varargslots777, 0
  %"$$temp778" = insertvalue %"any[]" %760, i64 1, 1
  store %"any[]" %"$$temp778", ptr %indirectarg779, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg774, ptr align 8 %indirectarg775, ptr align 8 %indirectarg776, i32 138, ptr align 8 %indirectarg779), !dbg !1838
  unreachable, !dbg !1838

panic782:                                         ; preds = %checkok780
  store i64 128, ptr %taddr783, align 8
  %761 = insertvalue %any undef, ptr %taddr783, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext770, ptr %taddr784, align 8
  %763 = insertvalue %any undef, ptr %taddr784, 0
  %764 = insertvalue %any %763, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg785, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg786, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg787, align 8
  store %any %762, ptr %varargslots788, align 16
  %ptradd789 = getelementptr inbounds i8, ptr %varargslots788, i64 16
  store %any %764, ptr %ptradd789, align 16
  %765 = insertvalue %"any[]" undef, ptr %varargslots788, 0
  %"$$temp790" = insertvalue %"any[]" %765, i64 2, 1
  store %"any[]" %"$$temp790", ptr %indirectarg791, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg785, ptr align 8 %indirectarg786, ptr align 8 %indirectarg787, i32 138, ptr align 8 %indirectarg791), !dbg !1838
  unreachable, !dbg !1838

panic824:                                         ; preds = %if.then818
  store i64 %sub822, ptr %taddr825, align 8
  %766 = insertvalue %any undef, ptr %taddr825, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg826, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg827, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg828, align 8
  store %any %767, ptr %varargslots829, align 16
  %768 = insertvalue %"any[]" undef, ptr %varargslots829, 0
  %"$$temp830" = insertvalue %"any[]" %768, i64 1, 1
  store %"any[]" %"$$temp830", ptr %indirectarg831, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg826, ptr align 8 %indirectarg827, ptr align 8 %indirectarg828, i32 152, ptr align 8 %indirectarg831), !dbg !1853
  unreachable, !dbg !1853

panic834:                                         ; preds = %checkok832
  store i64 8, ptr %taddr835, align 8
  %769 = insertvalue %any undef, ptr %taddr835, 0
  %770 = insertvalue %any %769, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub822, ptr %taddr836, align 8
  %771 = insertvalue %any undef, ptr %taddr836, 0
  %772 = insertvalue %any %771, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg837, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg838, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg839, align 8
  store %any %770, ptr %varargslots840, align 16
  %ptradd841 = getelementptr inbounds i8, ptr %varargslots840, i64 16
  store %any %772, ptr %ptradd841, align 16
  %773 = insertvalue %"any[]" undef, ptr %varargslots840, 0
  %"$$temp842" = insertvalue %"any[]" %773, i64 2, 1
  store %"any[]" %"$$temp842", ptr %indirectarg843, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg837, ptr align 8 %indirectarg838, ptr align 8 %indirectarg839, i32 152, ptr align 8 %indirectarg843), !dbg !1853
  unreachable, !dbg !1853

panic847:                                         ; preds = %checkok844
  store %"char[]" { ptr @.panic_msg.81, i64 17 }, ptr %indirectarg848, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg849, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg850, align 8
  %774 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %774(ptr align 8 %indirectarg848, ptr align 8 %indirectarg849, ptr align 8 %indirectarg850, i32 152), !dbg !1853
  unreachable, !dbg !1853

panic860:                                         ; preds = %or.rhs859
  store i32 %352, ptr %taddr861, align 4
  %775 = insertvalue %any undef, ptr %taddr861, 0
  %776 = insertvalue %any %775, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg862, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg863, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg864, align 8
  store %any %776, ptr %varargslots865, align 16
  %777 = insertvalue %"any[]" undef, ptr %varargslots865, 0
  %"$$temp866" = insertvalue %"any[]" %777, i64 1, 1
  store %"any[]" %"$$temp866", ptr %indirectarg867, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg862, ptr align 8 %indirectarg863, ptr align 8 %indirectarg864, i32 154, ptr align 8 %indirectarg867), !dbg !1856
  unreachable, !dbg !1856

panic879:                                         ; preds = %if.then873
  store i64 %sub877, ptr %taddr880, align 8
  %778 = insertvalue %any undef, ptr %taddr880, 0
  %779 = insertvalue %any %778, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg881, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg882, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg883, align 8
  store %any %779, ptr %varargslots884, align 16
  %780 = insertvalue %"any[]" undef, ptr %varargslots884, 0
  %"$$temp885" = insertvalue %"any[]" %780, i64 1, 1
  store %"any[]" %"$$temp885", ptr %indirectarg886, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg881, ptr align 8 %indirectarg882, ptr align 8 %indirectarg883, i32 154, ptr align 8 %indirectarg886), !dbg !1856
  unreachable, !dbg !1856

panic889:                                         ; preds = %checkok887
  store i64 8, ptr %taddr890, align 8
  %781 = insertvalue %any undef, ptr %taddr890, 0
  %782 = insertvalue %any %781, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub877, ptr %taddr891, align 8
  %783 = insertvalue %any undef, ptr %taddr891, 0
  %784 = insertvalue %any %783, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg892, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg893, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg894, align 8
  store %any %782, ptr %varargslots895, align 16
  %ptradd896 = getelementptr inbounds i8, ptr %varargslots895, i64 16
  store %any %784, ptr %ptradd896, align 16
  %785 = insertvalue %"any[]" undef, ptr %varargslots895, 0
  %"$$temp897" = insertvalue %"any[]" %785, i64 2, 1
  store %"any[]" %"$$temp897", ptr %indirectarg898, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg892, ptr align 8 %indirectarg893, ptr align 8 %indirectarg894, i32 154, ptr align 8 %indirectarg898), !dbg !1856
  unreachable, !dbg !1856

panic914:                                         ; preds = %cond.phi
  store i64 %sub912, ptr %taddr915, align 8
  %786 = insertvalue %any undef, ptr %taddr915, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg916, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg917, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg918, align 8
  store %any %787, ptr %varargslots919, align 16
  %788 = insertvalue %"any[]" undef, ptr %varargslots919, 0
  %"$$temp920" = insertvalue %"any[]" %788, i64 1, 1
  store %"any[]" %"$$temp920", ptr %indirectarg921, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg916, ptr align 8 %indirectarg917, ptr align 8 %indirectarg918, i32 161, ptr align 8 %indirectarg921), !dbg !1862
  unreachable, !dbg !1862

panic924:                                         ; preds = %checkok922
  store i64 8, ptr %taddr925, align 8
  %789 = insertvalue %any undef, ptr %taddr925, 0
  %790 = insertvalue %any %789, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub912, ptr %taddr926, align 8
  %791 = insertvalue %any undef, ptr %taddr926, 0
  %792 = insertvalue %any %791, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg927, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg928, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg929, align 8
  store %any %790, ptr %varargslots930, align 16
  %ptradd931 = getelementptr inbounds i8, ptr %varargslots930, i64 16
  store %any %792, ptr %ptradd931, align 16
  %793 = insertvalue %"any[]" undef, ptr %varargslots930, 0
  %"$$temp932" = insertvalue %"any[]" %793, i64 2, 1
  store %"any[]" %"$$temp932", ptr %indirectarg933, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg927, ptr align 8 %indirectarg928, ptr align 8 %indirectarg929, i32 161, ptr align 8 %indirectarg933), !dbg !1862
  unreachable, !dbg !1862

panic941:                                         ; preds = %loop.body938
  store i64 %sext939, ptr %taddr942, align 8
  %794 = insertvalue %any undef, ptr %taddr942, 0
  %795 = insertvalue %any %794, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg943, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg944, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg945, align 8
  store %any %795, ptr %varargslots946, align 16
  %796 = insertvalue %"any[]" undef, ptr %varargslots946, 0
  %"$$temp947" = insertvalue %"any[]" %796, i64 1, 1
  store %"any[]" %"$$temp947", ptr %indirectarg948, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg943, ptr align 8 %indirectarg944, ptr align 8 %indirectarg945, i32 165, ptr align 8 %indirectarg948), !dbg !1869
  unreachable, !dbg !1869

panic951:                                         ; preds = %checkok949
  store i64 128, ptr %taddr952, align 8
  %797 = insertvalue %any undef, ptr %taddr952, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext939, ptr %taddr953, align 8
  %799 = insertvalue %any undef, ptr %taddr953, 0
  %800 = insertvalue %any %799, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg954, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg955, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg956, align 8
  store %any %798, ptr %varargslots957, align 16
  %ptradd958 = getelementptr inbounds i8, ptr %varargslots957, i64 16
  store %any %800, ptr %ptradd958, align 16
  %801 = insertvalue %"any[]" undef, ptr %varargslots957, 0
  %"$$temp959" = insertvalue %"any[]" %801, i64 2, 1
  store %"any[]" %"$$temp959", ptr %indirectarg960, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg954, ptr align 8 %indirectarg955, ptr align 8 %indirectarg956, i32 165, ptr align 8 %indirectarg960), !dbg !1869
  unreachable, !dbg !1869

panic964:                                         ; preds = %checkok961
  store %"char[]" { ptr @.panic_msg.83, i64 10 }, ptr %indirectarg965, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg966, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg967, align 8
  %802 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %802(ptr align 8 %indirectarg965, ptr align 8 %indirectarg966, ptr align 8 %indirectarg967, i32 165), !dbg !1869
  unreachable, !dbg !1869

panic972:                                         ; preds = %checkok968
  store i64 %sext970, ptr %taddr973, align 8
  %803 = insertvalue %any undef, ptr %taddr973, 0
  %804 = insertvalue %any %803, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg974, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg975, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg976, align 8
  store %any %804, ptr %varargslots977, align 16
  %805 = insertvalue %"any[]" undef, ptr %varargslots977, 0
  %"$$temp978" = insertvalue %"any[]" %805, i64 1, 1
  store %"any[]" %"$$temp978", ptr %indirectarg979, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg974, ptr align 8 %indirectarg975, ptr align 8 %indirectarg976, i32 166, ptr align 8 %indirectarg979), !dbg !1870
  unreachable, !dbg !1870

panic982:                                         ; preds = %checkok980
  store i64 128, ptr %taddr983, align 8
  %806 = insertvalue %any undef, ptr %taddr983, 0
  %807 = insertvalue %any %806, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext970, ptr %taddr984, align 8
  %808 = insertvalue %any undef, ptr %taddr984, 0
  %809 = insertvalue %any %808, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg985, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg986, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg987, align 8
  store %any %807, ptr %varargslots988, align 16
  %ptradd989 = getelementptr inbounds i8, ptr %varargslots988, i64 16
  store %any %809, ptr %ptradd989, align 16
  %810 = insertvalue %"any[]" undef, ptr %varargslots988, 0
  %"$$temp990" = insertvalue %"any[]" %810, i64 2, 1
  store %"any[]" %"$$temp990", ptr %indirectarg991, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg985, ptr align 8 %indirectarg986, ptr align 8 %indirectarg987, i32 166, ptr align 8 %indirectarg991), !dbg !1870
  unreachable, !dbg !1870

panic996:                                         ; preds = %checkok992
  store i64 %sext994, ptr %taddr997, align 8
  %811 = insertvalue %any undef, ptr %taddr997, 0
  %812 = insertvalue %any %811, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg998, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg999, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1000, align 8
  store %any %812, ptr %varargslots1001, align 16
  %813 = insertvalue %"any[]" undef, ptr %varargslots1001, 0
  %"$$temp1002" = insertvalue %"any[]" %813, i64 1, 1
  store %"any[]" %"$$temp1002", ptr %indirectarg1003, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg998, ptr align 8 %indirectarg999, ptr align 8 %indirectarg1000, i32 166, ptr align 8 %indirectarg1003), !dbg !1870
  unreachable, !dbg !1870

panic1006:                                        ; preds = %checkok1004
  store i64 128, ptr %taddr1007, align 8
  %814 = insertvalue %any undef, ptr %taddr1007, 0
  %815 = insertvalue %any %814, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext994, ptr %taddr1008, align 8
  %816 = insertvalue %any undef, ptr %taddr1008, 0
  %817 = insertvalue %any %816, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1009, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1010, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1011, align 8
  store %any %815, ptr %varargslots1012, align 16
  %ptradd1013 = getelementptr inbounds i8, ptr %varargslots1012, i64 16
  store %any %817, ptr %ptradd1013, align 16
  %818 = insertvalue %"any[]" undef, ptr %varargslots1012, 0
  %"$$temp1014" = insertvalue %"any[]" %818, i64 2, 1
  store %"any[]" %"$$temp1014", ptr %indirectarg1015, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1009, ptr align 8 %indirectarg1010, ptr align 8 %indirectarg1011, i32 166, ptr align 8 %indirectarg1015), !dbg !1870
  unreachable, !dbg !1870

panic1019:                                        ; preds = %checkok1016
  store %"char[]" { ptr @.panic_msg.81, i64 17 }, ptr %indirectarg1020, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1021, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1022, align 8
  %819 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %819(ptr align 8 %indirectarg1020, ptr align 8 %indirectarg1021, ptr align 8 %indirectarg1022, i32 166), !dbg !1870
  unreachable, !dbg !1870

panic1026:                                        ; preds = %checkok1023
  store %"char[]" { ptr @.panic_msg.81, i64 17 }, ptr %indirectarg1027, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1028, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1029, align 8
  %820 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %820(ptr align 8 %indirectarg1027, ptr align 8 %indirectarg1028, ptr align 8 %indirectarg1029, i32 167), !dbg !1871
  unreachable, !dbg !1871

panic1037:                                        ; preds = %and.rhs1034
  store i64 %sext1035, ptr %taddr1038, align 8
  %821 = insertvalue %any undef, ptr %taddr1038, 0
  %822 = insertvalue %any %821, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1039, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1040, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1041, align 8
  store %any %822, ptr %varargslots1042, align 16
  %823 = insertvalue %"any[]" undef, ptr %varargslots1042, 0
  %"$$temp1043" = insertvalue %"any[]" %823, i64 1, 1
  store %"any[]" %"$$temp1043", ptr %indirectarg1044, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1039, ptr align 8 %indirectarg1040, ptr align 8 %indirectarg1041, i32 168, ptr align 8 %indirectarg1044), !dbg !1872
  unreachable, !dbg !1872

panic1047:                                        ; preds = %checkok1045
  store i64 128, ptr %taddr1048, align 8
  %824 = insertvalue %any undef, ptr %taddr1048, 0
  %825 = insertvalue %any %824, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1035, ptr %taddr1049, align 8
  %826 = insertvalue %any undef, ptr %taddr1049, 0
  %827 = insertvalue %any %826, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1050, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1051, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1052, align 8
  store %any %825, ptr %varargslots1053, align 16
  %ptradd1054 = getelementptr inbounds i8, ptr %varargslots1053, i64 16
  store %any %827, ptr %ptradd1054, align 16
  %828 = insertvalue %"any[]" undef, ptr %varargslots1053, 0
  %"$$temp1055" = insertvalue %"any[]" %828, i64 2, 1
  store %"any[]" %"$$temp1055", ptr %indirectarg1056, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1050, ptr align 8 %indirectarg1051, ptr align 8 %indirectarg1052, i32 168, ptr align 8 %indirectarg1056), !dbg !1872
  unreachable, !dbg !1872

panic1074:                                        ; preds = %if.then1070
  store i64 %sext1072, ptr %taddr1075, align 8
  %829 = insertvalue %any undef, ptr %taddr1075, 0
  %830 = insertvalue %any %829, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1076, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1077, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1078, align 8
  store %any %830, ptr %varargslots1079, align 16
  %831 = insertvalue %"any[]" undef, ptr %varargslots1079, 0
  %"$$temp1080" = insertvalue %"any[]" %831, i64 1, 1
  store %"any[]" %"$$temp1080", ptr %indirectarg1081, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1076, ptr align 8 %indirectarg1077, ptr align 8 %indirectarg1078, i32 174, ptr align 8 %indirectarg1081), !dbg !1876
  unreachable, !dbg !1876

panic1084:                                        ; preds = %checkok1082
  store i64 128, ptr %taddr1085, align 8
  %832 = insertvalue %any undef, ptr %taddr1085, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1072, ptr %taddr1086, align 8
  %834 = insertvalue %any undef, ptr %taddr1086, 0
  %835 = insertvalue %any %834, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1087, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1088, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1089, align 8
  store %any %833, ptr %varargslots1090, align 16
  %ptradd1091 = getelementptr inbounds i8, ptr %varargslots1090, i64 16
  store %any %835, ptr %ptradd1091, align 16
  %836 = insertvalue %"any[]" undef, ptr %varargslots1090, 0
  %"$$temp1092" = insertvalue %"any[]" %836, i64 2, 1
  store %"any[]" %"$$temp1092", ptr %indirectarg1093, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1087, ptr align 8 %indirectarg1088, ptr align 8 %indirectarg1089, i32 174, ptr align 8 %indirectarg1093), !dbg !1876
  unreachable, !dbg !1876

panic1107:                                        ; preds = %and.rhs1104
  store i64 %sext1105, ptr %taddr1108, align 8
  %837 = insertvalue %any undef, ptr %taddr1108, 0
  %838 = insertvalue %any %837, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1109, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1110, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1111, align 8
  store %any %838, ptr %varargslots1112, align 16
  %839 = insertvalue %"any[]" undef, ptr %varargslots1112, 0
  %"$$temp1113" = insertvalue %"any[]" %839, i64 1, 1
  store %"any[]" %"$$temp1113", ptr %indirectarg1114, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1109, ptr align 8 %indirectarg1110, ptr align 8 %indirectarg1111, i32 179, ptr align 8 %indirectarg1114), !dbg !1879
  unreachable, !dbg !1879

panic1117:                                        ; preds = %checkok1115
  store i64 128, ptr %taddr1118, align 8
  %840 = insertvalue %any undef, ptr %taddr1118, 0
  %841 = insertvalue %any %840, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1105, ptr %taddr1119, align 8
  %842 = insertvalue %any undef, ptr %taddr1119, 0
  %843 = insertvalue %any %842, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1120, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1121, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1122, align 8
  store %any %841, ptr %varargslots1123, align 16
  %ptradd1124 = getelementptr inbounds i8, ptr %varargslots1123, i64 16
  store %any %843, ptr %ptradd1124, align 16
  %844 = insertvalue %"any[]" undef, ptr %varargslots1123, 0
  %"$$temp1125" = insertvalue %"any[]" %844, i64 2, 1
  store %"any[]" %"$$temp1125", ptr %indirectarg1126, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1120, ptr align 8 %indirectarg1121, ptr align 8 %indirectarg1122, i32 179, ptr align 8 %indirectarg1126), !dbg !1879
  unreachable, !dbg !1879

panic1143:                                        ; preds = %loop.body1139
  store i64 %sext1141, ptr %taddr1144, align 8
  %845 = insertvalue %any undef, ptr %taddr1144, 0
  %846 = insertvalue %any %845, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1145, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1146, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1147, align 8
  store %any %846, ptr %varargslots1148, align 16
  %847 = insertvalue %"any[]" undef, ptr %varargslots1148, 0
  %"$$temp1149" = insertvalue %"any[]" %847, i64 1, 1
  store %"any[]" %"$$temp1149", ptr %indirectarg1150, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1145, ptr align 8 %indirectarg1146, ptr align 8 %indirectarg1147, i32 185, ptr align 8 %indirectarg1150), !dbg !1889
  unreachable, !dbg !1889

panic1153:                                        ; preds = %checkok1151
  store i64 128, ptr %taddr1154, align 8
  %848 = insertvalue %any undef, ptr %taddr1154, 0
  %849 = insertvalue %any %848, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1141, ptr %taddr1155, align 8
  %850 = insertvalue %any undef, ptr %taddr1155, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1156, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1157, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1158, align 8
  store %any %849, ptr %varargslots1159, align 16
  %ptradd1160 = getelementptr inbounds i8, ptr %varargslots1159, i64 16
  store %any %851, ptr %ptradd1160, align 16
  %852 = insertvalue %"any[]" undef, ptr %varargslots1159, 0
  %"$$temp1161" = insertvalue %"any[]" %852, i64 2, 1
  store %"any[]" %"$$temp1161", ptr %indirectarg1162, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1156, ptr align 8 %indirectarg1157, ptr align 8 %indirectarg1158, i32 185, ptr align 8 %indirectarg1162), !dbg !1889
  unreachable, !dbg !1889

panic1174:                                        ; preds = %if.then1169
  store i64 %sext1172, ptr %taddr1175, align 8
  %853 = insertvalue %any undef, ptr %taddr1175, 0
  %854 = insertvalue %any %853, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1176, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1177, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1178, align 8
  store %any %854, ptr %varargslots1179, align 16
  %855 = insertvalue %"any[]" undef, ptr %varargslots1179, 0
  %"$$temp1180" = insertvalue %"any[]" %855, i64 1, 1
  store %"any[]" %"$$temp1180", ptr %indirectarg1181, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1176, ptr align 8 %indirectarg1177, ptr align 8 %indirectarg1178, i32 189, ptr align 8 %indirectarg1181), !dbg !1893
  unreachable, !dbg !1893

panic1184:                                        ; preds = %checkok1182
  store i64 128, ptr %taddr1185, align 8
  %856 = insertvalue %any undef, ptr %taddr1185, 0
  %857 = insertvalue %any %856, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1172, ptr %taddr1186, align 8
  %858 = insertvalue %any undef, ptr %taddr1186, 0
  %859 = insertvalue %any %858, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1187, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1188, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1189, align 8
  store %any %857, ptr %varargslots1190, align 16
  %ptradd1191 = getelementptr inbounds i8, ptr %varargslots1190, i64 16
  store %any %859, ptr %ptradd1191, align 16
  %860 = insertvalue %"any[]" undef, ptr %varargslots1190, 0
  %"$$temp1192" = insertvalue %"any[]" %860, i64 2, 1
  store %"any[]" %"$$temp1192", ptr %indirectarg1193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1187, ptr align 8 %indirectarg1188, ptr align 8 %indirectarg1189, i32 189, ptr align 8 %indirectarg1193), !dbg !1893
  unreachable, !dbg !1893

panic1201:                                        ; preds = %if.else1198
  store i64 %sext1199, ptr %taddr1202, align 8
  %861 = insertvalue %any undef, ptr %taddr1202, 0
  %862 = insertvalue %any %861, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1203, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1204, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1205, align 8
  store %any %862, ptr %varargslots1206, align 16
  %863 = insertvalue %"any[]" undef, ptr %varargslots1206, 0
  %"$$temp1207" = insertvalue %"any[]" %863, i64 1, 1
  store %"any[]" %"$$temp1207", ptr %indirectarg1208, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1203, ptr align 8 %indirectarg1204, ptr align 8 %indirectarg1205, i32 194, ptr align 8 %indirectarg1208), !dbg !1896
  unreachable, !dbg !1896

panic1211:                                        ; preds = %checkok1209
  store i64 128, ptr %taddr1212, align 8
  %864 = insertvalue %any undef, ptr %taddr1212, 0
  %865 = insertvalue %any %864, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1199, ptr %taddr1213, align 8
  %866 = insertvalue %any undef, ptr %taddr1213, 0
  %867 = insertvalue %any %866, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1214, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1215, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1216, align 8
  store %any %865, ptr %varargslots1217, align 16
  %ptradd1218 = getelementptr inbounds i8, ptr %varargslots1217, i64 16
  store %any %867, ptr %ptradd1218, align 16
  %868 = insertvalue %"any[]" undef, ptr %varargslots1217, 0
  %"$$temp1219" = insertvalue %"any[]" %868, i64 2, 1
  store %"any[]" %"$$temp1219", ptr %indirectarg1220, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1214, ptr align 8 %indirectarg1215, ptr align 8 %indirectarg1216, i32 194, ptr align 8 %indirectarg1220), !dbg !1896
  unreachable, !dbg !1896

panic1235:                                        ; preds = %and.rhs1232
  store i64 %sext1233, ptr %taddr1236, align 8
  %869 = insertvalue %any undef, ptr %taddr1236, 0
  %870 = insertvalue %any %869, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1237, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1238, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1239, align 8
  store %any %870, ptr %varargslots1240, align 16
  %871 = insertvalue %"any[]" undef, ptr %varargslots1240, 0
  %"$$temp1241" = insertvalue %"any[]" %871, i64 1, 1
  store %"any[]" %"$$temp1241", ptr %indirectarg1242, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1237, ptr align 8 %indirectarg1238, ptr align 8 %indirectarg1239, i32 196, ptr align 8 %indirectarg1242), !dbg !1897
  unreachable, !dbg !1897

panic1245:                                        ; preds = %checkok1243
  store i64 128, ptr %taddr1246, align 8
  %872 = insertvalue %any undef, ptr %taddr1246, 0
  %873 = insertvalue %any %872, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1233, ptr %taddr1247, align 8
  %874 = insertvalue %any undef, ptr %taddr1247, 0
  %875 = insertvalue %any %874, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1248, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1249, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1250, align 8
  store %any %873, ptr %varargslots1251, align 16
  %ptradd1252 = getelementptr inbounds i8, ptr %varargslots1251, i64 16
  store %any %875, ptr %ptradd1252, align 16
  %876 = insertvalue %"any[]" undef, ptr %varargslots1251, 0
  %"$$temp1253" = insertvalue %"any[]" %876, i64 2, 1
  store %"any[]" %"$$temp1253", ptr %indirectarg1254, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1248, ptr align 8 %indirectarg1249, ptr align 8 %indirectarg1250, i32 196, ptr align 8 %indirectarg1254), !dbg !1897
  unreachable, !dbg !1897

panic1281:                                        ; preds = %if.then1274
  store i64 %sext1279, ptr %taddr1282, align 8
  %877 = insertvalue %any undef, ptr %taddr1282, 0
  %878 = insertvalue %any %877, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1283, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1284, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1285, align 8
  store %any %878, ptr %varargslots1286, align 16
  %879 = insertvalue %"any[]" undef, ptr %varargslots1286, 0
  %"$$temp1287" = insertvalue %"any[]" %879, i64 1, 1
  store %"any[]" %"$$temp1287", ptr %indirectarg1288, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1283, ptr align 8 %indirectarg1284, ptr align 8 %indirectarg1285, i32 206, ptr align 8 %indirectarg1288), !dbg !1906
  unreachable, !dbg !1906

panic1291:                                        ; preds = %checkok1289
  store i64 128, ptr %taddr1292, align 8
  %880 = insertvalue %any undef, ptr %taddr1292, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1279, ptr %taddr1293, align 8
  %882 = insertvalue %any undef, ptr %taddr1293, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1294, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1295, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1296, align 8
  store %any %881, ptr %varargslots1297, align 16
  %ptradd1298 = getelementptr inbounds i8, ptr %varargslots1297, i64 16
  store %any %883, ptr %ptradd1298, align 16
  %884 = insertvalue %"any[]" undef, ptr %varargslots1297, 0
  %"$$temp1299" = insertvalue %"any[]" %884, i64 2, 1
  store %"any[]" %"$$temp1299", ptr %indirectarg1300, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1294, ptr align 8 %indirectarg1295, ptr align 8 %indirectarg1296, i32 206, ptr align 8 %indirectarg1300), !dbg !1906
  unreachable, !dbg !1906

panic1305:                                        ; preds = %checkok1301
  store i64 %sext1303, ptr %taddr1306, align 8
  %885 = insertvalue %any undef, ptr %taddr1306, 0
  %886 = insertvalue %any %885, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1307, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1308, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1309, align 8
  store %any %886, ptr %varargslots1310, align 16
  %887 = insertvalue %"any[]" undef, ptr %varargslots1310, 0
  %"$$temp1311" = insertvalue %"any[]" %887, i64 1, 1
  store %"any[]" %"$$temp1311", ptr %indirectarg1312, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1307, ptr align 8 %indirectarg1308, ptr align 8 %indirectarg1309, i32 206, ptr align 8 %indirectarg1312), !dbg !1906
  unreachable, !dbg !1906

panic1315:                                        ; preds = %checkok1313
  store i64 128, ptr %taddr1316, align 8
  %888 = insertvalue %any undef, ptr %taddr1316, 0
  %889 = insertvalue %any %888, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1303, ptr %taddr1317, align 8
  %890 = insertvalue %any undef, ptr %taddr1317, 0
  %891 = insertvalue %any %890, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1318, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1319, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1320, align 8
  store %any %889, ptr %varargslots1321, align 16
  %ptradd1322 = getelementptr inbounds i8, ptr %varargslots1321, i64 16
  store %any %891, ptr %ptradd1322, align 16
  %892 = insertvalue %"any[]" undef, ptr %varargslots1321, 0
  %"$$temp1323" = insertvalue %"any[]" %892, i64 2, 1
  store %"any[]" %"$$temp1323", ptr %indirectarg1324, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1318, ptr align 8 %indirectarg1319, ptr align 8 %indirectarg1320, i32 206, ptr align 8 %indirectarg1324), !dbg !1906
  unreachable, !dbg !1906

panic1331:                                        ; preds = %if.exit1328
  store i64 %sext1329, ptr %taddr1332, align 8
  %893 = insertvalue %any undef, ptr %taddr1332, 0
  %894 = insertvalue %any %893, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1333, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1334, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1335, align 8
  store %any %894, ptr %varargslots1336, align 16
  %895 = insertvalue %"any[]" undef, ptr %varargslots1336, 0
  %"$$temp1337" = insertvalue %"any[]" %895, i64 1, 1
  store %"any[]" %"$$temp1337", ptr %indirectarg1338, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1333, ptr align 8 %indirectarg1334, ptr align 8 %indirectarg1335, i32 208, ptr align 8 %indirectarg1338), !dbg !1907
  unreachable, !dbg !1907

panic1341:                                        ; preds = %checkok1339
  store i64 128, ptr %taddr1342, align 8
  %896 = insertvalue %any undef, ptr %taddr1342, 0
  %897 = insertvalue %any %896, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1329, ptr %taddr1343, align 8
  %898 = insertvalue %any undef, ptr %taddr1343, 0
  %899 = insertvalue %any %898, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1344, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1345, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1346, align 8
  store %any %897, ptr %varargslots1347, align 16
  %ptradd1348 = getelementptr inbounds i8, ptr %varargslots1347, i64 16
  store %any %899, ptr %ptradd1348, align 16
  %900 = insertvalue %"any[]" undef, ptr %varargslots1347, 0
  %"$$temp1349" = insertvalue %"any[]" %900, i64 2, 1
  store %"any[]" %"$$temp1349", ptr %indirectarg1350, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1344, ptr align 8 %indirectarg1345, ptr align 8 %indirectarg1346, i32 208, ptr align 8 %indirectarg1350), !dbg !1907
  unreachable, !dbg !1907

panic1366:                                        ; preds = %or.rhs1363
  store i64 %sext1364, ptr %taddr1367, align 8
  %901 = insertvalue %any undef, ptr %taddr1367, 0
  %902 = insertvalue %any %901, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1368, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1369, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1370, align 8
  store %any %902, ptr %varargslots1371, align 16
  %903 = insertvalue %"any[]" undef, ptr %varargslots1371, 0
  %"$$temp1372" = insertvalue %"any[]" %903, i64 1, 1
  store %"any[]" %"$$temp1372", ptr %indirectarg1373, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1368, ptr align 8 %indirectarg1369, ptr align 8 %indirectarg1370, i32 221, ptr align 8 %indirectarg1373), !dbg !1921
  unreachable, !dbg !1921

panic1376:                                        ; preds = %checkok1374
  store i64 128, ptr %taddr1377, align 8
  %904 = insertvalue %any undef, ptr %taddr1377, 0
  %905 = insertvalue %any %904, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1364, ptr %taddr1378, align 8
  %906 = insertvalue %any undef, ptr %taddr1378, 0
  %907 = insertvalue %any %906, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1379, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1380, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1381, align 8
  store %any %905, ptr %varargslots1382, align 16
  %ptradd1383 = getelementptr inbounds i8, ptr %varargslots1382, i64 16
  store %any %907, ptr %ptradd1383, align 16
  %908 = insertvalue %"any[]" undef, ptr %varargslots1382, 0
  %"$$temp1384" = insertvalue %"any[]" %908, i64 2, 1
  store %"any[]" %"$$temp1384", ptr %indirectarg1385, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1379, ptr align 8 %indirectarg1380, ptr align 8 %indirectarg1381, i32 221, ptr align 8 %indirectarg1385), !dbg !1921
  unreachable, !dbg !1921

panic1390:                                        ; preds = %checkok1386
  store i64 %sext1388, ptr %taddr1391, align 8
  %909 = insertvalue %any undef, ptr %taddr1391, 0
  %910 = insertvalue %any %909, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1392, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1393, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1394, align 8
  store %any %910, ptr %varargslots1395, align 16
  %911 = insertvalue %"any[]" undef, ptr %varargslots1395, 0
  %"$$temp1396" = insertvalue %"any[]" %911, i64 1, 1
  store %"any[]" %"$$temp1396", ptr %indirectarg1397, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1392, ptr align 8 %indirectarg1393, ptr align 8 %indirectarg1394, i32 221, ptr align 8 %indirectarg1397), !dbg !1921
  unreachable, !dbg !1921

panic1400:                                        ; preds = %checkok1398
  store i64 2, ptr %taddr1401, align 8
  %912 = insertvalue %any undef, ptr %taddr1401, 0
  %913 = insertvalue %any %912, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1388, ptr %taddr1402, align 8
  %914 = insertvalue %any undef, ptr %taddr1402, 0
  %915 = insertvalue %any %914, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1403, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1404, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1405, align 8
  store %any %913, ptr %varargslots1406, align 16
  %ptradd1407 = getelementptr inbounds i8, ptr %varargslots1406, i64 16
  store %any %915, ptr %ptradd1407, align 16
  %916 = insertvalue %"any[]" undef, ptr %varargslots1406, 0
  %"$$temp1408" = insertvalue %"any[]" %916, i64 2, 1
  store %"any[]" %"$$temp1408", ptr %indirectarg1409, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1403, ptr align 8 %indirectarg1404, ptr align 8 %indirectarg1405, i32 221, ptr align 8 %indirectarg1409), !dbg !1921
  unreachable, !dbg !1921

panic1421:                                        ; preds = %if.exit1416
  store i64 %sext1419, ptr %taddr1422, align 8
  %917 = insertvalue %any undef, ptr %taddr1422, 0
  %918 = insertvalue %any %917, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1423, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1424, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1425, align 8
  store %any %918, ptr %varargslots1426, align 16
  %919 = insertvalue %"any[]" undef, ptr %varargslots1426, 0
  %"$$temp1427" = insertvalue %"any[]" %919, i64 1, 1
  store %"any[]" %"$$temp1427", ptr %indirectarg1428, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1423, ptr align 8 %indirectarg1424, ptr align 8 %indirectarg1425, i32 226, ptr align 8 %indirectarg1428), !dbg !1925
  unreachable, !dbg !1925

panic1431:                                        ; preds = %checkok1429
  store i64 128, ptr %taddr1432, align 8
  %920 = insertvalue %any undef, ptr %taddr1432, 0
  %921 = insertvalue %any %920, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1419, ptr %taddr1433, align 8
  %922 = insertvalue %any undef, ptr %taddr1433, 0
  %923 = insertvalue %any %922, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1434, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1435, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1436, align 8
  store %any %921, ptr %varargslots1437, align 16
  %ptradd1438 = getelementptr inbounds i8, ptr %varargslots1437, i64 16
  store %any %923, ptr %ptradd1438, align 16
  %924 = insertvalue %"any[]" undef, ptr %varargslots1437, 0
  %"$$temp1439" = insertvalue %"any[]" %924, i64 2, 1
  store %"any[]" %"$$temp1439", ptr %indirectarg1440, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1434, ptr align 8 %indirectarg1435, ptr align 8 %indirectarg1436, i32 226, ptr align 8 %indirectarg1440), !dbg !1925
  unreachable, !dbg !1925

panic1445:                                        ; preds = %checkok1441
  store i64 %sext1443, ptr %taddr1446, align 8
  %925 = insertvalue %any undef, ptr %taddr1446, 0
  %926 = insertvalue %any %925, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1447, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1448, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1449, align 8
  store %any %926, ptr %varargslots1450, align 16
  %927 = insertvalue %"any[]" undef, ptr %varargslots1450, 0
  %"$$temp1451" = insertvalue %"any[]" %927, i64 1, 1
  store %"any[]" %"$$temp1451", ptr %indirectarg1452, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1447, ptr align 8 %indirectarg1448, ptr align 8 %indirectarg1449, i32 226, ptr align 8 %indirectarg1452), !dbg !1925
  unreachable, !dbg !1925

panic1455:                                        ; preds = %checkok1453
  store i64 2, ptr %taddr1456, align 8
  %928 = insertvalue %any undef, ptr %taddr1456, 0
  %929 = insertvalue %any %928, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1443, ptr %taddr1457, align 8
  %930 = insertvalue %any undef, ptr %taddr1457, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1458, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1459, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1460, align 8
  store %any %929, ptr %varargslots1461, align 16
  %ptradd1462 = getelementptr inbounds i8, ptr %varargslots1461, i64 16
  store %any %931, ptr %ptradd1462, align 16
  %932 = insertvalue %"any[]" undef, ptr %varargslots1461, 0
  %"$$temp1463" = insertvalue %"any[]" %932, i64 2, 1
  store %"any[]" %"$$temp1463", ptr %indirectarg1464, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1458, ptr align 8 %indirectarg1459, ptr align 8 %indirectarg1460, i32 226, ptr align 8 %indirectarg1464), !dbg !1925
  unreachable, !dbg !1925

panic1489:                                        ; preds = %loop.body1485
  store i64 %sext1487, ptr %taddr1490, align 8
  %933 = insertvalue %any undef, ptr %taddr1490, 0
  %934 = insertvalue %any %933, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1491, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1492, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1493, align 8
  store %any %934, ptr %varargslots1494, align 16
  %935 = insertvalue %"any[]" undef, ptr %varargslots1494, 0
  %"$$temp1495" = insertvalue %"any[]" %935, i64 1, 1
  store %"any[]" %"$$temp1495", ptr %indirectarg1496, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1491, ptr align 8 %indirectarg1492, ptr align 8 %indirectarg1493, i32 233, ptr align 8 %indirectarg1496), !dbg !1933
  unreachable, !dbg !1933

panic1499:                                        ; preds = %checkok1497
  store i64 128, ptr %taddr1500, align 8
  %936 = insertvalue %any undef, ptr %taddr1500, 0
  %937 = insertvalue %any %936, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1487, ptr %taddr1501, align 8
  %938 = insertvalue %any undef, ptr %taddr1501, 0
  %939 = insertvalue %any %938, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1502, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1503, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1504, align 8
  store %any %937, ptr %varargslots1505, align 16
  %ptradd1506 = getelementptr inbounds i8, ptr %varargslots1505, i64 16
  store %any %939, ptr %ptradd1506, align 16
  %940 = insertvalue %"any[]" undef, ptr %varargslots1505, 0
  %"$$temp1507" = insertvalue %"any[]" %940, i64 2, 1
  store %"any[]" %"$$temp1507", ptr %indirectarg1508, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1502, ptr align 8 %indirectarg1503, ptr align 8 %indirectarg1504, i32 233, ptr align 8 %indirectarg1508), !dbg !1933
  unreachable, !dbg !1933

panic1511:                                        ; preds = %checkok1509
  store i32 %496, ptr %taddr1512, align 4
  %941 = insertvalue %any undef, ptr %taddr1512, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1513, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1514, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1515, align 8
  store %any %942, ptr %varargslots1516, align 16
  %943 = insertvalue %"any[]" undef, ptr %varargslots1516, 0
  %"$$temp1517" = insertvalue %"any[]" %943, i64 1, 1
  store %"any[]" %"$$temp1517", ptr %indirectarg1518, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1513, ptr align 8 %indirectarg1514, ptr align 8 %indirectarg1515, i32 233, ptr align 8 %indirectarg1518), !dbg !1933
  unreachable, !dbg !1933

panic1521:                                        ; preds = %checkok1519
  store i32 %496, ptr %taddr1522, align 4
  %944 = insertvalue %any undef, ptr %taddr1522, 0
  %945 = insertvalue %any %944, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1523, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1524, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1525, align 8
  store %any %945, ptr %varargslots1526, align 16
  %946 = insertvalue %"any[]" undef, ptr %varargslots1526, 0
  %"$$temp1527" = insertvalue %"any[]" %946, i64 1, 1
  store %"any[]" %"$$temp1527", ptr %indirectarg1528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1523, ptr align 8 %indirectarg1524, ptr align 8 %indirectarg1525, i32 233, ptr align 8 %indirectarg1528), !dbg !1933
  unreachable, !dbg !1933

panic1535:                                        ; preds = %checkok1529
  store i64 %sext1533, ptr %taddr1536, align 8
  %947 = insertvalue %any undef, ptr %taddr1536, 0
  %948 = insertvalue %any %947, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1537, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1538, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1539, align 8
  store %any %948, ptr %varargslots1540, align 16
  %949 = insertvalue %"any[]" undef, ptr %varargslots1540, 0
  %"$$temp1541" = insertvalue %"any[]" %949, i64 1, 1
  store %"any[]" %"$$temp1541", ptr %indirectarg1542, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1537, ptr align 8 %indirectarg1538, ptr align 8 %indirectarg1539, i32 234, ptr align 8 %indirectarg1542), !dbg !1934
  unreachable, !dbg !1934

panic1545:                                        ; preds = %checkok1543
  store i64 128, ptr %taddr1546, align 8
  %950 = insertvalue %any undef, ptr %taddr1546, 0
  %951 = insertvalue %any %950, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1533, ptr %taddr1547, align 8
  %952 = insertvalue %any undef, ptr %taddr1547, 0
  %953 = insertvalue %any %952, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1548, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1549, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1550, align 8
  store %any %951, ptr %varargslots1551, align 16
  %ptradd1552 = getelementptr inbounds i8, ptr %varargslots1551, i64 16
  store %any %953, ptr %ptradd1552, align 16
  %954 = insertvalue %"any[]" undef, ptr %varargslots1551, 0
  %"$$temp1553" = insertvalue %"any[]" %954, i64 2, 1
  store %"any[]" %"$$temp1553", ptr %indirectarg1554, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1548, ptr align 8 %indirectarg1549, ptr align 8 %indirectarg1550, i32 234, ptr align 8 %indirectarg1554), !dbg !1934
  unreachable, !dbg !1934

panic1559:                                        ; preds = %checkok1555
  store i64 %sext1557, ptr %taddr1560, align 8
  %955 = insertvalue %any undef, ptr %taddr1560, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1561, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1562, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1563, align 8
  store %any %956, ptr %varargslots1564, align 16
  %957 = insertvalue %"any[]" undef, ptr %varargslots1564, 0
  %"$$temp1565" = insertvalue %"any[]" %957, i64 1, 1
  store %"any[]" %"$$temp1565", ptr %indirectarg1566, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1561, ptr align 8 %indirectarg1562, ptr align 8 %indirectarg1563, i32 234, ptr align 8 %indirectarg1566), !dbg !1934
  unreachable, !dbg !1934

panic1569:                                        ; preds = %checkok1567
  store i64 128, ptr %taddr1570, align 8
  %958 = insertvalue %any undef, ptr %taddr1570, 0
  %959 = insertvalue %any %958, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1557, ptr %taddr1571, align 8
  %960 = insertvalue %any undef, ptr %taddr1571, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1572, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1573, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1574, align 8
  store %any %959, ptr %varargslots1575, align 16
  %ptradd1576 = getelementptr inbounds i8, ptr %varargslots1575, i64 16
  store %any %961, ptr %ptradd1576, align 16
  %962 = insertvalue %"any[]" undef, ptr %varargslots1575, 0
  %"$$temp1577" = insertvalue %"any[]" %962, i64 2, 1
  store %"any[]" %"$$temp1577", ptr %indirectarg1578, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1572, ptr align 8 %indirectarg1573, ptr align 8 %indirectarg1574, i32 234, ptr align 8 %indirectarg1578), !dbg !1934
  unreachable, !dbg !1934

panic1582:                                        ; preds = %checkok1579
  store i32 %507, ptr %taddr1583, align 4
  %963 = insertvalue %any undef, ptr %taddr1583, 0
  %964 = insertvalue %any %963, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1584, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1585, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1586, align 8
  store %any %964, ptr %varargslots1587, align 16
  %965 = insertvalue %"any[]" undef, ptr %varargslots1587, 0
  %"$$temp1588" = insertvalue %"any[]" %965, i64 1, 1
  store %"any[]" %"$$temp1588", ptr %indirectarg1589, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1584, ptr align 8 %indirectarg1585, ptr align 8 %indirectarg1586, i32 234, ptr align 8 %indirectarg1589), !dbg !1934
  unreachable, !dbg !1934

panic1594:                                        ; preds = %checkok1590
  store i32 %511, ptr %taddr1595, align 4
  %966 = insertvalue %any undef, ptr %taddr1595, 0
  %967 = insertvalue %any %966, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1596, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1597, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1598, align 8
  store %any %967, ptr %varargslots1599, align 16
  %968 = insertvalue %"any[]" undef, ptr %varargslots1599, 0
  %"$$temp1600" = insertvalue %"any[]" %968, i64 1, 1
  store %"any[]" %"$$temp1600", ptr %indirectarg1601, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1596, ptr align 8 %indirectarg1597, ptr align 8 %indirectarg1598, i32 235, ptr align 8 %indirectarg1601), !dbg !1935
  unreachable, !dbg !1935

panic1604:                                        ; preds = %checkok1602
  store i32 %511, ptr %taddr1605, align 4
  %969 = insertvalue %any undef, ptr %taddr1605, 0
  %970 = insertvalue %any %969, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1606, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1607, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1608, align 8
  store %any %970, ptr %varargslots1609, align 16
  %971 = insertvalue %"any[]" undef, ptr %varargslots1609, 0
  %"$$temp1610" = insertvalue %"any[]" %971, i64 1, 1
  store %"any[]" %"$$temp1610", ptr %indirectarg1611, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1606, ptr align 8 %indirectarg1607, ptr align 8 %indirectarg1608, i32 235, ptr align 8 %indirectarg1611), !dbg !1935
  unreachable, !dbg !1935

panic1618:                                        ; preds = %and.rhs1615
  store i64 %sext1616, ptr %taddr1619, align 8
  %972 = insertvalue %any undef, ptr %taddr1619, 0
  %973 = insertvalue %any %972, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1620, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1621, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1622, align 8
  store %any %973, ptr %varargslots1623, align 16
  %974 = insertvalue %"any[]" undef, ptr %varargslots1623, 0
  %"$$temp1624" = insertvalue %"any[]" %974, i64 1, 1
  store %"any[]" %"$$temp1624", ptr %indirectarg1625, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1620, ptr align 8 %indirectarg1621, ptr align 8 %indirectarg1622, i32 236, ptr align 8 %indirectarg1625), !dbg !1936
  unreachable, !dbg !1936

panic1628:                                        ; preds = %checkok1626
  store i64 128, ptr %taddr1629, align 8
  %975 = insertvalue %any undef, ptr %taddr1629, 0
  %976 = insertvalue %any %975, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1616, ptr %taddr1630, align 8
  %977 = insertvalue %any undef, ptr %taddr1630, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1631, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1632, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1633, align 8
  store %any %976, ptr %varargslots1634, align 16
  %ptradd1635 = getelementptr inbounds i8, ptr %varargslots1634, i64 16
  store %any %978, ptr %ptradd1635, align 16
  %979 = insertvalue %"any[]" undef, ptr %varargslots1634, 0
  %"$$temp1636" = insertvalue %"any[]" %979, i64 2, 1
  store %"any[]" %"$$temp1636", ptr %indirectarg1637, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1631, ptr align 8 %indirectarg1632, ptr align 8 %indirectarg1633, i32 236, ptr align 8 %indirectarg1637), !dbg !1936
  unreachable, !dbg !1936

panic1660:                                        ; preds = %if.then1657
  store i64 %sext1658, ptr %taddr1661, align 8
  %980 = insertvalue %any undef, ptr %taddr1661, 0
  %981 = insertvalue %any %980, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1662, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1663, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1664, align 8
  store %any %981, ptr %varargslots1665, align 16
  %982 = insertvalue %"any[]" undef, ptr %varargslots1665, 0
  %"$$temp1666" = insertvalue %"any[]" %982, i64 1, 1
  store %"any[]" %"$$temp1666", ptr %indirectarg1667, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1662, ptr align 8 %indirectarg1663, ptr align 8 %indirectarg1664, i32 247, ptr align 8 %indirectarg1667), !dbg !1944
  unreachable, !dbg !1944

panic1670:                                        ; preds = %checkok1668
  store i64 128, ptr %taddr1671, align 8
  %983 = insertvalue %any undef, ptr %taddr1671, 0
  %984 = insertvalue %any %983, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1658, ptr %taddr1672, align 8
  %985 = insertvalue %any undef, ptr %taddr1672, 0
  %986 = insertvalue %any %985, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1673, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1674, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1675, align 8
  store %any %984, ptr %varargslots1676, align 16
  %ptradd1677 = getelementptr inbounds i8, ptr %varargslots1676, i64 16
  store %any %986, ptr %ptradd1677, align 16
  %987 = insertvalue %"any[]" undef, ptr %varargslots1676, 0
  %"$$temp1678" = insertvalue %"any[]" %987, i64 2, 1
  store %"any[]" %"$$temp1678", ptr %indirectarg1679, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1673, ptr align 8 %indirectarg1674, ptr align 8 %indirectarg1675, i32 247, ptr align 8 %indirectarg1679), !dbg !1944
  unreachable, !dbg !1944

panic1689:                                        ; preds = %if.else1684
  store i64 %sext1687, ptr %taddr1690, align 8
  %988 = insertvalue %any undef, ptr %taddr1690, 0
  %989 = insertvalue %any %988, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1691, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1692, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1693, align 8
  store %any %989, ptr %varargslots1694, align 16
  %990 = insertvalue %"any[]" undef, ptr %varargslots1694, 0
  %"$$temp1695" = insertvalue %"any[]" %990, i64 1, 1
  store %"any[]" %"$$temp1695", ptr %indirectarg1696, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1691, ptr align 8 %indirectarg1692, ptr align 8 %indirectarg1693, i32 252, ptr align 8 %indirectarg1696), !dbg !1947
  unreachable, !dbg !1947

panic1699:                                        ; preds = %checkok1697
  store i64 128, ptr %taddr1700, align 8
  %991 = insertvalue %any undef, ptr %taddr1700, 0
  %992 = insertvalue %any %991, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1687, ptr %taddr1701, align 8
  %993 = insertvalue %any undef, ptr %taddr1701, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1702, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1703, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1704, align 8
  store %any %992, ptr %varargslots1705, align 16
  %ptradd1706 = getelementptr inbounds i8, ptr %varargslots1705, i64 16
  store %any %994, ptr %ptradd1706, align 16
  %995 = insertvalue %"any[]" undef, ptr %varargslots1705, 0
  %"$$temp1707" = insertvalue %"any[]" %995, i64 2, 1
  store %"any[]" %"$$temp1707", ptr %indirectarg1708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1702, ptr align 8 %indirectarg1703, ptr align 8 %indirectarg1704, i32 252, ptr align 8 %indirectarg1708), !dbg !1947
  unreachable, !dbg !1947

panic1729:                                        ; preds = %if.then1723
  store i64 %sext1727, ptr %taddr1730, align 8
  %996 = insertvalue %any undef, ptr %taddr1730, 0
  %997 = insertvalue %any %996, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1731, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1732, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1733, align 8
  store %any %997, ptr %varargslots1734, align 16
  %998 = insertvalue %"any[]" undef, ptr %varargslots1734, 0
  %"$$temp1735" = insertvalue %"any[]" %998, i64 1, 1
  store %"any[]" %"$$temp1735", ptr %indirectarg1736, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1731, ptr align 8 %indirectarg1732, ptr align 8 %indirectarg1733, i32 262, ptr align 8 %indirectarg1736), !dbg !1955
  unreachable, !dbg !1955

panic1739:                                        ; preds = %checkok1737
  store i64 128, ptr %taddr1740, align 8
  %999 = insertvalue %any undef, ptr %taddr1740, 0
  %1000 = insertvalue %any %999, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1727, ptr %taddr1741, align 8
  %1001 = insertvalue %any undef, ptr %taddr1741, 0
  %1002 = insertvalue %any %1001, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1742, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1743, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1744, align 8
  store %any %1000, ptr %varargslots1745, align 16
  %ptradd1746 = getelementptr inbounds i8, ptr %varargslots1745, i64 16
  store %any %1002, ptr %ptradd1746, align 16
  %1003 = insertvalue %"any[]" undef, ptr %varargslots1745, 0
  %"$$temp1747" = insertvalue %"any[]" %1003, i64 2, 1
  store %"any[]" %"$$temp1747", ptr %indirectarg1748, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1742, ptr align 8 %indirectarg1743, ptr align 8 %indirectarg1744, i32 262, ptr align 8 %indirectarg1748), !dbg !1955
  unreachable, !dbg !1955

panic1757:                                        ; preds = %if.exit1751
  store i64 %sext1755, ptr %taddr1758, align 8
  %1004 = insertvalue %any undef, ptr %taddr1758, 0
  %1005 = insertvalue %any %1004, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1759, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1760, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1761, align 8
  store %any %1005, ptr %varargslots1762, align 16
  %1006 = insertvalue %"any[]" undef, ptr %varargslots1762, 0
  %"$$temp1763" = insertvalue %"any[]" %1006, i64 1, 1
  store %"any[]" %"$$temp1763", ptr %indirectarg1764, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1759, ptr align 8 %indirectarg1760, ptr align 8 %indirectarg1761, i32 263, ptr align 8 %indirectarg1764), !dbg !1957
  unreachable, !dbg !1957

panic1767:                                        ; preds = %checkok1765
  store i64 128, ptr %taddr1768, align 8
  %1007 = insertvalue %any undef, ptr %taddr1768, 0
  %1008 = insertvalue %any %1007, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1755, ptr %taddr1769, align 8
  %1009 = insertvalue %any undef, ptr %taddr1769, 0
  %1010 = insertvalue %any %1009, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1770, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1771, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1772, align 8
  store %any %1008, ptr %varargslots1773, align 16
  %ptradd1774 = getelementptr inbounds i8, ptr %varargslots1773, i64 16
  store %any %1010, ptr %ptradd1774, align 16
  %1011 = insertvalue %"any[]" undef, ptr %varargslots1773, 0
  %"$$temp1775" = insertvalue %"any[]" %1011, i64 2, 1
  store %"any[]" %"$$temp1775", ptr %indirectarg1776, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1770, ptr align 8 %indirectarg1771, ptr align 8 %indirectarg1772, i32 263, ptr align 8 %indirectarg1776), !dbg !1957
  unreachable, !dbg !1957

panic1813:                                        ; preds = %if.then1800
  store %"char[]" { ptr @.panic_msg.83, i64 10 }, ptr %indirectarg1814, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1815, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1816, align 8
  %1012 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1012(ptr align 8 %indirectarg1814, ptr align 8 %indirectarg1815, ptr align 8 %indirectarg1816, i32 284), !dbg !1981
  unreachable, !dbg !1981

panic1829:                                        ; preds = %if.then1824
  store i64 %sext1827, ptr %taddr1830, align 8
  %1013 = insertvalue %any undef, ptr %taddr1830, 0
  %1014 = insertvalue %any %1013, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1831, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1832, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1833, align 8
  store %any %1014, ptr %varargslots1834, align 16
  %1015 = insertvalue %"any[]" undef, ptr %varargslots1834, 0
  %"$$temp1835" = insertvalue %"any[]" %1015, i64 1, 1
  store %"any[]" %"$$temp1835", ptr %indirectarg1836, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1831, ptr align 8 %indirectarg1832, ptr align 8 %indirectarg1833, i32 292, ptr align 8 %indirectarg1836), !dbg !1989
  unreachable, !dbg !1989

panic1839:                                        ; preds = %checkok1837
  store i64 128, ptr %taddr1840, align 8
  %1016 = insertvalue %any undef, ptr %taddr1840, 0
  %1017 = insertvalue %any %1016, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1827, ptr %taddr1841, align 8
  %1018 = insertvalue %any undef, ptr %taddr1841, 0
  %1019 = insertvalue %any %1018, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1842, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1843, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %indirectarg1844, align 8
  store %any %1017, ptr %varargslots1845, align 16
  %ptradd1846 = getelementptr inbounds i8, ptr %varargslots1845, i64 16
  store %any %1019, ptr %ptradd1846, align 16
  %1020 = insertvalue %"any[]" undef, ptr %varargslots1845, 0
  %"$$temp1847" = insertvalue %"any[]" %1020, i64 2, 1
  store %"any[]" %"$$temp1847", ptr %indirectarg1848, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1842, ptr align 8 %indirectarg1843, ptr align 8 %indirectarg1844, i32 292, ptr align 8 %indirectarg1848), !dbg !1989
  unreachable, !dbg !1989
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.String.to_float(ptr %0, ptr align 8 %1) #0 comdat !dbg !2020 {
entry:
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca float, align 4
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx54 = alloca i64, align 8
  %cmp.idx68 = alloca i64, align 8
  %cmp.idx80 = alloca i64, align 8
  %taddr99 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %varargslots104 = alloca [2 x %any], align 16
  %indirectarg107 = alloca %"any[]", align 8
  %taddr116 = alloca i64, align 8
  %taddr117 = alloca i64, align 8
  %indirectarg118 = alloca %"char[]", align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %varargslots121 = alloca [2 x %any], align 16
  %indirectarg124 = alloca %"any[]", align 8
  %taddr133 = alloca i64, align 8
  %taddr134 = alloca i64, align 8
  %indirectarg135 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %indirectarg137 = alloca %"char[]", align 8
  %varargslots138 = alloca [2 x %any], align 16
  %indirectarg141 = alloca %"any[]", align 8
  %chars145 = alloca %"char[]", align 8
  %sign146 = alloca i32, align 4
  %blockret147 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %varargslots158 = alloca [2 x %any], align 16
  %indirectarg161 = alloca %"any[]", align 8
  %taddr184 = alloca i64, align 8
  %taddr185 = alloca i64, align 8
  %indirectarg186 = alloca %"char[]", align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %varargslots189 = alloca [2 x %any], align 16
  %indirectarg192 = alloca %"any[]", align 8
  %taddr207 = alloca i64, align 8
  %taddr208 = alloca i64, align 8
  %indirectarg209 = alloca %"char[]", align 8
  %indirectarg210 = alloca %"char[]", align 8
  %indirectarg211 = alloca %"char[]", align 8
  %varargslots212 = alloca [2 x %any], align 16
  %indirectarg215 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret246 = alloca i32, align 4
  %switch256 = alloca i8, align 1
  %taddr288 = alloca i64, align 8
  %taddr289 = alloca i64, align 8
  %indirectarg290 = alloca %"char[]", align 8
  %indirectarg291 = alloca %"char[]", align 8
  %indirectarg292 = alloca %"char[]", align 8
  %varargslots293 = alloca [2 x %any], align 16
  %indirectarg296 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr321 = alloca i64, align 8
  %taddr322 = alloca i64, align 8
  %indirectarg323 = alloca %"char[]", align 8
  %indirectarg324 = alloca %"char[]", align 8
  %indirectarg325 = alloca %"char[]", align 8
  %varargslots326 = alloca [2 x %any], align 16
  %indirectarg329 = alloca %"any[]", align 8
  %taddr332 = alloca i64, align 8
  %indirectarg333 = alloca %"char[]", align 8
  %indirectarg334 = alloca %"char[]", align 8
  %indirectarg335 = alloca %"char[]", align 8
  %varargslots336 = alloca [1 x %any], align 16
  %indirectarg338 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg342 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x384 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x388 = alloca double, align 8
  %y389 = alloca double, align 8
  %x413 = alloca double, align 8
  %n415 = alloca i32, align 4
  %chars419 = alloca %"char[]", align 8
  %sign420 = alloca i32, align 4
  %blockret421 = alloca double, align 8
  %indirectarg424 = alloca %"char[]", align 8
  %indirectarg425 = alloca %"char[]", align 8
  %indirectarg426 = alloca %"char[]", align 8
  %x427 = alloca [128 x i32], align 16
  %emax = alloca i32, align 4
  %index428 = alloca i64, align 8
  %got_digit429 = alloca i8, align 1
  %taddr433 = alloca i64, align 8
  %taddr434 = alloca i64, align 8
  %indirectarg435 = alloca %"char[]", align 8
  %indirectarg436 = alloca %"char[]", align 8
  %indirectarg437 = alloca %"char[]", align 8
  %varargslots438 = alloca [2 x %any], align 16
  %indirectarg441 = alloca %"any[]", align 8
  %got_rad444 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc445 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len446 = alloca i64, align 8
  %last_char448 = alloca i64, align 8
  %indirectarg452 = alloca %"char[]", align 8
  %indirectarg453 = alloca %"char[]", align 8
  %indirectarg454 = alloca %"char[]", align 8
  %c456 = alloca i8, align 1
  %taddr461 = alloca i64, align 8
  %taddr462 = alloca i64, align 8
  %indirectarg463 = alloca %"char[]", align 8
  %indirectarg464 = alloca %"char[]", align 8
  %indirectarg465 = alloca %"char[]", align 8
  %varargslots466 = alloca [2 x %any], align 16
  %indirectarg469 = alloca %"any[]", align 8
  %taddr497 = alloca i64, align 8
  %taddr498 = alloca i64, align 8
  %indirectarg499 = alloca %"char[]", align 8
  %indirectarg500 = alloca %"char[]", align 8
  %indirectarg501 = alloca %"char[]", align 8
  %varargslots502 = alloca [2 x %any], align 16
  %indirectarg505 = alloca %"any[]", align 8
  %taddr520 = alloca i64, align 8
  %taddr521 = alloca i64, align 8
  %indirectarg522 = alloca %"char[]", align 8
  %indirectarg523 = alloca %"char[]", align 8
  %indirectarg524 = alloca %"char[]", align 8
  %varargslots525 = alloca [2 x %any], align 16
  %indirectarg528 = alloca %"any[]", align 8
  %switch548 = alloca i8, align 1
  %taddr568 = alloca i64, align 8
  %indirectarg569 = alloca %"char[]", align 8
  %indirectarg570 = alloca %"char[]", align 8
  %indirectarg571 = alloca %"char[]", align 8
  %varargslots572 = alloca [1 x %any], align 16
  %indirectarg574 = alloca %"any[]", align 8
  %taddr578 = alloca i64, align 8
  %taddr579 = alloca i64, align 8
  %indirectarg580 = alloca %"char[]", align 8
  %indirectarg581 = alloca %"char[]", align 8
  %indirectarg582 = alloca %"char[]", align 8
  %varargslots583 = alloca [2 x %any], align 16
  %indirectarg586 = alloca %"any[]", align 8
  %taddr591 = alloca i64, align 8
  %indirectarg592 = alloca %"char[]", align 8
  %indirectarg593 = alloca %"char[]", align 8
  %indirectarg594 = alloca %"char[]", align 8
  %varargslots595 = alloca [1 x %any], align 16
  %indirectarg597 = alloca %"any[]", align 8
  %taddr601 = alloca i64, align 8
  %taddr602 = alloca i64, align 8
  %indirectarg603 = alloca %"char[]", align 8
  %indirectarg604 = alloca %"char[]", align 8
  %indirectarg605 = alloca %"char[]", align 8
  %varargslots606 = alloca [2 x %any], align 16
  %indirectarg609 = alloca %"any[]", align 8
  %taddr620 = alloca i64, align 8
  %indirectarg621 = alloca %"char[]", align 8
  %indirectarg622 = alloca %"char[]", align 8
  %indirectarg623 = alloca %"char[]", align 8
  %varargslots624 = alloca [1 x %any], align 16
  %indirectarg626 = alloca %"any[]", align 8
  %taddr630 = alloca i64, align 8
  %taddr631 = alloca i64, align 8
  %indirectarg632 = alloca %"char[]", align 8
  %indirectarg633 = alloca %"char[]", align 8
  %indirectarg634 = alloca %"char[]", align 8
  %varargslots635 = alloca [2 x %any], align 16
  %indirectarg638 = alloca %"any[]", align 8
  %indirectarg662 = alloca %"char[]", align 8
  %indirectarg663 = alloca %"char[]", align 8
  %indirectarg664 = alloca %"char[]", align 8
  %taddr670 = alloca i64, align 8
  %taddr671 = alloca i64, align 8
  %indirectarg672 = alloca %"char[]", align 8
  %indirectarg673 = alloca %"char[]", align 8
  %indirectarg674 = alloca %"char[]", align 8
  %varargslots675 = alloca [2 x %any], align 16
  %indirectarg678 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr700 = alloca i64, align 8
  %taddr701 = alloca i64, align 8
  %indirectarg702 = alloca %"char[]", align 8
  %indirectarg703 = alloca %"char[]", align 8
  %indirectarg704 = alloca %"char[]", align 8
  %varargslots705 = alloca [2 x %any], align 16
  %indirectarg708 = alloca %"any[]", align 8
  %taddr712 = alloca i64, align 8
  %indirectarg713 = alloca %"char[]", align 8
  %indirectarg714 = alloca %"char[]", align 8
  %indirectarg715 = alloca %"char[]", align 8
  %varargslots716 = alloca [1 x %any], align 16
  %indirectarg718 = alloca %"any[]", align 8
  %retparam722 = alloca i64, align 8
  %indirectarg723 = alloca %"char[]", align 8
  %error_var727 = alloca i64, align 8
  %taddr773 = alloca i64, align 8
  %indirectarg774 = alloca %"char[]", align 8
  %indirectarg775 = alloca %"char[]", align 8
  %indirectarg776 = alloca %"char[]", align 8
  %varargslots777 = alloca [1 x %any], align 16
  %indirectarg779 = alloca %"any[]", align 8
  %taddr783 = alloca i64, align 8
  %taddr784 = alloca i64, align 8
  %indirectarg785 = alloca %"char[]", align 8
  %indirectarg786 = alloca %"char[]", align 8
  %indirectarg787 = alloca %"char[]", align 8
  %varargslots788 = alloca [2 x %any], align 16
  %indirectarg791 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2799 = alloca i32, align 4
  %rp800 = alloca i64, align 8
  %taddr825 = alloca i64, align 8
  %indirectarg826 = alloca %"char[]", align 8
  %indirectarg827 = alloca %"char[]", align 8
  %indirectarg828 = alloca %"char[]", align 8
  %varargslots829 = alloca [1 x %any], align 16
  %indirectarg831 = alloca %"any[]", align 8
  %taddr835 = alloca i64, align 8
  %taddr836 = alloca i64, align 8
  %indirectarg837 = alloca %"char[]", align 8
  %indirectarg838 = alloca %"char[]", align 8
  %indirectarg839 = alloca %"char[]", align 8
  %varargslots840 = alloca [2 x %any], align 16
  %indirectarg843 = alloca %"any[]", align 8
  %indirectarg848 = alloca %"char[]", align 8
  %indirectarg849 = alloca %"char[]", align 8
  %indirectarg850 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr861 = alloca i32, align 4
  %indirectarg862 = alloca %"char[]", align 8
  %indirectarg863 = alloca %"char[]", align 8
  %indirectarg864 = alloca %"char[]", align 8
  %varargslots865 = alloca [1 x %any], align 16
  %indirectarg867 = alloca %"any[]", align 8
  %taddr880 = alloca i64, align 8
  %indirectarg881 = alloca %"char[]", align 8
  %indirectarg882 = alloca %"char[]", align 8
  %indirectarg883 = alloca %"char[]", align 8
  %varargslots884 = alloca [1 x %any], align 16
  %indirectarg886 = alloca %"any[]", align 8
  %taddr890 = alloca i64, align 8
  %taddr891 = alloca i64, align 8
  %indirectarg892 = alloca %"char[]", align 8
  %indirectarg893 = alloca %"char[]", align 8
  %indirectarg894 = alloca %"char[]", align 8
  %varargslots895 = alloca [2 x %any], align 16
  %indirectarg898 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr915 = alloca i64, align 8
  %indirectarg916 = alloca %"char[]", align 8
  %indirectarg917 = alloca %"char[]", align 8
  %indirectarg918 = alloca %"char[]", align 8
  %varargslots919 = alloca [1 x %any], align 16
  %indirectarg921 = alloca %"any[]", align 8
  %taddr925 = alloca i64, align 8
  %taddr926 = alloca i64, align 8
  %indirectarg927 = alloca %"char[]", align 8
  %indirectarg928 = alloca %"char[]", align 8
  %indirectarg929 = alloca %"char[]", align 8
  %varargslots930 = alloca [2 x %any], align 16
  %indirectarg933 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr942 = alloca i64, align 8
  %indirectarg943 = alloca %"char[]", align 8
  %indirectarg944 = alloca %"char[]", align 8
  %indirectarg945 = alloca %"char[]", align 8
  %varargslots946 = alloca [1 x %any], align 16
  %indirectarg948 = alloca %"any[]", align 8
  %taddr952 = alloca i64, align 8
  %taddr953 = alloca i64, align 8
  %indirectarg954 = alloca %"char[]", align 8
  %indirectarg955 = alloca %"char[]", align 8
  %indirectarg956 = alloca %"char[]", align 8
  %varargslots957 = alloca [2 x %any], align 16
  %indirectarg960 = alloca %"any[]", align 8
  %indirectarg965 = alloca %"char[]", align 8
  %indirectarg966 = alloca %"char[]", align 8
  %indirectarg967 = alloca %"char[]", align 8
  %taddr973 = alloca i64, align 8
  %indirectarg974 = alloca %"char[]", align 8
  %indirectarg975 = alloca %"char[]", align 8
  %indirectarg976 = alloca %"char[]", align 8
  %varargslots977 = alloca [1 x %any], align 16
  %indirectarg979 = alloca %"any[]", align 8
  %taddr983 = alloca i64, align 8
  %taddr984 = alloca i64, align 8
  %indirectarg985 = alloca %"char[]", align 8
  %indirectarg986 = alloca %"char[]", align 8
  %indirectarg987 = alloca %"char[]", align 8
  %varargslots988 = alloca [2 x %any], align 16
  %indirectarg991 = alloca %"any[]", align 8
  %taddr997 = alloca i64, align 8
  %indirectarg998 = alloca %"char[]", align 8
  %indirectarg999 = alloca %"char[]", align 8
  %indirectarg1000 = alloca %"char[]", align 8
  %varargslots1001 = alloca [1 x %any], align 16
  %indirectarg1003 = alloca %"any[]", align 8
  %taddr1007 = alloca i64, align 8
  %taddr1008 = alloca i64, align 8
  %indirectarg1009 = alloca %"char[]", align 8
  %indirectarg1010 = alloca %"char[]", align 8
  %indirectarg1011 = alloca %"char[]", align 8
  %varargslots1012 = alloca [2 x %any], align 16
  %indirectarg1015 = alloca %"any[]", align 8
  %indirectarg1020 = alloca %"char[]", align 8
  %indirectarg1021 = alloca %"char[]", align 8
  %indirectarg1022 = alloca %"char[]", align 8
  %indirectarg1027 = alloca %"char[]", align 8
  %indirectarg1028 = alloca %"char[]", align 8
  %indirectarg1029 = alloca %"char[]", align 8
  %taddr1038 = alloca i64, align 8
  %indirectarg1039 = alloca %"char[]", align 8
  %indirectarg1040 = alloca %"char[]", align 8
  %indirectarg1041 = alloca %"char[]", align 8
  %varargslots1042 = alloca [1 x %any], align 16
  %indirectarg1044 = alloca %"any[]", align 8
  %taddr1048 = alloca i64, align 8
  %taddr1049 = alloca i64, align 8
  %indirectarg1050 = alloca %"char[]", align 8
  %indirectarg1051 = alloca %"char[]", align 8
  %indirectarg1052 = alloca %"char[]", align 8
  %varargslots1053 = alloca [2 x %any], align 16
  %indirectarg1056 = alloca %"any[]", align 8
  %taddr1075 = alloca i64, align 8
  %indirectarg1076 = alloca %"char[]", align 8
  %indirectarg1077 = alloca %"char[]", align 8
  %indirectarg1078 = alloca %"char[]", align 8
  %varargslots1079 = alloca [1 x %any], align 16
  %indirectarg1081 = alloca %"any[]", align 8
  %taddr1085 = alloca i64, align 8
  %taddr1086 = alloca i64, align 8
  %indirectarg1087 = alloca %"char[]", align 8
  %indirectarg1088 = alloca %"char[]", align 8
  %indirectarg1089 = alloca %"char[]", align 8
  %varargslots1090 = alloca [2 x %any], align 16
  %indirectarg1093 = alloca %"any[]", align 8
  %taddr1108 = alloca i64, align 8
  %indirectarg1109 = alloca %"char[]", align 8
  %indirectarg1110 = alloca %"char[]", align 8
  %indirectarg1111 = alloca %"char[]", align 8
  %varargslots1112 = alloca [1 x %any], align 16
  %indirectarg1114 = alloca %"any[]", align 8
  %taddr1118 = alloca i64, align 8
  %taddr1119 = alloca i64, align 8
  %indirectarg1120 = alloca %"char[]", align 8
  %indirectarg1121 = alloca %"char[]", align 8
  %indirectarg1122 = alloca %"char[]", align 8
  %varargslots1123 = alloca [2 x %any], align 16
  %indirectarg1126 = alloca %"any[]", align 8
  %carry1135 = alloca i32, align 4
  %tmp1140 = alloca i64, align 8
  %taddr1144 = alloca i64, align 8
  %indirectarg1145 = alloca %"char[]", align 8
  %indirectarg1146 = alloca %"char[]", align 8
  %indirectarg1147 = alloca %"char[]", align 8
  %varargslots1148 = alloca [1 x %any], align 16
  %indirectarg1150 = alloca %"any[]", align 8
  %taddr1154 = alloca i64, align 8
  %taddr1155 = alloca i64, align 8
  %indirectarg1156 = alloca %"char[]", align 8
  %indirectarg1157 = alloca %"char[]", align 8
  %indirectarg1158 = alloca %"char[]", align 8
  %varargslots1159 = alloca [2 x %any], align 16
  %indirectarg1162 = alloca %"any[]", align 8
  %taddr1175 = alloca i64, align 8
  %indirectarg1176 = alloca %"char[]", align 8
  %indirectarg1177 = alloca %"char[]", align 8
  %indirectarg1178 = alloca %"char[]", align 8
  %varargslots1179 = alloca [1 x %any], align 16
  %indirectarg1181 = alloca %"any[]", align 8
  %taddr1185 = alloca i64, align 8
  %taddr1186 = alloca i64, align 8
  %indirectarg1187 = alloca %"char[]", align 8
  %indirectarg1188 = alloca %"char[]", align 8
  %indirectarg1189 = alloca %"char[]", align 8
  %varargslots1190 = alloca [2 x %any], align 16
  %indirectarg1193 = alloca %"any[]", align 8
  %taddr1202 = alloca i64, align 8
  %indirectarg1203 = alloca %"char[]", align 8
  %indirectarg1204 = alloca %"char[]", align 8
  %indirectarg1205 = alloca %"char[]", align 8
  %varargslots1206 = alloca [1 x %any], align 16
  %indirectarg1208 = alloca %"any[]", align 8
  %taddr1212 = alloca i64, align 8
  %taddr1213 = alloca i64, align 8
  %indirectarg1214 = alloca %"char[]", align 8
  %indirectarg1215 = alloca %"char[]", align 8
  %indirectarg1216 = alloca %"char[]", align 8
  %varargslots1217 = alloca [2 x %any], align 16
  %indirectarg1220 = alloca %"any[]", align 8
  %taddr1236 = alloca i64, align 8
  %indirectarg1237 = alloca %"char[]", align 8
  %indirectarg1238 = alloca %"char[]", align 8
  %indirectarg1239 = alloca %"char[]", align 8
  %varargslots1240 = alloca [1 x %any], align 16
  %indirectarg1242 = alloca %"any[]", align 8
  %taddr1246 = alloca i64, align 8
  %taddr1247 = alloca i64, align 8
  %indirectarg1248 = alloca %"char[]", align 8
  %indirectarg1249 = alloca %"char[]", align 8
  %indirectarg1250 = alloca %"char[]", align 8
  %varargslots1251 = alloca [2 x %any], align 16
  %indirectarg1254 = alloca %"any[]", align 8
  %taddr1282 = alloca i64, align 8
  %indirectarg1283 = alloca %"char[]", align 8
  %indirectarg1284 = alloca %"char[]", align 8
  %indirectarg1285 = alloca %"char[]", align 8
  %varargslots1286 = alloca [1 x %any], align 16
  %indirectarg1288 = alloca %"any[]", align 8
  %taddr1292 = alloca i64, align 8
  %taddr1293 = alloca i64, align 8
  %indirectarg1294 = alloca %"char[]", align 8
  %indirectarg1295 = alloca %"char[]", align 8
  %indirectarg1296 = alloca %"char[]", align 8
  %varargslots1297 = alloca [2 x %any], align 16
  %indirectarg1300 = alloca %"any[]", align 8
  %taddr1306 = alloca i64, align 8
  %indirectarg1307 = alloca %"char[]", align 8
  %indirectarg1308 = alloca %"char[]", align 8
  %indirectarg1309 = alloca %"char[]", align 8
  %varargslots1310 = alloca [1 x %any], align 16
  %indirectarg1312 = alloca %"any[]", align 8
  %taddr1316 = alloca i64, align 8
  %taddr1317 = alloca i64, align 8
  %indirectarg1318 = alloca %"char[]", align 8
  %indirectarg1319 = alloca %"char[]", align 8
  %indirectarg1320 = alloca %"char[]", align 8
  %varargslots1321 = alloca [2 x %any], align 16
  %indirectarg1324 = alloca %"any[]", align 8
  %taddr1332 = alloca i64, align 8
  %indirectarg1333 = alloca %"char[]", align 8
  %indirectarg1334 = alloca %"char[]", align 8
  %indirectarg1335 = alloca %"char[]", align 8
  %varargslots1336 = alloca [1 x %any], align 16
  %indirectarg1338 = alloca %"any[]", align 8
  %taddr1342 = alloca i64, align 8
  %taddr1343 = alloca i64, align 8
  %indirectarg1344 = alloca %"char[]", align 8
  %indirectarg1345 = alloca %"char[]", align 8
  %indirectarg1346 = alloca %"char[]", align 8
  %varargslots1347 = alloca [2 x %any], align 16
  %indirectarg1350 = alloca %"any[]", align 8
  %carry1356 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1367 = alloca i64, align 8
  %indirectarg1368 = alloca %"char[]", align 8
  %indirectarg1369 = alloca %"char[]", align 8
  %indirectarg1370 = alloca %"char[]", align 8
  %varargslots1371 = alloca [1 x %any], align 16
  %indirectarg1373 = alloca %"any[]", align 8
  %taddr1377 = alloca i64, align 8
  %taddr1378 = alloca i64, align 8
  %indirectarg1379 = alloca %"char[]", align 8
  %indirectarg1380 = alloca %"char[]", align 8
  %indirectarg1381 = alloca %"char[]", align 8
  %varargslots1382 = alloca [2 x %any], align 16
  %indirectarg1385 = alloca %"any[]", align 8
  %taddr1391 = alloca i64, align 8
  %indirectarg1392 = alloca %"char[]", align 8
  %indirectarg1393 = alloca %"char[]", align 8
  %indirectarg1394 = alloca %"char[]", align 8
  %varargslots1395 = alloca [1 x %any], align 16
  %indirectarg1397 = alloca %"any[]", align 8
  %taddr1401 = alloca i64, align 8
  %taddr1402 = alloca i64, align 8
  %indirectarg1403 = alloca %"char[]", align 8
  %indirectarg1404 = alloca %"char[]", align 8
  %indirectarg1405 = alloca %"char[]", align 8
  %varargslots1406 = alloca [2 x %any], align 16
  %indirectarg1409 = alloca %"any[]", align 8
  %taddr1422 = alloca i64, align 8
  %indirectarg1423 = alloca %"char[]", align 8
  %indirectarg1424 = alloca %"char[]", align 8
  %indirectarg1425 = alloca %"char[]", align 8
  %varargslots1426 = alloca [1 x %any], align 16
  %indirectarg1428 = alloca %"any[]", align 8
  %taddr1432 = alloca i64, align 8
  %taddr1433 = alloca i64, align 8
  %indirectarg1434 = alloca %"char[]", align 8
  %indirectarg1435 = alloca %"char[]", align 8
  %indirectarg1436 = alloca %"char[]", align 8
  %varargslots1437 = alloca [2 x %any], align 16
  %indirectarg1440 = alloca %"any[]", align 8
  %taddr1446 = alloca i64, align 8
  %indirectarg1447 = alloca %"char[]", align 8
  %indirectarg1448 = alloca %"char[]", align 8
  %indirectarg1449 = alloca %"char[]", align 8
  %varargslots1450 = alloca [1 x %any], align 16
  %indirectarg1452 = alloca %"any[]", align 8
  %taddr1456 = alloca i64, align 8
  %taddr1457 = alloca i64, align 8
  %indirectarg1458 = alloca %"char[]", align 8
  %indirectarg1459 = alloca %"char[]", align 8
  %indirectarg1460 = alloca %"char[]", align 8
  %varargslots1461 = alloca [2 x %any], align 16
  %indirectarg1464 = alloca %"any[]", align 8
  %tmp1486 = alloca i32, align 4
  %taddr1490 = alloca i64, align 8
  %indirectarg1491 = alloca %"char[]", align 8
  %indirectarg1492 = alloca %"char[]", align 8
  %indirectarg1493 = alloca %"char[]", align 8
  %varargslots1494 = alloca [1 x %any], align 16
  %indirectarg1496 = alloca %"any[]", align 8
  %taddr1500 = alloca i64, align 8
  %taddr1501 = alloca i64, align 8
  %indirectarg1502 = alloca %"char[]", align 8
  %indirectarg1503 = alloca %"char[]", align 8
  %indirectarg1504 = alloca %"char[]", align 8
  %varargslots1505 = alloca [2 x %any], align 16
  %indirectarg1508 = alloca %"any[]", align 8
  %taddr1512 = alloca i32, align 4
  %indirectarg1513 = alloca %"char[]", align 8
  %indirectarg1514 = alloca %"char[]", align 8
  %indirectarg1515 = alloca %"char[]", align 8
  %varargslots1516 = alloca [1 x %any], align 16
  %indirectarg1518 = alloca %"any[]", align 8
  %taddr1522 = alloca i32, align 4
  %indirectarg1523 = alloca %"char[]", align 8
  %indirectarg1524 = alloca %"char[]", align 8
  %indirectarg1525 = alloca %"char[]", align 8
  %varargslots1526 = alloca [1 x %any], align 16
  %indirectarg1528 = alloca %"any[]", align 8
  %taddr1536 = alloca i64, align 8
  %indirectarg1537 = alloca %"char[]", align 8
  %indirectarg1538 = alloca %"char[]", align 8
  %indirectarg1539 = alloca %"char[]", align 8
  %varargslots1540 = alloca [1 x %any], align 16
  %indirectarg1542 = alloca %"any[]", align 8
  %taddr1546 = alloca i64, align 8
  %taddr1547 = alloca i64, align 8
  %indirectarg1548 = alloca %"char[]", align 8
  %indirectarg1549 = alloca %"char[]", align 8
  %indirectarg1550 = alloca %"char[]", align 8
  %varargslots1551 = alloca [2 x %any], align 16
  %indirectarg1554 = alloca %"any[]", align 8
  %taddr1560 = alloca i64, align 8
  %indirectarg1561 = alloca %"char[]", align 8
  %indirectarg1562 = alloca %"char[]", align 8
  %indirectarg1563 = alloca %"char[]", align 8
  %varargslots1564 = alloca [1 x %any], align 16
  %indirectarg1566 = alloca %"any[]", align 8
  %taddr1570 = alloca i64, align 8
  %taddr1571 = alloca i64, align 8
  %indirectarg1572 = alloca %"char[]", align 8
  %indirectarg1573 = alloca %"char[]", align 8
  %indirectarg1574 = alloca %"char[]", align 8
  %varargslots1575 = alloca [2 x %any], align 16
  %indirectarg1578 = alloca %"any[]", align 8
  %taddr1583 = alloca i32, align 4
  %indirectarg1584 = alloca %"char[]", align 8
  %indirectarg1585 = alloca %"char[]", align 8
  %indirectarg1586 = alloca %"char[]", align 8
  %varargslots1587 = alloca [1 x %any], align 16
  %indirectarg1589 = alloca %"any[]", align 8
  %taddr1595 = alloca i32, align 4
  %indirectarg1596 = alloca %"char[]", align 8
  %indirectarg1597 = alloca %"char[]", align 8
  %indirectarg1598 = alloca %"char[]", align 8
  %varargslots1599 = alloca [1 x %any], align 16
  %indirectarg1601 = alloca %"any[]", align 8
  %taddr1605 = alloca i32, align 4
  %indirectarg1606 = alloca %"char[]", align 8
  %indirectarg1607 = alloca %"char[]", align 8
  %indirectarg1608 = alloca %"char[]", align 8
  %varargslots1609 = alloca [1 x %any], align 16
  %indirectarg1611 = alloca %"any[]", align 8
  %taddr1619 = alloca i64, align 8
  %indirectarg1620 = alloca %"char[]", align 8
  %indirectarg1621 = alloca %"char[]", align 8
  %indirectarg1622 = alloca %"char[]", align 8
  %varargslots1623 = alloca [1 x %any], align 16
  %indirectarg1625 = alloca %"any[]", align 8
  %taddr1629 = alloca i64, align 8
  %taddr1630 = alloca i64, align 8
  %indirectarg1631 = alloca %"char[]", align 8
  %indirectarg1632 = alloca %"char[]", align 8
  %indirectarg1633 = alloca %"char[]", align 8
  %varargslots1634 = alloca [2 x %any], align 16
  %indirectarg1637 = alloca %"any[]", align 8
  %taddr1661 = alloca i64, align 8
  %indirectarg1662 = alloca %"char[]", align 8
  %indirectarg1663 = alloca %"char[]", align 8
  %indirectarg1664 = alloca %"char[]", align 8
  %varargslots1665 = alloca [1 x %any], align 16
  %indirectarg1667 = alloca %"any[]", align 8
  %taddr1671 = alloca i64, align 8
  %taddr1672 = alloca i64, align 8
  %indirectarg1673 = alloca %"char[]", align 8
  %indirectarg1674 = alloca %"char[]", align 8
  %indirectarg1675 = alloca %"char[]", align 8
  %varargslots1676 = alloca [2 x %any], align 16
  %indirectarg1679 = alloca %"any[]", align 8
  %taddr1690 = alloca i64, align 8
  %indirectarg1691 = alloca %"char[]", align 8
  %indirectarg1692 = alloca %"char[]", align 8
  %indirectarg1693 = alloca %"char[]", align 8
  %varargslots1694 = alloca [1 x %any], align 16
  %indirectarg1696 = alloca %"any[]", align 8
  %taddr1700 = alloca i64, align 8
  %taddr1701 = alloca i64, align 8
  %indirectarg1702 = alloca %"char[]", align 8
  %indirectarg1703 = alloca %"char[]", align 8
  %indirectarg1704 = alloca %"char[]", align 8
  %varargslots1705 = alloca [2 x %any], align 16
  %indirectarg1708 = alloca %"any[]", align 8
  %y1715 = alloca double, align 8
  %i1716 = alloca i32, align 4
  %taddr1730 = alloca i64, align 8
  %indirectarg1731 = alloca %"char[]", align 8
  %indirectarg1732 = alloca %"char[]", align 8
  %indirectarg1733 = alloca %"char[]", align 8
  %varargslots1734 = alloca [1 x %any], align 16
  %indirectarg1736 = alloca %"any[]", align 8
  %taddr1740 = alloca i64, align 8
  %taddr1741 = alloca i64, align 8
  %indirectarg1742 = alloca %"char[]", align 8
  %indirectarg1743 = alloca %"char[]", align 8
  %indirectarg1744 = alloca %"char[]", align 8
  %varargslots1745 = alloca [2 x %any], align 16
  %indirectarg1748 = alloca %"any[]", align 8
  %taddr1758 = alloca i64, align 8
  %indirectarg1759 = alloca %"char[]", align 8
  %indirectarg1760 = alloca %"char[]", align 8
  %indirectarg1761 = alloca %"char[]", align 8
  %varargslots1762 = alloca [1 x %any], align 16
  %indirectarg1764 = alloca %"any[]", align 8
  %taddr1768 = alloca i64, align 8
  %taddr1769 = alloca i64, align 8
  %indirectarg1770 = alloca %"char[]", align 8
  %indirectarg1771 = alloca %"char[]", align 8
  %indirectarg1772 = alloca %"char[]", align 8
  %varargslots1773 = alloca [2 x %any], align 16
  %indirectarg1776 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1785 = alloca i32, align 4
  %bias1798 = alloca double, align 8
  %frac = alloca double, align 8
  %x1801 = alloca double, align 8
  %n1804 = alloca i32, align 4
  %mag1805 = alloca double, align 8
  %sgn1806 = alloca double, align 8
  %x1807 = alloca double, align 8
  %y1808 = alloca double, align 8
  %x1809 = alloca double, align 8
  %n1811 = alloca i32, align 4
  %indirectarg1814 = alloca %"char[]", align 8
  %indirectarg1815 = alloca %"char[]", align 8
  %indirectarg1816 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1830 = alloca i64, align 8
  %indirectarg1831 = alloca %"char[]", align 8
  %indirectarg1832 = alloca %"char[]", align 8
  %indirectarg1833 = alloca %"char[]", align 8
  %varargslots1834 = alloca [1 x %any], align 16
  %indirectarg1836 = alloca %"any[]", align 8
  %taddr1840 = alloca i64, align 8
  %taddr1841 = alloca i64, align 8
  %indirectarg1842 = alloca %"char[]", align 8
  %indirectarg1843 = alloca %"char[]", align 8
  %indirectarg1844 = alloca %"char[]", align 8
  %varargslots1845 = alloca [2 x %any], align 16
  %indirectarg1848 = alloca %"any[]", align 8
  %switch1851 = alloca i8, align 1
  %x1914 = alloca double, align 8
  %x1942 = alloca double, align 8
  %n1943 = alloca i32, align 4
    #dbg_declare(ptr %1, !2025, !DIExpression(), !2026)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %sign, !2027, !DIExpression(), !2029)
  store i32 1, ptr %sign, align 4, !dbg !2029
  br label %loop.cond, !dbg !2030

loop.cond:                                        ; preds = %checkok17, %entry
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2031
  %2 = load i64, ptr %ptradd, align 8, !dbg !2031
  %i2b = icmp ne i64 %2, 0, !dbg !2031
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !2031

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2031
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2031
  %4 = load ptr, ptr %chars, align 8, !dbg !2031
  %ge = icmp sge i64 0, %3, !dbg !2031
  %5 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2031
  br i1 %5, label %panic, label %checkok, !dbg !2031

checkok:                                          ; preds = %and.rhs
  %6 = load i8, ptr %4, align 1, !dbg !2031
  %eq = icmp eq i8 %6, 32, !dbg !2031
  br label %and.phi, !dbg !2031

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !2031
  br i1 %val, label %loop.body, label %loop.exit, !dbg !2031

loop.body:                                        ; preds = %and.phi
  %7 = load %"char[]", ptr %chars, align 8, !dbg !2031
  %8 = extractvalue %"char[]" %7, 0, !dbg !2031
  %9 = extractvalue %"char[]" %7, 1, !dbg !2031
  %gt = icmp sgt i64 1, %9, !dbg !2031
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2031
  br i1 %10, label %panic7, label %checkok17, !dbg !2031

checkok17:                                        ; preds = %loop.body
  %size = sub i64 %9, 1, !dbg !2031
  %ptradd18 = getelementptr inbounds i8, ptr %8, i64 1, !dbg !2031
  %11 = insertvalue %"char[]" undef, ptr %ptradd18, 0, !dbg !2031
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2031
  store %"char[]" %12, ptr %chars, align 8, !dbg !2031
  br label %loop.cond, !dbg !2031

loop.exit:                                        ; preds = %and.phi
  %ptradd19 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2033
  %13 = load i64, ptr %ptradd19, align 8, !dbg !2033
  %i2nb = icmp eq i64 %13, 0, !dbg !2033
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2033

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2033
  br label %err_retblock, !dbg !2033

if.exit:                                          ; preds = %loop.exit
  %ptradd20 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2034
  %14 = load i64, ptr %ptradd20, align 8, !dbg !2034
  %15 = load ptr, ptr %chars, align 8, !dbg !2034
  %ge21 = icmp sge i64 0, %14, !dbg !2034
  %16 = call i1 @llvm.expect.i1(i1 %ge21, i1 false), !dbg !2034
  br i1 %16, label %panic22, label %checkok32, !dbg !2034

checkok32:                                        ; preds = %if.exit
  %17 = load i8, ptr %15, align 1
  store i8 %17, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok32
  %18 = load i8, ptr %switch, align 1
  switch i8 %18, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case33
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !2036
  br label %switch.case33, !dbg !2038

switch.case33:                                    ; preds = %switch.entry, %switch.case
  %19 = load %"char[]", ptr %chars, align 8, !dbg !2039
  %20 = extractvalue %"char[]" %19, 0, !dbg !2039
  %21 = extractvalue %"char[]" %19, 1, !dbg !2039
  %gt34 = icmp sgt i64 1, %21, !dbg !2039
  %22 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2039
  br i1 %22, label %panic35, label %checkok45, !dbg !2039

checkok45:                                        ; preds = %switch.case33
  %size46 = sub i64 %21, 1, !dbg !2039
  %ptradd47 = getelementptr inbounds i8, ptr %20, i64 1, !dbg !2039
  %23 = insertvalue %"char[]" undef, ptr %ptradd47, 0, !dbg !2039
  %24 = insertvalue %"char[]" %23, i64 %size46, 1, !dbg !2039
  store %"char[]" %24, ptr %chars, align 8, !dbg !2039
  br label %switch.exit, !dbg !2039

switch.exit:                                      ; preds = %checkok45, %switch.entry
  %25 = load %"char[]", ptr %chars, align 8, !dbg !2041
  %26 = extractvalue %"char[]" %25, 1, !dbg !2041
  %27 = extractvalue %"char[]" %25, 0, !dbg !2041
  %eq48 = icmp eq i64 %26, 8, !dbg !2041
  br i1 %eq48, label %slice_cmp_values, label %slice_cmp_exit, !dbg !2041

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %28 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %28, %26
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd49 = getelementptr inbounds i8, ptr %27, i64 %28
  %ptradd50 = getelementptr inbounds i8, ptr @.str.85, i64 %28
  %29 = load i8, ptr %ptradd49, align 1
  %30 = load i8, ptr %ptradd50, align 1
  %eq51 = icmp eq i8 %29, %30
  %31 = add i64 %28, 1
  store i64 %31, ptr %cmp.idx, align 8
  br i1 %eq51, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %32 = load %"char[]", ptr %chars, align 8, !dbg !2041
  %33 = extractvalue %"char[]" %32, 1, !dbg !2041
  %34 = extractvalue %"char[]" %32, 0, !dbg !2041
  %eq52 = icmp eq i64 %33, 8, !dbg !2041
  br i1 %eq52, label %slice_cmp_values53, label %slice_cmp_exit61, !dbg !2041

slice_cmp_values53:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx54, align 8
  br label %slice_loop_start55

slice_loop_start55:                               ; preds = %slice_loop_comparison57, %slice_cmp_values53
  %35 = load i64, ptr %cmp.idx54, align 8
  %lt56 = icmp slt i64 %35, %33
  br i1 %lt56, label %slice_loop_comparison57, label %slice_cmp_exit61

slice_loop_comparison57:                          ; preds = %slice_loop_start55
  %ptradd58 = getelementptr inbounds i8, ptr %34, i64 %35
  %ptradd59 = getelementptr inbounds i8, ptr @.str.86, i64 %35
  %36 = load i8, ptr %ptradd58, align 1
  %37 = load i8, ptr %ptradd59, align 1
  %eq60 = icmp eq i8 %36, %37
  %38 = add i64 %35, 1
  store i64 %38, ptr %cmp.idx54, align 8
  br i1 %eq60, label %slice_loop_start55, label %slice_cmp_exit61

slice_cmp_exit61:                                 ; preds = %slice_loop_comparison57, %slice_loop_start55, %or.rhs
  %slice_cmp_phi62 = phi i1 [ true, %slice_loop_start55 ], [ false, %or.rhs ], [ false, %slice_loop_comparison57 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit61, %slice_cmp_exit
  %val63 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi62, %slice_cmp_exit61 ]
  br i1 %val63, label %if.then64, label %if.exit65

if.then64:                                        ; preds = %or.phi
  %39 = load i32, ptr %sign, align 4, !dbg !2041
  %sifp = sitofp i32 %39 to float, !dbg !2041
  %fmul = fmul float %sifp, 0x7FF0000000000000, !dbg !2041
  store float %fmul, ptr %blockret, align 4, !dbg !2041
  br label %expr_block.exit1947, !dbg !2041

if.exit65:                                        ; preds = %or.phi
  %40 = load %"char[]", ptr %chars, align 8, !dbg !2042
  %41 = extractvalue %"char[]" %40, 1, !dbg !2042
  %42 = extractvalue %"char[]" %40, 0, !dbg !2042
  %eq66 = icmp eq i64 %41, 3, !dbg !2042
  br i1 %eq66, label %slice_cmp_values67, label %slice_cmp_exit75, !dbg !2042

slice_cmp_values67:                               ; preds = %if.exit65
  store i64 0, ptr %cmp.idx68, align 8
  br label %slice_loop_start69

slice_loop_start69:                               ; preds = %slice_loop_comparison71, %slice_cmp_values67
  %43 = load i64, ptr %cmp.idx68, align 8
  %lt70 = icmp slt i64 %43, %41
  br i1 %lt70, label %slice_loop_comparison71, label %slice_cmp_exit75

slice_loop_comparison71:                          ; preds = %slice_loop_start69
  %ptradd72 = getelementptr inbounds i8, ptr %42, i64 %43
  %ptradd73 = getelementptr inbounds i8, ptr @.str.87, i64 %43
  %44 = load i8, ptr %ptradd72, align 1
  %45 = load i8, ptr %ptradd73, align 1
  %eq74 = icmp eq i8 %44, %45
  %46 = add i64 %43, 1
  store i64 %46, ptr %cmp.idx68, align 8
  br i1 %eq74, label %slice_loop_start69, label %slice_cmp_exit75

slice_cmp_exit75:                                 ; preds = %slice_loop_comparison71, %slice_loop_start69, %if.exit65
  %slice_cmp_phi76 = phi i1 [ true, %slice_loop_start69 ], [ false, %if.exit65 ], [ false, %slice_loop_comparison71 ]
  br i1 %slice_cmp_phi76, label %or.phi89, label %or.rhs77

or.rhs77:                                         ; preds = %slice_cmp_exit75
  %47 = load %"char[]", ptr %chars, align 8, !dbg !2042
  %48 = extractvalue %"char[]" %47, 1, !dbg !2042
  %49 = extractvalue %"char[]" %47, 0, !dbg !2042
  %eq78 = icmp eq i64 %48, 3, !dbg !2042
  br i1 %eq78, label %slice_cmp_values79, label %slice_cmp_exit87, !dbg !2042

slice_cmp_values79:                               ; preds = %or.rhs77
  store i64 0, ptr %cmp.idx80, align 8
  br label %slice_loop_start81

slice_loop_start81:                               ; preds = %slice_loop_comparison83, %slice_cmp_values79
  %50 = load i64, ptr %cmp.idx80, align 8
  %lt82 = icmp slt i64 %50, %48
  br i1 %lt82, label %slice_loop_comparison83, label %slice_cmp_exit87

slice_loop_comparison83:                          ; preds = %slice_loop_start81
  %ptradd84 = getelementptr inbounds i8, ptr %49, i64 %50
  %ptradd85 = getelementptr inbounds i8, ptr @.str.88, i64 %50
  %51 = load i8, ptr %ptradd84, align 1
  %52 = load i8, ptr %ptradd85, align 1
  %eq86 = icmp eq i8 %51, %52
  %53 = add i64 %50, 1
  store i64 %53, ptr %cmp.idx80, align 8
  br i1 %eq86, label %slice_loop_start81, label %slice_cmp_exit87

slice_cmp_exit87:                                 ; preds = %slice_loop_comparison83, %slice_loop_start81, %or.rhs77
  %slice_cmp_phi88 = phi i1 [ true, %slice_loop_start81 ], [ false, %or.rhs77 ], [ false, %slice_loop_comparison83 ]
  br label %or.phi89

or.phi89:                                         ; preds = %slice_cmp_exit87, %slice_cmp_exit75
  %val90 = phi i1 [ true, %slice_cmp_exit75 ], [ %slice_cmp_phi88, %slice_cmp_exit87 ]
  br i1 %val90, label %if.then91, label %if.exit92

if.then91:                                        ; preds = %or.phi89
  store float 0x7FF8000000000000, ptr %blockret, align 4, !dbg !2042
  br label %expr_block.exit1947, !dbg !2042

if.exit92:                                        ; preds = %or.phi89
  %ptradd93 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2043
  %54 = load i64, ptr %ptradd93, align 8, !dbg !2043
  %lt94 = icmp ult i64 2, %54, !dbg !2043
  br i1 %lt94, label %and.rhs95, label %and.phi110, !dbg !2043

and.rhs95:                                        ; preds = %if.exit92
  %ptradd96 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2043
  %55 = load i64, ptr %ptradd96, align 8, !dbg !2043
  %56 = load ptr, ptr %chars, align 8, !dbg !2043
  %ge97 = icmp sge i64 0, %55, !dbg !2043
  %57 = call i1 @llvm.expect.i1(i1 %ge97, i1 false), !dbg !2043
  br i1 %57, label %panic98, label %checkok108, !dbg !2043

checkok108:                                       ; preds = %and.rhs95
  %58 = load i8, ptr %56, align 1, !dbg !2043
  %eq109 = icmp eq i8 %58, 48, !dbg !2043
  br label %and.phi110, !dbg !2043

and.phi110:                                       ; preds = %checkok108, %if.exit92
  %val111 = phi i1 [ false, %if.exit92 ], [ %eq109, %checkok108 ], !dbg !2043
  br i1 %val111, label %and.rhs112, label %and.phi128, !dbg !2043

and.rhs112:                                       ; preds = %and.phi110
  %ptradd113 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2043
  %59 = load i64, ptr %ptradd113, align 8, !dbg !2043
  %60 = load ptr, ptr %chars, align 8, !dbg !2043
  %ge114 = icmp sge i64 1, %59, !dbg !2043
  %61 = call i1 @llvm.expect.i1(i1 %ge114, i1 false), !dbg !2043
  br i1 %61, label %panic115, label %checkok125, !dbg !2043

checkok125:                                       ; preds = %and.rhs112
  %ptradd126 = getelementptr inbounds i8, ptr %60, i64 1, !dbg !2043
  %62 = load i8, ptr %ptradd126, align 1, !dbg !2043
  %zext = zext i8 %62 to i32, !dbg !2043
  %or = or i32 %zext, 32, !dbg !2043
  %eq127 = icmp eq i32 %or, 120, !dbg !2043
  %check = icmp sge i32 %or, 0, !dbg !2043
  %siui-eq = and i1 %check, %eq127, !dbg !2043
  br label %and.phi128, !dbg !2043

and.phi128:                                       ; preds = %checkok125, %and.phi110
  %val129 = phi i1 [ false, %and.phi110 ], [ %siui-eq, %checkok125 ], !dbg !2043
  br i1 %val129, label %if.then130, label %if.exit418, !dbg !2043

if.then130:                                       ; preds = %and.phi128
  %63 = load %"char[]", ptr %chars, align 8, !dbg !2044
  %64 = extractvalue %"char[]" %63, 0, !dbg !2044
  %65 = extractvalue %"char[]" %63, 1, !dbg !2044
  %gt131 = icmp sgt i64 2, %65, !dbg !2044
  %66 = call i1 @llvm.expect.i1(i1 %gt131, i1 false), !dbg !2044
  br i1 %66, label %panic132, label %checkok142, !dbg !2044

checkok142:                                       ; preds = %if.then130
  %size143 = sub i64 %65, 2, !dbg !2044
  %ptradd144 = getelementptr inbounds i8, ptr %64, i64 2, !dbg !2044
  %67 = insertvalue %"char[]" undef, ptr %ptradd144, 0, !dbg !2044
  %68 = insertvalue %"char[]" %67, i64 %size143, 1, !dbg !2044
  store %"char[]" %68, ptr %chars145, align 8
  %69 = load i32, ptr %sign, align 4
  store i32 %69, ptr %sign146, align 4
    #dbg_declare(ptr %scale, !2046, !DIExpression(), !2048)
  store double 1.000000e+00, ptr %scale, align 8, !dbg !2048
    #dbg_declare(ptr %x, !2049, !DIExpression(), !2050)
  store i32 0, ptr %x, align 4, !dbg !2050
    #dbg_declare(ptr %rp, !2051, !DIExpression(), !2052)
  store i64 0, ptr %rp, align 8, !dbg !2052
    #dbg_declare(ptr %dc, !2053, !DIExpression(), !2054)
  store i64 0, ptr %dc, align 8, !dbg !2054
    #dbg_declare(ptr %c, !2055, !DIExpression(), !2056)
    #dbg_declare(ptr %got_rad, !2057, !DIExpression(), !2058)
  store i8 0, ptr %got_rad, align 1, !dbg !2058
    #dbg_declare(ptr %got_digit, !2059, !DIExpression(), !2060)
  store i8 0, ptr %got_digit, align 1, !dbg !2060
    #dbg_declare(ptr %got_tail, !2061, !DIExpression(), !2062)
  store i8 0, ptr %got_tail, align 1, !dbg !2062
    #dbg_declare(ptr %len, !2063, !DIExpression(), !2064)
  %ptradd148 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2064
  %70 = load i64, ptr %ptradd148, align 8, !dbg !2064
  store i64 %70, ptr %len, align 8, !dbg !2064
    #dbg_declare(ptr %last_char, !2065, !DIExpression(), !2066)
  %71 = load i64, ptr %len, align 8, !dbg !2066
  %sub = sub i64 %71, 1, !dbg !2066
  store i64 %sub, ptr %last_char, align 8, !dbg !2066
    #dbg_declare(ptr %index, !2067, !DIExpression(), !2068)
  store i64 0, ptr %index, align 8, !dbg !2068
    #dbg_declare(ptr %y, !2069, !DIExpression(), !2070)
  store double 0.000000e+00, ptr %y, align 8, !dbg !2070
  br label %loop.cond149, !dbg !2071

loop.cond149:                                     ; preds = %if.exit168, %checkok142
  %ptradd150 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2072
  %72 = load i64, ptr %ptradd150, align 8, !dbg !2072
  %73 = load ptr, ptr %chars145, align 8, !dbg !2072
  %74 = load i64, ptr %index, align 8, !dbg !2072
  %ge151 = icmp uge i64 %74, %72, !dbg !2072
  %75 = call i1 @llvm.expect.i1(i1 %ge151, i1 false), !dbg !2072
  br i1 %75, label %panic152, label %checkok162, !dbg !2072

checkok162:                                       ; preds = %loop.cond149
  %ptradd163 = getelementptr inbounds i8, ptr %73, i64 %74, !dbg !2072
  %76 = load i8, ptr %ptradd163, align 1, !dbg !2072
  store i8 %76, ptr %c, align 1, !dbg !2072
  %eq164 = icmp eq i8 %76, 48, !dbg !2072
  br i1 %eq164, label %loop.body165, label %loop.exit169, !dbg !2072

loop.body165:                                     ; preds = %checkok162
  %77 = load i64, ptr %index, align 8, !dbg !2074
  %78 = load i64, ptr %last_char, align 8, !dbg !2074
  %eq166 = icmp eq i64 %77, %78, !dbg !2074
  br i1 %eq166, label %if.then167, label %if.exit168, !dbg !2074

if.then167:                                       ; preds = %loop.body165
  store double 0.000000e+00, ptr %blockret147, align 8, !dbg !2074
  br label %expr_block.exit417, !dbg !2074

if.exit168:                                       ; preds = %loop.body165
  %79 = load i64, ptr %index, align 8, !dbg !2076
  %add = add i64 %79, 1, !dbg !2076
  store i64 %add, ptr %index, align 8, !dbg !2076
  br label %loop.cond149, !dbg !2076

loop.exit169:                                     ; preds = %checkok162
  %80 = load i8, ptr %c, align 1, !dbg !2077
  %eq170 = icmp eq i8 %80, 46, !dbg !2077
  br i1 %eq170, label %if.then171, label %if.exit225, !dbg !2077

if.then171:                                       ; preds = %loop.exit169
  store i8 1, ptr %got_rad, align 1, !dbg !2078
  %81 = load i64, ptr %index, align 8, !dbg !2080
  %82 = load i64, ptr %last_char, align 8, !dbg !2080
  %eq172 = icmp eq i64 %81, %82, !dbg !2080
  br i1 %eq172, label %if.then173, label %if.exit178, !dbg !2080

if.then173:                                       ; preds = %if.then171
  %83 = load i8, ptr %got_digit, align 1, !dbg !2081
  %84 = trunc i8 %83 to i1, !dbg !2081
  %not = xor i1 %84, true, !dbg !2081
  br i1 %not, label %if.then174, label %if.exit175, !dbg !2081

if.then174:                                       ; preds = %if.then173
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2081
  br label %err_retblock, !dbg !2081

if.exit175:                                       ; preds = %if.then173
  %85 = load i32, ptr %sign146, align 4, !dbg !2083
  %sifp176 = sitofp i32 %85 to double, !dbg !2083
  %fmul177 = fmul double %sifp176, 0.000000e+00, !dbg !2083
  store double %fmul177, ptr %blockret147, align 8, !dbg !2083
  br label %expr_block.exit417, !dbg !2083

if.exit178:                                       ; preds = %if.then171
  %86 = load i64, ptr %index, align 8, !dbg !2084
  %87 = load i64, ptr %last_char, align 8, !dbg !2084
  %neq = icmp ne i64 %86, %87, !dbg !2084
  br i1 %neq, label %and.rhs179, label %and.phi196, !dbg !2084

and.rhs179:                                       ; preds = %if.exit178
  %ptradd180 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2084
  %88 = load i64, ptr %ptradd180, align 8, !dbg !2084
  %89 = load ptr, ptr %chars145, align 8, !dbg !2084
  %90 = load i64, ptr %index, align 8, !dbg !2084
  %add181 = add i64 %90, 1, !dbg !2084
  store i64 %add181, ptr %index, align 8, !dbg !2084
  %ge182 = icmp uge i64 %add181, %88, !dbg !2084
  %91 = call i1 @llvm.expect.i1(i1 %ge182, i1 false), !dbg !2084
  br i1 %91, label %panic183, label %checkok193, !dbg !2084

checkok193:                                       ; preds = %and.rhs179
  %ptradd194 = getelementptr inbounds i8, ptr %89, i64 %add181, !dbg !2084
  %92 = load i8, ptr %ptradd194, align 1, !dbg !2084
  store i8 %92, ptr %c, align 1, !dbg !2084
  %eq195 = icmp eq i8 %92, 48, !dbg !2084
  br label %and.phi196, !dbg !2084

and.phi196:                                       ; preds = %checkok193, %if.exit178
  %val197 = phi i1 [ false, %if.exit178 ], [ %eq195, %checkok193 ], !dbg !2084
  br i1 %val197, label %if.then198, label %if.exit224, !dbg !2084

if.then198:                                       ; preds = %and.phi196
  %93 = load i64, ptr %rp, align 8, !dbg !2085
  %sub199 = sub i64 %93, 1, !dbg !2085
  store i64 %sub199, ptr %rp, align 8, !dbg !2085
  store i8 1, ptr %got_digit, align 1, !dbg !2087
  br label %loop.cond200, !dbg !2088

loop.cond200:                                     ; preds = %loop.body221, %if.then198
  %94 = load i64, ptr %last_char, align 8, !dbg !2089
  %95 = load i64, ptr %index, align 8, !dbg !2089
  %neq201 = icmp ne i64 %94, %95, !dbg !2089
  br i1 %neq201, label %and.rhs202, label %and.phi219, !dbg !2089

and.rhs202:                                       ; preds = %loop.cond200
  %ptradd203 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2089
  %96 = load i64, ptr %ptradd203, align 8, !dbg !2089
  %97 = load ptr, ptr %chars145, align 8, !dbg !2089
  %98 = load i64, ptr %index, align 8, !dbg !2089
  %add204 = add i64 %98, 1, !dbg !2089
  store i64 %add204, ptr %index, align 8, !dbg !2089
  %ge205 = icmp uge i64 %add204, %96, !dbg !2089
  %99 = call i1 @llvm.expect.i1(i1 %ge205, i1 false), !dbg !2089
  br i1 %99, label %panic206, label %checkok216, !dbg !2089

checkok216:                                       ; preds = %and.rhs202
  %ptradd217 = getelementptr inbounds i8, ptr %97, i64 %add204, !dbg !2089
  %100 = load i8, ptr %ptradd217, align 1, !dbg !2089
  store i8 %100, ptr %c, align 1, !dbg !2089
  %eq218 = icmp eq i8 %100, 48, !dbg !2089
  br label %and.phi219, !dbg !2089

and.phi219:                                       ; preds = %checkok216, %loop.cond200
  %val220 = phi i1 [ false, %loop.cond200 ], [ %eq218, %checkok216 ], !dbg !2089
  br i1 %val220, label %loop.body221, label %loop.exit223, !dbg !2089

loop.body221:                                     ; preds = %and.phi219
  %101 = load i64, ptr %rp, align 8, !dbg !2091
  %sub222 = sub i64 %101, 1, !dbg !2091
  store i64 %sub222, ptr %rp, align 8, !dbg !2091
  br label %loop.cond200, !dbg !2091

loop.exit223:                                     ; preds = %and.phi219
  br label %if.exit224, !dbg !2091

if.exit224:                                       ; preds = %loop.exit223, %and.phi196
  br label %if.exit225, !dbg !2091

if.exit225:                                       ; preds = %if.exit224, %loop.exit169
  br label %loop.cond226, !dbg !2093

loop.cond226:                                     ; preds = %checkok297, %if.exit225
  %102 = load i8, ptr %c, align 1, !dbg !2094
  %zext227 = zext i8 %102 to i32, !dbg !2094
  %sub228 = sub i32 %zext227, 48, !dbg !2094
  %lt229 = icmp ult i32 %sub228, 10, !dbg !2094
  br i1 %lt229, label %or.phi235, label %or.rhs230, !dbg !2094

or.rhs230:                                        ; preds = %loop.cond226
  %103 = load i8, ptr %c, align 1, !dbg !2094
  %zext231 = zext i8 %103 to i32, !dbg !2094
  %or232 = or i32 %zext231, 32, !dbg !2094
  %sub233 = sub i32 %or232, 97, !dbg !2094
  %lt234 = icmp slt i32 %sub233, 6, !dbg !2094
  %siui-lt = or i1 false, %lt234, !dbg !2094
  br label %or.phi235, !dbg !2094

or.phi235:                                        ; preds = %or.rhs230, %loop.cond226
  %val236 = phi i1 [ true, %loop.cond226 ], [ %siui-lt, %or.rhs230 ], !dbg !2094
  br i1 %val236, label %or.phi239, label %or.rhs237, !dbg !2094

or.rhs237:                                        ; preds = %or.phi235
  %104 = load i8, ptr %c, align 1, !dbg !2094
  %eq238 = icmp eq i8 %104, 46, !dbg !2094
  br label %or.phi239, !dbg !2094

or.phi239:                                        ; preds = %or.rhs237, %or.phi235
  %val240 = phi i1 [ true, %or.phi235 ], [ %eq238, %or.rhs237 ], !dbg !2094
  br i1 %val240, label %loop.body241, label %loop.exit299, !dbg !2094

loop.body241:                                     ; preds = %or.phi239
  %105 = load i8, ptr %c, align 1, !dbg !2096
  %eq242 = icmp eq i8 %105, 46, !dbg !2096
  br i1 %eq242, label %if.then243, label %if.else, !dbg !2096

if.then243:                                       ; preds = %loop.body241
  %106 = load i8, ptr %got_rad, align 1, !dbg !2098
  %107 = trunc i8 %106 to i1, !dbg !2098
  br i1 %107, label %if.then244, label %if.exit245, !dbg !2098

if.then244:                                       ; preds = %if.then243
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2098
  br label %err_retblock, !dbg !2098

if.exit245:                                       ; preds = %if.then243
  store i8 1, ptr %got_rad, align 1, !dbg !2100
  %108 = load i64, ptr %dc, align 8, !dbg !2101
  store i64 %108, ptr %rp, align 8, !dbg !2101
  br label %if.exit280, !dbg !2101

if.else:                                          ; preds = %loop.body241
  store i8 1, ptr %got_digit, align 1, !dbg !2102
    #dbg_declare(ptr %d, !2104, !DIExpression(), !2105)
  %109 = load i8, ptr %c, align 1, !dbg !2106
  %gt247 = icmp ugt i8 %109, 57, !dbg !2106
  br i1 %gt247, label %if.then248, label %if.exit253, !dbg !2106

if.then248:                                       ; preds = %if.else
  %110 = load i8, ptr %c, align 1, !dbg !2106
  %zext249 = zext i8 %110 to i32, !dbg !2106
  %or250 = or i32 %zext249, 32, !dbg !2106
  %add251 = add i32 %or250, 10, !dbg !2106
  %sub252 = sub i32 %add251, 97, !dbg !2106
  store i32 %sub252, ptr %blockret246, align 4, !dbg !2106
  br label %expr_block.exit, !dbg !2106

if.exit253:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !2108
  %zext254 = zext i8 %111 to i32, !dbg !2108
  %sub255 = sub i32 %zext254, 48, !dbg !2108
  store i32 %sub255, ptr %blockret246, align 4, !dbg !2108
  br label %expr_block.exit, !dbg !2108

expr_block.exit:                                  ; preds = %if.exit253, %if.then248
  %112 = load i32, ptr %blockret246, align 4, !dbg !2108
  store i32 %112, ptr %d, align 4, !dbg !2108
  store i8 1, ptr %switch256, align 1
  br label %switch.entry257

switch.entry257:                                  ; preds = %expr_block.exit
  %113 = load i8, ptr %switch256, align 1
  %114 = trunc i8 %113 to i1
  %115 = load i64, ptr %dc, align 8, !dbg !2109
  %lt258 = icmp slt i64 %115, 8, !dbg !2109
  %eq259 = icmp eq i1 %lt258, %114, !dbg !2109
  br i1 %eq259, label %switch.case260, label %next_if, !dbg !2109

switch.case260:                                   ; preds = %switch.entry257
  %116 = load i32, ptr %x, align 4, !dbg !2111
  %mul = mul i32 %116, 16, !dbg !2111
  %117 = load i32, ptr %d, align 4, !dbg !2111
  %add261 = add i32 %mul, %117, !dbg !2111
  store i32 %add261, ptr %x, align 4, !dbg !2111
  br label %switch.exit278, !dbg !2111

next_if:                                          ; preds = %switch.entry257
  %118 = load i64, ptr %dc, align 8, !dbg !2113
  %lt262 = icmp slt i64 %118, 14, !dbg !2113
  %eq263 = icmp eq i1 %lt262, %114, !dbg !2113
  br i1 %eq263, label %switch.case264, label %next_if267, !dbg !2113

switch.case264:                                   ; preds = %next_if
  %119 = load double, ptr %y, align 8, !dbg !2114
  %120 = load i32, ptr %d, align 4, !dbg !2114
  %sifp265 = sitofp i32 %120 to double, !dbg !2114
  %121 = load double, ptr %scale, align 8, !dbg !2114
  %fdiv = fdiv double %121, 1.600000e+01, !dbg !2114
  store double %fdiv, ptr %scale, align 8, !dbg !2114
  %fmul266 = fmul double %sifp265, %fdiv, !dbg !2114
  %fadd = fadd double %119, %fmul266, !dbg !2114
  store double %fadd, ptr %y, align 8, !dbg !2114
  store i8 1, ptr %got_tail, align 1, !dbg !2116
  br label %switch.exit278, !dbg !2116

next_if267:                                       ; preds = %next_if
  %122 = load i32, ptr %d, align 4, !dbg !2117
  %i2b268 = icmp ne i32 %122, 0, !dbg !2117
  br i1 %i2b268, label %and.rhs269, label %and.phi271, !dbg !2117

and.rhs269:                                       ; preds = %next_if267
  %123 = load i8, ptr %got_tail, align 1, !dbg !2117
  %124 = trunc i8 %123 to i1, !dbg !2117
  %not270 = xor i1 %124, true, !dbg !2117
  br label %and.phi271, !dbg !2117

and.phi271:                                       ; preds = %and.rhs269, %next_if267
  %val272 = phi i1 [ false, %next_if267 ], [ %not270, %and.rhs269 ], !dbg !2117
  %eq273 = icmp eq i1 %val272, %114, !dbg !2117
  br i1 %eq273, label %switch.case274, label %next_if277, !dbg !2117

switch.case274:                                   ; preds = %and.phi271
  %125 = load double, ptr %y, align 8, !dbg !2118
  %126 = load double, ptr %scale, align 8, !dbg !2118
  %fmul275 = fmul double 5.000000e-01, %126, !dbg !2118
  %fadd276 = fadd double %125, %fmul275, !dbg !2118
  store double %fadd276, ptr %y, align 8, !dbg !2118
  store i8 1, ptr %got_tail, align 1, !dbg !2120
  br label %switch.exit278, !dbg !2120

next_if277:                                       ; preds = %and.phi271
  br label %switch.exit278, !dbg !2120

switch.exit278:                                   ; preds = %next_if277, %switch.case274, %switch.case264, %switch.case260
  %127 = load i64, ptr %dc, align 8, !dbg !2121
  %add279 = add i64 %127, 1, !dbg !2121
  store i64 %add279, ptr %dc, align 8, !dbg !2121
  br label %if.exit280, !dbg !2121

if.exit280:                                       ; preds = %switch.exit278, %if.exit245
  %128 = load i64, ptr %index, align 8, !dbg !2122
  %129 = load i64, ptr %last_char, align 8, !dbg !2122
  %eq281 = icmp eq i64 %128, %129, !dbg !2122
  br i1 %eq281, label %if.then282, label %if.exit283, !dbg !2122

if.then282:                                       ; preds = %if.exit280
  br label %loop.exit299, !dbg !2122

if.exit283:                                       ; preds = %if.exit280
  %ptradd284 = getelementptr inbounds i8, ptr %chars145, i64 8, !dbg !2123
  %130 = load i64, ptr %ptradd284, align 8, !dbg !2123
  %131 = load ptr, ptr %chars145, align 8, !dbg !2123
  %132 = load i64, ptr %index, align 8, !dbg !2123
  %add285 = add i64 %132, 1, !dbg !2123
  store i64 %add285, ptr %index, align 8, !dbg !2123
  %ge286 = icmp uge i64 %add285, %130, !dbg !2123
  %133 = call i1 @llvm.expect.i1(i1 %ge286, i1 false), !dbg !2123
  br i1 %133, label %panic287, label %checkok297, !dbg !2123

checkok297:                                       ; preds = %if.exit283
  %ptradd298 = getelementptr inbounds i8, ptr %131, i64 %add285, !dbg !2123
  %134 = load i8, ptr %ptradd298, align 1, !dbg !2123
  store i8 %134, ptr %c, align 1, !dbg !2123
  br label %loop.cond226, !dbg !2123

loop.exit299:                                     ; preds = %if.then282, %or.phi239
  %135 = load i8, ptr %got_digit, align 1, !dbg !2124
  %136 = trunc i8 %135 to i1, !dbg !2124
  %not300 = xor i1 %136, true, !dbg !2124
  br i1 %not300, label %if.then301, label %if.exit302, !dbg !2124

if.then301:                                       ; preds = %loop.exit299
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2124
  br label %err_retblock, !dbg !2124

if.exit302:                                       ; preds = %loop.exit299
  %137 = load i8, ptr %got_rad, align 1, !dbg !2125
  %138 = trunc i8 %137 to i1, !dbg !2125
  %not303 = xor i1 %138, true, !dbg !2125
  br i1 %not303, label %if.then304, label %if.exit305, !dbg !2125

if.then304:                                       ; preds = %if.exit302
  %139 = load i64, ptr %dc, align 8, !dbg !2125
  store i64 %139, ptr %rp, align 8, !dbg !2125
  br label %if.exit305, !dbg !2125

if.exit305:                                       ; preds = %if.then304, %if.exit302
  br label %loop.cond306, !dbg !2126

loop.cond306:                                     ; preds = %loop.body308, %if.exit305
  %140 = load i64, ptr %dc, align 8, !dbg !2127
  %lt307 = icmp slt i64 %140, 8, !dbg !2127
  br i1 %lt307, label %loop.body308, label %loop.exit311, !dbg !2127

loop.body308:                                     ; preds = %loop.cond306
  %141 = load i32, ptr %x, align 4, !dbg !2127
  %mul309 = mul i32 %141, 16, !dbg !2127
  store i32 %mul309, ptr %x, align 4, !dbg !2127
  %142 = load i64, ptr %dc, align 8, !dbg !2127
  %add310 = add i64 %142, 1, !dbg !2127
  store i64 %add310, ptr %dc, align 8, !dbg !2127
  br label %loop.cond306, !dbg !2127

loop.exit311:                                     ; preds = %loop.cond306
    #dbg_declare(ptr %e2, !2129, !DIExpression(), !2130)
  store i64 0, ptr %e2, align 8, !dbg !2130
  %143 = load i8, ptr %c, align 1, !dbg !2131
  %zext312 = zext i8 %143 to i32, !dbg !2131
  %or313 = or i32 %zext312, 32, !dbg !2131
  %eq314 = icmp eq i32 %or313, 112, !dbg !2131
  %check315 = icmp sge i32 %or313, 0, !dbg !2131
  %siui-eq316 = and i1 %check315, %eq314, !dbg !2131
  br i1 %siui-eq316, label %if.then317, label %if.exit343, !dbg !2131

if.then317:                                       ; preds = %loop.exit311
    #dbg_declare(ptr %e2val, !2132, !DIExpression(), !2134)
  %144 = load %"char[]", ptr %chars145, align 8, !dbg !2134
  %145 = extractvalue %"char[]" %144, 0, !dbg !2134
  %146 = load i64, ptr %index, align 8, !dbg !2134
  %add318 = add i64 %146, 1, !dbg !2134
  %147 = extractvalue %"char[]" %144, 1, !dbg !2134
  %gt319 = icmp sgt i64 %add318, %147, !dbg !2134
  %148 = call i1 @llvm.expect.i1(i1 %gt319, i1 false), !dbg !2134
  br i1 %148, label %panic320, label %checkok330, !dbg !2134

checkok330:                                       ; preds = %if.then317
  %underflow = icmp slt i64 %add318, 0, !dbg !2134
  %149 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2134
  br i1 %149, label %panic331, label %checkok339, !dbg !2134

checkok339:                                       ; preds = %checkok330
  %size340 = sub i64 %147, %add318, !dbg !2134
  %ptradd341 = getelementptr inbounds i8, ptr %145, i64 %add318, !dbg !2134
  %150 = insertvalue %"char[]" undef, ptr %ptradd341, 0, !dbg !2134
  %151 = insertvalue %"char[]" %150, i64 %size340, 1, !dbg !2134
  store %"char[]" %151, ptr %indirectarg342, align 8
  %152 = call i64 @std.core.String.to_long(ptr %retparam, ptr align 8 %indirectarg342, i32 10), !dbg !2134
  %not_err = icmp eq i64 %152, 0, !dbg !2134
  %153 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2134
  br i1 %153, label %after_check, label %else_block, !dbg !2134

after_check:                                      ; preds = %checkok339
  %154 = load i64, ptr %retparam, align 8, !dbg !2134
  br label %phi_block, !dbg !2134

else_block:                                       ; preds = %checkok339
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !2134
  br label %guard_block, !dbg !2134

guard_block:                                      ; preds = %else_block
  %155 = load i64, ptr %error_var, align 8, !dbg !2134
  store i64 %155, ptr %reterr, align 8, !dbg !2134
  br label %err_retblock, !dbg !2134

phi_block:                                        ; preds = %after_check
  store i64 %154, ptr %e2val, align 8, !dbg !2134
  %156 = load i64, ptr %e2val, align 8, !dbg !2135
  store i64 %156, ptr %e2, align 8, !dbg !2135
  br label %if.exit343, !dbg !2135

if.exit343:                                       ; preds = %phi_block, %loop.exit311
  %157 = load i64, ptr %e2, align 8, !dbg !2136
  %158 = load i64, ptr %rp, align 8, !dbg !2136
  %mul344 = mul i64 4, %158, !dbg !2136
  %sub345 = sub i64 %mul344, 32, !dbg !2136
  %add346 = add i64 %157, %sub345, !dbg !2136
  store i64 %add346, ptr %e2, align 8, !dbg !2136
  %159 = load i32, ptr %x, align 4, !dbg !2137
  %i2nb347 = icmp eq i32 %159, 0, !dbg !2137
  br i1 %i2nb347, label %if.then348, label %if.exit351, !dbg !2137

if.then348:                                       ; preds = %if.exit343
  %160 = load i32, ptr %sign146, align 4, !dbg !2137
  %sifp349 = sitofp i32 %160 to double, !dbg !2137
  %fmul350 = fmul double %sifp349, 0.000000e+00, !dbg !2137
  store double %fmul350, ptr %blockret147, align 8, !dbg !2137
  br label %expr_block.exit417, !dbg !2137

if.exit351:                                       ; preds = %if.exit343
  %161 = load i64, ptr %e2, align 8, !dbg !2138
  %gt352 = icmp sgt i64 %161, 149, !dbg !2138
  br i1 %gt352, label %if.then353, label %if.exit354, !dbg !2138

if.then353:                                       ; preds = %if.exit351
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2138
  br label %err_retblock, !dbg !2138

if.exit354:                                       ; preds = %if.exit351
  %162 = load i64, ptr %e2, align 8, !dbg !2139
  %lt355 = icmp slt i64 %162, -255, !dbg !2139
  br i1 %lt355, label %if.then356, label %if.exit357, !dbg !2139

if.then356:                                       ; preds = %if.exit354
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2139
  br label %err_retblock, !dbg !2139

if.exit357:                                       ; preds = %if.exit354
  br label %loop.cond358, !dbg !2140

loop.cond358:                                     ; preds = %if.exit369, %if.exit357
  %163 = load i32, ptr %x, align 4, !dbg !2141
  %lt359 = icmp ult i32 %163, -2147483648, !dbg !2141
  br i1 %lt359, label %loop.body360, label %loop.exit371, !dbg !2141

loop.body360:                                     ; preds = %loop.cond358
  %164 = load double, ptr %y, align 8, !dbg !2143
  %ge361 = fcmp oge double %164, 5.000000e-01, !dbg !2143
  br i1 %ge361, label %if.then362, label %if.else366, !dbg !2143

if.then362:                                       ; preds = %loop.body360
  %165 = load i32, ptr %x, align 4, !dbg !2145
  %166 = load i32, ptr %x, align 4, !dbg !2145
  %add363 = add i32 %166, 1, !dbg !2145
  %add364 = add i32 %165, %add363, !dbg !2145
  store i32 %add364, ptr %x, align 4, !dbg !2145
  %167 = load double, ptr %y, align 8, !dbg !2147
  %168 = load double, ptr %y, align 8, !dbg !2147
  %fsub = fsub double %168, 1.000000e+00, !dbg !2147
  %fadd365 = fadd double %167, %fsub, !dbg !2147
  store double %fadd365, ptr %y, align 8, !dbg !2147
  br label %if.exit369, !dbg !2147

if.else366:                                       ; preds = %loop.body360
  %169 = load i32, ptr %x, align 4, !dbg !2148
  %170 = load i32, ptr %x, align 4, !dbg !2148
  %add367 = add i32 %169, %170, !dbg !2148
  store i32 %add367, ptr %x, align 4, !dbg !2148
  %171 = load double, ptr %y, align 8, !dbg !2150
  %172 = load double, ptr %y, align 8, !dbg !2150
  %fadd368 = fadd double %171, %172, !dbg !2150
  store double %fadd368, ptr %y, align 8, !dbg !2150
  br label %if.exit369, !dbg !2150

if.exit369:                                       ; preds = %if.else366, %if.then362
  %173 = load i64, ptr %e2, align 8, !dbg !2151
  %sub370 = sub i64 %173, 1, !dbg !2151
  store i64 %sub370, ptr %e2, align 8, !dbg !2151
  br label %loop.cond358, !dbg !2151

loop.exit371:                                     ; preds = %loop.cond358
    #dbg_declare(ptr %bits, !2152, !DIExpression(), !2153)
  store i32 24, ptr %bits, align 4, !dbg !2153
  %174 = load i64, ptr %e2, align 8, !dbg !2154
  %add372 = add i64 32, %174, !dbg !2154
  %sub373 = sub i64 %add372, -149, !dbg !2154
  %gt374 = icmp sgt i64 24, %sub373, !dbg !2154
  br i1 %gt374, label %if.then375, label %if.exit381, !dbg !2154

if.then375:                                       ; preds = %loop.exit371
  %175 = load i64, ptr %e2, align 8, !dbg !2155
  %add376 = add i64 32, %175, !dbg !2155
  %sub377 = sub i64 %add376, -149, !dbg !2155
  %trunc = trunc i64 %sub377 to i32, !dbg !2155
  store i32 %trunc, ptr %bits, align 4, !dbg !2155
  %176 = load i32, ptr %bits, align 4, !dbg !2157
  %lt378 = icmp slt i32 %176, 0, !dbg !2157
  br i1 %lt378, label %if.then379, label %if.exit380, !dbg !2157

if.then379:                                       ; preds = %if.then375
  store i32 0, ptr %bits, align 4, !dbg !2157
  br label %if.exit380, !dbg !2157

if.exit380:                                       ; preds = %if.then379, %if.then375
  br label %if.exit381, !dbg !2157

if.exit381:                                       ; preds = %if.exit380, %loop.exit371
    #dbg_declare(ptr %bias, !2158, !DIExpression(), !2159)
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2159
  %177 = load i32, ptr %bits, align 4, !dbg !2160
  %lt382 = icmp slt i32 %177, 53, !dbg !2160
  br i1 %lt382, label %if.then383, label %if.exit390, !dbg !2160

if.then383:                                       ; preds = %if.exit381
  store double 1.000000e+00, ptr %x384, align 8
  %178 = load i32, ptr %bits, align 4, !dbg !2161
  %sub385 = sub i32 85, %178, !dbg !2161
  %sub386 = sub i32 %sub385, 1, !dbg !2161
  store i32 %sub386, ptr %n, align 4
  %179 = load double, ptr %x384, align 8, !dbg !2163
  %180 = load i32, ptr %n, align 4, !dbg !2163
  %181 = call double @scalbn(double %179, i32 %180), !dbg !2163
  store double %181, ptr %mag, align 8
  %182 = load i32, ptr %sign146, align 4, !dbg !2161
  %sifp387 = sitofp i32 %182 to double, !dbg !2161
  store double %sifp387, ptr %sgn, align 8
  %183 = load double, ptr %mag, align 8
  store double %183, ptr %x388, align 8
  %184 = load double, ptr %sgn, align 8
  store double %184, ptr %y389, align 8
  %185 = load double, ptr %x388, align 8, !dbg !2165
  %186 = load double, ptr %sgn, align 8, !dbg !2167
  %187 = call double @llvm.copysign.f64(double %185, double %186), !dbg !2167
  store double %187, ptr %bias, align 8, !dbg !2167
  br label %if.exit390, !dbg !2167

if.exit390:                                       ; preds = %if.then383, %if.exit381
  %188 = load i32, ptr %bits, align 4, !dbg !2169
  %lt391 = icmp slt i32 %188, 32, !dbg !2169
  br i1 %lt391, label %and.rhs392, label %and.phi393, !dbg !2169

and.rhs392:                                       ; preds = %if.exit390
  %189 = load double, ptr %y, align 8, !dbg !2169
  %fpbool = fcmp une double %189, 0.000000e+00, !dbg !2169
  br label %and.phi393, !dbg !2169

and.phi393:                                       ; preds = %and.rhs392, %if.exit390
  %val394 = phi i1 [ false, %if.exit390 ], [ %fpbool, %and.rhs392 ], !dbg !2169
  br i1 %val394, label %and.rhs395, label %and.phi397, !dbg !2169

and.rhs395:                                       ; preds = %and.phi393
  %190 = load i32, ptr %x, align 4, !dbg !2169
  %and = and i32 %190, 1, !dbg !2169
  %i2nb396 = icmp eq i32 %and, 0, !dbg !2169
  br label %and.phi397, !dbg !2169

and.phi397:                                       ; preds = %and.rhs395, %and.phi393
  %val398 = phi i1 [ false, %and.phi393 ], [ %i2nb396, %and.rhs395 ], !dbg !2169
  br i1 %val398, label %if.then399, label %if.exit401, !dbg !2169

if.then399:                                       ; preds = %and.phi397
  %191 = load i32, ptr %x, align 4, !dbg !2170
  %add400 = add i32 %191, 1, !dbg !2170
  store i32 %add400, ptr %x, align 4, !dbg !2170
  store double 0.000000e+00, ptr %y, align 8, !dbg !2172
  br label %if.exit401, !dbg !2172

if.exit401:                                       ; preds = %if.then399, %and.phi397
  %192 = load double, ptr %bias, align 8, !dbg !2173
  %193 = load i32, ptr %sign146, align 4, !dbg !2173
  %sifp402 = sitofp i32 %193 to double, !dbg !2173
  %194 = load i32, ptr %x, align 4, !dbg !2173
  %uifp = uitofp i32 %194 to double, !dbg !2173
  %fmul403 = fmul double %sifp402, %uifp, !dbg !2173
  %fadd404 = fadd double %192, %fmul403, !dbg !2173
  %195 = load i32, ptr %sign146, align 4, !dbg !2173
  %sifp405 = sitofp i32 %195 to double, !dbg !2173
  %196 = load double, ptr %y, align 8, !dbg !2173
  %fmul406 = fmul double %sifp405, %196, !dbg !2173
  %fadd407 = fadd double %fadd404, %fmul406, !dbg !2173
  store double %fadd407, ptr %y, align 8, !dbg !2173
  %197 = load double, ptr %y, align 8, !dbg !2174
  %198 = load double, ptr %bias, align 8, !dbg !2174
  %fsub408 = fsub double %197, %198, !dbg !2174
  store double %fsub408, ptr %y, align 8, !dbg !2174
  %199 = load double, ptr %y, align 8, !dbg !2175
  %fpbool409 = fcmp une double %199, 0.000000e+00, !dbg !2175
  %not410 = xor i1 %fpbool409, true, !dbg !2175
  br i1 %not410, label %if.then411, label %if.exit412, !dbg !2175

if.then411:                                       ; preds = %if.exit401
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2175
  br label %err_retblock, !dbg !2175

if.exit412:                                       ; preds = %if.exit401
  %200 = load double, ptr %y, align 8
  store double %200, ptr %x413, align 8
  %201 = load i64, ptr %e2, align 8, !dbg !2176
  %trunc414 = trunc i64 %201 to i32, !dbg !2176
  store i32 %trunc414, ptr %n415, align 4
  %202 = load double, ptr %x413, align 8, !dbg !2177
  %203 = load i32, ptr %n415, align 4, !dbg !2177
  %204 = call double @scalbn(double %202, i32 %203), !dbg !2177
  store double %204, ptr %blockret147, align 8, !dbg !2177
  br label %expr_block.exit417, !dbg !2177

expr_block.exit417:                               ; preds = %if.exit412, %if.then348, %if.exit175, %if.then167
  %205 = load double, ptr %blockret147, align 8, !dbg !2177
  %fpfptrunc = fptrunc double %205 to float, !dbg !2177
  store float %fpfptrunc, ptr %blockret, align 4, !dbg !2177
  br label %expr_block.exit1947, !dbg !2177

if.exit418:                                       ; preds = %and.phi128
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars419, ptr align 8 %chars, i32 16, i1 false)
  %206 = load i32, ptr %sign, align 4
  store i32 %206, ptr %sign420, align 4
  %ptradd422 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2179
  %207 = load i64, ptr %ptradd422, align 8, !dbg !2179
  %lt423 = icmp ult i64 0, %207, !dbg !2179
  br i1 %lt423, label %assert_ok, label %assert_fail, !dbg !2179

assert_fail:                                      ; preds = %if.exit418
  store %"char[]" { ptr @.panic_msg.78, i64 34 }, ptr %indirectarg424, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg425, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg426, align 8
  %208 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %208(ptr align 8 %indirectarg424, ptr align 8 %indirectarg425, ptr align 8 %indirectarg426, i32 35), !dbg !2179
  unreachable, !dbg !2179

assert_ok:                                        ; preds = %if.exit418
    #dbg_declare(ptr %x427, !2183, !DIExpression(), !2184)
  call void @llvm.memset.p0.i64(ptr align 16 %x427, i8 0, i64 512, i1 false), !dbg !2184
    #dbg_declare(ptr %emax, !2185, !DIExpression(), !2186)
  store i32 128, ptr %emax, align 4, !dbg !2186
    #dbg_declare(ptr %index428, !2187, !DIExpression(), !2188)
  store i64 0, ptr %index428, align 8, !dbg !2188
    #dbg_declare(ptr %got_digit429, !2189, !DIExpression(), !2190)
  %ptradd430 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2190
  %209 = load i64, ptr %ptradd430, align 8, !dbg !2190
  %210 = load ptr, ptr %chars419, align 8, !dbg !2190
  %ge431 = icmp sge i64 0, %209, !dbg !2190
  %211 = call i1 @llvm.expect.i1(i1 %ge431, i1 false), !dbg !2190
  br i1 %211, label %panic432, label %checkok442, !dbg !2190

checkok442:                                       ; preds = %assert_ok
  %212 = load i8, ptr %210, align 1, !dbg !2190
  %eq443 = icmp eq i8 %212, 48, !dbg !2190
  %213 = zext i1 %eq443 to i8, !dbg !2190
  store i8 %213, ptr %got_digit429, align 1, !dbg !2190
    #dbg_declare(ptr %got_rad444, !2191, !DIExpression(), !2192)
  store i8 0, ptr %got_rad444, align 1, !dbg !2192
    #dbg_declare(ptr %lrp, !2193, !DIExpression(), !2194)
  store i64 0, ptr %lrp, align 8, !dbg !2194
    #dbg_declare(ptr %dc445, !2195, !DIExpression(), !2194)
  store i64 0, ptr %dc445, align 8, !dbg !2194
    #dbg_declare(ptr %k, !2196, !DIExpression(), !2197)
  store i32 0, ptr %k, align 4, !dbg !2197
    #dbg_declare(ptr %j, !2198, !DIExpression(), !2197)
  store i32 0, ptr %j, align 4, !dbg !2197
    #dbg_declare(ptr %lnz, !2199, !DIExpression(), !2197)
  store i32 0, ptr %lnz, align 4, !dbg !2197
    #dbg_declare(ptr %len446, !2200, !DIExpression(), !2201)
  %ptradd447 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2201
  %214 = load i64, ptr %ptradd447, align 8, !dbg !2201
  store i64 %214, ptr %len446, align 8, !dbg !2201
    #dbg_declare(ptr %last_char448, !2202, !DIExpression(), !2203)
  %215 = load i64, ptr %len446, align 8, !dbg !2203
  %sub449 = sub i64 %215, 1, !dbg !2203
  store i64 %sub449, ptr %last_char448, align 8, !dbg !2203
  %216 = load i64, ptr %len446, align 8, !dbg !2204
  %i2b450 = icmp ne i64 %216, 0, !dbg !2204
  br i1 %i2b450, label %assert_ok455, label %assert_fail451, !dbg !2204

assert_fail451:                                   ; preds = %checkok442
  store %"char[]" { ptr @.panic_msg.79, i64 16 }, ptr %indirectarg452, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg453, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg454, align 8
  %217 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %217(ptr align 8 %indirectarg452, ptr align 8 %indirectarg453, ptr align 8 %indirectarg454, i32 52), !dbg !2204
  unreachable, !dbg !2204

assert_ok455:                                     ; preds = %checkok442
    #dbg_declare(ptr %c456, !2205, !DIExpression(), !2206)
  br label %loop.cond457, !dbg !2207

loop.cond457:                                     ; preds = %if.exit478, %assert_ok455
  %ptradd458 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2208
  %218 = load i64, ptr %ptradd458, align 8, !dbg !2208
  %219 = load ptr, ptr %chars419, align 8, !dbg !2208
  %220 = load i64, ptr %index428, align 8, !dbg !2208
  %ge459 = icmp uge i64 %220, %218, !dbg !2208
  %221 = call i1 @llvm.expect.i1(i1 %ge459, i1 false), !dbg !2208
  br i1 %221, label %panic460, label %checkok470, !dbg !2208

checkok470:                                       ; preds = %loop.cond457
  %ptradd471 = getelementptr inbounds i8, ptr %219, i64 %220, !dbg !2208
  %222 = load i8, ptr %ptradd471, align 1, !dbg !2208
  store i8 %222, ptr %c456, align 1, !dbg !2208
  %eq472 = icmp eq i8 %222, 48, !dbg !2208
  br i1 %eq472, label %loop.body473, label %loop.exit480, !dbg !2208

loop.body473:                                     ; preds = %checkok470
  %223 = load i64, ptr %index428, align 8, !dbg !2210
  %224 = load i64, ptr %last_char448, align 8, !dbg !2210
  %eq474 = icmp eq i64 %223, %224, !dbg !2210
  br i1 %eq474, label %if.then475, label %if.exit478, !dbg !2210

if.then475:                                       ; preds = %loop.body473
  %225 = load i32, ptr %sign420, align 4, !dbg !2210
  %sifp476 = sitofp i32 %225 to double, !dbg !2210
  %fmul477 = fmul double %sifp476, 0.000000e+00, !dbg !2210
  store double %fmul477, ptr %blockret421, align 8, !dbg !2210
  br label %expr_block.exit1945, !dbg !2210

if.exit478:                                       ; preds = %loop.body473
  %226 = load i64, ptr %index428, align 8, !dbg !2212
  %add479 = add i64 %226, 1, !dbg !2212
  store i64 %add479, ptr %index428, align 8, !dbg !2212
  br label %loop.cond457, !dbg !2212

loop.exit480:                                     ; preds = %checkok470
  %227 = load i8, ptr %c456, align 1, !dbg !2213
  %eq481 = icmp eq i8 %227, 46, !dbg !2213
  br i1 %eq481, label %if.then482, label %if.exit538, !dbg !2213

if.then482:                                       ; preds = %loop.exit480
  store i8 1, ptr %got_rad444, align 1, !dbg !2214
  %228 = load i64, ptr %index428, align 8, !dbg !2216
  %229 = load i64, ptr %last_char448, align 8, !dbg !2216
  %eq483 = icmp eq i64 %228, %229, !dbg !2216
  br i1 %eq483, label %if.then484, label %if.exit490, !dbg !2216

if.then484:                                       ; preds = %if.then482
  %230 = load i8, ptr %got_digit429, align 1, !dbg !2217
  %231 = trunc i8 %230 to i1, !dbg !2217
  %not485 = xor i1 %231, true, !dbg !2217
  br i1 %not485, label %if.then486, label %if.exit487, !dbg !2217

if.then486:                                       ; preds = %if.then484
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2217
  br label %err_retblock, !dbg !2217

if.exit487:                                       ; preds = %if.then484
  %232 = load i32, ptr %sign420, align 4, !dbg !2219
  %sifp488 = sitofp i32 %232 to double, !dbg !2219
  %fmul489 = fmul double %sifp488, 0.000000e+00, !dbg !2219
  store double %fmul489, ptr %blockret421, align 8, !dbg !2219
  br label %expr_block.exit1945, !dbg !2219

if.exit490:                                       ; preds = %if.then482
  %233 = load i64, ptr %index428, align 8, !dbg !2220
  %234 = load i64, ptr %last_char448, align 8, !dbg !2220
  %neq491 = icmp ne i64 %233, %234, !dbg !2220
  br i1 %neq491, label %and.rhs492, label %and.phi509, !dbg !2220

and.rhs492:                                       ; preds = %if.exit490
  %ptradd493 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2220
  %235 = load i64, ptr %ptradd493, align 8, !dbg !2220
  %236 = load ptr, ptr %chars419, align 8, !dbg !2220
  %237 = load i64, ptr %index428, align 8, !dbg !2220
  %add494 = add i64 %237, 1, !dbg !2220
  store i64 %add494, ptr %index428, align 8, !dbg !2220
  %ge495 = icmp uge i64 %add494, %235, !dbg !2220
  %238 = call i1 @llvm.expect.i1(i1 %ge495, i1 false), !dbg !2220
  br i1 %238, label %panic496, label %checkok506, !dbg !2220

checkok506:                                       ; preds = %and.rhs492
  %ptradd507 = getelementptr inbounds i8, ptr %236, i64 %add494, !dbg !2220
  %239 = load i8, ptr %ptradd507, align 1, !dbg !2220
  store i8 %239, ptr %c456, align 1, !dbg !2220
  %eq508 = icmp eq i8 %239, 48, !dbg !2220
  br label %and.phi509, !dbg !2220

and.phi509:                                       ; preds = %checkok506, %if.exit490
  %val510 = phi i1 [ false, %if.exit490 ], [ %eq508, %checkok506 ], !dbg !2220
  br i1 %val510, label %if.then511, label %if.exit537, !dbg !2220

if.then511:                                       ; preds = %and.phi509
  %240 = load i64, ptr %lrp, align 8, !dbg !2221
  %sub512 = sub i64 %240, 1, !dbg !2221
  store i64 %sub512, ptr %lrp, align 8, !dbg !2221
  store i8 1, ptr %got_digit429, align 1, !dbg !2223
  br label %loop.cond513, !dbg !2224

loop.cond513:                                     ; preds = %loop.body534, %if.then511
  %241 = load i64, ptr %last_char448, align 8, !dbg !2225
  %242 = load i64, ptr %index428, align 8, !dbg !2225
  %neq514 = icmp ne i64 %241, %242, !dbg !2225
  br i1 %neq514, label %and.rhs515, label %and.phi532, !dbg !2225

and.rhs515:                                       ; preds = %loop.cond513
  %ptradd516 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2225
  %243 = load i64, ptr %ptradd516, align 8, !dbg !2225
  %244 = load ptr, ptr %chars419, align 8, !dbg !2225
  %245 = load i64, ptr %index428, align 8, !dbg !2225
  %add517 = add i64 %245, 1, !dbg !2225
  store i64 %add517, ptr %index428, align 8, !dbg !2225
  %ge518 = icmp uge i64 %add517, %243, !dbg !2225
  %246 = call i1 @llvm.expect.i1(i1 %ge518, i1 false), !dbg !2225
  br i1 %246, label %panic519, label %checkok529, !dbg !2225

checkok529:                                       ; preds = %and.rhs515
  %ptradd530 = getelementptr inbounds i8, ptr %244, i64 %add517, !dbg !2225
  %247 = load i8, ptr %ptradd530, align 1, !dbg !2225
  store i8 %247, ptr %c456, align 1, !dbg !2225
  %eq531 = icmp eq i8 %247, 48, !dbg !2225
  br label %and.phi532, !dbg !2225

and.phi532:                                       ; preds = %checkok529, %loop.cond513
  %val533 = phi i1 [ false, %loop.cond513 ], [ %eq531, %checkok529 ], !dbg !2225
  br i1 %val533, label %loop.body534, label %loop.exit536, !dbg !2225

loop.body534:                                     ; preds = %and.phi532
  %248 = load i64, ptr %lrp, align 8, !dbg !2227
  %sub535 = sub i64 %248, 1, !dbg !2227
  store i64 %sub535, ptr %lrp, align 8, !dbg !2227
  br label %loop.cond513, !dbg !2227

loop.exit536:                                     ; preds = %and.phi532
  br label %if.exit537, !dbg !2227

if.exit537:                                       ; preds = %loop.exit536, %and.phi509
  br label %if.exit538, !dbg !2227

if.exit538:                                       ; preds = %if.exit537, %loop.exit480
  br label %loop.cond539, !dbg !2229

loop.cond539:                                     ; preds = %checkok679, %if.exit538
  %249 = load i8, ptr %c456, align 1, !dbg !2230
  %zext540 = zext i8 %249 to i32, !dbg !2230
  %sub541 = sub i32 %zext540, 48, !dbg !2230
  %lt542 = icmp ult i32 %sub541, 10, !dbg !2230
  br i1 %lt542, label %or.phi545, label %or.rhs543, !dbg !2230

or.rhs543:                                        ; preds = %loop.cond539
  %250 = load i8, ptr %c456, align 1, !dbg !2230
  %eq544 = icmp eq i8 %250, 46, !dbg !2230
  br label %or.phi545, !dbg !2230

or.phi545:                                        ; preds = %or.rhs543, %loop.cond539
  %val546 = phi i1 [ true, %loop.cond539 ], [ %eq544, %or.rhs543 ], !dbg !2230
  br i1 %val546, label %loop.body547, label %loop.exit681, !dbg !2230

loop.body547:                                     ; preds = %or.phi545
  store i8 1, ptr %switch548, align 1
  br label %switch.entry549

switch.entry549:                                  ; preds = %loop.body547
  %251 = load i8, ptr %switch548, align 1
  %252 = trunc i8 %251 to i1
  %253 = load i8, ptr %c456, align 1, !dbg !2232
  %eq550 = icmp eq i8 %253, 46, !dbg !2232
  %eq551 = icmp eq i1 %eq550, %252, !dbg !2232
  br i1 %eq551, label %switch.case552, label %next_if555, !dbg !2232

switch.case552:                                   ; preds = %switch.entry549
  %254 = load i8, ptr %got_rad444, align 1, !dbg !2235
  %255 = trunc i8 %254 to i1, !dbg !2235
  br i1 %255, label %if.then553, label %if.exit554, !dbg !2235

if.then553:                                       ; preds = %switch.case552
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2235
  br label %err_retblock, !dbg !2235

if.exit554:                                       ; preds = %switch.case552
  store i8 1, ptr %got_rad444, align 1, !dbg !2237
  %256 = load i64, ptr %dc445, align 8, !dbg !2238
  store i64 %256, ptr %lrp, align 8, !dbg !2238
  br label %switch.exit656, !dbg !2238

next_if555:                                       ; preds = %switch.entry549
  %257 = load i32, ptr %k, align 4, !dbg !2239
  %lt556 = icmp slt i32 %257, 125, !dbg !2239
  %eq557 = icmp eq i1 %lt556, %252, !dbg !2239
  br i1 %eq557, label %switch.case558, label %next_if649, !dbg !2239

switch.case558:                                   ; preds = %next_if555
  %258 = load i64, ptr %dc445, align 8, !dbg !2240
  %add559 = add i64 %258, 1, !dbg !2240
  store i64 %add559, ptr %dc445, align 8, !dbg !2240
  %259 = load i8, ptr %c456, align 1, !dbg !2242
  %neq560 = icmp ne i8 %259, 48, !dbg !2242
  br i1 %neq560, label %if.then561, label %if.exit563, !dbg !2242

if.then561:                                       ; preds = %switch.case558
  %260 = load i64, ptr %dc445, align 8, !dbg !2242
  %trunc562 = trunc i64 %260 to i32, !dbg !2242
  store i32 %trunc562, ptr %lnz, align 4, !dbg !2242
  br label %if.exit563, !dbg !2242

if.exit563:                                       ; preds = %if.then561, %switch.case558
  %261 = load i32, ptr %j, align 4, !dbg !2243
  %i2b564 = icmp ne i32 %261, 0, !dbg !2243
  br i1 %i2b564, label %if.then565, label %if.else616, !dbg !2243

if.then565:                                       ; preds = %if.exit563
  %262 = load i32, ptr %k, align 4, !dbg !2244
  %sext = sext i32 %262 to i64, !dbg !2244
  %lt566 = icmp slt i64 %sext, 0, !dbg !2244
  %263 = call i1 @llvm.expect.i1(i1 %lt566, i1 false), !dbg !2244
  br i1 %263, label %panic567, label %checkok575, !dbg !2244

checkok575:                                       ; preds = %if.then565
  %ge576 = icmp sge i64 %sext, 128, !dbg !2244
  %264 = call i1 @llvm.expect.i1(i1 %ge576, i1 false), !dbg !2244
  br i1 %264, label %panic577, label %checkok587, !dbg !2244

checkok587:                                       ; preds = %checkok575
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext, !dbg !2244
  %265 = load i32, ptr %k, align 4, !dbg !2244
  %sext588 = sext i32 %265 to i64, !dbg !2244
  %lt589 = icmp slt i64 %sext588, 0, !dbg !2244
  %266 = call i1 @llvm.expect.i1(i1 %lt589, i1 false), !dbg !2244
  br i1 %266, label %panic590, label %checkok598, !dbg !2244

checkok598:                                       ; preds = %checkok587
  %ge599 = icmp sge i64 %sext588, 128, !dbg !2244
  %267 = call i1 @llvm.expect.i1(i1 %ge599, i1 false), !dbg !2244
  br i1 %267, label %panic600, label %checkok610, !dbg !2244

checkok610:                                       ; preds = %checkok598
  %ptroffset611 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext588, !dbg !2244
  %268 = load i32, ptr %ptroffset611, align 4, !dbg !2244
  %mul612 = mul i32 %268, 10, !dbg !2244
  %269 = load i8, ptr %c456, align 1, !dbg !2244
  %zext613 = zext i8 %269 to i32, !dbg !2244
  %add614 = add i32 %mul612, %zext613, !dbg !2244
  %sub615 = sub i32 %add614, 48, !dbg !2244
  store i32 %sub615, ptr %ptroffset, align 4, !dbg !2244
  br label %if.exit643, !dbg !2244

if.else616:                                       ; preds = %if.exit563
  %270 = load i32, ptr %k, align 4, !dbg !2246
  %sext617 = sext i32 %270 to i64, !dbg !2246
  %lt618 = icmp slt i64 %sext617, 0, !dbg !2246
  %271 = call i1 @llvm.expect.i1(i1 %lt618, i1 false), !dbg !2246
  br i1 %271, label %panic619, label %checkok627, !dbg !2246

checkok627:                                       ; preds = %if.else616
  %ge628 = icmp sge i64 %sext617, 128, !dbg !2246
  %272 = call i1 @llvm.expect.i1(i1 %ge628, i1 false), !dbg !2246
  br i1 %272, label %panic629, label %checkok639, !dbg !2246

checkok639:                                       ; preds = %checkok627
  %ptroffset640 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext617, !dbg !2246
  %273 = load i8, ptr %c456, align 1, !dbg !2246
  %zext641 = zext i8 %273 to i32, !dbg !2246
  %sub642 = sub i32 %zext641, 48, !dbg !2246
  store i32 %sub642, ptr %ptroffset640, align 4, !dbg !2246
  br label %if.exit643, !dbg !2246

if.exit643:                                       ; preds = %checkok639, %checkok610
  %274 = load i32, ptr %j, align 4, !dbg !2248
  %add644 = add i32 %274, 1, !dbg !2248
  store i32 %add644, ptr %j, align 4, !dbg !2248
  %eq645 = icmp eq i32 %add644, 9, !dbg !2248
  br i1 %eq645, label %if.then646, label %if.exit648, !dbg !2248

if.then646:                                       ; preds = %if.exit643
  %275 = load i32, ptr %k, align 4, !dbg !2249
  %add647 = add i32 %275, 1, !dbg !2249
  store i32 %add647, ptr %k, align 4, !dbg !2249
  store i32 0, ptr %j, align 4, !dbg !2251
  br label %if.exit648, !dbg !2251

if.exit648:                                       ; preds = %if.then646, %if.exit643
  store i8 1, ptr %got_digit429, align 1, !dbg !2252
  br label %switch.exit656, !dbg !2252

next_if649:                                       ; preds = %next_if555
  br label %switch.default, !dbg !2252

switch.default:                                   ; preds = %next_if649
  %276 = load i64, ptr %dc445, align 8, !dbg !2253
  %add650 = add i64 %276, 1, !dbg !2253
  store i64 %add650, ptr %dc445, align 8, !dbg !2253
  %277 = load i8, ptr %c456, align 1, !dbg !2255
  %neq651 = icmp ne i8 %277, 48, !dbg !2255
  br i1 %neq651, label %if.then652, label %if.exit655, !dbg !2255

if.then652:                                       ; preds = %switch.default
  %ptradd653 = getelementptr inbounds i8, ptr %x427, i64 496, !dbg !2255
  %278 = load i32, ptr %ptradd653, align 4, !dbg !2255
  %or654 = or i32 %278, 1, !dbg !2255
  store i32 %or654, ptr %ptradd653, align 4, !dbg !2255
  br label %if.exit655, !dbg !2255

if.exit655:                                       ; preds = %if.then652, %switch.default
  br label %switch.exit656, !dbg !2255

switch.exit656:                                   ; preds = %if.exit655, %if.exit648, %if.exit554
  %279 = load i64, ptr %index428, align 8, !dbg !2256
  %280 = load i64, ptr %last_char448, align 8, !dbg !2256
  %eq657 = icmp eq i64 %279, %280, !dbg !2256
  br i1 %eq657, label %if.then658, label %if.exit659, !dbg !2256

if.then658:                                       ; preds = %switch.exit656
  br label %loop.exit681, !dbg !2256

if.exit659:                                       ; preds = %switch.exit656
  %281 = load i64, ptr %index428, align 8, !dbg !2257
  %282 = load i64, ptr %last_char448, align 8, !dbg !2257
  %lt660 = icmp ult i64 %281, %282, !dbg !2257
  br i1 %lt660, label %assert_ok665, label %assert_fail661, !dbg !2257

assert_fail661:                                   ; preds = %if.exit659
  store %"char[]" { ptr @.panic_msg.79, i64 16 }, ptr %indirectarg662, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg663, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg664, align 8
  %283 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %283(ptr align 8 %indirectarg662, ptr align 8 %indirectarg663, ptr align 8 %indirectarg664, i32 112), !dbg !2257
  unreachable, !dbg !2257

assert_ok665:                                     ; preds = %if.exit659
  %ptradd666 = getelementptr inbounds i8, ptr %chars419, i64 8, !dbg !2258
  %284 = load i64, ptr %ptradd666, align 8, !dbg !2258
  %285 = load ptr, ptr %chars419, align 8, !dbg !2258
  %286 = load i64, ptr %index428, align 8, !dbg !2258
  %add667 = add i64 %286, 1, !dbg !2258
  store i64 %add667, ptr %index428, align 8, !dbg !2258
  %ge668 = icmp uge i64 %add667, %284, !dbg !2258
  %287 = call i1 @llvm.expect.i1(i1 %ge668, i1 false), !dbg !2258
  br i1 %287, label %panic669, label %checkok679, !dbg !2258

checkok679:                                       ; preds = %assert_ok665
  %ptradd680 = getelementptr inbounds i8, ptr %285, i64 %add667, !dbg !2258
  %288 = load i8, ptr %ptradd680, align 1, !dbg !2258
  store i8 %288, ptr %c456, align 1, !dbg !2258
  br label %loop.cond539, !dbg !2258

loop.exit681:                                     ; preds = %if.then658, %or.phi545
  %289 = load i8, ptr %got_rad444, align 1, !dbg !2259
  %290 = trunc i8 %289 to i1, !dbg !2259
  %not682 = xor i1 %290, true, !dbg !2259
  br i1 %not682, label %if.then683, label %if.exit684, !dbg !2259

if.then683:                                       ; preds = %loop.exit681
  %291 = load i64, ptr %dc445, align 8, !dbg !2259
  store i64 %291, ptr %lrp, align 8, !dbg !2259
  br label %if.exit684, !dbg !2259

if.exit684:                                       ; preds = %if.then683, %loop.exit681
  %292 = load i8, ptr %got_digit429, align 1, !dbg !2260
  %293 = trunc i8 %292 to i1, !dbg !2260
  %not685 = xor i1 %293, true, !dbg !2260
  br i1 %not685, label %if.then686, label %if.exit687, !dbg !2260

if.then686:                                       ; preds = %if.exit684
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2260
  br label %err_retblock, !dbg !2260

if.exit687:                                       ; preds = %if.exit684
  %294 = load i8, ptr %c456, align 1, !dbg !2261
  %zext688 = zext i8 %294 to i32, !dbg !2261
  %or689 = or i32 %zext688, 32, !dbg !2261
  %eq690 = icmp eq i32 %or689, 101, !dbg !2261
  %check691 = icmp sge i32 %or689, 0, !dbg !2261
  %siui-eq692 = and i1 %check691, %eq690, !dbg !2261
  br i1 %siui-eq692, label %if.then693, label %if.else731, !dbg !2261

if.then693:                                       ; preds = %if.exit687
  %295 = load i64, ptr %last_char448, align 8, !dbg !2262
  %296 = load i64, ptr %index428, align 8, !dbg !2262
  %eq694 = icmp eq i64 %295, %296, !dbg !2262
  br i1 %eq694, label %if.then695, label %if.exit696, !dbg !2262

if.then695:                                       ; preds = %if.then693
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2262
  br label %err_retblock, !dbg !2262

if.exit696:                                       ; preds = %if.then693
    #dbg_declare(ptr %e10, !2264, !DIExpression(), !2265)
  %297 = load %"char[]", ptr %chars419, align 8, !dbg !2265
  %298 = extractvalue %"char[]" %297, 0, !dbg !2265
  %299 = load i64, ptr %index428, align 8, !dbg !2265
  %add697 = add i64 %299, 1, !dbg !2265
  %300 = extractvalue %"char[]" %297, 1, !dbg !2265
  %gt698 = icmp sgt i64 %add697, %300, !dbg !2265
  %301 = call i1 @llvm.expect.i1(i1 %gt698, i1 false), !dbg !2265
  br i1 %301, label %panic699, label %checkok709, !dbg !2265

checkok709:                                       ; preds = %if.exit696
  %underflow710 = icmp slt i64 %add697, 0, !dbg !2265
  %302 = call i1 @llvm.expect.i1(i1 %underflow710, i1 false), !dbg !2265
  br i1 %302, label %panic711, label %checkok719, !dbg !2265

checkok719:                                       ; preds = %checkok709
  %size720 = sub i64 %300, %add697, !dbg !2265
  %ptradd721 = getelementptr inbounds i8, ptr %298, i64 %add697, !dbg !2265
  %303 = insertvalue %"char[]" undef, ptr %ptradd721, 0, !dbg !2265
  %304 = insertvalue %"char[]" %303, i64 %size720, 1, !dbg !2265
  store %"char[]" %304, ptr %indirectarg723, align 8
  %305 = call i64 @std.core.String.to_long(ptr %retparam722, ptr align 8 %indirectarg723, i32 10), !dbg !2265
  %not_err724 = icmp eq i64 %305, 0, !dbg !2265
  %306 = call i1 @llvm.expect.i1(i1 %not_err724, i1 true), !dbg !2265
  br i1 %306, label %after_check725, label %else_block726, !dbg !2265

after_check725:                                   ; preds = %checkok719
  %307 = load i64, ptr %retparam722, align 8, !dbg !2265
  br label %phi_block729, !dbg !2265

else_block726:                                    ; preds = %checkok719
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var727, align 8, !dbg !2265
  br label %guard_block728, !dbg !2265

guard_block728:                                   ; preds = %else_block726
  %308 = load i64, ptr %error_var727, align 8, !dbg !2265
  store i64 %308, ptr %reterr, align 8, !dbg !2265
  br label %err_retblock, !dbg !2265

phi_block729:                                     ; preds = %after_check725
  store i64 %307, ptr %e10, align 8, !dbg !2265
  %309 = load i64, ptr %lrp, align 8, !dbg !2266
  %310 = load i64, ptr %e10, align 8, !dbg !2266
  %add730 = add i64 %309, %310, !dbg !2266
  store i64 %add730, ptr %lrp, align 8, !dbg !2266
  br label %if.exit735, !dbg !2266

if.else731:                                       ; preds = %if.exit687
  %311 = load i64, ptr %index428, align 8, !dbg !2267
  %312 = load i64, ptr %last_char448, align 8, !dbg !2267
  %neq732 = icmp ne i64 %311, %312, !dbg !2267
  br i1 %neq732, label %if.then733, label %if.exit734, !dbg !2267

if.then733:                                       ; preds = %if.else731
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2268
  br label %err_retblock, !dbg !2268

if.exit734:                                       ; preds = %if.else731
  br label %if.exit735, !dbg !2268

if.exit735:                                       ; preds = %if.exit734, %phi_block729
  %313 = load i32, ptr %x427, align 4, !dbg !2270
  %i2nb736 = icmp eq i32 %313, 0, !dbg !2270
  br i1 %i2nb736, label %if.then737, label %if.exit740, !dbg !2270

if.then737:                                       ; preds = %if.exit735
  %314 = load i32, ptr %sign420, align 4, !dbg !2270
  %sifp738 = sitofp i32 %314 to double, !dbg !2270
  %fmul739 = fmul double %sifp738, 0.000000e+00, !dbg !2270
  store double %fmul739, ptr %blockret421, align 8, !dbg !2270
  br label %expr_block.exit1945, !dbg !2270

if.exit740:                                       ; preds = %if.exit735
  %315 = load i64, ptr %lrp, align 8, !dbg !2271
  %316 = load i64, ptr %dc445, align 8, !dbg !2271
  %eq741 = icmp eq i64 %315, %316, !dbg !2271
  br i1 %eq741, label %and.rhs742, label %and.phi744, !dbg !2271

and.rhs742:                                       ; preds = %if.exit740
  %317 = load i64, ptr %dc445, align 8, !dbg !2271
  %lt743 = icmp slt i64 %317, 10, !dbg !2271
  br label %and.phi744, !dbg !2271

and.phi744:                                       ; preds = %and.rhs742, %if.exit740
  %val745 = phi i1 [ false, %if.exit740 ], [ %lt743, %and.rhs742 ], !dbg !2271
  br i1 %val745, label %and.rhs746, label %and.phi752, !dbg !2271

and.rhs746:                                       ; preds = %and.phi744
  br i1 false, label %or.phi750, label %or.rhs747, !dbg !2271

or.rhs747:                                        ; preds = %and.rhs746
  %318 = load i32, ptr %x427, align 4, !dbg !2271
  %zext748 = zext i32 %318 to i64, !dbg !2271
  %lshr = lshr i64 %zext748, 24, !dbg !2271
  %319 = freeze i64 %lshr, !dbg !2271
  %eq749 = icmp eq i64 0, %319, !dbg !2271
  br label %or.phi750, !dbg !2271

or.phi750:                                        ; preds = %or.rhs747, %and.rhs746
  %val751 = phi i1 [ true, %and.rhs746 ], [ %eq749, %or.rhs747 ], !dbg !2271
  br label %and.phi752, !dbg !2271

and.phi752:                                       ; preds = %or.phi750, %and.phi744
  %val753 = phi i1 [ false, %and.phi744 ], [ %val751, %or.phi750 ], !dbg !2271
  br i1 %val753, label %if.then754, label %if.exit758, !dbg !2271

if.then754:                                       ; preds = %and.phi752
  %320 = load i32, ptr %sign420, align 4, !dbg !2271
  %sifp755 = sitofp i32 %320 to double, !dbg !2271
  %321 = load i32, ptr %x427, align 4, !dbg !2271
  %uifp756 = uitofp i32 %321 to double, !dbg !2271
  %fmul757 = fmul double %sifp755, %uifp756, !dbg !2271
  store double %fmul757, ptr %blockret421, align 8, !dbg !2271
  br label %expr_block.exit1945, !dbg !2271

if.exit758:                                       ; preds = %and.phi752
  %322 = load i64, ptr %lrp, align 8, !dbg !2272
  %gt759 = icmp sgt i64 %322, 74, !dbg !2272
  br i1 %gt759, label %if.then760, label %if.exit761, !dbg !2272

if.then760:                                       ; preds = %if.exit758
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2272
  br label %err_retblock, !dbg !2272

if.exit761:                                       ; preds = %if.exit758
  %323 = load i64, ptr %lrp, align 8, !dbg !2273
  %lt762 = icmp slt i64 %323, -255, !dbg !2273
  br i1 %lt762, label %if.then763, label %if.exit764, !dbg !2273

if.then763:                                       ; preds = %if.exit761
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2273
  br label %err_retblock, !dbg !2273

if.exit764:                                       ; preds = %if.exit761
  %324 = load i32, ptr %j, align 4, !dbg !2274
  %i2b765 = icmp ne i32 %324, 0, !dbg !2274
  br i1 %i2b765, label %if.then766, label %if.exit798, !dbg !2274

if.then766:                                       ; preds = %if.exit764
  br label %loop.cond767, !dbg !2275

loop.cond767:                                     ; preds = %checkok792, %if.then766
  %325 = load i32, ptr %j, align 4, !dbg !2277
  %lt768 = icmp slt i32 %325, 9, !dbg !2277
  br i1 %lt768, label %loop.body769, label %loop.exit796, !dbg !2277

loop.body769:                                     ; preds = %loop.cond767
  %326 = load i32, ptr %k, align 4, !dbg !2277
  %sext770 = sext i32 %326 to i64, !dbg !2277
  %lt771 = icmp slt i64 %sext770, 0, !dbg !2277
  %327 = call i1 @llvm.expect.i1(i1 %lt771, i1 false), !dbg !2277
  br i1 %327, label %panic772, label %checkok780, !dbg !2277

checkok780:                                       ; preds = %loop.body769
  %ge781 = icmp sge i64 %sext770, 128, !dbg !2277
  %328 = call i1 @llvm.expect.i1(i1 %ge781, i1 false), !dbg !2277
  br i1 %328, label %panic782, label %checkok792, !dbg !2277

checkok792:                                       ; preds = %checkok780
  %ptroffset793 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext770, !dbg !2277
  %329 = load i32, ptr %ptroffset793, align 4, !dbg !2277
  %mul794 = mul i32 %329, 10, !dbg !2277
  store i32 %mul794, ptr %ptroffset793, align 4, !dbg !2277
  %330 = load i32, ptr %j, align 4, !dbg !2277
  %add795 = add i32 %330, 1, !dbg !2277
  store i32 %add795, ptr %j, align 4, !dbg !2277
  br label %loop.cond767, !dbg !2277

loop.exit796:                                     ; preds = %loop.cond767
  %331 = load i32, ptr %k, align 4, !dbg !2279
  %add797 = add i32 %331, 1, !dbg !2279
  store i32 %add797, ptr %k, align 4, !dbg !2279
  store i32 0, ptr %j, align 4, !dbg !2280
  br label %if.exit798, !dbg !2280

if.exit798:                                       ; preds = %loop.exit796, %if.exit764
    #dbg_declare(ptr %a, !2281, !DIExpression(), !2282)
  store i32 0, ptr %a, align 4, !dbg !2282
    #dbg_declare(ptr %z, !2283, !DIExpression(), !2284)
  %332 = load i32, ptr %k, align 4, !dbg !2284
  store i32 %332, ptr %z, align 4, !dbg !2284
    #dbg_declare(ptr %e2799, !2285, !DIExpression(), !2286)
  store i32 0, ptr %e2799, align 4, !dbg !2286
    #dbg_declare(ptr %rp800, !2287, !DIExpression(), !2288)
  %333 = load i64, ptr %lrp, align 8, !dbg !2288
  store i64 %333, ptr %rp800, align 8, !dbg !2288
  %334 = load i32, ptr %lnz, align 4, !dbg !2289
  %lt801 = icmp slt i32 %334, 9, !dbg !2289
  br i1 %lt801, label %and.rhs802, label %and.phi804, !dbg !2289

and.rhs802:                                       ; preds = %if.exit798
  %335 = load i32, ptr %lnz, align 4, !dbg !2289
  %sext803 = sext i32 %335 to i64, !dbg !2289
  %336 = load i64, ptr %rp800, align 8, !dbg !2289
  %le = icmp sle i64 %sext803, %336, !dbg !2289
  br label %and.phi804, !dbg !2289

and.phi804:                                       ; preds = %and.rhs802, %if.exit798
  %val805 = phi i1 [ false, %if.exit798 ], [ %le, %and.rhs802 ], !dbg !2289
  br i1 %val805, label %and.rhs806, label %and.phi808, !dbg !2289

and.rhs806:                                       ; preds = %and.phi804
  %337 = load i64, ptr %rp800, align 8, !dbg !2289
  %lt807 = icmp slt i64 %337, 18, !dbg !2289
  br label %and.phi808, !dbg !2289

and.phi808:                                       ; preds = %and.rhs806, %and.phi804
  %val809 = phi i1 [ false, %and.phi804 ], [ %lt807, %and.rhs806 ], !dbg !2289
  br i1 %val809, label %if.then810, label %if.exit904, !dbg !2289

if.then810:                                       ; preds = %and.phi808
  %338 = load i64, ptr %rp800, align 8, !dbg !2290
  %eq811 = icmp eq i64 %338, 9, !dbg !2290
  br i1 %eq811, label %if.then812, label %if.exit816, !dbg !2290

if.then812:                                       ; preds = %if.then810
  %339 = load i32, ptr %sign420, align 4, !dbg !2290
  %sifp813 = sitofp i32 %339 to double, !dbg !2290
  %340 = load i32, ptr %x427, align 4, !dbg !2290
  %uifp814 = uitofp i32 %340 to double, !dbg !2290
  %fmul815 = fmul double %sifp813, %uifp814, !dbg !2290
  store double %fmul815, ptr %blockret421, align 8, !dbg !2290
  br label %expr_block.exit1945, !dbg !2290

if.exit816:                                       ; preds = %if.then810
  %341 = load i64, ptr %rp800, align 8, !dbg !2292
  %lt817 = icmp slt i64 %341, 9, !dbg !2292
  br i1 %lt817, label %if.then818, label %if.exit853, !dbg !2292

if.then818:                                       ; preds = %if.exit816
  %342 = load i32, ptr %sign420, align 4, !dbg !2292
  %sifp819 = sitofp i32 %342 to double, !dbg !2292
  %343 = load i32, ptr %x427, align 4, !dbg !2292
  %uifp820 = uitofp i32 %343 to double, !dbg !2292
  %fmul821 = fmul double %sifp819, %uifp820, !dbg !2292
  %344 = load i64, ptr %rp800, align 8, !dbg !2292
  %sub822 = sub i64 8, %344, !dbg !2292
  %lt823 = icmp slt i64 %sub822, 0, !dbg !2292
  %345 = call i1 @llvm.expect.i1(i1 %lt823, i1 false), !dbg !2292
  br i1 %345, label %panic824, label %checkok832, !dbg !2292

checkok832:                                       ; preds = %if.then818
  %ge833 = icmp sge i64 %sub822, 8, !dbg !2292
  %346 = call i1 @llvm.expect.i1(i1 %ge833, i1 false), !dbg !2292
  br i1 %346, label %panic834, label %checkok844, !dbg !2292

checkok844:                                       ; preds = %checkok832
  %ptroffset845 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub822, !dbg !2292
  %347 = load i32, ptr %ptroffset845, align 4, !dbg !2292
  %sifp846 = sitofp i32 %347 to double, !dbg !2292
  %zero = fcmp ueq double %sifp846, 0.000000e+00, !dbg !2292
  %348 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2292
  br i1 %348, label %panic847, label %checkok851, !dbg !2292

checkok851:                                       ; preds = %checkok844
  %fdiv852 = fdiv double %fmul821, %sifp846, !dbg !2292
  store double %fdiv852, ptr %blockret421, align 8, !dbg !2292
  br label %expr_block.exit1945, !dbg !2292

if.exit853:                                       ; preds = %if.exit816
    #dbg_declare(ptr %bitlim, !2293, !DIExpression(), !2294)
  %349 = load i64, ptr %rp800, align 8, !dbg !2294
  %sub854 = sub i64 %349, 9, !dbg !2294
  %trunc855 = trunc i64 %sub854 to i32, !dbg !2294
  %mul856 = mul i32 3, %trunc855, !dbg !2294
  %sub857 = sub i32 24, %mul856, !dbg !2294
  store i32 %sub857, ptr %bitlim, align 4, !dbg !2294
  %350 = load i32, ptr %bitlim, align 4, !dbg !2295
  %gt858 = icmp sgt i32 %350, 30, !dbg !2295
  br i1 %gt858, label %or.phi871, label %or.rhs859, !dbg !2295

or.rhs859:                                        ; preds = %if.exit853
  %351 = load i32, ptr %x427, align 4, !dbg !2295
  %352 = load i32, ptr %bitlim, align 4, !dbg !2295
  %shift_exceeds = icmp uge i32 %352, 32, !dbg !2295
  %353 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2295
  br i1 %353, label %panic860, label %checkok868, !dbg !2295

checkok868:                                       ; preds = %or.rhs859
  %lshr869 = lshr i32 %351, %352, !dbg !2295
  %354 = freeze i32 %lshr869, !dbg !2295
  %eq870 = icmp eq i32 0, %354, !dbg !2295
  br label %or.phi871, !dbg !2295

or.phi871:                                        ; preds = %checkok868, %if.exit853
  %val872 = phi i1 [ true, %if.exit853 ], [ %eq870, %checkok868 ], !dbg !2295
  br i1 %val872, label %if.then873, label %if.exit903, !dbg !2295

if.then873:                                       ; preds = %or.phi871
  %355 = load i32, ptr %sign420, align 4, !dbg !2295
  %sifp874 = sitofp i32 %355 to double, !dbg !2295
  %356 = load i32, ptr %x427, align 4, !dbg !2295
  %uifp875 = uitofp i32 %356 to double, !dbg !2295
  %fmul876 = fmul double %sifp874, %uifp875, !dbg !2295
  %357 = load i64, ptr %rp800, align 8, !dbg !2295
  %sub877 = sub i64 %357, 10, !dbg !2295
  %lt878 = icmp slt i64 %sub877, 0, !dbg !2295
  %358 = call i1 @llvm.expect.i1(i1 %lt878, i1 false), !dbg !2295
  br i1 %358, label %panic879, label %checkok887, !dbg !2295

checkok887:                                       ; preds = %if.then873
  %ge888 = icmp sge i64 %sub877, 8, !dbg !2295
  %359 = call i1 @llvm.expect.i1(i1 %ge888, i1 false), !dbg !2295
  br i1 %359, label %panic889, label %checkok899, !dbg !2295

checkok899:                                       ; preds = %checkok887
  %ptroffset900 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub877, !dbg !2295
  %360 = load i32, ptr %ptroffset900, align 4, !dbg !2295
  %sifp901 = sitofp i32 %360 to double, !dbg !2295
  %fmul902 = fmul double %fmul876, %sifp901, !dbg !2295
  store double %fmul902, ptr %blockret421, align 8, !dbg !2295
  br label %expr_block.exit1945, !dbg !2295

if.exit903:                                       ; preds = %or.phi871
  br label %if.exit904, !dbg !2295

if.exit904:                                       ; preds = %if.exit903, %and.phi808
  %361 = load i64, ptr %rp800, align 8, !dbg !2296
  %smod = srem i64 %361, 9, !dbg !2296
  %i2b905 = icmp ne i64 %smod, 0, !dbg !2296
  br i1 %i2b905, label %if.then906, label %if.exit1099, !dbg !2296

if.then906:                                       ; preds = %if.exit904
    #dbg_declare(ptr %rpm9, !2297, !DIExpression(), !2299)
  %362 = load i64, ptr %rp800, align 8, !dbg !2299
  %ge907 = icmp sge i64 %362, 0, !dbg !2299
  br i1 %ge907, label %cond.lhs, label %cond.rhs, !dbg !2299

cond.lhs:                                         ; preds = %if.then906
  %363 = load i64, ptr %rp800, align 8, !dbg !2299
  %smod908 = srem i64 %363, 9, !dbg !2299
  br label %cond.phi, !dbg !2299

cond.rhs:                                         ; preds = %if.then906
  %364 = load i64, ptr %rp800, align 8, !dbg !2299
  %smod909 = srem i64 %364, 9, !dbg !2299
  %add910 = add i64 %smod909, 9, !dbg !2299
  br label %cond.phi, !dbg !2299

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val911 = phi i64 [ %smod908, %cond.lhs ], [ %add910, %cond.rhs ], !dbg !2299
  store i64 %val911, ptr %rpm9, align 8, !dbg !2299
    #dbg_declare(ptr %p10, !2300, !DIExpression(), !2301)
  %365 = load i64, ptr %rpm9, align 8, !dbg !2301
  %sub912 = sub i64 8, %365, !dbg !2301
  %lt913 = icmp slt i64 %sub912, 0, !dbg !2301
  %366 = call i1 @llvm.expect.i1(i1 %lt913, i1 false), !dbg !2301
  br i1 %366, label %panic914, label %checkok922, !dbg !2301

checkok922:                                       ; preds = %cond.phi
  %ge923 = icmp sge i64 %sub912, 8, !dbg !2301
  %367 = call i1 @llvm.expect.i1(i1 %ge923, i1 false), !dbg !2301
  br i1 %367, label %panic924, label %checkok934, !dbg !2301

checkok934:                                       ; preds = %checkok922
  %ptroffset935 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub912, !dbg !2301
  %368 = load i32, ptr %ptroffset935, align 4, !dbg !2301
  store i32 %368, ptr %p10, align 4, !dbg !2301
    #dbg_declare(ptr %carry, !2302, !DIExpression(), !2303)
  store i32 0, ptr %carry, align 4, !dbg !2303
  %369 = load i32, ptr %a, align 4, !dbg !2304
  store i32 %369, ptr %k, align 4, !dbg !2304
  br label %loop.cond936, !dbg !2304

loop.cond936:                                     ; preds = %if.exit1066, %checkok934
  %370 = load i32, ptr %k, align 4, !dbg !2304
  %371 = load i32, ptr %z, align 4, !dbg !2304
  %neq937 = icmp ne i32 %370, %371, !dbg !2304
  br i1 %neq937, label %loop.body938, label %loop.exit1068, !dbg !2304

loop.body938:                                     ; preds = %loop.cond936
    #dbg_declare(ptr %tmp, !2306, !DIExpression(), !2308)
  %372 = load i32, ptr %k, align 4, !dbg !2308
  %sext939 = sext i32 %372 to i64, !dbg !2308
  %lt940 = icmp slt i64 %sext939, 0, !dbg !2308
  %373 = call i1 @llvm.expect.i1(i1 %lt940, i1 false), !dbg !2308
  br i1 %373, label %panic941, label %checkok949, !dbg !2308

checkok949:                                       ; preds = %loop.body938
  %ge950 = icmp sge i64 %sext939, 128, !dbg !2308
  %374 = call i1 @llvm.expect.i1(i1 %ge950, i1 false), !dbg !2308
  br i1 %374, label %panic951, label %checkok961, !dbg !2308

checkok961:                                       ; preds = %checkok949
  %ptroffset962 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext939, !dbg !2308
  %375 = load i32, ptr %ptroffset962, align 4, !dbg !2308
  %376 = load i32, ptr %p10, align 4, !dbg !2308
  %zero963 = icmp eq i32 %376, 0, !dbg !2308
  %377 = call i1 @llvm.expect.i1(i1 %zero963, i1 false), !dbg !2308
  br i1 %377, label %panic964, label %checkok968, !dbg !2308

checkok968:                                       ; preds = %checkok961
  %smod969 = srem i32 %375, %376, !dbg !2308
  store i32 %smod969, ptr %tmp, align 4, !dbg !2308
  %378 = load i32, ptr %k, align 4, !dbg !2309
  %sext970 = sext i32 %378 to i64, !dbg !2309
  %lt971 = icmp slt i64 %sext970, 0, !dbg !2309
  %379 = call i1 @llvm.expect.i1(i1 %lt971, i1 false), !dbg !2309
  br i1 %379, label %panic972, label %checkok980, !dbg !2309

checkok980:                                       ; preds = %checkok968
  %ge981 = icmp sge i64 %sext970, 128, !dbg !2309
  %380 = call i1 @llvm.expect.i1(i1 %ge981, i1 false), !dbg !2309
  br i1 %380, label %panic982, label %checkok992, !dbg !2309

checkok992:                                       ; preds = %checkok980
  %ptroffset993 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext970, !dbg !2309
  %381 = load i32, ptr %k, align 4, !dbg !2309
  %sext994 = sext i32 %381 to i64, !dbg !2309
  %lt995 = icmp slt i64 %sext994, 0, !dbg !2309
  %382 = call i1 @llvm.expect.i1(i1 %lt995, i1 false), !dbg !2309
  br i1 %382, label %panic996, label %checkok1004, !dbg !2309

checkok1004:                                      ; preds = %checkok992
  %ge1005 = icmp sge i64 %sext994, 128, !dbg !2309
  %383 = call i1 @llvm.expect.i1(i1 %ge1005, i1 false), !dbg !2309
  br i1 %383, label %panic1006, label %checkok1016, !dbg !2309

checkok1016:                                      ; preds = %checkok1004
  %ptroffset1017 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext994, !dbg !2309
  %384 = load i32, ptr %ptroffset1017, align 4, !dbg !2309
  %385 = load i32, ptr %p10, align 4, !dbg !2309
  %zero1018 = icmp eq i32 %385, 0, !dbg !2309
  %386 = call i1 @llvm.expect.i1(i1 %zero1018, i1 false), !dbg !2309
  br i1 %386, label %panic1019, label %checkok1023, !dbg !2309

checkok1023:                                      ; preds = %checkok1016
  %sdiv = sdiv i32 %384, %385, !dbg !2309
  %387 = load i32, ptr %carry, align 4, !dbg !2309
  %add1024 = add i32 %sdiv, %387, !dbg !2309
  store i32 %add1024, ptr %ptroffset993, align 4, !dbg !2309
  %388 = load i32, ptr %p10, align 4, !dbg !2310
  %zero1025 = icmp eq i32 %388, 0, !dbg !2310
  %389 = call i1 @llvm.expect.i1(i1 %zero1025, i1 false), !dbg !2310
  br i1 %389, label %panic1026, label %checkok1030, !dbg !2310

checkok1030:                                      ; preds = %checkok1023
  %sdiv1031 = sdiv i32 1000000000, %388, !dbg !2310
  %390 = load i32, ptr %tmp, align 4, !dbg !2310
  %mul1032 = mul i32 %sdiv1031, %390, !dbg !2310
  store i32 %mul1032, ptr %carry, align 4, !dbg !2310
  %391 = load i32, ptr %k, align 4, !dbg !2311
  %392 = load i32, ptr %a, align 4, !dbg !2311
  %eq1033 = icmp eq i32 %391, %392, !dbg !2311
  br i1 %eq1033, label %and.rhs1034, label %and.phi1060, !dbg !2311

and.rhs1034:                                      ; preds = %checkok1030
  %393 = load i32, ptr %k, align 4, !dbg !2311
  %sext1035 = sext i32 %393 to i64, !dbg !2311
  %lt1036 = icmp slt i64 %sext1035, 0, !dbg !2311
  %394 = call i1 @llvm.expect.i1(i1 %lt1036, i1 false), !dbg !2311
  br i1 %394, label %panic1037, label %checkok1045, !dbg !2311

checkok1045:                                      ; preds = %and.rhs1034
  %ge1046 = icmp sge i64 %sext1035, 128, !dbg !2311
  %395 = call i1 @llvm.expect.i1(i1 %ge1046, i1 false), !dbg !2311
  br i1 %395, label %panic1047, label %checkok1057, !dbg !2311

checkok1057:                                      ; preds = %checkok1045
  %ptroffset1058 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1035, !dbg !2311
  %396 = load i32, ptr %ptroffset1058, align 4, !dbg !2311
  %i2nb1059 = icmp eq i32 %396, 0, !dbg !2311
  br label %and.phi1060, !dbg !2311

and.phi1060:                                      ; preds = %checkok1057, %checkok1030
  %val1061 = phi i1 [ false, %checkok1030 ], [ %i2nb1059, %checkok1057 ], !dbg !2311
  br i1 %val1061, label %if.then1062, label %if.exit1066, !dbg !2311

if.then1062:                                      ; preds = %and.phi1060
  %397 = load i32, ptr %a, align 4, !dbg !2312
  %add1063 = add i32 %397, 1, !dbg !2312
  %and1064 = and i32 %add1063, 127, !dbg !2312
  store i32 %and1064, ptr %a, align 4, !dbg !2312
  %398 = load i64, ptr %rp800, align 8, !dbg !2314
  %sub1065 = sub i64 %398, 9, !dbg !2314
  store i64 %sub1065, ptr %rp800, align 8, !dbg !2314
  br label %if.exit1066, !dbg !2314

if.exit1066:                                      ; preds = %if.then1062, %and.phi1060
  %399 = load i32, ptr %k, align 4, !dbg !2304
  %add1067 = add i32 %399, 1, !dbg !2304
  store i32 %add1067, ptr %k, align 4, !dbg !2304
  br label %loop.cond936, !dbg !2304

loop.exit1068:                                    ; preds = %loop.cond936
  %400 = load i32, ptr %carry, align 4, !dbg !2315
  %i2b1069 = icmp ne i32 %400, 0, !dbg !2315
  br i1 %i2b1069, label %if.then1070, label %if.exit1096, !dbg !2315

if.then1070:                                      ; preds = %loop.exit1068
  %401 = load i32, ptr %z, align 4, !dbg !2315
  %add1071 = add i32 %401, 1, !dbg !2315
  store i32 %add1071, ptr %z, align 4, !dbg !2315
  %sext1072 = sext i32 %401 to i64, !dbg !2315
  %lt1073 = icmp slt i64 %sext1072, 0, !dbg !2315
  %402 = call i1 @llvm.expect.i1(i1 %lt1073, i1 false), !dbg !2315
  br i1 %402, label %panic1074, label %checkok1082, !dbg !2315

checkok1082:                                      ; preds = %if.then1070
  %ge1083 = icmp sge i64 %sext1072, 128, !dbg !2315
  %403 = call i1 @llvm.expect.i1(i1 %ge1083, i1 false), !dbg !2315
  br i1 %403, label %panic1084, label %checkok1094, !dbg !2315

checkok1094:                                      ; preds = %checkok1082
  %ptroffset1095 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1072, !dbg !2315
  %404 = load i32, ptr %carry, align 4, !dbg !2315
  store i32 %404, ptr %ptroffset1095, align 4, !dbg !2315
  br label %if.exit1096, !dbg !2315

if.exit1096:                                      ; preds = %checkok1094, %loop.exit1068
  %405 = load i64, ptr %rp800, align 8, !dbg !2316
  %406 = load i64, ptr %rpm9, align 8, !dbg !2316
  %sub1097 = sub i64 9, %406, !dbg !2316
  %add1098 = add i64 %405, %sub1097, !dbg !2316
  store i64 %add1098, ptr %rp800, align 8, !dbg !2316
  br label %if.exit1099, !dbg !2316

if.exit1099:                                      ; preds = %if.exit1096, %if.exit904
  br label %loop.cond1100, !dbg !2317

loop.cond1100:                                    ; preds = %if.exit1353, %if.exit1099
  %407 = load i64, ptr %rp800, align 8, !dbg !2318
  %lt1101 = icmp slt i64 %407, 18, !dbg !2318
  br i1 %lt1101, label %or.phi1132, label %or.rhs1102, !dbg !2318

or.rhs1102:                                       ; preds = %loop.cond1100
  %408 = load i64, ptr %rp800, align 8, !dbg !2318
  %eq1103 = icmp eq i64 %408, 18, !dbg !2318
  br i1 %eq1103, label %and.rhs1104, label %and.phi1130, !dbg !2318

and.rhs1104:                                      ; preds = %or.rhs1102
  %409 = load i32, ptr %a, align 4, !dbg !2318
  %sext1105 = sext i32 %409 to i64, !dbg !2318
  %lt1106 = icmp slt i64 %sext1105, 0, !dbg !2318
  %410 = call i1 @llvm.expect.i1(i1 %lt1106, i1 false), !dbg !2318
  br i1 %410, label %panic1107, label %checkok1115, !dbg !2318

checkok1115:                                      ; preds = %and.rhs1104
  %ge1116 = icmp sge i64 %sext1105, 128, !dbg !2318
  %411 = call i1 @llvm.expect.i1(i1 %ge1116, i1 false), !dbg !2318
  br i1 %411, label %panic1117, label %checkok1127, !dbg !2318

checkok1127:                                      ; preds = %checkok1115
  %ptroffset1128 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1105, !dbg !2318
  %412 = load i32, ptr %ptroffset1128, align 4, !dbg !2318
  %lt1129 = icmp ult i32 %412, 9007199, !dbg !2318
  br label %and.phi1130, !dbg !2318

and.phi1130:                                      ; preds = %checkok1127, %or.rhs1102
  %val1131 = phi i1 [ false, %or.rhs1102 ], [ %lt1129, %checkok1127 ], !dbg !2318
  br label %or.phi1132, !dbg !2318

or.phi1132:                                       ; preds = %and.phi1130, %loop.cond1100
  %val1133 = phi i1 [ true, %loop.cond1100 ], [ %val1131, %and.phi1130 ], !dbg !2318
  br i1 %val1133, label %loop.body1134, label %loop.exit1354, !dbg !2318

loop.body1134:                                    ; preds = %or.phi1132
    #dbg_declare(ptr %carry1135, !2320, !DIExpression(), !2322)
  store i32 0, ptr %carry1135, align 4, !dbg !2322
  %413 = load i32, ptr %e2799, align 4, !dbg !2323
  %sub1136 = sub i32 %413, 29, !dbg !2323
  store i32 %sub1136, ptr %e2799, align 4, !dbg !2323
  %414 = load i32, ptr %z, align 4, !dbg !2324
  %sub1137 = sub i32 %414, 1, !dbg !2324
  %and1138 = and i32 %sub1137, 127, !dbg !2324
  store i32 %and1138, ptr %k, align 4, !dbg !2324
  br label %loop.body1139, !dbg !2324

loop.body1139:                                    ; preds = %if.exit1264, %loop.body1134
    #dbg_declare(ptr %tmp1140, !2326, !DIExpression(), !2328)
  %415 = load i32, ptr %k, align 4, !dbg !2328
  %sext1141 = sext i32 %415 to i64, !dbg !2328
  %lt1142 = icmp slt i64 %sext1141, 0, !dbg !2328
  %416 = call i1 @llvm.expect.i1(i1 %lt1142, i1 false), !dbg !2328
  br i1 %416, label %panic1143, label %checkok1151, !dbg !2328

checkok1151:                                      ; preds = %loop.body1139
  %ge1152 = icmp sge i64 %sext1141, 128, !dbg !2328
  %417 = call i1 @llvm.expect.i1(i1 %ge1152, i1 false), !dbg !2328
  br i1 %417, label %panic1153, label %checkok1163, !dbg !2328

checkok1163:                                      ; preds = %checkok1151
  %ptroffset1164 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1141, !dbg !2328
  %418 = load i32, ptr %ptroffset1164, align 4, !dbg !2328
  %zext1165 = zext i32 %418 to i64, !dbg !2328
  %shl = shl i64 %zext1165, 29, !dbg !2328
  %419 = freeze i64 %shl, !dbg !2328
  %420 = load i32, ptr %carry1135, align 4, !dbg !2328
  %zext1166 = zext i32 %420 to i64, !dbg !2328
  %add1167 = add i64 %419, %zext1166, !dbg !2328
  store i64 %add1167, ptr %tmp1140, align 8, !dbg !2328
  %421 = load i64, ptr %tmp1140, align 8, !dbg !2329
  %lt1168 = icmp ult i64 1000000000, %421, !dbg !2329
  br i1 %lt1168, label %if.then1169, label %if.else1198, !dbg !2329

if.then1169:                                      ; preds = %checkok1163
  %422 = load i64, ptr %tmp1140, align 8, !dbg !2330
  %sdiv1170 = sdiv i64 %422, 1000000000, !dbg !2330
  %trunc1171 = trunc i64 %sdiv1170 to i32, !dbg !2330
  store i32 %trunc1171, ptr %carry1135, align 4, !dbg !2330
  %423 = load i32, ptr %k, align 4, !dbg !2332
  %sext1172 = sext i32 %423 to i64, !dbg !2332
  %lt1173 = icmp slt i64 %sext1172, 0, !dbg !2332
  %424 = call i1 @llvm.expect.i1(i1 %lt1173, i1 false), !dbg !2332
  br i1 %424, label %panic1174, label %checkok1182, !dbg !2332

checkok1182:                                      ; preds = %if.then1169
  %ge1183 = icmp sge i64 %sext1172, 128, !dbg !2332
  %425 = call i1 @llvm.expect.i1(i1 %ge1183, i1 false), !dbg !2332
  br i1 %425, label %panic1184, label %checkok1194, !dbg !2332

checkok1194:                                      ; preds = %checkok1182
  %ptroffset1195 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1172, !dbg !2332
  %426 = load i64, ptr %tmp1140, align 8, !dbg !2332
  %smod1196 = srem i64 %426, 1000000000, !dbg !2332
  %trunc1197 = trunc i64 %smod1196 to i32, !dbg !2332
  store i32 %trunc1197, ptr %ptroffset1195, align 4, !dbg !2332
  br label %if.exit1224, !dbg !2332

if.else1198:                                      ; preds = %checkok1163
  store i32 0, ptr %carry1135, align 4, !dbg !2333
  %427 = load i32, ptr %k, align 4, !dbg !2335
  %sext1199 = sext i32 %427 to i64, !dbg !2335
  %lt1200 = icmp slt i64 %sext1199, 0, !dbg !2335
  %428 = call i1 @llvm.expect.i1(i1 %lt1200, i1 false), !dbg !2335
  br i1 %428, label %panic1201, label %checkok1209, !dbg !2335

checkok1209:                                      ; preds = %if.else1198
  %ge1210 = icmp sge i64 %sext1199, 128, !dbg !2335
  %429 = call i1 @llvm.expect.i1(i1 %ge1210, i1 false), !dbg !2335
  br i1 %429, label %panic1211, label %checkok1221, !dbg !2335

checkok1221:                                      ; preds = %checkok1209
  %ptroffset1222 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1199, !dbg !2335
  %430 = load i64, ptr %tmp1140, align 8, !dbg !2335
  %trunc1223 = trunc i64 %430 to i32, !dbg !2335
  store i32 %trunc1223, ptr %ptroffset1222, align 4, !dbg !2335
  br label %if.exit1224, !dbg !2335

if.exit1224:                                      ; preds = %checkok1221, %checkok1194
  %431 = load i32, ptr %k, align 4, !dbg !2336
  %432 = load i32, ptr %z, align 4, !dbg !2336
  %sub1225 = sub i32 %432, 1, !dbg !2336
  %and1226 = and i32 %sub1225, 127, !dbg !2336
  %eq1227 = icmp eq i32 %431, %and1226, !dbg !2336
  br i1 %eq1227, label %and.rhs1228, label %and.phi1230, !dbg !2336

and.rhs1228:                                      ; preds = %if.exit1224
  %433 = load i32, ptr %k, align 4, !dbg !2336
  %434 = load i32, ptr %a, align 4, !dbg !2336
  %neq1229 = icmp ne i32 %433, %434, !dbg !2336
  br label %and.phi1230, !dbg !2336

and.phi1230:                                      ; preds = %and.rhs1228, %if.exit1224
  %val1231 = phi i1 [ false, %if.exit1224 ], [ %neq1229, %and.rhs1228 ], !dbg !2336
  br i1 %val1231, label %and.rhs1232, label %and.phi1258, !dbg !2336

and.rhs1232:                                      ; preds = %and.phi1230
  %435 = load i32, ptr %k, align 4, !dbg !2336
  %sext1233 = sext i32 %435 to i64, !dbg !2336
  %lt1234 = icmp slt i64 %sext1233, 0, !dbg !2336
  %436 = call i1 @llvm.expect.i1(i1 %lt1234, i1 false), !dbg !2336
  br i1 %436, label %panic1235, label %checkok1243, !dbg !2336

checkok1243:                                      ; preds = %and.rhs1232
  %ge1244 = icmp sge i64 %sext1233, 128, !dbg !2336
  %437 = call i1 @llvm.expect.i1(i1 %ge1244, i1 false), !dbg !2336
  br i1 %437, label %panic1245, label %checkok1255, !dbg !2336

checkok1255:                                      ; preds = %checkok1243
  %ptroffset1256 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1233, !dbg !2336
  %438 = load i32, ptr %ptroffset1256, align 4, !dbg !2336
  %i2nb1257 = icmp eq i32 %438, 0, !dbg !2336
  br label %and.phi1258, !dbg !2336

and.phi1258:                                      ; preds = %checkok1255, %and.phi1230
  %val1259 = phi i1 [ false, %and.phi1230 ], [ %i2nb1257, %checkok1255 ], !dbg !2336
  br i1 %val1259, label %if.then1260, label %if.exit1261, !dbg !2336

if.then1260:                                      ; preds = %and.phi1258
  %439 = load i32, ptr %k, align 4, !dbg !2336
  store i32 %439, ptr %z, align 4, !dbg !2336
  br label %if.exit1261, !dbg !2336

if.exit1261:                                      ; preds = %if.then1260, %and.phi1258
  %440 = load i32, ptr %k, align 4, !dbg !2337
  %441 = load i32, ptr %a, align 4, !dbg !2337
  %eq1262 = icmp eq i32 %440, %441, !dbg !2337
  br i1 %eq1262, label %if.then1263, label %if.exit1264, !dbg !2337

if.then1263:                                      ; preds = %if.exit1261
  br label %loop.exit1267, !dbg !2337

if.exit1264:                                      ; preds = %if.exit1261
  %442 = load i32, ptr %k, align 4, !dbg !2324
  %sub1265 = sub i32 %442, 1, !dbg !2324
  %and1266 = and i32 %sub1265, 127, !dbg !2324
  store i32 %and1266, ptr %k, align 4, !dbg !2324
  br label %loop.body1139, !dbg !2324

loop.exit1267:                                    ; preds = %if.then1263
  %443 = load i32, ptr %carry1135, align 4, !dbg !2338
  %i2b1268 = icmp ne i32 %443, 0, !dbg !2338
  br i1 %i2b1268, label %if.then1269, label %if.exit1353, !dbg !2338

if.then1269:                                      ; preds = %loop.exit1267
  %444 = load i64, ptr %rp800, align 8, !dbg !2339
  %add1270 = add i64 %444, 9, !dbg !2339
  store i64 %add1270, ptr %rp800, align 8, !dbg !2339
  %445 = load i32, ptr %a, align 4, !dbg !2341
  %sub1271 = sub i32 %445, 1, !dbg !2341
  %and1272 = and i32 %sub1271, 127, !dbg !2341
  store i32 %and1272, ptr %a, align 4, !dbg !2341
  %446 = load i32, ptr %a, align 4, !dbg !2342
  %447 = load i32, ptr %z, align 4, !dbg !2342
  %eq1273 = icmp eq i32 %446, %447, !dbg !2342
  br i1 %eq1273, label %if.then1274, label %if.exit1328, !dbg !2342

if.then1274:                                      ; preds = %if.then1269
  %448 = load i32, ptr %z, align 4, !dbg !2343
  %sub1275 = sub i32 %448, 1, !dbg !2343
  %and1276 = and i32 %sub1275, 127, !dbg !2343
  store i32 %and1276, ptr %z, align 4, !dbg !2343
  %449 = load i32, ptr %z, align 4, !dbg !2345
  %sub1277 = sub i32 %449, 1, !dbg !2345
  %and1278 = and i32 %sub1277, 127, !dbg !2345
  %sext1279 = sext i32 %and1278 to i64, !dbg !2345
  %lt1280 = icmp slt i64 %sext1279, 0, !dbg !2345
  %450 = call i1 @llvm.expect.i1(i1 %lt1280, i1 false), !dbg !2345
  br i1 %450, label %panic1281, label %checkok1289, !dbg !2345

checkok1289:                                      ; preds = %if.then1274
  %ge1290 = icmp sge i64 %sext1279, 128, !dbg !2345
  %451 = call i1 @llvm.expect.i1(i1 %ge1290, i1 false), !dbg !2345
  br i1 %451, label %panic1291, label %checkok1301, !dbg !2345

checkok1301:                                      ; preds = %checkok1289
  %ptroffset1302 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1279, !dbg !2345
  %452 = load i32, ptr %ptroffset1302, align 4, !dbg !2345
  %453 = load i32, ptr %z, align 4, !dbg !2345
  %sext1303 = sext i32 %453 to i64, !dbg !2345
  %lt1304 = icmp slt i64 %sext1303, 0, !dbg !2345
  %454 = call i1 @llvm.expect.i1(i1 %lt1304, i1 false), !dbg !2345
  br i1 %454, label %panic1305, label %checkok1313, !dbg !2345

checkok1313:                                      ; preds = %checkok1301
  %ge1314 = icmp sge i64 %sext1303, 128, !dbg !2345
  %455 = call i1 @llvm.expect.i1(i1 %ge1314, i1 false), !dbg !2345
  br i1 %455, label %panic1315, label %checkok1325, !dbg !2345

checkok1325:                                      ; preds = %checkok1313
  %ptroffset1326 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1303, !dbg !2345
  %456 = load i32, ptr %ptroffset1326, align 4, !dbg !2345
  %or1327 = or i32 %452, %456, !dbg !2345
  store i32 %or1327, ptr %ptroffset1302, align 4, !dbg !2345
  br label %if.exit1328, !dbg !2345

if.exit1328:                                      ; preds = %checkok1325, %if.then1269
  %457 = load i32, ptr %a, align 4, !dbg !2346
  %sext1329 = sext i32 %457 to i64, !dbg !2346
  %lt1330 = icmp slt i64 %sext1329, 0, !dbg !2346
  %458 = call i1 @llvm.expect.i1(i1 %lt1330, i1 false), !dbg !2346
  br i1 %458, label %panic1331, label %checkok1339, !dbg !2346

checkok1339:                                      ; preds = %if.exit1328
  %ge1340 = icmp sge i64 %sext1329, 128, !dbg !2346
  %459 = call i1 @llvm.expect.i1(i1 %ge1340, i1 false), !dbg !2346
  br i1 %459, label %panic1341, label %checkok1351, !dbg !2346

checkok1351:                                      ; preds = %checkok1339
  %ptroffset1352 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1329, !dbg !2346
  %460 = load i32, ptr %carry1135, align 4, !dbg !2346
  store i32 %460, ptr %ptroffset1352, align 4, !dbg !2346
  br label %if.exit1353, !dbg !2346

if.exit1353:                                      ; preds = %checkok1351, %loop.exit1267
  br label %loop.cond1100, !dbg !2346

loop.exit1354:                                    ; preds = %or.phi1132
  br label %loop.body1355, !dbg !2347

loop.body1355:                                    ; preds = %if.exit1713, %loop.exit1354
    #dbg_declare(ptr %carry1356, !2348, !DIExpression(), !2351)
  store i32 0, ptr %carry1356, align 4, !dbg !2351
    #dbg_declare(ptr %sh, !2352, !DIExpression(), !2353)
  store i32 1, ptr %sh, align 4, !dbg !2353
    #dbg_declare(ptr %i, !2354, !DIExpression(), !2355)
  store i32 0, ptr %i, align 4, !dbg !2355
  store i32 0, ptr %i, align 4, !dbg !2356
  br label %loop.cond1357, !dbg !2356

loop.cond1357:                                    ; preds = %if.exit1469, %loop.body1355
  %461 = load i32, ptr %i, align 4, !dbg !2356
  %lt1358 = icmp slt i32 %461, 2, !dbg !2356
  br i1 %lt1358, label %loop.body1359, label %loop.exit1471, !dbg !2356

loop.body1359:                                    ; preds = %loop.cond1357
  %462 = load i32, ptr %a, align 4, !dbg !2358
  %463 = load i32, ptr %i, align 4, !dbg !2358
  %add1360 = add i32 %462, %463, !dbg !2358
  %and1361 = and i32 %add1360, 127, !dbg !2358
  store i32 %and1361, ptr %k, align 4, !dbg !2358
  %464 = load i32, ptr %k, align 4, !dbg !2360
  %465 = load i32, ptr %z, align 4, !dbg !2360
  %eq1362 = icmp eq i32 %464, %465, !dbg !2360
  br i1 %eq1362, label %or.phi1413, label %or.rhs1363, !dbg !2360

or.rhs1363:                                       ; preds = %loop.body1359
  %466 = load i32, ptr %k, align 4, !dbg !2360
  %sext1364 = sext i32 %466 to i64, !dbg !2360
  %lt1365 = icmp slt i64 %sext1364, 0, !dbg !2360
  %467 = call i1 @llvm.expect.i1(i1 %lt1365, i1 false), !dbg !2360
  br i1 %467, label %panic1366, label %checkok1374, !dbg !2360

checkok1374:                                      ; preds = %or.rhs1363
  %ge1375 = icmp sge i64 %sext1364, 128, !dbg !2360
  %468 = call i1 @llvm.expect.i1(i1 %ge1375, i1 false), !dbg !2360
  br i1 %468, label %panic1376, label %checkok1386, !dbg !2360

checkok1386:                                      ; preds = %checkok1374
  %ptroffset1387 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1364, !dbg !2360
  %469 = load i32, ptr %ptroffset1387, align 4, !dbg !2360
  %470 = load i32, ptr %i, align 4, !dbg !2360
  %sext1388 = sext i32 %470 to i64, !dbg !2360
  %lt1389 = icmp slt i64 %sext1388, 0, !dbg !2360
  %471 = call i1 @llvm.expect.i1(i1 %lt1389, i1 false), !dbg !2360
  br i1 %471, label %panic1390, label %checkok1398, !dbg !2360

checkok1398:                                      ; preds = %checkok1386
  %ge1399 = icmp sge i64 %sext1388, 2, !dbg !2360
  %472 = call i1 @llvm.expect.i1(i1 %ge1399, i1 false), !dbg !2360
  br i1 %472, label %panic1400, label %checkok1410, !dbg !2360

checkok1410:                                      ; preds = %checkok1398
  %ptroffset1411 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1388, !dbg !2360
  %473 = load i32, ptr %ptroffset1411, align 4, !dbg !2360
  %lt1412 = icmp ult i32 %469, %473, !dbg !2360
  br label %or.phi1413, !dbg !2360

or.phi1413:                                       ; preds = %checkok1410, %loop.body1359
  %val1414 = phi i1 [ true, %loop.body1359 ], [ %lt1412, %checkok1410 ], !dbg !2360
  br i1 %val1414, label %if.then1415, label %if.exit1416, !dbg !2360

if.then1415:                                      ; preds = %or.phi1413
  store i32 2, ptr %i, align 4, !dbg !2361
  br label %loop.exit1471, !dbg !2363

if.exit1416:                                      ; preds = %or.phi1413
  %474 = load i32, ptr %a, align 4, !dbg !2364
  %475 = load i32, ptr %i, align 4, !dbg !2364
  %add1417 = add i32 %474, %475, !dbg !2364
  %and1418 = and i32 %add1417, 127, !dbg !2364
  %sext1419 = sext i32 %and1418 to i64, !dbg !2364
  %lt1420 = icmp slt i64 %sext1419, 0, !dbg !2364
  %476 = call i1 @llvm.expect.i1(i1 %lt1420, i1 false), !dbg !2364
  br i1 %476, label %panic1421, label %checkok1429, !dbg !2364

checkok1429:                                      ; preds = %if.exit1416
  %ge1430 = icmp sge i64 %sext1419, 128, !dbg !2364
  %477 = call i1 @llvm.expect.i1(i1 %ge1430, i1 false), !dbg !2364
  br i1 %477, label %panic1431, label %checkok1441, !dbg !2364

checkok1441:                                      ; preds = %checkok1429
  %ptroffset1442 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1419, !dbg !2364
  %478 = load i32, ptr %ptroffset1442, align 4, !dbg !2364
  %479 = load i32, ptr %i, align 4, !dbg !2364
  %sext1443 = sext i32 %479 to i64, !dbg !2364
  %lt1444 = icmp slt i64 %sext1443, 0, !dbg !2364
  %480 = call i1 @llvm.expect.i1(i1 %lt1444, i1 false), !dbg !2364
  br i1 %480, label %panic1445, label %checkok1453, !dbg !2364

checkok1453:                                      ; preds = %checkok1441
  %ge1454 = icmp sge i64 %sext1443, 2, !dbg !2364
  %481 = call i1 @llvm.expect.i1(i1 %ge1454, i1 false), !dbg !2364
  br i1 %481, label %panic1455, label %checkok1465, !dbg !2364

checkok1465:                                      ; preds = %checkok1453
  %ptroffset1466 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1443, !dbg !2364
  %482 = load i32, ptr %ptroffset1466, align 4, !dbg !2364
  %gt1467 = icmp ugt i32 %478, %482, !dbg !2364
  br i1 %gt1467, label %if.then1468, label %if.exit1469, !dbg !2364

if.then1468:                                      ; preds = %checkok1465
  br label %loop.exit1471, !dbg !2364

if.exit1469:                                      ; preds = %checkok1465
  %483 = load i32, ptr %i, align 4, !dbg !2356
  %add1470 = add i32 %483, 1, !dbg !2356
  store i32 %add1470, ptr %i, align 4, !dbg !2356
  br label %loop.cond1357, !dbg !2356

loop.exit1471:                                    ; preds = %if.then1468, %if.then1415, %loop.cond1357
  %484 = load i32, ptr %i, align 4, !dbg !2365
  %eq1472 = icmp eq i32 %484, 2, !dbg !2365
  br i1 %eq1472, label %and.rhs1473, label %and.phi1475, !dbg !2365

and.rhs1473:                                      ; preds = %loop.exit1471
  %485 = load i64, ptr %rp800, align 8, !dbg !2365
  %eq1474 = icmp eq i64 %485, 18, !dbg !2365
  br label %and.phi1475, !dbg !2365

and.phi1475:                                      ; preds = %and.rhs1473, %loop.exit1471
  %val1476 = phi i1 [ false, %loop.exit1471 ], [ %eq1474, %and.rhs1473 ], !dbg !2365
  br i1 %val1476, label %if.then1477, label %if.exit1478, !dbg !2365

if.then1477:                                      ; preds = %and.phi1475
  br label %loop.exit1714, !dbg !2365

if.exit1478:                                      ; preds = %and.phi1475
  %486 = load i64, ptr %rp800, align 8, !dbg !2366
  %gt1479 = icmp sgt i64 %486, 27, !dbg !2366
  br i1 %gt1479, label %if.then1480, label %if.exit1481, !dbg !2366

if.then1480:                                      ; preds = %if.exit1478
  store i32 9, ptr %sh, align 4, !dbg !2366
  br label %if.exit1481, !dbg !2366

if.exit1481:                                      ; preds = %if.then1480, %if.exit1478
  %487 = load i32, ptr %e2799, align 4, !dbg !2367
  %488 = load i32, ptr %sh, align 4, !dbg !2367
  %add1482 = add i32 %487, %488, !dbg !2367
  store i32 %add1482, ptr %e2799, align 4, !dbg !2367
  %489 = load i32, ptr %a, align 4, !dbg !2368
  store i32 %489, ptr %k, align 4, !dbg !2368
  br label %loop.cond1483, !dbg !2368

loop.cond1483:                                    ; preds = %if.exit1648, %if.exit1481
  %490 = load i32, ptr %k, align 4, !dbg !2368
  %491 = load i32, ptr %z, align 4, !dbg !2368
  %neq1484 = icmp ne i32 %490, %491, !dbg !2368
  br i1 %neq1484, label %loop.body1485, label %loop.exit1651, !dbg !2368

loop.body1485:                                    ; preds = %loop.cond1483
    #dbg_declare(ptr %tmp1486, !2370, !DIExpression(), !2372)
  %492 = load i32, ptr %k, align 4, !dbg !2372
  %sext1487 = sext i32 %492 to i64, !dbg !2372
  %lt1488 = icmp slt i64 %sext1487, 0, !dbg !2372
  %493 = call i1 @llvm.expect.i1(i1 %lt1488, i1 false), !dbg !2372
  br i1 %493, label %panic1489, label %checkok1497, !dbg !2372

checkok1497:                                      ; preds = %loop.body1485
  %ge1498 = icmp sge i64 %sext1487, 128, !dbg !2372
  %494 = call i1 @llvm.expect.i1(i1 %ge1498, i1 false), !dbg !2372
  br i1 %494, label %panic1499, label %checkok1509, !dbg !2372

checkok1509:                                      ; preds = %checkok1497
  %ptroffset1510 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1487, !dbg !2372
  %495 = load i32, ptr %ptroffset1510, align 4, !dbg !2372
  %496 = load i32, ptr %sh, align 4, !dbg !2372
  %shift_underflow = icmp slt i32 %496, 0, !dbg !2372
  %497 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2372
  br i1 %497, label %panic1511, label %checkok1519, !dbg !2372

checkok1519:                                      ; preds = %checkok1509
  %shift_exceeds1520 = icmp sge i32 %496, 32, !dbg !2372
  %498 = call i1 @llvm.expect.i1(i1 %shift_exceeds1520, i1 false), !dbg !2372
  br i1 %498, label %panic1521, label %checkok1529, !dbg !2372

checkok1529:                                      ; preds = %checkok1519
  %shl1530 = shl i32 1, %496, !dbg !2372
  %499 = freeze i32 %shl1530, !dbg !2372
  %sub1531 = sub i32 %499, 1, !dbg !2372
  %and1532 = and i32 %495, %sub1531, !dbg !2372
  store i32 %and1532, ptr %tmp1486, align 4, !dbg !2372
  %500 = load i32, ptr %k, align 4, !dbg !2373
  %sext1533 = sext i32 %500 to i64, !dbg !2373
  %lt1534 = icmp slt i64 %sext1533, 0, !dbg !2373
  %501 = call i1 @llvm.expect.i1(i1 %lt1534, i1 false), !dbg !2373
  br i1 %501, label %panic1535, label %checkok1543, !dbg !2373

checkok1543:                                      ; preds = %checkok1529
  %ge1544 = icmp sge i64 %sext1533, 128, !dbg !2373
  %502 = call i1 @llvm.expect.i1(i1 %ge1544, i1 false), !dbg !2373
  br i1 %502, label %panic1545, label %checkok1555, !dbg !2373

checkok1555:                                      ; preds = %checkok1543
  %ptroffset1556 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1533, !dbg !2373
  %503 = load i32, ptr %k, align 4, !dbg !2373
  %sext1557 = sext i32 %503 to i64, !dbg !2373
  %lt1558 = icmp slt i64 %sext1557, 0, !dbg !2373
  %504 = call i1 @llvm.expect.i1(i1 %lt1558, i1 false), !dbg !2373
  br i1 %504, label %panic1559, label %checkok1567, !dbg !2373

checkok1567:                                      ; preds = %checkok1555
  %ge1568 = icmp sge i64 %sext1557, 128, !dbg !2373
  %505 = call i1 @llvm.expect.i1(i1 %ge1568, i1 false), !dbg !2373
  br i1 %505, label %panic1569, label %checkok1579, !dbg !2373

checkok1579:                                      ; preds = %checkok1567
  %ptroffset1580 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1557, !dbg !2373
  %506 = load i32, ptr %ptroffset1580, align 4, !dbg !2373
  %507 = load i32, ptr %sh, align 4, !dbg !2373
  %shift_exceeds1581 = icmp uge i32 %507, 32, !dbg !2373
  %508 = call i1 @llvm.expect.i1(i1 %shift_exceeds1581, i1 false), !dbg !2373
  br i1 %508, label %panic1582, label %checkok1590, !dbg !2373

checkok1590:                                      ; preds = %checkok1579
  %lshr1591 = lshr i32 %506, %507, !dbg !2373
  %509 = freeze i32 %lshr1591, !dbg !2373
  %510 = load i32, ptr %carry1356, align 4, !dbg !2373
  %add1592 = add i32 %509, %510, !dbg !2373
  store i32 %add1592, ptr %ptroffset1556, align 4, !dbg !2373
  %511 = load i32, ptr %sh, align 4, !dbg !2374
  %shift_underflow1593 = icmp slt i32 %511, 0, !dbg !2374
  %512 = call i1 @llvm.expect.i1(i1 %shift_underflow1593, i1 false), !dbg !2374
  br i1 %512, label %panic1594, label %checkok1602, !dbg !2374

checkok1602:                                      ; preds = %checkok1590
  %shift_exceeds1603 = icmp sge i32 %511, 32, !dbg !2374
  %513 = call i1 @llvm.expect.i1(i1 %shift_exceeds1603, i1 false), !dbg !2374
  br i1 %513, label %panic1604, label %checkok1612, !dbg !2374

checkok1612:                                      ; preds = %checkok1602
  %ashr = ashr i32 1000000000, %511, !dbg !2374
  %514 = freeze i32 %ashr, !dbg !2374
  %515 = load i32, ptr %tmp1486, align 4, !dbg !2374
  %mul1613 = mul i32 %514, %515, !dbg !2374
  store i32 %mul1613, ptr %carry1356, align 4, !dbg !2374
  %516 = load i32, ptr %k, align 4, !dbg !2375
  %517 = load i32, ptr %a, align 4, !dbg !2375
  %eq1614 = icmp eq i32 %516, %517, !dbg !2375
  br i1 %eq1614, label %and.rhs1615, label %and.phi1641, !dbg !2375

and.rhs1615:                                      ; preds = %checkok1612
  %518 = load i32, ptr %k, align 4, !dbg !2375
  %sext1616 = sext i32 %518 to i64, !dbg !2375
  %lt1617 = icmp slt i64 %sext1616, 0, !dbg !2375
  %519 = call i1 @llvm.expect.i1(i1 %lt1617, i1 false), !dbg !2375
  br i1 %519, label %panic1618, label %checkok1626, !dbg !2375

checkok1626:                                      ; preds = %and.rhs1615
  %ge1627 = icmp sge i64 %sext1616, 128, !dbg !2375
  %520 = call i1 @llvm.expect.i1(i1 %ge1627, i1 false), !dbg !2375
  br i1 %520, label %panic1628, label %checkok1638, !dbg !2375

checkok1638:                                      ; preds = %checkok1626
  %ptroffset1639 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1616, !dbg !2375
  %521 = load i32, ptr %ptroffset1639, align 4, !dbg !2375
  %i2nb1640 = icmp eq i32 %521, 0, !dbg !2375
  br label %and.phi1641, !dbg !2375

and.phi1641:                                      ; preds = %checkok1638, %checkok1612
  %val1642 = phi i1 [ false, %checkok1612 ], [ %i2nb1640, %checkok1638 ], !dbg !2375
  br i1 %val1642, label %if.then1643, label %if.exit1648, !dbg !2375

if.then1643:                                      ; preds = %and.phi1641
  %522 = load i32, ptr %a, align 4, !dbg !2376
  %add1644 = add i32 %522, 1, !dbg !2376
  %and1645 = and i32 %add1644, 127, !dbg !2376
  store i32 %and1645, ptr %a, align 4, !dbg !2376
  %523 = load i32, ptr %i, align 4, !dbg !2378
  %sub1646 = sub i32 %523, 1, !dbg !2378
  store i32 %sub1646, ptr %i, align 4, !dbg !2378
  %524 = load i64, ptr %rp800, align 8, !dbg !2379
  %sub1647 = sub i64 %524, 9, !dbg !2379
  store i64 %sub1647, ptr %rp800, align 8, !dbg !2379
  br label %if.exit1648, !dbg !2379

if.exit1648:                                      ; preds = %if.then1643, %and.phi1641
  %525 = load i32, ptr %k, align 4, !dbg !2368
  %add1649 = add i32 %525, 1, !dbg !2368
  %and1650 = and i32 %add1649, 127, !dbg !2368
  store i32 %and1650, ptr %k, align 4, !dbg !2368
  br label %loop.cond1483, !dbg !2368

loop.exit1651:                                    ; preds = %loop.cond1483
  %526 = load i32, ptr %carry1356, align 4, !dbg !2380
  %i2b1652 = icmp ne i32 %526, 0, !dbg !2380
  br i1 %i2b1652, label %if.then1653, label %if.exit1713, !dbg !2380

if.then1653:                                      ; preds = %loop.exit1651
  %527 = load i32, ptr %z, align 4, !dbg !2381
  %add1654 = add i32 %527, 1, !dbg !2381
  %and1655 = and i32 %add1654, 127, !dbg !2381
  %528 = load i32, ptr %a, align 4, !dbg !2381
  %neq1656 = icmp ne i32 %and1655, %528, !dbg !2381
  br i1 %neq1656, label %if.then1657, label %if.else1684, !dbg !2381

if.then1657:                                      ; preds = %if.then1653
  %529 = load i32, ptr %z, align 4, !dbg !2383
  %sext1658 = sext i32 %529 to i64, !dbg !2383
  %lt1659 = icmp slt i64 %sext1658, 0, !dbg !2383
  %530 = call i1 @llvm.expect.i1(i1 %lt1659, i1 false), !dbg !2383
  br i1 %530, label %panic1660, label %checkok1668, !dbg !2383

checkok1668:                                      ; preds = %if.then1657
  %ge1669 = icmp sge i64 %sext1658, 128, !dbg !2383
  %531 = call i1 @llvm.expect.i1(i1 %ge1669, i1 false), !dbg !2383
  br i1 %531, label %panic1670, label %checkok1680, !dbg !2383

checkok1680:                                      ; preds = %checkok1668
  %ptroffset1681 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1658, !dbg !2383
  %532 = load i32, ptr %carry1356, align 4, !dbg !2383
  store i32 %532, ptr %ptroffset1681, align 4, !dbg !2383
  %533 = load i32, ptr %z, align 4, !dbg !2385
  %add1682 = add i32 %533, 1, !dbg !2385
  %and1683 = and i32 %add1682, 127, !dbg !2385
  store i32 %and1683, ptr %z, align 4, !dbg !2385
  br label %if.exit1712, !dbg !2385

if.else1684:                                      ; preds = %if.then1653
  %534 = load i32, ptr %z, align 4, !dbg !2386
  %sub1685 = sub i32 %534, 1, !dbg !2386
  %and1686 = and i32 %sub1685, 127, !dbg !2386
  %sext1687 = sext i32 %and1686 to i64, !dbg !2386
  %lt1688 = icmp slt i64 %sext1687, 0, !dbg !2386
  %535 = call i1 @llvm.expect.i1(i1 %lt1688, i1 false), !dbg !2386
  br i1 %535, label %panic1689, label %checkok1697, !dbg !2386

checkok1697:                                      ; preds = %if.else1684
  %ge1698 = icmp sge i64 %sext1687, 128, !dbg !2386
  %536 = call i1 @llvm.expect.i1(i1 %ge1698, i1 false), !dbg !2386
  br i1 %536, label %panic1699, label %checkok1709, !dbg !2386

checkok1709:                                      ; preds = %checkok1697
  %ptroffset1710 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1687, !dbg !2386
  %537 = load i32, ptr %ptroffset1710, align 4, !dbg !2386
  %or1711 = or i32 %537, 1, !dbg !2386
  store i32 %or1711, ptr %ptroffset1710, align 4, !dbg !2386
  br label %if.exit1712, !dbg !2386

if.exit1712:                                      ; preds = %checkok1709, %checkok1680
  br label %if.exit1713, !dbg !2386

if.exit1713:                                      ; preds = %if.exit1712, %loop.exit1651
  br label %loop.body1355, !dbg !2386

loop.exit1714:                                    ; preds = %if.then1477
    #dbg_declare(ptr %y1715, !2388, !DIExpression(), !2389)
  store double 0.000000e+00, ptr %y1715, align 8, !dbg !2389
    #dbg_declare(ptr %i1716, !2390, !DIExpression(), !2391)
  store i32 0, ptr %i1716, align 4, !dbg !2391
  store i32 0, ptr %i1716, align 4, !dbg !2392
  br label %loop.cond1717, !dbg !2392

loop.cond1717:                                    ; preds = %checkok1777, %loop.exit1714
  %538 = load i32, ptr %i1716, align 4, !dbg !2392
  %lt1718 = icmp slt i32 %538, 2, !dbg !2392
  br i1 %lt1718, label %loop.body1719, label %loop.exit1782, !dbg !2392

loop.body1719:                                    ; preds = %loop.cond1717
  %539 = load i32, ptr %a, align 4, !dbg !2394
  %540 = load i32, ptr %i1716, align 4, !dbg !2394
  %add1720 = add i32 %539, %540, !dbg !2394
  %and1721 = and i32 %add1720, 127, !dbg !2394
  %541 = load i32, ptr %z, align 4, !dbg !2394
  %eq1722 = icmp eq i32 %and1721, %541, !dbg !2394
  br i1 %eq1722, label %if.then1723, label %if.exit1751, !dbg !2394

if.then1723:                                      ; preds = %loop.body1719
  %542 = load i32, ptr %z, align 4, !dbg !2394
  %add1724 = add i32 %542, 1, !dbg !2394
  %and1725 = and i32 %add1724, 127, !dbg !2394
  store i32 %and1725, ptr %z, align 4, !dbg !2394
  %sub1726 = sub i32 %and1725, 1, !dbg !2394
  %sext1727 = sext i32 %sub1726 to i64, !dbg !2394
  %lt1728 = icmp slt i64 %sext1727, 0, !dbg !2394
  %543 = call i1 @llvm.expect.i1(i1 %lt1728, i1 false), !dbg !2394
  br i1 %543, label %panic1729, label %checkok1737, !dbg !2394

checkok1737:                                      ; preds = %if.then1723
  %ge1738 = icmp sge i64 %sext1727, 128, !dbg !2394
  %544 = call i1 @llvm.expect.i1(i1 %ge1738, i1 false), !dbg !2394
  br i1 %544, label %panic1739, label %checkok1749, !dbg !2394

checkok1749:                                      ; preds = %checkok1737
  %ptroffset1750 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1727, !dbg !2394
  store i32 0, ptr %ptroffset1750, align 4, !dbg !2394
  br label %if.exit1751, !dbg !2394

if.exit1751:                                      ; preds = %checkok1749, %loop.body1719
  %545 = load double, ptr %y1715, align 8, !dbg !2396
  %fmul1752 = fmul double 1.000000e+09, %545, !dbg !2396
  %546 = load i32, ptr %a, align 4, !dbg !2396
  %547 = load i32, ptr %i1716, align 4, !dbg !2396
  %add1753 = add i32 %546, %547, !dbg !2396
  %and1754 = and i32 %add1753, 127, !dbg !2396
  %sext1755 = sext i32 %and1754 to i64, !dbg !2396
  %lt1756 = icmp slt i64 %sext1755, 0, !dbg !2396
  %548 = call i1 @llvm.expect.i1(i1 %lt1756, i1 false), !dbg !2396
  br i1 %548, label %panic1757, label %checkok1765, !dbg !2396

checkok1765:                                      ; preds = %if.exit1751
  %ge1766 = icmp sge i64 %sext1755, 128, !dbg !2396
  %549 = call i1 @llvm.expect.i1(i1 %ge1766, i1 false), !dbg !2396
  br i1 %549, label %panic1767, label %checkok1777, !dbg !2396

checkok1777:                                      ; preds = %checkok1765
  %ptroffset1778 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1755, !dbg !2396
  %550 = load i32, ptr %ptroffset1778, align 4, !dbg !2396
  %uifp1779 = uitofp i32 %550 to double, !dbg !2396
  %fadd1780 = fadd double %fmul1752, %uifp1779, !dbg !2396
  store double %fadd1780, ptr %y1715, align 8, !dbg !2396
  %551 = load i32, ptr %i1716, align 4, !dbg !2392
  %add1781 = add i32 %551, 1, !dbg !2392
  store i32 %add1781, ptr %i1716, align 4, !dbg !2392
  br label %loop.cond1717, !dbg !2392

loop.exit1782:                                    ; preds = %loop.cond1717
  %552 = load double, ptr %y1715, align 8, !dbg !2397
  %553 = load i32, ptr %sign420, align 4, !dbg !2397
  %sifp1783 = sitofp i32 %553 to double, !dbg !2397
  %fmul1784 = fmul double %552, %sifp1783, !dbg !2397
  store double %fmul1784, ptr %y1715, align 8, !dbg !2397
    #dbg_declare(ptr %denormal, !2398, !DIExpression(), !2399)
  store i8 0, ptr %denormal, align 1, !dbg !2399
    #dbg_declare(ptr %bits1785, !2400, !DIExpression(), !2401)
  store i32 24, ptr %bits1785, align 4, !dbg !2401
  %554 = load i32, ptr %bits1785, align 4, !dbg !2402
  %555 = load i32, ptr %e2799, align 4, !dbg !2402
  %add1786 = add i32 53, %555, !dbg !2402
  %sub1787 = sub i32 %add1786, -149, !dbg !2402
  %lt1788 = icmp slt i32 %sub1787, %554, !dbg !2402
  %check1789 = icmp slt i32 %554, 0, !dbg !2402
  %siui-lt1790 = or i1 %check1789, %lt1788, !dbg !2402
  br i1 %siui-lt1790, label %if.then1791, label %if.exit1797, !dbg !2402

if.then1791:                                      ; preds = %loop.exit1782
  %556 = load i32, ptr %e2799, align 4, !dbg !2403
  %add1792 = add i32 53, %556, !dbg !2403
  %sub1793 = sub i32 %add1792, -149, !dbg !2403
  store i32 %sub1793, ptr %bits1785, align 4, !dbg !2403
  %557 = load i32, ptr %bits1785, align 4, !dbg !2405
  %gt1794 = icmp ugt i32 0, %557, !dbg !2405
  br i1 %gt1794, label %if.then1795, label %if.exit1796, !dbg !2405

if.then1795:                                      ; preds = %if.then1791
  store i32 0, ptr %bits1785, align 4, !dbg !2405
  br label %if.exit1796, !dbg !2405

if.exit1796:                                      ; preds = %if.then1795, %if.then1791
  store i8 1, ptr %denormal, align 1, !dbg !2406
  br label %if.exit1797, !dbg !2406

if.exit1797:                                      ; preds = %if.exit1796, %loop.exit1782
    #dbg_declare(ptr %bias1798, !2407, !DIExpression(), !2408)
  store double 0.000000e+00, ptr %bias1798, align 8, !dbg !2408
    #dbg_declare(ptr %frac, !2409, !DIExpression(), !2410)
  store double 0.000000e+00, ptr %frac, align 8, !dbg !2410
  %558 = load i32, ptr %bits1785, align 4, !dbg !2411
  %gt1799 = icmp ugt i32 53, %558, !dbg !2411
  br i1 %gt1799, label %if.then1800, label %if.exit1820, !dbg !2411

if.then1800:                                      ; preds = %if.exit1797
  store double 1.000000e+00, ptr %x1801, align 8
  %559 = load i32, ptr %bits1785, align 4, !dbg !2412
  %sub1802 = sub i32 106, %559, !dbg !2412
  %sub1803 = sub i32 %sub1802, 1, !dbg !2412
  store i32 %sub1803, ptr %n1804, align 4
  %560 = load double, ptr %x1801, align 8, !dbg !2414
  %561 = load i32, ptr %n1804, align 4, !dbg !2414
  %562 = call double @scalbn(double %560, i32 %561), !dbg !2414
  store double %562, ptr %mag1805, align 8
  %563 = load double, ptr %y1715, align 8
  store double %563, ptr %sgn1806, align 8
  %564 = load double, ptr %mag1805, align 8
  store double %564, ptr %x1807, align 8
  %565 = load double, ptr %sgn1806, align 8
  store double %565, ptr %y1808, align 8
  %566 = load double, ptr %x1807, align 8, !dbg !2416
  %567 = load double, ptr %sgn1806, align 8, !dbg !2418
  %568 = call double @llvm.copysign.f64(double %566, double %567), !dbg !2418
  store double %568, ptr %bias1798, align 8, !dbg !2418
  %569 = load double, ptr %y1715, align 8, !dbg !2420
  store double 1.000000e+00, ptr %x1809, align 8
  %570 = load i32, ptr %bits1785, align 4, !dbg !2420
  %sub1810 = sub i32 53, %570, !dbg !2420
  store i32 %sub1810, ptr %n1811, align 4
  %571 = load double, ptr %x1809, align 8, !dbg !2421
  %572 = load i32, ptr %n1811, align 4, !dbg !2421
  %573 = call double @scalbn(double %571, i32 %572), !dbg !2421
  %zero1812 = fcmp ueq double %573, 0.000000e+00, !dbg !2420
  %574 = call i1 @llvm.expect.i1(i1 %zero1812, i1 false), !dbg !2420
  br i1 %574, label %panic1813, label %checkok1817, !dbg !2420

checkok1817:                                      ; preds = %if.then1800
  %fmod = frem double %569, %573, !dbg !2420
  store double %fmod, ptr %frac, align 8, !dbg !2420
  %575 = load double, ptr %y1715, align 8, !dbg !2423
  %576 = load double, ptr %frac, align 8, !dbg !2423
  %fsub1818 = fsub double %575, %576, !dbg !2423
  store double %fsub1818, ptr %y1715, align 8, !dbg !2423
  %577 = load double, ptr %y1715, align 8, !dbg !2424
  %578 = load double, ptr %bias1798, align 8, !dbg !2424
  %fadd1819 = fadd double %577, %578, !dbg !2424
  store double %fadd1819, ptr %y1715, align 8, !dbg !2424
  br label %if.exit1820, !dbg !2424

if.exit1820:                                      ; preds = %checkok1817, %if.exit1797
  %579 = load i32, ptr %a, align 4, !dbg !2425
  %580 = load i32, ptr %i1716, align 4, !dbg !2425
  %add1821 = add i32 %579, %580, !dbg !2425
  %and1822 = and i32 %add1821, 127, !dbg !2425
  %581 = load i32, ptr %z, align 4, !dbg !2425
  %neq1823 = icmp ne i32 %and1822, %581, !dbg !2425
  br i1 %neq1823, label %if.then1824, label %if.exit1906, !dbg !2425

if.then1824:                                      ; preds = %if.exit1820
    #dbg_declare(ptr %t, !2426, !DIExpression(), !2428)
  %582 = load i32, ptr %a, align 4, !dbg !2428
  %583 = load i32, ptr %i1716, align 4, !dbg !2428
  %add1825 = add i32 %582, %583, !dbg !2428
  %and1826 = and i32 %add1825, 127, !dbg !2428
  %sext1827 = sext i32 %and1826 to i64, !dbg !2428
  %lt1828 = icmp slt i64 %sext1827, 0, !dbg !2428
  %584 = call i1 @llvm.expect.i1(i1 %lt1828, i1 false), !dbg !2428
  br i1 %584, label %panic1829, label %checkok1837, !dbg !2428

checkok1837:                                      ; preds = %if.then1824
  %ge1838 = icmp sge i64 %sext1827, 128, !dbg !2428
  %585 = call i1 @llvm.expect.i1(i1 %ge1838, i1 false), !dbg !2428
  br i1 %585, label %panic1839, label %checkok1849, !dbg !2428

checkok1849:                                      ; preds = %checkok1837
  %ptroffset1850 = getelementptr inbounds [4 x i8], ptr %x427, i64 %sext1827, !dbg !2428
  %586 = load i32, ptr %ptroffset1850, align 4, !dbg !2428
  store i32 %586, ptr %t, align 4, !dbg !2428
  store i8 1, ptr %switch1851, align 1
  br label %switch.entry1852

switch.entry1852:                                 ; preds = %checkok1849
  %587 = load i8, ptr %switch1851, align 1
  %588 = trunc i8 %587 to i1
  %589 = load i32, ptr %t, align 4, !dbg !2429
  %gt1853 = icmp ugt i32 500000000, %589, !dbg !2429
  br i1 %gt1853, label %and.rhs1854, label %and.phi1863, !dbg !2429

and.rhs1854:                                      ; preds = %switch.entry1852
  %590 = load i32, ptr %t, align 4, !dbg !2429
  %i2b1855 = icmp ne i32 %590, 0, !dbg !2429
  br i1 %i2b1855, label %or.phi1861, label %or.rhs1856, !dbg !2429

or.rhs1856:                                       ; preds = %and.rhs1854
  %591 = load i32, ptr %a, align 4, !dbg !2429
  %592 = load i32, ptr %i1716, align 4, !dbg !2429
  %add1857 = add i32 %591, %592, !dbg !2429
  %add1858 = add i32 %add1857, 1, !dbg !2429
  %and1859 = and i32 %add1858, 127, !dbg !2429
  %593 = load i32, ptr %z, align 4, !dbg !2429
  %neq1860 = icmp ne i32 %and1859, %593, !dbg !2429
  br label %or.phi1861, !dbg !2429

or.phi1861:                                       ; preds = %or.rhs1856, %and.rhs1854
  %val1862 = phi i1 [ true, %and.rhs1854 ], [ %neq1860, %or.rhs1856 ], !dbg !2429
  br label %and.phi1863, !dbg !2429

and.phi1863:                                      ; preds = %or.phi1861, %switch.entry1852
  %val1864 = phi i1 [ false, %switch.entry1852 ], [ %val1862, %or.phi1861 ], !dbg !2429
  %eq1865 = icmp eq i1 %val1864, %588, !dbg !2429
  br i1 %eq1865, label %switch.case1866, label %next_if1870, !dbg !2429

switch.case1866:                                  ; preds = %and.phi1863
  %594 = load double, ptr %frac, align 8, !dbg !2431
  %595 = load i32, ptr %sign420, align 4, !dbg !2431
  %sifp1867 = sitofp i32 %595 to double, !dbg !2431
  %fmul1868 = fmul double 2.500000e-01, %sifp1867, !dbg !2431
  %fadd1869 = fadd double %594, %fmul1868, !dbg !2431
  store double %fadd1869, ptr %frac, align 8, !dbg !2431
  br label %switch.exit1895, !dbg !2431

next_if1870:                                      ; preds = %and.phi1863
  %596 = load i32, ptr %t, align 4, !dbg !2433
  %lt1871 = icmp ult i32 500000000, %596, !dbg !2433
  %eq1872 = icmp eq i1 %lt1871, %588, !dbg !2433
  br i1 %eq1872, label %switch.case1873, label %next_if1877, !dbg !2433

switch.case1873:                                  ; preds = %next_if1870
  %597 = load double, ptr %frac, align 8, !dbg !2434
  %598 = load i32, ptr %sign420, align 4, !dbg !2434
  %sifp1874 = sitofp i32 %598 to double, !dbg !2434
  %fmul1875 = fmul double 7.500000e-01, %sifp1874, !dbg !2434
  %fadd1876 = fadd double %597, %fmul1875, !dbg !2434
  store double %fadd1876, ptr %frac, align 8, !dbg !2434
  br label %switch.exit1895, !dbg !2434

next_if1877:                                      ; preds = %next_if1870
  %599 = load i32, ptr %t, align 4, !dbg !2436
  %eq1878 = icmp eq i32 500000000, %599, !dbg !2436
  %eq1879 = icmp eq i1 %eq1878, %588, !dbg !2436
  br i1 %eq1879, label %switch.case1880, label %next_if1894, !dbg !2436

switch.case1880:                                  ; preds = %next_if1877
  %600 = load i32, ptr %a, align 4, !dbg !2437
  %601 = load i32, ptr %i1716, align 4, !dbg !2437
  %add1881 = add i32 %600, %601, !dbg !2437
  %add1882 = add i32 %add1881, 1, !dbg !2437
  %and1883 = and i32 %add1882, 127, !dbg !2437
  %602 = load i32, ptr %z, align 4, !dbg !2437
  %eq1884 = icmp eq i32 %and1883, %602, !dbg !2437
  br i1 %eq1884, label %if.then1885, label %if.else1889, !dbg !2437

if.then1885:                                      ; preds = %switch.case1880
  %603 = load double, ptr %frac, align 8, !dbg !2439
  %604 = load i32, ptr %sign420, align 4, !dbg !2439
  %sifp1886 = sitofp i32 %604 to double, !dbg !2439
  %fmul1887 = fmul double 5.000000e-01, %sifp1886, !dbg !2439
  %fadd1888 = fadd double %603, %fmul1887, !dbg !2439
  store double %fadd1888, ptr %frac, align 8, !dbg !2439
  br label %if.exit1893, !dbg !2439

if.else1889:                                      ; preds = %switch.case1880
  %605 = load double, ptr %frac, align 8, !dbg !2441
  %606 = load i32, ptr %sign420, align 4, !dbg !2441
  %sifp1890 = sitofp i32 %606 to double, !dbg !2441
  %fmul1891 = fmul double 7.500000e-01, %sifp1890, !dbg !2441
  %fadd1892 = fadd double %605, %fmul1891, !dbg !2441
  store double %fadd1892, ptr %frac, align 8, !dbg !2441
  br label %if.exit1893, !dbg !2441

if.exit1893:                                      ; preds = %if.else1889, %if.then1885
  br label %switch.exit1895, !dbg !2441

next_if1894:                                      ; preds = %next_if1877
  br label %switch.exit1895, !dbg !2441

switch.exit1895:                                  ; preds = %next_if1894, %if.exit1893, %switch.case1873, %switch.case1866
  %607 = load i32, ptr %bits1785, align 4, !dbg !2443
  %sub1896 = sub i32 53, %607, !dbg !2443
  %ge1897 = icmp sge i32 %sub1896, 2, !dbg !2443
  br i1 %ge1897, label %and.rhs1898, label %and.phi1902, !dbg !2443

and.rhs1898:                                      ; preds = %switch.exit1895
  %608 = load double, ptr %frac, align 8, !dbg !2443
  %fmod1899 = frem double %608, 1.000000e+00, !dbg !2443
  %fpbool1900 = fcmp une double %fmod1899, 0.000000e+00, !dbg !2443
  %not1901 = xor i1 %fpbool1900, true, !dbg !2443
  br label %and.phi1902, !dbg !2443

and.phi1902:                                      ; preds = %and.rhs1898, %switch.exit1895
  %val1903 = phi i1 [ false, %switch.exit1895 ], [ %not1901, %and.rhs1898 ], !dbg !2443
  br i1 %val1903, label %if.then1904, label %if.exit1905, !dbg !2443

if.then1904:                                      ; preds = %and.phi1902
  %609 = load double, ptr %frac, align 8, !dbg !2443
  %fincdec = fadd double %609, 1.000000e+00, !dbg !2443
  store double %fincdec, ptr %frac, align 8, !dbg !2443
  br label %if.exit1905, !dbg !2443

if.exit1905:                                      ; preds = %if.then1904, %and.phi1902
  br label %if.exit1906, !dbg !2443

if.exit1906:                                      ; preds = %if.exit1905, %if.exit1820
  %610 = load double, ptr %y1715, align 8, !dbg !2444
  %611 = load double, ptr %frac, align 8, !dbg !2444
  %fadd1907 = fadd double %610, %611, !dbg !2444
  store double %fadd1907, ptr %y1715, align 8, !dbg !2444
  %612 = load double, ptr %y1715, align 8, !dbg !2445
  %613 = load double, ptr %bias1798, align 8, !dbg !2445
  %fsub1908 = fsub double %612, %613, !dbg !2445
  store double %fsub1908, ptr %y1715, align 8, !dbg !2445
  %614 = load i32, ptr %e2799, align 4, !dbg !2446
  %add1909 = add i32 %614, 53, !dbg !2446
  %and1910 = and i32 %add1909, 2147483647, !dbg !2446
  %615 = load i32, ptr %emax, align 4, !dbg !2446
  %sub1911 = sub i32 %615, 5, !dbg !2446
  %gt1912 = icmp sgt i32 %and1910, %sub1911, !dbg !2446
  br i1 %gt1912, label %if.then1913, label %if.exit1941, !dbg !2446

if.then1913:                                      ; preds = %if.exit1906
  %616 = load double, ptr %y1715, align 8
  store double %616, ptr %x1914, align 8
  %617 = load double, ptr %x1914, align 8, !dbg !2447
  %618 = call double @llvm.fabs.f64(double %617), !dbg !2447
  %ge1915 = fcmp oge double %618, 0x4340000000000000, !dbg !2449
  br i1 %ge1915, label %if.then1916, label %if.exit1929, !dbg !2449

if.then1916:                                      ; preds = %if.then1913
  %619 = load i8, ptr %denormal, align 1, !dbg !2451
  %620 = trunc i8 %619 to i1, !dbg !2451
  br i1 %620, label %and.rhs1917, label %and.phi1923, !dbg !2451

and.rhs1917:                                      ; preds = %if.then1916
  %621 = load i32, ptr %bits1785, align 4, !dbg !2451
  %622 = load i32, ptr %e2799, align 4, !dbg !2451
  %add1918 = add i32 53, %622, !dbg !2451
  %sub1919 = sub i32 %add1918, -149, !dbg !2451
  %eq1920 = icmp eq i32 %sub1919, %621, !dbg !2451
  %check1921 = icmp sge i32 %sub1919, 0, !dbg !2451
  %siui-eq1922 = and i1 %check1921, %eq1920, !dbg !2451
  br label %and.phi1923, !dbg !2451

and.phi1923:                                      ; preds = %and.rhs1917, %if.then1916
  %val1924 = phi i1 [ false, %if.then1916 ], [ %siui-eq1922, %and.rhs1917 ], !dbg !2451
  br i1 %val1924, label %if.then1925, label %if.exit1926, !dbg !2451

if.then1925:                                      ; preds = %and.phi1923
  store i8 0, ptr %denormal, align 1, !dbg !2451
  br label %if.exit1926, !dbg !2451

if.exit1926:                                      ; preds = %if.then1925, %and.phi1923
  %623 = load double, ptr %y1715, align 8, !dbg !2453
  %fmul1927 = fmul double %623, 5.000000e-01, !dbg !2453
  store double %fmul1927, ptr %y1715, align 8, !dbg !2453
  %624 = load i32, ptr %e2799, align 4, !dbg !2454
  %add1928 = add i32 %624, 1, !dbg !2454
  store i32 %add1928, ptr %e2799, align 4, !dbg !2454
  br label %if.exit1929, !dbg !2454

if.exit1929:                                      ; preds = %if.exit1926, %if.then1913
  %625 = load i32, ptr %e2799, align 4, !dbg !2455
  %add1930 = add i32 %625, 53, !dbg !2455
  %626 = load i32, ptr %emax, align 4, !dbg !2455
  %gt1931 = icmp sgt i32 %add1930, %626, !dbg !2455
  br i1 %gt1931, label %or.phi1937, label %or.rhs1932, !dbg !2455

or.rhs1932:                                       ; preds = %if.exit1929
  %627 = load i8, ptr %denormal, align 1, !dbg !2455
  %628 = trunc i8 %627 to i1, !dbg !2455
  br i1 %628, label %and.rhs1933, label %and.phi1935, !dbg !2455

and.rhs1933:                                      ; preds = %or.rhs1932
  %629 = load double, ptr %frac, align 8, !dbg !2455
  %fpbool1934 = fcmp une double %629, 0.000000e+00, !dbg !2455
  br label %and.phi1935, !dbg !2455

and.phi1935:                                      ; preds = %and.rhs1933, %or.rhs1932
  %val1936 = phi i1 [ false, %or.rhs1932 ], [ %fpbool1934, %and.rhs1933 ], !dbg !2455
  br label %or.phi1937, !dbg !2455

or.phi1937:                                       ; preds = %and.phi1935, %if.exit1929
  %val1938 = phi i1 [ true, %if.exit1929 ], [ %val1936, %and.phi1935 ], !dbg !2455
  br i1 %val1938, label %if.then1939, label %if.exit1940, !dbg !2455

if.then1939:                                      ; preds = %or.phi1937
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2455
  br label %err_retblock, !dbg !2455

if.exit1940:                                      ; preds = %or.phi1937
  br label %if.exit1941, !dbg !2455

if.exit1941:                                      ; preds = %if.exit1940, %if.exit1906
  %630 = load double, ptr %y1715, align 8
  store double %630, ptr %x1942, align 8
  %631 = load i32, ptr %e2799, align 4
  store i32 %631, ptr %n1943, align 4
  %632 = load double, ptr %x1942, align 8, !dbg !2456
  %633 = load i32, ptr %n1943, align 4, !dbg !2456
  %634 = call double @scalbn(double %632, i32 %633), !dbg !2456
  store double %634, ptr %blockret421, align 8, !dbg !2456
  br label %expr_block.exit1945, !dbg !2456

expr_block.exit1945:                              ; preds = %if.exit1941, %checkok899, %checkok851, %if.then812, %if.then754, %if.then737, %if.exit487, %if.then475
  %635 = load double, ptr %blockret421, align 8, !dbg !2456
  %fpfptrunc1946 = fptrunc double %635 to float, !dbg !2456
  store float %fpfptrunc1946, ptr %blockret, align 4, !dbg !2456
  br label %expr_block.exit1947, !dbg !2456

expr_block.exit1947:                              ; preds = %expr_block.exit1945, %expr_block.exit417, %if.then91, %if.then64
  %636 = load float, ptr %blockret, align 4, !dbg !2456
  store float %636, ptr %0, align 4, !dbg !2456
  ret i64 0, !dbg !2456

err_retblock:                                     ; preds = %if.then1939, %if.then763, %if.then760, %if.then733, %guard_block728, %if.then695, %if.then686, %if.then553, %if.then486, %if.then411, %if.then356, %if.then353, %guard_block, %if.then301, %if.then244, %if.then174, %if.then
  %637 = load i64, ptr %reterr, align 8, !dbg !2456
  ret i64 %637, !dbg !2456

panic:                                            ; preds = %and.rhs
  store i64 %3, ptr %taddr, align 8
  %638 = insertvalue %any undef, ptr %taddr, 0
  %639 = insertvalue %any %638, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %640 = insertvalue %any undef, ptr %taddr2, 0
  %641 = insertvalue %any %640, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg4, align 8
  store %any %639, ptr %varargslots, align 16
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %641, ptr %ptradd5, align 16
  %642 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %642, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 468, ptr align 8 %indirectarg6), !dbg !2031
  unreachable, !dbg !2031

panic7:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr8, align 8
  %643 = insertvalue %any undef, ptr %taddr8, 0
  %644 = insertvalue %any %643, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr9, align 8
  %645 = insertvalue %any undef, ptr %taddr9, 0
  %646 = insertvalue %any %645, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg12, align 8
  store %any %644, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %646, ptr %ptradd14, align 16
  %647 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %647, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 468, ptr align 8 %indirectarg16), !dbg !2031
  unreachable, !dbg !2031

panic22:                                          ; preds = %if.exit
  store i64 %14, ptr %taddr23, align 8
  %648 = insertvalue %any undef, ptr %taddr23, 0
  %649 = insertvalue %any %648, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr24, align 8
  %650 = insertvalue %any undef, ptr %taddr24, 0
  %651 = insertvalue %any %650, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg27, align 8
  store %any %649, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %651, ptr %ptradd29, align 16
  %652 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %652, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 470, ptr align 8 %indirectarg31), !dbg !2034
  unreachable, !dbg !2034

panic35:                                          ; preds = %switch.case33
  store i64 %21, ptr %taddr36, align 8
  %653 = insertvalue %any undef, ptr %taddr36, 0
  %654 = insertvalue %any %653, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr37, align 8
  %655 = insertvalue %any undef, ptr %taddr37, 0
  %656 = insertvalue %any %655, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg40, align 8
  store %any %654, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %656, ptr %ptradd42, align 16
  %657 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %657, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 476, ptr align 8 %indirectarg44), !dbg !2039
  unreachable, !dbg !2039

panic98:                                          ; preds = %and.rhs95
  store i64 %55, ptr %taddr99, align 8
  %658 = insertvalue %any undef, ptr %taddr99, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr100, align 8
  %660 = insertvalue %any undef, ptr %taddr100, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg103, align 8
  store %any %659, ptr %varargslots104, align 16
  %ptradd105 = getelementptr inbounds i8, ptr %varargslots104, i64 16
  store %any %661, ptr %ptradd105, align 16
  %662 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp106" = insertvalue %"any[]" %662, i64 2, 1
  store %"any[]" %"$$temp106", ptr %indirectarg107, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 481, ptr align 8 %indirectarg107), !dbg !2043
  unreachable, !dbg !2043

panic115:                                         ; preds = %and.rhs112
  store i64 %59, ptr %taddr116, align 8
  %663 = insertvalue %any undef, ptr %taddr116, 0
  %664 = insertvalue %any %663, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr117, align 8
  %665 = insertvalue %any undef, ptr %taddr117, 0
  %666 = insertvalue %any %665, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg118, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg120, align 8
  store %any %664, ptr %varargslots121, align 16
  %ptradd122 = getelementptr inbounds i8, ptr %varargslots121, i64 16
  store %any %666, ptr %ptradd122, align 16
  %667 = insertvalue %"any[]" undef, ptr %varargslots121, 0
  %"$$temp123" = insertvalue %"any[]" %667, i64 2, 1
  store %"any[]" %"$$temp123", ptr %indirectarg124, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg118, ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, i32 481, ptr align 8 %indirectarg124), !dbg !2043
  unreachable, !dbg !2043

panic132:                                         ; preds = %if.then130
  store i64 %65, ptr %taddr133, align 8
  %668 = insertvalue %any undef, ptr %taddr133, 0
  %669 = insertvalue %any %668, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr134, align 8
  %670 = insertvalue %any undef, ptr %taddr134, 0
  %671 = insertvalue %any %670, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg135, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg136, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg137, align 8
  store %any %669, ptr %varargslots138, align 16
  %ptradd139 = getelementptr inbounds i8, ptr %varargslots138, i64 16
  store %any %671, ptr %ptradd139, align 16
  %672 = insertvalue %"any[]" undef, ptr %varargslots138, 0
  %"$$temp140" = insertvalue %"any[]" %672, i64 2, 1
  store %"any[]" %"$$temp140", ptr %indirectarg141, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg135, ptr align 8 %indirectarg136, ptr align 8 %indirectarg137, i32 483, ptr align 8 %indirectarg141), !dbg !2044
  unreachable, !dbg !2044

panic152:                                         ; preds = %loop.cond149
  store i64 %72, ptr %taddr153, align 8
  %673 = insertvalue %any undef, ptr %taddr153, 0
  %674 = insertvalue %any %673, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %74, ptr %taddr154, align 8
  %675 = insertvalue %any undef, ptr %taddr154, 0
  %676 = insertvalue %any %675, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg157, align 8
  store %any %674, ptr %varargslots158, align 16
  %ptradd159 = getelementptr inbounds i8, ptr %varargslots158, i64 16
  store %any %676, ptr %ptradd159, align 16
  %677 = insertvalue %"any[]" undef, ptr %varargslots158, 0
  %"$$temp160" = insertvalue %"any[]" %677, i64 2, 1
  store %"any[]" %"$$temp160", ptr %indirectarg161, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, i32 344, ptr align 8 %indirectarg161), !dbg !2072
  unreachable, !dbg !2072

panic183:                                         ; preds = %and.rhs179
  store i64 %88, ptr %taddr184, align 8
  %678 = insertvalue %any undef, ptr %taddr184, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add181, ptr %taddr185, align 8
  %680 = insertvalue %any undef, ptr %taddr185, 0
  %681 = insertvalue %any %680, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg186, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg188, align 8
  store %any %679, ptr %varargslots189, align 16
  %ptradd190 = getelementptr inbounds i8, ptr %varargslots189, i64 16
  store %any %681, ptr %ptradd190, align 16
  %682 = insertvalue %"any[]" undef, ptr %varargslots189, 0
  %"$$temp191" = insertvalue %"any[]" %682, i64 2, 1
  store %"any[]" %"$$temp191", ptr %indirectarg192, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg186, ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, i32 357, ptr align 8 %indirectarg192), !dbg !2084
  unreachable, !dbg !2084

panic206:                                         ; preds = %and.rhs202
  store i64 %96, ptr %taddr207, align 8
  %683 = insertvalue %any undef, ptr %taddr207, 0
  %684 = insertvalue %any %683, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add204, ptr %taddr208, align 8
  %685 = insertvalue %any undef, ptr %taddr208, 0
  %686 = insertvalue %any %685, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg209, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg210, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg211, align 8
  store %any %684, ptr %varargslots212, align 16
  %ptradd213 = getelementptr inbounds i8, ptr %varargslots212, i64 16
  store %any %686, ptr %ptradd213, align 16
  %687 = insertvalue %"any[]" undef, ptr %varargslots212, 0
  %"$$temp214" = insertvalue %"any[]" %687, i64 2, 1
  store %"any[]" %"$$temp214", ptr %indirectarg215, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg209, ptr align 8 %indirectarg210, ptr align 8 %indirectarg211, i32 361, ptr align 8 %indirectarg215), !dbg !2089
  unreachable, !dbg !2089

panic287:                                         ; preds = %if.exit283
  store i64 %130, ptr %taddr288, align 8
  %688 = insertvalue %any undef, ptr %taddr288, 0
  %689 = insertvalue %any %688, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add285, ptr %taddr289, align 8
  %690 = insertvalue %any undef, ptr %taddr289, 0
  %691 = insertvalue %any %690, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg290, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg291, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg292, align 8
  store %any %689, ptr %varargslots293, align 16
  %ptradd294 = getelementptr inbounds i8, ptr %varargslots293, i64 16
  store %any %691, ptr %ptradd294, align 16
  %692 = insertvalue %"any[]" undef, ptr %varargslots293, 0
  %"$$temp295" = insertvalue %"any[]" %692, i64 2, 1
  store %"any[]" %"$$temp295", ptr %indirectarg296, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg290, ptr align 8 %indirectarg291, ptr align 8 %indirectarg292, i32 397, ptr align 8 %indirectarg296), !dbg !2123
  unreachable, !dbg !2123

panic320:                                         ; preds = %if.then317
  store i64 %147, ptr %taddr321, align 8
  %693 = insertvalue %any undef, ptr %taddr321, 0
  %694 = insertvalue %any %693, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add318, ptr %taddr322, align 8
  %695 = insertvalue %any undef, ptr %taddr322, 0
  %696 = insertvalue %any %695, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg323, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg324, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg325, align 8
  store %any %694, ptr %varargslots326, align 16
  %ptradd327 = getelementptr inbounds i8, ptr %varargslots326, i64 16
  store %any %696, ptr %ptradd327, align 16
  %697 = insertvalue %"any[]" undef, ptr %varargslots326, 0
  %"$$temp328" = insertvalue %"any[]" %697, i64 2, 1
  store %"any[]" %"$$temp328", ptr %indirectarg329, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg323, ptr align 8 %indirectarg324, ptr align 8 %indirectarg325, i32 406, ptr align 8 %indirectarg329), !dbg !2134
  unreachable, !dbg !2134

panic331:                                         ; preds = %checkok330
  store i64 %add318, ptr %taddr332, align 8
  %698 = insertvalue %any undef, ptr %taddr332, 0
  %699 = insertvalue %any %698, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.77, i64 22 }, ptr %indirectarg333, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg334, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg335, align 8
  store %any %699, ptr %varargslots336, align 16
  %700 = insertvalue %"any[]" undef, ptr %varargslots336, 0
  %"$$temp337" = insertvalue %"any[]" %700, i64 1, 1
  store %"any[]" %"$$temp337", ptr %indirectarg338, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg333, ptr align 8 %indirectarg334, ptr align 8 %indirectarg335, i32 406, ptr align 8 %indirectarg338), !dbg !2134
  unreachable, !dbg !2134

panic432:                                         ; preds = %assert_ok
  store i64 %209, ptr %taddr433, align 8
  %701 = insertvalue %any undef, ptr %taddr433, 0
  %702 = insertvalue %any %701, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr434, align 8
  %703 = insertvalue %any undef, ptr %taddr434, 0
  %704 = insertvalue %any %703, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg435, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg436, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg437, align 8
  store %any %702, ptr %varargslots438, align 16
  %ptradd439 = getelementptr inbounds i8, ptr %varargslots438, i64 16
  store %any %704, ptr %ptradd439, align 16
  %705 = insertvalue %"any[]" undef, ptr %varargslots438, 0
  %"$$temp440" = insertvalue %"any[]" %705, i64 2, 1
  store %"any[]" %"$$temp440", ptr %indirectarg441, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg435, ptr align 8 %indirectarg436, ptr align 8 %indirectarg437, i32 45, ptr align 8 %indirectarg441), !dbg !2190
  unreachable, !dbg !2190

panic460:                                         ; preds = %loop.cond457
  store i64 %218, ptr %taddr461, align 8
  %706 = insertvalue %any undef, ptr %taddr461, 0
  %707 = insertvalue %any %706, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %220, ptr %taddr462, align 8
  %708 = insertvalue %any undef, ptr %taddr462, 0
  %709 = insertvalue %any %708, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg463, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg464, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg465, align 8
  store %any %707, ptr %varargslots466, align 16
  %ptradd467 = getelementptr inbounds i8, ptr %varargslots466, i64 16
  store %any %709, ptr %ptradd467, align 16
  %710 = insertvalue %"any[]" undef, ptr %varargslots466, 0
  %"$$temp468" = insertvalue %"any[]" %710, i64 2, 1
  store %"any[]" %"$$temp468", ptr %indirectarg469, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg463, ptr align 8 %indirectarg464, ptr align 8 %indirectarg465, i32 56, ptr align 8 %indirectarg469), !dbg !2208
  unreachable, !dbg !2208

panic496:                                         ; preds = %and.rhs492
  store i64 %235, ptr %taddr497, align 8
  %711 = insertvalue %any undef, ptr %taddr497, 0
  %712 = insertvalue %any %711, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add494, ptr %taddr498, align 8
  %713 = insertvalue %any undef, ptr %taddr498, 0
  %714 = insertvalue %any %713, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg499, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg500, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg501, align 8
  store %any %712, ptr %varargslots502, align 16
  %ptradd503 = getelementptr inbounds i8, ptr %varargslots502, i64 16
  store %any %714, ptr %ptradd503, align 16
  %715 = insertvalue %"any[]" undef, ptr %varargslots502, 0
  %"$$temp504" = insertvalue %"any[]" %715, i64 2, 1
  store %"any[]" %"$$temp504", ptr %indirectarg505, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg499, ptr align 8 %indirectarg500, ptr align 8 %indirectarg501, i32 70, ptr align 8 %indirectarg505), !dbg !2220
  unreachable, !dbg !2220

panic519:                                         ; preds = %and.rhs515
  store i64 %243, ptr %taddr520, align 8
  %716 = insertvalue %any undef, ptr %taddr520, 0
  %717 = insertvalue %any %716, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add517, ptr %taddr521, align 8
  %718 = insertvalue %any undef, ptr %taddr521, 0
  %719 = insertvalue %any %718, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg522, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg523, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg524, align 8
  store %any %717, ptr %varargslots525, align 16
  %ptradd526 = getelementptr inbounds i8, ptr %varargslots525, i64 16
  store %any %719, ptr %ptradd526, align 16
  %720 = insertvalue %"any[]" undef, ptr %varargslots525, 0
  %"$$temp527" = insertvalue %"any[]" %720, i64 2, 1
  store %"any[]" %"$$temp527", ptr %indirectarg528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg522, ptr align 8 %indirectarg523, ptr align 8 %indirectarg524, i32 74, ptr align 8 %indirectarg528), !dbg !2225
  unreachable, !dbg !2225

panic567:                                         ; preds = %if.then565
  store i64 %sext, ptr %taddr568, align 8
  %721 = insertvalue %any undef, ptr %taddr568, 0
  %722 = insertvalue %any %721, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg569, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg570, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg571, align 8
  store %any %722, ptr %varargslots572, align 16
  %723 = insertvalue %"any[]" undef, ptr %varargslots572, 0
  %"$$temp573" = insertvalue %"any[]" %723, i64 1, 1
  store %"any[]" %"$$temp573", ptr %indirectarg574, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg569, ptr align 8 %indirectarg570, ptr align 8 %indirectarg571, i32 94, ptr align 8 %indirectarg574), !dbg !2244
  unreachable, !dbg !2244

panic577:                                         ; preds = %checkok575
  store i64 128, ptr %taddr578, align 8
  %724 = insertvalue %any undef, ptr %taddr578, 0
  %725 = insertvalue %any %724, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr579, align 8
  %726 = insertvalue %any undef, ptr %taddr579, 0
  %727 = insertvalue %any %726, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg580, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg581, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg582, align 8
  store %any %725, ptr %varargslots583, align 16
  %ptradd584 = getelementptr inbounds i8, ptr %varargslots583, i64 16
  store %any %727, ptr %ptradd584, align 16
  %728 = insertvalue %"any[]" undef, ptr %varargslots583, 0
  %"$$temp585" = insertvalue %"any[]" %728, i64 2, 1
  store %"any[]" %"$$temp585", ptr %indirectarg586, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg580, ptr align 8 %indirectarg581, ptr align 8 %indirectarg582, i32 94, ptr align 8 %indirectarg586), !dbg !2244
  unreachable, !dbg !2244

panic590:                                         ; preds = %checkok587
  store i64 %sext588, ptr %taddr591, align 8
  %729 = insertvalue %any undef, ptr %taddr591, 0
  %730 = insertvalue %any %729, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg592, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg593, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg594, align 8
  store %any %730, ptr %varargslots595, align 16
  %731 = insertvalue %"any[]" undef, ptr %varargslots595, 0
  %"$$temp596" = insertvalue %"any[]" %731, i64 1, 1
  store %"any[]" %"$$temp596", ptr %indirectarg597, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg592, ptr align 8 %indirectarg593, ptr align 8 %indirectarg594, i32 94, ptr align 8 %indirectarg597), !dbg !2244
  unreachable, !dbg !2244

panic600:                                         ; preds = %checkok598
  store i64 128, ptr %taddr601, align 8
  %732 = insertvalue %any undef, ptr %taddr601, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext588, ptr %taddr602, align 8
  %734 = insertvalue %any undef, ptr %taddr602, 0
  %735 = insertvalue %any %734, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg603, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg604, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg605, align 8
  store %any %733, ptr %varargslots606, align 16
  %ptradd607 = getelementptr inbounds i8, ptr %varargslots606, i64 16
  store %any %735, ptr %ptradd607, align 16
  %736 = insertvalue %"any[]" undef, ptr %varargslots606, 0
  %"$$temp608" = insertvalue %"any[]" %736, i64 2, 1
  store %"any[]" %"$$temp608", ptr %indirectarg609, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg603, ptr align 8 %indirectarg604, ptr align 8 %indirectarg605, i32 94, ptr align 8 %indirectarg609), !dbg !2244
  unreachable, !dbg !2244

panic619:                                         ; preds = %if.else616
  store i64 %sext617, ptr %taddr620, align 8
  %737 = insertvalue %any undef, ptr %taddr620, 0
  %738 = insertvalue %any %737, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg621, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg622, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg623, align 8
  store %any %738, ptr %varargslots624, align 16
  %739 = insertvalue %"any[]" undef, ptr %varargslots624, 0
  %"$$temp625" = insertvalue %"any[]" %739, i64 1, 1
  store %"any[]" %"$$temp625", ptr %indirectarg626, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg621, ptr align 8 %indirectarg622, ptr align 8 %indirectarg623, i32 98, ptr align 8 %indirectarg626), !dbg !2246
  unreachable, !dbg !2246

panic629:                                         ; preds = %checkok627
  store i64 128, ptr %taddr630, align 8
  %740 = insertvalue %any undef, ptr %taddr630, 0
  %741 = insertvalue %any %740, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext617, ptr %taddr631, align 8
  %742 = insertvalue %any undef, ptr %taddr631, 0
  %743 = insertvalue %any %742, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg632, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg633, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg634, align 8
  store %any %741, ptr %varargslots635, align 16
  %ptradd636 = getelementptr inbounds i8, ptr %varargslots635, i64 16
  store %any %743, ptr %ptradd636, align 16
  %744 = insertvalue %"any[]" undef, ptr %varargslots635, 0
  %"$$temp637" = insertvalue %"any[]" %744, i64 2, 1
  store %"any[]" %"$$temp637", ptr %indirectarg638, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg632, ptr align 8 %indirectarg633, ptr align 8 %indirectarg634, i32 98, ptr align 8 %indirectarg638), !dbg !2246
  unreachable, !dbg !2246

panic669:                                         ; preds = %assert_ok665
  store i64 %284, ptr %taddr670, align 8
  %745 = insertvalue %any undef, ptr %taddr670, 0
  %746 = insertvalue %any %745, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add667, ptr %taddr671, align 8
  %747 = insertvalue %any undef, ptr %taddr671, 0
  %748 = insertvalue %any %747, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg672, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg673, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg674, align 8
  store %any %746, ptr %varargslots675, align 16
  %ptradd676 = getelementptr inbounds i8, ptr %varargslots675, i64 16
  store %any %748, ptr %ptradd676, align 16
  %749 = insertvalue %"any[]" undef, ptr %varargslots675, 0
  %"$$temp677" = insertvalue %"any[]" %749, i64 2, 1
  store %"any[]" %"$$temp677", ptr %indirectarg678, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg672, ptr align 8 %indirectarg673, ptr align 8 %indirectarg674, i32 113, ptr align 8 %indirectarg678), !dbg !2258
  unreachable, !dbg !2258

panic699:                                         ; preds = %if.exit696
  store i64 %300, ptr %taddr700, align 8
  %750 = insertvalue %any undef, ptr %taddr700, 0
  %751 = insertvalue %any %750, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add697, ptr %taddr701, align 8
  %752 = insertvalue %any undef, ptr %taddr701, 0
  %753 = insertvalue %any %752, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg702, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg703, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg704, align 8
  store %any %751, ptr %varargslots705, align 16
  %ptradd706 = getelementptr inbounds i8, ptr %varargslots705, i64 16
  store %any %753, ptr %ptradd706, align 16
  %754 = insertvalue %"any[]" undef, ptr %varargslots705, 0
  %"$$temp707" = insertvalue %"any[]" %754, i64 2, 1
  store %"any[]" %"$$temp707", ptr %indirectarg708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg702, ptr align 8 %indirectarg703, ptr align 8 %indirectarg704, i32 120, ptr align 8 %indirectarg708), !dbg !2265
  unreachable, !dbg !2265

panic711:                                         ; preds = %checkok709
  store i64 %add697, ptr %taddr712, align 8
  %755 = insertvalue %any undef, ptr %taddr712, 0
  %756 = insertvalue %any %755, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.77, i64 22 }, ptr %indirectarg713, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg714, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg715, align 8
  store %any %756, ptr %varargslots716, align 16
  %757 = insertvalue %"any[]" undef, ptr %varargslots716, 0
  %"$$temp717" = insertvalue %"any[]" %757, i64 1, 1
  store %"any[]" %"$$temp717", ptr %indirectarg718, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg713, ptr align 8 %indirectarg714, ptr align 8 %indirectarg715, i32 120, ptr align 8 %indirectarg718), !dbg !2265
  unreachable, !dbg !2265

panic772:                                         ; preds = %loop.body769
  store i64 %sext770, ptr %taddr773, align 8
  %758 = insertvalue %any undef, ptr %taddr773, 0
  %759 = insertvalue %any %758, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg774, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg775, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg776, align 8
  store %any %759, ptr %varargslots777, align 16
  %760 = insertvalue %"any[]" undef, ptr %varargslots777, 0
  %"$$temp778" = insertvalue %"any[]" %760, i64 1, 1
  store %"any[]" %"$$temp778", ptr %indirectarg779, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg774, ptr align 8 %indirectarg775, ptr align 8 %indirectarg776, i32 138, ptr align 8 %indirectarg779), !dbg !2277
  unreachable, !dbg !2277

panic782:                                         ; preds = %checkok780
  store i64 128, ptr %taddr783, align 8
  %761 = insertvalue %any undef, ptr %taddr783, 0
  %762 = insertvalue %any %761, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext770, ptr %taddr784, align 8
  %763 = insertvalue %any undef, ptr %taddr784, 0
  %764 = insertvalue %any %763, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg785, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg786, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg787, align 8
  store %any %762, ptr %varargslots788, align 16
  %ptradd789 = getelementptr inbounds i8, ptr %varargslots788, i64 16
  store %any %764, ptr %ptradd789, align 16
  %765 = insertvalue %"any[]" undef, ptr %varargslots788, 0
  %"$$temp790" = insertvalue %"any[]" %765, i64 2, 1
  store %"any[]" %"$$temp790", ptr %indirectarg791, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg785, ptr align 8 %indirectarg786, ptr align 8 %indirectarg787, i32 138, ptr align 8 %indirectarg791), !dbg !2277
  unreachable, !dbg !2277

panic824:                                         ; preds = %if.then818
  store i64 %sub822, ptr %taddr825, align 8
  %766 = insertvalue %any undef, ptr %taddr825, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg826, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg827, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg828, align 8
  store %any %767, ptr %varargslots829, align 16
  %768 = insertvalue %"any[]" undef, ptr %varargslots829, 0
  %"$$temp830" = insertvalue %"any[]" %768, i64 1, 1
  store %"any[]" %"$$temp830", ptr %indirectarg831, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg826, ptr align 8 %indirectarg827, ptr align 8 %indirectarg828, i32 152, ptr align 8 %indirectarg831), !dbg !2292
  unreachable, !dbg !2292

panic834:                                         ; preds = %checkok832
  store i64 8, ptr %taddr835, align 8
  %769 = insertvalue %any undef, ptr %taddr835, 0
  %770 = insertvalue %any %769, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub822, ptr %taddr836, align 8
  %771 = insertvalue %any undef, ptr %taddr836, 0
  %772 = insertvalue %any %771, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg837, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg838, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg839, align 8
  store %any %770, ptr %varargslots840, align 16
  %ptradd841 = getelementptr inbounds i8, ptr %varargslots840, i64 16
  store %any %772, ptr %ptradd841, align 16
  %773 = insertvalue %"any[]" undef, ptr %varargslots840, 0
  %"$$temp842" = insertvalue %"any[]" %773, i64 2, 1
  store %"any[]" %"$$temp842", ptr %indirectarg843, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg837, ptr align 8 %indirectarg838, ptr align 8 %indirectarg839, i32 152, ptr align 8 %indirectarg843), !dbg !2292
  unreachable, !dbg !2292

panic847:                                         ; preds = %checkok844
  store %"char[]" { ptr @.panic_msg.81, i64 17 }, ptr %indirectarg848, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg849, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg850, align 8
  %774 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %774(ptr align 8 %indirectarg848, ptr align 8 %indirectarg849, ptr align 8 %indirectarg850, i32 152), !dbg !2292
  unreachable, !dbg !2292

panic860:                                         ; preds = %or.rhs859
  store i32 %352, ptr %taddr861, align 4
  %775 = insertvalue %any undef, ptr %taddr861, 0
  %776 = insertvalue %any %775, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg862, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg863, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg864, align 8
  store %any %776, ptr %varargslots865, align 16
  %777 = insertvalue %"any[]" undef, ptr %varargslots865, 0
  %"$$temp866" = insertvalue %"any[]" %777, i64 1, 1
  store %"any[]" %"$$temp866", ptr %indirectarg867, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg862, ptr align 8 %indirectarg863, ptr align 8 %indirectarg864, i32 154, ptr align 8 %indirectarg867), !dbg !2295
  unreachable, !dbg !2295

panic879:                                         ; preds = %if.then873
  store i64 %sub877, ptr %taddr880, align 8
  %778 = insertvalue %any undef, ptr %taddr880, 0
  %779 = insertvalue %any %778, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg881, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg882, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg883, align 8
  store %any %779, ptr %varargslots884, align 16
  %780 = insertvalue %"any[]" undef, ptr %varargslots884, 0
  %"$$temp885" = insertvalue %"any[]" %780, i64 1, 1
  store %"any[]" %"$$temp885", ptr %indirectarg886, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg881, ptr align 8 %indirectarg882, ptr align 8 %indirectarg883, i32 154, ptr align 8 %indirectarg886), !dbg !2295
  unreachable, !dbg !2295

panic889:                                         ; preds = %checkok887
  store i64 8, ptr %taddr890, align 8
  %781 = insertvalue %any undef, ptr %taddr890, 0
  %782 = insertvalue %any %781, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub877, ptr %taddr891, align 8
  %783 = insertvalue %any undef, ptr %taddr891, 0
  %784 = insertvalue %any %783, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg892, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg893, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg894, align 8
  store %any %782, ptr %varargslots895, align 16
  %ptradd896 = getelementptr inbounds i8, ptr %varargslots895, i64 16
  store %any %784, ptr %ptradd896, align 16
  %785 = insertvalue %"any[]" undef, ptr %varargslots895, 0
  %"$$temp897" = insertvalue %"any[]" %785, i64 2, 1
  store %"any[]" %"$$temp897", ptr %indirectarg898, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg892, ptr align 8 %indirectarg893, ptr align 8 %indirectarg894, i32 154, ptr align 8 %indirectarg898), !dbg !2295
  unreachable, !dbg !2295

panic914:                                         ; preds = %cond.phi
  store i64 %sub912, ptr %taddr915, align 8
  %786 = insertvalue %any undef, ptr %taddr915, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg916, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg917, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg918, align 8
  store %any %787, ptr %varargslots919, align 16
  %788 = insertvalue %"any[]" undef, ptr %varargslots919, 0
  %"$$temp920" = insertvalue %"any[]" %788, i64 1, 1
  store %"any[]" %"$$temp920", ptr %indirectarg921, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg916, ptr align 8 %indirectarg917, ptr align 8 %indirectarg918, i32 161, ptr align 8 %indirectarg921), !dbg !2301
  unreachable, !dbg !2301

panic924:                                         ; preds = %checkok922
  store i64 8, ptr %taddr925, align 8
  %789 = insertvalue %any undef, ptr %taddr925, 0
  %790 = insertvalue %any %789, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub912, ptr %taddr926, align 8
  %791 = insertvalue %any undef, ptr %taddr926, 0
  %792 = insertvalue %any %791, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg927, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg928, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg929, align 8
  store %any %790, ptr %varargslots930, align 16
  %ptradd931 = getelementptr inbounds i8, ptr %varargslots930, i64 16
  store %any %792, ptr %ptradd931, align 16
  %793 = insertvalue %"any[]" undef, ptr %varargslots930, 0
  %"$$temp932" = insertvalue %"any[]" %793, i64 2, 1
  store %"any[]" %"$$temp932", ptr %indirectarg933, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg927, ptr align 8 %indirectarg928, ptr align 8 %indirectarg929, i32 161, ptr align 8 %indirectarg933), !dbg !2301
  unreachable, !dbg !2301

panic941:                                         ; preds = %loop.body938
  store i64 %sext939, ptr %taddr942, align 8
  %794 = insertvalue %any undef, ptr %taddr942, 0
  %795 = insertvalue %any %794, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg943, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg944, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg945, align 8
  store %any %795, ptr %varargslots946, align 16
  %796 = insertvalue %"any[]" undef, ptr %varargslots946, 0
  %"$$temp947" = insertvalue %"any[]" %796, i64 1, 1
  store %"any[]" %"$$temp947", ptr %indirectarg948, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg943, ptr align 8 %indirectarg944, ptr align 8 %indirectarg945, i32 165, ptr align 8 %indirectarg948), !dbg !2308
  unreachable, !dbg !2308

panic951:                                         ; preds = %checkok949
  store i64 128, ptr %taddr952, align 8
  %797 = insertvalue %any undef, ptr %taddr952, 0
  %798 = insertvalue %any %797, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext939, ptr %taddr953, align 8
  %799 = insertvalue %any undef, ptr %taddr953, 0
  %800 = insertvalue %any %799, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg954, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg955, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg956, align 8
  store %any %798, ptr %varargslots957, align 16
  %ptradd958 = getelementptr inbounds i8, ptr %varargslots957, i64 16
  store %any %800, ptr %ptradd958, align 16
  %801 = insertvalue %"any[]" undef, ptr %varargslots957, 0
  %"$$temp959" = insertvalue %"any[]" %801, i64 2, 1
  store %"any[]" %"$$temp959", ptr %indirectarg960, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg954, ptr align 8 %indirectarg955, ptr align 8 %indirectarg956, i32 165, ptr align 8 %indirectarg960), !dbg !2308
  unreachable, !dbg !2308

panic964:                                         ; preds = %checkok961
  store %"char[]" { ptr @.panic_msg.83, i64 10 }, ptr %indirectarg965, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg966, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg967, align 8
  %802 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %802(ptr align 8 %indirectarg965, ptr align 8 %indirectarg966, ptr align 8 %indirectarg967, i32 165), !dbg !2308
  unreachable, !dbg !2308

panic972:                                         ; preds = %checkok968
  store i64 %sext970, ptr %taddr973, align 8
  %803 = insertvalue %any undef, ptr %taddr973, 0
  %804 = insertvalue %any %803, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg974, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg975, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg976, align 8
  store %any %804, ptr %varargslots977, align 16
  %805 = insertvalue %"any[]" undef, ptr %varargslots977, 0
  %"$$temp978" = insertvalue %"any[]" %805, i64 1, 1
  store %"any[]" %"$$temp978", ptr %indirectarg979, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg974, ptr align 8 %indirectarg975, ptr align 8 %indirectarg976, i32 166, ptr align 8 %indirectarg979), !dbg !2309
  unreachable, !dbg !2309

panic982:                                         ; preds = %checkok980
  store i64 128, ptr %taddr983, align 8
  %806 = insertvalue %any undef, ptr %taddr983, 0
  %807 = insertvalue %any %806, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext970, ptr %taddr984, align 8
  %808 = insertvalue %any undef, ptr %taddr984, 0
  %809 = insertvalue %any %808, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg985, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg986, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg987, align 8
  store %any %807, ptr %varargslots988, align 16
  %ptradd989 = getelementptr inbounds i8, ptr %varargslots988, i64 16
  store %any %809, ptr %ptradd989, align 16
  %810 = insertvalue %"any[]" undef, ptr %varargslots988, 0
  %"$$temp990" = insertvalue %"any[]" %810, i64 2, 1
  store %"any[]" %"$$temp990", ptr %indirectarg991, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg985, ptr align 8 %indirectarg986, ptr align 8 %indirectarg987, i32 166, ptr align 8 %indirectarg991), !dbg !2309
  unreachable, !dbg !2309

panic996:                                         ; preds = %checkok992
  store i64 %sext994, ptr %taddr997, align 8
  %811 = insertvalue %any undef, ptr %taddr997, 0
  %812 = insertvalue %any %811, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg998, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg999, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1000, align 8
  store %any %812, ptr %varargslots1001, align 16
  %813 = insertvalue %"any[]" undef, ptr %varargslots1001, 0
  %"$$temp1002" = insertvalue %"any[]" %813, i64 1, 1
  store %"any[]" %"$$temp1002", ptr %indirectarg1003, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg998, ptr align 8 %indirectarg999, ptr align 8 %indirectarg1000, i32 166, ptr align 8 %indirectarg1003), !dbg !2309
  unreachable, !dbg !2309

panic1006:                                        ; preds = %checkok1004
  store i64 128, ptr %taddr1007, align 8
  %814 = insertvalue %any undef, ptr %taddr1007, 0
  %815 = insertvalue %any %814, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext994, ptr %taddr1008, align 8
  %816 = insertvalue %any undef, ptr %taddr1008, 0
  %817 = insertvalue %any %816, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1009, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1010, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1011, align 8
  store %any %815, ptr %varargslots1012, align 16
  %ptradd1013 = getelementptr inbounds i8, ptr %varargslots1012, i64 16
  store %any %817, ptr %ptradd1013, align 16
  %818 = insertvalue %"any[]" undef, ptr %varargslots1012, 0
  %"$$temp1014" = insertvalue %"any[]" %818, i64 2, 1
  store %"any[]" %"$$temp1014", ptr %indirectarg1015, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1009, ptr align 8 %indirectarg1010, ptr align 8 %indirectarg1011, i32 166, ptr align 8 %indirectarg1015), !dbg !2309
  unreachable, !dbg !2309

panic1019:                                        ; preds = %checkok1016
  store %"char[]" { ptr @.panic_msg.81, i64 17 }, ptr %indirectarg1020, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1021, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1022, align 8
  %819 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %819(ptr align 8 %indirectarg1020, ptr align 8 %indirectarg1021, ptr align 8 %indirectarg1022, i32 166), !dbg !2309
  unreachable, !dbg !2309

panic1026:                                        ; preds = %checkok1023
  store %"char[]" { ptr @.panic_msg.81, i64 17 }, ptr %indirectarg1027, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1028, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1029, align 8
  %820 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %820(ptr align 8 %indirectarg1027, ptr align 8 %indirectarg1028, ptr align 8 %indirectarg1029, i32 167), !dbg !2310
  unreachable, !dbg !2310

panic1037:                                        ; preds = %and.rhs1034
  store i64 %sext1035, ptr %taddr1038, align 8
  %821 = insertvalue %any undef, ptr %taddr1038, 0
  %822 = insertvalue %any %821, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1039, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1040, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1041, align 8
  store %any %822, ptr %varargslots1042, align 16
  %823 = insertvalue %"any[]" undef, ptr %varargslots1042, 0
  %"$$temp1043" = insertvalue %"any[]" %823, i64 1, 1
  store %"any[]" %"$$temp1043", ptr %indirectarg1044, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1039, ptr align 8 %indirectarg1040, ptr align 8 %indirectarg1041, i32 168, ptr align 8 %indirectarg1044), !dbg !2311
  unreachable, !dbg !2311

panic1047:                                        ; preds = %checkok1045
  store i64 128, ptr %taddr1048, align 8
  %824 = insertvalue %any undef, ptr %taddr1048, 0
  %825 = insertvalue %any %824, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1035, ptr %taddr1049, align 8
  %826 = insertvalue %any undef, ptr %taddr1049, 0
  %827 = insertvalue %any %826, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1050, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1051, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1052, align 8
  store %any %825, ptr %varargslots1053, align 16
  %ptradd1054 = getelementptr inbounds i8, ptr %varargslots1053, i64 16
  store %any %827, ptr %ptradd1054, align 16
  %828 = insertvalue %"any[]" undef, ptr %varargslots1053, 0
  %"$$temp1055" = insertvalue %"any[]" %828, i64 2, 1
  store %"any[]" %"$$temp1055", ptr %indirectarg1056, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1050, ptr align 8 %indirectarg1051, ptr align 8 %indirectarg1052, i32 168, ptr align 8 %indirectarg1056), !dbg !2311
  unreachable, !dbg !2311

panic1074:                                        ; preds = %if.then1070
  store i64 %sext1072, ptr %taddr1075, align 8
  %829 = insertvalue %any undef, ptr %taddr1075, 0
  %830 = insertvalue %any %829, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1076, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1077, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1078, align 8
  store %any %830, ptr %varargslots1079, align 16
  %831 = insertvalue %"any[]" undef, ptr %varargslots1079, 0
  %"$$temp1080" = insertvalue %"any[]" %831, i64 1, 1
  store %"any[]" %"$$temp1080", ptr %indirectarg1081, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1076, ptr align 8 %indirectarg1077, ptr align 8 %indirectarg1078, i32 174, ptr align 8 %indirectarg1081), !dbg !2315
  unreachable, !dbg !2315

panic1084:                                        ; preds = %checkok1082
  store i64 128, ptr %taddr1085, align 8
  %832 = insertvalue %any undef, ptr %taddr1085, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1072, ptr %taddr1086, align 8
  %834 = insertvalue %any undef, ptr %taddr1086, 0
  %835 = insertvalue %any %834, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1087, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1088, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1089, align 8
  store %any %833, ptr %varargslots1090, align 16
  %ptradd1091 = getelementptr inbounds i8, ptr %varargslots1090, i64 16
  store %any %835, ptr %ptradd1091, align 16
  %836 = insertvalue %"any[]" undef, ptr %varargslots1090, 0
  %"$$temp1092" = insertvalue %"any[]" %836, i64 2, 1
  store %"any[]" %"$$temp1092", ptr %indirectarg1093, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1087, ptr align 8 %indirectarg1088, ptr align 8 %indirectarg1089, i32 174, ptr align 8 %indirectarg1093), !dbg !2315
  unreachable, !dbg !2315

panic1107:                                        ; preds = %and.rhs1104
  store i64 %sext1105, ptr %taddr1108, align 8
  %837 = insertvalue %any undef, ptr %taddr1108, 0
  %838 = insertvalue %any %837, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1109, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1110, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1111, align 8
  store %any %838, ptr %varargslots1112, align 16
  %839 = insertvalue %"any[]" undef, ptr %varargslots1112, 0
  %"$$temp1113" = insertvalue %"any[]" %839, i64 1, 1
  store %"any[]" %"$$temp1113", ptr %indirectarg1114, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1109, ptr align 8 %indirectarg1110, ptr align 8 %indirectarg1111, i32 179, ptr align 8 %indirectarg1114), !dbg !2318
  unreachable, !dbg !2318

panic1117:                                        ; preds = %checkok1115
  store i64 128, ptr %taddr1118, align 8
  %840 = insertvalue %any undef, ptr %taddr1118, 0
  %841 = insertvalue %any %840, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1105, ptr %taddr1119, align 8
  %842 = insertvalue %any undef, ptr %taddr1119, 0
  %843 = insertvalue %any %842, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1120, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1121, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1122, align 8
  store %any %841, ptr %varargslots1123, align 16
  %ptradd1124 = getelementptr inbounds i8, ptr %varargslots1123, i64 16
  store %any %843, ptr %ptradd1124, align 16
  %844 = insertvalue %"any[]" undef, ptr %varargslots1123, 0
  %"$$temp1125" = insertvalue %"any[]" %844, i64 2, 1
  store %"any[]" %"$$temp1125", ptr %indirectarg1126, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1120, ptr align 8 %indirectarg1121, ptr align 8 %indirectarg1122, i32 179, ptr align 8 %indirectarg1126), !dbg !2318
  unreachable, !dbg !2318

panic1143:                                        ; preds = %loop.body1139
  store i64 %sext1141, ptr %taddr1144, align 8
  %845 = insertvalue %any undef, ptr %taddr1144, 0
  %846 = insertvalue %any %845, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1145, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1146, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1147, align 8
  store %any %846, ptr %varargslots1148, align 16
  %847 = insertvalue %"any[]" undef, ptr %varargslots1148, 0
  %"$$temp1149" = insertvalue %"any[]" %847, i64 1, 1
  store %"any[]" %"$$temp1149", ptr %indirectarg1150, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1145, ptr align 8 %indirectarg1146, ptr align 8 %indirectarg1147, i32 185, ptr align 8 %indirectarg1150), !dbg !2328
  unreachable, !dbg !2328

panic1153:                                        ; preds = %checkok1151
  store i64 128, ptr %taddr1154, align 8
  %848 = insertvalue %any undef, ptr %taddr1154, 0
  %849 = insertvalue %any %848, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1141, ptr %taddr1155, align 8
  %850 = insertvalue %any undef, ptr %taddr1155, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1156, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1157, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1158, align 8
  store %any %849, ptr %varargslots1159, align 16
  %ptradd1160 = getelementptr inbounds i8, ptr %varargslots1159, i64 16
  store %any %851, ptr %ptradd1160, align 16
  %852 = insertvalue %"any[]" undef, ptr %varargslots1159, 0
  %"$$temp1161" = insertvalue %"any[]" %852, i64 2, 1
  store %"any[]" %"$$temp1161", ptr %indirectarg1162, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1156, ptr align 8 %indirectarg1157, ptr align 8 %indirectarg1158, i32 185, ptr align 8 %indirectarg1162), !dbg !2328
  unreachable, !dbg !2328

panic1174:                                        ; preds = %if.then1169
  store i64 %sext1172, ptr %taddr1175, align 8
  %853 = insertvalue %any undef, ptr %taddr1175, 0
  %854 = insertvalue %any %853, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1176, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1177, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1178, align 8
  store %any %854, ptr %varargslots1179, align 16
  %855 = insertvalue %"any[]" undef, ptr %varargslots1179, 0
  %"$$temp1180" = insertvalue %"any[]" %855, i64 1, 1
  store %"any[]" %"$$temp1180", ptr %indirectarg1181, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1176, ptr align 8 %indirectarg1177, ptr align 8 %indirectarg1178, i32 189, ptr align 8 %indirectarg1181), !dbg !2332
  unreachable, !dbg !2332

panic1184:                                        ; preds = %checkok1182
  store i64 128, ptr %taddr1185, align 8
  %856 = insertvalue %any undef, ptr %taddr1185, 0
  %857 = insertvalue %any %856, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1172, ptr %taddr1186, align 8
  %858 = insertvalue %any undef, ptr %taddr1186, 0
  %859 = insertvalue %any %858, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1187, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1188, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1189, align 8
  store %any %857, ptr %varargslots1190, align 16
  %ptradd1191 = getelementptr inbounds i8, ptr %varargslots1190, i64 16
  store %any %859, ptr %ptradd1191, align 16
  %860 = insertvalue %"any[]" undef, ptr %varargslots1190, 0
  %"$$temp1192" = insertvalue %"any[]" %860, i64 2, 1
  store %"any[]" %"$$temp1192", ptr %indirectarg1193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1187, ptr align 8 %indirectarg1188, ptr align 8 %indirectarg1189, i32 189, ptr align 8 %indirectarg1193), !dbg !2332
  unreachable, !dbg !2332

panic1201:                                        ; preds = %if.else1198
  store i64 %sext1199, ptr %taddr1202, align 8
  %861 = insertvalue %any undef, ptr %taddr1202, 0
  %862 = insertvalue %any %861, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1203, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1204, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1205, align 8
  store %any %862, ptr %varargslots1206, align 16
  %863 = insertvalue %"any[]" undef, ptr %varargslots1206, 0
  %"$$temp1207" = insertvalue %"any[]" %863, i64 1, 1
  store %"any[]" %"$$temp1207", ptr %indirectarg1208, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1203, ptr align 8 %indirectarg1204, ptr align 8 %indirectarg1205, i32 194, ptr align 8 %indirectarg1208), !dbg !2335
  unreachable, !dbg !2335

panic1211:                                        ; preds = %checkok1209
  store i64 128, ptr %taddr1212, align 8
  %864 = insertvalue %any undef, ptr %taddr1212, 0
  %865 = insertvalue %any %864, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1199, ptr %taddr1213, align 8
  %866 = insertvalue %any undef, ptr %taddr1213, 0
  %867 = insertvalue %any %866, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1214, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1215, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1216, align 8
  store %any %865, ptr %varargslots1217, align 16
  %ptradd1218 = getelementptr inbounds i8, ptr %varargslots1217, i64 16
  store %any %867, ptr %ptradd1218, align 16
  %868 = insertvalue %"any[]" undef, ptr %varargslots1217, 0
  %"$$temp1219" = insertvalue %"any[]" %868, i64 2, 1
  store %"any[]" %"$$temp1219", ptr %indirectarg1220, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1214, ptr align 8 %indirectarg1215, ptr align 8 %indirectarg1216, i32 194, ptr align 8 %indirectarg1220), !dbg !2335
  unreachable, !dbg !2335

panic1235:                                        ; preds = %and.rhs1232
  store i64 %sext1233, ptr %taddr1236, align 8
  %869 = insertvalue %any undef, ptr %taddr1236, 0
  %870 = insertvalue %any %869, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1237, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1238, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1239, align 8
  store %any %870, ptr %varargslots1240, align 16
  %871 = insertvalue %"any[]" undef, ptr %varargslots1240, 0
  %"$$temp1241" = insertvalue %"any[]" %871, i64 1, 1
  store %"any[]" %"$$temp1241", ptr %indirectarg1242, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1237, ptr align 8 %indirectarg1238, ptr align 8 %indirectarg1239, i32 196, ptr align 8 %indirectarg1242), !dbg !2336
  unreachable, !dbg !2336

panic1245:                                        ; preds = %checkok1243
  store i64 128, ptr %taddr1246, align 8
  %872 = insertvalue %any undef, ptr %taddr1246, 0
  %873 = insertvalue %any %872, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1233, ptr %taddr1247, align 8
  %874 = insertvalue %any undef, ptr %taddr1247, 0
  %875 = insertvalue %any %874, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1248, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1249, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1250, align 8
  store %any %873, ptr %varargslots1251, align 16
  %ptradd1252 = getelementptr inbounds i8, ptr %varargslots1251, i64 16
  store %any %875, ptr %ptradd1252, align 16
  %876 = insertvalue %"any[]" undef, ptr %varargslots1251, 0
  %"$$temp1253" = insertvalue %"any[]" %876, i64 2, 1
  store %"any[]" %"$$temp1253", ptr %indirectarg1254, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1248, ptr align 8 %indirectarg1249, ptr align 8 %indirectarg1250, i32 196, ptr align 8 %indirectarg1254), !dbg !2336
  unreachable, !dbg !2336

panic1281:                                        ; preds = %if.then1274
  store i64 %sext1279, ptr %taddr1282, align 8
  %877 = insertvalue %any undef, ptr %taddr1282, 0
  %878 = insertvalue %any %877, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1283, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1284, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1285, align 8
  store %any %878, ptr %varargslots1286, align 16
  %879 = insertvalue %"any[]" undef, ptr %varargslots1286, 0
  %"$$temp1287" = insertvalue %"any[]" %879, i64 1, 1
  store %"any[]" %"$$temp1287", ptr %indirectarg1288, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1283, ptr align 8 %indirectarg1284, ptr align 8 %indirectarg1285, i32 206, ptr align 8 %indirectarg1288), !dbg !2345
  unreachable, !dbg !2345

panic1291:                                        ; preds = %checkok1289
  store i64 128, ptr %taddr1292, align 8
  %880 = insertvalue %any undef, ptr %taddr1292, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1279, ptr %taddr1293, align 8
  %882 = insertvalue %any undef, ptr %taddr1293, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1294, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1295, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1296, align 8
  store %any %881, ptr %varargslots1297, align 16
  %ptradd1298 = getelementptr inbounds i8, ptr %varargslots1297, i64 16
  store %any %883, ptr %ptradd1298, align 16
  %884 = insertvalue %"any[]" undef, ptr %varargslots1297, 0
  %"$$temp1299" = insertvalue %"any[]" %884, i64 2, 1
  store %"any[]" %"$$temp1299", ptr %indirectarg1300, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1294, ptr align 8 %indirectarg1295, ptr align 8 %indirectarg1296, i32 206, ptr align 8 %indirectarg1300), !dbg !2345
  unreachable, !dbg !2345

panic1305:                                        ; preds = %checkok1301
  store i64 %sext1303, ptr %taddr1306, align 8
  %885 = insertvalue %any undef, ptr %taddr1306, 0
  %886 = insertvalue %any %885, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1307, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1308, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1309, align 8
  store %any %886, ptr %varargslots1310, align 16
  %887 = insertvalue %"any[]" undef, ptr %varargslots1310, 0
  %"$$temp1311" = insertvalue %"any[]" %887, i64 1, 1
  store %"any[]" %"$$temp1311", ptr %indirectarg1312, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1307, ptr align 8 %indirectarg1308, ptr align 8 %indirectarg1309, i32 206, ptr align 8 %indirectarg1312), !dbg !2345
  unreachable, !dbg !2345

panic1315:                                        ; preds = %checkok1313
  store i64 128, ptr %taddr1316, align 8
  %888 = insertvalue %any undef, ptr %taddr1316, 0
  %889 = insertvalue %any %888, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1303, ptr %taddr1317, align 8
  %890 = insertvalue %any undef, ptr %taddr1317, 0
  %891 = insertvalue %any %890, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1318, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1319, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1320, align 8
  store %any %889, ptr %varargslots1321, align 16
  %ptradd1322 = getelementptr inbounds i8, ptr %varargslots1321, i64 16
  store %any %891, ptr %ptradd1322, align 16
  %892 = insertvalue %"any[]" undef, ptr %varargslots1321, 0
  %"$$temp1323" = insertvalue %"any[]" %892, i64 2, 1
  store %"any[]" %"$$temp1323", ptr %indirectarg1324, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1318, ptr align 8 %indirectarg1319, ptr align 8 %indirectarg1320, i32 206, ptr align 8 %indirectarg1324), !dbg !2345
  unreachable, !dbg !2345

panic1331:                                        ; preds = %if.exit1328
  store i64 %sext1329, ptr %taddr1332, align 8
  %893 = insertvalue %any undef, ptr %taddr1332, 0
  %894 = insertvalue %any %893, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1333, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1334, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1335, align 8
  store %any %894, ptr %varargslots1336, align 16
  %895 = insertvalue %"any[]" undef, ptr %varargslots1336, 0
  %"$$temp1337" = insertvalue %"any[]" %895, i64 1, 1
  store %"any[]" %"$$temp1337", ptr %indirectarg1338, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1333, ptr align 8 %indirectarg1334, ptr align 8 %indirectarg1335, i32 208, ptr align 8 %indirectarg1338), !dbg !2346
  unreachable, !dbg !2346

panic1341:                                        ; preds = %checkok1339
  store i64 128, ptr %taddr1342, align 8
  %896 = insertvalue %any undef, ptr %taddr1342, 0
  %897 = insertvalue %any %896, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1329, ptr %taddr1343, align 8
  %898 = insertvalue %any undef, ptr %taddr1343, 0
  %899 = insertvalue %any %898, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1344, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1345, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1346, align 8
  store %any %897, ptr %varargslots1347, align 16
  %ptradd1348 = getelementptr inbounds i8, ptr %varargslots1347, i64 16
  store %any %899, ptr %ptradd1348, align 16
  %900 = insertvalue %"any[]" undef, ptr %varargslots1347, 0
  %"$$temp1349" = insertvalue %"any[]" %900, i64 2, 1
  store %"any[]" %"$$temp1349", ptr %indirectarg1350, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1344, ptr align 8 %indirectarg1345, ptr align 8 %indirectarg1346, i32 208, ptr align 8 %indirectarg1350), !dbg !2346
  unreachable, !dbg !2346

panic1366:                                        ; preds = %or.rhs1363
  store i64 %sext1364, ptr %taddr1367, align 8
  %901 = insertvalue %any undef, ptr %taddr1367, 0
  %902 = insertvalue %any %901, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1368, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1369, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1370, align 8
  store %any %902, ptr %varargslots1371, align 16
  %903 = insertvalue %"any[]" undef, ptr %varargslots1371, 0
  %"$$temp1372" = insertvalue %"any[]" %903, i64 1, 1
  store %"any[]" %"$$temp1372", ptr %indirectarg1373, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1368, ptr align 8 %indirectarg1369, ptr align 8 %indirectarg1370, i32 221, ptr align 8 %indirectarg1373), !dbg !2360
  unreachable, !dbg !2360

panic1376:                                        ; preds = %checkok1374
  store i64 128, ptr %taddr1377, align 8
  %904 = insertvalue %any undef, ptr %taddr1377, 0
  %905 = insertvalue %any %904, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1364, ptr %taddr1378, align 8
  %906 = insertvalue %any undef, ptr %taddr1378, 0
  %907 = insertvalue %any %906, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1379, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1380, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1381, align 8
  store %any %905, ptr %varargslots1382, align 16
  %ptradd1383 = getelementptr inbounds i8, ptr %varargslots1382, i64 16
  store %any %907, ptr %ptradd1383, align 16
  %908 = insertvalue %"any[]" undef, ptr %varargslots1382, 0
  %"$$temp1384" = insertvalue %"any[]" %908, i64 2, 1
  store %"any[]" %"$$temp1384", ptr %indirectarg1385, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1379, ptr align 8 %indirectarg1380, ptr align 8 %indirectarg1381, i32 221, ptr align 8 %indirectarg1385), !dbg !2360
  unreachable, !dbg !2360

panic1390:                                        ; preds = %checkok1386
  store i64 %sext1388, ptr %taddr1391, align 8
  %909 = insertvalue %any undef, ptr %taddr1391, 0
  %910 = insertvalue %any %909, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1392, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1393, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1394, align 8
  store %any %910, ptr %varargslots1395, align 16
  %911 = insertvalue %"any[]" undef, ptr %varargslots1395, 0
  %"$$temp1396" = insertvalue %"any[]" %911, i64 1, 1
  store %"any[]" %"$$temp1396", ptr %indirectarg1397, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1392, ptr align 8 %indirectarg1393, ptr align 8 %indirectarg1394, i32 221, ptr align 8 %indirectarg1397), !dbg !2360
  unreachable, !dbg !2360

panic1400:                                        ; preds = %checkok1398
  store i64 2, ptr %taddr1401, align 8
  %912 = insertvalue %any undef, ptr %taddr1401, 0
  %913 = insertvalue %any %912, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1388, ptr %taddr1402, align 8
  %914 = insertvalue %any undef, ptr %taddr1402, 0
  %915 = insertvalue %any %914, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1403, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1404, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1405, align 8
  store %any %913, ptr %varargslots1406, align 16
  %ptradd1407 = getelementptr inbounds i8, ptr %varargslots1406, i64 16
  store %any %915, ptr %ptradd1407, align 16
  %916 = insertvalue %"any[]" undef, ptr %varargslots1406, 0
  %"$$temp1408" = insertvalue %"any[]" %916, i64 2, 1
  store %"any[]" %"$$temp1408", ptr %indirectarg1409, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1403, ptr align 8 %indirectarg1404, ptr align 8 %indirectarg1405, i32 221, ptr align 8 %indirectarg1409), !dbg !2360
  unreachable, !dbg !2360

panic1421:                                        ; preds = %if.exit1416
  store i64 %sext1419, ptr %taddr1422, align 8
  %917 = insertvalue %any undef, ptr %taddr1422, 0
  %918 = insertvalue %any %917, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1423, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1424, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1425, align 8
  store %any %918, ptr %varargslots1426, align 16
  %919 = insertvalue %"any[]" undef, ptr %varargslots1426, 0
  %"$$temp1427" = insertvalue %"any[]" %919, i64 1, 1
  store %"any[]" %"$$temp1427", ptr %indirectarg1428, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1423, ptr align 8 %indirectarg1424, ptr align 8 %indirectarg1425, i32 226, ptr align 8 %indirectarg1428), !dbg !2364
  unreachable, !dbg !2364

panic1431:                                        ; preds = %checkok1429
  store i64 128, ptr %taddr1432, align 8
  %920 = insertvalue %any undef, ptr %taddr1432, 0
  %921 = insertvalue %any %920, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1419, ptr %taddr1433, align 8
  %922 = insertvalue %any undef, ptr %taddr1433, 0
  %923 = insertvalue %any %922, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1434, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1435, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1436, align 8
  store %any %921, ptr %varargslots1437, align 16
  %ptradd1438 = getelementptr inbounds i8, ptr %varargslots1437, i64 16
  store %any %923, ptr %ptradd1438, align 16
  %924 = insertvalue %"any[]" undef, ptr %varargslots1437, 0
  %"$$temp1439" = insertvalue %"any[]" %924, i64 2, 1
  store %"any[]" %"$$temp1439", ptr %indirectarg1440, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1434, ptr align 8 %indirectarg1435, ptr align 8 %indirectarg1436, i32 226, ptr align 8 %indirectarg1440), !dbg !2364
  unreachable, !dbg !2364

panic1445:                                        ; preds = %checkok1441
  store i64 %sext1443, ptr %taddr1446, align 8
  %925 = insertvalue %any undef, ptr %taddr1446, 0
  %926 = insertvalue %any %925, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1447, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1448, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1449, align 8
  store %any %926, ptr %varargslots1450, align 16
  %927 = insertvalue %"any[]" undef, ptr %varargslots1450, 0
  %"$$temp1451" = insertvalue %"any[]" %927, i64 1, 1
  store %"any[]" %"$$temp1451", ptr %indirectarg1452, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1447, ptr align 8 %indirectarg1448, ptr align 8 %indirectarg1449, i32 226, ptr align 8 %indirectarg1452), !dbg !2364
  unreachable, !dbg !2364

panic1455:                                        ; preds = %checkok1453
  store i64 2, ptr %taddr1456, align 8
  %928 = insertvalue %any undef, ptr %taddr1456, 0
  %929 = insertvalue %any %928, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1443, ptr %taddr1457, align 8
  %930 = insertvalue %any undef, ptr %taddr1457, 0
  %931 = insertvalue %any %930, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1458, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1459, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1460, align 8
  store %any %929, ptr %varargslots1461, align 16
  %ptradd1462 = getelementptr inbounds i8, ptr %varargslots1461, i64 16
  store %any %931, ptr %ptradd1462, align 16
  %932 = insertvalue %"any[]" undef, ptr %varargslots1461, 0
  %"$$temp1463" = insertvalue %"any[]" %932, i64 2, 1
  store %"any[]" %"$$temp1463", ptr %indirectarg1464, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1458, ptr align 8 %indirectarg1459, ptr align 8 %indirectarg1460, i32 226, ptr align 8 %indirectarg1464), !dbg !2364
  unreachable, !dbg !2364

panic1489:                                        ; preds = %loop.body1485
  store i64 %sext1487, ptr %taddr1490, align 8
  %933 = insertvalue %any undef, ptr %taddr1490, 0
  %934 = insertvalue %any %933, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1491, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1492, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1493, align 8
  store %any %934, ptr %varargslots1494, align 16
  %935 = insertvalue %"any[]" undef, ptr %varargslots1494, 0
  %"$$temp1495" = insertvalue %"any[]" %935, i64 1, 1
  store %"any[]" %"$$temp1495", ptr %indirectarg1496, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1491, ptr align 8 %indirectarg1492, ptr align 8 %indirectarg1493, i32 233, ptr align 8 %indirectarg1496), !dbg !2372
  unreachable, !dbg !2372

panic1499:                                        ; preds = %checkok1497
  store i64 128, ptr %taddr1500, align 8
  %936 = insertvalue %any undef, ptr %taddr1500, 0
  %937 = insertvalue %any %936, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1487, ptr %taddr1501, align 8
  %938 = insertvalue %any undef, ptr %taddr1501, 0
  %939 = insertvalue %any %938, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1502, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1503, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1504, align 8
  store %any %937, ptr %varargslots1505, align 16
  %ptradd1506 = getelementptr inbounds i8, ptr %varargslots1505, i64 16
  store %any %939, ptr %ptradd1506, align 16
  %940 = insertvalue %"any[]" undef, ptr %varargslots1505, 0
  %"$$temp1507" = insertvalue %"any[]" %940, i64 2, 1
  store %"any[]" %"$$temp1507", ptr %indirectarg1508, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1502, ptr align 8 %indirectarg1503, ptr align 8 %indirectarg1504, i32 233, ptr align 8 %indirectarg1508), !dbg !2372
  unreachable, !dbg !2372

panic1511:                                        ; preds = %checkok1509
  store i32 %496, ptr %taddr1512, align 4
  %941 = insertvalue %any undef, ptr %taddr1512, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1513, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1514, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1515, align 8
  store %any %942, ptr %varargslots1516, align 16
  %943 = insertvalue %"any[]" undef, ptr %varargslots1516, 0
  %"$$temp1517" = insertvalue %"any[]" %943, i64 1, 1
  store %"any[]" %"$$temp1517", ptr %indirectarg1518, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1513, ptr align 8 %indirectarg1514, ptr align 8 %indirectarg1515, i32 233, ptr align 8 %indirectarg1518), !dbg !2372
  unreachable, !dbg !2372

panic1521:                                        ; preds = %checkok1519
  store i32 %496, ptr %taddr1522, align 4
  %944 = insertvalue %any undef, ptr %taddr1522, 0
  %945 = insertvalue %any %944, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1523, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1524, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1525, align 8
  store %any %945, ptr %varargslots1526, align 16
  %946 = insertvalue %"any[]" undef, ptr %varargslots1526, 0
  %"$$temp1527" = insertvalue %"any[]" %946, i64 1, 1
  store %"any[]" %"$$temp1527", ptr %indirectarg1528, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1523, ptr align 8 %indirectarg1524, ptr align 8 %indirectarg1525, i32 233, ptr align 8 %indirectarg1528), !dbg !2372
  unreachable, !dbg !2372

panic1535:                                        ; preds = %checkok1529
  store i64 %sext1533, ptr %taddr1536, align 8
  %947 = insertvalue %any undef, ptr %taddr1536, 0
  %948 = insertvalue %any %947, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1537, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1538, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1539, align 8
  store %any %948, ptr %varargslots1540, align 16
  %949 = insertvalue %"any[]" undef, ptr %varargslots1540, 0
  %"$$temp1541" = insertvalue %"any[]" %949, i64 1, 1
  store %"any[]" %"$$temp1541", ptr %indirectarg1542, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1537, ptr align 8 %indirectarg1538, ptr align 8 %indirectarg1539, i32 234, ptr align 8 %indirectarg1542), !dbg !2373
  unreachable, !dbg !2373

panic1545:                                        ; preds = %checkok1543
  store i64 128, ptr %taddr1546, align 8
  %950 = insertvalue %any undef, ptr %taddr1546, 0
  %951 = insertvalue %any %950, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1533, ptr %taddr1547, align 8
  %952 = insertvalue %any undef, ptr %taddr1547, 0
  %953 = insertvalue %any %952, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1548, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1549, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1550, align 8
  store %any %951, ptr %varargslots1551, align 16
  %ptradd1552 = getelementptr inbounds i8, ptr %varargslots1551, i64 16
  store %any %953, ptr %ptradd1552, align 16
  %954 = insertvalue %"any[]" undef, ptr %varargslots1551, 0
  %"$$temp1553" = insertvalue %"any[]" %954, i64 2, 1
  store %"any[]" %"$$temp1553", ptr %indirectarg1554, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1548, ptr align 8 %indirectarg1549, ptr align 8 %indirectarg1550, i32 234, ptr align 8 %indirectarg1554), !dbg !2373
  unreachable, !dbg !2373

panic1559:                                        ; preds = %checkok1555
  store i64 %sext1557, ptr %taddr1560, align 8
  %955 = insertvalue %any undef, ptr %taddr1560, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1561, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1562, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1563, align 8
  store %any %956, ptr %varargslots1564, align 16
  %957 = insertvalue %"any[]" undef, ptr %varargslots1564, 0
  %"$$temp1565" = insertvalue %"any[]" %957, i64 1, 1
  store %"any[]" %"$$temp1565", ptr %indirectarg1566, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1561, ptr align 8 %indirectarg1562, ptr align 8 %indirectarg1563, i32 234, ptr align 8 %indirectarg1566), !dbg !2373
  unreachable, !dbg !2373

panic1569:                                        ; preds = %checkok1567
  store i64 128, ptr %taddr1570, align 8
  %958 = insertvalue %any undef, ptr %taddr1570, 0
  %959 = insertvalue %any %958, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1557, ptr %taddr1571, align 8
  %960 = insertvalue %any undef, ptr %taddr1571, 0
  %961 = insertvalue %any %960, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1572, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1573, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1574, align 8
  store %any %959, ptr %varargslots1575, align 16
  %ptradd1576 = getelementptr inbounds i8, ptr %varargslots1575, i64 16
  store %any %961, ptr %ptradd1576, align 16
  %962 = insertvalue %"any[]" undef, ptr %varargslots1575, 0
  %"$$temp1577" = insertvalue %"any[]" %962, i64 2, 1
  store %"any[]" %"$$temp1577", ptr %indirectarg1578, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1572, ptr align 8 %indirectarg1573, ptr align 8 %indirectarg1574, i32 234, ptr align 8 %indirectarg1578), !dbg !2373
  unreachable, !dbg !2373

panic1582:                                        ; preds = %checkok1579
  store i32 %507, ptr %taddr1583, align 4
  %963 = insertvalue %any undef, ptr %taddr1583, 0
  %964 = insertvalue %any %963, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1584, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1585, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1586, align 8
  store %any %964, ptr %varargslots1587, align 16
  %965 = insertvalue %"any[]" undef, ptr %varargslots1587, 0
  %"$$temp1588" = insertvalue %"any[]" %965, i64 1, 1
  store %"any[]" %"$$temp1588", ptr %indirectarg1589, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1584, ptr align 8 %indirectarg1585, ptr align 8 %indirectarg1586, i32 234, ptr align 8 %indirectarg1589), !dbg !2373
  unreachable, !dbg !2373

panic1594:                                        ; preds = %checkok1590
  store i32 %511, ptr %taddr1595, align 4
  %966 = insertvalue %any undef, ptr %taddr1595, 0
  %967 = insertvalue %any %966, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1596, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1597, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1598, align 8
  store %any %967, ptr %varargslots1599, align 16
  %968 = insertvalue %"any[]" undef, ptr %varargslots1599, 0
  %"$$temp1600" = insertvalue %"any[]" %968, i64 1, 1
  store %"any[]" %"$$temp1600", ptr %indirectarg1601, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1596, ptr align 8 %indirectarg1597, ptr align 8 %indirectarg1598, i32 235, ptr align 8 %indirectarg1601), !dbg !2374
  unreachable, !dbg !2374

panic1604:                                        ; preds = %checkok1602
  store i32 %511, ptr %taddr1605, align 4
  %969 = insertvalue %any undef, ptr %taddr1605, 0
  %970 = insertvalue %any %969, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.82, i64 35 }, ptr %indirectarg1606, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1607, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1608, align 8
  store %any %970, ptr %varargslots1609, align 16
  %971 = insertvalue %"any[]" undef, ptr %varargslots1609, 0
  %"$$temp1610" = insertvalue %"any[]" %971, i64 1, 1
  store %"any[]" %"$$temp1610", ptr %indirectarg1611, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1606, ptr align 8 %indirectarg1607, ptr align 8 %indirectarg1608, i32 235, ptr align 8 %indirectarg1611), !dbg !2374
  unreachable, !dbg !2374

panic1618:                                        ; preds = %and.rhs1615
  store i64 %sext1616, ptr %taddr1619, align 8
  %972 = insertvalue %any undef, ptr %taddr1619, 0
  %973 = insertvalue %any %972, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1620, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1621, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1622, align 8
  store %any %973, ptr %varargslots1623, align 16
  %974 = insertvalue %"any[]" undef, ptr %varargslots1623, 0
  %"$$temp1624" = insertvalue %"any[]" %974, i64 1, 1
  store %"any[]" %"$$temp1624", ptr %indirectarg1625, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1620, ptr align 8 %indirectarg1621, ptr align 8 %indirectarg1622, i32 236, ptr align 8 %indirectarg1625), !dbg !2375
  unreachable, !dbg !2375

panic1628:                                        ; preds = %checkok1626
  store i64 128, ptr %taddr1629, align 8
  %975 = insertvalue %any undef, ptr %taddr1629, 0
  %976 = insertvalue %any %975, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1616, ptr %taddr1630, align 8
  %977 = insertvalue %any undef, ptr %taddr1630, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1631, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1632, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1633, align 8
  store %any %976, ptr %varargslots1634, align 16
  %ptradd1635 = getelementptr inbounds i8, ptr %varargslots1634, i64 16
  store %any %978, ptr %ptradd1635, align 16
  %979 = insertvalue %"any[]" undef, ptr %varargslots1634, 0
  %"$$temp1636" = insertvalue %"any[]" %979, i64 2, 1
  store %"any[]" %"$$temp1636", ptr %indirectarg1637, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1631, ptr align 8 %indirectarg1632, ptr align 8 %indirectarg1633, i32 236, ptr align 8 %indirectarg1637), !dbg !2375
  unreachable, !dbg !2375

panic1660:                                        ; preds = %if.then1657
  store i64 %sext1658, ptr %taddr1661, align 8
  %980 = insertvalue %any undef, ptr %taddr1661, 0
  %981 = insertvalue %any %980, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1662, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1663, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1664, align 8
  store %any %981, ptr %varargslots1665, align 16
  %982 = insertvalue %"any[]" undef, ptr %varargslots1665, 0
  %"$$temp1666" = insertvalue %"any[]" %982, i64 1, 1
  store %"any[]" %"$$temp1666", ptr %indirectarg1667, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1662, ptr align 8 %indirectarg1663, ptr align 8 %indirectarg1664, i32 247, ptr align 8 %indirectarg1667), !dbg !2383
  unreachable, !dbg !2383

panic1670:                                        ; preds = %checkok1668
  store i64 128, ptr %taddr1671, align 8
  %983 = insertvalue %any undef, ptr %taddr1671, 0
  %984 = insertvalue %any %983, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1658, ptr %taddr1672, align 8
  %985 = insertvalue %any undef, ptr %taddr1672, 0
  %986 = insertvalue %any %985, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1673, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1674, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1675, align 8
  store %any %984, ptr %varargslots1676, align 16
  %ptradd1677 = getelementptr inbounds i8, ptr %varargslots1676, i64 16
  store %any %986, ptr %ptradd1677, align 16
  %987 = insertvalue %"any[]" undef, ptr %varargslots1676, 0
  %"$$temp1678" = insertvalue %"any[]" %987, i64 2, 1
  store %"any[]" %"$$temp1678", ptr %indirectarg1679, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1673, ptr align 8 %indirectarg1674, ptr align 8 %indirectarg1675, i32 247, ptr align 8 %indirectarg1679), !dbg !2383
  unreachable, !dbg !2383

panic1689:                                        ; preds = %if.else1684
  store i64 %sext1687, ptr %taddr1690, align 8
  %988 = insertvalue %any undef, ptr %taddr1690, 0
  %989 = insertvalue %any %988, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1691, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1692, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1693, align 8
  store %any %989, ptr %varargslots1694, align 16
  %990 = insertvalue %"any[]" undef, ptr %varargslots1694, 0
  %"$$temp1695" = insertvalue %"any[]" %990, i64 1, 1
  store %"any[]" %"$$temp1695", ptr %indirectarg1696, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1691, ptr align 8 %indirectarg1692, ptr align 8 %indirectarg1693, i32 252, ptr align 8 %indirectarg1696), !dbg !2386
  unreachable, !dbg !2386

panic1699:                                        ; preds = %checkok1697
  store i64 128, ptr %taddr1700, align 8
  %991 = insertvalue %any undef, ptr %taddr1700, 0
  %992 = insertvalue %any %991, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1687, ptr %taddr1701, align 8
  %993 = insertvalue %any undef, ptr %taddr1701, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1702, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1703, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1704, align 8
  store %any %992, ptr %varargslots1705, align 16
  %ptradd1706 = getelementptr inbounds i8, ptr %varargslots1705, i64 16
  store %any %994, ptr %ptradd1706, align 16
  %995 = insertvalue %"any[]" undef, ptr %varargslots1705, 0
  %"$$temp1707" = insertvalue %"any[]" %995, i64 2, 1
  store %"any[]" %"$$temp1707", ptr %indirectarg1708, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1702, ptr align 8 %indirectarg1703, ptr align 8 %indirectarg1704, i32 252, ptr align 8 %indirectarg1708), !dbg !2386
  unreachable, !dbg !2386

panic1729:                                        ; preds = %if.then1723
  store i64 %sext1727, ptr %taddr1730, align 8
  %996 = insertvalue %any undef, ptr %taddr1730, 0
  %997 = insertvalue %any %996, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1731, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1732, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1733, align 8
  store %any %997, ptr %varargslots1734, align 16
  %998 = insertvalue %"any[]" undef, ptr %varargslots1734, 0
  %"$$temp1735" = insertvalue %"any[]" %998, i64 1, 1
  store %"any[]" %"$$temp1735", ptr %indirectarg1736, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1731, ptr align 8 %indirectarg1732, ptr align 8 %indirectarg1733, i32 262, ptr align 8 %indirectarg1736), !dbg !2394
  unreachable, !dbg !2394

panic1739:                                        ; preds = %checkok1737
  store i64 128, ptr %taddr1740, align 8
  %999 = insertvalue %any undef, ptr %taddr1740, 0
  %1000 = insertvalue %any %999, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1727, ptr %taddr1741, align 8
  %1001 = insertvalue %any undef, ptr %taddr1741, 0
  %1002 = insertvalue %any %1001, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1742, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1743, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1744, align 8
  store %any %1000, ptr %varargslots1745, align 16
  %ptradd1746 = getelementptr inbounds i8, ptr %varargslots1745, i64 16
  store %any %1002, ptr %ptradd1746, align 16
  %1003 = insertvalue %"any[]" undef, ptr %varargslots1745, 0
  %"$$temp1747" = insertvalue %"any[]" %1003, i64 2, 1
  store %"any[]" %"$$temp1747", ptr %indirectarg1748, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1742, ptr align 8 %indirectarg1743, ptr align 8 %indirectarg1744, i32 262, ptr align 8 %indirectarg1748), !dbg !2394
  unreachable, !dbg !2394

panic1757:                                        ; preds = %if.exit1751
  store i64 %sext1755, ptr %taddr1758, align 8
  %1004 = insertvalue %any undef, ptr %taddr1758, 0
  %1005 = insertvalue %any %1004, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1759, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1760, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1761, align 8
  store %any %1005, ptr %varargslots1762, align 16
  %1006 = insertvalue %"any[]" undef, ptr %varargslots1762, 0
  %"$$temp1763" = insertvalue %"any[]" %1006, i64 1, 1
  store %"any[]" %"$$temp1763", ptr %indirectarg1764, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1759, ptr align 8 %indirectarg1760, ptr align 8 %indirectarg1761, i32 263, ptr align 8 %indirectarg1764), !dbg !2396
  unreachable, !dbg !2396

panic1767:                                        ; preds = %checkok1765
  store i64 128, ptr %taddr1768, align 8
  %1007 = insertvalue %any undef, ptr %taddr1768, 0
  %1008 = insertvalue %any %1007, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1755, ptr %taddr1769, align 8
  %1009 = insertvalue %any undef, ptr %taddr1769, 0
  %1010 = insertvalue %any %1009, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1770, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1771, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1772, align 8
  store %any %1008, ptr %varargslots1773, align 16
  %ptradd1774 = getelementptr inbounds i8, ptr %varargslots1773, i64 16
  store %any %1010, ptr %ptradd1774, align 16
  %1011 = insertvalue %"any[]" undef, ptr %varargslots1773, 0
  %"$$temp1775" = insertvalue %"any[]" %1011, i64 2, 1
  store %"any[]" %"$$temp1775", ptr %indirectarg1776, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1770, ptr align 8 %indirectarg1771, ptr align 8 %indirectarg1772, i32 263, ptr align 8 %indirectarg1776), !dbg !2396
  unreachable, !dbg !2396

panic1813:                                        ; preds = %if.then1800
  store %"char[]" { ptr @.panic_msg.83, i64 10 }, ptr %indirectarg1814, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1815, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1816, align 8
  %1012 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1012(ptr align 8 %indirectarg1814, ptr align 8 %indirectarg1815, ptr align 8 %indirectarg1816, i32 284), !dbg !2420
  unreachable, !dbg !2420

panic1829:                                        ; preds = %if.then1824
  store i64 %sext1827, ptr %taddr1830, align 8
  %1013 = insertvalue %any undef, ptr %taddr1830, 0
  %1014 = insertvalue %any %1013, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 38 }, ptr %indirectarg1831, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1832, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1833, align 8
  store %any %1014, ptr %varargslots1834, align 16
  %1015 = insertvalue %"any[]" undef, ptr %varargslots1834, 0
  %"$$temp1835" = insertvalue %"any[]" %1015, i64 1, 1
  store %"any[]" %"$$temp1835", ptr %indirectarg1836, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1831, ptr align 8 %indirectarg1832, ptr align 8 %indirectarg1833, i32 292, ptr align 8 %indirectarg1836), !dbg !2428
  unreachable, !dbg !2428

panic1839:                                        ; preds = %checkok1837
  store i64 128, ptr %taddr1840, align 8
  %1016 = insertvalue %any undef, ptr %taddr1840, 0
  %1017 = insertvalue %any %1016, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1827, ptr %taddr1841, align 8
  %1018 = insertvalue %any undef, ptr %taddr1841, 0
  %1019 = insertvalue %any %1018, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg1842, align 8
  store %"char[]" { ptr @.file.72, i64 17 }, ptr %indirectarg1843, align 8
  store %"char[]" { ptr @.func.84, i64 8 }, ptr %indirectarg1844, align 8
  store %any %1017, ptr %varargslots1845, align 16
  %ptradd1846 = getelementptr inbounds i8, ptr %varargslots1845, i64 16
  store %any %1019, ptr %ptradd1846, align 16
  %1020 = insertvalue %"any[]" undef, ptr %varargslots1845, 0
  %"$$temp1847" = insertvalue %"any[]" %1020, i64 2, 1
  store %"any[]" %"$$temp1847", ptr %indirectarg1848, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1842, ptr align 8 %indirectarg1843, ptr align 8 %indirectarg1844, i32 292, ptr align 8 %indirectarg1848), !dbg !2428
  unreachable, !dbg !2428
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.splitter(ptr noalias sret(%Splitter) align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2459 {
entry:
  %literal = alloca %Splitter, align 8
    #dbg_declare(ptr %1, !2469, !DIExpression(), !2470)
    #dbg_declare(ptr %2, !2471, !DIExpression(), !2470)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !2472
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !2472
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %2, i32 16, i1 false), !dbg !2472
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !2472
  ret void, !dbg !2472
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.String.tokenize(ptr noalias sret(%Splitter) align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2473 {
entry:
  %literal = alloca %Splitter, align 8
    #dbg_declare(ptr %1, !2474, !DIExpression(), !2475)
    #dbg_declare(ptr %2, !2476, !DIExpression(), !2475)
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !2477
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !2477
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %2, i32 16, i1 false), !dbg !2477
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 40, !dbg !2477
  store i8 1, ptr %ptradd1, align 8, !dbg !2477
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !2477
  ret void, !dbg !2477
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.Splitter.reset(ptr %0) #0 comdat !dbg !2478 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2482
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2482
  br i1 %2, label %panic, label %checkok, !dbg !2482

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2483, !DIExpression(), !2484)
  %3 = load ptr, ptr %self, align 8, !dbg !2485
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2485
  store i64 0, ptr %ptradd, align 8, !dbg !2485
  ret void, !dbg !2485

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.89, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.90, i64 5 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 793), !dbg !2484
  unreachable, !dbg !2484
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.Splitter.next(ptr %0, ptr %1) #0 comdat !dbg !2486 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %current = alloca i64, align 8
  %remaining = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %next = alloca i64, align 8
  %next.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %varargslots31 = alloca [2 x %any], align 16
  %indirectarg34 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca i64, align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots43 = alloca [2 x %any], align 16
  %indirectarg46 = alloca %"any[]", align 8
  %reterr51 = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2489
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2489
  br i1 %3, label %panic, label %checkok, !dbg !2489

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2490, !DIExpression(), !2491)
  br label %loop.body, !dbg !2492

loop.body:                                        ; preds = %if.then22, %checkok
    #dbg_declare(ptr %len, !2493, !DIExpression(), !2496)
  %4 = load ptr, ptr %self, align 8, !dbg !2496
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2496
  %5 = load i64, ptr %ptradd, align 8, !dbg !2496
  store i64 %5, ptr %len, align 8, !dbg !2496
    #dbg_declare(ptr %current, !2497, !DIExpression(), !2498)
  %6 = load ptr, ptr %self, align 8, !dbg !2498
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !2498
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2498
  store i64 %7, ptr %current, align 8, !dbg !2498
  %8 = load i64, ptr %current, align 8, !dbg !2499
  %9 = load i64, ptr %len, align 8, !dbg !2499
  %ge = icmp uge i64 %8, %9, !dbg !2499
  br i1 %ge, label %if.then, label %if.exit, !dbg !2499

if.then:                                          ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" to i64), !dbg !2499

if.exit:                                          ; preds = %loop.body
    #dbg_declare(ptr %remaining, !2500, !DIExpression(), !2501)
  %10 = load ptr, ptr %self, align 8, !dbg !2501
  %11 = load %"char[]", ptr %10, align 8, !dbg !2501
  %12 = extractvalue %"char[]" %11, 0, !dbg !2501
  %13 = load i64, ptr %current, align 8, !dbg !2501
  %14 = extractvalue %"char[]" %11, 1, !dbg !2501
  %gt = icmp ugt i64 %13, %14, !dbg !2501
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2501
  br i1 %15, label %panic4, label %checkok11, !dbg !2501

checkok11:                                        ; preds = %if.exit
  %size = sub i64 %14, %13, !dbg !2501
  %ptradd12 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !2501
  %16 = insertvalue %"char[]" undef, ptr %ptradd12, 0, !dbg !2501
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2501
  store %"char[]" %17, ptr %remaining, align 8, !dbg !2501
    #dbg_declare(ptr %next, !2502, !DIExpression(), !2503)
  %18 = load ptr, ptr %self, align 8, !dbg !2503
  %ptradd13 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !2503
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg14, ptr align 8 %remaining, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg15, ptr align 8 %ptradd13, i32 16, i1 false)
  %19 = call i64 @std.core.String.index_of(ptr %retparam, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15), !dbg !2503
  %not_err = icmp eq i64 %19, 0, !dbg !2503
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2503
  br i1 %20, label %after_check, label %assign_optional, !dbg !2503

assign_optional:                                  ; preds = %checkok11
  store i64 %19, ptr %next.f, align 8, !dbg !2503
  br label %after_assign, !dbg !2503

after_check:                                      ; preds = %checkok11
  %21 = load i64, ptr %retparam, align 8, !dbg !2503
  store i64 %21, ptr %next, align 8, !dbg !2503
  store i64 0, ptr %next.f, align 8, !dbg !2503
  br label %after_assign, !dbg !2503

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %next.f, align 8, !dbg !2504
  %result = icmp eq i64 %load.err, 0, !dbg !2504
  br i1 %result, label %if.then16, label %if.exit49, !dbg !2504

if.then16:                                        ; preds = %after_assign
  %22 = load ptr, ptr %self, align 8, !dbg !2505
  %ptradd17 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !2505
  %23 = load i64, ptr %current, align 8, !dbg !2505
  %24 = load i64, ptr %next, align 8, !dbg !2505
  %add = add i64 %23, %24, !dbg !2505
  %25 = load ptr, ptr %self, align 8, !dbg !2505
  %ptradd18 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !2505
  %ptradd19 = getelementptr inbounds i8, ptr %ptradd18, i64 8, !dbg !2505
  %26 = load i64, ptr %ptradd19, align 8, !dbg !2505
  %add20 = add i64 %add, %26, !dbg !2505
  store i64 %add20, ptr %ptradd17, align 8, !dbg !2505
  %27 = load i64, ptr %next, align 8, !dbg !2507
  %i2nb = icmp eq i64 %27, 0, !dbg !2507
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !2507

and.rhs:                                          ; preds = %if.then16
  %28 = load ptr, ptr %self, align 8, !dbg !2507
  %ptradd21 = getelementptr inbounds i8, ptr %28, i64 40, !dbg !2507
  %29 = load i8, ptr %ptradd21, align 8, !dbg !2507
  %30 = trunc i8 %29 to i1, !dbg !2507
  br label %and.phi, !dbg !2507

and.phi:                                          ; preds = %and.rhs, %if.then16
  %val = phi i1 [ false, %if.then16 ], [ %30, %and.rhs ], !dbg !2507
  br i1 %val, label %if.then22, label %if.exit23, !dbg !2507

if.then22:                                        ; preds = %and.phi
  br label %loop.body, !dbg !2507

if.exit23:                                        ; preds = %and.phi
  %31 = load %"char[]", ptr %remaining, align 8, !dbg !2508
  %32 = extractvalue %"char[]" %31, 0, !dbg !2508
  %33 = extractvalue %"char[]" %31, 1, !dbg !2508
  %gt24 = icmp ugt i64 0, %33, !dbg !2508
  %34 = call i1 @llvm.expect.i1(i1 %gt24, i1 false), !dbg !2508
  br i1 %34, label %panic25, label %checkok35, !dbg !2508

checkok35:                                        ; preds = %if.exit23
  %35 = load i64, ptr %next, align 8, !dbg !2508
  %add36 = add i64 0, %35, !dbg !2508
  %lt = icmp ult i64 %33, %add36, !dbg !2508
  %sub = sub i64 %add36, 1, !dbg !2508
  %36 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2508
  br i1 %36, label %panic37, label %checkok47, !dbg !2508

checkok47:                                        ; preds = %checkok35
  %size48 = sub i64 %add36, 0, !dbg !2508
  %37 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !2508
  %38 = insertvalue %"char[]" %37, i64 %size48, 1, !dbg !2508
  store %"char[]" %38, ptr %0, align 8, !dbg !2508
  ret i64 0, !dbg !2508

if.exit49:                                        ; preds = %after_assign
  %39 = load ptr, ptr %self, align 8, !dbg !2509
  %ptradd50 = getelementptr inbounds i8, ptr %39, i64 32, !dbg !2509
  %40 = load i64, ptr %len, align 8, !dbg !2509
  store i64 %40, ptr %ptradd50, align 8, !dbg !2509
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %remaining, i32 16, i1 false), !dbg !2510
  ret i64 0, !dbg !2510

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.89, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.91, i64 4 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 798), !dbg !2491
  unreachable, !dbg !2491

panic4:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr5, align 8
  %44 = insertvalue %any undef, ptr %taddr5, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.91, i64 4 }, ptr %indirectarg8, align 8
  store %any %43, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd9, align 16
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 805, ptr align 8 %indirectarg10), !dbg !2501
  unreachable, !dbg !2501

panic25:                                          ; preds = %if.exit23
  store i64 %33, ptr %taddr26, align 8
  %47 = insertvalue %any undef, ptr %taddr26, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr27, align 8
  %49 = insertvalue %any undef, ptr %taddr27, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.91, i64 4 }, ptr %indirectarg30, align 8
  store %any %48, ptr %varargslots31, align 16
  %ptradd32 = getelementptr inbounds i8, ptr %varargslots31, i64 16
  store %any %50, ptr %ptradd32, align 16
  %51 = insertvalue %"any[]" undef, ptr %varargslots31, 0
  %"$$temp33" = insertvalue %"any[]" %51, i64 2, 1
  store %"any[]" %"$$temp33", ptr %indirectarg34, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 811, ptr align 8 %indirectarg34), !dbg !2508
  unreachable, !dbg !2508

panic37:                                          ; preds = %checkok35
  store i64 %sub, ptr %taddr38, align 8
  %52 = insertvalue %any undef, ptr %taddr38, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr39, align 8
  %54 = insertvalue %any undef, ptr %taddr39, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.91, i64 4 }, ptr %indirectarg42, align 8
  store %any %53, ptr %varargslots43, align 16
  %ptradd44 = getelementptr inbounds i8, ptr %varargslots43, i64 16
  store %any %55, ptr %ptradd44, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp45" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp45", ptr %indirectarg46, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 811, ptr align 8 %indirectarg46), !dbg !2508
  unreachable, !dbg !2508
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.string.tformat_zstr(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !2511 {
entry:
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"any[]", align 8
    #dbg_declare(ptr %0, !2523, !DIExpression(), !2524)
    #dbg_declare(ptr %1, !2525, !DIExpression(), !2524)
    #dbg_declare(ptr %str, !2526, !DIExpression(), !2530)
  %ptradd = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2530
  %2 = load i64, ptr %ptradd, align 8, !dbg !2530
  %ptradd1 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2530
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2530
  %mul = mul i64 %3, 8, !dbg !2530
  %add = add i64 %2, %mul, !dbg !2530
  %4 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !2530
  store ptr %4, ptr %str, align 8, !dbg !2530
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %1, i32 16, i1 false)
  %5 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !2531
  %6 = call ptr @std.core.dstring.DString.zstr_view(ptr %str), !dbg !2532
  ret ptr %6, !dbg !2532
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.format(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2533 {
entry:
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg6 = alloca %any, align 8
    #dbg_declare(ptr %1, !2536, !DIExpression(), !2537)
    #dbg_declare(ptr %2, !2538, !DIExpression(), !2537)
    #dbg_declare(ptr %3, !2539, !DIExpression(), !2537)
    #dbg_declare(ptr %current, !2540, !DIExpression(), !2562)
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2564
  %i2nb = icmp eq ptr %4, null, !dbg !2564
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2564

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2566
  br label %if.exit, !dbg !2566

if.exit:                                          ; preds = %if.then, %entry
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2568
  store ptr %5, ptr %current, align 8, !dbg !2568
    #dbg_declare(ptr %original, !2569, !DIExpression(), !2570)
  %6 = load ptr, ptr %current, align 8, !dbg !2570
  store ptr %6, ptr %original, align 8, !dbg !2570
  %7 = load ptr, ptr %current, align 8, !dbg !2571
  %8 = load ptr, ptr %3, align 8, !dbg !2571
  %eq = icmp eq ptr %7, %8, !dbg !2571
  br i1 %eq, label %if.then1, label %if.exit2, !dbg !2571

if.then1:                                         ; preds = %if.exit
  %9 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !2571
  store ptr %9, ptr %current, align 8, !dbg !2571
  br label %if.exit2, !dbg !2571

if.exit2:                                         ; preds = %if.then1, %if.exit
    #dbg_declare(ptr %mark, !2572, !DIExpression(), !2573)
  %10 = load ptr, ptr %current, align 8, !dbg !2573
  %ptradd = getelementptr inbounds i8, ptr %10, i64 24, !dbg !2573
  %11 = load i64, ptr %ptradd, align 8, !dbg !2573
  store i64 %11, ptr %mark, align 8, !dbg !2573
    #dbg_declare(ptr %str, !2574, !DIExpression(), !2576)
  %ptradd3 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2576
  %12 = load i64, ptr %ptradd3, align 8, !dbg !2576
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2576
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2576
  %mul = mul i64 %13, 8, !dbg !2576
  %add = add i64 %12, %mul, !dbg !2576
  %14 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !2576
  store ptr %14, ptr %str, align 8, !dbg !2576
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %2, i32 16, i1 false)
  %15 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg5), !dbg !2577
  %16 = load ptr, ptr %str, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg6, ptr align 8 %3, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %16, ptr align 8 %indirectarg6), !dbg !2578
  %17 = load %"char[]", ptr %sretparam, align 8, !dbg !2578
  %18 = load ptr, ptr %current, align 8, !dbg !2579
  %19 = load i64, ptr %mark, align 8, !dbg !2579
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %18, i64 %19), !dbg !2579
  %20 = load ptr, ptr %original, align 8, !dbg !2581
  store ptr %20, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2581
  store %"char[]" %17, ptr %0, align 8, !dbg !2582
  ret void, !dbg !2582
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.new_format(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2583 {
entry:
  %sretparam = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %indirectarg2 = alloca %any, align 8
    #dbg_declare(ptr %1, !2584, !DIExpression(), !2585)
    #dbg_declare(ptr %2, !2586, !DIExpression(), !2585)
    #dbg_declare(ptr %3, !2587, !DIExpression(), !2585)
  %4 = load %any, ptr %3, align 8, !dbg !2585
  %5 = extractvalue %any %4, 0, !dbg !2585
  %ptrbool = icmp ne ptr %5, null, !dbg !2585
  br i1 %ptrbool, label %cond.phi, label %cond.rhs, !dbg !2585

cond.rhs:                                         ; preds = %entry
  %6 = load %any, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !2588
  br label %cond.phi, !dbg !2588

cond.phi:                                         ; preds = %cond.rhs, %entry
  %val = phi %any [ %4, %entry ], [ %6, %cond.rhs ], !dbg !2588
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  store %any %val, ptr %indirectarg2, align 8
  call void @std.core.string.format(ptr sret(%"char[]") align 8 %sretparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2), !dbg !2585
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !2585
  ret void, !dbg !2585
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.tformat(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2590 {
entry:
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"any[]", align 8
  %sretparam = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !2593, !DIExpression(), !2594)
    #dbg_declare(ptr %2, !2595, !DIExpression(), !2594)
    #dbg_declare(ptr %str, !2596, !DIExpression(), !2597)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2597
  %3 = load i64, ptr %ptradd, align 8, !dbg !2597
  %ptradd1 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2597
  %4 = load i64, ptr %ptradd1, align 8, !dbg !2597
  %mul = mul i64 %4, 8, !dbg !2597
  %add = add i64 %3, %mul, !dbg !2597
  %5 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !2597
  store ptr %5, ptr %str, align 8, !dbg !2597
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !2598
  %7 = load ptr, ptr %str, align 8
  call void @std.core.dstring.DString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %7), !dbg !2599
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %sretparam, i32 16, i1 false), !dbg !2599
  ret void, !dbg !2599
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.core.string.new_format_zstr(ptr align 8 %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2600 {
entry:
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"any[]", align 8
  %indirectarg6 = alloca %any, align 8
    #dbg_declare(ptr %0, !2603, !DIExpression(), !2604)
    #dbg_declare(ptr %1, !2605, !DIExpression(), !2604)
    #dbg_declare(ptr %2, !2606, !DIExpression(), !2604)
    #dbg_declare(ptr %current, !2607, !DIExpression(), !2609)
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2611
  %i2nb = icmp eq ptr %3, null, !dbg !2611
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2611

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2613
  br label %if.exit, !dbg !2613

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2615
  store ptr %4, ptr %current, align 8, !dbg !2615
    #dbg_declare(ptr %original, !2616, !DIExpression(), !2617)
  %5 = load ptr, ptr %current, align 8, !dbg !2617
  store ptr %5, ptr %original, align 8, !dbg !2617
  %6 = load ptr, ptr %current, align 8, !dbg !2618
  %7 = load ptr, ptr %2, align 8, !dbg !2618
  %eq = icmp eq ptr %6, %7, !dbg !2618
  br i1 %eq, label %if.then1, label %if.exit2, !dbg !2618

if.then1:                                         ; preds = %if.exit
  %8 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !2618
  store ptr %8, ptr %current, align 8, !dbg !2618
  br label %if.exit2, !dbg !2618

if.exit2:                                         ; preds = %if.then1, %if.exit
    #dbg_declare(ptr %mark, !2619, !DIExpression(), !2620)
  %9 = load ptr, ptr %current, align 8, !dbg !2620
  %ptradd = getelementptr inbounds i8, ptr %9, i64 24, !dbg !2620
  %10 = load i64, ptr %ptradd, align 8, !dbg !2620
  store i64 %10, ptr %mark, align 8, !dbg !2620
    #dbg_declare(ptr %str, !2621, !DIExpression(), !2623)
  %ptradd3 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !2623
  %11 = load i64, ptr %ptradd3, align 8, !dbg !2623
  %ptradd4 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2623
  %12 = load i64, ptr %ptradd4, align 8, !dbg !2623
  %mul = mul i64 %12, 8, !dbg !2623
  %add = add i64 %11, %mul, !dbg !2623
  %13 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !2623
  store ptr %13, ptr %str, align 8, !dbg !2623
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %0, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %1, i32 16, i1 false)
  %14 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, ptr align 8 %indirectarg, ptr align 8 %indirectarg5), !dbg !2624
  %15 = load ptr, ptr %str, align 8, !dbg !2625
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg6, ptr align 8 %2, i32 16, i1 false)
  %16 = call ptr @std.core.dstring.DString.copy_zstr(ptr %15, ptr align 8 %indirectarg6), !dbg !2625
  %17 = load ptr, ptr %current, align 8, !dbg !2626
  %18 = load i64, ptr %mark, align 8, !dbg !2626
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %17, i64 %18), !dbg !2626
  %19 = load ptr, ptr %original, align 8, !dbg !2628
  store ptr %19, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2628
  ret ptr %16, !dbg !2629
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.core.string.join_new(ptr noalias sret(%"char[]") align 8 %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2630 {
entry:
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %elements2 = alloca i64, align 8
  %allocator3 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 16
  %indirectarg33 = alloca %"any[]", align 8
  %total_size = alloca i64, align 8
  %.anon = alloca i64, align 8
  %.anon40 = alloca i64, align 8
  %str = alloca ptr, align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca i64, align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %varargslots49 = alloca [2 x %any], align 16
  %indirectarg52 = alloca %"any[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %res = alloca ptr, align 8
  %self = alloca ptr, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %value = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %.anon82 = alloca ptr, align 8
  %taddr85 = alloca i64, align 8
  %taddr86 = alloca i64, align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %varargslots90 = alloca [2 x %any], align 16
  %indirectarg93 = alloca %"any[]", align 8
  %taddr97 = alloca %"char[][]", align 8
  %.anon98 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %.anon106 = alloca i64, align 8
  %str110 = alloca ptr, align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %indirectarg115 = alloca %"char[]", align 8
  %taddr120 = alloca i64, align 8
  %taddr121 = alloca i64, align 8
  %indirectarg122 = alloca %"char[]", align 8
  %indirectarg123 = alloca %"char[]", align 8
  %indirectarg124 = alloca %"char[]", align 8
  %varargslots125 = alloca [2 x %any], align 16
  %indirectarg128 = alloca %"any[]", align 8
  %self131 = alloca ptr, align 8
  %value132 = alloca %"char[]", align 8
  %indirectarg133 = alloca %"char[]", align 8
  %self134 = alloca ptr, align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %value141 = alloca %"char[]", align 8
  %indirectarg142 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg145 = alloca %any, align 8
    #dbg_declare(ptr %1, !2633, !DIExpression(), !2634)
    #dbg_declare(ptr %2, !2635, !DIExpression(), !2634)
    #dbg_declare(ptr %3, !2636, !DIExpression(), !2634)
  store ptr null, ptr %.cachedtype, align 8, !dbg !2637
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2637
  %4 = load i64, ptr %ptradd, align 8, !dbg !2637
  %neq = icmp ne i64 %4, 0, !dbg !2637
  %not = xor i1 %neq, true, !dbg !2637
  br i1 %not, label %if.then, label %if.exit35, !dbg !2637

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %3, i32 16, i1 false)
  store i64 2, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %elements, align 8
  store i64 %5, ptr %elements2, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator1, i32 16, i1 false)
  %6 = load i64, ptr %elements2, align 8, !dbg !2638
  %mul = mul i64 1, %6, !dbg !2638
  store i64 %mul, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !2644
  %i2nb = icmp eq i64 %7, 0, !dbg !2644
  br i1 %i2nb, label %if.then4, label %if.exit, !dbg !2644

if.then4:                                         ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !2644
  br label %expr_block.exit, !dbg !2644

if.exit:                                          ; preds = %if.then
  %ptradd5 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !2646
  %8 = load i64, ptr %ptradd5, align 8, !dbg !2646
  %9 = inttoptr i64 %8 to ptr, !dbg !2646
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2637
  %10 = icmp eq ptr %9, %type, !dbg !2637
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !2637

cache_miss:                                       ; preds = %if.exit
  %ptradd6 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2637
  %11 = load ptr, ptr %ptradd6, align 8, !dbg !2637
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire"), !dbg !2637
  store ptr %12, ptr %.inlinecache, align 8, !dbg !2637
  store ptr %9, ptr %.cachedtype, align 8, !dbg !2637
  br label %13, !dbg !2637

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2637
  br label %13, !dbg !2637

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !2637
  %14 = icmp eq ptr %fn_phi, null, !dbg !2637
  br i1 %14, label %missing_function, label %match, !dbg !2637

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg8, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 80), !dbg !2648
  unreachable, !dbg !2648

match:                                            ; preds = %13
  %16 = load ptr, ptr %allocator3, align 8
  %17 = load i64, ptr %size, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, i64 %17, i32 1, i64 0), !dbg !2648
  %not_err = icmp eq i64 %18, 0, !dbg !2648
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2648
  br i1 %19, label %after_check, label %assign_optional, !dbg !2648

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %error_var, align 8, !dbg !2648
  br label %panic_block, !dbg !2648

after_check:                                      ; preds = %match
  %20 = load ptr, ptr %retparam, align 8, !dbg !2648
  store ptr %20, ptr %blockret, align 8, !dbg !2648
  br label %expr_block.exit, !dbg !2648

expr_block.exit:                                  ; preds = %after_check, %if.then4
  %21 = load ptr, ptr %blockret, align 8, !dbg !2648
  store ptr %21, ptr %taddr, align 8
  %22 = load ptr, ptr %taddr, align 8
  %23 = load i64, ptr %elements2, align 8, !dbg !2638
  %add = add i64 0, %23, !dbg !2638
  %size9 = sub i64 %add, 0, !dbg !2638
  %24 = insertvalue %"char[]" undef, ptr %22, 0, !dbg !2638
  %25 = insertvalue %"char[]" %24, i64 %size9, 1, !dbg !2638
  br label %noerr_block, !dbg !2638

panic_block:                                      ; preds = %assign_optional
  %26 = insertvalue %any undef, ptr %error_var, 0, !dbg !2638
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !2638
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg12, align 8
  store %any %27, ptr %varargslots, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 244, ptr align 8 %indirectarg13), !dbg !2640
  unreachable, !dbg !2640

noerr_block:                                      ; preds = %expr_block.exit
  store %"char[]" %25, ptr %taddr14, align 8
  %29 = load %"char[]", ptr %taddr14, align 8
  %30 = extractvalue %"char[]" %29, 0
  %31 = extractvalue %"char[]" %29, 1
  %gt = icmp sgt i64 0, %31
  %32 = call i1 @llvm.expect.i1(i1 %gt, i1 false)
  br i1 %32, label %panic, label %checkok

checkok:                                          ; preds = %noerr_block
  %lt = icmp slt i64 %31, 0, !dbg !2642
  %33 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2642
  br i1 %33, label %panic24, label %checkok34, !dbg !2642

checkok34:                                        ; preds = %checkok
  %34 = insertvalue %"char[]" undef, ptr %30, 0, !dbg !2642
  %35 = insertvalue %"char[]" %34, i64 0, 1, !dbg !2642
  store %"char[]" %35, ptr %0, align 8, !dbg !2642
  ret void, !dbg !2642

if.exit35:                                        ; preds = %entry
    #dbg_declare(ptr %total_size, !2649, !DIExpression(), !2650)
  %ptradd36 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2650
  %36 = load i64, ptr %ptradd36, align 8, !dbg !2650
  %ptradd37 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2650
  %37 = load i64, ptr %ptradd37, align 8, !dbg !2650
  %mul38 = mul i64 %36, %37, !dbg !2650
  store i64 %mul38, ptr %total_size, align 8, !dbg !2650
    #dbg_declare(ptr %.anon, !2651, !DIExpression(), !2653)
  %ptradd39 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2653
  %38 = load i64, ptr %ptradd39, align 8, !dbg !2653
  store i64 %38, ptr %.anon, align 8, !dbg !2653
    #dbg_declare(ptr %.anon40, !2651, !DIExpression(), !2653)
  store i64 0, ptr %.anon40, align 8, !dbg !2653
  br label %loop.cond, !dbg !2653

loop.cond:                                        ; preds = %checkok58, %if.exit35
  %39 = load i64, ptr %.anon40, align 8, !dbg !2653
  %40 = load i64, ptr %.anon, align 8, !dbg !2653
  %lt41 = icmp ult i64 %39, %40, !dbg !2653
  br i1 %lt41, label %loop.body, label %loop.exit, !dbg !2653

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %str, !2654, !DIExpression(), !2656)
  %ptradd42 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2656
  %41 = load i64, ptr %ptradd42, align 8, !dbg !2656
  %42 = load ptr, ptr %1, align 8, !dbg !2656
  %43 = load i64, ptr %.anon40, align 8, !dbg !2656
  %ge = icmp uge i64 %43, %41, !dbg !2656
  %44 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2656
  br i1 %44, label %panic43, label %checkok53, !dbg !2656

checkok53:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [16 x i8], ptr %42, i64 %43, !dbg !2656
  store ptr %ptroffset, ptr %str, align 8, !dbg !2656
  %45 = load i64, ptr %total_size, align 8, !dbg !2657
  %46 = load ptr, ptr %str, align 8, !dbg !2657
  %checknull = icmp eq ptr %46, null, !dbg !2657
  %47 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2657
  br i1 %47, label %panic54, label %checkok58, !dbg !2657

checkok58:                                        ; preds = %checkok53
  %ptradd59 = getelementptr inbounds i8, ptr %46, i64 8, !dbg !2657
  %48 = load i64, ptr %ptradd59, align 8, !dbg !2657
  %add60 = add i64 %45, %48, !dbg !2657
  store i64 %add60, ptr %total_size, align 8, !dbg !2657
  %49 = load i64, ptr %.anon40, align 8, !dbg !2653
  %addnuw = add nuw i64 %49, 1, !dbg !2653
  store i64 %addnuw, ptr %.anon40, align 8, !dbg !2653
  br label %loop.cond, !dbg !2653

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %current, !2659, !DIExpression(), !2661)
  %50 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2663
  %i2nb62 = icmp eq ptr %50, null, !dbg !2663
  br i1 %i2nb62, label %if.then63, label %if.exit64, !dbg !2663

if.then63:                                        ; preds = %loop.exit
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2665
  br label %if.exit64, !dbg !2665

if.exit64:                                        ; preds = %if.then63, %loop.exit
  %51 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2667
  store ptr %51, ptr %current, align 8, !dbg !2667
    #dbg_declare(ptr %original, !2668, !DIExpression(), !2669)
  %52 = load ptr, ptr %current, align 8, !dbg !2669
  store ptr %52, ptr %original, align 8, !dbg !2669
  %53 = load ptr, ptr %current, align 8, !dbg !2670
  %54 = load ptr, ptr %3, align 8, !dbg !2670
  %eq = icmp eq ptr %53, %54, !dbg !2670
  br i1 %eq, label %if.then65, label %if.exit66, !dbg !2670

if.then65:                                        ; preds = %if.exit64
  %55 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !2670
  store ptr %55, ptr %current, align 8, !dbg !2670
  br label %if.exit66, !dbg !2670

if.exit66:                                        ; preds = %if.then65, %if.exit64
    #dbg_declare(ptr %mark, !2671, !DIExpression(), !2672)
  %56 = load ptr, ptr %current, align 8, !dbg !2672
  %ptradd67 = getelementptr inbounds i8, ptr %56, i64 24, !dbg !2672
  %57 = load i64, ptr %ptradd67, align 8, !dbg !2672
  store i64 %57, ptr %mark, align 8, !dbg !2672
    #dbg_declare(ptr %res, !2673, !DIExpression(), !2675)
  %58 = load i64, ptr %total_size, align 8, !dbg !2675
  %59 = call ptr @std.core.dstring.temp_with_capacity(i64 %58), !dbg !2675
  store ptr %59, ptr %res, align 8, !dbg !2675
  store ptr %res, ptr %self, align 8
  %ptradd68 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2676
  %60 = load i64, ptr %ptradd68, align 8, !dbg !2676
  %61 = load ptr, ptr %1, align 8, !dbg !2676
  %ge69 = icmp sge i64 0, %60, !dbg !2676
  %62 = call i1 @llvm.expect.i1(i1 %ge69, i1 false), !dbg !2676
  br i1 %62, label %panic70, label %checkok80, !dbg !2676

checkok80:                                        ; preds = %if.exit66
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %61, i32 16, i1 false)
  %63 = load ptr, ptr %self, align 8, !dbg !2677
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg81, ptr align 8 %value, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %63, ptr align 8 %indirectarg81), !dbg !2677
    #dbg_declare(ptr %.anon82, !2680, !DIExpression(), !2682)
  %64 = load %"char[][]", ptr %1, align 8, !dbg !2682
  %65 = extractvalue %"char[][]" %64, 0, !dbg !2682
  %66 = extractvalue %"char[][]" %64, 1, !dbg !2682
  %gt83 = icmp sgt i64 1, %66, !dbg !2682
  %67 = call i1 @llvm.expect.i1(i1 %gt83, i1 false), !dbg !2682
  br i1 %67, label %panic84, label %checkok94, !dbg !2682

checkok94:                                        ; preds = %checkok80
  %size95 = sub i64 %66, 1, !dbg !2682
  %ptradd96 = getelementptr inbounds i8, ptr %65, i64 16, !dbg !2682
  %68 = insertvalue %"char[][]" undef, ptr %ptradd96, 0, !dbg !2682
  %69 = insertvalue %"char[][]" %68, i64 %size95, 1, !dbg !2682
  store %"char[][]" %69, ptr %taddr97, align 8
  store ptr %taddr97, ptr %.anon82, align 8
    #dbg_declare(ptr %.anon98, !2683, !DIExpression(), !2682)
  %70 = load ptr, ptr %.anon82, align 8, !dbg !2682
  %checknull99 = icmp eq ptr %70, null, !dbg !2682
  %71 = call i1 @llvm.expect.i1(i1 %checknull99, i1 false), !dbg !2682
  br i1 %71, label %panic100, label %checkok104, !dbg !2682

checkok104:                                       ; preds = %checkok94
  %ptradd105 = getelementptr inbounds i8, ptr %70, i64 8, !dbg !2682
  %72 = load i64, ptr %ptradd105, align 8, !dbg !2682
  store i64 %72, ptr %.anon98, align 8, !dbg !2682
    #dbg_declare(ptr %.anon106, !2683, !DIExpression(), !2682)
  store i64 0, ptr %.anon106, align 8, !dbg !2682
  br label %loop.cond107, !dbg !2682

loop.cond107:                                     ; preds = %checkok140, %checkok104
  %73 = load i64, ptr %.anon106, align 8, !dbg !2682
  %74 = load i64, ptr %.anon98, align 8, !dbg !2682
  %lt108 = icmp ult i64 %73, %74, !dbg !2682
  br i1 %lt108, label %loop.body109, label %loop.exit144, !dbg !2682

loop.body109:                                     ; preds = %loop.cond107
    #dbg_declare(ptr %str110, !2684, !DIExpression(), !2686)
  %75 = load ptr, ptr %.anon82, align 8, !dbg !2686
  %checknull111 = icmp eq ptr %75, null, !dbg !2686
  %76 = call i1 @llvm.expect.i1(i1 %checknull111, i1 false), !dbg !2686
  br i1 %76, label %panic112, label %checkok116, !dbg !2686

checkok116:                                       ; preds = %loop.body109
  %ptradd117 = getelementptr inbounds i8, ptr %75, i64 8, !dbg !2686
  %77 = load i64, ptr %ptradd117, align 8, !dbg !2686
  %78 = load ptr, ptr %75, align 8, !dbg !2686
  %79 = load i64, ptr %.anon106, align 8, !dbg !2686
  %ge118 = icmp uge i64 %79, %77, !dbg !2686
  %80 = call i1 @llvm.expect.i1(i1 %ge118, i1 false), !dbg !2686
  br i1 %80, label %panic119, label %checkok129, !dbg !2686

checkok129:                                       ; preds = %checkok116
  %ptroffset130 = getelementptr inbounds [16 x i8], ptr %78, i64 %79, !dbg !2686
  store ptr %ptroffset130, ptr %str110, align 8, !dbg !2686
  store ptr %res, ptr %self131, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value132, ptr align 8 %2, i32 16, i1 false)
  %81 = load ptr, ptr %self131, align 8, !dbg !2687
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg133, ptr align 8 %value132, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %81, ptr align 8 %indirectarg133), !dbg !2687
  store ptr %res, ptr %self134, align 8
  %82 = load ptr, ptr %str110, align 8, !dbg !2691
  %checknull135 = icmp eq ptr %82, null, !dbg !2691
  %83 = call i1 @llvm.expect.i1(i1 %checknull135, i1 false), !dbg !2691
  br i1 %83, label %panic136, label %checkok140, !dbg !2691

checkok140:                                       ; preds = %checkok129
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value141, ptr align 8 %82, i32 16, i1 false)
  %84 = load ptr, ptr %self134, align 8, !dbg !2692
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg142, ptr align 8 %value141, i32 16, i1 false)
  call void @std.core.dstring.DString.append_chars(ptr %84, ptr align 8 %indirectarg142), !dbg !2692
  %85 = load i64, ptr %.anon106, align 8, !dbg !2682
  %addnuw143 = add nuw i64 %85, 1, !dbg !2682
  store i64 %addnuw143, ptr %.anon106, align 8, !dbg !2682
  br label %loop.cond107, !dbg !2682

loop.exit144:                                     ; preds = %loop.cond107
  %86 = load ptr, ptr %res, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg145, ptr align 8 %3, i32 16, i1 false)
  call void @std.core.dstring.DString.copy_str(ptr sret(%"char[]") align 8 %sretparam, ptr %86, ptr align 8 %indirectarg145), !dbg !2694
  %87 = load %"char[]", ptr %sretparam, align 8, !dbg !2694
  %88 = load ptr, ptr %current, align 8, !dbg !2695
  %89 = load i64, ptr %mark, align 8, !dbg !2695
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %88, i64 %89), !dbg !2695
  %90 = load ptr, ptr %original, align 8, !dbg !2697
  store ptr %90, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2697
  store %"char[]" %87, ptr %0, align 8, !dbg !2698
  ret void, !dbg !2698

panic:                                            ; preds = %noerr_block
  store i64 %31, ptr %taddr15, align 8
  %91 = insertvalue %any undef, ptr %taddr15, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr16, align 8
  %93 = insertvalue %any undef, ptr %taddr16, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg19, align 8
  store %any %92, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %94, ptr %ptradd21, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 118, ptr align 8 %indirectarg23), !dbg !2642
  unreachable, !dbg !2642

panic24:                                          ; preds = %checkok
  store i64 -1, ptr %taddr25, align 8
  %96 = insertvalue %any undef, ptr %taddr25, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %31, ptr %taddr26, align 8
  %98 = insertvalue %any undef, ptr %taddr26, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg29, align 8
  store %any %97, ptr %varargslots30, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %99, ptr %ptradd31, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp32", ptr %indirectarg33, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 118, ptr align 8 %indirectarg33), !dbg !2642
  unreachable, !dbg !2642

panic43:                                          ; preds = %loop.body
  store i64 %41, ptr %taddr44, align 8
  %101 = insertvalue %any undef, ptr %taddr44, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %43, ptr %taddr45, align 8
  %103 = insertvalue %any undef, ptr %taddr45, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg48, align 8
  store %any %102, ptr %varargslots49, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots49, i64 16
  store %any %104, ptr %ptradd50, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp51" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp51", ptr %indirectarg52, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, i32 122, ptr align 8 %indirectarg52), !dbg !2656
  unreachable, !dbg !2656

panic54:                                          ; preds = %checkok53
  store %"char[]" { ptr @.panic_msg.21, i64 44 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg57, align 8
  %106 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %106(ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, i32 124), !dbg !2657
  unreachable, !dbg !2657

panic70:                                          ; preds = %if.exit66
  store i64 %60, ptr %taddr71, align 8
  %107 = insertvalue %any undef, ptr %taddr71, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr72, align 8
  %109 = insertvalue %any undef, ptr %taddr72, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg75, align 8
  store %any %108, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %110, ptr %ptradd77, align 16
  %111 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 129, ptr align 8 %indirectarg79), !dbg !2676
  unreachable, !dbg !2676

panic84:                                          ; preds = %checkok80
  store i64 %66, ptr %taddr85, align 8
  %112 = insertvalue %any undef, ptr %taddr85, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr86, align 8
  %114 = insertvalue %any undef, ptr %taddr86, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg88, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg89, align 8
  store %any %113, ptr %varargslots90, align 16
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %115, ptr %ptradd91, align 16
  %116 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp92", ptr %indirectarg93, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, i32 130, ptr align 8 %indirectarg93), !dbg !2682
  unreachable, !dbg !2682

panic100:                                         ; preds = %checkok94
  store %"char[]" { ptr @.panic_msg.22, i64 47 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg103, align 8
  %117 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %117(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 130), !dbg !2682
  unreachable, !dbg !2682

panic112:                                         ; preds = %loop.body109
  store %"char[]" { ptr @.panic_msg.22, i64 47 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg114, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg115, align 8
  %118 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %118(ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, ptr align 8 %indirectarg115, i32 130), !dbg !2686
  unreachable, !dbg !2686

panic119:                                         ; preds = %checkok116
  store i64 %77, ptr %taddr120, align 8
  %119 = insertvalue %any undef, ptr %taddr120, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr121, align 8
  %121 = insertvalue %any undef, ptr %taddr121, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %indirectarg122, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg123, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg124, align 8
  store %any %120, ptr %varargslots125, align 16
  %ptradd126 = getelementptr inbounds i8, ptr %varargslots125, i64 16
  store %any %122, ptr %ptradd126, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots125, 0
  %"$$temp127" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp127", ptr %indirectarg128, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg122, ptr align 8 %indirectarg123, ptr align 8 %indirectarg124, i32 130, ptr align 8 %indirectarg128), !dbg !2686
  unreachable, !dbg !2686

panic136:                                         ; preds = %checkok129
  store %"char[]" { ptr @.panic_msg.21, i64 44 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %indirectarg139, align 8
  %124 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %124(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 133), !dbg !2691
  unreachable, !dbg !2691
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.new_from_utf32(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2699 {
entry:
  %len = alloca i64, align 8
  %indirectarg = alloca %"uint[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %indirectarg5 = alloca %"uint[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2706, !DIExpression(), !2707)
    #dbg_declare(ptr %2, !2708, !DIExpression(), !2707)
    #dbg_declare(ptr %len, !2709, !DIExpression(), !2710)
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8len_for_utf32(ptr align 8 %indirectarg), !dbg !2710
  store i64 %3, ptr %len, align 8, !dbg !2710
    #dbg_declare(ptr %data, !2711, !DIExpression(), !2712)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !2712
  %add = add i64 %4, 1, !dbg !2712
  store i64 %add, ptr %size, align 8
  %5 = load i64, ptr %size, align 8, !dbg !2713
  %i2nb = icmp eq i64 %5, 0, !dbg !2713
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2713

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !2713
  br label %expr_block.exit, !dbg !2713

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2715
  %6 = load i64, ptr %ptradd, align 8, !dbg !2715
  %7 = inttoptr i64 %6 to ptr, !dbg !2715
  %type = load ptr, ptr %.cachedtype, align 8
  %8 = icmp eq ptr %7, %type
  br i1 %8, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 16
  %9 = load ptr, ptr %ptradd1, align 8
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire")
  store ptr %10, ptr %.inlinecache, align 8
  store ptr %7, ptr %.cachedtype, align 8
  br label %11

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %11

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ]
  %12 = icmp eq ptr %fn_phi, null
  br i1 %12, label %missing_function, label %match

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.23, i64 14 }, ptr %indirectarg4, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 68), !dbg !2717
  unreachable, !dbg !2717

match:                                            ; preds = %11
  %14 = load ptr, ptr %allocator, align 8
  %15 = load i64, ptr %size, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %14, i64 %15, i32 0, i64 0), !dbg !2717
  %not_err = icmp eq i64 %16, 0, !dbg !2717
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2717
  br i1 %17, label %after_check, label %assign_optional, !dbg !2717

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !2717
  br label %guard_block, !dbg !2717

after_check:                                      ; preds = %match
  %18 = load ptr, ptr %retparam, align 8, !dbg !2717
  store ptr %18, ptr %blockret, align 8, !dbg !2717
  br label %expr_block.exit, !dbg !2717

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !2717

guard_block:                                      ; preds = %assign_optional
  %19 = load i64, ptr %error_var, align 8, !dbg !2717
  ret i64 %19, !dbg !2717

noerr_block:                                      ; preds = %expr_block.exit
  %20 = load ptr, ptr %blockret, align 8, !dbg !2717
  store ptr %20, ptr %data, align 8, !dbg !2717
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %1, i32 16, i1 false)
  %21 = load ptr, ptr %data, align 8
  call void @std.core.string.conv.utf32to8_unsafe(ptr align 8 %indirectarg5, ptr %21), !dbg !2718
  %22 = load ptr, ptr %data, align 8, !dbg !2719
  %23 = load i64, ptr %len, align 8, !dbg !2719
  %ptradd6 = getelementptr inbounds i8, ptr %22, i64 %23, !dbg !2719
  store i8 0, ptr %ptradd6, align 1, !dbg !2719
  %24 = load ptr, ptr %data, align 8, !dbg !2720
  %25 = load i64, ptr %len, align 8, !dbg !2720
  %add7 = add i64 0, %25, !dbg !2720
  %size8 = sub i64 %add7, 0, !dbg !2720
  %26 = insertvalue %"char[]" undef, ptr %24, 0, !dbg !2720
  %27 = insertvalue %"char[]" %26, i64 %size8, 1, !dbg !2720
  store %"char[]" %27, ptr %0, align 8, !dbg !2720
  ret i64 0, !dbg !2720
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.new_from_utf16(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2721 {
entry:
  %len = alloca i64, align 8
  %indirectarg = alloca %"ushort[]", align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %error_var5 = alloca i64, align 8
  %indirectarg6 = alloca %"ushort[]", align 8
  %allocator11 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache16 = alloca ptr, align 8
  %.cachedtype17 = alloca ptr, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2728, !DIExpression(), !2729)
    #dbg_declare(ptr %2, !2730, !DIExpression(), !2729)
    #dbg_declare(ptr %len, !2731, !DIExpression(), !2732)
  store ptr null, ptr %.cachedtype17, align 8
  store ptr null, ptr %.cachedtype, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  %3 = call i64 @std.core.string.conv.utf8len_for_utf16(ptr align 8 %indirectarg), !dbg !2732
  store i64 %3, ptr %len, align 8, !dbg !2732
    #dbg_declare(ptr %data, !2733, !DIExpression(), !2734)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %4 = load i64, ptr %len, align 8, !dbg !2734
  %add = add i64 %4, 1, !dbg !2734
  store i64 %add, ptr %size, align 8
  %5 = load i64, ptr %size, align 8, !dbg !2735
  %i2nb = icmp eq i64 %5, 0, !dbg !2735
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2735

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !2735
  br label %expr_block.exit, !dbg !2735

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2737
  %6 = load i64, ptr %ptradd, align 8, !dbg !2737
  %7 = inttoptr i64 %6 to ptr, !dbg !2737
  %type = load ptr, ptr %.cachedtype, align 8
  %8 = icmp eq ptr %7, %type
  br i1 %8, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd1 = getelementptr inbounds i8, ptr %7, i64 16
  %9 = load ptr, ptr %ptradd1, align 8
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire")
  store ptr %10, ptr %.inlinecache, align 8
  store ptr %7, ptr %.cachedtype, align 8
  br label %11

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %11

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ]
  %12 = icmp eq ptr %fn_phi, null
  br i1 %12, label %missing_function, label %match

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.24, i64 14 }, ptr %indirectarg4, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 68), !dbg !2739
  unreachable, !dbg !2739

match:                                            ; preds = %11
  %14 = load ptr, ptr %allocator, align 8
  %15 = load i64, ptr %size, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %14, i64 %15, i32 0, i64 0), !dbg !2739
  %not_err = icmp eq i64 %16, 0, !dbg !2739
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2739
  br i1 %17, label %after_check, label %assign_optional, !dbg !2739

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !2739
  br label %guard_block, !dbg !2739

after_check:                                      ; preds = %match
  %18 = load ptr, ptr %retparam, align 8, !dbg !2739
  store ptr %18, ptr %blockret, align 8, !dbg !2739
  br label %expr_block.exit, !dbg !2739

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !2739

guard_block:                                      ; preds = %assign_optional
  %19 = load i64, ptr %error_var, align 8, !dbg !2739
  ret i64 %19, !dbg !2739

noerr_block:                                      ; preds = %expr_block.exit
  %20 = load ptr, ptr %blockret, align 8, !dbg !2739
  store ptr %20, ptr %data, align 8, !dbg !2739
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg6, ptr align 8 %1, i32 16, i1 false)
  %21 = load ptr, ptr %data, align 8
  %22 = call i64 @std.core.string.conv.utf16to8_unsafe(ptr align 8 %indirectarg6, ptr %21), !dbg !2740
  %not_err7 = icmp eq i64 %22, 0, !dbg !2740
  %23 = call i1 @llvm.expect.i1(i1 %not_err7, i1 true), !dbg !2740
  br i1 %23, label %after_check9, label %assign_optional8, !dbg !2740

assign_optional8:                                 ; preds = %noerr_block
  store i64 %22, ptr %error_var5, align 8, !dbg !2740
  br label %guard_block10, !dbg !2740

after_check9:                                     ; preds = %noerr_block
  br label %noerr_block30, !dbg !2740

guard_block10:                                    ; preds = %assign_optional8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator11, ptr align 8 %2, i32 16, i1 false)
  %24 = load ptr, ptr %data, align 8, !dbg !2741
  store ptr %24, ptr %ptr, align 8
  %25 = load ptr, ptr %ptr, align 8, !dbg !2743
  %i2nb12 = icmp eq ptr %25, null, !dbg !2743
  br i1 %i2nb12, label %if.then13, label %if.exit14, !dbg !2743

if.then13:                                        ; preds = %guard_block10
  br label %expr_block.exit29, !dbg !2743

if.exit14:                                        ; preds = %guard_block10
  %ptradd15 = getelementptr inbounds i8, ptr %allocator11, i64 8, !dbg !2745
  %26 = load i64, ptr %ptradd15, align 8, !dbg !2745
  %27 = inttoptr i64 %26 to ptr, !dbg !2745
  %type18 = load ptr, ptr %.cachedtype17, align 8
  %28 = icmp eq ptr %27, %type18
  br i1 %28, label %cache_hit21, label %cache_miss19

cache_miss19:                                     ; preds = %if.exit14
  %ptradd20 = getelementptr inbounds i8, ptr %27, i64 16
  %29 = load ptr, ptr %ptradd20, align 8
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.release")
  store ptr %30, ptr %.inlinecache16, align 8
  store ptr %27, ptr %.cachedtype17, align 8
  br label %31

cache_hit21:                                      ; preds = %if.exit14
  %cache_hit_fn22 = load ptr, ptr %.inlinecache16, align 8
  br label %31

31:                                               ; preds = %cache_hit21, %cache_miss19
  %fn_phi23 = phi ptr [ %cache_hit_fn22, %cache_hit21 ], [ %30, %cache_miss19 ]
  %32 = icmp eq ptr %fn_phi23, null
  br i1 %32, label %missing_function24, label %match28

missing_function24:                               ; preds = %31
  store %"char[]" { ptr @.panic_msg.25, i64 44 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.24, i64 14 }, ptr %indirectarg27, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 105), !dbg !2745
  unreachable, !dbg !2745

match28:                                          ; preds = %31
  %34 = load ptr, ptr %allocator11, align 8, !dbg !2745
  %35 = load ptr, ptr %ptr, align 8, !dbg !2745
  call void %fn_phi23(ptr %34, ptr %35, i8 zeroext 0), !dbg !2745
  br label %expr_block.exit29, !dbg !2745

expr_block.exit29:                                ; preds = %match28, %if.then13
  %36 = load i64, ptr %error_var5, align 8, !dbg !2745
  ret i64 %36, !dbg !2745

noerr_block30:                                    ; preds = %after_check9
  %37 = load ptr, ptr %data, align 8, !dbg !2746
  %38 = load i64, ptr %len, align 8, !dbg !2746
  %ptradd31 = getelementptr inbounds i8, ptr %37, i64 %38, !dbg !2746
  store i8 0, ptr %ptradd31, align 1, !dbg !2746
  %39 = load ptr, ptr %data, align 8, !dbg !2747
  %40 = load i64, ptr %len, align 8, !dbg !2747
  %add32 = add i64 0, %40, !dbg !2747
  %size33 = sub i64 %add32, 0, !dbg !2747
  %41 = insertvalue %"char[]" undef, ptr %39, 0, !dbg !2747
  %42 = insertvalue %"char[]" %41, i64 %size33, 1, !dbg !2747
  store %"char[]" %42, ptr %0, align 8, !dbg !2747
  ret i64 0, !dbg !2747
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.new_from_wstring(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2748 {
entry:
  %wstring = alloca ptr, align 8
  %utf16_len = alloca i64, align 8
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %"ushort[]", align 8
  %indirectarg2 = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !2751, !DIExpression(), !2752)
    #dbg_declare(ptr %2, !2753, !DIExpression(), !2752)
    #dbg_declare(ptr %utf16_len, !2754, !DIExpression(), !2755)
  store i64 0, ptr %utf16_len, align 8, !dbg !2755
  br label %loop.cond, !dbg !2756

loop.cond:                                        ; preds = %loop.body, %entry
  %3 = load ptr, ptr %wstring, align 8, !dbg !2757
  %4 = load i64, ptr %utf16_len, align 8, !dbg !2757
  %ptroffset = getelementptr inbounds [2 x i8], ptr %3, i64 %4, !dbg !2757
  %5 = load i16, ptr %ptroffset, align 2, !dbg !2757
  %zext = zext i16 %5 to i32, !dbg !2757
  %neq = icmp ne i32 0, %zext, !dbg !2757
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !2757

loop.body:                                        ; preds = %loop.cond
  %6 = load i64, ptr %utf16_len, align 8, !dbg !2757
  %add = add i64 %6, 1, !dbg !2757
  store i64 %add, ptr %utf16_len, align 8, !dbg !2757
  br label %loop.cond, !dbg !2757

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %utf16, !2759, !DIExpression(), !2760)
  %7 = load ptr, ptr %wstring, align 8, !dbg !2760
  %8 = load i64, ptr %utf16_len, align 8, !dbg !2760
  %add1 = add i64 0, %8, !dbg !2760
  %size = sub i64 %add1, 0, !dbg !2760
  %9 = insertvalue %"ushort[]" undef, ptr %7, 0, !dbg !2760
  %10 = insertvalue %"ushort[]" %9, i64 %size, 1, !dbg !2760
  store %"ushort[]" %10, ptr %utf16, align 8, !dbg !2760
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %utf16, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg2, ptr align 8 %2, i32 16, i1 false)
  %11 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg2), !dbg !2761
  %not_err = icmp eq i64 %11, 0, !dbg !2761
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2761
  br i1 %12, label %after_check, label %assign_optional, !dbg !2761

assign_optional:                                  ; preds = %loop.exit
  store i64 %11, ptr %reterr, align 8, !dbg !2761
  br label %err_retblock, !dbg !2761

after_check:                                      ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !2761
  ret i64 0, !dbg !2761

err_retblock:                                     ; preds = %assign_optional
  %13 = load i64, ptr %reterr, align 8, !dbg !2761
  ret i64 %13, !dbg !2761
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.temp_from_wstring(ptr %0, ptr %1) #0 comdat !dbg !2762 {
entry:
  %wstring = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
    #dbg_declare(ptr %wstring, !2765, !DIExpression(), !2766)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2767
  %i2nb = icmp eq ptr %2, null, !dbg !2767
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2767

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2769
  br label %if.exit, !dbg !2769

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2771
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2766
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !2766
  %6 = load ptr, ptr %wstring, align 8
  store %any %5, ptr %indirectarg, align 8
  %7 = call i64 @std.core.string.new_from_wstring(ptr %retparam, ptr %6, ptr align 8 %indirectarg) #5, !dbg !2766
  %not_err = icmp eq i64 %7, 0, !dbg !2766
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2766
  br i1 %8, label %after_check, label %assign_optional, !dbg !2766

assign_optional:                                  ; preds = %if.exit
  store i64 %7, ptr %reterr, align 8, !dbg !2766
  br label %err_retblock, !dbg !2766

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !2766
  ret i64 0, !dbg !2766

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !2766
  ret i64 %9, !dbg !2766
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.string.temp_from_utf16(ptr %0, ptr align 8 %1) #0 comdat !dbg !2772 {
entry:
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %indirectarg = alloca %"ushort[]", align 8
  %indirectarg1 = alloca %any, align 8
    #dbg_declare(ptr %1, !2775, !DIExpression(), !2776)
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2777
  %i2nb = icmp eq ptr %2, null, !dbg !2777
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2777

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2779
  br label %if.exit, !dbg !2779

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2781
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2776
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !2776
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  store %any %5, ptr %indirectarg1, align 8
  %6 = call i64 @std.core.string.new_from_utf16(ptr %retparam, ptr align 8 %indirectarg, ptr align 8 %indirectarg1) #5, !dbg !2776
  %not_err = icmp eq i64 %6, 0, !dbg !2776
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2776
  br i1 %7, label %after_check, label %assign_optional, !dbg !2776

assign_optional:                                  ; preds = %if.exit
  store i64 %6, ptr %reterr, align 8, !dbg !2776
  br label %err_retblock, !dbg !2776

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !2776
  ret i64 0, !dbg !2776

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !2776
  ret i64 %8, !dbg !2776
}

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.temp_with_capacity(i64) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.dstring.DString.appendf(ptr, ptr, ptr align 8, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.zstr_view(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.allocator.temp_allocator_next() #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.copy_str(ptr noalias sret(%"char[]") align 8, ptr, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.str_view(ptr noalias sret(%"char[]") align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.copy_zstr(ptr, ptr align 8) #0

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.append_chars(ptr, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8len_for_utf32(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.string.conv.utf32to8_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8len_for_utf16(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf16to8_unsafe(ptr align 8, ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf16len_for_utf8(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8to16_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8_codepoints(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8to32_unsafe(ptr align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.ascii.char.is_upper(i8) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.ascii.char.is_lower(i8) #0

; Function Attrs: nounwind ssp uwtable
declare double @scalbn(double, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #3

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!48, !49, !50, !51, !52, !53}
!llvm.dbg.cu = !{!54}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "SURROGATE_OFFSET", linkageName: "std.core.string.SURROGATE_OFFSET", scope: !2, file: !2, line: 18, type: !3, isLocal: true, isDefinition: true, align: 4)
!2 = !DIFile(filename: "string.c3", directory: "C:/Program Files/c3c/lib/std/core")
!3 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "SURROGATE_GENERIC_MASK", linkageName: "std.core.string.SURROGATE_GENERIC_MASK", scope: !2, file: !2, line: 19, type: !3, isLocal: true, isDefinition: true, align: 4)
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "SURROGATE_MASK", linkageName: "std.core.string.SURROGATE_MASK", scope: !2, file: !2, line: 20, type: !3, isLocal: true, isDefinition: true, align: 4)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "SURROGATE_CODEPOINT_MASK", linkageName: "std.core.string.SURROGATE_CODEPOINT_MASK", scope: !2, file: !2, line: 21, type: !3, isLocal: true, isDefinition: true, align: 4)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "SURROGATE_BITS", linkageName: "std.core.string.SURROGATE_BITS", scope: !2, file: !2, line: 22, type: !3, isLocal: true, isDefinition: true, align: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "SURROGATE_LOW_VALUE", linkageName: "std.core.string.SURROGATE_LOW_VALUE", scope: !2, file: !2, line: 23, type: !3, isLocal: true, isDefinition: true, align: 4)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "SURROGATE_HIGH_VALUE", linkageName: "std.core.string.SURROGATE_HIGH_VALUE", scope: !2, file: !2, line: 24, type: !3, isLocal: true, isDefinition: true, align: 4)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_double.BITS", scope: !2, file: !2, line: 460, type: !18, isLocal: true, isDefinition: true, align: 4)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_double.EMIN", scope: !2, file: !2, line: 461, type: !18, isLocal: true, isDefinition: true, align: 4)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_double.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 64, align: 32, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 2, lowerBound: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_double.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 256, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 8, lowerBound: 0)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_float.BITS", scope: !2, file: !2, line: 457, type: !18, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_float.EMIN", scope: !2, file: !2, line: 458, type: !18, isLocal: true, isDefinition: true, align: 4)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_float.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_float.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 16)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "KMAX", linkageName: "std.core.string.KMAX", scope: !41, file: !41, line: 29, type: !18, isLocal: false, isDefinition: true, align: 4)
!41 = !DIFile(filename: "string_to_real.c3", directory: "C:/Program Files/c3c/lib/std/core")
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "MASK", linkageName: "std.core.string.MASK", scope: !41, file: !41, line: 30, type: !18, isLocal: false, isDefinition: true, align: 4)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "B1B_DIG", linkageName: "std.core.string.B1B_DIG", scope: !41, file: !41, line: 31, type: !18, isLocal: false, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "B1B_MAX", linkageName: "std.core.string.B1B_MAX", scope: !41, file: !41, line: 32, type: !23, isLocal: false, isDefinition: true, align: 4)
!48 = !{i32 1, !"CodeView", i32 1}
!49 = !{i32 2, !"Debug Info Version", i32 3}
!50 = !{i32 2, !"wchar_size", i32 2}
!51 = !{i32 4, !"PIC Level", i32 2}
!52 = !{i32 1, !"uwtable", i32 2}
!53 = !{i32 1, !"MaxTLSAlign", i32 65536}
!54 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !55, splitDebugInlining: false)
!55 = !{!0, !4, !6, !8, !10, !12, !14, !16, !19, !21, !26, !31, !33, !35, !37, !39, !42, !44, !46}
!56 = distinct !DISubprogram(name: "trim", linkageName: "std.core.String.trim", scope: !2, file: !2, line: 147, type: !57, scopeLine: 147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!57 = !DISubroutineType(types: !58)
!58 = !{!59, !59, !59}
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !60)
!60 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !61, identifier: "char[]")
!61 = !{!62, !65}
!62 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !60, baseType: !63, size: 64, align: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !64, size: 64, align: 64, dwarfAddressSpace: 0)
!64 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !60, baseType: !66, size: 64, align: 64, offset: 64)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !67)
!67 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!68 = !{}
!69 = !DILocalVariable(name: "string", arg: 1, scope: !56, file: !2, line: 147, type: !59)
!70 = !DILocation(line: 147, scope: !56)
!71 = !DILocalVariable(name: "to_trim", arg: 2, scope: !56, file: !2, line: 147, type: !59)
!72 = !DILocalVariable(name: "start", scope: !56, file: !2, line: 149, type: !66, align: 8)
!73 = !DILocation(line: 149, scope: !56)
!74 = !DILocalVariable(name: "len", scope: !56, file: !2, line: 150, type: !66, align: 8)
!75 = !DILocation(line: 150, scope: !56)
!76 = !DILocation(line: 151, scope: !56)
!77 = !DILocation(line: 151, scope: !78)
!78 = distinct !DILexicalBlock(scope: !56, file: !2, line: 151, column: 2)
!79 = !DILocalVariable(name: ".temp", scope: !80, file: !2, line: 110, type: !66, align: 8)
!80 = distinct !DILexicalBlock(scope: !81, file: !2, line: 110, column: 2)
!81 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!82 = !DILocation(line: 110, scope: !80, inlinedAt: !77)
!83 = !DILocalVariable(name: "ch", scope: !84, file: !2, line: 110, type: !64, align: 1)
!84 = distinct !DILexicalBlock(scope: !80, file: !2, line: 110, column: 21)
!85 = !DILocation(line: 110, scope: !84, inlinedAt: !77)
!86 = !DILocation(line: 111, scope: !81, inlinedAt: !77)
!87 = !DILocation(line: 152, scope: !56)
!88 = !DILocalVariable(name: "end", scope: !56, file: !2, line: 153, type: !66, align: 8)
!89 = !DILocation(line: 153, scope: !56)
!90 = !DILocation(line: 154, scope: !56)
!91 = !DILocation(line: 154, scope: !92)
!92 = distinct !DILexicalBlock(scope: !56, file: !2, line: 154, column: 2)
!93 = !DILocalVariable(name: ".temp", scope: !94, file: !2, line: 110, type: !66, align: 8)
!94 = distinct !DILexicalBlock(scope: !95, file: !2, line: 110, column: 2)
!95 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!96 = !DILocation(line: 110, scope: !94, inlinedAt: !91)
!97 = !DILocalVariable(name: "ch", scope: !98, file: !2, line: 110, type: !64, align: 1)
!98 = distinct !DILexicalBlock(scope: !94, file: !2, line: 110, column: 21)
!99 = !DILocation(line: 110, scope: !98, inlinedAt: !91)
!100 = !DILocation(line: 111, scope: !95, inlinedAt: !91)
!101 = !DILocation(line: 155, scope: !56)
!102 = distinct !DISubprogram(name: "starts_with", linkageName: "std.core.String.starts_with", scope: !2, file: !2, line: 166, type: !103, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!103 = !DISubroutineType(types: !104)
!104 = !{!105, !59, !59}
!105 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!106 = !DILocalVariable(name: "string", arg: 1, scope: !102, file: !2, line: 166, type: !59)
!107 = !DILocation(line: 166, scope: !102)
!108 = !DILocalVariable(name: "needle", arg: 2, scope: !102, file: !2, line: 166, type: !59)
!109 = !DILocation(line: 168, scope: !102)
!110 = !DILocation(line: 169, scope: !102)
!111 = !DILocation(line: 170, scope: !102)
!112 = distinct !DISubprogram(name: "ends_with", linkageName: "std.core.String.ends_with", scope: !2, file: !2, line: 181, type: !103, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!113 = !DILocalVariable(name: "string", arg: 1, scope: !112, file: !2, line: 181, type: !59)
!114 = !DILocation(line: 181, scope: !112)
!115 = !DILocalVariable(name: "needle", arg: 2, scope: !112, file: !2, line: 181, type: !59)
!116 = !DILocation(line: 183, scope: !112)
!117 = !DILocation(line: 184, scope: !112)
!118 = !DILocation(line: 185, scope: !112)
!119 = distinct !DISubprogram(name: "strip", linkageName: "std.core.String.strip", scope: !2, file: !2, line: 196, type: !57, scopeLine: 196, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!120 = !DILocalVariable(name: "string", arg: 1, scope: !119, file: !2, line: 196, type: !59)
!121 = !DILocation(line: 196, scope: !119)
!122 = !DILocalVariable(name: "needle", arg: 2, scope: !119, file: !2, line: 196, type: !59)
!123 = !DILocation(line: 198, scope: !119)
!124 = !DILocation(line: 199, scope: !119)
!125 = distinct !DISubprogram(name: "strip_end", linkageName: "std.core.String.strip_end", scope: !2, file: !2, line: 210, type: !57, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!126 = !DILocalVariable(name: "string", arg: 1, scope: !125, file: !2, line: 210, type: !59)
!127 = !DILocation(line: 210, scope: !125)
!128 = !DILocalVariable(name: "needle", arg: 2, scope: !125, file: !2, line: 210, type: !59)
!129 = !DILocation(line: 212, scope: !125)
!130 = !DILocation(line: 214, scope: !125)
!131 = distinct !DISubprogram(name: "split", linkageName: "std.core.String.split", scope: !2, file: !2, line: 229, type: !132, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!132 = !DISubroutineType(types: !133)
!133 = !{!134, !59, !59, !67, !139, !105}
!134 = !DICompositeType(tag: DW_TAG_structure_type, name: "String[]", size: 128, align: 64, elements: !135, identifier: "String[]")
!135 = !{!136, !138}
!136 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !134, baseType: !137, size: 64, align: 64)
!137 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !59, size: 64, align: 64, dwarfAddressSpace: 0)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !134, baseType: !66, size: 64, align: 64, offset: 64)
!139 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !140, identifier: "Allocator")
!140 = !{!141, !143}
!141 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !139, baseType: !142, size: 64, align: 64)
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!143 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !139, baseType: !144, size: 64, align: 64, offset: 64)
!144 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!145 = !DILocalVariable(name: "s", arg: 1, scope: !131, file: !2, line: 229, type: !59)
!146 = !DILocation(line: 229, scope: !131)
!147 = !DILocalVariable(name: "needle", arg: 2, scope: !131, file: !2, line: 229, type: !59)
!148 = !DILocalVariable(name: "max", arg: 3, scope: !131, file: !2, line: 229, type: !66)
!149 = !DILocalVariable(name: "allocator", arg: 4, scope: !131, file: !2, line: 229, type: !139)
!150 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !131, file: !2, line: 229, type: !105)
!151 = !DILocation(line: 226, scope: !152)
!152 = distinct !DILexicalBlock(scope: !131, file: !2, line: 230, column: 1)
!153 = !DILocalVariable(name: "capacity", scope: !131, file: !2, line: 231, type: !66, align: 8)
!154 = !DILocation(line: 231, scope: !131)
!155 = !DILocalVariable(name: "i", scope: !131, file: !2, line: 232, type: !66, align: 8)
!156 = !DILocation(line: 232, scope: !131)
!157 = !DILocalVariable(name: "holder", scope: !131, file: !2, line: 233, type: !137, align: 8)
!158 = !DILocation(line: 233, scope: !131)
!159 = !DILocation(line: 286, scope: !160, inlinedAt: !162)
!160 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !161, file: !161, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!161 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Program Files/c3c/lib/std/core")
!162 = !DILocation(line: 269, scope: !163, inlinedAt: !158)
!163 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !161, file: !161, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!164 = !DILocation(line: 62, scope: !165, inlinedAt: !159)
!165 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!166 = !DILocation(line: 28, scope: !167, inlinedAt: !168)
!167 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!168 = !DILocation(line: 68, scope: !165, inlinedAt: !159)
!169 = !DILocalVariable(name: "no_more", scope: !131, file: !2, line: 234, type: !105, align: 1)
!170 = !DILocation(line: 234, scope: !131)
!171 = !DILocation(line: 235, scope: !131)
!172 = !DILocation(line: 235, scope: !173)
!173 = distinct !DILexicalBlock(scope: !131, file: !2, line: 235, column: 2)
!174 = !DILocalVariable(name: "index", scope: !175, file: !2, line: 237, type: !67, align: 8)
!175 = distinct !DILexicalBlock(scope: !173, file: !2, line: 236, column: 2)
!176 = !DILocation(line: 237, scope: !175)
!177 = !DILocalVariable(name: "res", scope: !175, file: !2, line: 238, type: !59, align: 8)
!178 = !DILocation(line: 238, scope: !175)
!179 = !DILocation(line: 239, scope: !175)
!180 = !DILocation(line: 241, scope: !181)
!181 = distinct !DILexicalBlock(scope: !175, file: !2, line: 240, column: 3)
!182 = !DILocation(line: 242, scope: !181)
!183 = !DILocation(line: 246, scope: !184)
!184 = distinct !DILexicalBlock(scope: !175, file: !2, line: 245, column: 3)
!185 = !DILocation(line: 247, scope: !184)
!186 = !DILocation(line: 249, scope: !175)
!187 = !DILocation(line: 251, scope: !188)
!188 = distinct !DILexicalBlock(scope: !175, file: !2, line: 250, column: 9)
!189 = !DILocation(line: 254, scope: !175)
!190 = !DILocation(line: 256, scope: !191)
!191 = distinct !DILexicalBlock(scope: !175, file: !2, line: 255, column: 3)
!192 = !DILocation(line: 257, scope: !191)
!193 = !DILocation(line: 90, scope: !194, inlinedAt: !195)
!194 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !161, file: !161, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!195 = !DILocation(line: 85, scope: !196, inlinedAt: !192)
!196 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !161, file: !161, line: 83, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!197 = !DILocation(line: 101, scope: !198, inlinedAt: !199)
!198 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !161, file: !161, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!199 = !DILocation(line: 92, scope: !200, inlinedAt: !195)
!200 = distinct !DILexicalBlock(scope: !194, file: !161, line: 91, column: 2)
!201 = !DILocation(line: 105, scope: !198, inlinedAt: !199)
!202 = !DILocation(line: 93, scope: !200, inlinedAt: !195)
!203 = !DILocation(line: 95, scope: !194, inlinedAt: !195)
!204 = !DILocation(line: 28, scope: !205, inlinedAt: !203)
!205 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!206 = !DILocation(line: 35, scope: !207, inlinedAt: !208)
!207 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!208 = !DILocation(line: 96, scope: !194, inlinedAt: !195)
!209 = !DILocation(line: 259, scope: !175)
!210 = !DILocation(line: 261, scope: !131)
!211 = !DILocation(line: 227, scope: !131)
!212 = distinct !DISubprogram(name: "new_split", linkageName: "std.core.String.new_split", scope: !2, file: !2, line: 275, type: !213, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!213 = !DISubroutineType(types: !214)
!214 = !{!134, !59, !59, !67, !105}
!215 = !DILocalVariable(name: "s", arg: 1, scope: !212, file: !2, line: 275, type: !59)
!216 = !DILocation(line: 275, scope: !212)
!217 = !DILocalVariable(name: "needle", arg: 2, scope: !212, file: !2, line: 275, type: !59)
!218 = !DILocalVariable(name: "max", arg: 3, scope: !212, file: !2, line: 275, type: !66)
!219 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !212, file: !2, line: 275, type: !105)
!220 = !DILocation(line: 272, scope: !221)
!221 = distinct !DILexicalBlock(scope: !212, file: !2, line: 275, column: 81)
!222 = !DILocation(line: 273, scope: !212)
!223 = distinct !DISubprogram(name: "tsplit", linkageName: "std.core.String.tsplit", scope: !2, file: !2, line: 286, type: !213, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!224 = !DILocalVariable(name: "s", arg: 1, scope: !223, file: !2, line: 286, type: !59)
!225 = !DILocation(line: 286, scope: !223)
!226 = !DILocalVariable(name: "needle", arg: 2, scope: !223, file: !2, line: 286, type: !59)
!227 = !DILocalVariable(name: "max", arg: 3, scope: !223, file: !2, line: 286, type: !66)
!228 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !223, file: !2, line: 286, type: !105)
!229 = !DILocation(line: 396, scope: !230, inlinedAt: !225)
!230 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!231 = !DILocation(line: 398, scope: !232, inlinedAt: !225)
!232 = distinct !DILexicalBlock(scope: !230, file: !161, line: 397, column: 2)
!233 = !DILocation(line: 400, scope: !230, inlinedAt: !225)
!234 = distinct !DISubprogram(name: "split_to_buffer", linkageName: "std.core.String.split_to_buffer", scope: !2, file: !2, line: 301, type: !235, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!235 = !DISubroutineType(types: !236)
!236 = !{!237, !239, !59, !59, !134, !67, !105}
!237 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !238)
!238 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String[]*", baseType: !134, size: 64, align: 64, dwarfAddressSpace: 0)
!240 = !DILocalVariable(name: "s", arg: 1, scope: !234, file: !2, line: 301, type: !59)
!241 = !DILocation(line: 301, scope: !234)
!242 = !DILocalVariable(name: "needle", arg: 2, scope: !234, file: !2, line: 301, type: !59)
!243 = !DILocalVariable(name: "buffer", arg: 3, scope: !234, file: !2, line: 301, type: !134)
!244 = !DILocalVariable(name: "max", arg: 4, scope: !234, file: !2, line: 301, type: !66)
!245 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !234, file: !2, line: 301, type: !105)
!246 = !DILocation(line: 297, scope: !247)
!247 = distinct !DILexicalBlock(scope: !234, file: !2, line: 302, column: 1)
!248 = !DILocalVariable(name: "max_capacity", scope: !234, file: !2, line: 303, type: !66, align: 8)
!249 = !DILocation(line: 303, scope: !234)
!250 = !DILocalVariable(name: "i", scope: !234, file: !2, line: 304, type: !66, align: 8)
!251 = !DILocation(line: 304, scope: !234)
!252 = !DILocalVariable(name: "no_more", scope: !234, file: !2, line: 305, type: !105, align: 1)
!253 = !DILocation(line: 305, scope: !234)
!254 = !DILocation(line: 306, scope: !234)
!255 = !DILocation(line: 306, scope: !256)
!256 = distinct !DILexicalBlock(scope: !234, file: !2, line: 306, column: 2)
!257 = !DILocalVariable(name: "index", scope: !258, file: !2, line: 308, type: !67, align: 8)
!258 = distinct !DILexicalBlock(scope: !256, file: !2, line: 307, column: 2)
!259 = !DILocation(line: 308, scope: !258)
!260 = !DILocalVariable(name: "res", scope: !258, file: !2, line: 309, type: !59, align: 8)
!261 = !DILocation(line: 309, scope: !258)
!262 = !DILocation(line: 310, scope: !258)
!263 = !DILocation(line: 312, scope: !264)
!264 = distinct !DILexicalBlock(scope: !258, file: !2, line: 311, column: 3)
!265 = !DILocation(line: 313, scope: !264)
!266 = !DILocation(line: 317, scope: !267)
!267 = distinct !DILexicalBlock(scope: !258, file: !2, line: 316, column: 3)
!268 = !DILocation(line: 318, scope: !267)
!269 = !DILocation(line: 320, scope: !258)
!270 = !DILocation(line: 322, scope: !271)
!271 = distinct !DILexicalBlock(scope: !258, file: !2, line: 321, column: 3)
!272 = !DILocation(line: 324, scope: !258)
!273 = !DILocation(line: 326, scope: !274)
!274 = distinct !DILexicalBlock(scope: !258, file: !2, line: 325, column: 3)
!275 = !DILocation(line: 328, scope: !258)
!276 = !DILocation(line: 330, scope: !234)
!277 = !DILocation(line: 298, scope: !234)
!278 = distinct !DISubprogram(name: "contains", linkageName: "std.core.String.contains", scope: !2, file: !2, line: 341, type: !103, scopeLine: 341, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!279 = !DILocalVariable(name: "s", arg: 1, scope: !278, file: !2, line: 341, type: !59)
!280 = !DILocation(line: 341, scope: !278)
!281 = !DILocalVariable(name: "needle", arg: 2, scope: !278, file: !2, line: 341, type: !59)
!282 = !DILocation(line: 365, scope: !283, inlinedAt: !285)
!283 = distinct !DISubprogram(name: "@ok", linkageName: "@ok", scope: !284, file: !284, line: 363, scopeLine: 363, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!284 = !DIFile(filename: "builtin.c3", directory: "C:/Program Files/c3c/lib/std/core")
!285 = !DILocation(line: 343, scope: !278)
!286 = !DILocation(line: 366, scope: !283, inlinedAt: !285)
!287 = distinct !DISubprogram(name: "index_of_char", linkageName: "std.core.String.index_of_char", scope: !2, file: !2, line: 356, type: !288, scopeLine: 356, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!288 = !DISubroutineType(types: !289)
!289 = !{!237, !290, !59, !64}
!290 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !66, size: 64, align: 64, dwarfAddressSpace: 0)
!291 = !DILocalVariable(name: "s", arg: 1, scope: !287, file: !2, line: 356, type: !59)
!292 = !DILocation(line: 356, scope: !287)
!293 = !DILocalVariable(name: "needle", arg: 2, scope: !287, file: !2, line: 356, type: !64)
!294 = !DILocalVariable(name: ".temp", scope: !295, file: !2, line: 358, type: !66, align: 8)
!295 = distinct !DILexicalBlock(scope: !287, file: !2, line: 358, column: 2)
!296 = !DILocation(line: 358, scope: !295)
!297 = !DILocalVariable(name: "i", scope: !298, file: !2, line: 358, type: !66, align: 8)
!298 = distinct !DILexicalBlock(scope: !295, file: !2, line: 359, column: 2)
!299 = !DILocation(line: 358, scope: !298)
!300 = !DILocalVariable(name: "c", scope: !298, file: !2, line: 358, type: !64, align: 1)
!301 = !DILocation(line: 360, scope: !302)
!302 = distinct !DILexicalBlock(scope: !298, file: !2, line: 359, column: 2)
!303 = !DILocation(line: 352, scope: !302)
!304 = !DILocation(line: 362, scope: !287)
!305 = distinct !DISubprogram(name: "index_of_char_from", linkageName: "std.core.String.index_of_char_from", scope: !2, file: !2, line: 376, type: !306, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!306 = !DISubroutineType(types: !307)
!307 = !{!237, !290, !59, !64, !67}
!308 = !DILocalVariable(name: "s", arg: 1, scope: !305, file: !2, line: 376, type: !59)
!309 = !DILocation(line: 376, scope: !305)
!310 = !DILocalVariable(name: "needle", arg: 2, scope: !305, file: !2, line: 376, type: !64)
!311 = !DILocalVariable(name: "start_index", arg: 3, scope: !305, file: !2, line: 376, type: !66)
!312 = !DILocalVariable(name: "len", scope: !305, file: !2, line: 378, type: !66, align: 8)
!313 = !DILocation(line: 378, scope: !305)
!314 = !DILocation(line: 379, scope: !305)
!315 = !DILocalVariable(name: "i", scope: !316, file: !2, line: 380, type: !66, align: 8)
!316 = distinct !DILexicalBlock(scope: !305, file: !2, line: 380, column: 2)
!317 = !DILocation(line: 380, scope: !316)
!318 = !DILocation(line: 382, scope: !319)
!319 = distinct !DILexicalBlock(scope: !316, file: !2, line: 381, column: 2)
!320 = !DILocation(line: 372, scope: !319)
!321 = !DILocation(line: 384, scope: !305)
!322 = distinct !DISubprogram(name: "rindex_of_char", linkageName: "std.core.String.rindex_of_char", scope: !2, file: !2, line: 397, type: !288, scopeLine: 397, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!323 = !DILocalVariable(name: "s", arg: 1, scope: !322, file: !2, line: 397, type: !59)
!324 = !DILocation(line: 397, scope: !322)
!325 = !DILocalVariable(name: "needle", arg: 2, scope: !322, file: !2, line: 397, type: !64)
!326 = !DILocalVariable(name: ".temp", scope: !327, file: !2, line: 399, type: !66, align: 8)
!327 = distinct !DILexicalBlock(scope: !322, file: !2, line: 399, column: 2)
!328 = !DILocation(line: 399, scope: !327)
!329 = !DILocation(line: 399, scope: !330)
!330 = distinct !DILexicalBlock(scope: !327, file: !2, line: 400, column: 2)
!331 = !DILocalVariable(name: "i", scope: !330, file: !2, line: 399, type: !66, align: 8)
!332 = !DILocalVariable(name: "c", scope: !330, file: !2, line: 399, type: !64, align: 1)
!333 = !DILocation(line: 401, scope: !334)
!334 = distinct !DILexicalBlock(scope: !330, file: !2, line: 400, column: 2)
!335 = !DILocation(line: 393, scope: !334)
!336 = !DILocation(line: 403, scope: !322)
!337 = distinct !DISubprogram(name: "index_of", linkageName: "std.core.String.index_of", scope: !2, file: !2, line: 417, type: !338, scopeLine: 417, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!338 = !DISubroutineType(types: !339)
!339 = !{!237, !290, !59, !59}
!340 = !DILocalVariable(name: "s", arg: 1, scope: !337, file: !2, line: 417, type: !59)
!341 = !DILocation(line: 417, scope: !337)
!342 = !DILocalVariable(name: "needle", arg: 2, scope: !337, file: !2, line: 417, type: !59)
!343 = !DILocation(line: 413, scope: !344)
!344 = distinct !DILexicalBlock(scope: !337, file: !2, line: 418, column: 1)
!345 = !DILocalVariable(name: "needed", scope: !337, file: !2, line: 419, type: !66, align: 8)
!346 = !DILocation(line: 419, scope: !337)
!347 = !DILocation(line: 420, scope: !337)
!348 = !DILocalVariable(name: "first", scope: !349, file: !2, line: 422, type: !64, align: 1)
!349 = distinct !DILexicalBlock(scope: !337, file: !2, line: 421, column: 2)
!350 = !DILocation(line: 422, scope: !349)
!351 = !DILocalVariable(name: ".temp", scope: !352, file: !2, line: 423, type: !137, align: 8)
!352 = distinct !DILexicalBlock(scope: !349, file: !2, line: 423, column: 3)
!353 = !DILocation(line: 423, scope: !352)
!354 = !DILocalVariable(name: ".temp", scope: !352, file: !2, line: 423, type: !66, align: 8)
!355 = !DILocalVariable(name: "i", scope: !356, file: !2, line: 423, type: !66, align: 8)
!356 = distinct !DILexicalBlock(scope: !352, file: !2, line: 424, column: 3)
!357 = !DILocation(line: 423, scope: !356)
!358 = !DILocalVariable(name: "c", scope: !356, file: !2, line: 423, type: !64, align: 1)
!359 = !DILocation(line: 425, scope: !360)
!360 = distinct !DILexicalBlock(scope: !356, file: !2, line: 424, column: 3)
!361 = !DILocation(line: 412, scope: !360)
!362 = !DILocation(line: 428, scope: !337)
!363 = distinct !DISubprogram(name: "rindex_of", linkageName: "std.core.String.rindex_of", scope: !2, file: !2, line: 442, type: !338, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!364 = !DILocalVariable(name: "s", arg: 1, scope: !363, file: !2, line: 442, type: !59)
!365 = !DILocation(line: 442, scope: !363)
!366 = !DILocalVariable(name: "needle", arg: 2, scope: !363, file: !2, line: 442, type: !59)
!367 = !DILocation(line: 438, scope: !368)
!368 = distinct !DILexicalBlock(scope: !363, file: !2, line: 443, column: 1)
!369 = !DILocalVariable(name: "needed", scope: !363, file: !2, line: 444, type: !66, align: 8)
!370 = !DILocation(line: 444, scope: !363)
!371 = !DILocation(line: 445, scope: !363)
!372 = !DILocalVariable(name: "first", scope: !373, file: !2, line: 447, type: !64, align: 1)
!373 = distinct !DILexicalBlock(scope: !363, file: !2, line: 446, column: 2)
!374 = !DILocation(line: 447, scope: !373)
!375 = !DILocalVariable(name: ".temp", scope: !376, file: !2, line: 448, type: !137, align: 8)
!376 = distinct !DILexicalBlock(scope: !373, file: !2, line: 448, column: 3)
!377 = !DILocation(line: 448, scope: !376)
!378 = !DILocalVariable(name: ".temp", scope: !376, file: !2, line: 448, type: !66, align: 8)
!379 = !DILocation(line: 448, scope: !380)
!380 = distinct !DILexicalBlock(scope: !376, file: !2, line: 449, column: 3)
!381 = !DILocalVariable(name: "i", scope: !380, file: !2, line: 448, type: !66, align: 8)
!382 = !DILocalVariable(name: "c", scope: !380, file: !2, line: 448, type: !64, align: 1)
!383 = !DILocation(line: 450, scope: !384)
!384 = distinct !DILexicalBlock(scope: !380, file: !2, line: 449, column: 3)
!385 = !DILocation(line: 437, scope: !384)
!386 = !DILocation(line: 453, scope: !363)
!387 = distinct !DISubprogram(name: "str_view", linkageName: "std.core.string.ZString.str_view", scope: !2, file: !2, line: 456, type: !388, scopeLine: 456, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!388 = !DISubroutineType(types: !389)
!389 = !{!59, !390}
!390 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZString", scope: !2, file: !2, line: 6, baseType: !63, align: 8)
!391 = !DILocalVariable(name: "str", arg: 1, scope: !387, file: !2, line: 456, type: !390)
!392 = !DILocation(line: 456, scope: !387)
!393 = !DILocation(line: 458, scope: !387)
!394 = distinct !DISubprogram(name: "char_len", linkageName: "std.core.string.ZString.char_len", scope: !2, file: !2, line: 461, type: !395, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!395 = !DISubroutineType(types: !396)
!396 = !{!66, !390}
!397 = !DILocalVariable(name: "str", arg: 1, scope: !394, file: !2, line: 461, type: !390)
!398 = !DILocation(line: 461, scope: !394)
!399 = !DILocalVariable(name: "len", scope: !394, file: !2, line: 463, type: !66, align: 8)
!400 = !DILocation(line: 463, scope: !394)
!401 = !DILocalVariable(name: "ptr", scope: !394, file: !2, line: 464, type: !63, align: 8)
!402 = !DILocation(line: 464, scope: !394)
!403 = !DILocation(line: 465, scope: !394)
!404 = !DILocalVariable(name: "c", scope: !405, file: !2, line: 465, type: !64, align: 1)
!405 = distinct !DILexicalBlock(scope: !394, file: !2, line: 465, column: 2)
!406 = !DILocation(line: 465, scope: !405)
!407 = !DILocation(line: 467, scope: !408)
!408 = distinct !DILexicalBlock(scope: !405, file: !2, line: 466, column: 2)
!409 = !DILocation(line: 469, scope: !394)
!410 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.ZString.len", scope: !2, file: !2, line: 472, type: !395, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!411 = !DILocalVariable(name: "str", arg: 1, scope: !410, file: !2, line: 472, type: !390)
!412 = !DILocation(line: 472, scope: !410)
!413 = !DILocalVariable(name: "len", scope: !410, file: !2, line: 474, type: !66, align: 8)
!414 = !DILocation(line: 474, scope: !410)
!415 = !DILocalVariable(name: "ptr", scope: !410, file: !2, line: 475, type: !63, align: 8)
!416 = !DILocation(line: 475, scope: !410)
!417 = !DILocation(line: 476, scope: !410)
!418 = !DILocalVariable(name: "c", scope: !419, file: !2, line: 476, type: !64, align: 1)
!419 = distinct !DILexicalBlock(scope: !410, file: !2, line: 476, column: 2)
!420 = !DILocation(line: 476, scope: !419)
!421 = !DILocation(line: 477, scope: !410)
!422 = distinct !DISubprogram(name: "zstr_copy", linkageName: "std.core.String.zstr_copy", scope: !2, file: !2, line: 481, type: !423, scopeLine: 481, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!423 = !DISubroutineType(types: !424)
!424 = !{!390, !59, !139}
!425 = !DILocalVariable(name: "s", arg: 1, scope: !422, file: !2, line: 481, type: !59)
!426 = !DILocation(line: 481, scope: !422)
!427 = !DILocalVariable(name: "allocator", arg: 2, scope: !422, file: !2, line: 481, type: !139)
!428 = !DILocalVariable(name: "len", scope: !422, file: !2, line: 483, type: !66, align: 8)
!429 = !DILocation(line: 483, scope: !422)
!430 = !DILocalVariable(name: "str", scope: !422, file: !2, line: 484, type: !63, align: 8)
!431 = !DILocation(line: 484, scope: !422)
!432 = !DILocation(line: 62, scope: !433, inlinedAt: !434)
!433 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!434 = !DILocation(line: 57, scope: !435, inlinedAt: !431)
!435 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !161, file: !161, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!436 = !DILocation(line: 28, scope: !437, inlinedAt: !438)
!437 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!438 = !DILocation(line: 68, scope: !433, inlinedAt: !434)
!439 = !DILocation(line: 485, scope: !422)
!440 = !DILocation(line: 309, scope: !441, inlinedAt: !439)
!441 = distinct !DILexicalBlock(scope: !443, file: !442, line: 312, column: 1)
!442 = !DIFile(filename: "mem.c3", directory: "C:/Program Files/c3c/lib/std/core")
!443 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !442, file: !442, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!444 = !DILocation(line: 313, scope: !443, inlinedAt: !439)
!445 = !DILocation(line: 486, scope: !422)
!446 = !DILocation(line: 487, scope: !422)
!447 = distinct !DISubprogram(name: "concat", linkageName: "std.core.String.concat", scope: !2, file: !2, line: 490, type: !448, scopeLine: 490, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!448 = !DISubroutineType(types: !449)
!449 = !{!59, !59, !59, !139}
!450 = !DILocalVariable(name: "s1", arg: 1, scope: !447, file: !2, line: 490, type: !59)
!451 = !DILocation(line: 490, scope: !447)
!452 = !DILocalVariable(name: "s2", arg: 2, scope: !447, file: !2, line: 490, type: !59)
!453 = !DILocalVariable(name: "allocator", arg: 3, scope: !447, file: !2, line: 490, type: !139)
!454 = !DILocalVariable(name: "full_len", scope: !447, file: !2, line: 492, type: !66, align: 8)
!455 = !DILocation(line: 492, scope: !447)
!456 = !DILocalVariable(name: "str", scope: !447, file: !2, line: 493, type: !63, align: 8)
!457 = !DILocation(line: 493, scope: !447)
!458 = !DILocation(line: 62, scope: !459, inlinedAt: !460)
!459 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!460 = !DILocation(line: 57, scope: !461, inlinedAt: !457)
!461 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !161, file: !161, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!462 = !DILocation(line: 28, scope: !463, inlinedAt: !464)
!463 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!464 = !DILocation(line: 68, scope: !459, inlinedAt: !460)
!465 = !DILocalVariable(name: "s1_len", scope: !447, file: !2, line: 494, type: !66, align: 8)
!466 = !DILocation(line: 494, scope: !447)
!467 = !DILocation(line: 495, scope: !447)
!468 = !DILocation(line: 309, scope: !469, inlinedAt: !467)
!469 = distinct !DILexicalBlock(scope: !470, file: !442, line: 312, column: 1)
!470 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !442, file: !442, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!471 = !DILocation(line: 313, scope: !470, inlinedAt: !467)
!472 = !DILocation(line: 496, scope: !447)
!473 = !DILocation(line: 309, scope: !474, inlinedAt: !472)
!474 = distinct !DILexicalBlock(scope: !475, file: !442, line: 312, column: 1)
!475 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !442, file: !442, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!476 = !DILocation(line: 313, scope: !475, inlinedAt: !472)
!477 = !DILocation(line: 497, scope: !447)
!478 = !DILocation(line: 498, scope: !447)
!479 = distinct !DISubprogram(name: "tconcat", linkageName: "std.core.String.tconcat", scope: !2, file: !2, line: 501, type: !57, scopeLine: 501, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!480 = !DILocalVariable(name: "s1", arg: 1, scope: !479, file: !2, line: 501, type: !59)
!481 = !DILocation(line: 501, scope: !479)
!482 = !DILocalVariable(name: "s2", arg: 2, scope: !479, file: !2, line: 501, type: !59)
!483 = !DILocation(line: 396, scope: !484, inlinedAt: !481)
!484 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!485 = !DILocation(line: 398, scope: !486, inlinedAt: !481)
!486 = distinct !DILexicalBlock(scope: !484, file: !161, line: 397, column: 2)
!487 = !DILocation(line: 400, scope: !484, inlinedAt: !481)
!488 = distinct !DISubprogram(name: "zstr_tcopy", linkageName: "std.core.String.zstr_tcopy", scope: !2, file: !2, line: 504, type: !489, scopeLine: 504, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!489 = !DISubroutineType(types: !490)
!490 = !{!390, !59}
!491 = !DILocalVariable(name: "s", arg: 1, scope: !488, file: !2, line: 504, type: !59)
!492 = !DILocation(line: 504, scope: !488)
!493 = !DILocation(line: 396, scope: !494, inlinedAt: !492)
!494 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!495 = !DILocation(line: 398, scope: !496, inlinedAt: !492)
!496 = distinct !DILexicalBlock(scope: !494, file: !161, line: 397, column: 2)
!497 = !DILocation(line: 400, scope: !494, inlinedAt: !492)
!498 = distinct !DISubprogram(name: "copy", linkageName: "std.core.String.copy", scope: !2, file: !2, line: 506, type: !499, scopeLine: 506, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!499 = !DISubroutineType(types: !500)
!500 = !{!59, !59, !139}
!501 = !DILocalVariable(name: "s", arg: 1, scope: !498, file: !2, line: 506, type: !59)
!502 = !DILocation(line: 506, scope: !498)
!503 = !DILocalVariable(name: "allocator", arg: 2, scope: !498, file: !2, line: 506, type: !139)
!504 = !DILocalVariable(name: "len", scope: !498, file: !2, line: 508, type: !66, align: 8)
!505 = !DILocation(line: 508, scope: !498)
!506 = !DILocalVariable(name: "str", scope: !498, file: !2, line: 509, type: !63, align: 8)
!507 = !DILocation(line: 509, scope: !498)
!508 = !DILocation(line: 62, scope: !509, inlinedAt: !510)
!509 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!510 = !DILocation(line: 57, scope: !511, inlinedAt: !507)
!511 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !161, file: !161, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!512 = !DILocation(line: 28, scope: !513, inlinedAt: !514)
!513 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!514 = !DILocation(line: 68, scope: !509, inlinedAt: !510)
!515 = !DILocation(line: 510, scope: !498)
!516 = !DILocation(line: 309, scope: !517, inlinedAt: !515)
!517 = distinct !DILexicalBlock(scope: !518, file: !442, line: 312, column: 1)
!518 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !442, file: !442, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!519 = !DILocation(line: 313, scope: !518, inlinedAt: !515)
!520 = !DILocation(line: 511, scope: !498)
!521 = !DILocation(line: 512, scope: !498)
!522 = distinct !DISubprogram(name: "free", linkageName: "std.core.String.free", scope: !2, file: !2, line: 515, type: !523, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!523 = !DISubroutineType(types: !524)
!524 = !{null, !137, !139}
!525 = !DILocation(line: 516, scope: !522)
!526 = !DILocalVariable(name: "s", arg: 1, scope: !522, file: !2, line: 515, type: !137)
!527 = !DILocation(line: 515, scope: !522)
!528 = !DILocalVariable(name: "allocator", arg: 2, scope: !522, file: !2, line: 515, type: !139)
!529 = !DILocation(line: 517, scope: !522)
!530 = !DILocation(line: 518, scope: !522)
!531 = !DILocation(line: 101, scope: !532, inlinedAt: !530)
!532 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !161, file: !161, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!533 = !DILocation(line: 105, scope: !532, inlinedAt: !530)
!534 = !DILocation(line: 519, scope: !522)
!535 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.String.tcopy", scope: !2, file: !2, line: 522, type: !536, scopeLine: 522, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!536 = !DISubroutineType(types: !537)
!537 = !{!59, !59}
!538 = !DILocalVariable(name: "s", arg: 1, scope: !535, file: !2, line: 522, type: !59)
!539 = !DILocation(line: 522, scope: !535)
!540 = !DILocation(line: 396, scope: !541, inlinedAt: !539)
!541 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!542 = !DILocation(line: 398, scope: !543, inlinedAt: !539)
!543 = distinct !DILexicalBlock(scope: !541, file: !161, line: 397, column: 2)
!544 = !DILocation(line: 400, scope: !541, inlinedAt: !539)
!545 = distinct !DISubprogram(name: "copy", linkageName: "std.core.string.ZString.copy", scope: !2, file: !2, line: 524, type: !546, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!546 = !DISubroutineType(types: !547)
!547 = !{!59, !390, !139}
!548 = !DILocalVariable(name: "z", arg: 1, scope: !545, file: !2, line: 524, type: !390)
!549 = !DILocation(line: 524, scope: !545)
!550 = !DILocalVariable(name: "allocator", arg: 2, scope: !545, file: !2, line: 524, type: !139)
!551 = !DILocation(line: 526, scope: !545)
!552 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.string.ZString.tcopy", scope: !2, file: !2, line: 529, type: !388, scopeLine: 529, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!553 = !DILocalVariable(name: "z", arg: 1, scope: !552, file: !2, line: 529, type: !390)
!554 = !DILocation(line: 529, scope: !552)
!555 = !DILocation(line: 531, scope: !552)
!556 = !DILocation(line: 396, scope: !557, inlinedAt: !555)
!557 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!558 = !DILocation(line: 398, scope: !559, inlinedAt: !555)
!559 = distinct !DILexicalBlock(scope: !557, file: !161, line: 397, column: 2)
!560 = !DILocation(line: 400, scope: !557, inlinedAt: !555)
!561 = distinct !DISubprogram(name: "to_new_utf16", linkageName: "std.core.String.to_new_utf16", scope: !2, file: !2, line: 540, type: !562, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!562 = !DISubroutineType(types: !563)
!563 = !{!237, !564, !59, !139}
!564 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16[]*", baseType: !565, size: 64, align: 64, dwarfAddressSpace: 0)
!565 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char16[]", size: 128, align: 64, elements: !566, identifier: "Char16[]")
!566 = !{!567, !571}
!567 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !565, baseType: !568, size: 64, align: 64)
!568 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16*", baseType: !569, size: 64, align: 64, dwarfAddressSpace: 0)
!569 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char16", scope: !2, file: !2, line: 9, baseType: !570, align: 2)
!570 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !565, baseType: !66, size: 64, align: 64, offset: 64)
!572 = !DILocalVariable(name: "s", arg: 1, scope: !561, file: !2, line: 540, type: !59)
!573 = !DILocation(line: 540, scope: !561)
!574 = !DILocalVariable(name: "allocator", arg: 2, scope: !561, file: !2, line: 540, type: !139)
!575 = !DILocalVariable(name: "len16", scope: !561, file: !2, line: 542, type: !66, align: 8)
!576 = !DILocation(line: 542, scope: !561)
!577 = !DILocalVariable(name: "data", scope: !561, file: !2, line: 543, type: !568, align: 8)
!578 = !DILocation(line: 543, scope: !561)
!579 = !DILocation(line: 286, scope: !580, inlinedAt: !578)
!580 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !161, file: !161, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!581 = !DILocation(line: 62, scope: !582, inlinedAt: !579)
!582 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!583 = !DILocation(line: 28, scope: !584, inlinedAt: !585)
!584 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!585 = !DILocation(line: 68, scope: !582, inlinedAt: !579)
!586 = !DILocation(line: 544, scope: !561)
!587 = !DILocation(line: 545, scope: !561)
!588 = !DILocation(line: 546, scope: !561)
!589 = distinct !DISubprogram(name: "to_temp_utf16", linkageName: "std.core.String.to_temp_utf16", scope: !2, file: !2, line: 555, type: !590, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!590 = !DISubroutineType(types: !591)
!591 = !{!237, !564, !59}
!592 = !DILocalVariable(name: "s", arg: 1, scope: !589, file: !2, line: 555, type: !59)
!593 = !DILocation(line: 555, scope: !589)
!594 = !DILocation(line: 396, scope: !595, inlinedAt: !596)
!595 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!596 = !DILocation(line: 557, scope: !589)
!597 = !DILocation(line: 398, scope: !598, inlinedAt: !596)
!598 = distinct !DILexicalBlock(scope: !595, file: !161, line: 397, column: 2)
!599 = !DILocation(line: 400, scope: !595, inlinedAt: !596)
!600 = distinct !DISubprogram(name: "to_wstring", linkageName: "std.core.String.to_wstring", scope: !2, file: !2, line: 560, type: !601, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!601 = !DISubroutineType(types: !602)
!602 = !{!237, !603, !59, !139}
!603 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WString*", baseType: !604, size: 64, align: 64, dwarfAddressSpace: 0)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "WString", scope: !2, file: !2, line: 7, baseType: !605, align: 8)
!605 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !570, size: 64, align: 64, dwarfAddressSpace: 0)
!606 = !DILocalVariable(name: "s", arg: 1, scope: !600, file: !2, line: 560, type: !59)
!607 = !DILocation(line: 560, scope: !600)
!608 = !DILocalVariable(name: "allocator", arg: 2, scope: !600, file: !2, line: 560, type: !139)
!609 = !DILocation(line: 562, scope: !600)
!610 = distinct !DISubprogram(name: "to_temp_wstring", linkageName: "std.core.String.to_temp_wstring", scope: !2, file: !2, line: 565, type: !611, scopeLine: 565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!611 = !DISubroutineType(types: !612)
!612 = !{!237, !603, !59}
!613 = !DILocalVariable(name: "s", arg: 1, scope: !610, file: !2, line: 565, type: !59)
!614 = !DILocation(line: 565, scope: !610)
!615 = !DILocation(line: 396, scope: !616, inlinedAt: !614)
!616 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!617 = !DILocation(line: 398, scope: !618, inlinedAt: !614)
!618 = distinct !DILexicalBlock(scope: !616, file: !161, line: 397, column: 2)
!619 = !DILocation(line: 400, scope: !616, inlinedAt: !614)
!620 = distinct !DISubprogram(name: "to_new_wstring", linkageName: "std.core.String.to_new_wstring", scope: !2, file: !2, line: 566, type: !611, scopeLine: 566, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!621 = !DILocalVariable(name: "s", arg: 1, scope: !620, file: !2, line: 566, type: !59)
!622 = !DILocation(line: 566, scope: !620)
!623 = distinct !DISubprogram(name: "to_utf32", linkageName: "std.core.String.to_utf32", scope: !2, file: !2, line: 568, type: !624, scopeLine: 568, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!624 = !DISubroutineType(types: !625)
!625 = !{!237, !626, !59, !139}
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32[]*", baseType: !627, size: 64, align: 64, dwarfAddressSpace: 0)
!627 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char32[]", size: 128, align: 64, elements: !628, identifier: "Char32[]")
!628 = !{!629, !632}
!629 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !627, baseType: !630, size: 64, align: 64)
!630 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32*", baseType: !631, size: 64, align: 64, dwarfAddressSpace: 0)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !2, file: !2, line: 8, baseType: !3, align: 4)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !627, baseType: !66, size: 64, align: 64, offset: 64)
!633 = !DILocalVariable(name: "s", arg: 1, scope: !623, file: !2, line: 568, type: !59)
!634 = !DILocation(line: 568, scope: !623)
!635 = !DILocalVariable(name: "allocator", arg: 2, scope: !623, file: !2, line: 568, type: !139)
!636 = !DILocalVariable(name: "codepoints", scope: !623, file: !2, line: 570, type: !66, align: 8)
!637 = !DILocation(line: 570, scope: !623)
!638 = !DILocalVariable(name: "data", scope: !623, file: !2, line: 571, type: !630, align: 8)
!639 = !DILocation(line: 571, scope: !623)
!640 = !DILocation(line: 286, scope: !641, inlinedAt: !639)
!641 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !161, file: !161, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!642 = !DILocation(line: 62, scope: !643, inlinedAt: !640)
!643 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!644 = !DILocation(line: 28, scope: !645, inlinedAt: !646)
!645 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!646 = !DILocation(line: 68, scope: !643, inlinedAt: !640)
!647 = !DILocation(line: 572, scope: !623)
!648 = !DILocation(line: 573, scope: !623)
!649 = !DILocation(line: 574, scope: !623)
!650 = distinct !DISubprogram(name: "to_new_utf32", linkageName: "std.core.String.to_new_utf32", scope: !2, file: !2, line: 577, type: !651, scopeLine: 577, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!651 = !DISubroutineType(types: !652)
!652 = !{!237, !626, !59}
!653 = !DILocalVariable(name: "s", arg: 1, scope: !650, file: !2, line: 577, type: !59)
!654 = !DILocation(line: 577, scope: !650)
!655 = distinct !DISubprogram(name: "to_temp_utf32", linkageName: "std.core.String.to_temp_utf32", scope: !2, file: !2, line: 578, type: !651, scopeLine: 578, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!656 = !DILocalVariable(name: "s", arg: 1, scope: !655, file: !2, line: 578, type: !59)
!657 = !DILocation(line: 578, scope: !655)
!658 = !DILocation(line: 396, scope: !659, inlinedAt: !657)
!659 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!660 = !DILocation(line: 398, scope: !661, inlinedAt: !657)
!661 = distinct !DILexicalBlock(scope: !659, file: !161, line: 397, column: 2)
!662 = !DILocation(line: 400, scope: !659, inlinedAt: !657)
!663 = distinct !DISubprogram(name: "convert_ascii_to_lower", linkageName: "std.core.String.convert_ascii_to_lower", scope: !2, file: !2, line: 586, type: !664, scopeLine: 586, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!664 = !DISubroutineType(types: !665)
!665 = !{null, !59}
!666 = !DILocalVariable(name: "s", arg: 1, scope: !663, file: !2, line: 586, type: !59)
!667 = !DILocation(line: 586, scope: !663)
!668 = !DILocalVariable(name: ".temp", scope: !669, file: !2, line: 588, type: !66, align: 8)
!669 = distinct !DILexicalBlock(scope: !663, file: !2, line: 588, column: 2)
!670 = !DILocation(line: 588, scope: !669)
!671 = !DILocalVariable(name: "c", scope: !672, file: !2, line: 588, type: !63, align: 8)
!672 = distinct !DILexicalBlock(scope: !669, file: !2, line: 588, column: 19)
!673 = !DILocation(line: 588, scope: !672)
!674 = distinct !DISubprogram(name: "new_ascii_to_lower", linkageName: "std.core.String.new_ascii_to_lower", scope: !2, file: !2, line: 591, type: !499, scopeLine: 591, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!675 = !DILocalVariable(name: "s", arg: 1, scope: !674, file: !2, line: 591, type: !59)
!676 = !DILocation(line: 591, scope: !674)
!677 = !DILocalVariable(name: "allocator", arg: 2, scope: !674, file: !2, line: 591, type: !139)
!678 = !DILocalVariable(name: "copy", scope: !674, file: !2, line: 593, type: !59, align: 8)
!679 = !DILocation(line: 593, scope: !674)
!680 = !DILocation(line: 594, scope: !674)
!681 = !DILocation(line: 595, scope: !674)
!682 = distinct !DISubprogram(name: "temp_ascii_to_lower", linkageName: "std.core.String.temp_ascii_to_lower", scope: !2, file: !2, line: 598, type: !536, scopeLine: 598, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!683 = !DILocalVariable(name: "s", arg: 1, scope: !682, file: !2, line: 598, type: !59)
!684 = !DILocation(line: 598, scope: !682)
!685 = !DILocation(line: 396, scope: !686, inlinedAt: !687)
!686 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!687 = !DILocation(line: 600, scope: !682)
!688 = !DILocation(line: 398, scope: !689, inlinedAt: !687)
!689 = distinct !DILexicalBlock(scope: !686, file: !161, line: 397, column: 2)
!690 = !DILocation(line: 400, scope: !686, inlinedAt: !687)
!691 = distinct !DISubprogram(name: "convert_ascii_to_upper", linkageName: "std.core.String.convert_ascii_to_upper", scope: !2, file: !2, line: 609, type: !664, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!692 = !DILocalVariable(name: "s", arg: 1, scope: !691, file: !2, line: 609, type: !59)
!693 = !DILocation(line: 609, scope: !691)
!694 = !DILocalVariable(name: ".temp", scope: !695, file: !2, line: 611, type: !66, align: 8)
!695 = distinct !DILexicalBlock(scope: !691, file: !2, line: 611, column: 2)
!696 = !DILocation(line: 611, scope: !695)
!697 = !DILocalVariable(name: "c", scope: !698, file: !2, line: 611, type: !63, align: 8)
!698 = distinct !DILexicalBlock(scope: !695, file: !2, line: 611, column: 19)
!699 = !DILocation(line: 611, scope: !698)
!700 = distinct !DISubprogram(name: "new_ascii_to_upper", linkageName: "std.core.String.new_ascii_to_upper", scope: !2, file: !2, line: 622, type: !499, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!701 = !DILocalVariable(name: "s", arg: 1, scope: !700, file: !2, line: 622, type: !59)
!702 = !DILocation(line: 622, scope: !700)
!703 = !DILocalVariable(name: "allocator", arg: 2, scope: !700, file: !2, line: 622, type: !139)
!704 = !DILocalVariable(name: "copy", scope: !700, file: !2, line: 624, type: !59, align: 8)
!705 = !DILocation(line: 624, scope: !700)
!706 = !DILocation(line: 625, scope: !700)
!707 = !DILocation(line: 626, scope: !700)
!708 = distinct !DISubprogram(name: "iterator", linkageName: "std.core.String.iterator", scope: !2, file: !2, line: 629, type: !709, scopeLine: 629, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!709 = !DISubroutineType(types: !710)
!710 = !{!711, !59}
!711 = !DICompositeType(tag: DW_TAG_structure_type, name: "StringIterator", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !712, identifier: "std.core.string.iterator.StringIterator")
!712 = !{!713, !714}
!713 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !711, file: !2, line: 5, baseType: !59, size: 128, align: 64)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !711, file: !2, line: 6, baseType: !66, size: 64, align: 64, offset: 128)
!715 = !DILocalVariable(name: "s", arg: 1, scope: !708, file: !2, line: 629, type: !59)
!716 = !DILocation(line: 629, scope: !708)
!717 = !DILocation(line: 631, scope: !708)
!718 = distinct !DISubprogram(name: "temp_ascii_to_upper", linkageName: "std.core.String.temp_ascii_to_upper", scope: !2, file: !2, line: 638, type: !536, scopeLine: 638, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!719 = !DILocalVariable(name: "s", arg: 1, scope: !718, file: !2, line: 638, type: !59)
!720 = !DILocation(line: 638, scope: !718)
!721 = !DILocation(line: 396, scope: !722, inlinedAt: !723)
!722 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!723 = !DILocation(line: 640, scope: !718)
!724 = !DILocation(line: 398, scope: !725, inlinedAt: !723)
!725 = distinct !DILexicalBlock(scope: !722, file: !161, line: 397, column: 2)
!726 = !DILocation(line: 400, scope: !722, inlinedAt: !723)
!727 = distinct !DISubprogram(name: "utf8_codepoints", linkageName: "std.core.String.utf8_codepoints", scope: !2, file: !2, line: 674, type: !728, scopeLine: 674, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!728 = !DISubroutineType(types: !729)
!729 = !{!66, !59}
!730 = !DILocalVariable(name: "s", arg: 1, scope: !727, file: !2, line: 674, type: !59)
!731 = !DILocation(line: 674, scope: !727)
!732 = !DILocalVariable(name: "len", scope: !727, file: !2, line: 676, type: !66, align: 8)
!733 = !DILocation(line: 676, scope: !727)
!734 = !DILocalVariable(name: ".temp", scope: !735, file: !2, line: 677, type: !66, align: 8)
!735 = distinct !DILexicalBlock(scope: !727, file: !2, line: 677, column: 2)
!736 = !DILocation(line: 677, scope: !735)
!737 = !DILocalVariable(name: "c", scope: !738, file: !2, line: 677, type: !64, align: 1)
!738 = distinct !DILexicalBlock(scope: !735, file: !2, line: 678, column: 2)
!739 = !DILocation(line: 677, scope: !738)
!740 = !DILocation(line: 679, scope: !741)
!741 = distinct !DILexicalBlock(scope: !738, file: !2, line: 678, column: 2)
!742 = !DILocation(line: 681, scope: !727)
!743 = distinct !DISubprogram(name: "to_int128", linkageName: "std.core.String.to_int128", scope: !2, file: !2, line: 759, type: !744, scopeLine: 759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!744 = !DISubroutineType(types: !745)
!745 = !{!237, !746, !59, !18}
!746 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !747, size: 64, align: 64, dwarfAddressSpace: 0)
!747 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!748 = !DILocalVariable(name: "s", arg: 1, scope: !743, file: !2, line: 759, type: !59)
!749 = !DILocation(line: 759, scope: !743)
!750 = !DILocalVariable(name: "base", arg: 2, scope: !743, file: !2, line: 759, type: !18)
!751 = !DILocation(line: 686, scope: !752, inlinedAt: !749)
!752 = distinct !DILexicalBlock(scope: !753, file: !2, line: 689, column: 1)
!753 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!754 = !DILocalVariable(name: "len", scope: !753, file: !2, line: 690, type: !66, align: 8)
!755 = !DILocation(line: 690, scope: !753, inlinedAt: !749)
!756 = !DILocalVariable(name: "index", scope: !753, file: !2, line: 691, type: !66, align: 8)
!757 = !DILocation(line: 691, scope: !753, inlinedAt: !749)
!758 = !DILocalVariable(name: "ptr", scope: !753, file: !2, line: 692, type: !63, align: 8)
!759 = !DILocation(line: 692, scope: !753, inlinedAt: !749)
!760 = !DILocation(line: 693, scope: !753, inlinedAt: !749)
!761 = !DILocation(line: 693, scope: !762, inlinedAt: !749)
!762 = distinct !DILexicalBlock(scope: !753, file: !2, line: 693, column: 2)
!763 = !DILocation(line: 16, scope: !764, inlinedAt: !761)
!764 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!765 = !DIFile(filename: "ascii.c3", directory: "C:/Program Files/c3c/lib/std")
!766 = !DILocation(line: 694, scope: !753, inlinedAt: !749)
!767 = !DILocalVariable(name: "is_negative", scope: !753, file: !2, line: 695, type: !105, align: 1)
!768 = !DILocation(line: 695, scope: !753, inlinedAt: !749)
!769 = !DILocation(line: 696, scope: !770, inlinedAt: !749)
!770 = distinct !DILexicalBlock(scope: !753, file: !2, line: 696, column: 2)
!771 = !DILocation(line: 699, scope: !772, inlinedAt: !749)
!772 = distinct !DILexicalBlock(scope: !770, file: !2, line: 699, column: 4)
!773 = !DILocation(line: 700, scope: !772, inlinedAt: !749)
!774 = !DILocation(line: 701, scope: !772, inlinedAt: !749)
!775 = !DILocation(line: 703, scope: !776, inlinedAt: !749)
!776 = distinct !DILexicalBlock(scope: !770, file: !2, line: 703, column: 4)
!777 = !DILocation(line: 705, scope: !778, inlinedAt: !749)
!778 = distinct !DILexicalBlock(scope: !770, file: !2, line: 705, column: 4)
!779 = !DILocation(line: 707, scope: !753, inlinedAt: !749)
!780 = !DILocalVariable(name: "base_used", scope: !753, file: !2, line: 708, type: !747, align: 16)
!781 = !DILocation(line: 708, scope: !753, inlinedAt: !749)
!782 = !DILocation(line: 709, scope: !753, inlinedAt: !749)
!783 = !DILocation(line: 711, scope: !784, inlinedAt: !749)
!784 = distinct !DILexicalBlock(scope: !753, file: !2, line: 710, column: 2)
!785 = !DILocation(line: 712, scope: !784, inlinedAt: !749)
!786 = !DILocation(line: 713, scope: !787, inlinedAt: !749)
!787 = distinct !DILexicalBlock(scope: !784, file: !2, line: 713, column: 3)
!788 = !DILocation(line: 717, scope: !789, inlinedAt: !749)
!789 = distinct !DILexicalBlock(scope: !787, file: !2, line: 717, column: 5)
!790 = !DILocation(line: 718, scope: !789, inlinedAt: !749)
!791 = !DILocation(line: 721, scope: !792, inlinedAt: !749)
!792 = distinct !DILexicalBlock(scope: !787, file: !2, line: 721, column: 5)
!793 = !DILocation(line: 722, scope: !792, inlinedAt: !749)
!794 = !DILocation(line: 725, scope: !795, inlinedAt: !749)
!795 = distinct !DILexicalBlock(scope: !787, file: !2, line: 725, column: 5)
!796 = !DILocation(line: 726, scope: !795, inlinedAt: !749)
!797 = !DILocation(line: 728, scope: !798, inlinedAt: !749)
!798 = distinct !DILexicalBlock(scope: !787, file: !2, line: 728, column: 5)
!799 = !DILocation(line: 730, scope: !784, inlinedAt: !749)
!800 = !DILocalVariable(name: "value", scope: !753, file: !2, line: 732, type: !747, align: 16)
!801 = !DILocation(line: 732, scope: !753, inlinedAt: !749)
!802 = !DILocation(line: 733, scope: !753, inlinedAt: !749)
!803 = !DILocation(line: 733, scope: !804, inlinedAt: !749)
!804 = distinct !DILexicalBlock(scope: !753, file: !2, line: 733, column: 2)
!805 = !DILocalVariable(name: "c", scope: !806, file: !2, line: 735, type: !64, align: 1)
!806 = distinct !DILexicalBlock(scope: !804, file: !2, line: 734, column: 2)
!807 = !DILocation(line: 735, scope: !806, inlinedAt: !749)
!808 = !DILocalVariable(name: "ch", scope: !809, file: !2, line: 736, type: !64, align: 1)
!809 = distinct !DILexicalBlock(scope: !806, file: !2, line: 736, column: 4)
!810 = !DILocation(line: 736, scope: !809, inlinedAt: !749)
!811 = !DILocation(line: 737, scope: !809, inlinedAt: !749)
!812 = !DILocation(line: 738, scope: !809, inlinedAt: !749)
!813 = !DILocation(line: 739, scope: !809, inlinedAt: !749)
!814 = !DILocation(line: 740, scope: !809, inlinedAt: !749)
!815 = !DILocation(line: 741, scope: !809, inlinedAt: !749)
!816 = !DILocation(line: 743, scope: !806, inlinedAt: !749)
!817 = !DILocation(line: 745, scope: !818, inlinedAt: !749)
!818 = distinct !DILexicalBlock(scope: !806, file: !2, line: 745, column: 4)
!819 = !DILocalVariable(name: "new_value", scope: !820, file: !2, line: 747, type: !747, align: 16)
!820 = distinct !DILexicalBlock(scope: !818, file: !2, line: 746, column: 4)
!821 = !DILocation(line: 747, scope: !820, inlinedAt: !749)
!822 = !DILocation(line: 748, scope: !820, inlinedAt: !749)
!823 = !DILocation(line: 749, scope: !820, inlinedAt: !749)
!824 = !DILocalVariable(name: "new_value", scope: !818, file: !2, line: 751, type: !747, align: 16)
!825 = !DILocation(line: 751, scope: !818, inlinedAt: !749)
!826 = !DILocation(line: 752, scope: !818, inlinedAt: !749)
!827 = !DILocation(line: 753, scope: !818, inlinedAt: !749)
!828 = !DILocation(line: 756, scope: !753, inlinedAt: !749)
!829 = distinct !DISubprogram(name: "to_long", linkageName: "std.core.String.to_long", scope: !2, file: !2, line: 760, type: !830, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!830 = !DISubroutineType(types: !831)
!831 = !{!237, !832, !59, !18}
!832 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !238, size: 64, align: 64, dwarfAddressSpace: 0)
!833 = !DILocalVariable(name: "s", arg: 1, scope: !829, file: !2, line: 760, type: !59)
!834 = !DILocation(line: 760, scope: !829)
!835 = !DILocalVariable(name: "base", arg: 2, scope: !829, file: !2, line: 760, type: !18)
!836 = !DILocation(line: 686, scope: !837, inlinedAt: !834)
!837 = distinct !DILexicalBlock(scope: !838, file: !2, line: 689, column: 1)
!838 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!839 = !DILocalVariable(name: "len", scope: !838, file: !2, line: 690, type: !66, align: 8)
!840 = !DILocation(line: 690, scope: !838, inlinedAt: !834)
!841 = !DILocalVariable(name: "index", scope: !838, file: !2, line: 691, type: !66, align: 8)
!842 = !DILocation(line: 691, scope: !838, inlinedAt: !834)
!843 = !DILocalVariable(name: "ptr", scope: !838, file: !2, line: 692, type: !63, align: 8)
!844 = !DILocation(line: 692, scope: !838, inlinedAt: !834)
!845 = !DILocation(line: 693, scope: !838, inlinedAt: !834)
!846 = !DILocation(line: 693, scope: !847, inlinedAt: !834)
!847 = distinct !DILexicalBlock(scope: !838, file: !2, line: 693, column: 2)
!848 = !DILocation(line: 16, scope: !849, inlinedAt: !846)
!849 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!850 = !DILocation(line: 694, scope: !838, inlinedAt: !834)
!851 = !DILocalVariable(name: "is_negative", scope: !838, file: !2, line: 695, type: !105, align: 1)
!852 = !DILocation(line: 695, scope: !838, inlinedAt: !834)
!853 = !DILocation(line: 696, scope: !854, inlinedAt: !834)
!854 = distinct !DILexicalBlock(scope: !838, file: !2, line: 696, column: 2)
!855 = !DILocation(line: 699, scope: !856, inlinedAt: !834)
!856 = distinct !DILexicalBlock(scope: !854, file: !2, line: 699, column: 4)
!857 = !DILocation(line: 700, scope: !856, inlinedAt: !834)
!858 = !DILocation(line: 701, scope: !856, inlinedAt: !834)
!859 = !DILocation(line: 703, scope: !860, inlinedAt: !834)
!860 = distinct !DILexicalBlock(scope: !854, file: !2, line: 703, column: 4)
!861 = !DILocation(line: 705, scope: !862, inlinedAt: !834)
!862 = distinct !DILexicalBlock(scope: !854, file: !2, line: 705, column: 4)
!863 = !DILocation(line: 707, scope: !838, inlinedAt: !834)
!864 = !DILocalVariable(name: "base_used", scope: !838, file: !2, line: 708, type: !238, align: 8)
!865 = !DILocation(line: 708, scope: !838, inlinedAt: !834)
!866 = !DILocation(line: 709, scope: !838, inlinedAt: !834)
!867 = !DILocation(line: 711, scope: !868, inlinedAt: !834)
!868 = distinct !DILexicalBlock(scope: !838, file: !2, line: 710, column: 2)
!869 = !DILocation(line: 712, scope: !868, inlinedAt: !834)
!870 = !DILocation(line: 713, scope: !871, inlinedAt: !834)
!871 = distinct !DILexicalBlock(scope: !868, file: !2, line: 713, column: 3)
!872 = !DILocation(line: 717, scope: !873, inlinedAt: !834)
!873 = distinct !DILexicalBlock(scope: !871, file: !2, line: 717, column: 5)
!874 = !DILocation(line: 718, scope: !873, inlinedAt: !834)
!875 = !DILocation(line: 721, scope: !876, inlinedAt: !834)
!876 = distinct !DILexicalBlock(scope: !871, file: !2, line: 721, column: 5)
!877 = !DILocation(line: 722, scope: !876, inlinedAt: !834)
!878 = !DILocation(line: 725, scope: !879, inlinedAt: !834)
!879 = distinct !DILexicalBlock(scope: !871, file: !2, line: 725, column: 5)
!880 = !DILocation(line: 726, scope: !879, inlinedAt: !834)
!881 = !DILocation(line: 728, scope: !882, inlinedAt: !834)
!882 = distinct !DILexicalBlock(scope: !871, file: !2, line: 728, column: 5)
!883 = !DILocation(line: 730, scope: !868, inlinedAt: !834)
!884 = !DILocalVariable(name: "value", scope: !838, file: !2, line: 732, type: !238, align: 8)
!885 = !DILocation(line: 732, scope: !838, inlinedAt: !834)
!886 = !DILocation(line: 733, scope: !838, inlinedAt: !834)
!887 = !DILocation(line: 733, scope: !888, inlinedAt: !834)
!888 = distinct !DILexicalBlock(scope: !838, file: !2, line: 733, column: 2)
!889 = !DILocalVariable(name: "c", scope: !890, file: !2, line: 735, type: !64, align: 1)
!890 = distinct !DILexicalBlock(scope: !888, file: !2, line: 734, column: 2)
!891 = !DILocation(line: 735, scope: !890, inlinedAt: !834)
!892 = !DILocalVariable(name: "ch", scope: !893, file: !2, line: 736, type: !64, align: 1)
!893 = distinct !DILexicalBlock(scope: !890, file: !2, line: 736, column: 4)
!894 = !DILocation(line: 736, scope: !893, inlinedAt: !834)
!895 = !DILocation(line: 737, scope: !893, inlinedAt: !834)
!896 = !DILocation(line: 738, scope: !893, inlinedAt: !834)
!897 = !DILocation(line: 739, scope: !893, inlinedAt: !834)
!898 = !DILocation(line: 740, scope: !893, inlinedAt: !834)
!899 = !DILocation(line: 741, scope: !893, inlinedAt: !834)
!900 = !DILocation(line: 743, scope: !890, inlinedAt: !834)
!901 = !DILocation(line: 745, scope: !902, inlinedAt: !834)
!902 = distinct !DILexicalBlock(scope: !890, file: !2, line: 745, column: 4)
!903 = !DILocalVariable(name: "new_value", scope: !904, file: !2, line: 747, type: !238, align: 8)
!904 = distinct !DILexicalBlock(scope: !902, file: !2, line: 746, column: 4)
!905 = !DILocation(line: 747, scope: !904, inlinedAt: !834)
!906 = !DILocation(line: 748, scope: !904, inlinedAt: !834)
!907 = !DILocation(line: 749, scope: !904, inlinedAt: !834)
!908 = !DILocalVariable(name: "new_value", scope: !902, file: !2, line: 751, type: !238, align: 8)
!909 = !DILocation(line: 751, scope: !902, inlinedAt: !834)
!910 = !DILocation(line: 752, scope: !902, inlinedAt: !834)
!911 = !DILocation(line: 753, scope: !902, inlinedAt: !834)
!912 = !DILocation(line: 756, scope: !838, inlinedAt: !834)
!913 = distinct !DISubprogram(name: "to_int", linkageName: "std.core.String.to_int", scope: !2, file: !2, line: 761, type: !914, scopeLine: 761, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!914 = !DISubroutineType(types: !915)
!915 = !{!237, !916, !59, !18}
!916 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !18, size: 64, align: 64, dwarfAddressSpace: 0)
!917 = !DILocalVariable(name: "s", arg: 1, scope: !913, file: !2, line: 761, type: !59)
!918 = !DILocation(line: 761, scope: !913)
!919 = !DILocalVariable(name: "base", arg: 2, scope: !913, file: !2, line: 761, type: !18)
!920 = !DILocation(line: 686, scope: !921, inlinedAt: !918)
!921 = distinct !DILexicalBlock(scope: !922, file: !2, line: 689, column: 1)
!922 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!923 = !DILocalVariable(name: "len", scope: !922, file: !2, line: 690, type: !66, align: 8)
!924 = !DILocation(line: 690, scope: !922, inlinedAt: !918)
!925 = !DILocalVariable(name: "index", scope: !922, file: !2, line: 691, type: !66, align: 8)
!926 = !DILocation(line: 691, scope: !922, inlinedAt: !918)
!927 = !DILocalVariable(name: "ptr", scope: !922, file: !2, line: 692, type: !63, align: 8)
!928 = !DILocation(line: 692, scope: !922, inlinedAt: !918)
!929 = !DILocation(line: 693, scope: !922, inlinedAt: !918)
!930 = !DILocation(line: 693, scope: !931, inlinedAt: !918)
!931 = distinct !DILexicalBlock(scope: !922, file: !2, line: 693, column: 2)
!932 = !DILocation(line: 16, scope: !933, inlinedAt: !930)
!933 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!934 = !DILocation(line: 694, scope: !922, inlinedAt: !918)
!935 = !DILocalVariable(name: "is_negative", scope: !922, file: !2, line: 695, type: !105, align: 1)
!936 = !DILocation(line: 695, scope: !922, inlinedAt: !918)
!937 = !DILocation(line: 696, scope: !938, inlinedAt: !918)
!938 = distinct !DILexicalBlock(scope: !922, file: !2, line: 696, column: 2)
!939 = !DILocation(line: 699, scope: !940, inlinedAt: !918)
!940 = distinct !DILexicalBlock(scope: !938, file: !2, line: 699, column: 4)
!941 = !DILocation(line: 700, scope: !940, inlinedAt: !918)
!942 = !DILocation(line: 701, scope: !940, inlinedAt: !918)
!943 = !DILocation(line: 703, scope: !944, inlinedAt: !918)
!944 = distinct !DILexicalBlock(scope: !938, file: !2, line: 703, column: 4)
!945 = !DILocation(line: 705, scope: !946, inlinedAt: !918)
!946 = distinct !DILexicalBlock(scope: !938, file: !2, line: 705, column: 4)
!947 = !DILocation(line: 707, scope: !922, inlinedAt: !918)
!948 = !DILocalVariable(name: "base_used", scope: !922, file: !2, line: 708, type: !18, align: 4)
!949 = !DILocation(line: 708, scope: !922, inlinedAt: !918)
!950 = !DILocation(line: 709, scope: !922, inlinedAt: !918)
!951 = !DILocation(line: 711, scope: !952, inlinedAt: !918)
!952 = distinct !DILexicalBlock(scope: !922, file: !2, line: 710, column: 2)
!953 = !DILocation(line: 712, scope: !952, inlinedAt: !918)
!954 = !DILocation(line: 713, scope: !955, inlinedAt: !918)
!955 = distinct !DILexicalBlock(scope: !952, file: !2, line: 713, column: 3)
!956 = !DILocation(line: 717, scope: !957, inlinedAt: !918)
!957 = distinct !DILexicalBlock(scope: !955, file: !2, line: 717, column: 5)
!958 = !DILocation(line: 718, scope: !957, inlinedAt: !918)
!959 = !DILocation(line: 721, scope: !960, inlinedAt: !918)
!960 = distinct !DILexicalBlock(scope: !955, file: !2, line: 721, column: 5)
!961 = !DILocation(line: 722, scope: !960, inlinedAt: !918)
!962 = !DILocation(line: 725, scope: !963, inlinedAt: !918)
!963 = distinct !DILexicalBlock(scope: !955, file: !2, line: 725, column: 5)
!964 = !DILocation(line: 726, scope: !963, inlinedAt: !918)
!965 = !DILocation(line: 728, scope: !966, inlinedAt: !918)
!966 = distinct !DILexicalBlock(scope: !955, file: !2, line: 728, column: 5)
!967 = !DILocation(line: 730, scope: !952, inlinedAt: !918)
!968 = !DILocalVariable(name: "value", scope: !922, file: !2, line: 732, type: !18, align: 4)
!969 = !DILocation(line: 732, scope: !922, inlinedAt: !918)
!970 = !DILocation(line: 733, scope: !922, inlinedAt: !918)
!971 = !DILocation(line: 733, scope: !972, inlinedAt: !918)
!972 = distinct !DILexicalBlock(scope: !922, file: !2, line: 733, column: 2)
!973 = !DILocalVariable(name: "c", scope: !974, file: !2, line: 735, type: !64, align: 1)
!974 = distinct !DILexicalBlock(scope: !972, file: !2, line: 734, column: 2)
!975 = !DILocation(line: 735, scope: !974, inlinedAt: !918)
!976 = !DILocalVariable(name: "ch", scope: !977, file: !2, line: 736, type: !64, align: 1)
!977 = distinct !DILexicalBlock(scope: !974, file: !2, line: 736, column: 4)
!978 = !DILocation(line: 736, scope: !977, inlinedAt: !918)
!979 = !DILocation(line: 737, scope: !977, inlinedAt: !918)
!980 = !DILocation(line: 738, scope: !977, inlinedAt: !918)
!981 = !DILocation(line: 739, scope: !977, inlinedAt: !918)
!982 = !DILocation(line: 740, scope: !977, inlinedAt: !918)
!983 = !DILocation(line: 741, scope: !977, inlinedAt: !918)
!984 = !DILocation(line: 743, scope: !974, inlinedAt: !918)
!985 = !DILocation(line: 745, scope: !986, inlinedAt: !918)
!986 = distinct !DILexicalBlock(scope: !974, file: !2, line: 745, column: 4)
!987 = !DILocalVariable(name: "new_value", scope: !988, file: !2, line: 747, type: !18, align: 4)
!988 = distinct !DILexicalBlock(scope: !986, file: !2, line: 746, column: 4)
!989 = !DILocation(line: 747, scope: !988, inlinedAt: !918)
!990 = !DILocation(line: 748, scope: !988, inlinedAt: !918)
!991 = !DILocation(line: 749, scope: !988, inlinedAt: !918)
!992 = !DILocalVariable(name: "new_value", scope: !986, file: !2, line: 751, type: !18, align: 4)
!993 = !DILocation(line: 751, scope: !986, inlinedAt: !918)
!994 = !DILocation(line: 752, scope: !986, inlinedAt: !918)
!995 = !DILocation(line: 753, scope: !986, inlinedAt: !918)
!996 = !DILocation(line: 756, scope: !922, inlinedAt: !918)
!997 = distinct !DISubprogram(name: "to_short", linkageName: "std.core.String.to_short", scope: !2, file: !2, line: 762, type: !998, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!998 = !DISubroutineType(types: !999)
!999 = !{!237, !1000, !59, !18}
!1000 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !1001, size: 64, align: 64, dwarfAddressSpace: 0)
!1001 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1002 = !DILocalVariable(name: "s", arg: 1, scope: !997, file: !2, line: 762, type: !59)
!1003 = !DILocation(line: 762, scope: !997)
!1004 = !DILocalVariable(name: "base", arg: 2, scope: !997, file: !2, line: 762, type: !18)
!1005 = !DILocation(line: 686, scope: !1006, inlinedAt: !1003)
!1006 = distinct !DILexicalBlock(scope: !1007, file: !2, line: 689, column: 1)
!1007 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1008 = !DILocalVariable(name: "len", scope: !1007, file: !2, line: 690, type: !66, align: 8)
!1009 = !DILocation(line: 690, scope: !1007, inlinedAt: !1003)
!1010 = !DILocalVariable(name: "index", scope: !1007, file: !2, line: 691, type: !66, align: 8)
!1011 = !DILocation(line: 691, scope: !1007, inlinedAt: !1003)
!1012 = !DILocalVariable(name: "ptr", scope: !1007, file: !2, line: 692, type: !63, align: 8)
!1013 = !DILocation(line: 692, scope: !1007, inlinedAt: !1003)
!1014 = !DILocation(line: 693, scope: !1007, inlinedAt: !1003)
!1015 = !DILocation(line: 693, scope: !1016, inlinedAt: !1003)
!1016 = distinct !DILexicalBlock(scope: !1007, file: !2, line: 693, column: 2)
!1017 = !DILocation(line: 16, scope: !1018, inlinedAt: !1015)
!1018 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1019 = !DILocation(line: 694, scope: !1007, inlinedAt: !1003)
!1020 = !DILocalVariable(name: "is_negative", scope: !1007, file: !2, line: 695, type: !105, align: 1)
!1021 = !DILocation(line: 695, scope: !1007, inlinedAt: !1003)
!1022 = !DILocation(line: 696, scope: !1023, inlinedAt: !1003)
!1023 = distinct !DILexicalBlock(scope: !1007, file: !2, line: 696, column: 2)
!1024 = !DILocation(line: 699, scope: !1025, inlinedAt: !1003)
!1025 = distinct !DILexicalBlock(scope: !1023, file: !2, line: 699, column: 4)
!1026 = !DILocation(line: 700, scope: !1025, inlinedAt: !1003)
!1027 = !DILocation(line: 701, scope: !1025, inlinedAt: !1003)
!1028 = !DILocation(line: 703, scope: !1029, inlinedAt: !1003)
!1029 = distinct !DILexicalBlock(scope: !1023, file: !2, line: 703, column: 4)
!1030 = !DILocation(line: 705, scope: !1031, inlinedAt: !1003)
!1031 = distinct !DILexicalBlock(scope: !1023, file: !2, line: 705, column: 4)
!1032 = !DILocation(line: 707, scope: !1007, inlinedAt: !1003)
!1033 = !DILocalVariable(name: "base_used", scope: !1007, file: !2, line: 708, type: !1001, align: 2)
!1034 = !DILocation(line: 708, scope: !1007, inlinedAt: !1003)
!1035 = !DILocation(line: 709, scope: !1007, inlinedAt: !1003)
!1036 = !DILocation(line: 711, scope: !1037, inlinedAt: !1003)
!1037 = distinct !DILexicalBlock(scope: !1007, file: !2, line: 710, column: 2)
!1038 = !DILocation(line: 712, scope: !1037, inlinedAt: !1003)
!1039 = !DILocation(line: 713, scope: !1040, inlinedAt: !1003)
!1040 = distinct !DILexicalBlock(scope: !1037, file: !2, line: 713, column: 3)
!1041 = !DILocation(line: 717, scope: !1042, inlinedAt: !1003)
!1042 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 717, column: 5)
!1043 = !DILocation(line: 718, scope: !1042, inlinedAt: !1003)
!1044 = !DILocation(line: 721, scope: !1045, inlinedAt: !1003)
!1045 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 721, column: 5)
!1046 = !DILocation(line: 722, scope: !1045, inlinedAt: !1003)
!1047 = !DILocation(line: 725, scope: !1048, inlinedAt: !1003)
!1048 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 725, column: 5)
!1049 = !DILocation(line: 726, scope: !1048, inlinedAt: !1003)
!1050 = !DILocation(line: 728, scope: !1051, inlinedAt: !1003)
!1051 = distinct !DILexicalBlock(scope: !1040, file: !2, line: 728, column: 5)
!1052 = !DILocation(line: 730, scope: !1037, inlinedAt: !1003)
!1053 = !DILocalVariable(name: "value", scope: !1007, file: !2, line: 732, type: !1001, align: 2)
!1054 = !DILocation(line: 732, scope: !1007, inlinedAt: !1003)
!1055 = !DILocation(line: 733, scope: !1007, inlinedAt: !1003)
!1056 = !DILocation(line: 733, scope: !1057, inlinedAt: !1003)
!1057 = distinct !DILexicalBlock(scope: !1007, file: !2, line: 733, column: 2)
!1058 = !DILocalVariable(name: "c", scope: !1059, file: !2, line: 735, type: !64, align: 1)
!1059 = distinct !DILexicalBlock(scope: !1057, file: !2, line: 734, column: 2)
!1060 = !DILocation(line: 735, scope: !1059, inlinedAt: !1003)
!1061 = !DILocalVariable(name: "ch", scope: !1062, file: !2, line: 736, type: !64, align: 1)
!1062 = distinct !DILexicalBlock(scope: !1059, file: !2, line: 736, column: 4)
!1063 = !DILocation(line: 736, scope: !1062, inlinedAt: !1003)
!1064 = !DILocation(line: 737, scope: !1062, inlinedAt: !1003)
!1065 = !DILocation(line: 738, scope: !1062, inlinedAt: !1003)
!1066 = !DILocation(line: 739, scope: !1062, inlinedAt: !1003)
!1067 = !DILocation(line: 740, scope: !1062, inlinedAt: !1003)
!1068 = !DILocation(line: 741, scope: !1062, inlinedAt: !1003)
!1069 = !DILocation(line: 743, scope: !1059, inlinedAt: !1003)
!1070 = !DILocation(line: 745, scope: !1071, inlinedAt: !1003)
!1071 = distinct !DILexicalBlock(scope: !1059, file: !2, line: 745, column: 4)
!1072 = !DILocalVariable(name: "new_value", scope: !1073, file: !2, line: 747, type: !1001, align: 2)
!1073 = distinct !DILexicalBlock(scope: !1071, file: !2, line: 746, column: 4)
!1074 = !DILocation(line: 747, scope: !1073, inlinedAt: !1003)
!1075 = !DILocation(line: 748, scope: !1073, inlinedAt: !1003)
!1076 = !DILocation(line: 749, scope: !1073, inlinedAt: !1003)
!1077 = !DILocalVariable(name: "new_value", scope: !1071, file: !2, line: 751, type: !1001, align: 2)
!1078 = !DILocation(line: 751, scope: !1071, inlinedAt: !1003)
!1079 = !DILocation(line: 752, scope: !1071, inlinedAt: !1003)
!1080 = !DILocation(line: 753, scope: !1071, inlinedAt: !1003)
!1081 = !DILocation(line: 756, scope: !1007, inlinedAt: !1003)
!1082 = distinct !DISubprogram(name: "to_ichar", linkageName: "std.core.String.to_ichar", scope: !2, file: !2, line: 763, type: !1083, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!237, !1085, !59, !18}
!1085 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !1086, size: 64, align: 64, dwarfAddressSpace: 0)
!1086 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1087 = !DILocalVariable(name: "s", arg: 1, scope: !1082, file: !2, line: 763, type: !59)
!1088 = !DILocation(line: 763, scope: !1082)
!1089 = !DILocalVariable(name: "base", arg: 2, scope: !1082, file: !2, line: 763, type: !18)
!1090 = !DILocation(line: 686, scope: !1091, inlinedAt: !1088)
!1091 = distinct !DILexicalBlock(scope: !1092, file: !2, line: 689, column: 1)
!1092 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1093 = !DILocalVariable(name: "len", scope: !1092, file: !2, line: 690, type: !66, align: 8)
!1094 = !DILocation(line: 690, scope: !1092, inlinedAt: !1088)
!1095 = !DILocalVariable(name: "index", scope: !1092, file: !2, line: 691, type: !66, align: 8)
!1096 = !DILocation(line: 691, scope: !1092, inlinedAt: !1088)
!1097 = !DILocalVariable(name: "ptr", scope: !1092, file: !2, line: 692, type: !63, align: 8)
!1098 = !DILocation(line: 692, scope: !1092, inlinedAt: !1088)
!1099 = !DILocation(line: 693, scope: !1092, inlinedAt: !1088)
!1100 = !DILocation(line: 693, scope: !1101, inlinedAt: !1088)
!1101 = distinct !DILexicalBlock(scope: !1092, file: !2, line: 693, column: 2)
!1102 = !DILocation(line: 16, scope: !1103, inlinedAt: !1100)
!1103 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1104 = !DILocation(line: 694, scope: !1092, inlinedAt: !1088)
!1105 = !DILocalVariable(name: "is_negative", scope: !1092, file: !2, line: 695, type: !105, align: 1)
!1106 = !DILocation(line: 695, scope: !1092, inlinedAt: !1088)
!1107 = !DILocation(line: 696, scope: !1108, inlinedAt: !1088)
!1108 = distinct !DILexicalBlock(scope: !1092, file: !2, line: 696, column: 2)
!1109 = !DILocation(line: 699, scope: !1110, inlinedAt: !1088)
!1110 = distinct !DILexicalBlock(scope: !1108, file: !2, line: 699, column: 4)
!1111 = !DILocation(line: 700, scope: !1110, inlinedAt: !1088)
!1112 = !DILocation(line: 701, scope: !1110, inlinedAt: !1088)
!1113 = !DILocation(line: 703, scope: !1114, inlinedAt: !1088)
!1114 = distinct !DILexicalBlock(scope: !1108, file: !2, line: 703, column: 4)
!1115 = !DILocation(line: 705, scope: !1116, inlinedAt: !1088)
!1116 = distinct !DILexicalBlock(scope: !1108, file: !2, line: 705, column: 4)
!1117 = !DILocation(line: 707, scope: !1092, inlinedAt: !1088)
!1118 = !DILocalVariable(name: "base_used", scope: !1092, file: !2, line: 708, type: !1086, align: 1)
!1119 = !DILocation(line: 708, scope: !1092, inlinedAt: !1088)
!1120 = !DILocation(line: 709, scope: !1092, inlinedAt: !1088)
!1121 = !DILocation(line: 711, scope: !1122, inlinedAt: !1088)
!1122 = distinct !DILexicalBlock(scope: !1092, file: !2, line: 710, column: 2)
!1123 = !DILocation(line: 712, scope: !1122, inlinedAt: !1088)
!1124 = !DILocation(line: 713, scope: !1125, inlinedAt: !1088)
!1125 = distinct !DILexicalBlock(scope: !1122, file: !2, line: 713, column: 3)
!1126 = !DILocation(line: 717, scope: !1127, inlinedAt: !1088)
!1127 = distinct !DILexicalBlock(scope: !1125, file: !2, line: 717, column: 5)
!1128 = !DILocation(line: 718, scope: !1127, inlinedAt: !1088)
!1129 = !DILocation(line: 721, scope: !1130, inlinedAt: !1088)
!1130 = distinct !DILexicalBlock(scope: !1125, file: !2, line: 721, column: 5)
!1131 = !DILocation(line: 722, scope: !1130, inlinedAt: !1088)
!1132 = !DILocation(line: 725, scope: !1133, inlinedAt: !1088)
!1133 = distinct !DILexicalBlock(scope: !1125, file: !2, line: 725, column: 5)
!1134 = !DILocation(line: 726, scope: !1133, inlinedAt: !1088)
!1135 = !DILocation(line: 728, scope: !1136, inlinedAt: !1088)
!1136 = distinct !DILexicalBlock(scope: !1125, file: !2, line: 728, column: 5)
!1137 = !DILocation(line: 730, scope: !1122, inlinedAt: !1088)
!1138 = !DILocalVariable(name: "value", scope: !1092, file: !2, line: 732, type: !1086, align: 1)
!1139 = !DILocation(line: 732, scope: !1092, inlinedAt: !1088)
!1140 = !DILocation(line: 733, scope: !1092, inlinedAt: !1088)
!1141 = !DILocation(line: 733, scope: !1142, inlinedAt: !1088)
!1142 = distinct !DILexicalBlock(scope: !1092, file: !2, line: 733, column: 2)
!1143 = !DILocalVariable(name: "c", scope: !1144, file: !2, line: 735, type: !64, align: 1)
!1144 = distinct !DILexicalBlock(scope: !1142, file: !2, line: 734, column: 2)
!1145 = !DILocation(line: 735, scope: !1144, inlinedAt: !1088)
!1146 = !DILocalVariable(name: "ch", scope: !1147, file: !2, line: 736, type: !64, align: 1)
!1147 = distinct !DILexicalBlock(scope: !1144, file: !2, line: 736, column: 4)
!1148 = !DILocation(line: 736, scope: !1147, inlinedAt: !1088)
!1149 = !DILocation(line: 737, scope: !1147, inlinedAt: !1088)
!1150 = !DILocation(line: 738, scope: !1147, inlinedAt: !1088)
!1151 = !DILocation(line: 739, scope: !1147, inlinedAt: !1088)
!1152 = !DILocation(line: 740, scope: !1147, inlinedAt: !1088)
!1153 = !DILocation(line: 741, scope: !1147, inlinedAt: !1088)
!1154 = !DILocation(line: 743, scope: !1144, inlinedAt: !1088)
!1155 = !DILocation(line: 745, scope: !1156, inlinedAt: !1088)
!1156 = distinct !DILexicalBlock(scope: !1144, file: !2, line: 745, column: 4)
!1157 = !DILocalVariable(name: "new_value", scope: !1158, file: !2, line: 747, type: !1086, align: 1)
!1158 = distinct !DILexicalBlock(scope: !1156, file: !2, line: 746, column: 4)
!1159 = !DILocation(line: 747, scope: !1158, inlinedAt: !1088)
!1160 = !DILocation(line: 748, scope: !1158, inlinedAt: !1088)
!1161 = !DILocation(line: 749, scope: !1158, inlinedAt: !1088)
!1162 = !DILocalVariable(name: "new_value", scope: !1156, file: !2, line: 751, type: !1086, align: 1)
!1163 = !DILocation(line: 751, scope: !1156, inlinedAt: !1088)
!1164 = !DILocation(line: 752, scope: !1156, inlinedAt: !1088)
!1165 = !DILocation(line: 753, scope: !1156, inlinedAt: !1088)
!1166 = !DILocation(line: 756, scope: !1092, inlinedAt: !1088)
!1167 = distinct !DISubprogram(name: "to_uint128", linkageName: "std.core.String.to_uint128", scope: !2, file: !2, line: 765, type: !1168, scopeLine: 765, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1168 = !DISubroutineType(types: !1169)
!1169 = !{!237, !1170, !59, !18}
!1170 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1171, size: 64, align: 64, dwarfAddressSpace: 0)
!1171 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1172 = !DILocalVariable(name: "s", arg: 1, scope: !1167, file: !2, line: 765, type: !59)
!1173 = !DILocation(line: 765, scope: !1167)
!1174 = !DILocalVariable(name: "base", arg: 2, scope: !1167, file: !2, line: 765, type: !18)
!1175 = !DILocation(line: 686, scope: !1176, inlinedAt: !1173)
!1176 = distinct !DILexicalBlock(scope: !1177, file: !2, line: 689, column: 1)
!1177 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1178 = !DILocalVariable(name: "len", scope: !1177, file: !2, line: 690, type: !66, align: 8)
!1179 = !DILocation(line: 690, scope: !1177, inlinedAt: !1173)
!1180 = !DILocalVariable(name: "index", scope: !1177, file: !2, line: 691, type: !66, align: 8)
!1181 = !DILocation(line: 691, scope: !1177, inlinedAt: !1173)
!1182 = !DILocalVariable(name: "ptr", scope: !1177, file: !2, line: 692, type: !63, align: 8)
!1183 = !DILocation(line: 692, scope: !1177, inlinedAt: !1173)
!1184 = !DILocation(line: 693, scope: !1177, inlinedAt: !1173)
!1185 = !DILocation(line: 693, scope: !1186, inlinedAt: !1173)
!1186 = distinct !DILexicalBlock(scope: !1177, file: !2, line: 693, column: 2)
!1187 = !DILocation(line: 16, scope: !1188, inlinedAt: !1185)
!1188 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1189 = !DILocation(line: 694, scope: !1177, inlinedAt: !1173)
!1190 = !DILocalVariable(name: "is_negative", scope: !1177, file: !2, line: 695, type: !105, align: 1)
!1191 = !DILocation(line: 695, scope: !1177, inlinedAt: !1173)
!1192 = !DILocation(line: 696, scope: !1193, inlinedAt: !1173)
!1193 = distinct !DILexicalBlock(scope: !1177, file: !2, line: 696, column: 2)
!1194 = !DILocation(line: 699, scope: !1195, inlinedAt: !1173)
!1195 = distinct !DILexicalBlock(scope: !1193, file: !2, line: 699, column: 4)
!1196 = !DILocation(line: 703, scope: !1197, inlinedAt: !1173)
!1197 = distinct !DILexicalBlock(scope: !1193, file: !2, line: 703, column: 4)
!1198 = !DILocation(line: 705, scope: !1199, inlinedAt: !1173)
!1199 = distinct !DILexicalBlock(scope: !1193, file: !2, line: 705, column: 4)
!1200 = !DILocation(line: 707, scope: !1177, inlinedAt: !1173)
!1201 = !DILocalVariable(name: "base_used", scope: !1177, file: !2, line: 708, type: !1171, align: 16)
!1202 = !DILocation(line: 708, scope: !1177, inlinedAt: !1173)
!1203 = !DILocation(line: 709, scope: !1177, inlinedAt: !1173)
!1204 = !DILocation(line: 711, scope: !1205, inlinedAt: !1173)
!1205 = distinct !DILexicalBlock(scope: !1177, file: !2, line: 710, column: 2)
!1206 = !DILocation(line: 712, scope: !1205, inlinedAt: !1173)
!1207 = !DILocation(line: 713, scope: !1208, inlinedAt: !1173)
!1208 = distinct !DILexicalBlock(scope: !1205, file: !2, line: 713, column: 3)
!1209 = !DILocation(line: 717, scope: !1210, inlinedAt: !1173)
!1210 = distinct !DILexicalBlock(scope: !1208, file: !2, line: 717, column: 5)
!1211 = !DILocation(line: 718, scope: !1210, inlinedAt: !1173)
!1212 = !DILocation(line: 721, scope: !1213, inlinedAt: !1173)
!1213 = distinct !DILexicalBlock(scope: !1208, file: !2, line: 721, column: 5)
!1214 = !DILocation(line: 722, scope: !1213, inlinedAt: !1173)
!1215 = !DILocation(line: 725, scope: !1216, inlinedAt: !1173)
!1216 = distinct !DILexicalBlock(scope: !1208, file: !2, line: 725, column: 5)
!1217 = !DILocation(line: 726, scope: !1216, inlinedAt: !1173)
!1218 = !DILocation(line: 728, scope: !1219, inlinedAt: !1173)
!1219 = distinct !DILexicalBlock(scope: !1208, file: !2, line: 728, column: 5)
!1220 = !DILocation(line: 730, scope: !1205, inlinedAt: !1173)
!1221 = !DILocalVariable(name: "value", scope: !1177, file: !2, line: 732, type: !1171, align: 16)
!1222 = !DILocation(line: 732, scope: !1177, inlinedAt: !1173)
!1223 = !DILocation(line: 733, scope: !1177, inlinedAt: !1173)
!1224 = !DILocation(line: 733, scope: !1225, inlinedAt: !1173)
!1225 = distinct !DILexicalBlock(scope: !1177, file: !2, line: 733, column: 2)
!1226 = !DILocalVariable(name: "c", scope: !1227, file: !2, line: 735, type: !64, align: 1)
!1227 = distinct !DILexicalBlock(scope: !1225, file: !2, line: 734, column: 2)
!1228 = !DILocation(line: 735, scope: !1227, inlinedAt: !1173)
!1229 = !DILocalVariable(name: "ch", scope: !1230, file: !2, line: 736, type: !64, align: 1)
!1230 = distinct !DILexicalBlock(scope: !1227, file: !2, line: 736, column: 4)
!1231 = !DILocation(line: 736, scope: !1230, inlinedAt: !1173)
!1232 = !DILocation(line: 737, scope: !1230, inlinedAt: !1173)
!1233 = !DILocation(line: 738, scope: !1230, inlinedAt: !1173)
!1234 = !DILocation(line: 739, scope: !1230, inlinedAt: !1173)
!1235 = !DILocation(line: 740, scope: !1230, inlinedAt: !1173)
!1236 = !DILocation(line: 741, scope: !1230, inlinedAt: !1173)
!1237 = !DILocation(line: 743, scope: !1227, inlinedAt: !1173)
!1238 = !DILocation(line: 745, scope: !1239, inlinedAt: !1173)
!1239 = distinct !DILexicalBlock(scope: !1227, file: !2, line: 745, column: 4)
!1240 = !DILocalVariable(name: "new_value", scope: !1241, file: !2, line: 747, type: !1171, align: 16)
!1241 = distinct !DILexicalBlock(scope: !1239, file: !2, line: 746, column: 4)
!1242 = !DILocation(line: 747, scope: !1241, inlinedAt: !1173)
!1243 = !DILocation(line: 748, scope: !1241, inlinedAt: !1173)
!1244 = !DILocation(line: 749, scope: !1241, inlinedAt: !1173)
!1245 = !DILocalVariable(name: "new_value", scope: !1239, file: !2, line: 751, type: !1171, align: 16)
!1246 = !DILocation(line: 751, scope: !1239, inlinedAt: !1173)
!1247 = !DILocation(line: 752, scope: !1239, inlinedAt: !1173)
!1248 = !DILocation(line: 753, scope: !1239, inlinedAt: !1173)
!1249 = !DILocation(line: 756, scope: !1177, inlinedAt: !1173)
!1250 = distinct !DISubprogram(name: "to_ulong", linkageName: "std.core.String.to_ulong", scope: !2, file: !2, line: 766, type: !1251, scopeLine: 766, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1251 = !DISubroutineType(types: !1252)
!1252 = !{!237, !1253, !59, !18}
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !67, size: 64, align: 64, dwarfAddressSpace: 0)
!1254 = !DILocalVariable(name: "s", arg: 1, scope: !1250, file: !2, line: 766, type: !59)
!1255 = !DILocation(line: 766, scope: !1250)
!1256 = !DILocalVariable(name: "base", arg: 2, scope: !1250, file: !2, line: 766, type: !18)
!1257 = !DILocation(line: 686, scope: !1258, inlinedAt: !1255)
!1258 = distinct !DILexicalBlock(scope: !1259, file: !2, line: 689, column: 1)
!1259 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1260 = !DILocalVariable(name: "len", scope: !1259, file: !2, line: 690, type: !66, align: 8)
!1261 = !DILocation(line: 690, scope: !1259, inlinedAt: !1255)
!1262 = !DILocalVariable(name: "index", scope: !1259, file: !2, line: 691, type: !66, align: 8)
!1263 = !DILocation(line: 691, scope: !1259, inlinedAt: !1255)
!1264 = !DILocalVariable(name: "ptr", scope: !1259, file: !2, line: 692, type: !63, align: 8)
!1265 = !DILocation(line: 692, scope: !1259, inlinedAt: !1255)
!1266 = !DILocation(line: 693, scope: !1259, inlinedAt: !1255)
!1267 = !DILocation(line: 693, scope: !1268, inlinedAt: !1255)
!1268 = distinct !DILexicalBlock(scope: !1259, file: !2, line: 693, column: 2)
!1269 = !DILocation(line: 16, scope: !1270, inlinedAt: !1267)
!1270 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1271 = !DILocation(line: 694, scope: !1259, inlinedAt: !1255)
!1272 = !DILocalVariable(name: "is_negative", scope: !1259, file: !2, line: 695, type: !105, align: 1)
!1273 = !DILocation(line: 695, scope: !1259, inlinedAt: !1255)
!1274 = !DILocation(line: 696, scope: !1275, inlinedAt: !1255)
!1275 = distinct !DILexicalBlock(scope: !1259, file: !2, line: 696, column: 2)
!1276 = !DILocation(line: 699, scope: !1277, inlinedAt: !1255)
!1277 = distinct !DILexicalBlock(scope: !1275, file: !2, line: 699, column: 4)
!1278 = !DILocation(line: 703, scope: !1279, inlinedAt: !1255)
!1279 = distinct !DILexicalBlock(scope: !1275, file: !2, line: 703, column: 4)
!1280 = !DILocation(line: 705, scope: !1281, inlinedAt: !1255)
!1281 = distinct !DILexicalBlock(scope: !1275, file: !2, line: 705, column: 4)
!1282 = !DILocation(line: 707, scope: !1259, inlinedAt: !1255)
!1283 = !DILocalVariable(name: "base_used", scope: !1259, file: !2, line: 708, type: !67, align: 8)
!1284 = !DILocation(line: 708, scope: !1259, inlinedAt: !1255)
!1285 = !DILocation(line: 709, scope: !1259, inlinedAt: !1255)
!1286 = !DILocation(line: 711, scope: !1287, inlinedAt: !1255)
!1287 = distinct !DILexicalBlock(scope: !1259, file: !2, line: 710, column: 2)
!1288 = !DILocation(line: 712, scope: !1287, inlinedAt: !1255)
!1289 = !DILocation(line: 713, scope: !1290, inlinedAt: !1255)
!1290 = distinct !DILexicalBlock(scope: !1287, file: !2, line: 713, column: 3)
!1291 = !DILocation(line: 717, scope: !1292, inlinedAt: !1255)
!1292 = distinct !DILexicalBlock(scope: !1290, file: !2, line: 717, column: 5)
!1293 = !DILocation(line: 718, scope: !1292, inlinedAt: !1255)
!1294 = !DILocation(line: 721, scope: !1295, inlinedAt: !1255)
!1295 = distinct !DILexicalBlock(scope: !1290, file: !2, line: 721, column: 5)
!1296 = !DILocation(line: 722, scope: !1295, inlinedAt: !1255)
!1297 = !DILocation(line: 725, scope: !1298, inlinedAt: !1255)
!1298 = distinct !DILexicalBlock(scope: !1290, file: !2, line: 725, column: 5)
!1299 = !DILocation(line: 726, scope: !1298, inlinedAt: !1255)
!1300 = !DILocation(line: 728, scope: !1301, inlinedAt: !1255)
!1301 = distinct !DILexicalBlock(scope: !1290, file: !2, line: 728, column: 5)
!1302 = !DILocation(line: 730, scope: !1287, inlinedAt: !1255)
!1303 = !DILocalVariable(name: "value", scope: !1259, file: !2, line: 732, type: !67, align: 8)
!1304 = !DILocation(line: 732, scope: !1259, inlinedAt: !1255)
!1305 = !DILocation(line: 733, scope: !1259, inlinedAt: !1255)
!1306 = !DILocation(line: 733, scope: !1307, inlinedAt: !1255)
!1307 = distinct !DILexicalBlock(scope: !1259, file: !2, line: 733, column: 2)
!1308 = !DILocalVariable(name: "c", scope: !1309, file: !2, line: 735, type: !64, align: 1)
!1309 = distinct !DILexicalBlock(scope: !1307, file: !2, line: 734, column: 2)
!1310 = !DILocation(line: 735, scope: !1309, inlinedAt: !1255)
!1311 = !DILocalVariable(name: "ch", scope: !1312, file: !2, line: 736, type: !64, align: 1)
!1312 = distinct !DILexicalBlock(scope: !1309, file: !2, line: 736, column: 4)
!1313 = !DILocation(line: 736, scope: !1312, inlinedAt: !1255)
!1314 = !DILocation(line: 737, scope: !1312, inlinedAt: !1255)
!1315 = !DILocation(line: 738, scope: !1312, inlinedAt: !1255)
!1316 = !DILocation(line: 739, scope: !1312, inlinedAt: !1255)
!1317 = !DILocation(line: 740, scope: !1312, inlinedAt: !1255)
!1318 = !DILocation(line: 741, scope: !1312, inlinedAt: !1255)
!1319 = !DILocation(line: 743, scope: !1309, inlinedAt: !1255)
!1320 = !DILocation(line: 745, scope: !1321, inlinedAt: !1255)
!1321 = distinct !DILexicalBlock(scope: !1309, file: !2, line: 745, column: 4)
!1322 = !DILocalVariable(name: "new_value", scope: !1323, file: !2, line: 747, type: !67, align: 8)
!1323 = distinct !DILexicalBlock(scope: !1321, file: !2, line: 746, column: 4)
!1324 = !DILocation(line: 747, scope: !1323, inlinedAt: !1255)
!1325 = !DILocation(line: 748, scope: !1323, inlinedAt: !1255)
!1326 = !DILocation(line: 749, scope: !1323, inlinedAt: !1255)
!1327 = !DILocalVariable(name: "new_value", scope: !1321, file: !2, line: 751, type: !67, align: 8)
!1328 = !DILocation(line: 751, scope: !1321, inlinedAt: !1255)
!1329 = !DILocation(line: 752, scope: !1321, inlinedAt: !1255)
!1330 = !DILocation(line: 753, scope: !1321, inlinedAt: !1255)
!1331 = !DILocation(line: 756, scope: !1259, inlinedAt: !1255)
!1332 = distinct !DISubprogram(name: "to_uint", linkageName: "std.core.String.to_uint", scope: !2, file: !2, line: 767, type: !1333, scopeLine: 767, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1333 = !DISubroutineType(types: !1334)
!1334 = !{!237, !1335, !59, !18}
!1335 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1336 = !DILocalVariable(name: "s", arg: 1, scope: !1332, file: !2, line: 767, type: !59)
!1337 = !DILocation(line: 767, scope: !1332)
!1338 = !DILocalVariable(name: "base", arg: 2, scope: !1332, file: !2, line: 767, type: !18)
!1339 = !DILocation(line: 686, scope: !1340, inlinedAt: !1337)
!1340 = distinct !DILexicalBlock(scope: !1341, file: !2, line: 689, column: 1)
!1341 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1342 = !DILocalVariable(name: "len", scope: !1341, file: !2, line: 690, type: !66, align: 8)
!1343 = !DILocation(line: 690, scope: !1341, inlinedAt: !1337)
!1344 = !DILocalVariable(name: "index", scope: !1341, file: !2, line: 691, type: !66, align: 8)
!1345 = !DILocation(line: 691, scope: !1341, inlinedAt: !1337)
!1346 = !DILocalVariable(name: "ptr", scope: !1341, file: !2, line: 692, type: !63, align: 8)
!1347 = !DILocation(line: 692, scope: !1341, inlinedAt: !1337)
!1348 = !DILocation(line: 693, scope: !1341, inlinedAt: !1337)
!1349 = !DILocation(line: 693, scope: !1350, inlinedAt: !1337)
!1350 = distinct !DILexicalBlock(scope: !1341, file: !2, line: 693, column: 2)
!1351 = !DILocation(line: 16, scope: !1352, inlinedAt: !1349)
!1352 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1353 = !DILocation(line: 694, scope: !1341, inlinedAt: !1337)
!1354 = !DILocalVariable(name: "is_negative", scope: !1341, file: !2, line: 695, type: !105, align: 1)
!1355 = !DILocation(line: 695, scope: !1341, inlinedAt: !1337)
!1356 = !DILocation(line: 696, scope: !1357, inlinedAt: !1337)
!1357 = distinct !DILexicalBlock(scope: !1341, file: !2, line: 696, column: 2)
!1358 = !DILocation(line: 699, scope: !1359, inlinedAt: !1337)
!1359 = distinct !DILexicalBlock(scope: !1357, file: !2, line: 699, column: 4)
!1360 = !DILocation(line: 703, scope: !1361, inlinedAt: !1337)
!1361 = distinct !DILexicalBlock(scope: !1357, file: !2, line: 703, column: 4)
!1362 = !DILocation(line: 705, scope: !1363, inlinedAt: !1337)
!1363 = distinct !DILexicalBlock(scope: !1357, file: !2, line: 705, column: 4)
!1364 = !DILocation(line: 707, scope: !1341, inlinedAt: !1337)
!1365 = !DILocalVariable(name: "base_used", scope: !1341, file: !2, line: 708, type: !3, align: 4)
!1366 = !DILocation(line: 708, scope: !1341, inlinedAt: !1337)
!1367 = !DILocation(line: 709, scope: !1341, inlinedAt: !1337)
!1368 = !DILocation(line: 711, scope: !1369, inlinedAt: !1337)
!1369 = distinct !DILexicalBlock(scope: !1341, file: !2, line: 710, column: 2)
!1370 = !DILocation(line: 712, scope: !1369, inlinedAt: !1337)
!1371 = !DILocation(line: 713, scope: !1372, inlinedAt: !1337)
!1372 = distinct !DILexicalBlock(scope: !1369, file: !2, line: 713, column: 3)
!1373 = !DILocation(line: 717, scope: !1374, inlinedAt: !1337)
!1374 = distinct !DILexicalBlock(scope: !1372, file: !2, line: 717, column: 5)
!1375 = !DILocation(line: 718, scope: !1374, inlinedAt: !1337)
!1376 = !DILocation(line: 721, scope: !1377, inlinedAt: !1337)
!1377 = distinct !DILexicalBlock(scope: !1372, file: !2, line: 721, column: 5)
!1378 = !DILocation(line: 722, scope: !1377, inlinedAt: !1337)
!1379 = !DILocation(line: 725, scope: !1380, inlinedAt: !1337)
!1380 = distinct !DILexicalBlock(scope: !1372, file: !2, line: 725, column: 5)
!1381 = !DILocation(line: 726, scope: !1380, inlinedAt: !1337)
!1382 = !DILocation(line: 728, scope: !1383, inlinedAt: !1337)
!1383 = distinct !DILexicalBlock(scope: !1372, file: !2, line: 728, column: 5)
!1384 = !DILocation(line: 730, scope: !1369, inlinedAt: !1337)
!1385 = !DILocalVariable(name: "value", scope: !1341, file: !2, line: 732, type: !3, align: 4)
!1386 = !DILocation(line: 732, scope: !1341, inlinedAt: !1337)
!1387 = !DILocation(line: 733, scope: !1341, inlinedAt: !1337)
!1388 = !DILocation(line: 733, scope: !1389, inlinedAt: !1337)
!1389 = distinct !DILexicalBlock(scope: !1341, file: !2, line: 733, column: 2)
!1390 = !DILocalVariable(name: "c", scope: !1391, file: !2, line: 735, type: !64, align: 1)
!1391 = distinct !DILexicalBlock(scope: !1389, file: !2, line: 734, column: 2)
!1392 = !DILocation(line: 735, scope: !1391, inlinedAt: !1337)
!1393 = !DILocalVariable(name: "ch", scope: !1394, file: !2, line: 736, type: !64, align: 1)
!1394 = distinct !DILexicalBlock(scope: !1391, file: !2, line: 736, column: 4)
!1395 = !DILocation(line: 736, scope: !1394, inlinedAt: !1337)
!1396 = !DILocation(line: 737, scope: !1394, inlinedAt: !1337)
!1397 = !DILocation(line: 738, scope: !1394, inlinedAt: !1337)
!1398 = !DILocation(line: 739, scope: !1394, inlinedAt: !1337)
!1399 = !DILocation(line: 740, scope: !1394, inlinedAt: !1337)
!1400 = !DILocation(line: 741, scope: !1394, inlinedAt: !1337)
!1401 = !DILocation(line: 743, scope: !1391, inlinedAt: !1337)
!1402 = !DILocation(line: 745, scope: !1403, inlinedAt: !1337)
!1403 = distinct !DILexicalBlock(scope: !1391, file: !2, line: 745, column: 4)
!1404 = !DILocalVariable(name: "new_value", scope: !1405, file: !2, line: 747, type: !3, align: 4)
!1405 = distinct !DILexicalBlock(scope: !1403, file: !2, line: 746, column: 4)
!1406 = !DILocation(line: 747, scope: !1405, inlinedAt: !1337)
!1407 = !DILocation(line: 748, scope: !1405, inlinedAt: !1337)
!1408 = !DILocation(line: 749, scope: !1405, inlinedAt: !1337)
!1409 = !DILocalVariable(name: "new_value", scope: !1403, file: !2, line: 751, type: !3, align: 4)
!1410 = !DILocation(line: 751, scope: !1403, inlinedAt: !1337)
!1411 = !DILocation(line: 752, scope: !1403, inlinedAt: !1337)
!1412 = !DILocation(line: 753, scope: !1403, inlinedAt: !1337)
!1413 = !DILocation(line: 756, scope: !1341, inlinedAt: !1337)
!1414 = distinct !DISubprogram(name: "to_ushort", linkageName: "std.core.String.to_ushort", scope: !2, file: !2, line: 768, type: !1415, scopeLine: 768, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1415 = !DISubroutineType(types: !1416)
!1416 = !{!237, !605, !59, !18}
!1417 = !DILocalVariable(name: "s", arg: 1, scope: !1414, file: !2, line: 768, type: !59)
!1418 = !DILocation(line: 768, scope: !1414)
!1419 = !DILocalVariable(name: "base", arg: 2, scope: !1414, file: !2, line: 768, type: !18)
!1420 = !DILocation(line: 686, scope: !1421, inlinedAt: !1418)
!1421 = distinct !DILexicalBlock(scope: !1422, file: !2, line: 689, column: 1)
!1422 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1423 = !DILocalVariable(name: "len", scope: !1422, file: !2, line: 690, type: !66, align: 8)
!1424 = !DILocation(line: 690, scope: !1422, inlinedAt: !1418)
!1425 = !DILocalVariable(name: "index", scope: !1422, file: !2, line: 691, type: !66, align: 8)
!1426 = !DILocation(line: 691, scope: !1422, inlinedAt: !1418)
!1427 = !DILocalVariable(name: "ptr", scope: !1422, file: !2, line: 692, type: !63, align: 8)
!1428 = !DILocation(line: 692, scope: !1422, inlinedAt: !1418)
!1429 = !DILocation(line: 693, scope: !1422, inlinedAt: !1418)
!1430 = !DILocation(line: 693, scope: !1431, inlinedAt: !1418)
!1431 = distinct !DILexicalBlock(scope: !1422, file: !2, line: 693, column: 2)
!1432 = !DILocation(line: 16, scope: !1433, inlinedAt: !1430)
!1433 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1434 = !DILocation(line: 694, scope: !1422, inlinedAt: !1418)
!1435 = !DILocalVariable(name: "is_negative", scope: !1422, file: !2, line: 695, type: !105, align: 1)
!1436 = !DILocation(line: 695, scope: !1422, inlinedAt: !1418)
!1437 = !DILocation(line: 696, scope: !1438, inlinedAt: !1418)
!1438 = distinct !DILexicalBlock(scope: !1422, file: !2, line: 696, column: 2)
!1439 = !DILocation(line: 699, scope: !1440, inlinedAt: !1418)
!1440 = distinct !DILexicalBlock(scope: !1438, file: !2, line: 699, column: 4)
!1441 = !DILocation(line: 703, scope: !1442, inlinedAt: !1418)
!1442 = distinct !DILexicalBlock(scope: !1438, file: !2, line: 703, column: 4)
!1443 = !DILocation(line: 705, scope: !1444, inlinedAt: !1418)
!1444 = distinct !DILexicalBlock(scope: !1438, file: !2, line: 705, column: 4)
!1445 = !DILocation(line: 707, scope: !1422, inlinedAt: !1418)
!1446 = !DILocalVariable(name: "base_used", scope: !1422, file: !2, line: 708, type: !570, align: 2)
!1447 = !DILocation(line: 708, scope: !1422, inlinedAt: !1418)
!1448 = !DILocation(line: 709, scope: !1422, inlinedAt: !1418)
!1449 = !DILocation(line: 711, scope: !1450, inlinedAt: !1418)
!1450 = distinct !DILexicalBlock(scope: !1422, file: !2, line: 710, column: 2)
!1451 = !DILocation(line: 712, scope: !1450, inlinedAt: !1418)
!1452 = !DILocation(line: 713, scope: !1453, inlinedAt: !1418)
!1453 = distinct !DILexicalBlock(scope: !1450, file: !2, line: 713, column: 3)
!1454 = !DILocation(line: 717, scope: !1455, inlinedAt: !1418)
!1455 = distinct !DILexicalBlock(scope: !1453, file: !2, line: 717, column: 5)
!1456 = !DILocation(line: 718, scope: !1455, inlinedAt: !1418)
!1457 = !DILocation(line: 721, scope: !1458, inlinedAt: !1418)
!1458 = distinct !DILexicalBlock(scope: !1453, file: !2, line: 721, column: 5)
!1459 = !DILocation(line: 722, scope: !1458, inlinedAt: !1418)
!1460 = !DILocation(line: 725, scope: !1461, inlinedAt: !1418)
!1461 = distinct !DILexicalBlock(scope: !1453, file: !2, line: 725, column: 5)
!1462 = !DILocation(line: 726, scope: !1461, inlinedAt: !1418)
!1463 = !DILocation(line: 728, scope: !1464, inlinedAt: !1418)
!1464 = distinct !DILexicalBlock(scope: !1453, file: !2, line: 728, column: 5)
!1465 = !DILocation(line: 730, scope: !1450, inlinedAt: !1418)
!1466 = !DILocalVariable(name: "value", scope: !1422, file: !2, line: 732, type: !570, align: 2)
!1467 = !DILocation(line: 732, scope: !1422, inlinedAt: !1418)
!1468 = !DILocation(line: 733, scope: !1422, inlinedAt: !1418)
!1469 = !DILocation(line: 733, scope: !1470, inlinedAt: !1418)
!1470 = distinct !DILexicalBlock(scope: !1422, file: !2, line: 733, column: 2)
!1471 = !DILocalVariable(name: "c", scope: !1472, file: !2, line: 735, type: !64, align: 1)
!1472 = distinct !DILexicalBlock(scope: !1470, file: !2, line: 734, column: 2)
!1473 = !DILocation(line: 735, scope: !1472, inlinedAt: !1418)
!1474 = !DILocalVariable(name: "ch", scope: !1475, file: !2, line: 736, type: !64, align: 1)
!1475 = distinct !DILexicalBlock(scope: !1472, file: !2, line: 736, column: 4)
!1476 = !DILocation(line: 736, scope: !1475, inlinedAt: !1418)
!1477 = !DILocation(line: 737, scope: !1475, inlinedAt: !1418)
!1478 = !DILocation(line: 738, scope: !1475, inlinedAt: !1418)
!1479 = !DILocation(line: 739, scope: !1475, inlinedAt: !1418)
!1480 = !DILocation(line: 740, scope: !1475, inlinedAt: !1418)
!1481 = !DILocation(line: 741, scope: !1475, inlinedAt: !1418)
!1482 = !DILocation(line: 743, scope: !1472, inlinedAt: !1418)
!1483 = !DILocation(line: 745, scope: !1484, inlinedAt: !1418)
!1484 = distinct !DILexicalBlock(scope: !1472, file: !2, line: 745, column: 4)
!1485 = !DILocalVariable(name: "new_value", scope: !1486, file: !2, line: 747, type: !570, align: 2)
!1486 = distinct !DILexicalBlock(scope: !1484, file: !2, line: 746, column: 4)
!1487 = !DILocation(line: 747, scope: !1486, inlinedAt: !1418)
!1488 = !DILocation(line: 748, scope: !1486, inlinedAt: !1418)
!1489 = !DILocation(line: 749, scope: !1486, inlinedAt: !1418)
!1490 = !DILocalVariable(name: "new_value", scope: !1484, file: !2, line: 751, type: !570, align: 2)
!1491 = !DILocation(line: 751, scope: !1484, inlinedAt: !1418)
!1492 = !DILocation(line: 752, scope: !1484, inlinedAt: !1418)
!1493 = !DILocation(line: 753, scope: !1484, inlinedAt: !1418)
!1494 = !DILocation(line: 756, scope: !1422, inlinedAt: !1418)
!1495 = distinct !DISubprogram(name: "to_uchar", linkageName: "std.core.String.to_uchar", scope: !2, file: !2, line: 769, type: !1496, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1496 = !DISubroutineType(types: !1497)
!1497 = !{!237, !63, !59, !18}
!1498 = !DILocalVariable(name: "s", arg: 1, scope: !1495, file: !2, line: 769, type: !59)
!1499 = !DILocation(line: 769, scope: !1495)
!1500 = !DILocalVariable(name: "base", arg: 2, scope: !1495, file: !2, line: 769, type: !18)
!1501 = !DILocation(line: 686, scope: !1502, inlinedAt: !1499)
!1502 = distinct !DILexicalBlock(scope: !1503, file: !2, line: 689, column: 1)
!1503 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 688, scopeLine: 688, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1504 = !DILocalVariable(name: "len", scope: !1503, file: !2, line: 690, type: !66, align: 8)
!1505 = !DILocation(line: 690, scope: !1503, inlinedAt: !1499)
!1506 = !DILocalVariable(name: "index", scope: !1503, file: !2, line: 691, type: !66, align: 8)
!1507 = !DILocation(line: 691, scope: !1503, inlinedAt: !1499)
!1508 = !DILocalVariable(name: "ptr", scope: !1503, file: !2, line: 692, type: !63, align: 8)
!1509 = !DILocation(line: 692, scope: !1503, inlinedAt: !1499)
!1510 = !DILocation(line: 693, scope: !1503, inlinedAt: !1499)
!1511 = !DILocation(line: 693, scope: !1512, inlinedAt: !1499)
!1512 = distinct !DILexicalBlock(scope: !1503, file: !2, line: 693, column: 2)
!1513 = !DILocation(line: 16, scope: !1514, inlinedAt: !1511)
!1514 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !765, file: !765, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1515 = !DILocation(line: 694, scope: !1503, inlinedAt: !1499)
!1516 = !DILocalVariable(name: "is_negative", scope: !1503, file: !2, line: 695, type: !105, align: 1)
!1517 = !DILocation(line: 695, scope: !1503, inlinedAt: !1499)
!1518 = !DILocation(line: 696, scope: !1519, inlinedAt: !1499)
!1519 = distinct !DILexicalBlock(scope: !1503, file: !2, line: 696, column: 2)
!1520 = !DILocation(line: 699, scope: !1521, inlinedAt: !1499)
!1521 = distinct !DILexicalBlock(scope: !1519, file: !2, line: 699, column: 4)
!1522 = !DILocation(line: 703, scope: !1523, inlinedAt: !1499)
!1523 = distinct !DILexicalBlock(scope: !1519, file: !2, line: 703, column: 4)
!1524 = !DILocation(line: 705, scope: !1525, inlinedAt: !1499)
!1525 = distinct !DILexicalBlock(scope: !1519, file: !2, line: 705, column: 4)
!1526 = !DILocation(line: 707, scope: !1503, inlinedAt: !1499)
!1527 = !DILocalVariable(name: "base_used", scope: !1503, file: !2, line: 708, type: !64, align: 1)
!1528 = !DILocation(line: 708, scope: !1503, inlinedAt: !1499)
!1529 = !DILocation(line: 709, scope: !1503, inlinedAt: !1499)
!1530 = !DILocation(line: 711, scope: !1531, inlinedAt: !1499)
!1531 = distinct !DILexicalBlock(scope: !1503, file: !2, line: 710, column: 2)
!1532 = !DILocation(line: 712, scope: !1531, inlinedAt: !1499)
!1533 = !DILocation(line: 713, scope: !1534, inlinedAt: !1499)
!1534 = distinct !DILexicalBlock(scope: !1531, file: !2, line: 713, column: 3)
!1535 = !DILocation(line: 717, scope: !1536, inlinedAt: !1499)
!1536 = distinct !DILexicalBlock(scope: !1534, file: !2, line: 717, column: 5)
!1537 = !DILocation(line: 718, scope: !1536, inlinedAt: !1499)
!1538 = !DILocation(line: 721, scope: !1539, inlinedAt: !1499)
!1539 = distinct !DILexicalBlock(scope: !1534, file: !2, line: 721, column: 5)
!1540 = !DILocation(line: 722, scope: !1539, inlinedAt: !1499)
!1541 = !DILocation(line: 725, scope: !1542, inlinedAt: !1499)
!1542 = distinct !DILexicalBlock(scope: !1534, file: !2, line: 725, column: 5)
!1543 = !DILocation(line: 726, scope: !1542, inlinedAt: !1499)
!1544 = !DILocation(line: 728, scope: !1545, inlinedAt: !1499)
!1545 = distinct !DILexicalBlock(scope: !1534, file: !2, line: 728, column: 5)
!1546 = !DILocation(line: 730, scope: !1531, inlinedAt: !1499)
!1547 = !DILocalVariable(name: "value", scope: !1503, file: !2, line: 732, type: !64, align: 1)
!1548 = !DILocation(line: 732, scope: !1503, inlinedAt: !1499)
!1549 = !DILocation(line: 733, scope: !1503, inlinedAt: !1499)
!1550 = !DILocation(line: 733, scope: !1551, inlinedAt: !1499)
!1551 = distinct !DILexicalBlock(scope: !1503, file: !2, line: 733, column: 2)
!1552 = !DILocalVariable(name: "c", scope: !1553, file: !2, line: 735, type: !64, align: 1)
!1553 = distinct !DILexicalBlock(scope: !1551, file: !2, line: 734, column: 2)
!1554 = !DILocation(line: 735, scope: !1553, inlinedAt: !1499)
!1555 = !DILocalVariable(name: "ch", scope: !1556, file: !2, line: 736, type: !64, align: 1)
!1556 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 736, column: 4)
!1557 = !DILocation(line: 736, scope: !1556, inlinedAt: !1499)
!1558 = !DILocation(line: 737, scope: !1556, inlinedAt: !1499)
!1559 = !DILocation(line: 738, scope: !1556, inlinedAt: !1499)
!1560 = !DILocation(line: 739, scope: !1556, inlinedAt: !1499)
!1561 = !DILocation(line: 740, scope: !1556, inlinedAt: !1499)
!1562 = !DILocation(line: 741, scope: !1556, inlinedAt: !1499)
!1563 = !DILocation(line: 743, scope: !1553, inlinedAt: !1499)
!1564 = !DILocation(line: 745, scope: !1565, inlinedAt: !1499)
!1565 = distinct !DILexicalBlock(scope: !1553, file: !2, line: 745, column: 4)
!1566 = !DILocalVariable(name: "new_value", scope: !1567, file: !2, line: 747, type: !64, align: 1)
!1567 = distinct !DILexicalBlock(scope: !1565, file: !2, line: 746, column: 4)
!1568 = !DILocation(line: 747, scope: !1567, inlinedAt: !1499)
!1569 = !DILocation(line: 748, scope: !1567, inlinedAt: !1499)
!1570 = !DILocation(line: 749, scope: !1567, inlinedAt: !1499)
!1571 = !DILocalVariable(name: "new_value", scope: !1565, file: !2, line: 751, type: !64, align: 1)
!1572 = !DILocation(line: 751, scope: !1565, inlinedAt: !1499)
!1573 = !DILocation(line: 752, scope: !1565, inlinedAt: !1499)
!1574 = !DILocation(line: 753, scope: !1565, inlinedAt: !1499)
!1575 = !DILocation(line: 756, scope: !1503, inlinedAt: !1499)
!1576 = distinct !DISubprogram(name: "to_double", linkageName: "std.core.String.to_double", scope: !2, file: !2, line: 771, type: !1577, scopeLine: 771, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1577 = !DISubroutineType(types: !1578)
!1578 = !{!237, !1579, !59}
!1579 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !1580, size: 64, align: 64, dwarfAddressSpace: 0)
!1580 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1581 = !DILocalVariable(name: "s", arg: 1, scope: !1576, file: !2, line: 771, type: !59)
!1582 = !DILocation(line: 771, scope: !1576)
!1583 = !DILocalVariable(name: "sign", scope: !1584, file: !2, line: 454, type: !18, align: 4)
!1584 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1585 = !DILocation(line: 454, scope: !1584, inlinedAt: !1582)
!1586 = !DILocation(line: 468, scope: !1584, inlinedAt: !1582)
!1587 = !DILocation(line: 468, scope: !1588, inlinedAt: !1582)
!1588 = distinct !DILexicalBlock(scope: !1584, file: !41, line: 468, column: 2)
!1589 = !DILocation(line: 469, scope: !1584, inlinedAt: !1582)
!1590 = !DILocation(line: 470, scope: !1591, inlinedAt: !1582)
!1591 = distinct !DILexicalBlock(scope: !1584, file: !41, line: 470, column: 2)
!1592 = !DILocation(line: 473, scope: !1593, inlinedAt: !1582)
!1593 = distinct !DILexicalBlock(scope: !1591, file: !41, line: 473, column: 4)
!1594 = !DILocation(line: 474, scope: !1593, inlinedAt: !1582)
!1595 = !DILocation(line: 476, scope: !1596, inlinedAt: !1582)
!1596 = distinct !DILexicalBlock(scope: !1591, file: !41, line: 476, column: 4)
!1597 = !DILocation(line: 478, scope: !1584, inlinedAt: !1582)
!1598 = !DILocation(line: 479, scope: !1584, inlinedAt: !1582)
!1599 = !DILocation(line: 481, scope: !1584, inlinedAt: !1582)
!1600 = !DILocation(line: 483, scope: !1601, inlinedAt: !1582)
!1601 = distinct !DILexicalBlock(scope: !1584, file: !41, line: 482, column: 2)
!1602 = !DILocalVariable(name: "scale", scope: !1603, file: !2, line: 330, type: !1580, align: 8)
!1603 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1604 = !DILocation(line: 330, scope: !1603, inlinedAt: !1600)
!1605 = !DILocalVariable(name: "x", scope: !1603, file: !2, line: 331, type: !3, align: 4)
!1606 = !DILocation(line: 331, scope: !1603, inlinedAt: !1600)
!1607 = !DILocalVariable(name: "rp", scope: !1603, file: !2, line: 332, type: !238, align: 8)
!1608 = !DILocation(line: 332, scope: !1603, inlinedAt: !1600)
!1609 = !DILocalVariable(name: "dc", scope: !1603, file: !2, line: 333, type: !238, align: 8)
!1610 = !DILocation(line: 333, scope: !1603, inlinedAt: !1600)
!1611 = !DILocalVariable(name: "c", scope: !1603, file: !2, line: 334, type: !64, align: 1)
!1612 = !DILocation(line: 334, scope: !1603, inlinedAt: !1600)
!1613 = !DILocalVariable(name: "got_rad", scope: !1603, file: !2, line: 335, type: !105, align: 1)
!1614 = !DILocation(line: 335, scope: !1603, inlinedAt: !1600)
!1615 = !DILocalVariable(name: "got_digit", scope: !1603, file: !2, line: 336, type: !105, align: 1)
!1616 = !DILocation(line: 336, scope: !1603, inlinedAt: !1600)
!1617 = !DILocalVariable(name: "got_tail", scope: !1603, file: !2, line: 337, type: !105, align: 1)
!1618 = !DILocation(line: 337, scope: !1603, inlinedAt: !1600)
!1619 = !DILocalVariable(name: "len", scope: !1603, file: !2, line: 338, type: !66, align: 8)
!1620 = !DILocation(line: 338, scope: !1603, inlinedAt: !1600)
!1621 = !DILocalVariable(name: "last_char", scope: !1603, file: !2, line: 339, type: !66, align: 8)
!1622 = !DILocation(line: 339, scope: !1603, inlinedAt: !1600)
!1623 = !DILocalVariable(name: "index", scope: !1603, file: !2, line: 340, type: !66, align: 8)
!1624 = !DILocation(line: 340, scope: !1603, inlinedAt: !1600)
!1625 = !DILocalVariable(name: "y", scope: !1603, file: !2, line: 341, type: !1580, align: 8)
!1626 = !DILocation(line: 341, scope: !1603, inlinedAt: !1600)
!1627 = !DILocation(line: 344, scope: !1603, inlinedAt: !1600)
!1628 = !DILocation(line: 344, scope: !1629, inlinedAt: !1600)
!1629 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 344, column: 2)
!1630 = !DILocation(line: 346, scope: !1631, inlinedAt: !1600)
!1631 = distinct !DILexicalBlock(scope: !1629, file: !41, line: 345, column: 2)
!1632 = !DILocation(line: 347, scope: !1631, inlinedAt: !1600)
!1633 = !DILocation(line: 349, scope: !1603, inlinedAt: !1600)
!1634 = !DILocation(line: 351, scope: !1635, inlinedAt: !1600)
!1635 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 350, column: 2)
!1636 = !DILocation(line: 352, scope: !1635, inlinedAt: !1600)
!1637 = !DILocation(line: 354, scope: !1638, inlinedAt: !1600)
!1638 = distinct !DILexicalBlock(scope: !1635, file: !41, line: 353, column: 3)
!1639 = !DILocation(line: 355, scope: !1638, inlinedAt: !1600)
!1640 = !DILocation(line: 357, scope: !1635, inlinedAt: !1600)
!1641 = !DILocation(line: 359, scope: !1642, inlinedAt: !1600)
!1642 = distinct !DILexicalBlock(scope: !1635, file: !41, line: 358, column: 3)
!1643 = !DILocation(line: 360, scope: !1642, inlinedAt: !1600)
!1644 = !DILocation(line: 361, scope: !1642, inlinedAt: !1600)
!1645 = !DILocation(line: 361, scope: !1646, inlinedAt: !1600)
!1646 = distinct !DILexicalBlock(scope: !1642, file: !41, line: 361, column: 4)
!1647 = !DILocation(line: 363, scope: !1648, inlinedAt: !1600)
!1648 = distinct !DILexicalBlock(scope: !1646, file: !41, line: 362, column: 4)
!1649 = !DILocation(line: 368, scope: !1603, inlinedAt: !1600)
!1650 = !DILocation(line: 368, scope: !1651, inlinedAt: !1600)
!1651 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 368, column: 2)
!1652 = !DILocation(line: 370, scope: !1653, inlinedAt: !1600)
!1653 = distinct !DILexicalBlock(scope: !1651, file: !41, line: 369, column: 2)
!1654 = !DILocation(line: 372, scope: !1655, inlinedAt: !1600)
!1655 = distinct !DILexicalBlock(scope: !1653, file: !41, line: 371, column: 3)
!1656 = !DILocation(line: 373, scope: !1655, inlinedAt: !1600)
!1657 = !DILocation(line: 374, scope: !1655, inlinedAt: !1600)
!1658 = !DILocation(line: 378, scope: !1659, inlinedAt: !1600)
!1659 = distinct !DILexicalBlock(scope: !1653, file: !41, line: 377, column: 3)
!1660 = !DILocalVariable(name: "d", scope: !1659, file: !2, line: 379, type: !18, align: 4)
!1661 = !DILocation(line: 379, scope: !1659, inlinedAt: !1600)
!1662 = !DILocation(line: 380, scope: !1663, inlinedAt: !1600)
!1663 = distinct !DILexicalBlock(scope: !1659, file: !41, line: 380, column: 5)
!1664 = !DILocation(line: 381, scope: !1663, inlinedAt: !1600)
!1665 = !DILocation(line: 385, scope: !1666, inlinedAt: !1600)
!1666 = distinct !DILexicalBlock(scope: !1659, file: !41, line: 383, column: 4)
!1667 = !DILocation(line: 386, scope: !1668, inlinedAt: !1600)
!1668 = distinct !DILexicalBlock(scope: !1666, file: !41, line: 386, column: 6)
!1669 = !DILocation(line: 387, scope: !1666, inlinedAt: !1600)
!1670 = !DILocation(line: 388, scope: !1671, inlinedAt: !1600)
!1671 = distinct !DILexicalBlock(scope: !1666, file: !41, line: 388, column: 6)
!1672 = !DILocation(line: 389, scope: !1671, inlinedAt: !1600)
!1673 = !DILocation(line: 390, scope: !1666, inlinedAt: !1600)
!1674 = !DILocation(line: 391, scope: !1675, inlinedAt: !1600)
!1675 = distinct !DILexicalBlock(scope: !1666, file: !41, line: 391, column: 6)
!1676 = !DILocation(line: 392, scope: !1675, inlinedAt: !1600)
!1677 = !DILocation(line: 394, scope: !1659, inlinedAt: !1600)
!1678 = !DILocation(line: 396, scope: !1653, inlinedAt: !1600)
!1679 = !DILocation(line: 397, scope: !1653, inlinedAt: !1600)
!1680 = !DILocation(line: 399, scope: !1603, inlinedAt: !1600)
!1681 = !DILocation(line: 400, scope: !1603, inlinedAt: !1600)
!1682 = !DILocation(line: 401, scope: !1603, inlinedAt: !1600)
!1683 = !DILocation(line: 401, scope: !1684, inlinedAt: !1600)
!1684 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 401, column: 2)
!1685 = !DILocalVariable(name: "e2", scope: !1603, file: !2, line: 403, type: !238, align: 8)
!1686 = !DILocation(line: 403, scope: !1603, inlinedAt: !1600)
!1687 = !DILocation(line: 404, scope: !1603, inlinedAt: !1600)
!1688 = !DILocalVariable(name: "e2val", scope: !1689, file: !2, line: 406, type: !238, align: 8)
!1689 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 405, column: 2)
!1690 = !DILocation(line: 406, scope: !1689, inlinedAt: !1600)
!1691 = !DILocation(line: 407, scope: !1689, inlinedAt: !1600)
!1692 = !DILocation(line: 409, scope: !1603, inlinedAt: !1600)
!1693 = !DILocation(line: 410, scope: !1603, inlinedAt: !1600)
!1694 = !DILocation(line: 411, scope: !1603, inlinedAt: !1600)
!1695 = !DILocation(line: 412, scope: !1603, inlinedAt: !1600)
!1696 = !DILocation(line: 414, scope: !1603, inlinedAt: !1600)
!1697 = !DILocation(line: 414, scope: !1698, inlinedAt: !1600)
!1698 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 414, column: 2)
!1699 = !DILocation(line: 416, scope: !1700, inlinedAt: !1600)
!1700 = distinct !DILexicalBlock(scope: !1698, file: !41, line: 415, column: 2)
!1701 = !DILocation(line: 418, scope: !1702, inlinedAt: !1600)
!1702 = distinct !DILexicalBlock(scope: !1700, file: !41, line: 417, column: 3)
!1703 = !DILocation(line: 419, scope: !1702, inlinedAt: !1600)
!1704 = !DILocation(line: 423, scope: !1705, inlinedAt: !1600)
!1705 = distinct !DILexicalBlock(scope: !1700, file: !41, line: 422, column: 3)
!1706 = !DILocation(line: 424, scope: !1705, inlinedAt: !1600)
!1707 = !DILocation(line: 426, scope: !1700, inlinedAt: !1600)
!1708 = !DILocalVariable(name: "bits", scope: !1603, file: !2, line: 428, type: !18, align: 4)
!1709 = !DILocation(line: 428, scope: !1603, inlinedAt: !1600)
!1710 = !DILocation(line: 429, scope: !1603, inlinedAt: !1600)
!1711 = !DILocation(line: 431, scope: !1712, inlinedAt: !1600)
!1712 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 430, column: 2)
!1713 = !DILocation(line: 432, scope: !1712, inlinedAt: !1600)
!1714 = !DILocalVariable(name: "bias", scope: !1603, file: !2, line: 434, type: !1580, align: 8)
!1715 = !DILocation(line: 434, scope: !1603, inlinedAt: !1600)
!1716 = !DILocation(line: 435, scope: !1603, inlinedAt: !1600)
!1717 = !DILocation(line: 437, scope: !1718, inlinedAt: !1600)
!1718 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 436, column: 2)
!1719 = !DILocation(line: 1046, scope: !1720, inlinedAt: !1717)
!1720 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1721 = !DIFile(filename: "math.c3", directory: "C:/Program Files/c3c/lib/std/math")
!1722 = !DILocation(line: 41, scope: !1723, inlinedAt: !1725)
!1723 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !1724, file: !1724, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1724 = !DIFile(filename: "values.c3", directory: "C:/Program Files/c3c/lib/std/core")
!1725 = !DILocation(line: 310, scope: !1726, inlinedAt: !1717)
!1726 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !1721, file: !1721, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1727 = !DILocation(line: 440, scope: !1603, inlinedAt: !1600)
!1728 = !DILocation(line: 442, scope: !1729, inlinedAt: !1600)
!1729 = distinct !DILexicalBlock(scope: !1603, file: !41, line: 441, column: 2)
!1730 = !DILocation(line: 443, scope: !1729, inlinedAt: !1600)
!1731 = !DILocation(line: 445, scope: !1603, inlinedAt: !1600)
!1732 = !DILocation(line: 446, scope: !1603, inlinedAt: !1600)
!1733 = !DILocation(line: 447, scope: !1603, inlinedAt: !1600)
!1734 = !DILocation(line: 449, scope: !1603, inlinedAt: !1600)
!1735 = !DILocation(line: 1046, scope: !1736, inlinedAt: !1734)
!1736 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1737 = !DILocation(line: 35, scope: !1738, inlinedAt: !1740)
!1738 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 38, column: 1)
!1739 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1740 = !DILocation(line: 485, scope: !1584, inlinedAt: !1582)
!1741 = !DILocalVariable(name: "x", scope: !1739, file: !2, line: 39, type: !1742, align: 16)
!1742 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 4096, align: 32, elements: !1743)
!1743 = !{!1744}
!1744 = !DISubrange(count: 128, lowerBound: 0)
!1745 = !DILocation(line: 39, scope: !1739, inlinedAt: !1740)
!1746 = !DILocalVariable(name: "emax", scope: !1739, file: !2, line: 41, type: !18, align: 4)
!1747 = !DILocation(line: 41, scope: !1739, inlinedAt: !1740)
!1748 = !DILocalVariable(name: "index", scope: !1739, file: !2, line: 44, type: !66, align: 8)
!1749 = !DILocation(line: 44, scope: !1739, inlinedAt: !1740)
!1750 = !DILocalVariable(name: "got_digit", scope: !1739, file: !2, line: 45, type: !105, align: 1)
!1751 = !DILocation(line: 45, scope: !1739, inlinedAt: !1740)
!1752 = !DILocalVariable(name: "got_rad", scope: !1739, file: !2, line: 46, type: !105, align: 1)
!1753 = !DILocation(line: 46, scope: !1739, inlinedAt: !1740)
!1754 = !DILocalVariable(name: "lrp", scope: !1739, file: !2, line: 47, type: !238, align: 8)
!1755 = !DILocation(line: 47, scope: !1739, inlinedAt: !1740)
!1756 = !DILocalVariable(name: "dc", scope: !1739, file: !2, line: 47, type: !238, align: 8)
!1757 = !DILocalVariable(name: "k", scope: !1739, file: !2, line: 48, type: !18, align: 4)
!1758 = !DILocation(line: 48, scope: !1739, inlinedAt: !1740)
!1759 = !DILocalVariable(name: "j", scope: !1739, file: !2, line: 48, type: !18, align: 4)
!1760 = !DILocalVariable(name: "lnz", scope: !1739, file: !2, line: 48, type: !18, align: 4)
!1761 = !DILocalVariable(name: "len", scope: !1739, file: !2, line: 49, type: !66, align: 8)
!1762 = !DILocation(line: 49, scope: !1739, inlinedAt: !1740)
!1763 = !DILocalVariable(name: "last_char", scope: !1739, file: !2, line: 50, type: !66, align: 8)
!1764 = !DILocation(line: 50, scope: !1739, inlinedAt: !1740)
!1765 = !DILocation(line: 52, scope: !1739, inlinedAt: !1740)
!1766 = !DILocalVariable(name: "c", scope: !1739, file: !2, line: 54, type: !64, align: 1)
!1767 = !DILocation(line: 54, scope: !1739, inlinedAt: !1740)
!1768 = !DILocation(line: 56, scope: !1739, inlinedAt: !1740)
!1769 = !DILocation(line: 56, scope: !1770, inlinedAt: !1740)
!1770 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 56, column: 2)
!1771 = !DILocation(line: 58, scope: !1772, inlinedAt: !1740)
!1772 = distinct !DILexicalBlock(scope: !1770, file: !41, line: 57, column: 2)
!1773 = !DILocation(line: 59, scope: !1772, inlinedAt: !1740)
!1774 = !DILocation(line: 62, scope: !1739, inlinedAt: !1740)
!1775 = !DILocation(line: 64, scope: !1776, inlinedAt: !1740)
!1776 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 63, column: 2)
!1777 = !DILocation(line: 65, scope: !1776, inlinedAt: !1740)
!1778 = !DILocation(line: 67, scope: !1779, inlinedAt: !1740)
!1779 = distinct !DILexicalBlock(scope: !1776, file: !41, line: 66, column: 3)
!1780 = !DILocation(line: 68, scope: !1779, inlinedAt: !1740)
!1781 = !DILocation(line: 70, scope: !1776, inlinedAt: !1740)
!1782 = !DILocation(line: 72, scope: !1783, inlinedAt: !1740)
!1783 = distinct !DILexicalBlock(scope: !1776, file: !41, line: 71, column: 3)
!1784 = !DILocation(line: 73, scope: !1783, inlinedAt: !1740)
!1785 = !DILocation(line: 74, scope: !1783, inlinedAt: !1740)
!1786 = !DILocation(line: 74, scope: !1787, inlinedAt: !1740)
!1787 = distinct !DILexicalBlock(scope: !1783, file: !41, line: 74, column: 4)
!1788 = !DILocation(line: 76, scope: !1789, inlinedAt: !1740)
!1789 = distinct !DILexicalBlock(scope: !1787, file: !41, line: 75, column: 4)
!1790 = !DILocation(line: 81, scope: !1739, inlinedAt: !1740)
!1791 = !DILocation(line: 81, scope: !1792, inlinedAt: !1740)
!1792 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 81, column: 2)
!1793 = !DILocation(line: 85, scope: !1794, inlinedAt: !1740)
!1794 = distinct !DILexicalBlock(scope: !1795, file: !41, line: 83, column: 3)
!1795 = distinct !DILexicalBlock(scope: !1792, file: !41, line: 82, column: 2)
!1796 = !DILocation(line: 86, scope: !1797, inlinedAt: !1740)
!1797 = distinct !DILexicalBlock(scope: !1794, file: !41, line: 86, column: 5)
!1798 = !DILocation(line: 87, scope: !1797, inlinedAt: !1740)
!1799 = !DILocation(line: 88, scope: !1797, inlinedAt: !1740)
!1800 = !DILocation(line: 89, scope: !1794, inlinedAt: !1740)
!1801 = !DILocation(line: 90, scope: !1802, inlinedAt: !1740)
!1802 = distinct !DILexicalBlock(scope: !1794, file: !41, line: 90, column: 5)
!1803 = !DILocation(line: 91, scope: !1802, inlinedAt: !1740)
!1804 = !DILocation(line: 92, scope: !1802, inlinedAt: !1740)
!1805 = !DILocation(line: 94, scope: !1806, inlinedAt: !1740)
!1806 = distinct !DILexicalBlock(scope: !1802, file: !41, line: 93, column: 5)
!1807 = !DILocation(line: 98, scope: !1808, inlinedAt: !1740)
!1808 = distinct !DILexicalBlock(scope: !1802, file: !41, line: 97, column: 5)
!1809 = !DILocation(line: 100, scope: !1802, inlinedAt: !1740)
!1810 = !DILocation(line: 102, scope: !1811, inlinedAt: !1740)
!1811 = distinct !DILexicalBlock(scope: !1802, file: !41, line: 101, column: 5)
!1812 = !DILocation(line: 103, scope: !1811, inlinedAt: !1740)
!1813 = !DILocation(line: 105, scope: !1802, inlinedAt: !1740)
!1814 = !DILocation(line: 107, scope: !1815, inlinedAt: !1740)
!1815 = distinct !DILexicalBlock(scope: !1794, file: !41, line: 107, column: 5)
!1816 = !DILocation(line: 108, scope: !1815, inlinedAt: !1740)
!1817 = !DILocation(line: 111, scope: !1795, inlinedAt: !1740)
!1818 = !DILocation(line: 112, scope: !1795, inlinedAt: !1740)
!1819 = !DILocation(line: 113, scope: !1795, inlinedAt: !1740)
!1820 = !DILocation(line: 115, scope: !1739, inlinedAt: !1740)
!1821 = !DILocation(line: 116, scope: !1739, inlinedAt: !1740)
!1822 = !DILocation(line: 117, scope: !1739, inlinedAt: !1740)
!1823 = !DILocation(line: 119, scope: !1824, inlinedAt: !1740)
!1824 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 118, column: 2)
!1825 = !DILocalVariable(name: "e10", scope: !1824, file: !2, line: 120, type: !238, align: 8)
!1826 = !DILocation(line: 120, scope: !1824, inlinedAt: !1740)
!1827 = !DILocation(line: 121, scope: !1824, inlinedAt: !1740)
!1828 = !DILocation(line: 123, scope: !1739, inlinedAt: !1740)
!1829 = !DILocation(line: 125, scope: !1830, inlinedAt: !1740)
!1830 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 124, column: 2)
!1831 = !DILocation(line: 128, scope: !1739, inlinedAt: !1740)
!1832 = !DILocation(line: 131, scope: !1739, inlinedAt: !1740)
!1833 = !DILocation(line: 132, scope: !1739, inlinedAt: !1740)
!1834 = !DILocation(line: 133, scope: !1739, inlinedAt: !1740)
!1835 = !DILocation(line: 136, scope: !1739, inlinedAt: !1740)
!1836 = !DILocation(line: 138, scope: !1837, inlinedAt: !1740)
!1837 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 137, column: 2)
!1838 = !DILocation(line: 138, scope: !1839, inlinedAt: !1740)
!1839 = distinct !DILexicalBlock(scope: !1837, file: !41, line: 138, column: 3)
!1840 = !DILocation(line: 139, scope: !1837, inlinedAt: !1740)
!1841 = !DILocation(line: 140, scope: !1837, inlinedAt: !1740)
!1842 = !DILocalVariable(name: "a", scope: !1739, file: !2, line: 143, type: !18, align: 4)
!1843 = !DILocation(line: 143, scope: !1739, inlinedAt: !1740)
!1844 = !DILocalVariable(name: "z", scope: !1739, file: !2, line: 144, type: !18, align: 4)
!1845 = !DILocation(line: 144, scope: !1739, inlinedAt: !1740)
!1846 = !DILocalVariable(name: "e2", scope: !1739, file: !2, line: 145, type: !18, align: 4)
!1847 = !DILocation(line: 145, scope: !1739, inlinedAt: !1740)
!1848 = !DILocalVariable(name: "rp", scope: !1739, file: !2, line: 146, type: !238, align: 8)
!1849 = !DILocation(line: 146, scope: !1739, inlinedAt: !1740)
!1850 = !DILocation(line: 149, scope: !1739, inlinedAt: !1740)
!1851 = !DILocation(line: 151, scope: !1852, inlinedAt: !1740)
!1852 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 150, column: 2)
!1853 = !DILocation(line: 152, scope: !1852, inlinedAt: !1740)
!1854 = !DILocalVariable(name: "bitlim", scope: !1852, file: !2, line: 153, type: !18, align: 4)
!1855 = !DILocation(line: 153, scope: !1852, inlinedAt: !1740)
!1856 = !DILocation(line: 154, scope: !1852, inlinedAt: !1740)
!1857 = !DILocation(line: 158, scope: !1739, inlinedAt: !1740)
!1858 = !DILocalVariable(name: "rpm9", scope: !1859, file: !2, line: 160, type: !238, align: 8)
!1859 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 159, column: 2)
!1860 = !DILocation(line: 160, scope: !1859, inlinedAt: !1740)
!1861 = !DILocalVariable(name: "p10", scope: !1859, file: !2, line: 161, type: !18, align: 4)
!1862 = !DILocation(line: 161, scope: !1859, inlinedAt: !1740)
!1863 = !DILocalVariable(name: "carry", scope: !1859, file: !2, line: 162, type: !3, align: 4)
!1864 = !DILocation(line: 162, scope: !1859, inlinedAt: !1740)
!1865 = !DILocation(line: 163, scope: !1866, inlinedAt: !1740)
!1866 = distinct !DILexicalBlock(scope: !1859, file: !41, line: 163, column: 3)
!1867 = !DILocalVariable(name: "tmp", scope: !1868, file: !2, line: 165, type: !3, align: 4)
!1868 = distinct !DILexicalBlock(scope: !1866, file: !41, line: 164, column: 3)
!1869 = !DILocation(line: 165, scope: !1868, inlinedAt: !1740)
!1870 = !DILocation(line: 166, scope: !1868, inlinedAt: !1740)
!1871 = !DILocation(line: 167, scope: !1868, inlinedAt: !1740)
!1872 = !DILocation(line: 168, scope: !1868, inlinedAt: !1740)
!1873 = !DILocation(line: 170, scope: !1874, inlinedAt: !1740)
!1874 = distinct !DILexicalBlock(scope: !1868, file: !41, line: 169, column: 4)
!1875 = !DILocation(line: 171, scope: !1874, inlinedAt: !1740)
!1876 = !DILocation(line: 174, scope: !1859, inlinedAt: !1740)
!1877 = !DILocation(line: 175, scope: !1859, inlinedAt: !1740)
!1878 = !DILocation(line: 179, scope: !1739, inlinedAt: !1740)
!1879 = !DILocation(line: 179, scope: !1880, inlinedAt: !1740)
!1880 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 179, column: 2)
!1881 = !DILocalVariable(name: "carry", scope: !1882, file: !2, line: 181, type: !3, align: 4)
!1882 = distinct !DILexicalBlock(scope: !1880, file: !41, line: 180, column: 2)
!1883 = !DILocation(line: 181, scope: !1882, inlinedAt: !1740)
!1884 = !DILocation(line: 182, scope: !1882, inlinedAt: !1740)
!1885 = !DILocation(line: 183, scope: !1886, inlinedAt: !1740)
!1886 = distinct !DILexicalBlock(scope: !1882, file: !41, line: 183, column: 3)
!1887 = !DILocalVariable(name: "tmp", scope: !1888, file: !2, line: 185, type: !67, align: 8)
!1888 = distinct !DILexicalBlock(scope: !1886, file: !41, line: 184, column: 3)
!1889 = !DILocation(line: 185, scope: !1888, inlinedAt: !1740)
!1890 = !DILocation(line: 186, scope: !1888, inlinedAt: !1740)
!1891 = !DILocation(line: 188, scope: !1892, inlinedAt: !1740)
!1892 = distinct !DILexicalBlock(scope: !1888, file: !41, line: 187, column: 4)
!1893 = !DILocation(line: 189, scope: !1892, inlinedAt: !1740)
!1894 = !DILocation(line: 193, scope: !1895, inlinedAt: !1740)
!1895 = distinct !DILexicalBlock(scope: !1888, file: !41, line: 192, column: 4)
!1896 = !DILocation(line: 194, scope: !1895, inlinedAt: !1740)
!1897 = !DILocation(line: 196, scope: !1888, inlinedAt: !1740)
!1898 = !DILocation(line: 197, scope: !1888, inlinedAt: !1740)
!1899 = !DILocation(line: 199, scope: !1882, inlinedAt: !1740)
!1900 = !DILocation(line: 201, scope: !1901, inlinedAt: !1740)
!1901 = distinct !DILexicalBlock(scope: !1882, file: !41, line: 200, column: 3)
!1902 = !DILocation(line: 202, scope: !1901, inlinedAt: !1740)
!1903 = !DILocation(line: 203, scope: !1901, inlinedAt: !1740)
!1904 = !DILocation(line: 205, scope: !1905, inlinedAt: !1740)
!1905 = distinct !DILexicalBlock(scope: !1901, file: !41, line: 204, column: 4)
!1906 = !DILocation(line: 206, scope: !1905, inlinedAt: !1740)
!1907 = !DILocation(line: 208, scope: !1901, inlinedAt: !1740)
!1908 = !DILocation(line: 213, scope: !1739, inlinedAt: !1740)
!1909 = !DILocalVariable(name: "carry", scope: !1910, file: !2, line: 215, type: !3, align: 4)
!1910 = distinct !DILexicalBlock(scope: !1911, file: !41, line: 214, column: 2)
!1911 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 213, column: 2)
!1912 = !DILocation(line: 215, scope: !1910, inlinedAt: !1740)
!1913 = !DILocalVariable(name: "sh", scope: !1910, file: !2, line: 216, type: !18, align: 4)
!1914 = !DILocation(line: 216, scope: !1910, inlinedAt: !1740)
!1915 = !DILocalVariable(name: "i", scope: !1910, file: !2, line: 217, type: !18, align: 4)
!1916 = !DILocation(line: 217, scope: !1910, inlinedAt: !1740)
!1917 = !DILocation(line: 218, scope: !1918, inlinedAt: !1740)
!1918 = distinct !DILexicalBlock(scope: !1910, file: !41, line: 218, column: 3)
!1919 = !DILocation(line: 220, scope: !1920, inlinedAt: !1740)
!1920 = distinct !DILexicalBlock(scope: !1918, file: !41, line: 219, column: 3)
!1921 = !DILocation(line: 221, scope: !1920, inlinedAt: !1740)
!1922 = !DILocation(line: 223, scope: !1923, inlinedAt: !1740)
!1923 = distinct !DILexicalBlock(scope: !1920, file: !41, line: 222, column: 4)
!1924 = !DILocation(line: 224, scope: !1923, inlinedAt: !1740)
!1925 = !DILocation(line: 226, scope: !1920, inlinedAt: !1740)
!1926 = !DILocation(line: 228, scope: !1910, inlinedAt: !1740)
!1927 = !DILocation(line: 229, scope: !1910, inlinedAt: !1740)
!1928 = !DILocation(line: 230, scope: !1910, inlinedAt: !1740)
!1929 = !DILocation(line: 231, scope: !1930, inlinedAt: !1740)
!1930 = distinct !DILexicalBlock(scope: !1910, file: !41, line: 231, column: 3)
!1931 = !DILocalVariable(name: "tmp", scope: !1932, file: !2, line: 233, type: !3, align: 4)
!1932 = distinct !DILexicalBlock(scope: !1930, file: !41, line: 232, column: 3)
!1933 = !DILocation(line: 233, scope: !1932, inlinedAt: !1740)
!1934 = !DILocation(line: 234, scope: !1932, inlinedAt: !1740)
!1935 = !DILocation(line: 235, scope: !1932, inlinedAt: !1740)
!1936 = !DILocation(line: 236, scope: !1932, inlinedAt: !1740)
!1937 = !DILocation(line: 238, scope: !1938, inlinedAt: !1740)
!1938 = distinct !DILexicalBlock(scope: !1932, file: !41, line: 237, column: 4)
!1939 = !DILocation(line: 239, scope: !1938, inlinedAt: !1740)
!1940 = !DILocation(line: 240, scope: !1938, inlinedAt: !1740)
!1941 = !DILocation(line: 243, scope: !1910, inlinedAt: !1740)
!1942 = !DILocation(line: 245, scope: !1943, inlinedAt: !1740)
!1943 = distinct !DILexicalBlock(scope: !1910, file: !41, line: 244, column: 3)
!1944 = !DILocation(line: 247, scope: !1945, inlinedAt: !1740)
!1945 = distinct !DILexicalBlock(scope: !1943, file: !41, line: 246, column: 4)
!1946 = !DILocation(line: 248, scope: !1945, inlinedAt: !1740)
!1947 = !DILocation(line: 252, scope: !1948, inlinedAt: !1740)
!1948 = distinct !DILexicalBlock(scope: !1943, file: !41, line: 251, column: 4)
!1949 = !DILocalVariable(name: "y", scope: !1739, file: !2, line: 258, type: !1580, align: 8)
!1950 = !DILocation(line: 258, scope: !1739, inlinedAt: !1740)
!1951 = !DILocalVariable(name: "i", scope: !1739, file: !2, line: 259, type: !18, align: 4)
!1952 = !DILocation(line: 259, scope: !1739, inlinedAt: !1740)
!1953 = !DILocation(line: 260, scope: !1954, inlinedAt: !1740)
!1954 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 260, column: 2)
!1955 = !DILocation(line: 262, scope: !1956, inlinedAt: !1740)
!1956 = distinct !DILexicalBlock(scope: !1954, file: !41, line: 261, column: 2)
!1957 = !DILocation(line: 263, scope: !1956, inlinedAt: !1740)
!1958 = !DILocation(line: 266, scope: !1739, inlinedAt: !1740)
!1959 = !DILocalVariable(name: "denormal", scope: !1739, file: !2, line: 268, type: !105, align: 1)
!1960 = !DILocation(line: 268, scope: !1739, inlinedAt: !1740)
!1961 = !DILocalVariable(name: "bits", scope: !1739, file: !2, line: 270, type: !3, align: 4)
!1962 = !DILocation(line: 270, scope: !1739, inlinedAt: !1740)
!1963 = !DILocation(line: 271, scope: !1739, inlinedAt: !1740)
!1964 = !DILocation(line: 273, scope: !1965, inlinedAt: !1740)
!1965 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 272, column: 2)
!1966 = !DILocation(line: 274, scope: !1965, inlinedAt: !1740)
!1967 = !DILocation(line: 275, scope: !1965, inlinedAt: !1740)
!1968 = !DILocalVariable(name: "bias", scope: !1739, file: !2, line: 279, type: !1580, align: 8)
!1969 = !DILocation(line: 279, scope: !1739, inlinedAt: !1740)
!1970 = !DILocalVariable(name: "frac", scope: !1739, file: !2, line: 280, type: !1580, align: 8)
!1971 = !DILocation(line: 280, scope: !1739, inlinedAt: !1740)
!1972 = !DILocation(line: 281, scope: !1739, inlinedAt: !1740)
!1973 = !DILocation(line: 283, scope: !1974, inlinedAt: !1740)
!1974 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 282, column: 2)
!1975 = !DILocation(line: 1046, scope: !1976, inlinedAt: !1973)
!1976 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1977 = !DILocation(line: 41, scope: !1978, inlinedAt: !1979)
!1978 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !1724, file: !1724, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1979 = !DILocation(line: 310, scope: !1980, inlinedAt: !1973)
!1980 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !1721, file: !1721, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1981 = !DILocation(line: 284, scope: !1974, inlinedAt: !1740)
!1982 = !DILocation(line: 1046, scope: !1983, inlinedAt: !1981)
!1983 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1984 = !DILocation(line: 285, scope: !1974, inlinedAt: !1740)
!1985 = !DILocation(line: 286, scope: !1974, inlinedAt: !1740)
!1986 = !DILocation(line: 290, scope: !1739, inlinedAt: !1740)
!1987 = !DILocalVariable(name: "t", scope: !1988, file: !2, line: 292, type: !3, align: 4)
!1988 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 291, column: 2)
!1989 = !DILocation(line: 292, scope: !1988, inlinedAt: !1740)
!1990 = !DILocation(line: 295, scope: !1991, inlinedAt: !1740)
!1991 = distinct !DILexicalBlock(scope: !1988, file: !41, line: 293, column: 3)
!1992 = !DILocation(line: 296, scope: !1993, inlinedAt: !1740)
!1993 = distinct !DILexicalBlock(scope: !1991, file: !41, line: 296, column: 5)
!1994 = !DILocation(line: 297, scope: !1991, inlinedAt: !1740)
!1995 = !DILocation(line: 298, scope: !1996, inlinedAt: !1740)
!1996 = distinct !DILexicalBlock(scope: !1991, file: !41, line: 298, column: 5)
!1997 = !DILocation(line: 299, scope: !1991, inlinedAt: !1740)
!1998 = !DILocation(line: 300, scope: !1999, inlinedAt: !1740)
!1999 = distinct !DILexicalBlock(scope: !1991, file: !41, line: 300, column: 5)
!2000 = !DILocation(line: 302, scope: !2001, inlinedAt: !1740)
!2001 = distinct !DILexicalBlock(scope: !1999, file: !41, line: 301, column: 5)
!2002 = !DILocation(line: 306, scope: !2003, inlinedAt: !1740)
!2003 = distinct !DILexicalBlock(scope: !1999, file: !41, line: 305, column: 5)
!2004 = !DILocation(line: 309, scope: !1988, inlinedAt: !1740)
!2005 = !DILocation(line: 312, scope: !1739, inlinedAt: !1740)
!2006 = !DILocation(line: 313, scope: !1739, inlinedAt: !1740)
!2007 = !DILocation(line: 315, scope: !1739, inlinedAt: !1740)
!2008 = !DILocation(line: 132, scope: !2009, inlinedAt: !2010)
!2009 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !1721, file: !1721, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2010 = !DILocation(line: 317, scope: !2011, inlinedAt: !1740)
!2011 = distinct !DILexicalBlock(scope: !1739, file: !41, line: 316, column: 2)
!2012 = !DILocation(line: 319, scope: !2013, inlinedAt: !1740)
!2013 = distinct !DILexicalBlock(scope: !2011, file: !41, line: 318, column: 3)
!2014 = !DILocation(line: 320, scope: !2013, inlinedAt: !1740)
!2015 = !DILocation(line: 321, scope: !2013, inlinedAt: !1740)
!2016 = !DILocation(line: 323, scope: !2011, inlinedAt: !1740)
!2017 = !DILocation(line: 1046, scope: !2018, inlinedAt: !2019)
!2018 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2019 = !DILocation(line: 325, scope: !1739, inlinedAt: !1740)
!2020 = distinct !DISubprogram(name: "to_float", linkageName: "std.core.String.to_float", scope: !2, file: !2, line: 772, type: !2021, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2021 = !DISubroutineType(types: !2022)
!2022 = !{!237, !2023, !59}
!2023 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !2024, size: 64, align: 64, dwarfAddressSpace: 0)
!2024 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!2025 = !DILocalVariable(name: "s", arg: 1, scope: !2020, file: !2, line: 772, type: !59)
!2026 = !DILocation(line: 772, scope: !2020)
!2027 = !DILocalVariable(name: "sign", scope: !2028, file: !2, line: 454, type: !18, align: 4)
!2028 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2029 = !DILocation(line: 454, scope: !2028, inlinedAt: !2026)
!2030 = !DILocation(line: 468, scope: !2028, inlinedAt: !2026)
!2031 = !DILocation(line: 468, scope: !2032, inlinedAt: !2026)
!2032 = distinct !DILexicalBlock(scope: !2028, file: !41, line: 468, column: 2)
!2033 = !DILocation(line: 469, scope: !2028, inlinedAt: !2026)
!2034 = !DILocation(line: 470, scope: !2035, inlinedAt: !2026)
!2035 = distinct !DILexicalBlock(scope: !2028, file: !41, line: 470, column: 2)
!2036 = !DILocation(line: 473, scope: !2037, inlinedAt: !2026)
!2037 = distinct !DILexicalBlock(scope: !2035, file: !41, line: 473, column: 4)
!2038 = !DILocation(line: 474, scope: !2037, inlinedAt: !2026)
!2039 = !DILocation(line: 476, scope: !2040, inlinedAt: !2026)
!2040 = distinct !DILexicalBlock(scope: !2035, file: !41, line: 476, column: 4)
!2041 = !DILocation(line: 478, scope: !2028, inlinedAt: !2026)
!2042 = !DILocation(line: 479, scope: !2028, inlinedAt: !2026)
!2043 = !DILocation(line: 481, scope: !2028, inlinedAt: !2026)
!2044 = !DILocation(line: 483, scope: !2045, inlinedAt: !2026)
!2045 = distinct !DILexicalBlock(scope: !2028, file: !41, line: 482, column: 2)
!2046 = !DILocalVariable(name: "scale", scope: !2047, file: !2, line: 330, type: !1580, align: 8)
!2047 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2048 = !DILocation(line: 330, scope: !2047, inlinedAt: !2044)
!2049 = !DILocalVariable(name: "x", scope: !2047, file: !2, line: 331, type: !3, align: 4)
!2050 = !DILocation(line: 331, scope: !2047, inlinedAt: !2044)
!2051 = !DILocalVariable(name: "rp", scope: !2047, file: !2, line: 332, type: !238, align: 8)
!2052 = !DILocation(line: 332, scope: !2047, inlinedAt: !2044)
!2053 = !DILocalVariable(name: "dc", scope: !2047, file: !2, line: 333, type: !238, align: 8)
!2054 = !DILocation(line: 333, scope: !2047, inlinedAt: !2044)
!2055 = !DILocalVariable(name: "c", scope: !2047, file: !2, line: 334, type: !64, align: 1)
!2056 = !DILocation(line: 334, scope: !2047, inlinedAt: !2044)
!2057 = !DILocalVariable(name: "got_rad", scope: !2047, file: !2, line: 335, type: !105, align: 1)
!2058 = !DILocation(line: 335, scope: !2047, inlinedAt: !2044)
!2059 = !DILocalVariable(name: "got_digit", scope: !2047, file: !2, line: 336, type: !105, align: 1)
!2060 = !DILocation(line: 336, scope: !2047, inlinedAt: !2044)
!2061 = !DILocalVariable(name: "got_tail", scope: !2047, file: !2, line: 337, type: !105, align: 1)
!2062 = !DILocation(line: 337, scope: !2047, inlinedAt: !2044)
!2063 = !DILocalVariable(name: "len", scope: !2047, file: !2, line: 338, type: !66, align: 8)
!2064 = !DILocation(line: 338, scope: !2047, inlinedAt: !2044)
!2065 = !DILocalVariable(name: "last_char", scope: !2047, file: !2, line: 339, type: !66, align: 8)
!2066 = !DILocation(line: 339, scope: !2047, inlinedAt: !2044)
!2067 = !DILocalVariable(name: "index", scope: !2047, file: !2, line: 340, type: !66, align: 8)
!2068 = !DILocation(line: 340, scope: !2047, inlinedAt: !2044)
!2069 = !DILocalVariable(name: "y", scope: !2047, file: !2, line: 341, type: !1580, align: 8)
!2070 = !DILocation(line: 341, scope: !2047, inlinedAt: !2044)
!2071 = !DILocation(line: 344, scope: !2047, inlinedAt: !2044)
!2072 = !DILocation(line: 344, scope: !2073, inlinedAt: !2044)
!2073 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 344, column: 2)
!2074 = !DILocation(line: 346, scope: !2075, inlinedAt: !2044)
!2075 = distinct !DILexicalBlock(scope: !2073, file: !41, line: 345, column: 2)
!2076 = !DILocation(line: 347, scope: !2075, inlinedAt: !2044)
!2077 = !DILocation(line: 349, scope: !2047, inlinedAt: !2044)
!2078 = !DILocation(line: 351, scope: !2079, inlinedAt: !2044)
!2079 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 350, column: 2)
!2080 = !DILocation(line: 352, scope: !2079, inlinedAt: !2044)
!2081 = !DILocation(line: 354, scope: !2082, inlinedAt: !2044)
!2082 = distinct !DILexicalBlock(scope: !2079, file: !41, line: 353, column: 3)
!2083 = !DILocation(line: 355, scope: !2082, inlinedAt: !2044)
!2084 = !DILocation(line: 357, scope: !2079, inlinedAt: !2044)
!2085 = !DILocation(line: 359, scope: !2086, inlinedAt: !2044)
!2086 = distinct !DILexicalBlock(scope: !2079, file: !41, line: 358, column: 3)
!2087 = !DILocation(line: 360, scope: !2086, inlinedAt: !2044)
!2088 = !DILocation(line: 361, scope: !2086, inlinedAt: !2044)
!2089 = !DILocation(line: 361, scope: !2090, inlinedAt: !2044)
!2090 = distinct !DILexicalBlock(scope: !2086, file: !41, line: 361, column: 4)
!2091 = !DILocation(line: 363, scope: !2092, inlinedAt: !2044)
!2092 = distinct !DILexicalBlock(scope: !2090, file: !41, line: 362, column: 4)
!2093 = !DILocation(line: 368, scope: !2047, inlinedAt: !2044)
!2094 = !DILocation(line: 368, scope: !2095, inlinedAt: !2044)
!2095 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 368, column: 2)
!2096 = !DILocation(line: 370, scope: !2097, inlinedAt: !2044)
!2097 = distinct !DILexicalBlock(scope: !2095, file: !41, line: 369, column: 2)
!2098 = !DILocation(line: 372, scope: !2099, inlinedAt: !2044)
!2099 = distinct !DILexicalBlock(scope: !2097, file: !41, line: 371, column: 3)
!2100 = !DILocation(line: 373, scope: !2099, inlinedAt: !2044)
!2101 = !DILocation(line: 374, scope: !2099, inlinedAt: !2044)
!2102 = !DILocation(line: 378, scope: !2103, inlinedAt: !2044)
!2103 = distinct !DILexicalBlock(scope: !2097, file: !41, line: 377, column: 3)
!2104 = !DILocalVariable(name: "d", scope: !2103, file: !2, line: 379, type: !18, align: 4)
!2105 = !DILocation(line: 379, scope: !2103, inlinedAt: !2044)
!2106 = !DILocation(line: 380, scope: !2107, inlinedAt: !2044)
!2107 = distinct !DILexicalBlock(scope: !2103, file: !41, line: 380, column: 5)
!2108 = !DILocation(line: 381, scope: !2107, inlinedAt: !2044)
!2109 = !DILocation(line: 385, scope: !2110, inlinedAt: !2044)
!2110 = distinct !DILexicalBlock(scope: !2103, file: !41, line: 383, column: 4)
!2111 = !DILocation(line: 386, scope: !2112, inlinedAt: !2044)
!2112 = distinct !DILexicalBlock(scope: !2110, file: !41, line: 386, column: 6)
!2113 = !DILocation(line: 387, scope: !2110, inlinedAt: !2044)
!2114 = !DILocation(line: 388, scope: !2115, inlinedAt: !2044)
!2115 = distinct !DILexicalBlock(scope: !2110, file: !41, line: 388, column: 6)
!2116 = !DILocation(line: 389, scope: !2115, inlinedAt: !2044)
!2117 = !DILocation(line: 390, scope: !2110, inlinedAt: !2044)
!2118 = !DILocation(line: 391, scope: !2119, inlinedAt: !2044)
!2119 = distinct !DILexicalBlock(scope: !2110, file: !41, line: 391, column: 6)
!2120 = !DILocation(line: 392, scope: !2119, inlinedAt: !2044)
!2121 = !DILocation(line: 394, scope: !2103, inlinedAt: !2044)
!2122 = !DILocation(line: 396, scope: !2097, inlinedAt: !2044)
!2123 = !DILocation(line: 397, scope: !2097, inlinedAt: !2044)
!2124 = !DILocation(line: 399, scope: !2047, inlinedAt: !2044)
!2125 = !DILocation(line: 400, scope: !2047, inlinedAt: !2044)
!2126 = !DILocation(line: 401, scope: !2047, inlinedAt: !2044)
!2127 = !DILocation(line: 401, scope: !2128, inlinedAt: !2044)
!2128 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 401, column: 2)
!2129 = !DILocalVariable(name: "e2", scope: !2047, file: !2, line: 403, type: !238, align: 8)
!2130 = !DILocation(line: 403, scope: !2047, inlinedAt: !2044)
!2131 = !DILocation(line: 404, scope: !2047, inlinedAt: !2044)
!2132 = !DILocalVariable(name: "e2val", scope: !2133, file: !2, line: 406, type: !238, align: 8)
!2133 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 405, column: 2)
!2134 = !DILocation(line: 406, scope: !2133, inlinedAt: !2044)
!2135 = !DILocation(line: 407, scope: !2133, inlinedAt: !2044)
!2136 = !DILocation(line: 409, scope: !2047, inlinedAt: !2044)
!2137 = !DILocation(line: 410, scope: !2047, inlinedAt: !2044)
!2138 = !DILocation(line: 411, scope: !2047, inlinedAt: !2044)
!2139 = !DILocation(line: 412, scope: !2047, inlinedAt: !2044)
!2140 = !DILocation(line: 414, scope: !2047, inlinedAt: !2044)
!2141 = !DILocation(line: 414, scope: !2142, inlinedAt: !2044)
!2142 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 414, column: 2)
!2143 = !DILocation(line: 416, scope: !2144, inlinedAt: !2044)
!2144 = distinct !DILexicalBlock(scope: !2142, file: !41, line: 415, column: 2)
!2145 = !DILocation(line: 418, scope: !2146, inlinedAt: !2044)
!2146 = distinct !DILexicalBlock(scope: !2144, file: !41, line: 417, column: 3)
!2147 = !DILocation(line: 419, scope: !2146, inlinedAt: !2044)
!2148 = !DILocation(line: 423, scope: !2149, inlinedAt: !2044)
!2149 = distinct !DILexicalBlock(scope: !2144, file: !41, line: 422, column: 3)
!2150 = !DILocation(line: 424, scope: !2149, inlinedAt: !2044)
!2151 = !DILocation(line: 426, scope: !2144, inlinedAt: !2044)
!2152 = !DILocalVariable(name: "bits", scope: !2047, file: !2, line: 428, type: !18, align: 4)
!2153 = !DILocation(line: 428, scope: !2047, inlinedAt: !2044)
!2154 = !DILocation(line: 429, scope: !2047, inlinedAt: !2044)
!2155 = !DILocation(line: 431, scope: !2156, inlinedAt: !2044)
!2156 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 430, column: 2)
!2157 = !DILocation(line: 432, scope: !2156, inlinedAt: !2044)
!2158 = !DILocalVariable(name: "bias", scope: !2047, file: !2, line: 434, type: !1580, align: 8)
!2159 = !DILocation(line: 434, scope: !2047, inlinedAt: !2044)
!2160 = !DILocation(line: 435, scope: !2047, inlinedAt: !2044)
!2161 = !DILocation(line: 437, scope: !2162, inlinedAt: !2044)
!2162 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 436, column: 2)
!2163 = !DILocation(line: 1046, scope: !2164, inlinedAt: !2161)
!2164 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2165 = !DILocation(line: 41, scope: !2166, inlinedAt: !2167)
!2166 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !1724, file: !1724, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2167 = !DILocation(line: 310, scope: !2168, inlinedAt: !2161)
!2168 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !1721, file: !1721, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2169 = !DILocation(line: 440, scope: !2047, inlinedAt: !2044)
!2170 = !DILocation(line: 442, scope: !2171, inlinedAt: !2044)
!2171 = distinct !DILexicalBlock(scope: !2047, file: !41, line: 441, column: 2)
!2172 = !DILocation(line: 443, scope: !2171, inlinedAt: !2044)
!2173 = !DILocation(line: 445, scope: !2047, inlinedAt: !2044)
!2174 = !DILocation(line: 446, scope: !2047, inlinedAt: !2044)
!2175 = !DILocation(line: 447, scope: !2047, inlinedAt: !2044)
!2176 = !DILocation(line: 449, scope: !2047, inlinedAt: !2044)
!2177 = !DILocation(line: 1046, scope: !2178, inlinedAt: !2176)
!2178 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2179 = !DILocation(line: 35, scope: !2180, inlinedAt: !2182)
!2180 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 38, column: 1)
!2181 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2182 = !DILocation(line: 485, scope: !2028, inlinedAt: !2026)
!2183 = !DILocalVariable(name: "x", scope: !2181, file: !2, line: 39, type: !1742, align: 16)
!2184 = !DILocation(line: 39, scope: !2181, inlinedAt: !2182)
!2185 = !DILocalVariable(name: "emax", scope: !2181, file: !2, line: 41, type: !18, align: 4)
!2186 = !DILocation(line: 41, scope: !2181, inlinedAt: !2182)
!2187 = !DILocalVariable(name: "index", scope: !2181, file: !2, line: 44, type: !66, align: 8)
!2188 = !DILocation(line: 44, scope: !2181, inlinedAt: !2182)
!2189 = !DILocalVariable(name: "got_digit", scope: !2181, file: !2, line: 45, type: !105, align: 1)
!2190 = !DILocation(line: 45, scope: !2181, inlinedAt: !2182)
!2191 = !DILocalVariable(name: "got_rad", scope: !2181, file: !2, line: 46, type: !105, align: 1)
!2192 = !DILocation(line: 46, scope: !2181, inlinedAt: !2182)
!2193 = !DILocalVariable(name: "lrp", scope: !2181, file: !2, line: 47, type: !238, align: 8)
!2194 = !DILocation(line: 47, scope: !2181, inlinedAt: !2182)
!2195 = !DILocalVariable(name: "dc", scope: !2181, file: !2, line: 47, type: !238, align: 8)
!2196 = !DILocalVariable(name: "k", scope: !2181, file: !2, line: 48, type: !18, align: 4)
!2197 = !DILocation(line: 48, scope: !2181, inlinedAt: !2182)
!2198 = !DILocalVariable(name: "j", scope: !2181, file: !2, line: 48, type: !18, align: 4)
!2199 = !DILocalVariable(name: "lnz", scope: !2181, file: !2, line: 48, type: !18, align: 4)
!2200 = !DILocalVariable(name: "len", scope: !2181, file: !2, line: 49, type: !66, align: 8)
!2201 = !DILocation(line: 49, scope: !2181, inlinedAt: !2182)
!2202 = !DILocalVariable(name: "last_char", scope: !2181, file: !2, line: 50, type: !66, align: 8)
!2203 = !DILocation(line: 50, scope: !2181, inlinedAt: !2182)
!2204 = !DILocation(line: 52, scope: !2181, inlinedAt: !2182)
!2205 = !DILocalVariable(name: "c", scope: !2181, file: !2, line: 54, type: !64, align: 1)
!2206 = !DILocation(line: 54, scope: !2181, inlinedAt: !2182)
!2207 = !DILocation(line: 56, scope: !2181, inlinedAt: !2182)
!2208 = !DILocation(line: 56, scope: !2209, inlinedAt: !2182)
!2209 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 56, column: 2)
!2210 = !DILocation(line: 58, scope: !2211, inlinedAt: !2182)
!2211 = distinct !DILexicalBlock(scope: !2209, file: !41, line: 57, column: 2)
!2212 = !DILocation(line: 59, scope: !2211, inlinedAt: !2182)
!2213 = !DILocation(line: 62, scope: !2181, inlinedAt: !2182)
!2214 = !DILocation(line: 64, scope: !2215, inlinedAt: !2182)
!2215 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 63, column: 2)
!2216 = !DILocation(line: 65, scope: !2215, inlinedAt: !2182)
!2217 = !DILocation(line: 67, scope: !2218, inlinedAt: !2182)
!2218 = distinct !DILexicalBlock(scope: !2215, file: !41, line: 66, column: 3)
!2219 = !DILocation(line: 68, scope: !2218, inlinedAt: !2182)
!2220 = !DILocation(line: 70, scope: !2215, inlinedAt: !2182)
!2221 = !DILocation(line: 72, scope: !2222, inlinedAt: !2182)
!2222 = distinct !DILexicalBlock(scope: !2215, file: !41, line: 71, column: 3)
!2223 = !DILocation(line: 73, scope: !2222, inlinedAt: !2182)
!2224 = !DILocation(line: 74, scope: !2222, inlinedAt: !2182)
!2225 = !DILocation(line: 74, scope: !2226, inlinedAt: !2182)
!2226 = distinct !DILexicalBlock(scope: !2222, file: !41, line: 74, column: 4)
!2227 = !DILocation(line: 76, scope: !2228, inlinedAt: !2182)
!2228 = distinct !DILexicalBlock(scope: !2226, file: !41, line: 75, column: 4)
!2229 = !DILocation(line: 81, scope: !2181, inlinedAt: !2182)
!2230 = !DILocation(line: 81, scope: !2231, inlinedAt: !2182)
!2231 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 81, column: 2)
!2232 = !DILocation(line: 85, scope: !2233, inlinedAt: !2182)
!2233 = distinct !DILexicalBlock(scope: !2234, file: !41, line: 83, column: 3)
!2234 = distinct !DILexicalBlock(scope: !2231, file: !41, line: 82, column: 2)
!2235 = !DILocation(line: 86, scope: !2236, inlinedAt: !2182)
!2236 = distinct !DILexicalBlock(scope: !2233, file: !41, line: 86, column: 5)
!2237 = !DILocation(line: 87, scope: !2236, inlinedAt: !2182)
!2238 = !DILocation(line: 88, scope: !2236, inlinedAt: !2182)
!2239 = !DILocation(line: 89, scope: !2233, inlinedAt: !2182)
!2240 = !DILocation(line: 90, scope: !2241, inlinedAt: !2182)
!2241 = distinct !DILexicalBlock(scope: !2233, file: !41, line: 90, column: 5)
!2242 = !DILocation(line: 91, scope: !2241, inlinedAt: !2182)
!2243 = !DILocation(line: 92, scope: !2241, inlinedAt: !2182)
!2244 = !DILocation(line: 94, scope: !2245, inlinedAt: !2182)
!2245 = distinct !DILexicalBlock(scope: !2241, file: !41, line: 93, column: 5)
!2246 = !DILocation(line: 98, scope: !2247, inlinedAt: !2182)
!2247 = distinct !DILexicalBlock(scope: !2241, file: !41, line: 97, column: 5)
!2248 = !DILocation(line: 100, scope: !2241, inlinedAt: !2182)
!2249 = !DILocation(line: 102, scope: !2250, inlinedAt: !2182)
!2250 = distinct !DILexicalBlock(scope: !2241, file: !41, line: 101, column: 5)
!2251 = !DILocation(line: 103, scope: !2250, inlinedAt: !2182)
!2252 = !DILocation(line: 105, scope: !2241, inlinedAt: !2182)
!2253 = !DILocation(line: 107, scope: !2254, inlinedAt: !2182)
!2254 = distinct !DILexicalBlock(scope: !2233, file: !41, line: 107, column: 5)
!2255 = !DILocation(line: 108, scope: !2254, inlinedAt: !2182)
!2256 = !DILocation(line: 111, scope: !2234, inlinedAt: !2182)
!2257 = !DILocation(line: 112, scope: !2234, inlinedAt: !2182)
!2258 = !DILocation(line: 113, scope: !2234, inlinedAt: !2182)
!2259 = !DILocation(line: 115, scope: !2181, inlinedAt: !2182)
!2260 = !DILocation(line: 116, scope: !2181, inlinedAt: !2182)
!2261 = !DILocation(line: 117, scope: !2181, inlinedAt: !2182)
!2262 = !DILocation(line: 119, scope: !2263, inlinedAt: !2182)
!2263 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 118, column: 2)
!2264 = !DILocalVariable(name: "e10", scope: !2263, file: !2, line: 120, type: !238, align: 8)
!2265 = !DILocation(line: 120, scope: !2263, inlinedAt: !2182)
!2266 = !DILocation(line: 121, scope: !2263, inlinedAt: !2182)
!2267 = !DILocation(line: 123, scope: !2181, inlinedAt: !2182)
!2268 = !DILocation(line: 125, scope: !2269, inlinedAt: !2182)
!2269 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 124, column: 2)
!2270 = !DILocation(line: 128, scope: !2181, inlinedAt: !2182)
!2271 = !DILocation(line: 131, scope: !2181, inlinedAt: !2182)
!2272 = !DILocation(line: 132, scope: !2181, inlinedAt: !2182)
!2273 = !DILocation(line: 133, scope: !2181, inlinedAt: !2182)
!2274 = !DILocation(line: 136, scope: !2181, inlinedAt: !2182)
!2275 = !DILocation(line: 138, scope: !2276, inlinedAt: !2182)
!2276 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 137, column: 2)
!2277 = !DILocation(line: 138, scope: !2278, inlinedAt: !2182)
!2278 = distinct !DILexicalBlock(scope: !2276, file: !41, line: 138, column: 3)
!2279 = !DILocation(line: 139, scope: !2276, inlinedAt: !2182)
!2280 = !DILocation(line: 140, scope: !2276, inlinedAt: !2182)
!2281 = !DILocalVariable(name: "a", scope: !2181, file: !2, line: 143, type: !18, align: 4)
!2282 = !DILocation(line: 143, scope: !2181, inlinedAt: !2182)
!2283 = !DILocalVariable(name: "z", scope: !2181, file: !2, line: 144, type: !18, align: 4)
!2284 = !DILocation(line: 144, scope: !2181, inlinedAt: !2182)
!2285 = !DILocalVariable(name: "e2", scope: !2181, file: !2, line: 145, type: !18, align: 4)
!2286 = !DILocation(line: 145, scope: !2181, inlinedAt: !2182)
!2287 = !DILocalVariable(name: "rp", scope: !2181, file: !2, line: 146, type: !238, align: 8)
!2288 = !DILocation(line: 146, scope: !2181, inlinedAt: !2182)
!2289 = !DILocation(line: 149, scope: !2181, inlinedAt: !2182)
!2290 = !DILocation(line: 151, scope: !2291, inlinedAt: !2182)
!2291 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 150, column: 2)
!2292 = !DILocation(line: 152, scope: !2291, inlinedAt: !2182)
!2293 = !DILocalVariable(name: "bitlim", scope: !2291, file: !2, line: 153, type: !18, align: 4)
!2294 = !DILocation(line: 153, scope: !2291, inlinedAt: !2182)
!2295 = !DILocation(line: 154, scope: !2291, inlinedAt: !2182)
!2296 = !DILocation(line: 158, scope: !2181, inlinedAt: !2182)
!2297 = !DILocalVariable(name: "rpm9", scope: !2298, file: !2, line: 160, type: !238, align: 8)
!2298 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 159, column: 2)
!2299 = !DILocation(line: 160, scope: !2298, inlinedAt: !2182)
!2300 = !DILocalVariable(name: "p10", scope: !2298, file: !2, line: 161, type: !18, align: 4)
!2301 = !DILocation(line: 161, scope: !2298, inlinedAt: !2182)
!2302 = !DILocalVariable(name: "carry", scope: !2298, file: !2, line: 162, type: !3, align: 4)
!2303 = !DILocation(line: 162, scope: !2298, inlinedAt: !2182)
!2304 = !DILocation(line: 163, scope: !2305, inlinedAt: !2182)
!2305 = distinct !DILexicalBlock(scope: !2298, file: !41, line: 163, column: 3)
!2306 = !DILocalVariable(name: "tmp", scope: !2307, file: !2, line: 165, type: !3, align: 4)
!2307 = distinct !DILexicalBlock(scope: !2305, file: !41, line: 164, column: 3)
!2308 = !DILocation(line: 165, scope: !2307, inlinedAt: !2182)
!2309 = !DILocation(line: 166, scope: !2307, inlinedAt: !2182)
!2310 = !DILocation(line: 167, scope: !2307, inlinedAt: !2182)
!2311 = !DILocation(line: 168, scope: !2307, inlinedAt: !2182)
!2312 = !DILocation(line: 170, scope: !2313, inlinedAt: !2182)
!2313 = distinct !DILexicalBlock(scope: !2307, file: !41, line: 169, column: 4)
!2314 = !DILocation(line: 171, scope: !2313, inlinedAt: !2182)
!2315 = !DILocation(line: 174, scope: !2298, inlinedAt: !2182)
!2316 = !DILocation(line: 175, scope: !2298, inlinedAt: !2182)
!2317 = !DILocation(line: 179, scope: !2181, inlinedAt: !2182)
!2318 = !DILocation(line: 179, scope: !2319, inlinedAt: !2182)
!2319 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 179, column: 2)
!2320 = !DILocalVariable(name: "carry", scope: !2321, file: !2, line: 181, type: !3, align: 4)
!2321 = distinct !DILexicalBlock(scope: !2319, file: !41, line: 180, column: 2)
!2322 = !DILocation(line: 181, scope: !2321, inlinedAt: !2182)
!2323 = !DILocation(line: 182, scope: !2321, inlinedAt: !2182)
!2324 = !DILocation(line: 183, scope: !2325, inlinedAt: !2182)
!2325 = distinct !DILexicalBlock(scope: !2321, file: !41, line: 183, column: 3)
!2326 = !DILocalVariable(name: "tmp", scope: !2327, file: !2, line: 185, type: !67, align: 8)
!2327 = distinct !DILexicalBlock(scope: !2325, file: !41, line: 184, column: 3)
!2328 = !DILocation(line: 185, scope: !2327, inlinedAt: !2182)
!2329 = !DILocation(line: 186, scope: !2327, inlinedAt: !2182)
!2330 = !DILocation(line: 188, scope: !2331, inlinedAt: !2182)
!2331 = distinct !DILexicalBlock(scope: !2327, file: !41, line: 187, column: 4)
!2332 = !DILocation(line: 189, scope: !2331, inlinedAt: !2182)
!2333 = !DILocation(line: 193, scope: !2334, inlinedAt: !2182)
!2334 = distinct !DILexicalBlock(scope: !2327, file: !41, line: 192, column: 4)
!2335 = !DILocation(line: 194, scope: !2334, inlinedAt: !2182)
!2336 = !DILocation(line: 196, scope: !2327, inlinedAt: !2182)
!2337 = !DILocation(line: 197, scope: !2327, inlinedAt: !2182)
!2338 = !DILocation(line: 199, scope: !2321, inlinedAt: !2182)
!2339 = !DILocation(line: 201, scope: !2340, inlinedAt: !2182)
!2340 = distinct !DILexicalBlock(scope: !2321, file: !41, line: 200, column: 3)
!2341 = !DILocation(line: 202, scope: !2340, inlinedAt: !2182)
!2342 = !DILocation(line: 203, scope: !2340, inlinedAt: !2182)
!2343 = !DILocation(line: 205, scope: !2344, inlinedAt: !2182)
!2344 = distinct !DILexicalBlock(scope: !2340, file: !41, line: 204, column: 4)
!2345 = !DILocation(line: 206, scope: !2344, inlinedAt: !2182)
!2346 = !DILocation(line: 208, scope: !2340, inlinedAt: !2182)
!2347 = !DILocation(line: 213, scope: !2181, inlinedAt: !2182)
!2348 = !DILocalVariable(name: "carry", scope: !2349, file: !2, line: 215, type: !3, align: 4)
!2349 = distinct !DILexicalBlock(scope: !2350, file: !41, line: 214, column: 2)
!2350 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 213, column: 2)
!2351 = !DILocation(line: 215, scope: !2349, inlinedAt: !2182)
!2352 = !DILocalVariable(name: "sh", scope: !2349, file: !2, line: 216, type: !18, align: 4)
!2353 = !DILocation(line: 216, scope: !2349, inlinedAt: !2182)
!2354 = !DILocalVariable(name: "i", scope: !2349, file: !2, line: 217, type: !18, align: 4)
!2355 = !DILocation(line: 217, scope: !2349, inlinedAt: !2182)
!2356 = !DILocation(line: 218, scope: !2357, inlinedAt: !2182)
!2357 = distinct !DILexicalBlock(scope: !2349, file: !41, line: 218, column: 3)
!2358 = !DILocation(line: 220, scope: !2359, inlinedAt: !2182)
!2359 = distinct !DILexicalBlock(scope: !2357, file: !41, line: 219, column: 3)
!2360 = !DILocation(line: 221, scope: !2359, inlinedAt: !2182)
!2361 = !DILocation(line: 223, scope: !2362, inlinedAt: !2182)
!2362 = distinct !DILexicalBlock(scope: !2359, file: !41, line: 222, column: 4)
!2363 = !DILocation(line: 224, scope: !2362, inlinedAt: !2182)
!2364 = !DILocation(line: 226, scope: !2359, inlinedAt: !2182)
!2365 = !DILocation(line: 228, scope: !2349, inlinedAt: !2182)
!2366 = !DILocation(line: 229, scope: !2349, inlinedAt: !2182)
!2367 = !DILocation(line: 230, scope: !2349, inlinedAt: !2182)
!2368 = !DILocation(line: 231, scope: !2369, inlinedAt: !2182)
!2369 = distinct !DILexicalBlock(scope: !2349, file: !41, line: 231, column: 3)
!2370 = !DILocalVariable(name: "tmp", scope: !2371, file: !2, line: 233, type: !3, align: 4)
!2371 = distinct !DILexicalBlock(scope: !2369, file: !41, line: 232, column: 3)
!2372 = !DILocation(line: 233, scope: !2371, inlinedAt: !2182)
!2373 = !DILocation(line: 234, scope: !2371, inlinedAt: !2182)
!2374 = !DILocation(line: 235, scope: !2371, inlinedAt: !2182)
!2375 = !DILocation(line: 236, scope: !2371, inlinedAt: !2182)
!2376 = !DILocation(line: 238, scope: !2377, inlinedAt: !2182)
!2377 = distinct !DILexicalBlock(scope: !2371, file: !41, line: 237, column: 4)
!2378 = !DILocation(line: 239, scope: !2377, inlinedAt: !2182)
!2379 = !DILocation(line: 240, scope: !2377, inlinedAt: !2182)
!2380 = !DILocation(line: 243, scope: !2349, inlinedAt: !2182)
!2381 = !DILocation(line: 245, scope: !2382, inlinedAt: !2182)
!2382 = distinct !DILexicalBlock(scope: !2349, file: !41, line: 244, column: 3)
!2383 = !DILocation(line: 247, scope: !2384, inlinedAt: !2182)
!2384 = distinct !DILexicalBlock(scope: !2382, file: !41, line: 246, column: 4)
!2385 = !DILocation(line: 248, scope: !2384, inlinedAt: !2182)
!2386 = !DILocation(line: 252, scope: !2387, inlinedAt: !2182)
!2387 = distinct !DILexicalBlock(scope: !2382, file: !41, line: 251, column: 4)
!2388 = !DILocalVariable(name: "y", scope: !2181, file: !2, line: 258, type: !1580, align: 8)
!2389 = !DILocation(line: 258, scope: !2181, inlinedAt: !2182)
!2390 = !DILocalVariable(name: "i", scope: !2181, file: !2, line: 259, type: !18, align: 4)
!2391 = !DILocation(line: 259, scope: !2181, inlinedAt: !2182)
!2392 = !DILocation(line: 260, scope: !2393, inlinedAt: !2182)
!2393 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 260, column: 2)
!2394 = !DILocation(line: 262, scope: !2395, inlinedAt: !2182)
!2395 = distinct !DILexicalBlock(scope: !2393, file: !41, line: 261, column: 2)
!2396 = !DILocation(line: 263, scope: !2395, inlinedAt: !2182)
!2397 = !DILocation(line: 266, scope: !2181, inlinedAt: !2182)
!2398 = !DILocalVariable(name: "denormal", scope: !2181, file: !2, line: 268, type: !105, align: 1)
!2399 = !DILocation(line: 268, scope: !2181, inlinedAt: !2182)
!2400 = !DILocalVariable(name: "bits", scope: !2181, file: !2, line: 270, type: !3, align: 4)
!2401 = !DILocation(line: 270, scope: !2181, inlinedAt: !2182)
!2402 = !DILocation(line: 271, scope: !2181, inlinedAt: !2182)
!2403 = !DILocation(line: 273, scope: !2404, inlinedAt: !2182)
!2404 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 272, column: 2)
!2405 = !DILocation(line: 274, scope: !2404, inlinedAt: !2182)
!2406 = !DILocation(line: 275, scope: !2404, inlinedAt: !2182)
!2407 = !DILocalVariable(name: "bias", scope: !2181, file: !2, line: 279, type: !1580, align: 8)
!2408 = !DILocation(line: 279, scope: !2181, inlinedAt: !2182)
!2409 = !DILocalVariable(name: "frac", scope: !2181, file: !2, line: 280, type: !1580, align: 8)
!2410 = !DILocation(line: 280, scope: !2181, inlinedAt: !2182)
!2411 = !DILocation(line: 281, scope: !2181, inlinedAt: !2182)
!2412 = !DILocation(line: 283, scope: !2413, inlinedAt: !2182)
!2413 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 282, column: 2)
!2414 = !DILocation(line: 1046, scope: !2415, inlinedAt: !2412)
!2415 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2416 = !DILocation(line: 41, scope: !2417, inlinedAt: !2418)
!2417 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !1724, file: !1724, line: 29, scopeLine: 29, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2418 = !DILocation(line: 310, scope: !2419, inlinedAt: !2412)
!2419 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !1721, file: !1721, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2420 = !DILocation(line: 284, scope: !2413, inlinedAt: !2182)
!2421 = !DILocation(line: 1046, scope: !2422, inlinedAt: !2420)
!2422 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2423 = !DILocation(line: 285, scope: !2413, inlinedAt: !2182)
!2424 = !DILocation(line: 286, scope: !2413, inlinedAt: !2182)
!2425 = !DILocation(line: 290, scope: !2181, inlinedAt: !2182)
!2426 = !DILocalVariable(name: "t", scope: !2427, file: !2, line: 292, type: !3, align: 4)
!2427 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 291, column: 2)
!2428 = !DILocation(line: 292, scope: !2427, inlinedAt: !2182)
!2429 = !DILocation(line: 295, scope: !2430, inlinedAt: !2182)
!2430 = distinct !DILexicalBlock(scope: !2427, file: !41, line: 293, column: 3)
!2431 = !DILocation(line: 296, scope: !2432, inlinedAt: !2182)
!2432 = distinct !DILexicalBlock(scope: !2430, file: !41, line: 296, column: 5)
!2433 = !DILocation(line: 297, scope: !2430, inlinedAt: !2182)
!2434 = !DILocation(line: 298, scope: !2435, inlinedAt: !2182)
!2435 = distinct !DILexicalBlock(scope: !2430, file: !41, line: 298, column: 5)
!2436 = !DILocation(line: 299, scope: !2430, inlinedAt: !2182)
!2437 = !DILocation(line: 300, scope: !2438, inlinedAt: !2182)
!2438 = distinct !DILexicalBlock(scope: !2430, file: !41, line: 300, column: 5)
!2439 = !DILocation(line: 302, scope: !2440, inlinedAt: !2182)
!2440 = distinct !DILexicalBlock(scope: !2438, file: !41, line: 301, column: 5)
!2441 = !DILocation(line: 306, scope: !2442, inlinedAt: !2182)
!2442 = distinct !DILexicalBlock(scope: !2438, file: !41, line: 305, column: 5)
!2443 = !DILocation(line: 309, scope: !2427, inlinedAt: !2182)
!2444 = !DILocation(line: 312, scope: !2181, inlinedAt: !2182)
!2445 = !DILocation(line: 313, scope: !2181, inlinedAt: !2182)
!2446 = !DILocation(line: 315, scope: !2181, inlinedAt: !2182)
!2447 = !DILocation(line: 132, scope: !2448, inlinedAt: !2449)
!2448 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !1721, file: !1721, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2449 = !DILocation(line: 317, scope: !2450, inlinedAt: !2182)
!2450 = distinct !DILexicalBlock(scope: !2181, file: !41, line: 316, column: 2)
!2451 = !DILocation(line: 319, scope: !2452, inlinedAt: !2182)
!2452 = distinct !DILexicalBlock(scope: !2450, file: !41, line: 318, column: 3)
!2453 = !DILocation(line: 320, scope: !2452, inlinedAt: !2182)
!2454 = !DILocation(line: 321, scope: !2452, inlinedAt: !2182)
!2455 = !DILocation(line: 323, scope: !2450, inlinedAt: !2182)
!2456 = !DILocation(line: 1046, scope: !2457, inlinedAt: !2458)
!2457 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !1721, file: !1721, line: 1046, scopeLine: 1046, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2458 = !DILocation(line: 325, scope: !2181, inlinedAt: !2182)
!2459 = distinct !DISubprogram(name: "splitter", linkageName: "std.core.String.splitter", scope: !2, file: !2, line: 774, type: !2460, scopeLine: 774, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2460 = !DISubroutineType(types: !2461)
!2461 = !{!2462, !59, !59}
!2462 = !DICompositeType(tag: DW_TAG_structure_type, name: "Splitter", scope: !2, file: !2, line: 784, size: 384, align: 64, elements: !2463, identifier: "std.core.string.Splitter")
!2463 = !{!2464, !2465, !2466, !2467, !2468}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2462, file: !2, line: 786, baseType: !59, size: 128, align: 64)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !2462, file: !2, line: 787, baseType: !59, size: 128, align: 64, offset: 128)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2462, file: !2, line: 788, baseType: !66, size: 64, align: 64, offset: 256)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "tokenize", scope: !2462, file: !2, line: 789, baseType: !105, size: 8, align: 8, offset: 320)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "last_index", scope: !2462, file: !2, line: 790, baseType: !18, size: 32, align: 32, offset: 352)
!2469 = !DILocalVariable(name: "self", arg: 1, scope: !2459, file: !2, line: 774, type: !59)
!2470 = !DILocation(line: 774, scope: !2459)
!2471 = !DILocalVariable(name: "split", arg: 2, scope: !2459, file: !2, line: 774, type: !59)
!2472 = !DILocation(line: 776, scope: !2459)
!2473 = distinct !DISubprogram(name: "tokenize", linkageName: "std.core.String.tokenize", scope: !2, file: !2, line: 779, type: !2460, scopeLine: 779, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2474 = !DILocalVariable(name: "self", arg: 1, scope: !2473, file: !2, line: 779, type: !59)
!2475 = !DILocation(line: 779, scope: !2473)
!2476 = !DILocalVariable(name: "split", arg: 2, scope: !2473, file: !2, line: 779, type: !59)
!2477 = !DILocation(line: 781, scope: !2473)
!2478 = distinct !DISubprogram(name: "reset", linkageName: "std.core.string.Splitter.reset", scope: !2, file: !2, line: 793, type: !2479, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2479 = !DISubroutineType(types: !2480)
!2480 = !{null, !2481}
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Splitter*", baseType: !2462, size: 64, align: 64, dwarfAddressSpace: 0)
!2482 = !DILocation(line: 794, scope: !2478)
!2483 = !DILocalVariable(name: "self", arg: 1, scope: !2478, file: !2, line: 793, type: !2481)
!2484 = !DILocation(line: 793, scope: !2478)
!2485 = !DILocation(line: 795, scope: !2478)
!2486 = distinct !DISubprogram(name: "next", linkageName: "std.core.string.Splitter.next", scope: !2, file: !2, line: 798, type: !2487, scopeLine: 798, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2487 = !DISubroutineType(types: !2488)
!2488 = !{!237, !137, !2481}
!2489 = !DILocation(line: 799, scope: !2486)
!2490 = !DILocalVariable(name: "self", arg: 1, scope: !2486, file: !2, line: 798, type: !2481)
!2491 = !DILocation(line: 798, scope: !2486)
!2492 = !DILocation(line: 800, scope: !2486)
!2493 = !DILocalVariable(name: "len", scope: !2494, file: !2, line: 802, type: !66, align: 8)
!2494 = distinct !DILexicalBlock(scope: !2495, file: !2, line: 801, column: 2)
!2495 = distinct !DILexicalBlock(scope: !2486, file: !2, line: 800, column: 2)
!2496 = !DILocation(line: 802, scope: !2494)
!2497 = !DILocalVariable(name: "current", scope: !2494, file: !2, line: 803, type: !66, align: 8)
!2498 = !DILocation(line: 803, scope: !2494)
!2499 = !DILocation(line: 804, scope: !2494)
!2500 = !DILocalVariable(name: "remaining", scope: !2494, file: !2, line: 805, type: !59, align: 8)
!2501 = !DILocation(line: 805, scope: !2494)
!2502 = !DILocalVariable(name: "next", scope: !2494, file: !2, line: 806, type: !67, align: 8)
!2503 = !DILocation(line: 806, scope: !2494)
!2504 = !DILocation(line: 807, scope: !2494)
!2505 = !DILocation(line: 809, scope: !2506)
!2506 = distinct !DILexicalBlock(scope: !2494, file: !2, line: 808, column: 3)
!2507 = !DILocation(line: 810, scope: !2506)
!2508 = !DILocation(line: 811, scope: !2506)
!2509 = !DILocation(line: 813, scope: !2494)
!2510 = !DILocation(line: 814, scope: !2494)
!2511 = distinct !DISubprogram(name: "tformat_zstr", linkageName: "std.core.string.tformat_zstr", scope: !2, file: !2, line: 42, type: !2512, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2512 = !DISubroutineType(types: !2513)
!2513 = !{!390, !59, !2514}
!2514 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !2515, identifier: "any[]")
!2515 = !{!2516, !2522}
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2514, baseType: !2517, size: 64, align: 64)
!2517 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !2518, size: 64, align: 64, dwarfAddressSpace: 0)
!2518 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !2519, identifier: "any")
!2519 = !{!2520, !2521}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2518, baseType: !142, size: 64, align: 64)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2518, baseType: !144, size: 64, align: 64, offset: 64)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2514, baseType: !66, size: 64, align: 64, offset: 64)
!2523 = !DILocalVariable(name: "fmt", arg: 1, scope: !2511, file: !2, line: 42, type: !59)
!2524 = !DILocation(line: 42, scope: !2511)
!2525 = !DILocalVariable(name: "args", arg: 2, scope: !2511, file: !2, line: 42, type: !2514)
!2526 = !DILocalVariable(name: "str", scope: !2511, file: !2, line: 44, type: !2527, align: 8)
!2527 = !DIDerivedType(tag: DW_TAG_typedef, name: "DString", scope: !2, file: !2, line: 4, baseType: !2528, align: 8)
!2528 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DStringOpaque*", baseType: !2529, size: 64, align: 64, dwarfAddressSpace: 0)
!2529 = !DIDerivedType(tag: DW_TAG_typedef, name: "DStringOpaque", scope: !2, file: !2, line: 5, baseType: null, align: 1)
!2530 = !DILocation(line: 44, scope: !2511)
!2531 = !DILocation(line: 45, scope: !2511)
!2532 = !DILocation(line: 46, scope: !2511)
!2533 = distinct !DISubprogram(name: "format", linkageName: "std.core.string.format", scope: !2, file: !2, line: 55, type: !2534, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2534 = !DISubroutineType(types: !2535)
!2535 = !{!59, !59, !2514, !139}
!2536 = !DILocalVariable(name: "fmt", arg: 1, scope: !2533, file: !2, line: 55, type: !59)
!2537 = !DILocation(line: 55, scope: !2533)
!2538 = !DILocalVariable(name: "args", arg: 2, scope: !2533, file: !2, line: 55, type: !2514)
!2539 = !DILocalVariable(name: "allocator", arg: 3, scope: !2533, file: !2, line: 55, type: !139)
!2540 = !DILocalVariable(name: "current", scope: !2541, file: !2, line: 540, type: !2542, align: 8)
!2541 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !442, file: !442, line: 538, scopeLine: 538, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2542 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !2543, size: 64, align: 64, dwarfAddressSpace: 0)
!2543 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !2, file: !2, line: 10, size: 320, align: 64, elements: !2544, identifier: "std.core.mem.allocator.TempAllocator")
!2544 = !{!2545, !2546, !2559, !2560, !2561}
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !2543, file: !2, line: 12, baseType: !139, size: 128, align: 64)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !2543, file: !2, line: 13, baseType: !2547, size: 64, align: 64, offset: 128)
!2547 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !2548, size: 64, align: 64, dwarfAddressSpace: 0)
!2548 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !2, file: !2, line: 22, size: 320, align: 64, elements: !2549, identifier: "std.core.mem.allocator.TempAllocatorPage")
!2549 = !{!2550, !2551, !2552, !2553, !2554, !2555}
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !2548, file: !2, line: 24, baseType: !2547, size: 64, align: 64)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !2548, file: !2, line: 25, baseType: !142, size: 64, align: 64, offset: 64)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !2548, file: !2, line: 26, baseType: !66, size: 64, align: 64, offset: 128)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2548, file: !2, line: 27, baseType: !66, size: 64, align: 64, offset: 192)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !2548, file: !2, line: 28, baseType: !66, size: 64, align: 64, offset: 256)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2548, file: !2, line: 29, baseType: !2556, align: 8, offset: 320)
!2556 = !DICompositeType(tag: DW_TAG_array_type, baseType: !64, align: 8, elements: !2557)
!2557 = !{!2558}
!2558 = !DISubrange(count: 0, lowerBound: 0)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2543, file: !2, line: 14, baseType: !66, size: 64, align: 64, offset: 192)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2543, file: !2, line: 15, baseType: !66, size: 64, align: 64, offset: 256)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2543, file: !2, line: 16, baseType: !2556, align: 8, offset: 320)
!2562 = !DILocation(line: 540, scope: !2541, inlinedAt: !2563)
!2563 = !DILocation(line: 57, scope: !2533)
!2564 = !DILocation(line: 396, scope: !2565, inlinedAt: !2562)
!2565 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2566 = !DILocation(line: 398, scope: !2567, inlinedAt: !2562)
!2567 = distinct !DILexicalBlock(scope: !2565, file: !161, line: 397, column: 2)
!2568 = !DILocation(line: 400, scope: !2565, inlinedAt: !2562)
!2569 = !DILocalVariable(name: "original", scope: !2541, file: !2, line: 543, type: !2542, align: 8)
!2570 = !DILocation(line: 543, scope: !2541, inlinedAt: !2563)
!2571 = !DILocation(line: 544, scope: !2541, inlinedAt: !2563)
!2572 = !DILocalVariable(name: "mark", scope: !2541, file: !2, line: 546, type: !66, align: 8)
!2573 = !DILocation(line: 546, scope: !2541, inlinedAt: !2563)
!2574 = !DILocalVariable(name: "str", scope: !2575, file: !2, line: 59, type: !2527, align: 8)
!2575 = distinct !DILexicalBlock(scope: !2533, file: !2, line: 58, column: 2)
!2576 = !DILocation(line: 59, scope: !2575)
!2577 = !DILocation(line: 60, scope: !2575)
!2578 = !DILocation(line: 61, scope: !2575)
!2579 = !DILocation(line: 549, scope: !2580, inlinedAt: !2563)
!2580 = distinct !DILexicalBlock(scope: !2541, file: !442, line: 548, column: 2)
!2581 = !DILocation(line: 551, scope: !2580, inlinedAt: !2563)
!2582 = !DILocation(line: 553, scope: !2580, inlinedAt: !2563)
!2583 = distinct !DISubprogram(name: "new_format", linkageName: "std.core.string.new_format", scope: !2, file: !2, line: 70, type: !2534, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2584 = !DILocalVariable(name: "fmt", arg: 1, scope: !2583, file: !2, line: 70, type: !59)
!2585 = !DILocation(line: 70, scope: !2583)
!2586 = !DILocalVariable(name: "args", arg: 2, scope: !2583, file: !2, line: 70, type: !2514)
!2587 = !DILocalVariable(name: "allocator", arg: 3, scope: !2583, file: !2, line: 70, type: !139)
!2588 = !DILocation(line: 392, scope: !2589, inlinedAt: !2585)
!2589 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !161, file: !161, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2590 = distinct !DISubprogram(name: "tformat", linkageName: "std.core.string.tformat", scope: !2, file: !2, line: 77, type: !2591, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2591 = !DISubroutineType(types: !2592)
!2592 = !{!59, !59, !2514}
!2593 = !DILocalVariable(name: "fmt", arg: 1, scope: !2590, file: !2, line: 77, type: !59)
!2594 = !DILocation(line: 77, scope: !2590)
!2595 = !DILocalVariable(name: "args", arg: 2, scope: !2590, file: !2, line: 77, type: !2514)
!2596 = !DILocalVariable(name: "str", scope: !2590, file: !2, line: 79, type: !2527, align: 8)
!2597 = !DILocation(line: 79, scope: !2590)
!2598 = !DILocation(line: 80, scope: !2590)
!2599 = !DILocation(line: 81, scope: !2590)
!2600 = distinct !DISubprogram(name: "new_format_zstr", linkageName: "std.core.string.new_format_zstr", scope: !2, file: !2, line: 90, type: !2601, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2601 = !DISubroutineType(types: !2602)
!2602 = !{!390, !59, !2514, !139}
!2603 = !DILocalVariable(name: "fmt", arg: 1, scope: !2600, file: !2, line: 90, type: !59)
!2604 = !DILocation(line: 90, scope: !2600)
!2605 = !DILocalVariable(name: "args", arg: 2, scope: !2600, file: !2, line: 90, type: !2514)
!2606 = !DILocalVariable(name: "allocator", arg: 3, scope: !2600, file: !2, line: 90, type: !139)
!2607 = !DILocalVariable(name: "current", scope: !2608, file: !2, line: 540, type: !2542, align: 8)
!2608 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !442, file: !442, line: 538, scopeLine: 538, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2609 = !DILocation(line: 540, scope: !2608, inlinedAt: !2610)
!2610 = !DILocation(line: 92, scope: !2600)
!2611 = !DILocation(line: 396, scope: !2612, inlinedAt: !2609)
!2612 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2613 = !DILocation(line: 398, scope: !2614, inlinedAt: !2609)
!2614 = distinct !DILexicalBlock(scope: !2612, file: !161, line: 397, column: 2)
!2615 = !DILocation(line: 400, scope: !2612, inlinedAt: !2609)
!2616 = !DILocalVariable(name: "original", scope: !2608, file: !2, line: 543, type: !2542, align: 8)
!2617 = !DILocation(line: 543, scope: !2608, inlinedAt: !2610)
!2618 = !DILocation(line: 544, scope: !2608, inlinedAt: !2610)
!2619 = !DILocalVariable(name: "mark", scope: !2608, file: !2, line: 546, type: !66, align: 8)
!2620 = !DILocation(line: 546, scope: !2608, inlinedAt: !2610)
!2621 = !DILocalVariable(name: "str", scope: !2622, file: !2, line: 94, type: !2527, align: 8)
!2622 = distinct !DILexicalBlock(scope: !2600, file: !2, line: 93, column: 2)
!2623 = !DILocation(line: 94, scope: !2622)
!2624 = !DILocation(line: 95, scope: !2622)
!2625 = !DILocation(line: 96, scope: !2622)
!2626 = !DILocation(line: 549, scope: !2627, inlinedAt: !2610)
!2627 = distinct !DILexicalBlock(scope: !2608, file: !442, line: 548, column: 2)
!2628 = !DILocation(line: 551, scope: !2627, inlinedAt: !2610)
!2629 = !DILocation(line: 553, scope: !2627, inlinedAt: !2610)
!2630 = distinct !DISubprogram(name: "join_new", linkageName: "std.core.string.join_new", scope: !2, file: !2, line: 114, type: !2631, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2631 = !DISubroutineType(types: !2632)
!2632 = !{!59, !134, !59, !139}
!2633 = !DILocalVariable(name: "s", arg: 1, scope: !2630, file: !2, line: 114, type: !134)
!2634 = !DILocation(line: 114, scope: !2630)
!2635 = !DILocalVariable(name: "joiner", arg: 2, scope: !2630, file: !2, line: 114, type: !59)
!2636 = !DILocalVariable(name: "allocator", arg: 3, scope: !2630, file: !2, line: 114, type: !139)
!2637 = !DILocation(line: 116, scope: !2630)
!2638 = !DILocation(line: 252, scope: !2639, inlinedAt: !2640)
!2639 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !161, file: !161, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2640 = !DILocation(line: 244, scope: !2641, inlinedAt: !2642)
!2641 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !161, file: !161, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2642 = !DILocation(line: 118, scope: !2643)
!2643 = distinct !DILexicalBlock(scope: !2630, file: !2, line: 117, column: 2)
!2644 = !DILocation(line: 79, scope: !2645, inlinedAt: !2638)
!2645 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !161, file: !161, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2646 = !DILocation(line: 28, scope: !2647, inlinedAt: !2648)
!2647 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2648 = !DILocation(line: 80, scope: !2645, inlinedAt: !2638)
!2649 = !DILocalVariable(name: "total_size", scope: !2630, file: !2, line: 121, type: !66, align: 8)
!2650 = !DILocation(line: 121, scope: !2630)
!2651 = !DILocalVariable(name: ".temp", scope: !2652, file: !2, line: 122, type: !66, align: 8)
!2652 = distinct !DILexicalBlock(scope: !2630, file: !2, line: 122, column: 2)
!2653 = !DILocation(line: 122, scope: !2652)
!2654 = !DILocalVariable(name: "str", scope: !2655, file: !2, line: 122, type: !137, align: 8)
!2655 = distinct !DILexicalBlock(scope: !2652, file: !2, line: 123, column: 2)
!2656 = !DILocation(line: 122, scope: !2655)
!2657 = !DILocation(line: 124, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2655, file: !2, line: 123, column: 2)
!2659 = !DILocalVariable(name: "current", scope: !2660, file: !2, line: 540, type: !2542, align: 8)
!2660 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !442, file: !442, line: 538, scopeLine: 538, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2661 = !DILocation(line: 540, scope: !2660, inlinedAt: !2662)
!2662 = !DILocation(line: 126, scope: !2630)
!2663 = !DILocation(line: 396, scope: !2664, inlinedAt: !2661)
!2664 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2665 = !DILocation(line: 398, scope: !2666, inlinedAt: !2661)
!2666 = distinct !DILexicalBlock(scope: !2664, file: !161, line: 397, column: 2)
!2667 = !DILocation(line: 400, scope: !2664, inlinedAt: !2661)
!2668 = !DILocalVariable(name: "original", scope: !2660, file: !2, line: 543, type: !2542, align: 8)
!2669 = !DILocation(line: 543, scope: !2660, inlinedAt: !2662)
!2670 = !DILocation(line: 544, scope: !2660, inlinedAt: !2662)
!2671 = !DILocalVariable(name: "mark", scope: !2660, file: !2, line: 546, type: !66, align: 8)
!2672 = !DILocation(line: 546, scope: !2660, inlinedAt: !2662)
!2673 = !DILocalVariable(name: "res", scope: !2674, file: !2, line: 128, type: !2527, align: 8)
!2674 = distinct !DILexicalBlock(scope: !2630, file: !2, line: 127, column: 2)
!2675 = !DILocation(line: 128, scope: !2674)
!2676 = !DILocation(line: 129, scope: !2674)
!2677 = !DILocation(line: 397, scope: !2678, inlinedAt: !2676)
!2678 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2679, file: !2679, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2679 = !DIFile(filename: "dstring.c3", directory: "C:/Program Files/c3c/lib/std/core")
!2680 = !DILocalVariable(name: ".temp", scope: !2681, file: !2, line: 130, type: !239, align: 8)
!2681 = distinct !DILexicalBlock(scope: !2674, file: !2, line: 130, column: 3)
!2682 = !DILocation(line: 130, scope: !2681)
!2683 = !DILocalVariable(name: ".temp", scope: !2681, file: !2, line: 130, type: !66, align: 8)
!2684 = !DILocalVariable(name: "str", scope: !2685, file: !2, line: 130, type: !137, align: 8)
!2685 = distinct !DILexicalBlock(scope: !2681, file: !2, line: 131, column: 3)
!2686 = !DILocation(line: 130, scope: !2685)
!2687 = !DILocation(line: 397, scope: !2688, inlinedAt: !2689)
!2688 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2679, file: !2679, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2689 = !DILocation(line: 132, scope: !2690)
!2690 = distinct !DILexicalBlock(scope: !2685, file: !2, line: 131, column: 3)
!2691 = !DILocation(line: 133, scope: !2690)
!2692 = !DILocation(line: 397, scope: !2693, inlinedAt: !2691)
!2693 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !2679, file: !2679, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2694 = !DILocation(line: 135, scope: !2674)
!2695 = !DILocation(line: 549, scope: !2696, inlinedAt: !2662)
!2696 = distinct !DILexicalBlock(scope: !2660, file: !442, line: 548, column: 2)
!2697 = !DILocation(line: 551, scope: !2696, inlinedAt: !2662)
!2698 = !DILocation(line: 553, scope: !2696, inlinedAt: !2662)
!2699 = distinct !DISubprogram(name: "new_from_utf32", linkageName: "std.core.string.new_from_utf32", scope: !2, file: !2, line: 643, type: !2700, scopeLine: 643, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2700 = !DISubroutineType(types: !2701)
!2701 = !{!237, !137, !2702, !139}
!2702 = !DICompositeType(tag: DW_TAG_structure_type, name: "uint[]", size: 128, align: 64, elements: !2703, identifier: "uint[]")
!2703 = !{!2704, !2705}
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2702, baseType: !1335, size: 64, align: 64)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2702, baseType: !66, size: 64, align: 64, offset: 64)
!2706 = !DILocalVariable(name: "utf32", arg: 1, scope: !2699, file: !2, line: 643, type: !627)
!2707 = !DILocation(line: 643, scope: !2699)
!2708 = !DILocalVariable(name: "allocator", arg: 2, scope: !2699, file: !2, line: 643, type: !139)
!2709 = !DILocalVariable(name: "len", scope: !2699, file: !2, line: 645, type: !66, align: 8)
!2710 = !DILocation(line: 645, scope: !2699)
!2711 = !DILocalVariable(name: "data", scope: !2699, file: !2, line: 646, type: !63, align: 8)
!2712 = !DILocation(line: 646, scope: !2699)
!2713 = !DILocation(line: 62, scope: !2714, inlinedAt: !2712)
!2714 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2715 = !DILocation(line: 28, scope: !2716, inlinedAt: !2717)
!2716 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2717 = !DILocation(line: 68, scope: !2714, inlinedAt: !2712)
!2718 = !DILocation(line: 648, scope: !2699)
!2719 = !DILocation(line: 649, scope: !2699)
!2720 = !DILocation(line: 650, scope: !2699)
!2721 = distinct !DISubprogram(name: "new_from_utf16", linkageName: "std.core.string.new_from_utf16", scope: !2, file: !2, line: 653, type: !2722, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2722 = !DISubroutineType(types: !2723)
!2723 = !{!237, !137, !2724, !139}
!2724 = !DICompositeType(tag: DW_TAG_structure_type, name: "ushort[]", size: 128, align: 64, elements: !2725, identifier: "ushort[]")
!2725 = !{!2726, !2727}
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2724, baseType: !605, size: 64, align: 64)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2724, baseType: !66, size: 64, align: 64, offset: 64)
!2728 = !DILocalVariable(name: "utf16", arg: 1, scope: !2721, file: !2, line: 653, type: !565)
!2729 = !DILocation(line: 653, scope: !2721)
!2730 = !DILocalVariable(name: "allocator", arg: 2, scope: !2721, file: !2, line: 653, type: !139)
!2731 = !DILocalVariable(name: "len", scope: !2721, file: !2, line: 655, type: !66, align: 8)
!2732 = !DILocation(line: 655, scope: !2721)
!2733 = !DILocalVariable(name: "data", scope: !2721, file: !2, line: 656, type: !63, align: 8)
!2734 = !DILocation(line: 656, scope: !2721)
!2735 = !DILocation(line: 62, scope: !2736, inlinedAt: !2734)
!2736 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !161, file: !161, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2737 = !DILocation(line: 28, scope: !2738, inlinedAt: !2739)
!2738 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !161, file: !161, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2739 = !DILocation(line: 68, scope: !2736, inlinedAt: !2734)
!2740 = !DILocation(line: 658, scope: !2721)
!2741 = !DILocation(line: 657, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2721, file: !2, line: 657, column: 25)
!2743 = !DILocation(line: 101, scope: !2744, inlinedAt: !2741)
!2744 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !161, file: !161, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2745 = !DILocation(line: 105, scope: !2744, inlinedAt: !2741)
!2746 = !DILocation(line: 659, scope: !2721)
!2747 = !DILocation(line: 660, scope: !2721)
!2748 = distinct !DISubprogram(name: "new_from_wstring", linkageName: "std.core.string.new_from_wstring", scope: !2, file: !2, line: 663, type: !2749, scopeLine: 663, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2749 = !DISubroutineType(types: !2750)
!2750 = !{!237, !137, !604, !139}
!2751 = !DILocalVariable(name: "wstring", arg: 1, scope: !2748, file: !2, line: 663, type: !604)
!2752 = !DILocation(line: 663, scope: !2748)
!2753 = !DILocalVariable(name: "allocator", arg: 2, scope: !2748, file: !2, line: 663, type: !139)
!2754 = !DILocalVariable(name: "utf16_len", scope: !2748, file: !2, line: 665, type: !66, align: 8)
!2755 = !DILocation(line: 665, scope: !2748)
!2756 = !DILocation(line: 666, scope: !2748)
!2757 = !DILocation(line: 666, scope: !2758)
!2758 = distinct !DILexicalBlock(scope: !2748, file: !2, line: 666, column: 2)
!2759 = !DILocalVariable(name: "utf16", scope: !2748, file: !2, line: 667, type: !565, align: 8)
!2760 = !DILocation(line: 667, scope: !2748)
!2761 = !DILocation(line: 668, scope: !2748)
!2762 = distinct !DISubprogram(name: "temp_from_wstring", linkageName: "std.core.string.temp_from_wstring", scope: !2, file: !2, line: 671, type: !2763, scopeLine: 671, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2763 = !DISubroutineType(types: !2764)
!2764 = !{!237, !137, !604}
!2765 = !DILocalVariable(name: "wstring", arg: 1, scope: !2762, file: !2, line: 671, type: !604)
!2766 = !DILocation(line: 671, scope: !2762)
!2767 = !DILocation(line: 396, scope: !2768, inlinedAt: !2766)
!2768 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2769 = !DILocation(line: 398, scope: !2770, inlinedAt: !2766)
!2770 = distinct !DILexicalBlock(scope: !2768, file: !161, line: 397, column: 2)
!2771 = !DILocation(line: 400, scope: !2768, inlinedAt: !2766)
!2772 = distinct !DISubprogram(name: "temp_from_utf16", linkageName: "std.core.string.temp_from_utf16", scope: !2, file: !2, line: 672, type: !2773, scopeLine: 672, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2773 = !DISubroutineType(types: !2774)
!2774 = !{!237, !137, !2724}
!2775 = !DILocalVariable(name: "utf16", arg: 1, scope: !2772, file: !2, line: 672, type: !565)
!2776 = !DILocation(line: 672, scope: !2772)
!2777 = !DILocation(line: 396, scope: !2778, inlinedAt: !2776)
!2778 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !161, file: !161, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2779 = !DILocation(line: 398, scope: !2780, inlinedAt: !2776)
!2780 = distinct !DILexicalBlock(scope: !2778, file: !161, line: 397, column: 2)
!2781 = !DILocation(line: 400, scope: !2778, inlinedAt: !2776)
