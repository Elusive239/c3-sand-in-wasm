; ModuleID = 'std::io'
source_filename = "std::io"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%File = type { ptr }
%BitReader = type { %any, i32, i32 }
%"any[]" = type { ptr, i64 }
%BitWriter = type { %any, i32, i32 }
%Formatter = type { ptr, ptr, %.anon }
%.anon = type { i32, i32, i32, i64, i64 }
%OnStackAllocator = type { %any, %"char[]", i64, ptr }
%"char[][]" = type { ptr, i64 }
%BufferData = type { %"char[]", i64 }
%ReadBuffer = type { %any, %"char[]", i64, i64 }
%WriteBuffer = type { %any, %"char[]", i64 }
%ByteBuffer = type { %any, i64, %"char[]", i64, i64, i8 }
%ByteReader = type { %"char[]", i64 }
%ByteWriter = type { %"char[]", i64, %any }
%LimitReader = type { %any, i64 }
%MultiReader = type { %"any[]", i64, %any }
%MultiWriter = type { %"any[]", %any }
%Scanner = type { %any, %"char[]", i64, i64 }
%TeeReader = type { %any, %any }

$std.io.BitReader.init = comdat any

$std.io.BitReader.clear = comdat any

$std.io.BitReader.read_bits = comdat any

$std.io.BitWriter.init = comdat any

$std.io.BitWriter.flush = comdat any

$std.io.BitWriter.write_bits = comdat any

$std.core.ReflectedParam.to_format = comdat any

$std.io.Formatter.printf = comdat any

$std.io.Formatter.init = comdat any

$std.io.Formatter.print_with_function = comdat any

$std.io.Formatter.vprintf = comdat any

$std.io.Formatter.print = comdat any

$std.io.Formatter.pad = comdat any

$std.io.Formatter.out_chars = comdat any

$std.io.Formatter.etoa = comdat any

$std.io.Formatter.ftoa = comdat any

$std.io.Formatter.gtoa = comdat any

$std.io.Formatter.atoa = comdat any

$std.io.fmt_u = comdat any

$std.io.fprintf = comdat any

$std.io.fprintfn = comdat any

$std.io.printf = comdat any

$std.io.printfn = comdat any

$std.io.eprintf = comdat any

$std.io.eprintfn = comdat any

$std.io.bprintf = comdat any

$std.io.putchar = comdat any

$std.io.stdout = comdat any

$std.io.stderr = comdat any

$std.io.stdin = comdat any

$std.io.ReadBuffer.init = comdat any

$std.io.ReadBuffer.str_view = comdat any

$std.io.ReadBuffer.close = comdat any

$std.io.ReadBuffer.read = comdat any

$std.io.ReadBuffer.read_byte = comdat any

$std.io.WriteBuffer.init = comdat any

$std.io.WriteBuffer.str_view = comdat any

$std.io.WriteBuffer.close = comdat any

$std.io.WriteBuffer.flush = comdat any

$std.io.WriteBuffer.write = comdat any

$std.io.WriteBuffer.write_byte = comdat any

$std.io.ByteBuffer.new_init = comdat any

$std.io.ByteBuffer.temp_init = comdat any

$std.io.ByteBuffer.init_with_buffer = comdat any

$std.io.ByteBuffer.free = comdat any

$std.io.ByteBuffer.write = comdat any

$std.io.ByteBuffer.write_byte = comdat any

$std.io.ByteBuffer.read = comdat any

$std.io.ByteBuffer.read_byte = comdat any

$std.io.ByteBuffer.pushback_byte = comdat any

$std.io.ByteBuffer.seek = comdat any

$std.io.ByteBuffer.available = comdat any

$std.io.ByteBuffer.grow = comdat any

$std.io.ByteReader.len = comdat any

$std.io.ByteReader.init = comdat any

$std.io.ByteReader.read = comdat any

$std.io.ByteReader.read_byte = comdat any

$std.io.ByteReader.pushback_byte = comdat any

$std.io.ByteReader.seek = comdat any

$std.io.ByteReader.write_to = comdat any

$std.io.ByteReader.available = comdat any

$std.io.ByteWriter.new_init = comdat any

$std.io.ByteWriter.temp_init = comdat any

$std.io.ByteWriter.init_with_buffer = comdat any

$std.io.ByteWriter.destroy = comdat any

$std.io.ByteWriter.str_view = comdat any

$std.io.ByteWriter.ensure_capacity = comdat any

$std.io.ByteWriter.write = comdat any

$std.io.ByteWriter.write_byte = comdat any

$std.io.ByteWriter.read_from = comdat any

$std.io.LimitReader.init = comdat any

$std.io.LimitReader.close = comdat any

$std.io.LimitReader.read = comdat any

$std.io.LimitReader.read_byte = comdat any

$std.io.LimitReader.available = comdat any

$std.io.MultiReader.new_init = comdat any

$std.io.MultiReader.temp_init = comdat any

$std.io.MultiReader.free = comdat any

$std.io.MultiReader.read = comdat any

$std.io.MultiReader.read_byte = comdat any

$std.io.MultiWriter.new_init = comdat any

$std.io.MultiWriter.temp_init = comdat any

$std.io.MultiWriter.free = comdat any

$std.io.MultiWriter.write = comdat any

$std.io.MultiWriter.write_byte = comdat any

$std.io.Scanner.init = comdat any

$std.io.Scanner.flush = comdat any

$std.io.Scanner.close = comdat any

$std.io.Scanner.scan = comdat any

$std.io.Scanner.read = comdat any

$std.io.Scanner.read_byte = comdat any

$std.io.TeeReader.init = comdat any

$std.io.TeeReader.read = comdat any

$std.io.TeeReader.read_byte = comdat any

$std.io.available = comdat any

$std.io.copy_to = comdat any

$std.io.wrap_bytes = comdat any

$.dyn_search = comdat any

$"$ct.std.io.BitReader" = comdat any

$"$ct.std.io.BitWriter" = comdat any

$"$ct.std.io.File" = comdat any

$"std.io.PrintFault$BUFFER_EXCEEDED" = comdat any

$"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" = comdat any

$"std.io.PrintFault$INVALID_FORMAT" = comdat any

$"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" = comdat any

$"std.io.PrintFault$INVALID_ARGUMENT" = comdat any

$"$ct.std.io.PrintFault" = comdat any

$"$ct.std.io.$anon" = comdat any

$"$ct.std.io.Formatter" = comdat any

$"$ct.std.io.PrintFlags" = comdat any

$"$ct.uint" = comdat any

$"std.io.FormattingFault$BAD_FORMAT" = comdat any

$"$ct.std.io.FormattingFault" = comdat any

$"$ct.int" = comdat any

$"$ct.std.io.FloatFormatting" = comdat any

$"std.io.IoError$ALREADY_EXISTS" = comdat any

$"std.io.IoError$BUSY" = comdat any

$"std.io.IoError$CANNOT_READ_DIR" = comdat any

$"std.io.IoError$DIR_NOT_EMPTY" = comdat any

$"std.io.IoError$EOF" = comdat any

$"std.io.IoError$FILE_CANNOT_DELETE" = comdat any

$"std.io.IoError$FILE_IS_DIR" = comdat any

$"std.io.IoError$FILE_IS_PIPE" = comdat any

$"std.io.IoError$FILE_NOT_DIR" = comdat any

$"std.io.IoError$FILE_NOT_FOUND" = comdat any

$"std.io.IoError$FILE_NOT_VALID" = comdat any

$"std.io.IoError$GENERAL_ERROR" = comdat any

$"std.io.IoError$ILLEGAL_ARGUMENT" = comdat any

$"std.io.IoError$INCOMPLETE_WRITE" = comdat any

$"std.io.IoError$INTERRUPTED" = comdat any

$"std.io.IoError$INVALID_POSITION" = comdat any

$"std.io.IoError$INVALID_PUSHBACK" = comdat any

$"std.io.IoError$NAME_TOO_LONG" = comdat any

$"std.io.IoError$NOT_SEEKABLE" = comdat any

$"std.io.IoError$NO_PERMISSION" = comdat any

$"std.io.IoError$OUT_OF_SPACE" = comdat any

$"std.io.IoError$OVERFLOW" = comdat any

$"std.io.IoError$READ_ONLY" = comdat any

$"std.io.IoError$SYMLINK_FAILED" = comdat any

$"std.io.IoError$TOO_MANY_DESCRIPTORS" = comdat any

$"std.io.IoError$UNEXPECTED_EOF" = comdat any

$"std.io.IoError$UNKNOWN_ERROR" = comdat any

$"std.io.IoError$UNSUPPORTED_OPERATION" = comdat any

$"std.io.IoError$WOULD_BLOCK" = comdat any

$"$ct.std.io.IoError" = comdat any

$"$ct.std.io.BufferData" = comdat any

$"$ct.std.io.Seek" = comdat any

$"$ct.std.io.ReadBuffer" = comdat any

$"$ct.std.io.WriteBuffer" = comdat any

$"$ct.std.io.ByteBuffer" = comdat any

$"$ct.std.io.ByteReader" = comdat any

$"$ct.std.io.ByteWriter" = comdat any

$"$ct.std.io.LimitReader" = comdat any

$"$ct.std.io.MultiReader" = comdat any

$"$ct.std.io.MultiWriter" = comdat any

$"$ct.std.io.Scanner" = comdat any

$"$ct.std.io.TeeReader" = comdat any

$std.io.WRITER_BITS = comdat any

$"$sel.read_byte" = comdat any

$"$ct.ulong" = comdat any

$"$sel.write" = comdat any

$std.io.PRINTF_NTOA_BUFFER_SIZE = comdat any

$"$ct.String" = comdat any

$"$ct.sa$char" = comdat any

$"$ct.char" = comdat any

$"$sel.to_format" = comdat any

$"$sel.to_string" = comdat any

$"$ct.std.core.mem.allocator.OnStackAllocator" = comdat any

$"std.core.builtin.SearchResult$MISSING" = comdat any

$"$ct.std.core.builtin.SearchResult" = comdat any

$"$ct.ichar" = comdat any

$"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" = comdat any

$"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" = comdat any

$"$ct.std.core.types.ConversionResult" = comdat any

$"$ct.short" = comdat any

$"$ct.long" = comdat any

$"$ct.int128" = comdat any

$"$ct.ushort" = comdat any

$"$ct.uint128" = comdat any

$"$ct.anyfault" = comdat any

$"$ct.std.core.string.ZString" = comdat any

$"$ct.p$char" = comdat any

$"$ct.std.core.dstring.DString" = comdat any

$"$ct.p$std.core.dstring.DStringOpaque" = comdat any

$"$ct.std.core.dstring.DStringOpaque" = comdat any

$"$ct.void" = comdat any

$std.io.XDIGITS_H = comdat any

$std.io.XDIGITS_L = comdat any

$"$ct.bool" = comdat any

$"$ct.float" = comdat any

$"$ct.double" = comdat any

$"$sel.write_byte" = comdat any

$"$sel.flush" = comdat any

$"$sel.close" = comdat any

$"$sel.read" = comdat any

$"$ct.std.core.mem.allocator.TempAllocator" = comdat any

$"$sel.release" = comdat any

$"$sel.acquire" = comdat any

$"$sel.resize" = comdat any

$"$sel.available" = comdat any

$"$sel.seek" = comdat any

$"$sel.write_to" = comdat any

$"$sel.read_to" = comdat any

$"$ct.dyn.std.core.ReflectedParam.to_format" = comdat any

$"$ct.ReflectedParam" = comdat any

$"$ct.dyn.std.io.ReadBuffer.close" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read" = comdat any

$"$ct.dyn.std.io.ReadBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.WriteBuffer.close" = comdat any

$"$ct.dyn.std.io.WriteBuffer.flush" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write" = comdat any

$"$ct.dyn.std.io.WriteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write" = comdat any

$"$ct.dyn.std.io.ByteBuffer.write_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read" = comdat any

$"$ct.dyn.std.io.ByteBuffer.read_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.pushback_byte" = comdat any

$"$sel.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteBuffer.seek" = comdat any

$"$ct.dyn.std.io.ByteBuffer.available" = comdat any

$"$ct.dyn.std.io.ByteReader.len" = comdat any

$"$sel.len" = comdat any

$"$ct.dyn.std.io.ByteReader.read" = comdat any

$"$ct.dyn.std.io.ByteReader.read_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.pushback_byte" = comdat any

$"$ct.dyn.std.io.ByteReader.seek" = comdat any

$"$ct.dyn.std.io.ByteReader.write_to" = comdat any

$"$ct.dyn.std.io.ByteReader.available" = comdat any

$"$ct.dyn.std.io.ByteWriter.destroy" = comdat any

$"$sel.destroy" = comdat any

$"$ct.dyn.std.io.ByteWriter.write" = comdat any

$"$ct.dyn.std.io.ByteWriter.write_byte" = comdat any

$"$ct.dyn.std.io.ByteWriter.read_from" = comdat any

$"$sel.read_from" = comdat any

$"$ct.dyn.std.io.LimitReader.close" = comdat any

$"$ct.dyn.std.io.LimitReader.read" = comdat any

$"$ct.dyn.std.io.LimitReader.read_byte" = comdat any

$"$ct.dyn.std.io.LimitReader.available" = comdat any

$"$ct.dyn.std.io.MultiReader.read" = comdat any

$"$ct.dyn.std.io.MultiReader.read_byte" = comdat any

$"$ct.dyn.std.io.MultiWriter.write" = comdat any

$"$ct.dyn.std.io.MultiWriter.write_byte" = comdat any

$"$ct.dyn.std.io.Scanner.flush" = comdat any

$"$ct.dyn.std.io.Scanner.close" = comdat any

$"$ct.dyn.std.io.Scanner.read" = comdat any

$"$ct.dyn.std.io.Scanner.read_byte" = comdat any

$"$ct.dyn.std.io.TeeReader.read" = comdat any

$"$ct.dyn.std.io.TeeReader.read_byte" = comdat any

@"$ct.std.io.BitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BitWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.File" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@"std.io.PrintFault$BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault, i64 15 }, i64 1 }, comdat, align 8
@.fault = internal constant [16 x i8] c"BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.1, i64 24 }, i64 2 }, comdat, align 8
@.fault.1 = internal constant [25 x i8] c"INTERNAL_BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INVALID_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.2, i64 14 }, i64 3 }, comdat, align 8
@.fault.2 = internal constant [15 x i8] c"INVALID_FORMAT\00", align 1
@"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.3, i64 20 }, i64 4 }, comdat, align 8
@.fault.3 = internal constant [21 x i8] c"NOT_ENOUGH_ARGUMENTS\00", align 1
@"std.io.PrintFault$INVALID_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.4, i64 16 }, i64 5 }, comdat, align 8
@.fault.4 = internal constant [17 x i8] c"INVALID_ARGUMENT\00", align 1
@"$ct.std.io.PrintFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.$anon" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Formatter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.PrintFlags" = linkonce global %.introspect { i8 12, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"std.io.FormattingFault$BAD_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.FormattingFault" to i64), %"char[]" { ptr @.fault.6, i64 10 }, i64 1 }, comdat, align 8
@.fault.6 = internal constant [11 x i8] c"BAD_FORMAT\00", align 1
@"$ct.std.io.FormattingFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.FLOAT = internal constant [6 x i8] c"FLOAT\00", align 1
@.enum.EXPONENTIAL = internal constant [12 x i8] c"EXPONENTIAL\00", align 1
@.enum.ADAPTIVE = internal constant [9 x i8] c"ADAPTIVE\00", align 1
@.enum.HEX = internal constant [4 x i8] c"HEX\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.FloatFormatting" = linkonce global { i8, i64, ptr, i64, i64, i64, [4 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 4, [4 x %"char[]"] [%"char[]" { ptr @.enum.FLOAT, i64 5 }, %"char[]" { ptr @.enum.EXPONENTIAL, i64 11 }, %"char[]" { ptr @.enum.ADAPTIVE, i64 8 }, %"char[]" { ptr @.enum.HEX, i64 3 }] }, comdat, align 8
@"std.io.IoError$ALREADY_EXISTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.7, i64 14 }, i64 1 }, comdat, align 8
@.fault.7 = internal constant [15 x i8] c"ALREADY_EXISTS\00", align 1
@"std.io.IoError$BUSY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.8, i64 4 }, i64 2 }, comdat, align 8
@.fault.8 = internal constant [5 x i8] c"BUSY\00", align 1
@"std.io.IoError$CANNOT_READ_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.9, i64 15 }, i64 3 }, comdat, align 8
@.fault.9 = internal constant [16 x i8] c"CANNOT_READ_DIR\00", align 1
@"std.io.IoError$DIR_NOT_EMPTY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.10, i64 13 }, i64 4 }, comdat, align 8
@.fault.10 = internal constant [14 x i8] c"DIR_NOT_EMPTY\00", align 1
@"std.io.IoError$EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.11, i64 3 }, i64 5 }, comdat, align 8
@.fault.11 = internal constant [4 x i8] c"EOF\00", align 1
@"std.io.IoError$FILE_CANNOT_DELETE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.12, i64 18 }, i64 6 }, comdat, align 8
@.fault.12 = internal constant [19 x i8] c"FILE_CANNOT_DELETE\00", align 1
@"std.io.IoError$FILE_IS_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.13, i64 11 }, i64 7 }, comdat, align 8
@.fault.13 = internal constant [12 x i8] c"FILE_IS_DIR\00", align 1
@"std.io.IoError$FILE_IS_PIPE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.14, i64 12 }, i64 8 }, comdat, align 8
@.fault.14 = internal constant [13 x i8] c"FILE_IS_PIPE\00", align 1
@"std.io.IoError$FILE_NOT_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.15, i64 12 }, i64 9 }, comdat, align 8
@.fault.15 = internal constant [13 x i8] c"FILE_NOT_DIR\00", align 1
@"std.io.IoError$FILE_NOT_FOUND" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.16, i64 14 }, i64 10 }, comdat, align 8
@.fault.16 = internal constant [15 x i8] c"FILE_NOT_FOUND\00", align 1
@"std.io.IoError$FILE_NOT_VALID" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.17, i64 14 }, i64 11 }, comdat, align 8
@.fault.17 = internal constant [15 x i8] c"FILE_NOT_VALID\00", align 1
@"std.io.IoError$GENERAL_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.18, i64 13 }, i64 12 }, comdat, align 8
@.fault.18 = internal constant [14 x i8] c"GENERAL_ERROR\00", align 1
@"std.io.IoError$ILLEGAL_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.19, i64 16 }, i64 13 }, comdat, align 8
@.fault.19 = internal constant [17 x i8] c"ILLEGAL_ARGUMENT\00", align 1
@"std.io.IoError$INCOMPLETE_WRITE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.20, i64 16 }, i64 14 }, comdat, align 8
@.fault.20 = internal constant [17 x i8] c"INCOMPLETE_WRITE\00", align 1
@"std.io.IoError$INTERRUPTED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.21, i64 11 }, i64 15 }, comdat, align 8
@.fault.21 = internal constant [12 x i8] c"INTERRUPTED\00", align 1
@"std.io.IoError$INVALID_POSITION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.22, i64 16 }, i64 16 }, comdat, align 8
@.fault.22 = internal constant [17 x i8] c"INVALID_POSITION\00", align 1
@"std.io.IoError$INVALID_PUSHBACK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.23, i64 16 }, i64 17 }, comdat, align 8
@.fault.23 = internal constant [17 x i8] c"INVALID_PUSHBACK\00", align 1
@"std.io.IoError$NAME_TOO_LONG" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.24, i64 13 }, i64 18 }, comdat, align 8
@.fault.24 = internal constant [14 x i8] c"NAME_TOO_LONG\00", align 1
@"std.io.IoError$NOT_SEEKABLE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.25, i64 12 }, i64 19 }, comdat, align 8
@.fault.25 = internal constant [13 x i8] c"NOT_SEEKABLE\00", align 1
@"std.io.IoError$NO_PERMISSION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.26, i64 13 }, i64 20 }, comdat, align 8
@.fault.26 = internal constant [14 x i8] c"NO_PERMISSION\00", align 1
@"std.io.IoError$OUT_OF_SPACE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.27, i64 12 }, i64 21 }, comdat, align 8
@.fault.27 = internal constant [13 x i8] c"OUT_OF_SPACE\00", align 1
@"std.io.IoError$OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.28, i64 8 }, i64 22 }, comdat, align 8
@.fault.28 = internal constant [9 x i8] c"OVERFLOW\00", align 1
@"std.io.IoError$READ_ONLY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.29, i64 9 }, i64 23 }, comdat, align 8
@.fault.29 = internal constant [10 x i8] c"READ_ONLY\00", align 1
@"std.io.IoError$SYMLINK_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.30, i64 14 }, i64 24 }, comdat, align 8
@.fault.30 = internal constant [15 x i8] c"SYMLINK_FAILED\00", align 1
@"std.io.IoError$TOO_MANY_DESCRIPTORS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.31, i64 20 }, i64 25 }, comdat, align 8
@.fault.31 = internal constant [21 x i8] c"TOO_MANY_DESCRIPTORS\00", align 1
@"std.io.IoError$UNEXPECTED_EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.32, i64 14 }, i64 26 }, comdat, align 8
@.fault.32 = internal constant [15 x i8] c"UNEXPECTED_EOF\00", align 1
@"std.io.IoError$UNKNOWN_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.33, i64 13 }, i64 27 }, comdat, align 8
@.fault.33 = internal constant [14 x i8] c"UNKNOWN_ERROR\00", align 1
@"std.io.IoError$UNSUPPORTED_OPERATION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.34, i64 21 }, i64 28 }, comdat, align 8
@.fault.34 = internal constant [22 x i8] c"UNSUPPORTED_OPERATION\00", align 1
@"std.io.IoError$WOULD_BLOCK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.35, i64 11 }, i64 29 }, comdat, align 8
@.fault.35 = internal constant [12 x i8] c"WOULD_BLOCK\00", align 1
@"$ct.std.io.IoError" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 29, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.BufferData" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@.enum.SET = internal constant [4 x i8] c"SET\00", align 1
@.enum.CURSOR = internal constant [7 x i8] c"CURSOR\00", align 1
@.enum.END = internal constant [4 x i8] c"END\00", align 1
@"$ct.std.io.Seek" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.SET, i64 3 }, %"char[]" { ptr @.enum.CURSOR, i64 6 }, %"char[]" { ptr @.enum.END, i64 3 }] }, comdat, align 8
@"$ct.std.io.ReadBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.WriteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 6, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.ByteWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.LimitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.MultiReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.MultiWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.Scanner" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.io.TeeReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@std.io.WRITER_BITS = weak_odr local_unnamed_addr constant i32 24, comdat, align 4, !dbg !0
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [8 x i8] c"bits.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@.panic_msg.36 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.37 = internal constant [6 x i8] c"clear\00", align 1
@.func.38 = internal constant [10 x i8] c"read_bits\00", align 1
@.panic_msg.39 = internal constant [32 x i8] c"@require \22nbits <= 8\22 violated.\00", align 1
@.panic_msg.40 = internal constant [57 x i8] c"@require \22self.len + nbits <= uint.sizeof * 8\22 violated.\00", align 1
@"$sel.read_byte" = linkonce_odr constant [10 x i8] c"read_byte\00", comdat, align 1
@.panic_msg.41 = internal constant [47 x i8] c"No method 'read_byte' could be found on target\00", align 1
@.panic_msg.42 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.func.43 = internal constant [6 x i8] c"flush\00", align 1
@.panic_msg.44 = internal constant [118 x i8] c"@require \22is_arrayptr_or_slice_of_char(bytes)\22 violated: 'argument must be a pointer to an array or a slice of char'.\00", align 1
@.file.45 = internal constant [12 x i8] c"bitorder.c3\00", align 1
@.panic_msg.46 = internal constant [47 x i8] c"Dereference of null pointer, 'bytes' was null.\00", align 1
@.panic_msg.47 = internal constant [59 x i8] c"Dereference of null pointer, '$typeof(x)*)s.ptr' was null.\00", align 1
@.panic_msg.48 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.49 = internal constant [11 x i8] c"builtin.c3\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.50 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", comdat, align 1
@.panic_msg.51 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.file.52 = internal constant [10 x i8] c"stream.c3\00", align 1
@.func.53 = internal constant [11 x i8] c"write_bits\00", align 1
@.panic_msg.54 = internal constant [33 x i8] c"@require \22nbits <= 32\22 violated.\00", align 1
@std.io.PRINTF_NTOA_BUFFER_SIZE = weak_odr local_unnamed_addr constant i32 256, comdat, align 4, !dbg !4
@.file.55 = internal constant [13 x i8] c"formatter.c3\00", align 1
@.func.56 = internal constant [10 x i8] c"to_format\00", align 1
@.str = private unnamed_addr constant [17 x i8] c"[Parameter '%s']\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.57 = internal constant [7 x i8] c"printf\00", align 1
@.func.58 = internal constant [4 x i8] c"out\00", align 1
@.panic_msg.59 = internal constant [55 x i8] c"Calling null function pointer, 'self.out_fn' was null.\00", align 1
@.func.60 = internal constant [20 x i8] c"print_with_function\00", align 1
@"$sel.to_format" = linkonce_odr constant [10 x i8] c"to_format\00", comdat, align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.62 = internal constant [47 x i8] c"No method 'to_format' could be found on target\00", align 1
@"$sel.to_string" = linkonce_odr constant [10 x i8] c"to_string\00", comdat, align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@std.core.mem.allocator.thread_allocator = external thread_local global %any, align 8
@"$ct.std.core.mem.allocator.OnStackAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.64 = internal constant [47 x i8] c"No method 'to_string' could be found on target\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.65, i64 7 }, i64 1 }, comdat, align 8
@.fault.65 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, comdat, align 8
@.func.66 = internal constant [8 x i8] c"out_str\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.panic_msg.69 = internal constant [59 x i8] c"Dereference of null pointer, 'anyfault*)arg.ptr' was null.\00", align 1
@.panic_msg.70 = internal constant [50 x i8] c"Dereference of null pointer, 'any*)arg' was null.\00", align 1
@.str.71 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.72 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.73 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.75 = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.panic_msg.76 = internal constant [55 x i8] c"Dereference of null pointer, 'bool*)arg.ptr' was null.\00", align 1
@.str.77 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.panic_msg.79 = internal constant [70 x i8] c"@require \22$Type.kindof.is_int()\22 violated: 'Type was not an integer'.\00", align 1
@.file.80 = internal constant [9 x i8] c"types.c3\00", align 1
@.panic_msg.81 = internal constant [68 x i8] c"@require \22v.type.kindof == ENUM\22 violated: 'Value was not an enum'.\00", align 1
@.panic_msg.82 = internal constant [50 x i8] c"Attempted to access 'inner' on non composite type\00", align 1
@.panic_msg.83 = internal constant [72 x i8] c"@require \22v.type.kindof.is_int()\22 violated: 'Value was not an integer'.\00", align 1
@"$ct.ichar" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.84 = internal constant [53 x i8] c"Dereference of null pointer, 'char*)v.ptr' was null.\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.85, i64 18 }, i64 1 }, comdat, align 8
@.fault.85 = internal constant [19 x i8] c"VALUE_OUT_OF_RANGE\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.86, i64 27 }, i64 2 }, comdat, align 8
@.fault.86 = internal constant [28 x i8] c"VALUE_OUT_OF_UNSIGNED_RANGE\00", align 1
@"$ct.std.core.types.ConversionResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.short" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.87 = internal constant [54 x i8] c"Dereference of null pointer, 'short*)v.ptr' was null.\00", align 1
@.panic_msg.88 = internal constant [52 x i8] c"Dereference of null pointer, 'int*)v.ptr' was null.\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.89 = internal constant [53 x i8] c"Dereference of null pointer, 'long*)v.ptr' was null.\00", align 1
@"$ct.int128" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.90 = internal constant [55 x i8] c"Dereference of null pointer, 'int128*)v.ptr' was null.\00", align 1
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.91 = internal constant [55 x i8] c"Dereference of null pointer, 'ushort*)v.ptr' was null.\00", align 1
@.panic_msg.92 = internal constant [53 x i8] c"Dereference of null pointer, 'uint*)v.ptr' was null.\00", align 1
@.panic_msg.93 = internal constant [54 x i8] c"Dereference of null pointer, 'ulong*)v.ptr' was null.\00", align 1
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.94 = internal constant [56 x i8] c"Dereference of null pointer, 'uint128*)v.ptr' was null.\00", align 1
@.str.95 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.96 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.97 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.98 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.panic_msg.99 = internal constant [52 x i8] c"Attempted to access 'names' on non enum/fault type.\00", align 1
@.panic_msg.100 = internal constant [50 x i8] c"Illegal enum value found, numerical value was %d.\00", align 1
@.panic_msg.101 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.str.102 = private unnamed_addr constant [9 x i8] c"<struct>\00", align 1
@.str.103 = private unnamed_addr constant [8 x i8] c"<union>\00", align 1
@.str.104 = private unnamed_addr constant [12 x i8] c"<bitstruct>\00", align 1
@.str.105 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@.panic_msg.106 = internal constant [53 x i8] c"Dereference of null pointer, 'String*)arg' was null.\00", align 1
@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.107 = internal constant [54 x i8] c"Dereference of null pointer, 'ZString*)arg' was null.\00", align 1
@.panic_msg.108 = internal constant [55 x i8] c"Dereference of null pointer, 'ZString*)arg)' was null.\00", align 1
@.str.109 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@"$ct.std.core.dstring.DString" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.p$std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 1, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.110 = internal constant [54 x i8] c"Dereference of null pointer, 'DString*)arg' was null.\00", align 1
@.panic_msg.111 = internal constant [55 x i8] c"Dereference of null pointer, 'DString*)arg)' was null.\00", align 1
@.str.112 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.113 = internal constant [49 x i8] c"Dereference of null pointer, 'pointer' was null.\00", align 1
@.str.114 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.115 = internal constant [44 x i8] c"Attempted to access 'len' on non array type\00", align 1
@.str.116 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.117 = private unnamed_addr constant [3 x i8] c"[<\00", align 1
@.str.118 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.119 = private unnamed_addr constant [3 x i8] c">]\00", align 1
@.panic_msg.120 = internal constant [46 x i8] c"Dereference of null pointer, 'temp' was null.\00", align 1
@.str.121 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.122 = private unnamed_addr constant [16 x i8] c"Already handled\00", align 1
@.str.123 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.124 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.125 = private unnamed_addr constant [13 x i8] c"Invalid type\00", align 1
@.func.126 = internal constant [8 x i8] c"vprintf\00", align 1
@.str.127 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.128 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.129 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.130 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.131 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.132 = private unnamed_addr constant [10 x i8] c"<MISSING>\00", align 1
@.str.133 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.134 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.135 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.136 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.137 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.138 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.func.139 = internal constant [6 x i8] c"print\00", align 1
@std.io.XDIGITS_H = weak_odr constant [16 x i8] c"0123456789ABCDEF", comdat, align 16, !dbg !7
@std.io.XDIGITS_L = weak_odr constant [16 x i8] c"0123456789abcdef", comdat, align 16, !dbg !14
@.panic_msg.141 = internal constant [48 x i8] c"Dereference of null pointer, 'is_neg' was null.\00", align 1
@.file.142 = internal constant [21 x i8] c"formatter_private.c3\00", align 1
@.func.143 = internal constant [13 x i8] c"int_from_any\00", align 1
@.panic_msg.144 = internal constant [56 x i8] c"Dereference of null pointer, 'void**)arg.ptr' was null.\00", align 1
@"$ct.bool" = linkonce global %.introspect { i8 1, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.145 = internal constant [45 x i8] c"Dereference of null pointer, 'arg' was null.\00", align 1
@"$ct.float" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.double" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.func.146 = internal constant [15 x i8] c"float_from_any\00", align 1
@.panic_msg.147 = internal constant [49 x i8] c"Dereference of null pointer, 'len_ptr' was null.\00", align 1
@.func.148 = internal constant [12 x i8] c"simple_atoi\00", align 1
@.panic_msg.149 = internal constant [45 x i8] c"Dereference of null pointer, '--s' was null.\00", align 1
@.func.150 = internal constant [6 x i8] c"fmt_u\00", align 1
@.panic_msg.151 = internal constant [51 x i8] c"Dereference of null pointer, 'index_ptr' was null.\00", align 1
@.func.152 = internal constant [26 x i8] c"printf_parse_format_field\00", align 1
@.panic_msg.153 = internal constant [56 x i8] c"Dereference of null pointer, 'args_index_ptr' was null.\00", align 1
@.str.154 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.155 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.156 = private unnamed_addr constant [26 x i8] c"printf_parse_format_field\00", align 1
@.func.157 = internal constant [7 x i8] c"adjust\00", align 1
@.func.158 = internal constant [11 x i8] c"out_substr\00", align 1
@.func.159 = internal constant [4 x i8] c"pad\00", align 1
@.func.160 = internal constant [10 x i8] c"out_chars\00", align 1
@.func.161 = internal constant [5 x i8] c"etoa\00", align 1
@.func.162 = internal constant [5 x i8] c"ftoa\00", align 1
@.func.163 = internal constant [5 x i8] c"gtoa\00", align 1
@.func.164 = internal constant [5 x i8] c"atoa\00", align 1
@.func.165 = internal constant [12 x i8] c"floatformat\00", align 1
@floatformat.BUF_SIZE = internal unnamed_addr constant i32 126, align 4, !dbg !16
@.str.166 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.167 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.168 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.169 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.170 = internal constant [48 x i8] c"Dereference of null pointer, '--estr' was null.\00", align 1
@.panic_msg.171 = internal constant [45 x i8] c"Dereference of null pointer, 's++' was null.\00", align 1
@.str.172 = private unnamed_addr constant [3 x i8] c"0X\00", align 1
@.str.173 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.174 = internal constant [43 x i8] c"Dereference of null pointer, 'd' was null.\00", align 1
@.panic_msg.175 = internal constant [45 x i8] c"Dereference of null pointer, '--a' was null.\00", align 1
@.panic_msg.176 = internal constant [43 x i8] c"Dereference of null pointer, 'a' was null.\00", align 1
@.panic_msg.177 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.178 = internal constant [18 x i8] c"Division by zero.\00", align 1
@.panic_msg.179 = internal constant [45 x i8] c"Dereference of null pointer, 'd--' was null.\00", align 1
@.func.180 = internal constant [5 x i8] c"ntoa\00", align 1
@.func.181 = internal constant [12 x i8] c"ntoa_format\00", align 1
@.str.182 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.183 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.184 = private unnamed_addr constant [22 x i8] c"Formatter.ntoa_format\00", align 1
@.panic_msg.185 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.func.186 = internal constant [9 x i8] c"ntoa_any\00", align 1
@.func.187 = internal constant [9 x i8] c"out_char\00", align 1
@.str.188 = private unnamed_addr constant [11 x i8] c"<NOT CHAR>\00", align 1
@.str.189 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.190 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.191 = private unnamed_addr constant [19 x i8] c"Formatter.out_char\00", align 1
@.func.192 = internal constant [12 x i8] c"out_reverse\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", comdat, align 1
@.panic_msg.193 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@.file.194 = internal constant [6 x i8] c"io.c3\00", align 1
@.func.195 = internal constant [9 x i8] c"fprintfn\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", comdat, align 1
@.panic_msg.196 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@.panic_msg.197 = internal constant [48 x i8] c"Dereference of null pointer, 'stream' was null.\00", align 1
@.func.198 = internal constant [17 x i8] c"out_putstream_fn\00", align 1
@.func.199 = internal constant [8 x i8] c"bprintf\00", align 1
@.func.200 = internal constant [14 x i8] c"out_buffer_fn\00", align 1
@stdout.file = internal global %File zeroinitializer, align 8, !dbg !18
@stderr.file = internal global %File zeroinitializer, align 8, !dbg !26
@stdin.file = internal global %File zeroinitializer, align 8, !dbg !28
@.file.201 = internal constant [10 x i8] c"buffer.c3\00", align 1
@.panic_msg.202 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.203 = internal constant [89 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.func.204 = internal constant [9 x i8] c"str_view\00", align 1
@.func.205 = internal constant [6 x i8] c"close\00", align 1
@"$sel.close" = linkonce_odr constant [6 x i8] c"close\00", comdat, align 1
@.panic_msg.206 = internal constant [43 x i8] c"No method 'close' could be found on target\00", align 1
@.func.207 = internal constant [5 x i8] c"read\00", align 1
@"$sel.read" = linkonce_odr constant [5 x i8] c"read\00", comdat, align 1
@.panic_msg.208 = internal constant [42 x i8] c"No method 'read' could be found on target\00", align 1
@.panic_msg.209 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@.func.210 = internal constant [10 x i8] c"read_byte\00", align 1
@.func.211 = internal constant [7 x i8] c"refill\00", align 1
@.panic_msg.212 = internal constant [64 x i8] c"@require \22bytes.len > 0\22 violated: 'Non-empty buffer required'.\00", align 1
@.func.213 = internal constant [6 x i8] c"write\00", align 1
@.func.214 = internal constant [11 x i8] c"write_byte\00", align 1
@.func.215 = internal constant [14 x i8] c"write_pending\00", align 1
@.file.216 = internal constant [14 x i8] c"bytebuffer.c3\00", align 1
@.func.217 = internal constant [9 x i8] c"new_init\00", align 1
@.panic_msg.218 = internal constant [72 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Buffer already initialized.'.\00", align 1
@.func.219 = internal constant [10 x i8] c"temp_init\00", align 1
@std.core.mem.allocator.thread_temp_allocator = external thread_local global ptr, align 8
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, comdat, align 8
@.func.220 = internal constant [17 x i8] c"init_with_buffer\00", align 1
@.panic_msg.221 = internal constant [33 x i8] c"@require \22buf.len > 0\22 violated.\00", align 1
@.func.222 = internal constant [5 x i8] c"free\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", comdat, align 1
@.panic_msg.223 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.file.224 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.panic_msg.225 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.func.226 = internal constant [14 x i8] c"pushback_byte\00", align 1
@.panic_msg.227 = internal constant [17 x i8] c"Assert violation\00", align 1
@.func.228 = internal constant [5 x i8] c"seek\00", align 1
@.func.229 = internal constant [10 x i8] c"available\00", align 1
@.func.230 = internal constant [5 x i8] c"grow\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", comdat, align 1
@.panic_msg.231 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", comdat, align 1
@.panic_msg.232 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.file.233 = internal constant [14 x i8] c"bytereader.c3\00", align 1
@.func.234 = internal constant [4 x i8] c"len\00", align 1
@.panic_msg.235 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.236 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.237 = internal constant [9 x i8] c"write_to\00", align 1
@.file.238 = internal constant [14 x i8] c"bytewriter.c3\00", align 1
@.panic_msg.239 = internal constant [53 x i8] c"@ensure \22(bool)allocator, self.index == 0\22 violated.\00", align 1
@.panic_msg.240 = internal constant [36 x i8] c"@ensure \22self.index == 0\22 violated.\00", align 1
@.func.241 = internal constant [8 x i8] c"destroy\00", align 1
@.func.242 = internal constant [16 x i8] c"ensure_capacity\00", align 1
@.func.243 = internal constant [10 x i8] c"read_from\00", align 1
@"$sel.available" = linkonce_odr constant [10 x i8] c"available\00", comdat, align 1
@.panic_msg.244 = internal constant [47 x i8] c"No method 'available' could be found on target\00", align 1
@.file.245 = internal constant [15 x i8] c"limitreader.c3\00", align 1
@.file.246 = internal constant [15 x i8] c"multireader.c3\00", align 1
@.panic_msg.247 = internal constant [91 x i8] c"@require \22self.readers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.file.248 = internal constant [15 x i8] c"multiwriter.c3\00", align 1
@.panic_msg.249 = internal constant [37 x i8] c"@require \22writers.len > 0\22 violated.\00", align 1
@.panic_msg.250 = internal constant [91 x i8] c"@require \22self.writers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.251 = internal constant [54 x i8] c"Dereference of null pointer, 'self.writers' was null.\00", align 1
@.file.252 = internal constant [11 x i8] c"scanner.c3\00", align 1
@.panic_msg.253 = internal constant [66 x i8] c"@require \22buffer.len > 0\22 violated: 'Non-empty buffer required.'.\00", align 1
@.func.254 = internal constant [5 x i8] c"scan\00", align 1
@.panic_msg.255 = internal constant [68 x i8] c"@require \22pattern.len > 0\22 violated: 'Non-empty pattern required.'.\00", align 1
@.panic_msg.256 = internal constant [70 x i8] c"@require \22self.buf.len > pattern.len\22 violated: 'Pattern too large.'.\00", align 1
@.file.257 = internal constant [13 x i8] c"teereader.c3\00", align 1
@std.io.MAX_VARS = internal unnamed_addr constant { [2 x i8], i8, i8, i8, [3 x i8], i8 } { [2 x i8] zeroinitializer, i8 3, i8 0, i8 5, [3 x i8] zeroinitializer, i8 10 }, align 1, !dbg !30
@"$sel.seek" = linkonce_odr constant [5 x i8] c"seek\00", comdat, align 1
@.panic_msg.258 = internal constant [42 x i8] c"No method 'seek' could be found on target\00", align 1
@.func.259 = internal constant [8 x i8] c"copy_to\00", align 1
@"$sel.write_to" = linkonce_odr constant [9 x i8] c"write_to\00", comdat, align 1
@.panic_msg.260 = internal constant [46 x i8] c"No method 'write_to' could be found on target\00", align 1
@"$sel.read_to" = linkonce_odr constant [8 x i8] c"read_to\00", comdat, align 1
@.panic_msg.261 = internal constant [45 x i8] c"No method 'read_to' could be found on target\00", align 1
@"$ct.dyn.std.core.ReflectedParam.to_format" = weak_odr global { ptr, ptr, ptr } { ptr @std.core.ReflectedParam.to_format, ptr @"$sel.to_format", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.ReflectedParam" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ReadBuffer.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ReadBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.flush" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.WriteBuffer.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.WriteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.pushback_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.pushback_byte" = linkonce_odr constant [14 x i8] c"pushback_byte\00", comdat, align 1
@"$ct.dyn.std.io.ByteBuffer.seek" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteBuffer.available" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteBuffer.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.len" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.len, ptr @"$sel.len", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.len" = linkonce_odr constant [4 x i8] c"len\00", comdat, align 1
@"$ct.dyn.std.io.ByteReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.pushback_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.pushback_byte, ptr @"$sel.pushback_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.seek" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.seek, ptr @"$sel.seek", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.write_to" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.write_to, ptr @"$sel.write_to", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteReader.available" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.destroy" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.destroy, ptr @"$sel.destroy", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.destroy" = linkonce_odr constant [8 x i8] c"destroy\00", comdat, align 1
@"$ct.dyn.std.io.ByteWriter.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.ByteWriter.read_from" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.ByteWriter.read_from, ptr @"$sel.read_from", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.read_from" = linkonce_odr constant [10 x i8] c"read_from\00", comdat, align 1
@"$ct.dyn.std.io.LimitReader.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.LimitReader.available" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.LimitReader.available, ptr @"$sel.available", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiWriter.write" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write, ptr @"$sel.write", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.MultiWriter.write_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.MultiWriter.write_byte, ptr @"$sel.write_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.flush" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.flush, ptr @"$sel.flush", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.close" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.close, ptr @"$sel.close", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.Scanner.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.Scanner.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read, ptr @"$sel.read", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.io.TeeReader.read_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.io.TeeReader.read_byte, ptr @"$sel.read_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.BitReader.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !80 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.assign_list = alloca %BitReader, align 8
  %2 = icmp eq ptr %0, null, !dbg !96
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !96
  br i1 %3, label %panic, label %checkok, !dbg !96

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !97, !DIExpression(), !98)
    #dbg_declare(ptr %1, !99, !DIExpression(), !98)
  %4 = load ptr, ptr %self, align 8, !dbg !100
  %checknull = icmp eq ptr %4, null, !dbg !100
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !100
  br i1 %5, label %panic3, label %checkok7, !dbg !100

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !100
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !100
  ret void, !dbg !100

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 10), !dbg !98
  unreachable, !dbg !98

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 12), !dbg !100
  unreachable, !dbg !100
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.BitReader.clear(ptr %0) #0 comdat !dbg !101 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !104
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !104
  br i1 %2, label %panic, label %checkok, !dbg !104

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !105, !DIExpression(), !106)
  %3 = load ptr, ptr %self, align 8, !dbg !107
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !107
  store i32 0, ptr %ptradd, align 4, !dbg !107
  ret void, !dbg !107

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 15), !dbg !106
  unreachable, !dbg !106
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.BitReader.read_bits(ptr %0, ptr %1, i32 %2) #0 comdat !dbg !108 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nbits = alloca i32, align 4
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %bits = alloca i32, align 4
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  %mask = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg28 = alloca %"any[]", align 8
  %taddr31 = alloca i32, align 4
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [1 x %any], align 16
  %indirectarg37 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr44 = alloca i32, align 4
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [1 x %any], align 16
  %indirectarg50 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !114
  %3 = icmp eq ptr %1, null, !dbg !114
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !114
  br i1 %4, label %panic, label %checkok, !dbg !114

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !115, !DIExpression(), !116)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !117, !DIExpression(), !116)
  %5 = load i32, ptr %nbits, align 4, !dbg !118
  %ge = icmp uge i32 8, %5, !dbg !118
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !118

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.39, i64 31 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 21), !dbg !118
  unreachable, !dbg !118

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !120
  %ptradd = getelementptr inbounds i8, ptr %7, i64 20, !dbg !120
  %8 = load i32, ptr %ptradd, align 4, !dbg !120
  %9 = load i32, ptr %nbits, align 4, !dbg !120
  %add = add i32 %8, %9, !dbg !120
  %zext = zext i32 %add to i64, !dbg !120
  %ge6 = icmp uge i64 32, %zext, !dbg !120
  br i1 %ge6, label %assert_ok11, label %assert_fail7, !dbg !120

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.40, i64 56 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %indirectarg10, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 22), !dbg !120
  unreachable, !dbg !120

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %bits, !121, !DIExpression(), !122)
  %11 = load ptr, ptr %self, align 8, !dbg !122
  %ptradd12 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !122
  %12 = load i32, ptr %ptradd12, align 8, !dbg !122
  store i32 %12, ptr %bits, align 4, !dbg !122
  %13 = load ptr, ptr %self, align 8, !dbg !123
  %ptradd13 = getelementptr inbounds i8, ptr %13, i64 20, !dbg !123
  %14 = load i32, ptr %ptradd13, align 4, !dbg !123
  %15 = load i32, ptr %nbits, align 4, !dbg !123
  %lt = icmp ult i32 %14, %15, !dbg !123
  br i1 %lt, label %if.then, label %if.exit, !dbg !123

if.then:                                          ; preds = %assert_ok11
    #dbg_declare(ptr %c, !124, !DIExpression(), !126)
  %16 = load ptr, ptr %self, align 8, !dbg !126
  %ptradd14 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !126
  %17 = load i64, ptr %ptradd14, align 8, !dbg !126
  %18 = inttoptr i64 %17 to ptr, !dbg !126
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !114
  %19 = icmp eq ptr %18, %type, !dbg !114
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !114

cache_miss:                                       ; preds = %if.then
  %ptradd15 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !114
  %20 = load ptr, ptr %ptradd15, align 8, !dbg !114
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.read_byte"), !dbg !114
  store ptr %21, ptr %.inlinecache, align 8, !dbg !114
  store ptr %18, ptr %.cachedtype, align 8, !dbg !114
  br label %22, !dbg !114

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !114
  br label %22, !dbg !114

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !114
  %23 = icmp eq ptr %fn_phi, null, !dbg !114
  br i1 %23, label %missing_function, label %match, !dbg !114

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.41, i64 46 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %indirectarg18, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 30), !dbg !126
  unreachable, !dbg !126

match:                                            ; preds = %22
  %25 = load ptr, ptr %16, align 8
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25), !dbg !126
  %not_err = icmp eq i64 %26, 0, !dbg !126
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !126
  br i1 %27, label %after_check, label %assign_optional, !dbg !126

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !126
  br label %guard_block, !dbg !126

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !126

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !126
  ret i64 %28, !dbg !126

noerr_block:                                      ; preds = %after_check
  %29 = load i8, ptr %retparam, align 1, !dbg !126
  store i8 %29, ptr %c, align 1, !dbg !126
  %30 = load i32, ptr %bits, align 4, !dbg !127
  %shl = shl i32 %30, 8, !dbg !127
  %31 = freeze i32 %shl, !dbg !127
  store i32 %31, ptr %bits, align 4, !dbg !127
  %32 = load i32, ptr %bits, align 4, !dbg !128
  %33 = load i8, ptr %c, align 1, !dbg !128
  %zext19 = zext i8 %33 to i32, !dbg !128
  %or = or i32 %32, %zext19, !dbg !128
  store i32 %or, ptr %bits, align 4, !dbg !128
  %34 = load ptr, ptr %self, align 8, !dbg !129
  %ptradd20 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !129
  %35 = load i32, ptr %bits, align 4, !dbg !129
  store i32 %35, ptr %ptradd20, align 8, !dbg !129
  %36 = load ptr, ptr %self, align 8, !dbg !130
  %ptradd21 = getelementptr inbounds i8, ptr %36, i64 20, !dbg !130
  %37 = load i32, ptr %ptradd21, align 4, !dbg !130
  %add22 = add i32 %37, 8, !dbg !130
  store i32 %add22, ptr %ptradd21, align 4, !dbg !130
  br label %if.exit, !dbg !130

if.exit:                                          ; preds = %noerr_block, %assert_ok11
  %38 = load ptr, ptr %self, align 8, !dbg !131
  %ptradd23 = getelementptr inbounds i8, ptr %38, i64 20, !dbg !131
  %39 = load i32, ptr %ptradd23, align 4, !dbg !131
  %40 = load i32, ptr %nbits, align 4, !dbg !131
  %sub = sub i32 %39, %40, !dbg !131
  store i32 %sub, ptr %ptradd23, align 4, !dbg !131
    #dbg_declare(ptr %mask, !132, !DIExpression(), !133)
  %41 = load i32, ptr %nbits, align 4, !dbg !133
  %shift_underflow = icmp slt i32 %41, 0, !dbg !133
  %42 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !133
  br i1 %42, label %panic24, label %checkok29, !dbg !133

checkok29:                                        ; preds = %if.exit
  %shift_exceeds = icmp sge i32 %41, 32, !dbg !133
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !133
  br i1 %43, label %panic30, label %checkok38, !dbg !133

checkok38:                                        ; preds = %checkok29
  %shl39 = shl i32 1, %41, !dbg !133
  %44 = freeze i32 %shl39, !dbg !133
  %sub40 = sub i32 %44, 1, !dbg !133
  store i32 %sub40, ptr %mask, align 4, !dbg !133
  %45 = load i32, ptr %bits, align 4, !dbg !134
  %46 = load ptr, ptr %self, align 8, !dbg !134
  %ptradd41 = getelementptr inbounds i8, ptr %46, i64 20, !dbg !134
  %47 = load i32, ptr %ptradd41, align 4, !dbg !134
  %shift_exceeds42 = icmp uge i32 %47, 32, !dbg !134
  %48 = call i1 @llvm.expect.i1(i1 %shift_exceeds42, i1 false), !dbg !134
  br i1 %48, label %panic43, label %checkok51, !dbg !134

checkok51:                                        ; preds = %checkok38
  %lshr = lshr i32 %45, %47, !dbg !134
  %49 = freeze i32 %lshr, !dbg !134
  %50 = load i32, ptr %mask, align 4, !dbg !134
  %and = and i32 %49, %50, !dbg !134
  %trunc = trunc i32 %and to i8, !dbg !134
  store i8 %trunc, ptr %0, align 1, !dbg !134
  ret i64 0, !dbg !134

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 24), !dbg !116
  unreachable, !dbg !116

panic24:                                          ; preds = %if.exit
  store i32 %41, ptr %taddr, align 4
  %52 = insertvalue %any undef, ptr %taddr, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %indirectarg27, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg28, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 37, ptr align 8 %indirectarg28), !dbg !133
  unreachable, !dbg !133

panic30:                                          ; preds = %checkok29
  store i32 %41, ptr %taddr31, align 4
  %55 = insertvalue %any undef, ptr %taddr31, 0
  %56 = insertvalue %any %55, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %indirectarg34, align 8
  store %any %56, ptr %varargslots35, align 16
  %57 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp36" = insertvalue %"any[]" %57, i64 1, 1
  store %"any[]" %"$$temp36", ptr %indirectarg37, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 37, ptr align 8 %indirectarg37), !dbg !133
  unreachable, !dbg !133

panic43:                                          ; preds = %checkok38
  store i32 %47, ptr %taddr44, align 4
  %58 = insertvalue %any undef, ptr %taddr44, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %indirectarg47, align 8
  store %any %59, ptr %varargslots48, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp49" = insertvalue %"any[]" %60, i64 1, 1
  store %"any[]" %"$$temp49", ptr %indirectarg50, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 38, ptr align 8 %indirectarg50), !dbg !134
  unreachable, !dbg !134
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.BitWriter.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !135 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.assign_list = alloca %BitWriter, align 8
  %2 = icmp eq ptr %0, null, !dbg !148
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !148
  br i1 %3, label %panic, label %checkok, !dbg !148

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !149, !DIExpression(), !150)
    #dbg_declare(ptr %1, !151, !DIExpression(), !150)
  %4 = load ptr, ptr %self, align 8, !dbg !152
  %checknull = icmp eq ptr %4, null, !dbg !152
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !152
  br i1 %5, label %panic3, label %checkok7, !dbg !152

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !152
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !152
  ret void, !dbg !152

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 52), !dbg !150
  unreachable, !dbg !150

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 54), !dbg !152
  unreachable, !dbg !152
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.BitWriter.flush(ptr %0) #0 comdat !dbg !153 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %padding = alloca i32, align 4
  %bits = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %n = alloca i32, align 4
  %buffer = alloca [4 x i8], align 1
  %x = alloca i32, align 4
  %bytes = alloca ptr, align 8
  %bytes15 = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %s = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %expr = alloca i32, align 4
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %stream = alloca %any, align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %buffer50 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %n55 = alloca i64, align 8
  %error_var56 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg62 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !156
  %1 = icmp eq ptr %0, null, !dbg !156
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !156
  br i1 %2, label %panic, label %checkok, !dbg !156

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !157, !DIExpression(), !158)
  %3 = load ptr, ptr %self, align 8, !dbg !159
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !159
  %4 = load i32, ptr %ptradd, align 4, !dbg !159
  %eq = icmp eq i32 0, %4, !dbg !159
  br i1 %eq, label %if.then, label %if.exit, !dbg !159

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %padding, !160, !DIExpression(), !161)
  %5 = load ptr, ptr %self, align 8, !dbg !161
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 20, !dbg !161
  %6 = load i32, ptr %ptradd3, align 4, !dbg !161
  %zext = zext i32 %6 to i64, !dbg !161
  %sub = sub i64 32, %zext, !dbg !161
  %trunc = trunc i64 %sub to i32, !dbg !161
  store i32 %trunc, ptr %padding, align 4, !dbg !161
    #dbg_declare(ptr %bits, !162, !DIExpression(), !163)
  %7 = load ptr, ptr %self, align 8, !dbg !163
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !163
  %8 = load i32, ptr %ptradd4, align 8, !dbg !163
  %9 = load i32, ptr %padding, align 4, !dbg !163
  %shift_exceeds = icmp uge i32 %9, 32, !dbg !163
  %10 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !163
  br i1 %10, label %panic5, label %checkok10, !dbg !163

checkok10:                                        ; preds = %if.exit
  %shl = shl i32 %8, %9, !dbg !163
  %11 = freeze i32 %shl, !dbg !163
  store i32 %11, ptr %bits, align 4, !dbg !163
    #dbg_declare(ptr %n, !164, !DIExpression(), !165)
  %12 = load ptr, ptr %self, align 8, !dbg !165
  %ptradd11 = getelementptr inbounds i8, ptr %12, i64 20, !dbg !165
  %13 = load i32, ptr %ptradd11, align 4, !dbg !165
  %add = add i32 %13, 7, !dbg !165
  %sdiv = sdiv i32 %add, 8, !dbg !165
  store i32 %sdiv, ptr %n, align 4, !dbg !165
    #dbg_declare(ptr %buffer, !166, !DIExpression(), !170)
  store i8 0, ptr %buffer, align 1, !dbg !170
  %ptradd12 = getelementptr inbounds i8, ptr %buffer, i64 1, !dbg !170
  store i8 0, ptr %ptradd12, align 1, !dbg !170
  %ptradd13 = getelementptr inbounds i8, ptr %buffer, i64 2, !dbg !170
  store i8 0, ptr %ptradd13, align 1, !dbg !170
  %ptradd14 = getelementptr inbounds i8, ptr %buffer, i64 3, !dbg !170
  store i8 0, ptr %ptradd14, align 1, !dbg !170
  %14 = load i32, ptr %bits, align 4
  store i32 %14, ptr %x, align 4
  store ptr %buffer, ptr %bytes, align 8
  %15 = load ptr, ptr %bytes, align 8
  store ptr %15, ptr %bytes15, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !171

assert_fail:                                      ; preds = %checkok10
  store %"char[]" { ptr @.panic_msg.44, i64 117 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.45, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg18, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 107), !dbg !174
  unreachable, !dbg !174

assert_ok:                                        ; preds = %checkok10
    #dbg_declare(ptr %s, !178, !DIExpression(), !185)
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !185
  %17 = load ptr, ptr %bytes, align 8, !dbg !186
  %checknull = icmp eq ptr %17, null, !dbg !186
  %18 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !186
  br i1 %18, label %panic19, label %checkok23, !dbg !186

checkok23:                                        ; preds = %assert_ok
  %19 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !186
  %20 = insertvalue %"char[]" %19, i64 4, 1, !dbg !186
  store %"char[]" %20, ptr %s, align 8, !dbg !186
  %21 = load ptr, ptr %s, align 8, !dbg !187
  %checknull24 = icmp eq ptr %21, null, !dbg !187
  %22 = call i1 @llvm.expect.i1(i1 %checknull24, i1 false), !dbg !187
  br i1 %22, label %panic25, label %checkok29, !dbg !187

checkok29:                                        ; preds = %checkok23
  %23 = load i32, ptr %x, align 4
  store i32 %23, ptr %expr, align 4
  %checknull30 = icmp eq ptr %expr, null, !dbg !188
  %24 = call i1 @llvm.expect.i1(i1 %checknull30, i1 false), !dbg !188
  br i1 %24, label %panic31, label %checkok35, !dbg !188

checkok35:                                        ; preds = %checkok29
  %25 = load i32, ptr %expr, align 4, !dbg !188
  %26 = call i32 @llvm.bswap.i32(i32 %25), !dbg !188
  store i32 %26, ptr %21, align 4, !dbg !188
  %27 = load ptr, ptr %self, align 8, !dbg !191
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %stream, ptr align 8 %27, i32 16, i1 false)
  %28 = load i32, ptr %n, align 4, !dbg !191
  %zext36 = zext i32 %28 to i64, !dbg !191
  %add37 = add i64 0, %zext36, !dbg !191
  %lt = icmp ult i64 4, %add37, !dbg !191
  %sub38 = sub i64 %add37, 1, !dbg !191
  %29 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !191
  br i1 %29, label %panic39, label %checkok49, !dbg !191

checkok49:                                        ; preds = %checkok35
  %size = sub i64 %add37, 0, !dbg !191
  %30 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !191
  %31 = insertvalue %"char[]" %30, i64 %size, 1, !dbg !191
  store %"char[]" %31, ptr %buffer50, align 8
  %ptradd51 = getelementptr inbounds i8, ptr %buffer50, i64 8, !dbg !192
  %32 = load i64, ptr %ptradd51, align 8, !dbg !192
  %eq52 = icmp eq i64 0, %32, !dbg !192
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !192

if.then53:                                        ; preds = %checkok49
  store i64 0, ptr %blockret, align 8, !dbg !192
  br label %expr_block.exit, !dbg !192

if.exit54:                                        ; preds = %checkok49
    #dbg_declare(ptr %n55, !194, !DIExpression(), !195)
  %ptradd57 = getelementptr inbounds i8, ptr %stream, i64 8, !dbg !195
  %33 = load i64, ptr %ptradd57, align 8, !dbg !195
  %34 = inttoptr i64 %33 to ptr, !dbg !195
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !156
  %35 = icmp eq ptr %34, %type, !dbg !156
  br i1 %35, label %cache_hit, label %cache_miss, !dbg !156

cache_miss:                                       ; preds = %if.exit54
  %ptradd58 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !156
  %36 = load ptr, ptr %ptradd58, align 8, !dbg !156
  %37 = call ptr @.dyn_search(ptr %36, ptr @"$sel.write"), !dbg !156
  store ptr %37, ptr %.inlinecache, align 8, !dbg !156
  store ptr %34, ptr %.cachedtype, align 8, !dbg !156
  br label %38, !dbg !156

cache_hit:                                        ; preds = %if.exit54
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !156
  br label %38, !dbg !156

38:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %37, %cache_miss ], !dbg !156
  %39 = icmp eq ptr %fn_phi, null, !dbg !156
  br i1 %39, label %missing_function, label %match, !dbg !156

missing_function:                                 ; preds = %38
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg61, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 102), !dbg !195
  unreachable, !dbg !195

match:                                            ; preds = %38
  %41 = load ptr, ptr %stream, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg62, ptr align 8 %buffer50, i32 16, i1 false)
  %42 = call i64 %fn_phi(ptr %retparam, ptr %41, ptr align 8 %indirectarg62), !dbg !195
  %not_err = icmp eq i64 %42, 0, !dbg !195
  %43 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !195
  br i1 %43, label %after_check, label %assign_optional, !dbg !195

assign_optional:                                  ; preds = %match
  store i64 %42, ptr %error_var56, align 8, !dbg !195
  br label %guard_block, !dbg !195

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !195

guard_block:                                      ; preds = %assign_optional
  %44 = load i64, ptr %error_var56, align 8, !dbg !195
  store i64 %44, ptr %error_var, align 8, !dbg !195
  br label %guard_block66, !dbg !195

noerr_block:                                      ; preds = %after_check
  %45 = load i64, ptr %retparam, align 8, !dbg !195
  store i64 %45, ptr %n55, align 8, !dbg !195
  %46 = load i64, ptr %n55, align 8, !dbg !196
  %ptradd63 = getelementptr inbounds i8, ptr %buffer50, i64 8, !dbg !196
  %47 = load i64, ptr %ptradd63, align 8, !dbg !196
  %neq = icmp ne i64 %46, %47, !dbg !196
  br i1 %neq, label %if.then64, label %if.exit65, !dbg !196

if.then64:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %error_var, align 8, !dbg !196
  br label %guard_block66, !dbg !196

if.exit65:                                        ; preds = %noerr_block
  %48 = load i64, ptr %n55, align 8, !dbg !197
  store i64 %48, ptr %blockret, align 8, !dbg !197
  br label %expr_block.exit, !dbg !197

expr_block.exit:                                  ; preds = %if.exit65, %if.then53
  br label %noerr_block67, !dbg !197

guard_block66:                                    ; preds = %if.then64, %guard_block
  %49 = load i64, ptr %error_var, align 8, !dbg !197
  ret i64 %49, !dbg !197

noerr_block67:                                    ; preds = %expr_block.exit
  %50 = load ptr, ptr %self, align 8, !dbg !198
  %ptradd68 = getelementptr inbounds i8, ptr %50, i64 20, !dbg !198
  store i32 0, ptr %ptradd68, align 4, !dbg !198
  ret i64 0, !dbg !198

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 57), !dbg !158
  unreachable, !dbg !158

panic5:                                           ; preds = %if.exit
  store i32 %9, ptr %taddr, align 4
  %52 = insertvalue %any undef, ptr %taddr, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg8, align 8
  store %any %53, ptr %varargslots, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 62, ptr align 8 %indirectarg9), !dbg !163
  unreachable, !dbg !163

panic19:                                          ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.46, i64 46 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.45, i64 11 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg22, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 115), !dbg !186
  unreachable, !dbg !186

panic25:                                          ; preds = %checkok23
  store %"char[]" { ptr @.panic_msg.47, i64 58 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.45, i64 11 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg28, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 119), !dbg !187
  unreachable, !dbg !187

panic31:                                          ; preds = %checkok29
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg34, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 212), !dbg !188
  unreachable, !dbg !188

panic39:                                          ; preds = %checkok35
  store i64 %sub38, ptr %taddr40, align 8
  %58 = insertvalue %any undef, ptr %taddr40, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr41, align 8
  %60 = insertvalue %any undef, ptr %taddr41, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg44, align 8
  store %any %59, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %61, ptr %ptradd46, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 66, ptr align 8 %indirectarg48), !dbg !191
  unreachable, !dbg !191
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.BitWriter.write_bits(ptr %0, i32 %1, i32 %2) #0 comdat !dbg !199 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bits = alloca i32, align 4
  %nbits = alloca i32, align 4
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %to_push = alloca i32, align 4
  %bits_to_push = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %taddr15 = alloca i32, align 4
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [1 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %taddr25 = alloca i32, align 4
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %varargslots29 = alloca [1 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr37 = alloca i32, align 4
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [1 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %reterr52 = alloca i64, align 8
  %taddr57 = alloca i32, align 4
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %varargslots61 = alloca [1 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %taddr69 = alloca i32, align 4
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %varargslots73 = alloca [1 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr79 = alloca i32, align 4
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %varargslots83 = alloca [1 x %any], align 16
  %indirectarg85 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !202
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !202
  br i1 %4, label %panic, label %checkok, !dbg !202

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !203, !DIExpression(), !204)
  store i32 %1, ptr %bits, align 4
    #dbg_declare(ptr %bits, !205, !DIExpression(), !204)
  store i32 %2, ptr %nbits, align 4
    #dbg_declare(ptr %nbits, !206, !DIExpression(), !204)
  %5 = load i32, ptr %nbits, align 4, !dbg !207
  %ge = icmp uge i32 32, %5, !dbg !207
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !207

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.54, i64 32 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 71), !dbg !207
  unreachable, !dbg !207

assert_ok:                                        ; preds = %checkok
  %7 = load i32, ptr %nbits, align 4, !dbg !209
  %eq = icmp eq i32 0, %7, !dbg !209
  br i1 %eq, label %if.then, label %if.exit, !dbg !209

if.then:                                          ; preds = %assert_ok
  ret i64 0

if.exit:                                          ; preds = %assert_ok
  br label %loop.cond, !dbg !210

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !211
  %ptradd = getelementptr inbounds i8, ptr %8, i64 20, !dbg !211
  %9 = load i32, ptr %ptradd, align 4, !dbg !211
  %10 = load i32, ptr %nbits, align 4, !dbg !211
  %add = add i32 %9, %10, !dbg !211
  %lt = icmp ult i32 24, %add, !dbg !211
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !211

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %to_push, !213, !DIExpression(), !215)
  %11 = load ptr, ptr %self, align 8, !dbg !215
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 20, !dbg !215
  %12 = load i32, ptr %ptradd6, align 4, !dbg !215
  %sub = sub i32 24, %12, !dbg !215
  store i32 %sub, ptr %to_push, align 4, !dbg !215
    #dbg_declare(ptr %bits_to_push, !216, !DIExpression(), !217)
  %13 = load i32, ptr %bits, align 4, !dbg !217
  %14 = load i32, ptr %nbits, align 4, !dbg !217
  %15 = load i32, ptr %to_push, align 4, !dbg !217
  %sub7 = sub i32 %14, %15, !dbg !217
  %shift_exceeds = icmp uge i32 %sub7, 32, !dbg !217
  %16 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !217
  br i1 %16, label %panic8, label %checkok13, !dbg !217

checkok13:                                        ; preds = %loop.body
  %lshr = lshr i32 %13, %sub7, !dbg !217
  %17 = freeze i32 %lshr, !dbg !217
  %18 = load i32, ptr %to_push, align 4, !dbg !217
  %shift_underflow = icmp slt i32 %18, 0, !dbg !217
  %19 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !217
  br i1 %19, label %panic14, label %checkok22, !dbg !217

checkok22:                                        ; preds = %checkok13
  %shift_exceeds23 = icmp sge i32 %18, 32, !dbg !217
  %20 = call i1 @llvm.expect.i1(i1 %shift_exceeds23, i1 false), !dbg !217
  br i1 %20, label %panic24, label %checkok32, !dbg !217

checkok32:                                        ; preds = %checkok22
  %shl = shl i32 1, %18, !dbg !217
  %21 = freeze i32 %shl, !dbg !217
  %sub33 = sub i32 %21, 1, !dbg !217
  %and = and i32 %17, %sub33, !dbg !217
  store i32 %and, ptr %bits_to_push, align 4, !dbg !217
  %22 = load ptr, ptr %self, align 8, !dbg !218
  %ptradd34 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !218
  %23 = load i32, ptr %ptradd34, align 8, !dbg !218
  %24 = load i32, ptr %to_push, align 4, !dbg !218
  %shift_exceeds35 = icmp uge i32 %24, 32, !dbg !218
  %25 = call i1 @llvm.expect.i1(i1 %shift_exceeds35, i1 false), !dbg !218
  br i1 %25, label %panic36, label %checkok44, !dbg !218

checkok44:                                        ; preds = %checkok32
  %shl45 = shl i32 %23, %24, !dbg !218
  %26 = freeze i32 %shl45, !dbg !218
  store i32 %26, ptr %ptradd34, align 8, !dbg !218
  %27 = load ptr, ptr %self, align 8, !dbg !219
  %ptradd46 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !219
  %28 = load i32, ptr %ptradd46, align 8, !dbg !219
  %29 = load i32, ptr %bits_to_push, align 4, !dbg !219
  %or = or i32 %28, %29, !dbg !219
  store i32 %or, ptr %ptradd46, align 8, !dbg !219
  %30 = load ptr, ptr %self, align 8, !dbg !220
  %ptradd47 = getelementptr inbounds i8, ptr %30, i64 20, !dbg !220
  %31 = load i32, ptr %ptradd47, align 4, !dbg !220
  %32 = load i32, ptr %to_push, align 4, !dbg !220
  %add48 = add i32 %31, %32, !dbg !220
  store i32 %add48, ptr %ptradd47, align 4, !dbg !220
  %33 = load i32, ptr %nbits, align 4, !dbg !221
  %34 = load i32, ptr %to_push, align 4, !dbg !221
  %sub49 = sub i32 %33, %34, !dbg !221
  store i32 %sub49, ptr %nbits, align 4, !dbg !221
  %35 = load ptr, ptr %self, align 8, !dbg !222
  %36 = call i64 @std.io.BitWriter.flush(ptr %35), !dbg !222
  %not_err = icmp eq i64 %36, 0, !dbg !222
  %37 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !222
  br i1 %37, label %after_check, label %assign_optional, !dbg !222

assign_optional:                                  ; preds = %checkok44
  store i64 %36, ptr %error_var, align 8, !dbg !222
  br label %guard_block, !dbg !222

after_check:                                      ; preds = %checkok44
  br label %noerr_block, !dbg !222

guard_block:                                      ; preds = %assign_optional
  %38 = load i64, ptr %error_var, align 8, !dbg !222
  ret i64 %38, !dbg !222

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !222

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %nbits, align 4, !dbg !223
  %eq50 = icmp eq i32 0, %39, !dbg !223
  br i1 %eq50, label %if.then51, label %if.exit53, !dbg !223

if.then51:                                        ; preds = %loop.exit
  ret i64 0

if.exit53:                                        ; preds = %loop.exit
  %40 = load ptr, ptr %self, align 8, !dbg !224
  %ptradd54 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !224
  %41 = load i32, ptr %ptradd54, align 8, !dbg !224
  %42 = load i32, ptr %nbits, align 4, !dbg !224
  %shift_exceeds55 = icmp uge i32 %42, 32, !dbg !224
  %43 = call i1 @llvm.expect.i1(i1 %shift_exceeds55, i1 false), !dbg !224
  br i1 %43, label %panic56, label %checkok64, !dbg !224

checkok64:                                        ; preds = %if.exit53
  %shl65 = shl i32 %41, %42, !dbg !224
  %44 = freeze i32 %shl65, !dbg !224
  store i32 %44, ptr %ptradd54, align 8, !dbg !224
  %45 = load ptr, ptr %self, align 8, !dbg !225
  %ptradd66 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !225
  %46 = load i32, ptr %ptradd66, align 8, !dbg !225
  %47 = load i32, ptr %bits, align 4, !dbg !225
  %48 = load i32, ptr %nbits, align 4, !dbg !225
  %shift_underflow67 = icmp slt i32 %48, 0, !dbg !225
  %49 = call i1 @llvm.expect.i1(i1 %shift_underflow67, i1 false), !dbg !225
  br i1 %49, label %panic68, label %checkok76, !dbg !225

checkok76:                                        ; preds = %checkok64
  %shift_exceeds77 = icmp sge i32 %48, 32, !dbg !225
  %50 = call i1 @llvm.expect.i1(i1 %shift_exceeds77, i1 false), !dbg !225
  br i1 %50, label %panic78, label %checkok86, !dbg !225

checkok86:                                        ; preds = %checkok76
  %shl87 = shl i32 1, %48, !dbg !225
  %51 = freeze i32 %shl87, !dbg !225
  %sub88 = sub i32 %51, 1, !dbg !225
  %and89 = and i32 %47, %sub88, !dbg !225
  %or90 = or i32 %46, %and89, !dbg !225
  store i32 %or90, ptr %ptradd66, align 8, !dbg !225
  %52 = load ptr, ptr %self, align 8, !dbg !226
  %ptradd91 = getelementptr inbounds i8, ptr %52, i64 20, !dbg !226
  %53 = load i32, ptr %ptradd91, align 4, !dbg !226
  %54 = load i32, ptr %nbits, align 4, !dbg !226
  %add92 = add i32 %53, %54, !dbg !226
  store i32 %add92, ptr %ptradd91, align 4, !dbg !226
  ret i64 0, !dbg !226

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 73), !dbg !204
  unreachable, !dbg !204

panic8:                                           ; preds = %loop.body
  store i32 %sub7, ptr %taddr, align 4
  %56 = insertvalue %any undef, ptr %taddr, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg11, align 8
  store %any %57, ptr %varargslots, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %58, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 79, ptr align 8 %indirectarg12), !dbg !217
  unreachable, !dbg !217

panic14:                                          ; preds = %checkok13
  store i32 %18, ptr %taddr15, align 4
  %59 = insertvalue %any undef, ptr %taddr15, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg18, align 8
  store %any %60, ptr %varargslots19, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp20" = insertvalue %"any[]" %61, i64 1, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 79, ptr align 8 %indirectarg21), !dbg !217
  unreachable, !dbg !217

panic24:                                          ; preds = %checkok22
  store i32 %18, ptr %taddr25, align 4
  %62 = insertvalue %any undef, ptr %taddr25, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg28, align 8
  store %any %63, ptr %varargslots29, align 16
  %64 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp30" = insertvalue %"any[]" %64, i64 1, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 79, ptr align 8 %indirectarg31), !dbg !217
  unreachable, !dbg !217

panic36:                                          ; preds = %checkok32
  store i32 %24, ptr %taddr37, align 4
  %65 = insertvalue %any undef, ptr %taddr37, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg40, align 8
  store %any %66, ptr %varargslots41, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp42" = insertvalue %"any[]" %67, i64 1, 1
  store %"any[]" %"$$temp42", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 81, ptr align 8 %indirectarg43), !dbg !218
  unreachable, !dbg !218

panic56:                                          ; preds = %if.exit53
  store i32 %42, ptr %taddr57, align 4
  %68 = insertvalue %any undef, ptr %taddr57, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg60, align 8
  store %any %69, ptr %varargslots61, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp62" = insertvalue %"any[]" %70, i64 1, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 91, ptr align 8 %indirectarg63), !dbg !224
  unreachable, !dbg !224

panic68:                                          ; preds = %checkok64
  store i32 %48, ptr %taddr69, align 4
  %71 = insertvalue %any undef, ptr %taddr69, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg72, align 8
  store %any %72, ptr %varargslots73, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots73, 0
  %"$$temp74" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 92, ptr align 8 %indirectarg75), !dbg !225
  unreachable, !dbg !225

panic78:                                          ; preds = %checkok76
  store i32 %48, ptr %taddr79, align 4
  %74 = insertvalue %any undef, ptr %taddr79, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file, i64 7 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.53, i64 10 }, ptr %indirectarg82, align 8
  store %any %75, ptr %varargslots83, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp84" = insertvalue %"any[]" %76, i64 1, 1
  store %"any[]" %"$$temp84", ptr %indirectarg85, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 92, ptr align 8 %indirectarg85), !dbg !225
  unreachable, !dbg !225
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.core.ReflectedParam.to_format(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !227 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %f = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 16
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"any[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !254
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !254
  br i1 %4, label %panic, label %checkok, !dbg !254

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !255, !DIExpression(), !256)
  store ptr %2, ptr %f, align 8
    #dbg_declare(ptr %f, !257, !DIExpression(), !256)
  %5 = load ptr, ptr %self, align 8, !dbg !258
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !258
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !258
  store %any %7, ptr %varargslots, align 16, !dbg !258
  %8 = insertvalue %"any[]" undef, ptr %varargslots, 0, !dbg !258
  %"$$temp" = insertvalue %"any[]" %8, i64 1, 1, !dbg !258
  %9 = load ptr, ptr %f, align 8
  store %"char[]" { ptr @.str, i64 16 }, ptr %indirectarg3, align 8
  store %"any[]" %"$$temp", ptr %indirectarg4, align 8
  %10 = call i64 @std.io.Formatter.printf(ptr %retparam, ptr %9, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4), !dbg !258
  %not_err = icmp eq i64 %10, 0, !dbg !258
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !258
  br i1 %11, label %after_check, label %assign_optional, !dbg !258

assign_optional:                                  ; preds = %checkok
  store i64 %10, ptr %reterr, align 8, !dbg !258
  br label %err_retblock, !dbg !258

after_check:                                      ; preds = %checkok
  %12 = load i64, ptr %retparam, align 8, !dbg !258
  store i64 %12, ptr %0, align 8, !dbg !258
  ret i64 0, !dbg !258

err_retblock:                                     ; preds = %assign_optional
  %13 = load i64, ptr %reterr, align 8, !dbg !258
  ret i64 %13, !dbg !258

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.56, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 61), !dbg !256
  unreachable, !dbg !256
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.printf(ptr %0, ptr %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !259 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"any[]", align 8
  %4 = icmp eq ptr %1, null, !dbg !271
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !271
  br i1 %5, label %panic, label %checkok, !dbg !271

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !272, !DIExpression(), !273)
    #dbg_declare(ptr %2, !274, !DIExpression(), !273)
    #dbg_declare(ptr %3, !275, !DIExpression(), !273)
  %6 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg4, ptr align 8 %3, i32 16, i1 false)
  %7 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %6, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4) #5, !dbg !276
  %not_err = icmp eq i64 %7, 0, !dbg !276
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !276
  br i1 %8, label %after_check, label %assign_optional, !dbg !276

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !276
  br label %err_retblock, !dbg !276

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !276
  store i64 %9, ptr %0, align 8, !dbg !276
  ret i64 0, !dbg !276

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !276
  ret i64 %10, !dbg !276

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.57, i64 6 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66), !dbg !273
  unreachable, !dbg !273
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.Formatter.init(ptr %0, ptr %1, ptr %2) #0 comdat !dbg !277 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %out_fn = alloca ptr, align 8
  %data = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.assign_list = alloca %Formatter, align 8
  %3 = icmp eq ptr %0, null, !dbg !280
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !280
  br i1 %4, label %panic, label %checkok, !dbg !280

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !281, !DIExpression(), !282)
  store ptr %1, ptr %out_fn, align 8
    #dbg_declare(ptr %out_fn, !283, !DIExpression(), !282)
  store ptr %2, ptr %data, align 8
    #dbg_declare(ptr %data, !284, !DIExpression(), !282)
  %5 = load ptr, ptr %self, align 8, !dbg !285
  %checknull = icmp eq ptr %5, null, !dbg !285
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !285
  br i1 %6, label %panic3, label %checkok7, !dbg !285

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  %7 = load ptr, ptr %data, align 8, !dbg !285
  store ptr %7, ptr %.assign_list, align 8, !dbg !285
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !285
  %8 = load ptr, ptr %out_fn, align 8, !dbg !285
  store ptr %8, ptr %ptradd, align 8, !dbg !285
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !285
  ret void, !dbg !285

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96), !dbg !282
  unreachable, !dbg !282

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 98), !dbg !285
  unreachable, !dbg !285
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out(ptr %0, ptr %1, i8 %2) #0 !dbg !286 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %err = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !289
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !289
  br i1 %4, label %panic, label %checkok, !dbg !289

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !290, !DIExpression(), !291)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !292, !DIExpression(), !291)
    #dbg_declare(ptr %err, !293, !DIExpression(), !294)
  br label %testblock, !dbg !294

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !294
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !294
  %6 = load ptr, ptr %ptradd, align 8, !dbg !294
  %checknull = icmp eq ptr %6, null, !dbg !294
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !294
  br i1 %7, label %panic3, label %checkok7, !dbg !294

checkok7:                                         ; preds = %testblock
  %8 = load ptr, ptr %self, align 8, !dbg !294
  %9 = load ptr, ptr %8, align 8, !dbg !294
  %10 = load i8, ptr %c, align 1, !dbg !294
  %11 = call i64 %6(ptr %9, i8 %10), !dbg !294
  %not_err = icmp eq i64 %11, 0, !dbg !294
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !294
  br i1 %12, label %after_check, label %assign_optional, !dbg !294

assign_optional:                                  ; preds = %checkok7
  store i64 %11, ptr %err, align 8, !dbg !294
  br label %end_block, !dbg !294

after_check:                                      ; preds = %checkok7
  store i64 0, ptr %err, align 8, !dbg !294
  br label %end_block, !dbg !294

end_block:                                        ; preds = %after_check, %assign_optional
  %13 = load i64, ptr %err, align 8, !dbg !294
  %i2b = icmp ne i64 %13, 0, !dbg !294
  br i1 %i2b, label %if.then, label %if.exit16, !dbg !294

if.then:                                          ; preds = %end_block
  %14 = load ptr, ptr %self, align 8, !dbg !295
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !295
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd8, i64 24, !dbg !295
  %15 = load i64, ptr %ptradd9, align 8, !dbg !295
  %i2b10 = icmp ne i64 %15, 0, !dbg !295
  br i1 %i2b10, label %if.then11, label %if.exit, !dbg !295

if.then11:                                        ; preds = %if.then
  %16 = load ptr, ptr %self, align 8, !dbg !295
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !295
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 24, !dbg !295
  %17 = load i64, ptr %ptradd13, align 8, !dbg !295
  ret i64 %17, !dbg !295

if.exit:                                          ; preds = %if.then
  %18 = load ptr, ptr %self, align 8, !dbg !297
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !297
  %ptradd15 = getelementptr inbounds i8, ptr %ptradd14, i64 24, !dbg !297
  %19 = load i64, ptr %err, align 8, !dbg !297
  store i64 %19, ptr %ptradd15, align 8, !dbg !297
  %20 = load i64, ptr %err, align 8, !dbg !298
  ret i64 %20, !dbg !298

if.exit16:                                        ; preds = %end_block
  store i64 1, ptr %0, align 8, !dbg !299
  ret i64 0, !dbg !299

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.58, i64 3 }, ptr %indirectarg2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 101), !dbg !291
  unreachable, !dbg !291

panic3:                                           ; preds = %testblock
  store %"char[]" { ptr @.panic_msg.59, i64 54 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.58, i64 3 }, ptr %indirectarg6, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 103), !dbg !294
  unreachable, !dbg !294
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.print_with_function(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !300 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %old = alloca i32, align 4
  %old_width = alloca i32, align 4
  %old_prec = alloca i32, align 4
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %reterr21 = alloca i64, align 8
  %.inlinecache23 = alloca ptr, align 8
  %.cachedtype24 = alloca ptr, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %retparam34 = alloca i64, align 8
  %.inlinecache51 = alloca ptr, align 8
  %.cachedtype52 = alloca ptr, align 8
  %old61 = alloca i32, align 4
  %old_width63 = alloca i32, align 4
  %old_prec66 = alloca i32, align 4
  %reterr71 = alloca i64, align 8
  %retparam72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %buffer = alloca [1024 x i8], align 16
  %allocator = alloca %OnStackAllocator, align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %any, align 8
  %mem = alloca %any, align 8
  %reterr91 = alloca i64, align 8
  %.inlinecache93 = alloca ptr, align 8
  %.cachedtype94 = alloca ptr, align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
  %indirectarg106 = alloca %any, align 8
  %retparam107 = alloca i64, align 8
  %indirectarg108 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype94, align 8, !dbg !307
  store ptr null, ptr %.cachedtype52, align 8, !dbg !307
  store ptr null, ptr %.cachedtype24, align 8, !dbg !307
  store ptr null, ptr %.cachedtype, align 8, !dbg !307
  %3 = icmp eq ptr %1, null, !dbg !307
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !307
  br i1 %4, label %panic, label %checkok, !dbg !307

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !308, !DIExpression(), !309)
    #dbg_declare(ptr %2, !310, !DIExpression(), !309)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !311
  %5 = load i64, ptr %ptradd, align 8, !dbg !311
  %6 = inttoptr i64 %5 to ptr, !dbg !311
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !307
  %7 = icmp eq ptr %6, %type, !dbg !307
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !307

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !307
  %8 = load ptr, ptr %ptradd3, align 8, !dbg !307
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.to_format"), !dbg !307
  store ptr %9, ptr %.inlinecache, align 8, !dbg !307
  store ptr %6, ptr %.cachedtype, align 8, !dbg !307
  br label %10, !dbg !307

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !307
  br label %10, !dbg !307

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !307
  %i2b = icmp ne ptr %fn_phi, null, !dbg !307
  br i1 %i2b, label %if.then, label %if.exit49, !dbg !307

if.then:                                          ; preds = %10
    #dbg_declare(ptr %old, !312, !DIExpression(), !314)
  %11 = load ptr, ptr %self, align 8, !dbg !314
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !314
  %12 = load i32, ptr %ptradd4, align 8, !dbg !314
  store i32 %12, ptr %old, align 4, !dbg !314
    #dbg_declare(ptr %old_width, !315, !DIExpression(), !316)
  %13 = load ptr, ptr %self, align 8, !dbg !316
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !316
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 4, !dbg !316
  %14 = load i32, ptr %ptradd6, align 4, !dbg !316
  store i32 %14, ptr %old_width, align 4, !dbg !316
    #dbg_declare(ptr %old_prec, !317, !DIExpression(), !318)
  %15 = load ptr, ptr %self, align 8, !dbg !318
  %ptradd7 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !318
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !318
  %16 = load i32, ptr %ptradd8, align 8, !dbg !318
  store i32 %16, ptr %old_prec, align 4, !dbg !318
  %17 = load ptr, ptr %2, align 8, !dbg !319
  %i2nb = icmp eq ptr %17, null, !dbg !319
  br i1 %i2nb, label %if.then9, label %if.exit, !dbg !319

if.then9:                                         ; preds = %if.then
  %18 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.61, i64 6 }, ptr %indirectarg10, align 8
  %19 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %18, ptr align 8 %indirectarg10), !dbg !319
  %not_err = icmp eq i64 %19, 0, !dbg !319
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !319
  br i1 %20, label %after_check, label %assign_optional, !dbg !319

assign_optional:                                  ; preds = %if.then9
  store i64 %19, ptr %reterr, align 8, !dbg !319
  br label %err_retblock, !dbg !319

after_check:                                      ; preds = %if.then9
  %21 = load i64, ptr %retparam, align 8, !dbg !319
  %22 = load ptr, ptr %self, align 8, !dbg !320
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !320
  %23 = load i32, ptr %old, align 4, !dbg !320
  store i32 %23, ptr %ptradd11, align 8, !dbg !320
  %24 = load ptr, ptr %self, align 8, !dbg !322
  %ptradd12 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !322
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 4, !dbg !322
  %25 = load i32, ptr %old_width, align 4, !dbg !322
  store i32 %25, ptr %ptradd13, align 4, !dbg !322
  %26 = load ptr, ptr %self, align 8, !dbg !323
  %ptradd14 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !323
  %ptradd15 = getelementptr inbounds i8, ptr %ptradd14, i64 8, !dbg !323
  %27 = load i32, ptr %old_prec, align 4, !dbg !323
  store i32 %27, ptr %ptradd15, align 8, !dbg !323
  store i64 %21, ptr %0, align 8, !dbg !323
  ret i64 0, !dbg !323

err_retblock:                                     ; preds = %assign_optional
  %28 = load ptr, ptr %self, align 8, !dbg !324
  %ptradd16 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !324
  %29 = load i32, ptr %old, align 4, !dbg !324
  store i32 %29, ptr %ptradd16, align 8, !dbg !324
  %30 = load ptr, ptr %self, align 8, !dbg !326
  %ptradd17 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !326
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd17, i64 4, !dbg !326
  %31 = load i32, ptr %old_width, align 4, !dbg !326
  store i32 %31, ptr %ptradd18, align 4, !dbg !326
  %32 = load ptr, ptr %self, align 8, !dbg !327
  %ptradd19 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !327
  %ptradd20 = getelementptr inbounds i8, ptr %ptradd19, i64 8, !dbg !327
  %33 = load i32, ptr %old_prec, align 4, !dbg !327
  store i32 %33, ptr %ptradd20, align 8, !dbg !327
  %34 = load i64, ptr %reterr, align 8, !dbg !327
  ret i64 %34, !dbg !327

if.exit:                                          ; preds = %if.then
  %ptradd22 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !328
  %35 = load i64, ptr %ptradd22, align 8, !dbg !328
  %36 = inttoptr i64 %35 to ptr, !dbg !328
  %type25 = load ptr, ptr %.cachedtype24, align 8, !dbg !307
  %37 = icmp eq ptr %36, %type25, !dbg !307
  br i1 %37, label %cache_hit28, label %cache_miss26, !dbg !307

cache_miss26:                                     ; preds = %if.exit
  %ptradd27 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !307
  %38 = load ptr, ptr %ptradd27, align 8, !dbg !307
  %39 = call ptr @.dyn_search(ptr %38, ptr @"$sel.to_format"), !dbg !307
  store ptr %39, ptr %.inlinecache23, align 8, !dbg !307
  store ptr %36, ptr %.cachedtype24, align 8, !dbg !307
  br label %40, !dbg !307

cache_hit28:                                      ; preds = %if.exit
  %cache_hit_fn29 = load ptr, ptr %.inlinecache23, align 8, !dbg !307
  br label %40, !dbg !307

40:                                               ; preds = %cache_hit28, %cache_miss26
  %fn_phi30 = phi ptr [ %cache_hit_fn29, %cache_hit28 ], [ %39, %cache_miss26 ], !dbg !307
  %41 = icmp eq ptr %fn_phi30, null, !dbg !307
  br i1 %41, label %missing_function, label %match, !dbg !307

missing_function:                                 ; preds = %40
  store %"char[]" { ptr @.panic_msg.62, i64 46 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.60, i64 19 }, ptr %indirectarg33, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 126), !dbg !328
  unreachable, !dbg !328

match:                                            ; preds = %40
  %43 = load ptr, ptr %2, align 8
  %44 = load ptr, ptr %self, align 8
  %45 = call i64 %fn_phi30(ptr %retparam34, ptr %43, ptr %44), !dbg !328
  %not_err35 = icmp eq i64 %45, 0, !dbg !328
  %46 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !328
  br i1 %46, label %after_check37, label %assign_optional36, !dbg !328

assign_optional36:                                ; preds = %match
  store i64 %45, ptr %reterr21, align 8, !dbg !328
  br label %err_retblock43, !dbg !328

after_check37:                                    ; preds = %match
  %47 = load i64, ptr %retparam34, align 8, !dbg !328
  %48 = load ptr, ptr %self, align 8, !dbg !329
  %ptradd38 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !329
  %49 = load i32, ptr %old, align 4, !dbg !329
  store i32 %49, ptr %ptradd38, align 8, !dbg !329
  %50 = load ptr, ptr %self, align 8, !dbg !331
  %ptradd39 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !331
  %ptradd40 = getelementptr inbounds i8, ptr %ptradd39, i64 4, !dbg !331
  %51 = load i32, ptr %old_width, align 4, !dbg !331
  store i32 %51, ptr %ptradd40, align 4, !dbg !331
  %52 = load ptr, ptr %self, align 8, !dbg !332
  %ptradd41 = getelementptr inbounds i8, ptr %52, i64 16, !dbg !332
  %ptradd42 = getelementptr inbounds i8, ptr %ptradd41, i64 8, !dbg !332
  %53 = load i32, ptr %old_prec, align 4, !dbg !332
  store i32 %53, ptr %ptradd42, align 8, !dbg !332
  store i64 %47, ptr %0, align 8, !dbg !332
  ret i64 0, !dbg !332

err_retblock43:                                   ; preds = %assign_optional36
  %54 = load ptr, ptr %self, align 8, !dbg !333
  %ptradd44 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !333
  %55 = load i32, ptr %old, align 4, !dbg !333
  store i32 %55, ptr %ptradd44, align 8, !dbg !333
  %56 = load ptr, ptr %self, align 8, !dbg !335
  %ptradd45 = getelementptr inbounds i8, ptr %56, i64 16, !dbg !335
  %ptradd46 = getelementptr inbounds i8, ptr %ptradd45, i64 4, !dbg !335
  %57 = load i32, ptr %old_width, align 4, !dbg !335
  store i32 %57, ptr %ptradd46, align 4, !dbg !335
  %58 = load ptr, ptr %self, align 8, !dbg !336
  %ptradd47 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !336
  %ptradd48 = getelementptr inbounds i8, ptr %ptradd47, i64 8, !dbg !336
  %59 = load i32, ptr %old_prec, align 4, !dbg !336
  store i32 %59, ptr %ptradd48, align 8, !dbg !336
  %60 = load i64, ptr %reterr21, align 8, !dbg !336
  ret i64 %60, !dbg !336

if.exit49:                                        ; preds = %10
  %ptradd50 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !337
  %61 = load i64, ptr %ptradd50, align 8, !dbg !337
  %62 = inttoptr i64 %61 to ptr, !dbg !337
  %type53 = load ptr, ptr %.cachedtype52, align 8, !dbg !307
  %63 = icmp eq ptr %62, %type53, !dbg !307
  br i1 %63, label %cache_hit56, label %cache_miss54, !dbg !307

cache_miss54:                                     ; preds = %if.exit49
  %ptradd55 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !307
  %64 = load ptr, ptr %ptradd55, align 8, !dbg !307
  %65 = call ptr @.dyn_search(ptr %64, ptr @"$sel.to_string"), !dbg !307
  store ptr %65, ptr %.inlinecache51, align 8, !dbg !307
  store ptr %62, ptr %.cachedtype52, align 8, !dbg !307
  br label %66, !dbg !307

cache_hit56:                                      ; preds = %if.exit49
  %cache_hit_fn57 = load ptr, ptr %.inlinecache51, align 8, !dbg !307
  br label %66, !dbg !307

66:                                               ; preds = %cache_hit56, %cache_miss54
  %fn_phi58 = phi ptr [ %cache_hit_fn57, %cache_hit56 ], [ %65, %cache_miss54 ], !dbg !307
  %i2b59 = icmp ne ptr %fn_phi58, null, !dbg !307
  br i1 %i2b59, label %if.then60, label %if.exit123, !dbg !307

if.then60:                                        ; preds = %66
    #dbg_declare(ptr %old61, !338, !DIExpression(), !340)
  %67 = load ptr, ptr %self, align 8, !dbg !340
  %ptradd62 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !340
  %68 = load i32, ptr %ptradd62, align 8, !dbg !340
  store i32 %68, ptr %old61, align 4, !dbg !340
    #dbg_declare(ptr %old_width63, !341, !DIExpression(), !342)
  %69 = load ptr, ptr %self, align 8, !dbg !342
  %ptradd64 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !342
  %ptradd65 = getelementptr inbounds i8, ptr %ptradd64, i64 4, !dbg !342
  %70 = load i32, ptr %ptradd65, align 4, !dbg !342
  store i32 %70, ptr %old_width63, align 4, !dbg !342
    #dbg_declare(ptr %old_prec66, !343, !DIExpression(), !344)
  %71 = load ptr, ptr %self, align 8, !dbg !344
  %ptradd67 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !344
  %ptradd68 = getelementptr inbounds i8, ptr %ptradd67, i64 8, !dbg !344
  %72 = load i32, ptr %ptradd68, align 8, !dbg !344
  store i32 %72, ptr %old_prec66, align 4, !dbg !344
  %73 = load ptr, ptr %2, align 8, !dbg !345
  %i2nb69 = icmp eq ptr %73, null, !dbg !345
  br i1 %i2nb69, label %if.then70, label %if.exit88, !dbg !345

if.then70:                                        ; preds = %if.then60
  %74 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.63, i64 6 }, ptr %indirectarg73, align 8
  %75 = call i64 @std.io.Formatter.out_substr(ptr %retparam72, ptr %74, ptr align 8 %indirectarg73), !dbg !345
  %not_err74 = icmp eq i64 %75, 0, !dbg !345
  %76 = call i1 @llvm.expect.i1(i1 %not_err74, i1 true), !dbg !345
  br i1 %76, label %after_check76, label %assign_optional75, !dbg !345

assign_optional75:                                ; preds = %if.then70
  store i64 %75, ptr %reterr71, align 8, !dbg !345
  br label %err_retblock82, !dbg !345

after_check76:                                    ; preds = %if.then70
  %77 = load i64, ptr %retparam72, align 8, !dbg !345
  %78 = load ptr, ptr %self, align 8, !dbg !346
  %ptradd77 = getelementptr inbounds i8, ptr %78, i64 16, !dbg !346
  %79 = load i32, ptr %old61, align 4, !dbg !346
  store i32 %79, ptr %ptradd77, align 8, !dbg !346
  %80 = load ptr, ptr %self, align 8, !dbg !348
  %ptradd78 = getelementptr inbounds i8, ptr %80, i64 16, !dbg !348
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 4, !dbg !348
  %81 = load i32, ptr %old_width63, align 4, !dbg !348
  store i32 %81, ptr %ptradd79, align 4, !dbg !348
  %82 = load ptr, ptr %self, align 8, !dbg !349
  %ptradd80 = getelementptr inbounds i8, ptr %82, i64 16, !dbg !349
  %ptradd81 = getelementptr inbounds i8, ptr %ptradd80, i64 8, !dbg !349
  %83 = load i32, ptr %old_prec66, align 4, !dbg !349
  store i32 %83, ptr %ptradd81, align 8, !dbg !349
  store i64 %77, ptr %0, align 8, !dbg !349
  ret i64 0, !dbg !349

err_retblock82:                                   ; preds = %assign_optional75
  %84 = load ptr, ptr %self, align 8, !dbg !350
  %ptradd83 = getelementptr inbounds i8, ptr %84, i64 16, !dbg !350
  %85 = load i32, ptr %old61, align 4, !dbg !350
  store i32 %85, ptr %ptradd83, align 8, !dbg !350
  %86 = load ptr, ptr %self, align 8, !dbg !352
  %ptradd84 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !352
  %ptradd85 = getelementptr inbounds i8, ptr %ptradd84, i64 4, !dbg !352
  %87 = load i32, ptr %old_width63, align 4, !dbg !352
  store i32 %87, ptr %ptradd85, align 4, !dbg !352
  %88 = load ptr, ptr %self, align 8, !dbg !353
  %ptradd86 = getelementptr inbounds i8, ptr %88, i64 16, !dbg !353
  %ptradd87 = getelementptr inbounds i8, ptr %ptradd86, i64 8, !dbg !353
  %89 = load i32, ptr %old_prec66, align 4, !dbg !353
  store i32 %89, ptr %ptradd87, align 8, !dbg !353
  %90 = load i64, ptr %reterr71, align 8, !dbg !353
  ret i64 %90, !dbg !353

if.exit88:                                        ; preds = %if.then60
    #dbg_declare(ptr %buffer, !354, !DIExpression(), !360)
  call void @llvm.memset.p0.i64(ptr align 16 %buffer, i8 0, i64 1024, i1 false), !dbg !360
    #dbg_declare(ptr %allocator, !362, !DIExpression(), !380)
  call void @llvm.memset.p0.i64(ptr align 8 %allocator, i8 0, i64 48, i1 false), !dbg !380
  %91 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !381
  %92 = insertvalue %"char[]" %91, i64 1024, 1, !dbg !381
  store %"char[]" %92, ptr %indirectarg89, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg90, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @std.core.mem.allocator.OnStackAllocator.init(ptr %allocator, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90), !dbg !381
    #dbg_declare(ptr %mem, !382, !DIExpression(), !361)
  %93 = insertvalue %any undef, ptr %allocator, 0, !dbg !383
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.OnStackAllocator" to i64), 1, !dbg !383
  store %any %94, ptr %mem, align 8, !dbg !383
  %ptradd92 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !385
  %95 = load i64, ptr %ptradd92, align 8, !dbg !385
  %96 = inttoptr i64 %95 to ptr, !dbg !385
  %type95 = load ptr, ptr %.cachedtype94, align 8, !dbg !307
  %97 = icmp eq ptr %96, %type95, !dbg !307
  br i1 %97, label %cache_hit98, label %cache_miss96, !dbg !307

cache_miss96:                                     ; preds = %if.exit88
  %ptradd97 = getelementptr inbounds i8, ptr %96, i64 16, !dbg !307
  %98 = load ptr, ptr %ptradd97, align 8, !dbg !307
  %99 = call ptr @.dyn_search(ptr %98, ptr @"$sel.to_string"), !dbg !307
  store ptr %99, ptr %.inlinecache93, align 8, !dbg !307
  store ptr %96, ptr %.cachedtype94, align 8, !dbg !307
  br label %100, !dbg !307

cache_hit98:                                      ; preds = %if.exit88
  %cache_hit_fn99 = load ptr, ptr %.inlinecache93, align 8, !dbg !307
  br label %100, !dbg !307

100:                                              ; preds = %cache_hit98, %cache_miss96
  %fn_phi100 = phi ptr [ %cache_hit_fn99, %cache_hit98 ], [ %99, %cache_miss96 ], !dbg !307
  %101 = icmp eq ptr %fn_phi100, null, !dbg !307
  br i1 %101, label %missing_function101, label %match105, !dbg !307

missing_function101:                              ; preds = %100
  store %"char[]" { ptr @.panic_msg.64, i64 46 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.func.60, i64 19 }, ptr %indirectarg104, align 8
  %102 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %102(ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, i32 142), !dbg !385
  unreachable, !dbg !385

match105:                                         ; preds = %100
  %103 = load ptr, ptr %2, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg106, ptr align 8 %mem, i32 16, i1 false)
  call void %fn_phi100(ptr sret(%"char[]") align 8 %sretparam, ptr %103, ptr align 8 %indirectarg106), !dbg !385
  %104 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg108, ptr align 8 %sretparam, i32 16, i1 false)
  %105 = call i64 @std.io.Formatter.out_substr(ptr %retparam107, ptr %104, ptr align 8 %indirectarg108), !dbg !385
  %not_err109 = icmp eq i64 %105, 0, !dbg !385
  %106 = call i1 @llvm.expect.i1(i1 %not_err109, i1 true), !dbg !385
  br i1 %106, label %after_check111, label %assign_optional110, !dbg !385

assign_optional110:                               ; preds = %match105
  store i64 %105, ptr %reterr91, align 8, !dbg !385
  br label %err_retblock117, !dbg !385

after_check111:                                   ; preds = %match105
  %107 = load i64, ptr %retparam107, align 8, !dbg !385
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !387
  %108 = load ptr, ptr %self, align 8, !dbg !389
  %ptradd112 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !389
  %109 = load i32, ptr %old61, align 4, !dbg !389
  store i32 %109, ptr %ptradd112, align 8, !dbg !389
  %110 = load ptr, ptr %self, align 8, !dbg !391
  %ptradd113 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !391
  %ptradd114 = getelementptr inbounds i8, ptr %ptradd113, i64 4, !dbg !391
  %111 = load i32, ptr %old_width63, align 4, !dbg !391
  store i32 %111, ptr %ptradd114, align 4, !dbg !391
  %112 = load ptr, ptr %self, align 8, !dbg !392
  %ptradd115 = getelementptr inbounds i8, ptr %112, i64 16, !dbg !392
  %ptradd116 = getelementptr inbounds i8, ptr %ptradd115, i64 8, !dbg !392
  %113 = load i32, ptr %old_prec66, align 4, !dbg !392
  store i32 %113, ptr %ptradd116, align 8, !dbg !392
  store i64 %107, ptr %0, align 8, !dbg !392
  ret i64 0, !dbg !392

err_retblock117:                                  ; preds = %assign_optional110
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !393
  %114 = load ptr, ptr %self, align 8, !dbg !395
  %ptradd118 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !395
  %115 = load i32, ptr %old61, align 4, !dbg !395
  store i32 %115, ptr %ptradd118, align 8, !dbg !395
  %116 = load ptr, ptr %self, align 8, !dbg !397
  %ptradd119 = getelementptr inbounds i8, ptr %116, i64 16, !dbg !397
  %ptradd120 = getelementptr inbounds i8, ptr %ptradd119, i64 4, !dbg !397
  %117 = load i32, ptr %old_width63, align 4, !dbg !397
  store i32 %117, ptr %ptradd120, align 4, !dbg !397
  %118 = load ptr, ptr %self, align 8, !dbg !398
  %ptradd121 = getelementptr inbounds i8, ptr %118, i64 16, !dbg !398
  %ptradd122 = getelementptr inbounds i8, ptr %ptradd121, i64 8, !dbg !398
  %119 = load i32, ptr %old_prec66, align 4, !dbg !398
  store i32 %119, ptr %ptradd122, align 8, !dbg !398
  %120 = load i64, ptr %reterr91, align 8, !dbg !398
  ret i64 %120, !dbg !398

if.exit123:                                       ; preds = %66
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !399

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.60, i64 19 }, ptr %indirectarg2, align 8
  %121 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %121(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 112), !dbg !309
  unreachable, !dbg !309
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_str(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !400 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %reterr5 = alloca i64, align 8
  %retparam6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %reterr13 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %faultname_zero = alloca %"char[]", align 8
  %retparam19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %reterr26 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %retparam33 = alloca i64, align 8
  %indirectarg34 = alloca %any, align 8
  %string = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"any[]", align 8
  %flags = alloca i32, align 4
  %width = alloca i32, align 4
  %reterr51 = alloca i64, align 8
  %retparam52 = alloca i64, align 8
  %indirectarg53 = alloca %any, align 8
  %retparam56 = alloca i64, align 8
  %indirectarg57 = alloca %"char[]", align 8
  %flags69 = alloca i32, align 4
  %width71 = alloca i32, align 4
  %reterr77 = alloca i64, align 8
  %retparam78 = alloca double, align 8
  %indirectarg79 = alloca %any, align 8
  %retparam82 = alloca i64, align 8
  %retparam86 = alloca i64, align 8
  %indirectarg87 = alloca %"char[]", align 8
  %reterr101 = alloca i64, align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %retparam108 = alloca i64, align 8
  %indirectarg109 = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %retparam114 = alloca i64, align 8
  %indirectarg115 = alloca %any, align 8
  %reterr119 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %error_var = alloca i64, align 8
  %switch134 = alloca i8, align 1
  %i = alloca i64, align 8
  %error_var137 = alloca i64, align 8
  %v = alloca %any, align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %self151 = alloca ptr, align 8
  %indirectarg154 = alloca %"char[]", align 8
  %indirectarg155 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg160 = alloca %"char[]", align 8
  %indirectarg161 = alloca %"char[]", align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %indirectarg184 = alloca %"char[]", align 8
  %v186 = alloca %any, align 8
  %blockret187 = alloca i64, align 8
  %indirectarg189 = alloca %"char[]", align 8
  %indirectarg190 = alloca %"char[]", align 8
  %indirectarg191 = alloca %"char[]", align 8
  %indirectarg197 = alloca %"char[]", align 8
  %indirectarg198 = alloca %"char[]", align 8
  %indirectarg199 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i64, align 8
  %min = alloca i64, align 8
  %switch207 = alloca i64, align 8
  %c = alloca i8, align 1
  %indirectarg214 = alloca %"char[]", align 8
  %indirectarg215 = alloca %"char[]", align 8
  %indirectarg216 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %indirectarg231 = alloca %"char[]", align 8
  %indirectarg232 = alloca %"char[]", align 8
  %indirectarg233 = alloca %"char[]", align 8
  %i258 = alloca i32, align 4
  %indirectarg261 = alloca %"char[]", align 8
  %indirectarg262 = alloca %"char[]", align 8
  %indirectarg263 = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %indirectarg295 = alloca %"char[]", align 8
  %indirectarg296 = alloca %"char[]", align 8
  %indirectarg297 = alloca %"char[]", align 8
  %i324 = alloca i128, align 16
  %indirectarg327 = alloca %"char[]", align 8
  %indirectarg328 = alloca %"char[]", align 8
  %indirectarg329 = alloca %"char[]", align 8
  %c357 = alloca i8, align 1
  %indirectarg360 = alloca %"char[]", align 8
  %indirectarg361 = alloca %"char[]", align 8
  %indirectarg362 = alloca %"char[]", align 8
  %s377 = alloca i16, align 2
  %indirectarg380 = alloca %"char[]", align 8
  %indirectarg381 = alloca %"char[]", align 8
  %indirectarg382 = alloca %"char[]", align 8
  %i402 = alloca i32, align 4
  %indirectarg405 = alloca %"char[]", align 8
  %indirectarg406 = alloca %"char[]", align 8
  %indirectarg407 = alloca %"char[]", align 8
  %l427 = alloca i64, align 8
  %indirectarg430 = alloca %"char[]", align 8
  %indirectarg431 = alloca %"char[]", align 8
  %indirectarg432 = alloca %"char[]", align 8
  %i449 = alloca i128, align 16
  %indirectarg452 = alloca %"char[]", align 8
  %indirectarg453 = alloca %"char[]", align 8
  %indirectarg454 = alloca %"char[]", align 8
  %string467 = alloca %"char[]", align 8
  %indirectarg468 = alloca %"char[]", align 8
  %indirectarg469 = alloca %"char[]", align 8
  %indirectarg470 = alloca %"char[]", align 8
  %indirectarg471 = alloca %"any[]", align 8
  %indirectarg474 = alloca %"char[]", align 8
  %indirectarg475 = alloca %"char[]", align 8
  %indirectarg476 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg477 = alloca %"any[]", align 8
  %indirectarg484 = alloca %"char[]", align 8
  %indirectarg485 = alloca %"char[]", align 8
  %indirectarg486 = alloca %"char[]", align 8
  %indirectarg492 = alloca %"char[]", align 8
  %indirectarg493 = alloca %"char[]", align 8
  %indirectarg494 = alloca %"char[]", align 8
  %varargslots495 = alloca [1 x %any], align 16
  %indirectarg497 = alloca %"any[]", align 8
  %reterr499 = alloca i64, align 8
  %indirectarg505 = alloca %"char[]", align 8
  %indirectarg506 = alloca %"char[]", align 8
  %indirectarg507 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr513 = alloca i64, align 8
  %indirectarg514 = alloca %"char[]", align 8
  %indirectarg515 = alloca %"char[]", align 8
  %indirectarg516 = alloca %"char[]", align 8
  %varargslots517 = alloca [2 x %any], align 16
  %indirectarg520 = alloca %"any[]", align 8
  %retparam522 = alloca i64, align 8
  %indirectarg523 = alloca %"char[]", align 8
  %reterr529 = alloca i64, align 8
  %retparam530 = alloca i64, align 8
  %indirectarg531 = alloca %"char[]", align 8
  %reterr537 = alloca i64, align 8
  %retparam538 = alloca i64, align 8
  %indirectarg539 = alloca %"char[]", align 8
  %reterr545 = alloca i64, align 8
  %retparam546 = alloca i64, align 8
  %indirectarg547 = alloca %"char[]", align 8
  %reterr553 = alloca i64, align 8
  %retparam554 = alloca i64, align 8
  %indirectarg555 = alloca %"char[]", align 8
  %reterr564 = alloca i64, align 8
  %indirectarg567 = alloca %"char[]", align 8
  %indirectarg568 = alloca %"char[]", align 8
  %indirectarg569 = alloca %"char[]", align 8
  %retparam571 = alloca i64, align 8
  %indirectarg572 = alloca %"char[]", align 8
  %reterr581 = alloca i64, align 8
  %indirectarg584 = alloca %"char[]", align 8
  %indirectarg585 = alloca %"char[]", align 8
  %indirectarg586 = alloca %"char[]", align 8
  %indirectarg591 = alloca %"char[]", align 8
  %indirectarg592 = alloca %"char[]", align 8
  %indirectarg593 = alloca %"char[]", align 8
  %sretparam = alloca %"char[]", align 8
  %retparam596 = alloca i64, align 8
  %indirectarg597 = alloca %"char[]", align 8
  %reterr606 = alloca i64, align 8
  %indirectarg609 = alloca %"char[]", align 8
  %indirectarg610 = alloca %"char[]", align 8
  %indirectarg611 = alloca %"char[]", align 8
  %indirectarg617 = alloca %"char[]", align 8
  %indirectarg618 = alloca %"char[]", align 8
  %indirectarg619 = alloca %"char[]", align 8
  %sretparam621 = alloca %"char[]", align 8
  %retparam625 = alloca i64, align 8
  %indirectarg626 = alloca %"char[]", align 8
  %reterr632 = alloca i64, align 8
  %self633 = alloca ptr, align 8
  %indirectarg636 = alloca %"char[]", align 8
  %indirectarg637 = alloca %"char[]", align 8
  %indirectarg638 = alloca %"char[]", align 8
  %indirectarg642 = alloca %"char[]", align 8
  %indirectarg643 = alloca %"char[]", align 8
  %indirectarg644 = alloca %"char[]", align 8
  %indirectarg665 = alloca %"char[]", align 8
  %indirectarg666 = alloca %"char[]", align 8
  %indirectarg667 = alloca %"char[]", align 8
  %retparam671 = alloca i64, align 8
  %indirectarg672 = alloca %any, align 8
  %inner = alloca i64, align 8
  %indirectarg697 = alloca %"char[]", align 8
  %indirectarg698 = alloca %"char[]", align 8
  %indirectarg699 = alloca %"char[]", align 8
  %pointer = alloca ptr, align 8
  %indirectarg722 = alloca %"char[]", align 8
  %indirectarg723 = alloca %"char[]", align 8
  %indirectarg724 = alloca %"char[]", align 8
  %deref = alloca %any, align 8
  %indirectarg732 = alloca %"char[]", align 8
  %indirectarg733 = alloca %"char[]", align 8
  %indirectarg734 = alloca %"char[]", align 8
  %ptr = alloca ptr, align 8
  %type = alloca i64, align 8
  %retparam736 = alloca i64, align 8
  %indirectarg737 = alloca %any, align 8
  %reterr745 = alloca i64, align 8
  %blockret747 = alloca i64, align 8
  %f748 = alloca i64, align 8
  %error_var761 = alloca i64, align 8
  %flags770 = alloca i32, align 4
  %width772 = alloca i32, align 4
  %error_var777 = alloca i64, align 8
  %retparam778 = alloca i64, align 8
  %indirectarg779 = alloca %"char[]", align 8
  %reterr788 = alloca i64, align 8
  %retparam789 = alloca i64, align 8
  %indirectarg790 = alloca %any, align 8
  %flags802 = alloca i32, align 4
  %width804 = alloca i32, align 4
  %inner810 = alloca i64, align 8
  %indirectarg830 = alloca %"char[]", align 8
  %indirectarg831 = alloca %"char[]", align 8
  %indirectarg832 = alloca %"char[]", align 8
  %size = alloca i64, align 8
  %alen = alloca i64, align 8
  %indirectarg850 = alloca %"char[]", align 8
  %indirectarg851 = alloca %"char[]", align 8
  %indirectarg852 = alloca %"char[]", align 8
  %ptr855 = alloca ptr, align 8
  %len = alloca i64, align 8
  %error_var856 = alloca i64, align 8
  %retparam857 = alloca i64, align 8
  %i866 = alloca i64, align 8
  %error_var870 = alloca i64, align 8
  %retparam871 = alloca i64, align 8
  %indirectarg872 = alloca %"char[]", align 8
  %error_var882 = alloca i64, align 8
  %ptr883 = alloca ptr, align 8
  %type884 = alloca i64, align 8
  %retparam885 = alloca i64, align 8
  %indirectarg886 = alloca %any, align 8
  %error_var897 = alloca i64, align 8
  %retparam898 = alloca i64, align 8
  %reterr908 = alloca i64, align 8
  %flags913 = alloca i32, align 4
  %width915 = alloca i32, align 4
  %inner921 = alloca i64, align 8
  %indirectarg941 = alloca %"char[]", align 8
  %indirectarg942 = alloca %"char[]", align 8
  %indirectarg943 = alloca %"char[]", align 8
  %size947 = alloca i64, align 8
  %vlen = alloca i64, align 8
  %indirectarg963 = alloca %"char[]", align 8
  %indirectarg964 = alloca %"char[]", align 8
  %indirectarg965 = alloca %"char[]", align 8
  %ptr969 = alloca ptr, align 8
  %len970 = alloca i64, align 8
  %error_var971 = alloca i64, align 8
  %retparam972 = alloca i64, align 8
  %indirectarg973 = alloca %"char[]", align 8
  %i982 = alloca i64, align 8
  %error_var988 = alloca i64, align 8
  %retparam989 = alloca i64, align 8
  %indirectarg990 = alloca %"char[]", align 8
  %error_var1001 = alloca i64, align 8
  %ptr1002 = alloca ptr, align 8
  %type1003 = alloca i64, align 8
  %retparam1004 = alloca i64, align 8
  %indirectarg1005 = alloca %any, align 8
  %error_var1018 = alloca i64, align 8
  %retparam1019 = alloca i64, align 8
  %indirectarg1020 = alloca %"char[]", align 8
  %reterr1030 = alloca i64, align 8
  %inner1035 = alloca i64, align 8
  %indirectarg1055 = alloca %"char[]", align 8
  %indirectarg1056 = alloca %"char[]", align 8
  %indirectarg1057 = alloca %"char[]", align 8
  %flags1064 = alloca i32, align 4
  %width1066 = alloca i32, align 4
  %size1072 = alloca i64, align 8
  %temp = alloca ptr, align 8
  %ptr1077 = alloca ptr, align 8
  %indirectarg1080 = alloca %"char[]", align 8
  %indirectarg1081 = alloca %"char[]", align 8
  %indirectarg1082 = alloca %"char[]", align 8
  %slen = alloca i64, align 8
  %indirectarg1086 = alloca %"char[]", align 8
  %indirectarg1087 = alloca %"char[]", align 8
  %indirectarg1088 = alloca %"char[]", align 8
  %len1091 = alloca i64, align 8
  %error_var1092 = alloca i64, align 8
  %retparam1093 = alloca i64, align 8
  %i1102 = alloca i64, align 8
  %error_var1108 = alloca i64, align 8
  %retparam1109 = alloca i64, align 8
  %indirectarg1110 = alloca %"char[]", align 8
  %error_var1121 = alloca i64, align 8
  %ptr1122 = alloca ptr, align 8
  %type1123 = alloca i64, align 8
  %retparam1124 = alloca i64, align 8
  %indirectarg1125 = alloca %any, align 8
  %error_var1138 = alloca i64, align 8
  %retparam1139 = alloca i64, align 8
  %reterr1149 = alloca i64, align 8
  %string1154 = alloca %"char[]", align 8
  %indirectarg1155 = alloca %"char[]", align 8
  %indirectarg1156 = alloca %"char[]", align 8
  %indirectarg1157 = alloca %"char[]", align 8
  %indirectarg1158 = alloca %"any[]", align 8
  %reterr1160 = alloca i64, align 8
  %retparam1161 = alloca i64, align 8
  %indirectarg1162 = alloca %"char[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !403
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !403
  br i1 %4, label %panic, label %checkok, !dbg !403

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !404, !DIExpression(), !405)
    #dbg_declare(ptr %2, !406, !DIExpression(), !405)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !407
  %5 = load i64, ptr %ptradd, align 8, !dbg !407
  %"introspect*" = inttoptr i64 %5 to ptr, !dbg !407
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !407
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %6 = load i8, ptr %switch, align 1
  switch i8 %6, label %switch.exit [
    i8 5, label %switch.case
    i8 0, label %switch.case4
    i8 6, label %switch.case12
    i8 9, label %switch.case12
    i8 20, label %switch.case25
    i8 7, label %switch.case25
    i8 14, label %switch.case39
    i8 2, label %switch.case44
    i8 3, label %switch.case44
    i8 4, label %switch.case68
    i8 1, label %switch.case100
  ]

switch.case:                                      ; preds = %switch.entry
  %7 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.67, i64 6 }, ptr %indirectarg3, align 8
  %8 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %7, ptr align 8 %indirectarg3), !dbg !409
  %not_err = icmp eq i64 %8, 0, !dbg !409
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !409
  br i1 %9, label %after_check, label %assign_optional, !dbg !409

assign_optional:                                  ; preds = %switch.case
  store i64 %8, ptr %reterr, align 8, !dbg !409
  br label %err_retblock, !dbg !409

after_check:                                      ; preds = %switch.case
  %10 = load i64, ptr %retparam, align 8, !dbg !409
  store i64 %10, ptr %0, align 8, !dbg !409
  ret i64 0, !dbg !409

err_retblock:                                     ; preds = %assign_optional
  %11 = load i64, ptr %reterr, align 8, !dbg !409
  ret i64 %11, !dbg !409

switch.case4:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.68, i64 4 }, ptr %indirectarg7, align 8
  %13 = call i64 @std.io.Formatter.out_substr(ptr %retparam6, ptr %12, ptr align 8 %indirectarg7), !dbg !411
  %not_err8 = icmp eq i64 %13, 0, !dbg !411
  %14 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !411
  br i1 %14, label %after_check10, label %assign_optional9, !dbg !411

assign_optional9:                                 ; preds = %switch.case4
  store i64 %13, ptr %reterr5, align 8, !dbg !411
  br label %err_retblock11, !dbg !411

after_check10:                                    ; preds = %switch.case4
  %15 = load i64, ptr %retparam6, align 8, !dbg !411
  store i64 %15, ptr %0, align 8, !dbg !411
  ret i64 0, !dbg !411

err_retblock11:                                   ; preds = %assign_optional9
  %16 = load i64, ptr %reterr5, align 8, !dbg !411
  ret i64 %16, !dbg !411

switch.case12:                                    ; preds = %switch.entry, %switch.entry
  %17 = load ptr, ptr %2, align 8, !dbg !413
  %checknull = icmp eq ptr %17, null, !dbg !413
  %18 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !413
  br i1 %18, label %panic14, label %checkok18, !dbg !413

checkok18:                                        ; preds = %switch.case12
  %19 = load i64, ptr %17, align 8, !dbg !413
  %eq = icmp eq i64 %19, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %checkok18
  call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %checkok18
  %20 = inttoptr i64 %19 to ptr
  %21 = getelementptr inbounds %.fault, ptr %20, i32 0, i32 1
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %21, %faultname_ok ]
  %22 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg20, ptr align 8 %faultname, i32 16, i1 false)
  %23 = call i64 @std.io.Formatter.out_substr(ptr %retparam19, ptr %22, ptr align 8 %indirectarg20), !dbg !413
  %not_err21 = icmp eq i64 %23, 0, !dbg !413
  %24 = call i1 @llvm.expect.i1(i1 %not_err21, i1 true), !dbg !413
  br i1 %24, label %after_check23, label %assign_optional22, !dbg !413

assign_optional22:                                ; preds = %faultname_exit
  store i64 %23, ptr %reterr13, align 8, !dbg !413
  br label %err_retblock24, !dbg !413

after_check23:                                    ; preds = %faultname_exit
  %25 = load i64, ptr %retparam19, align 8, !dbg !413
  store i64 %25, ptr %0, align 8, !dbg !413
  ret i64 0, !dbg !413

err_retblock24:                                   ; preds = %assign_optional22
  %26 = load i64, ptr %reterr13, align 8, !dbg !413
  ret i64 %26, !dbg !413

switch.case25:                                    ; preds = %switch.entry, %switch.entry
  %27 = load ptr, ptr %2, align 8, !dbg !415
  %checknull27 = icmp eq ptr %27, null, !dbg !415
  %28 = call i1 @llvm.expect.i1(i1 %checknull27, i1 false), !dbg !415
  br i1 %28, label %panic28, label %checkok32, !dbg !415

checkok32:                                        ; preds = %switch.case25
  %29 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg34, ptr align 8 %27, i32 16, i1 false)
  %30 = call i64 @std.io.Formatter.out_str(ptr %retparam33, ptr %29, ptr align 8 %indirectarg34), !dbg !415
  %not_err35 = icmp eq i64 %30, 0, !dbg !415
  %31 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !415
  br i1 %31, label %after_check37, label %assign_optional36, !dbg !415

assign_optional36:                                ; preds = %checkok32
  store i64 %30, ptr %reterr26, align 8, !dbg !415
  br label %err_retblock38, !dbg !415

after_check37:                                    ; preds = %checkok32
  %32 = load i64, ptr %retparam33, align 8, !dbg !415
  store i64 %32, ptr %0, align 8, !dbg !415
  ret i64 0, !dbg !415

err_retblock38:                                   ; preds = %assign_optional36
  %33 = load i64, ptr %reterr26, align 8, !dbg !415
  ret i64 %33, !dbg !415

switch.case39:                                    ; preds = %switch.entry
  store %"char[]" { ptr @.str.71, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg40, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.72, i64 12 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.str.73, i64 17 }, ptr %indirectarg42, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 164, ptr align 8 %indirectarg43), !dbg !417
  unreachable, !dbg !421

switch.case44:                                    ; preds = %switch.entry, %switch.entry
    #dbg_declare(ptr %flags, !422, !DIExpression(), !424)
  %34 = load ptr, ptr %self, align 8, !dbg !424
  %ptradd45 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !424
  %35 = load i32, ptr %ptradd45, align 8, !dbg !424
  store i32 %35, ptr %flags, align 4, !dbg !424
    #dbg_declare(ptr %width, !425, !DIExpression(), !426)
  %36 = load ptr, ptr %self, align 8, !dbg !426
  %ptradd46 = getelementptr inbounds i8, ptr %36, i64 16, !dbg !426
  %ptradd47 = getelementptr inbounds i8, ptr %ptradd46, i64 4, !dbg !426
  %37 = load i32, ptr %ptradd47, align 4, !dbg !426
  store i32 %37, ptr %width, align 4, !dbg !426
  %38 = load ptr, ptr %self, align 8, !dbg !427
  %ptradd48 = getelementptr inbounds i8, ptr %38, i64 16, !dbg !427
  store i32 0, ptr %ptradd48, align 8, !dbg !427
  %39 = load ptr, ptr %self, align 8, !dbg !428
  %ptradd49 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !428
  %ptradd50 = getelementptr inbounds i8, ptr %ptradd49, i64 4, !dbg !428
  store i32 0, ptr %ptradd50, align 4, !dbg !428
  %40 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg53, ptr align 8 %2, i32 16, i1 false)
  %41 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam52, ptr %40, ptr align 8 %indirectarg53, i32 10), !dbg !429
  %not_err54 = icmp eq i64 %41, 0, !dbg !429
  %42 = call i1 @llvm.expect.i1(i1 %not_err54, i1 true), !dbg !429
  br i1 %42, label %after_check55, label %else_block, !dbg !429

after_check55:                                    ; preds = %switch.case44
  %43 = load i64, ptr %retparam52, align 8, !dbg !429
  br label %phi_block, !dbg !429

else_block:                                       ; preds = %switch.case44
  %44 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.74, i64 9 }, ptr %indirectarg57, align 8
  %45 = call i64 @std.io.Formatter.out_substr(ptr %retparam56, ptr %44, ptr align 8 %indirectarg57), !dbg !429
  %not_err58 = icmp eq i64 %45, 0, !dbg !429
  %46 = call i1 @llvm.expect.i1(i1 %not_err58, i1 true), !dbg !429
  br i1 %46, label %after_check60, label %assign_optional59, !dbg !429

assign_optional59:                                ; preds = %else_block
  store i64 %45, ptr %reterr51, align 8, !dbg !429
  br label %err_retblock64, !dbg !429

after_check60:                                    ; preds = %else_block
  %47 = load i64, ptr %retparam56, align 8, !dbg !429
  br label %phi_block, !dbg !429

phi_block:                                        ; preds = %after_check60, %after_check55
  %val = phi i64 [ %43, %after_check55 ], [ %47, %after_check60 ], !dbg !429
  %48 = load ptr, ptr %self, align 8, !dbg !430
  %ptradd61 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !430
  %49 = load i32, ptr %flags, align 4, !dbg !430
  store i32 %49, ptr %ptradd61, align 8, !dbg !430
  %50 = load ptr, ptr %self, align 8, !dbg !432
  %ptradd62 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !432
  %ptradd63 = getelementptr inbounds i8, ptr %ptradd62, i64 4, !dbg !432
  %51 = load i32, ptr %width, align 4, !dbg !432
  store i32 %51, ptr %ptradd63, align 4, !dbg !432
  store i64 %val, ptr %0, align 8, !dbg !432
  ret i64 0, !dbg !432

err_retblock64:                                   ; preds = %assign_optional59
  %52 = load ptr, ptr %self, align 8, !dbg !433
  %ptradd65 = getelementptr inbounds i8, ptr %52, i64 16, !dbg !433
  %53 = load i32, ptr %flags, align 4, !dbg !433
  store i32 %53, ptr %ptradd65, align 8, !dbg !433
  %54 = load ptr, ptr %self, align 8, !dbg !435
  %ptradd66 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !435
  %ptradd67 = getelementptr inbounds i8, ptr %ptradd66, i64 4, !dbg !435
  %55 = load i32, ptr %width, align 4, !dbg !435
  store i32 %55, ptr %ptradd67, align 4, !dbg !435
  %56 = load i64, ptr %reterr51, align 8, !dbg !435
  ret i64 %56, !dbg !435

switch.case68:                                    ; preds = %switch.entry
    #dbg_declare(ptr %flags69, !436, !DIExpression(), !438)
  %57 = load ptr, ptr %self, align 8, !dbg !438
  %ptradd70 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !438
  %58 = load i32, ptr %ptradd70, align 8, !dbg !438
  store i32 %58, ptr %flags69, align 4, !dbg !438
    #dbg_declare(ptr %width71, !439, !DIExpression(), !440)
  %59 = load ptr, ptr %self, align 8, !dbg !440
  %ptradd72 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !440
  %ptradd73 = getelementptr inbounds i8, ptr %ptradd72, i64 4, !dbg !440
  %60 = load i32, ptr %ptradd73, align 4, !dbg !440
  store i32 %60, ptr %width71, align 4, !dbg !440
  %61 = load ptr, ptr %self, align 8, !dbg !441
  %ptradd74 = getelementptr inbounds i8, ptr %61, i64 16, !dbg !441
  store i32 0, ptr %ptradd74, align 8, !dbg !441
  %62 = load ptr, ptr %self, align 8, !dbg !442
  %ptradd75 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !442
  %ptradd76 = getelementptr inbounds i8, ptr %ptradd75, i64 4, !dbg !442
  store i32 0, ptr %ptradd76, align 4, !dbg !442
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg79, ptr align 8 %2, i32 16, i1 false)
  %63 = call i64 @std.io.float_from_any(ptr %retparam78, ptr align 8 %indirectarg79), !dbg !443
  %not_err80 = icmp eq i64 %63, 0, !dbg !443
  %64 = call i1 @llvm.expect.i1(i1 %not_err80, i1 true), !dbg !443
  br i1 %64, label %after_check81, label %else_block85, !dbg !443

after_check81:                                    ; preds = %switch.case68
  %65 = load ptr, ptr %self, align 8
  %66 = load double, ptr %retparam78, align 8
  %67 = call i64 @std.io.Formatter.ftoa(ptr %retparam82, ptr %65, double %66), !dbg !443
  %not_err83 = icmp eq i64 %67, 0, !dbg !443
  %68 = call i1 @llvm.expect.i1(i1 %not_err83, i1 true), !dbg !443
  br i1 %68, label %after_check84, label %else_block85, !dbg !443

after_check84:                                    ; preds = %after_check81
  %69 = load i64, ptr %retparam82, align 8, !dbg !443
  br label %phi_block91, !dbg !443

else_block85:                                     ; preds = %after_check81, %switch.case68
  %70 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.75, i64 3 }, ptr %indirectarg87, align 8
  %71 = call i64 @std.io.Formatter.out_substr(ptr %retparam86, ptr %70, ptr align 8 %indirectarg87), !dbg !443
  %not_err88 = icmp eq i64 %71, 0, !dbg !443
  %72 = call i1 @llvm.expect.i1(i1 %not_err88, i1 true), !dbg !443
  br i1 %72, label %after_check90, label %assign_optional89, !dbg !443

assign_optional89:                                ; preds = %else_block85
  store i64 %71, ptr %reterr77, align 8, !dbg !443
  br label %err_retblock96, !dbg !443

after_check90:                                    ; preds = %else_block85
  %73 = load i64, ptr %retparam86, align 8, !dbg !443
  br label %phi_block91, !dbg !443

phi_block91:                                      ; preds = %after_check90, %after_check84
  %val92 = phi i64 [ %69, %after_check84 ], [ %73, %after_check90 ], !dbg !443
  %74 = load ptr, ptr %self, align 8, !dbg !444
  %ptradd93 = getelementptr inbounds i8, ptr %74, i64 16, !dbg !444
  %75 = load i32, ptr %flags69, align 4, !dbg !444
  store i32 %75, ptr %ptradd93, align 8, !dbg !444
  %76 = load ptr, ptr %self, align 8, !dbg !446
  %ptradd94 = getelementptr inbounds i8, ptr %76, i64 16, !dbg !446
  %ptradd95 = getelementptr inbounds i8, ptr %ptradd94, i64 4, !dbg !446
  %77 = load i32, ptr %width71, align 4, !dbg !446
  store i32 %77, ptr %ptradd95, align 4, !dbg !446
  store i64 %val92, ptr %0, align 8, !dbg !446
  ret i64 0, !dbg !446

err_retblock96:                                   ; preds = %assign_optional89
  %78 = load ptr, ptr %self, align 8, !dbg !447
  %ptradd97 = getelementptr inbounds i8, ptr %78, i64 16, !dbg !447
  %79 = load i32, ptr %flags69, align 4, !dbg !447
  store i32 %79, ptr %ptradd97, align 8, !dbg !447
  %80 = load ptr, ptr %self, align 8, !dbg !449
  %ptradd98 = getelementptr inbounds i8, ptr %80, i64 16, !dbg !449
  %ptradd99 = getelementptr inbounds i8, ptr %ptradd98, i64 4, !dbg !449
  %81 = load i32, ptr %width71, align 4, !dbg !449
  store i32 %81, ptr %ptradd99, align 4, !dbg !449
  %82 = load i64, ptr %reterr77, align 8, !dbg !449
  ret i64 %82, !dbg !449

switch.case100:                                   ; preds = %switch.entry
  %83 = load ptr, ptr %2, align 8, !dbg !450
  %checknull102 = icmp eq ptr %83, null, !dbg !450
  %84 = call i1 @llvm.expect.i1(i1 %checknull102, i1 false), !dbg !450
  br i1 %84, label %panic103, label %checkok107, !dbg !450

checkok107:                                       ; preds = %switch.case100
  %85 = load i8, ptr %83, align 1, !dbg !450
  %86 = trunc i8 %85 to i1, !dbg !450
  %ternary = select i1 %86, %"char[]" { ptr @.str.77, i64 4 }, %"char[]" { ptr @.str.78, i64 5 }, !dbg !450
  %87 = load ptr, ptr %self, align 8
  store %"char[]" %ternary, ptr %indirectarg109, align 8
  %88 = call i64 @std.io.Formatter.out_substr(ptr %retparam108, ptr %87, ptr align 8 %indirectarg109), !dbg !450
  %not_err110 = icmp eq i64 %88, 0, !dbg !450
  %89 = call i1 @llvm.expect.i1(i1 %not_err110, i1 true), !dbg !450
  br i1 %89, label %after_check112, label %assign_optional111, !dbg !450

assign_optional111:                               ; preds = %checkok107
  store i64 %88, ptr %reterr101, align 8, !dbg !450
  br label %err_retblock113, !dbg !450

after_check112:                                   ; preds = %checkok107
  %90 = load i64, ptr %retparam108, align 8, !dbg !450
  store i64 %90, ptr %0, align 8, !dbg !450
  ret i64 0, !dbg !450

err_retblock113:                                  ; preds = %assign_optional111
  %91 = load i64, ptr %reterr101, align 8, !dbg !450
  ret i64 %91, !dbg !450

switch.exit:                                      ; preds = %switch.entry
    #dbg_declare(ptr %n, !452, !DIExpression(), !453)
  %92 = load %any, ptr %2, align 8, !dbg !453
  %93 = load ptr, ptr %self, align 8
  store %any %92, ptr %indirectarg115, align 8
  %94 = call i64 @std.io.Formatter.print_with_function(ptr %retparam114, ptr %93, ptr align 8 %indirectarg115), !dbg !453
  %not_err116 = icmp eq i64 %94, 0, !dbg !453
  %95 = call i1 @llvm.expect.i1(i1 %not_err116, i1 true), !dbg !453
  br i1 %95, label %after_check118, label %assign_optional117, !dbg !453

assign_optional117:                               ; preds = %switch.exit
  store i64 %94, ptr %n.f, align 8, !dbg !453
  br label %after_assign, !dbg !453

after_check118:                                   ; preds = %switch.exit
  %96 = load i64, ptr %retparam114, align 8, !dbg !453
  store i64 %96, ptr %n, align 8, !dbg !453
  store i64 0, ptr %n.f, align 8, !dbg !453
  br label %after_assign, !dbg !453

after_assign:                                     ; preds = %after_check118, %assign_optional117
  %load.err = load i64, ptr %n.f, align 8, !dbg !454
  %result = icmp eq i64 %load.err, 0, !dbg !454
  br i1 %result, label %if.then, label %if.exit, !dbg !454

if.then:                                          ; preds = %after_assign
  %97 = load i64, ptr %n, align 8, !dbg !454
  store i64 %97, ptr %0, align 8, !dbg !454
  ret i64 0, !dbg !454

if.exit:                                          ; preds = %after_assign
    #dbg_declare(ptr %f, !455, !DIExpression(), !457)
  br label %testblock, !dbg !457

testblock:                                        ; preds = %if.exit
  %optval = load i64, ptr %n.f, align 8, !dbg !457
  %not_err120 = icmp eq i64 %optval, 0, !dbg !457
  %98 = call i1 @llvm.expect.i1(i1 %not_err120, i1 true), !dbg !457
  br i1 %98, label %after_check122, label %assign_optional121, !dbg !457

assign_optional121:                               ; preds = %testblock
  store i64 %optval, ptr %f, align 8, !dbg !457
  br label %end_block, !dbg !457

after_check122:                                   ; preds = %testblock
  store i64 0, ptr %f, align 8, !dbg !457
  br label %end_block, !dbg !457

end_block:                                        ; preds = %after_check122, %assign_optional121
  %99 = load i64, ptr %f, align 8, !dbg !457
  %i2b = icmp ne i64 %99, 0, !dbg !457
  br i1 %i2b, label %if.then123, label %if.exit124, !dbg !457

if.then123:                                       ; preds = %end_block
  %100 = load i64, ptr %f, align 8, !dbg !457
  store i64 %100, ptr %blockret, align 8, !dbg !457
  br label %expr_block.exit, !dbg !457

if.exit124:                                       ; preds = %end_block
  store i64 0, ptr %blockret, align 8, !dbg !459
  br label %expr_block.exit, !dbg !459

expr_block.exit:                                  ; preds = %if.exit124, %if.then123
  %101 = load i64, ptr %blockret, align 8, !dbg !459
  %neq = icmp ne i64 %101, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !458
  br i1 %neq, label %if.then125, label %if.exit130, !dbg !458

if.then125:                                       ; preds = %expr_block.exit
  %optval126 = load i64, ptr %n.f, align 8, !dbg !458
  %not_err127 = icmp eq i64 %optval126, 0, !dbg !458
  %102 = call i1 @llvm.expect.i1(i1 %not_err127, i1 true), !dbg !458
  br i1 %102, label %after_check129, label %assign_optional128, !dbg !458

assign_optional128:                               ; preds = %if.then125
  store i64 %optval126, ptr %error_var, align 8, !dbg !458
  br label %guard_block, !dbg !458

after_check129:                                   ; preds = %if.then125
  br label %noerr_block, !dbg !458

guard_block:                                      ; preds = %assign_optional128
  %103 = load i64, ptr %error_var, align 8, !dbg !458
  ret i64 %103, !dbg !458

noerr_block:                                      ; preds = %after_check129
  br label %if.exit130, !dbg !458

if.exit130:                                       ; preds = %noerr_block, %expr_block.exit
  %ptradd131 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !460
  %104 = load i64, ptr %ptradd131, align 8, !dbg !460
  %"introspect*132" = inttoptr i64 %104 to ptr, !dbg !460
  %typeid.kind133 = load i8, ptr %"introspect*132", align 8, !dbg !460
  store i8 %typeid.kind133, ptr %switch134, align 1
  br label %switch.entry135

switch.entry135:                                  ; preds = %if.exit130
  %105 = load i8, ptr %switch134, align 1
  switch i8 %105, label %switch.exit1159 [
    i8 8, label %switch.case136
    i8 10, label %switch.case528
    i8 11, label %switch.case536
    i8 12, label %switch.case544
    i8 13, label %switch.case552
    i8 18, label %switch.case560
    i8 19, label %switch.case677
    i8 15, label %switch.case801
    i8 17, label %switch.case912
    i8 16, label %switch.case1034
    i8 7, label %switch.case1153
    i8 20, label %switch.case1153
  ]

switch.case136:                                   ; preds = %switch.entry135
    #dbg_declare(ptr %i, !462, !DIExpression(), !464)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %2, i32 16, i1 false)
  %106 = call i8 @std.core.types.TypeKind.is_int(i8 3) #5, !dbg !465
  %107 = trunc i8 %106 to i1, !dbg !465
  br i1 %107, label %assert_ok, label %assert_fail, !dbg !465

assert_fail:                                      ; preds = %switch.case136
  store %"char[]" { ptr @.panic_msg.79, i64 69 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg141, align 8
  %108 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %108(ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, i32 13), !dbg !465
  unreachable, !dbg !465

assert_ok:                                        ; preds = %switch.case136
  %ptradd142 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !469
  %109 = load i64, ptr %ptradd142, align 8, !dbg !469
  %"introspect*143" = inttoptr i64 %109 to ptr, !dbg !469
  %typeid.kind144 = load i8, ptr %"introspect*143", align 8, !dbg !469
  %eq145 = icmp eq i8 %typeid.kind144, 8, !dbg !469
  br i1 %eq145, label %assert_ok150, label %assert_fail146, !dbg !469

assert_fail146:                                   ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.81, i64 67 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg149, align 8
  %110 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %110(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 14), !dbg !469
  unreachable, !dbg !469

assert_ok150:                                     ; preds = %assert_ok
  store ptr %v, ptr %self151, align 8
  %111 = load ptr, ptr %self151, align 8, !dbg !470
  %checknull152 = icmp eq ptr %111, null, !dbg !470
  %112 = call i1 @llvm.expect.i1(i1 %checknull152, i1 false), !dbg !470
  br i1 %112, label %panic153, label %checkok157, !dbg !470

checkok157:                                       ; preds = %assert_ok150
  %113 = load ptr, ptr %111, align 8, !dbg !470
  %114 = load ptr, ptr %self151, align 8, !dbg !470
  %checknull158 = icmp eq ptr %114, null, !dbg !470
  %115 = call i1 @llvm.expect.i1(i1 %checknull158, i1 false), !dbg !470
  br i1 %115, label %panic159, label %checkok163, !dbg !470

checkok163:                                       ; preds = %checkok157
  %ptradd164 = getelementptr inbounds i8, ptr %114, i64 8, !dbg !470
  %116 = load i64, ptr %ptradd164, align 8, !dbg !470
  %"introspect*165" = inttoptr i64 %116 to ptr, !dbg !470
  %typeid.kind166 = load i8, ptr %"introspect*165", align 8, !dbg !470
  %eq167 = icmp eq i8 %typeid.kind166, 15, !dbg !470
  br i1 %eq167, label %check_type_ok, label %check_next, !dbg !470

check_next:                                       ; preds = %checkok163
  %eq168 = icmp eq i8 %typeid.kind166, 19, !dbg !470
  br i1 %eq168, label %check_type_ok, label %check_next169, !dbg !470

check_next169:                                    ; preds = %check_next
  %eq170 = icmp eq i8 %typeid.kind166, 17, !dbg !470
  br i1 %eq170, label %check_type_ok, label %check_next171, !dbg !470

check_next171:                                    ; preds = %check_next169
  %eq172 = icmp eq i8 %typeid.kind166, 8, !dbg !470
  br i1 %eq172, label %check_type_ok, label %check_next173, !dbg !470

check_next173:                                    ; preds = %check_next171
  %eq174 = icmp eq i8 %typeid.kind166, 16, !dbg !470
  br i1 %eq174, label %check_type_ok, label %check_next175, !dbg !470

check_next175:                                    ; preds = %check_next173
  %eq176 = icmp eq i8 %typeid.kind166, 18, !dbg !470
  br i1 %eq176, label %check_type_ok, label %check_next177, !dbg !470

check_next177:                                    ; preds = %check_next175
  %eq178 = icmp eq i8 %typeid.kind166, 14, !dbg !470
  br i1 %eq178, label %check_type_ok, label %check_next179, !dbg !470

check_next179:                                    ; preds = %check_next177
  %eq180 = icmp eq i8 %typeid.kind166, 12, !dbg !470
  br i1 %eq180, label %check_type_ok, label %check_next181, !dbg !470

check_next181:                                    ; preds = %check_next179
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg183, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg184, align 8
  %117 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %117(ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, ptr align 8 %indirectarg184, i32 199), !dbg !470
  unreachable, !dbg !470

check_type_ok:                                    ; preds = %check_next179, %check_next177, %check_next175, %check_next173, %check_next171, %check_next169, %check_next, %checkok163
  %ptradd185 = getelementptr inbounds i8, ptr %"introspect*165", i64 32, !dbg !470
  %typeid.inner = load i64, ptr %ptradd185, align 8, !dbg !470
  %118 = insertvalue %any undef, ptr %113, 0, !dbg !470
  %119 = insertvalue %any %118, i64 %typeid.inner, 1, !dbg !470
  store %any %119, ptr %v186, align 8
  %120 = call i8 @std.core.types.TypeKind.is_int(i8 3) #5, !dbg !473
  %121 = trunc i8 %120 to i1, !dbg !473
  br i1 %121, label %assert_ok192, label %assert_fail188, !dbg !473

assert_fail188:                                   ; preds = %check_type_ok
  store %"char[]" { ptr @.panic_msg.79, i64 69 }, ptr %indirectarg189, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg190, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg191, align 8
  %122 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %122(ptr align 8 %indirectarg189, ptr align 8 %indirectarg190, ptr align 8 %indirectarg191, i32 22), !dbg !473
  unreachable, !dbg !473

assert_ok192:                                     ; preds = %check_type_ok
  %ptradd193 = getelementptr inbounds i8, ptr %v186, i64 8, !dbg !476
  %123 = load i64, ptr %ptradd193, align 8, !dbg !476
  %"introspect*194" = inttoptr i64 %123 to ptr, !dbg !476
  %typeid.kind195 = load i8, ptr %"introspect*194", align 8, !dbg !476
  %124 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind195) #5, !dbg !476
  %125 = trunc i8 %124 to i1, !dbg !476
  br i1 %125, label %assert_ok200, label %assert_fail196, !dbg !476

assert_fail196:                                   ; preds = %assert_ok192
  store %"char[]" { ptr @.panic_msg.83, i64 71 }, ptr %indirectarg197, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg198, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg199, align 8
  %126 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %126(ptr align 8 %indirectarg197, ptr align 8 %indirectarg198, ptr align 8 %indirectarg199, i32 23), !dbg !476
  unreachable, !dbg !476

assert_ok200:                                     ; preds = %assert_ok192
    #dbg_declare(ptr %any_type, !477, !DIExpression(), !478)
  %ptradd201 = getelementptr inbounds i8, ptr %v186, i64 8, !dbg !478
  %127 = load i64, ptr %ptradd201, align 8, !dbg !478
  store i64 %127, ptr %any_type, align 8, !dbg !478
    #dbg_declare(ptr %kind, !479, !DIExpression(), !480)
  %128 = load i64, ptr %any_type, align 8, !dbg !480
  %"introspect*202" = inttoptr i64 %128 to ptr, !dbg !480
  %typeid.kind203 = load i8, ptr %"introspect*202", align 8, !dbg !480
  store i8 %typeid.kind203, ptr %kind, align 1, !dbg !480
    #dbg_declare(ptr %is_mixed_signed, !481, !DIExpression(), !482)
  %129 = load i64, ptr %any_type, align 8, !dbg !482
  %"introspect*204" = inttoptr i64 %129 to ptr, !dbg !482
  %typeid.kind205 = load i8, ptr %"introspect*204", align 8, !dbg !482
  %neq206 = icmp ne i8 3, %typeid.kind205, !dbg !482
  %130 = zext i1 %neq206 to i8, !dbg !482
  store i8 %130, ptr %is_mixed_signed, align 1, !dbg !482
    #dbg_declare(ptr %max, !483, !DIExpression(), !484)
  store i64 -1, ptr %max, align 8, !dbg !484
    #dbg_declare(ptr %min, !485, !DIExpression(), !486)
  store i64 0, ptr %min, align 8, !dbg !486
  %131 = load i64, ptr %any_type, align 8
  store i64 %131, ptr %switch207, align 8
  br label %switch.entry208

switch.entry208:                                  ; preds = %assert_ok200
  %132 = load i64, ptr %switch207, align 8
  br label %check_subtype, !dbg !487

check_subtype:                                    ; preds = %parent_type_block, %switch.entry208
  %133 = phi i64 [ %132, %switch.entry208 ], [ %typeid.parent, %parent_type_block ], !dbg !487
  %eq209 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %133, !dbg !487
  br i1 %eq209, label %result_block, label %parent_type_block, !dbg !487

parent_type_block:                                ; preds = %check_subtype
  %134 = inttoptr i64 %133 to ptr, !dbg !487
  %ptradd210 = getelementptr inbounds i8, ptr %134, i64 8, !dbg !487
  %typeid.parent = load i64, ptr %ptradd210, align 8, !dbg !487
  %135 = icmp eq i64 %typeid.parent, 0, !dbg !487
  br i1 %135, label %result_block, label %check_subtype, !dbg !487

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %136 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !487
  br i1 %136, label %switch.case211, label %next_if, !dbg !487

switch.case211:                                   ; preds = %result_block
    #dbg_declare(ptr %c, !489, !DIExpression(), !492)
  %137 = load ptr, ptr %v186, align 8, !dbg !492
  %checknull212 = icmp eq ptr %137, null, !dbg !492
  %138 = call i1 @llvm.expect.i1(i1 %checknull212, i1 false), !dbg !492
  br i1 %138, label %panic213, label %checkok217, !dbg !492

checkok217:                                       ; preds = %switch.case211
  %139 = load i8, ptr %137, align 1, !dbg !492
  store i8 %139, ptr %c, align 1, !dbg !492
  %140 = load i8, ptr %is_mixed_signed, align 1, !dbg !493
  %141 = trunc i8 %140 to i1, !dbg !493
  br i1 %141, label %and.rhs, label %and.phi, !dbg !493

and.rhs:                                          ; preds = %checkok217
  %142 = load i8, ptr %c, align 1, !dbg !493
  %sext = sext i8 %142 to i32, !dbg !493
  %lt = icmp slt i32 %sext, 0, !dbg !493
  br label %and.phi, !dbg !493

and.phi:                                          ; preds = %and.rhs, %checkok217
  %val218 = phi i1 [ false, %checkok217 ], [ %lt, %and.rhs ], !dbg !493
  br i1 %val218, label %if.then219, label %if.exit220, !dbg !493

if.then219:                                       ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var137, align 8, !dbg !493
  br label %panic_block, !dbg !493

if.exit220:                                       ; preds = %and.phi
  %143 = load i8, ptr %c, align 1, !dbg !494
  %sext221 = sext i8 %143 to i64, !dbg !494
  store i64 %sext221, ptr %blockret187, align 8, !dbg !494
  br label %expr_block.exit473, !dbg !494

next_if:                                          ; preds = %result_block
  br label %check_subtype222, !dbg !495

check_subtype222:                                 ; preds = %parent_type_block224, %next_if
  %144 = phi i64 [ %132, %next_if ], [ %typeid.parent226, %parent_type_block224 ], !dbg !495
  %eq223 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %144, !dbg !495
  br i1 %eq223, label %result_block227, label %parent_type_block224, !dbg !495

parent_type_block224:                             ; preds = %check_subtype222
  %145 = inttoptr i64 %144 to ptr, !dbg !495
  %ptradd225 = getelementptr inbounds i8, ptr %145, i64 8, !dbg !495
  %typeid.parent226 = load i64, ptr %ptradd225, align 8, !dbg !495
  %146 = icmp eq i64 %typeid.parent226, 0, !dbg !495
  br i1 %146, label %result_block227, label %check_subtype222, !dbg !495

result_block227:                                  ; preds = %parent_type_block224, %check_subtype222
  %147 = phi i1 [ false, %parent_type_block224 ], [ true, %check_subtype222 ], !dbg !495
  br i1 %147, label %switch.case228, label %next_if250, !dbg !495

switch.case228:                                   ; preds = %result_block227
    #dbg_declare(ptr %s, !496, !DIExpression(), !499)
  %148 = load ptr, ptr %v186, align 8, !dbg !499
  %checknull229 = icmp eq ptr %148, null, !dbg !499
  %149 = call i1 @llvm.expect.i1(i1 %checknull229, i1 false), !dbg !499
  br i1 %149, label %panic230, label %checkok234, !dbg !499

checkok234:                                       ; preds = %switch.case228
  %150 = load i16, ptr %148, align 2, !dbg !499
  store i16 %150, ptr %s, align 2, !dbg !499
  %151 = load i8, ptr %is_mixed_signed, align 1, !dbg !500
  %152 = trunc i8 %151 to i1, !dbg !500
  br i1 %152, label %and.rhs235, label %and.phi238, !dbg !500

and.rhs235:                                       ; preds = %checkok234
  %153 = load i16, ptr %s, align 2, !dbg !500
  %sext236 = sext i16 %153 to i32, !dbg !500
  %lt237 = icmp slt i32 %sext236, 0, !dbg !500
  br label %and.phi238, !dbg !500

and.phi238:                                       ; preds = %and.rhs235, %checkok234
  %val239 = phi i1 [ false, %checkok234 ], [ %lt237, %and.rhs235 ], !dbg !500
  br i1 %val239, label %if.then240, label %if.exit241, !dbg !500

if.then240:                                       ; preds = %and.phi238
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var137, align 8, !dbg !500
  br label %panic_block, !dbg !500

if.exit241:                                       ; preds = %and.phi238
  %154 = load i16, ptr %s, align 2, !dbg !501
  %sext242 = sext i16 %154 to i64, !dbg !501
  %155 = load i64, ptr %max, align 8, !dbg !501
  %gt = icmp sgt i64 %sext242, %155, !dbg !501
  %check = icmp sge i64 %155, 0, !dbg !501
  %siui-gt = and i1 %check, %gt, !dbg !501
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !501

or.rhs:                                           ; preds = %if.exit241
  %156 = load i16, ptr %s, align 2, !dbg !501
  %sext243 = sext i16 %156 to i64, !dbg !501
  %157 = load i64, ptr %min, align 8, !dbg !501
  %lt244 = icmp slt i64 %sext243, %157, !dbg !501
  %check245 = icmp slt i64 %157, 0, !dbg !501
  %siui-lt = or i1 %check245, %lt244, !dbg !501
  br label %or.phi, !dbg !501

or.phi:                                           ; preds = %or.rhs, %if.exit241
  %val246 = phi i1 [ true, %if.exit241 ], [ %siui-lt, %or.rhs ], !dbg !501
  br i1 %val246, label %if.then247, label %if.exit248, !dbg !501

if.then247:                                       ; preds = %or.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !501
  br label %panic_block, !dbg !501

if.exit248:                                       ; preds = %or.phi
  %158 = load i16, ptr %s, align 2, !dbg !502
  %sext249 = sext i16 %158 to i64, !dbg !502
  store i64 %sext249, ptr %blockret187, align 8, !dbg !502
  br label %expr_block.exit473, !dbg !502

next_if250:                                       ; preds = %result_block227
  br label %check_subtype251, !dbg !503

check_subtype251:                                 ; preds = %parent_type_block253, %next_if250
  %159 = phi i64 [ %132, %next_if250 ], [ %typeid.parent255, %parent_type_block253 ], !dbg !503
  %eq252 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %159, !dbg !503
  br i1 %eq252, label %result_block256, label %parent_type_block253, !dbg !503

parent_type_block253:                             ; preds = %check_subtype251
  %160 = inttoptr i64 %159 to ptr, !dbg !503
  %ptradd254 = getelementptr inbounds i8, ptr %160, i64 8, !dbg !503
  %typeid.parent255 = load i64, ptr %ptradd254, align 8, !dbg !503
  %161 = icmp eq i64 %typeid.parent255, 0, !dbg !503
  br i1 %161, label %result_block256, label %check_subtype251, !dbg !503

result_block256:                                  ; preds = %parent_type_block253, %check_subtype251
  %162 = phi i1 [ false, %parent_type_block253 ], [ true, %check_subtype251 ], !dbg !503
  br i1 %162, label %switch.case257, label %next_if285, !dbg !503

switch.case257:                                   ; preds = %result_block256
    #dbg_declare(ptr %i258, !504, !DIExpression(), !506)
  %163 = load ptr, ptr %v186, align 8, !dbg !506
  %checknull259 = icmp eq ptr %163, null, !dbg !506
  %164 = call i1 @llvm.expect.i1(i1 %checknull259, i1 false), !dbg !506
  br i1 %164, label %panic260, label %checkok264, !dbg !506

checkok264:                                       ; preds = %switch.case257
  %165 = load i32, ptr %163, align 4, !dbg !506
  store i32 %165, ptr %i258, align 4, !dbg !506
  %166 = load i8, ptr %is_mixed_signed, align 1, !dbg !507
  %167 = trunc i8 %166 to i1, !dbg !507
  br i1 %167, label %and.rhs265, label %and.phi267, !dbg !507

and.rhs265:                                       ; preds = %checkok264
  %168 = load i32, ptr %i258, align 4, !dbg !507
  %lt266 = icmp slt i32 %168, 0, !dbg !507
  br label %and.phi267, !dbg !507

and.phi267:                                       ; preds = %and.rhs265, %checkok264
  %val268 = phi i1 [ false, %checkok264 ], [ %lt266, %and.rhs265 ], !dbg !507
  br i1 %val268, label %if.then269, label %if.exit270, !dbg !507

if.then269:                                       ; preds = %and.phi267
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var137, align 8, !dbg !507
  br label %panic_block, !dbg !507

if.exit270:                                       ; preds = %and.phi267
  %169 = load i32, ptr %i258, align 4, !dbg !508
  %sext271 = sext i32 %169 to i64, !dbg !508
  %170 = load i64, ptr %max, align 8, !dbg !508
  %gt272 = icmp sgt i64 %sext271, %170, !dbg !508
  %check273 = icmp sge i64 %170, 0, !dbg !508
  %siui-gt274 = and i1 %check273, %gt272, !dbg !508
  br i1 %siui-gt274, label %or.phi280, label %or.rhs275, !dbg !508

or.rhs275:                                        ; preds = %if.exit270
  %171 = load i32, ptr %i258, align 4, !dbg !508
  %sext276 = sext i32 %171 to i64, !dbg !508
  %172 = load i64, ptr %min, align 8, !dbg !508
  %lt277 = icmp slt i64 %sext276, %172, !dbg !508
  %check278 = icmp slt i64 %172, 0, !dbg !508
  %siui-lt279 = or i1 %check278, %lt277, !dbg !508
  br label %or.phi280, !dbg !508

or.phi280:                                        ; preds = %or.rhs275, %if.exit270
  %val281 = phi i1 [ true, %if.exit270 ], [ %siui-lt279, %or.rhs275 ], !dbg !508
  br i1 %val281, label %if.then282, label %if.exit283, !dbg !508

if.then282:                                       ; preds = %or.phi280
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !508
  br label %panic_block, !dbg !508

if.exit283:                                       ; preds = %or.phi280
  %173 = load i32, ptr %i258, align 4, !dbg !509
  %sext284 = sext i32 %173 to i64, !dbg !509
  store i64 %sext284, ptr %blockret187, align 8, !dbg !509
  br label %expr_block.exit473, !dbg !509

next_if285:                                       ; preds = %result_block256
  br label %check_subtype286, !dbg !510

check_subtype286:                                 ; preds = %parent_type_block288, %next_if285
  %174 = phi i64 [ %132, %next_if285 ], [ %typeid.parent290, %parent_type_block288 ], !dbg !510
  %eq287 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %174, !dbg !510
  br i1 %eq287, label %result_block291, label %parent_type_block288, !dbg !510

parent_type_block288:                             ; preds = %check_subtype286
  %175 = inttoptr i64 %174 to ptr, !dbg !510
  %ptradd289 = getelementptr inbounds i8, ptr %175, i64 8, !dbg !510
  %typeid.parent290 = load i64, ptr %ptradd289, align 8, !dbg !510
  %176 = icmp eq i64 %typeid.parent290, 0, !dbg !510
  br i1 %176, label %result_block291, label %check_subtype286, !dbg !510

result_block291:                                  ; preds = %parent_type_block288, %check_subtype286
  %177 = phi i1 [ false, %parent_type_block288 ], [ true, %check_subtype286 ], !dbg !510
  br i1 %177, label %switch.case292, label %next_if316, !dbg !510

switch.case292:                                   ; preds = %result_block291
    #dbg_declare(ptr %l, !511, !DIExpression(), !513)
  %178 = load ptr, ptr %v186, align 8, !dbg !513
  %checknull293 = icmp eq ptr %178, null, !dbg !513
  %179 = call i1 @llvm.expect.i1(i1 %checknull293, i1 false), !dbg !513
  br i1 %179, label %panic294, label %checkok298, !dbg !513

checkok298:                                       ; preds = %switch.case292
  %180 = load i64, ptr %178, align 8, !dbg !513
  store i64 %180, ptr %l, align 8, !dbg !513
  %181 = load i8, ptr %is_mixed_signed, align 1, !dbg !514
  %182 = trunc i8 %181 to i1, !dbg !514
  br i1 %182, label %and.rhs299, label %and.phi301, !dbg !514

and.rhs299:                                       ; preds = %checkok298
  %183 = load i64, ptr %l, align 8, !dbg !514
  %lt300 = icmp slt i64 %183, 0, !dbg !514
  br label %and.phi301, !dbg !514

and.phi301:                                       ; preds = %and.rhs299, %checkok298
  %val302 = phi i1 [ false, %checkok298 ], [ %lt300, %and.rhs299 ], !dbg !514
  br i1 %val302, label %if.then303, label %if.exit304, !dbg !514

if.then303:                                       ; preds = %and.phi301
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var137, align 8, !dbg !514
  br label %panic_block, !dbg !514

if.exit304:                                       ; preds = %and.phi301
  %184 = load i64, ptr %l, align 8, !dbg !515
  %185 = load i64, ptr %max, align 8, !dbg !515
  %gt305 = icmp sgt i64 %184, %185, !dbg !515
  %check306 = icmp sge i64 %185, 0, !dbg !515
  %siui-gt307 = and i1 %check306, %gt305, !dbg !515
  br i1 %siui-gt307, label %or.phi312, label %or.rhs308, !dbg !515

or.rhs308:                                        ; preds = %if.exit304
  %186 = load i64, ptr %l, align 8, !dbg !515
  %187 = load i64, ptr %min, align 8, !dbg !515
  %lt309 = icmp slt i64 %186, %187, !dbg !515
  %check310 = icmp slt i64 %187, 0, !dbg !515
  %siui-lt311 = or i1 %check310, %lt309, !dbg !515
  br label %or.phi312, !dbg !515

or.phi312:                                        ; preds = %or.rhs308, %if.exit304
  %val313 = phi i1 [ true, %if.exit304 ], [ %siui-lt311, %or.rhs308 ], !dbg !515
  br i1 %val313, label %if.then314, label %if.exit315, !dbg !515

if.then314:                                       ; preds = %or.phi312
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !515
  br label %panic_block, !dbg !515

if.exit315:                                       ; preds = %or.phi312
  %188 = load i64, ptr %l, align 8, !dbg !516
  store i64 %188, ptr %blockret187, align 8, !dbg !516
  br label %expr_block.exit473, !dbg !516

next_if316:                                       ; preds = %result_block291
  br label %check_subtype317, !dbg !517

check_subtype317:                                 ; preds = %parent_type_block319, %next_if316
  %189 = phi i64 [ %132, %next_if316 ], [ %typeid.parent321, %parent_type_block319 ], !dbg !517
  %eq318 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %189, !dbg !517
  br i1 %eq318, label %result_block322, label %parent_type_block319, !dbg !517

parent_type_block319:                             ; preds = %check_subtype317
  %190 = inttoptr i64 %189 to ptr, !dbg !517
  %ptradd320 = getelementptr inbounds i8, ptr %190, i64 8, !dbg !517
  %typeid.parent321 = load i64, ptr %ptradd320, align 8, !dbg !517
  %191 = icmp eq i64 %typeid.parent321, 0, !dbg !517
  br i1 %191, label %result_block322, label %check_subtype317, !dbg !517

result_block322:                                  ; preds = %parent_type_block319, %check_subtype317
  %192 = phi i1 [ false, %parent_type_block319 ], [ true, %check_subtype317 ], !dbg !517
  br i1 %192, label %switch.case323, label %next_if349, !dbg !517

switch.case323:                                   ; preds = %result_block322
    #dbg_declare(ptr %i324, !518, !DIExpression(), !521)
  %193 = load ptr, ptr %v186, align 8, !dbg !521
  %checknull325 = icmp eq ptr %193, null, !dbg !521
  %194 = call i1 @llvm.expect.i1(i1 %checknull325, i1 false), !dbg !521
  br i1 %194, label %panic326, label %checkok330, !dbg !521

checkok330:                                       ; preds = %switch.case323
  %195 = load i128, ptr %193, align 16, !dbg !521
  store i128 %195, ptr %i324, align 16, !dbg !521
  %196 = load i8, ptr %is_mixed_signed, align 1, !dbg !522
  %197 = trunc i8 %196 to i1, !dbg !522
  br i1 %197, label %and.rhs331, label %and.phi333, !dbg !522

and.rhs331:                                       ; preds = %checkok330
  %198 = load i128, ptr %i324, align 16, !dbg !522
  %lt332 = icmp slt i128 %198, 0, !dbg !522
  br label %and.phi333, !dbg !522

and.phi333:                                       ; preds = %and.rhs331, %checkok330
  %val334 = phi i1 [ false, %checkok330 ], [ %lt332, %and.rhs331 ], !dbg !522
  br i1 %val334, label %if.then335, label %if.exit336, !dbg !522

if.then335:                                       ; preds = %and.phi333
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var137, align 8, !dbg !522
  br label %panic_block, !dbg !522

if.exit336:                                       ; preds = %and.phi333
  %199 = load i128, ptr %i324, align 16, !dbg !523
  %200 = load i64, ptr %max, align 8, !dbg !523
  %zext = zext i64 %200 to i128, !dbg !523
  %gt337 = icmp sgt i128 %199, %zext, !dbg !523
  %check338 = icmp sge i128 %zext, 0, !dbg !523
  %siui-gt339 = and i1 %check338, %gt337, !dbg !523
  br i1 %siui-gt339, label %or.phi345, label %or.rhs340, !dbg !523

or.rhs340:                                        ; preds = %if.exit336
  %201 = load i128, ptr %i324, align 16, !dbg !523
  %202 = load i64, ptr %min, align 8, !dbg !523
  %zext341 = zext i64 %202 to i128, !dbg !523
  %lt342 = icmp slt i128 %201, %zext341, !dbg !523
  %check343 = icmp slt i128 %zext341, 0, !dbg !523
  %siui-lt344 = or i1 %check343, %lt342, !dbg !523
  br label %or.phi345, !dbg !523

or.phi345:                                        ; preds = %or.rhs340, %if.exit336
  %val346 = phi i1 [ true, %if.exit336 ], [ %siui-lt344, %or.rhs340 ], !dbg !523
  br i1 %val346, label %if.then347, label %if.exit348, !dbg !523

if.then347:                                       ; preds = %or.phi345
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !523
  br label %panic_block, !dbg !523

if.exit348:                                       ; preds = %or.phi345
  %203 = load i128, ptr %i324, align 16, !dbg !524
  %trunc = trunc i128 %203 to i64, !dbg !524
  store i64 %trunc, ptr %blockret187, align 8, !dbg !524
  br label %expr_block.exit473, !dbg !524

next_if349:                                       ; preds = %result_block322
  br label %check_subtype350, !dbg !525

check_subtype350:                                 ; preds = %parent_type_block352, %next_if349
  %204 = phi i64 [ %132, %next_if349 ], [ %typeid.parent354, %parent_type_block352 ], !dbg !525
  %eq351 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %204, !dbg !525
  br i1 %eq351, label %result_block355, label %parent_type_block352, !dbg !525

parent_type_block352:                             ; preds = %check_subtype350
  %205 = inttoptr i64 %204 to ptr, !dbg !525
  %ptradd353 = getelementptr inbounds i8, ptr %205, i64 8, !dbg !525
  %typeid.parent354 = load i64, ptr %ptradd353, align 8, !dbg !525
  %206 = icmp eq i64 %typeid.parent354, 0, !dbg !525
  br i1 %206, label %result_block355, label %check_subtype350, !dbg !525

result_block355:                                  ; preds = %parent_type_block352, %check_subtype350
  %207 = phi i1 [ false, %parent_type_block352 ], [ true, %check_subtype350 ], !dbg !525
  br i1 %207, label %switch.case356, label %next_if369, !dbg !525

switch.case356:                                   ; preds = %result_block355
    #dbg_declare(ptr %c357, !526, !DIExpression(), !528)
  %208 = load ptr, ptr %v186, align 8, !dbg !528
  %checknull358 = icmp eq ptr %208, null, !dbg !528
  %209 = call i1 @llvm.expect.i1(i1 %checknull358, i1 false), !dbg !528
  br i1 %209, label %panic359, label %checkok363, !dbg !528

checkok363:                                       ; preds = %switch.case356
  %210 = load i8, ptr %208, align 1, !dbg !528
  store i8 %210, ptr %c357, align 1, !dbg !528
  %211 = load i8, ptr %c357, align 1, !dbg !529
  %zext364 = zext i8 %211 to i64, !dbg !529
  %212 = load i64, ptr %max, align 8, !dbg !529
  %gt365 = icmp ugt i64 %zext364, %212, !dbg !529
  br i1 %gt365, label %if.then366, label %if.exit367, !dbg !529

if.then366:                                       ; preds = %checkok363
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !529
  br label %panic_block, !dbg !529

if.exit367:                                       ; preds = %checkok363
  %213 = load i8, ptr %c357, align 1, !dbg !530
  %zext368 = zext i8 %213 to i64, !dbg !530
  store i64 %zext368, ptr %blockret187, align 8, !dbg !530
  br label %expr_block.exit473, !dbg !530

next_if369:                                       ; preds = %result_block355
  br label %check_subtype370, !dbg !531

check_subtype370:                                 ; preds = %parent_type_block372, %next_if369
  %214 = phi i64 [ %132, %next_if369 ], [ %typeid.parent374, %parent_type_block372 ], !dbg !531
  %eq371 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %214, !dbg !531
  br i1 %eq371, label %result_block375, label %parent_type_block372, !dbg !531

parent_type_block372:                             ; preds = %check_subtype370
  %215 = inttoptr i64 %214 to ptr, !dbg !531
  %ptradd373 = getelementptr inbounds i8, ptr %215, i64 8, !dbg !531
  %typeid.parent374 = load i64, ptr %ptradd373, align 8, !dbg !531
  %216 = icmp eq i64 %typeid.parent374, 0, !dbg !531
  br i1 %216, label %result_block375, label %check_subtype370, !dbg !531

result_block375:                                  ; preds = %parent_type_block372, %check_subtype370
  %217 = phi i1 [ false, %parent_type_block372 ], [ true, %check_subtype370 ], !dbg !531
  br i1 %217, label %switch.case376, label %next_if394, !dbg !531

switch.case376:                                   ; preds = %result_block375
    #dbg_declare(ptr %s377, !532, !DIExpression(), !535)
  %218 = load ptr, ptr %v186, align 8, !dbg !535
  %checknull378 = icmp eq ptr %218, null, !dbg !535
  %219 = call i1 @llvm.expect.i1(i1 %checknull378, i1 false), !dbg !535
  br i1 %219, label %panic379, label %checkok383, !dbg !535

checkok383:                                       ; preds = %switch.case376
  %220 = load i16, ptr %218, align 2, !dbg !535
  store i16 %220, ptr %s377, align 2, !dbg !535
  %221 = load i16, ptr %s377, align 2, !dbg !536
  %zext384 = zext i16 %221 to i64, !dbg !536
  %222 = load i64, ptr %max, align 8, !dbg !536
  %gt385 = icmp ugt i64 %zext384, %222, !dbg !536
  br i1 %gt385, label %or.phi389, label %or.rhs386, !dbg !536

or.rhs386:                                        ; preds = %checkok383
  %223 = load i16, ptr %s377, align 2, !dbg !536
  %zext387 = zext i16 %223 to i64, !dbg !536
  %224 = load i64, ptr %min, align 8, !dbg !536
  %lt388 = icmp ult i64 %zext387, %224, !dbg !536
  br label %or.phi389, !dbg !536

or.phi389:                                        ; preds = %or.rhs386, %checkok383
  %val390 = phi i1 [ true, %checkok383 ], [ %lt388, %or.rhs386 ], !dbg !536
  br i1 %val390, label %if.then391, label %if.exit392, !dbg !536

if.then391:                                       ; preds = %or.phi389
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !536
  br label %panic_block, !dbg !536

if.exit392:                                       ; preds = %or.phi389
  %225 = load i16, ptr %s377, align 2, !dbg !537
  %zext393 = zext i16 %225 to i64, !dbg !537
  store i64 %zext393, ptr %blockret187, align 8, !dbg !537
  br label %expr_block.exit473, !dbg !537

next_if394:                                       ; preds = %result_block375
  br label %check_subtype395, !dbg !538

check_subtype395:                                 ; preds = %parent_type_block397, %next_if394
  %226 = phi i64 [ %132, %next_if394 ], [ %typeid.parent399, %parent_type_block397 ], !dbg !538
  %eq396 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %226, !dbg !538
  br i1 %eq396, label %result_block400, label %parent_type_block397, !dbg !538

parent_type_block397:                             ; preds = %check_subtype395
  %227 = inttoptr i64 %226 to ptr, !dbg !538
  %ptradd398 = getelementptr inbounds i8, ptr %227, i64 8, !dbg !538
  %typeid.parent399 = load i64, ptr %ptradd398, align 8, !dbg !538
  %228 = icmp eq i64 %typeid.parent399, 0, !dbg !538
  br i1 %228, label %result_block400, label %check_subtype395, !dbg !538

result_block400:                                  ; preds = %parent_type_block397, %check_subtype395
  %229 = phi i1 [ false, %parent_type_block397 ], [ true, %check_subtype395 ], !dbg !538
  br i1 %229, label %switch.case401, label %next_if419, !dbg !538

switch.case401:                                   ; preds = %result_block400
    #dbg_declare(ptr %i402, !539, !DIExpression(), !541)
  %230 = load ptr, ptr %v186, align 8, !dbg !541
  %checknull403 = icmp eq ptr %230, null, !dbg !541
  %231 = call i1 @llvm.expect.i1(i1 %checknull403, i1 false), !dbg !541
  br i1 %231, label %panic404, label %checkok408, !dbg !541

checkok408:                                       ; preds = %switch.case401
  %232 = load i32, ptr %230, align 4, !dbg !541
  store i32 %232, ptr %i402, align 4, !dbg !541
  %233 = load i32, ptr %i402, align 4, !dbg !542
  %zext409 = zext i32 %233 to i64, !dbg !542
  %234 = load i64, ptr %max, align 8, !dbg !542
  %gt410 = icmp ugt i64 %zext409, %234, !dbg !542
  br i1 %gt410, label %or.phi414, label %or.rhs411, !dbg !542

or.rhs411:                                        ; preds = %checkok408
  %235 = load i32, ptr %i402, align 4, !dbg !542
  %zext412 = zext i32 %235 to i64, !dbg !542
  %236 = load i64, ptr %min, align 8, !dbg !542
  %lt413 = icmp ult i64 %zext412, %236, !dbg !542
  br label %or.phi414, !dbg !542

or.phi414:                                        ; preds = %or.rhs411, %checkok408
  %val415 = phi i1 [ true, %checkok408 ], [ %lt413, %or.rhs411 ], !dbg !542
  br i1 %val415, label %if.then416, label %if.exit417, !dbg !542

if.then416:                                       ; preds = %or.phi414
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !542
  br label %panic_block, !dbg !542

if.exit417:                                       ; preds = %or.phi414
  %237 = load i32, ptr %i402, align 4, !dbg !543
  %zext418 = zext i32 %237 to i64, !dbg !543
  store i64 %zext418, ptr %blockret187, align 8, !dbg !543
  br label %expr_block.exit473, !dbg !543

next_if419:                                       ; preds = %result_block400
  br label %check_subtype420, !dbg !544

check_subtype420:                                 ; preds = %parent_type_block422, %next_if419
  %238 = phi i64 [ %132, %next_if419 ], [ %typeid.parent424, %parent_type_block422 ], !dbg !544
  %eq421 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %238, !dbg !544
  br i1 %eq421, label %result_block425, label %parent_type_block422, !dbg !544

parent_type_block422:                             ; preds = %check_subtype420
  %239 = inttoptr i64 %238 to ptr, !dbg !544
  %ptradd423 = getelementptr inbounds i8, ptr %239, i64 8, !dbg !544
  %typeid.parent424 = load i64, ptr %ptradd423, align 8, !dbg !544
  %240 = icmp eq i64 %typeid.parent424, 0, !dbg !544
  br i1 %240, label %result_block425, label %check_subtype420, !dbg !544

result_block425:                                  ; preds = %parent_type_block422, %check_subtype420
  %241 = phi i1 [ false, %parent_type_block422 ], [ true, %check_subtype420 ], !dbg !544
  br i1 %241, label %switch.case426, label %next_if441, !dbg !544

switch.case426:                                   ; preds = %result_block425
    #dbg_declare(ptr %l427, !545, !DIExpression(), !547)
  %242 = load ptr, ptr %v186, align 8, !dbg !547
  %checknull428 = icmp eq ptr %242, null, !dbg !547
  %243 = call i1 @llvm.expect.i1(i1 %checknull428, i1 false), !dbg !547
  br i1 %243, label %panic429, label %checkok433, !dbg !547

checkok433:                                       ; preds = %switch.case426
  %244 = load i64, ptr %242, align 8, !dbg !547
  store i64 %244, ptr %l427, align 8, !dbg !547
  %245 = load i64, ptr %l427, align 8, !dbg !548
  %246 = load i64, ptr %max, align 8, !dbg !548
  %gt434 = icmp ugt i64 %245, %246, !dbg !548
  br i1 %gt434, label %or.phi437, label %or.rhs435, !dbg !548

or.rhs435:                                        ; preds = %checkok433
  %247 = load i64, ptr %l427, align 8, !dbg !548
  %248 = load i64, ptr %min, align 8, !dbg !548
  %lt436 = icmp ult i64 %247, %248, !dbg !548
  br label %or.phi437, !dbg !548

or.phi437:                                        ; preds = %or.rhs435, %checkok433
  %val438 = phi i1 [ true, %checkok433 ], [ %lt436, %or.rhs435 ], !dbg !548
  br i1 %val438, label %if.then439, label %if.exit440, !dbg !548

if.then439:                                       ; preds = %or.phi437
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !548
  br label %panic_block, !dbg !548

if.exit440:                                       ; preds = %or.phi437
  %249 = load i64, ptr %l427, align 8, !dbg !549
  store i64 %249, ptr %blockret187, align 8, !dbg !549
  br label %expr_block.exit473, !dbg !549

next_if441:                                       ; preds = %result_block425
  br label %check_subtype442, !dbg !550

check_subtype442:                                 ; preds = %parent_type_block444, %next_if441
  %250 = phi i64 [ %132, %next_if441 ], [ %typeid.parent446, %parent_type_block444 ], !dbg !550
  %eq443 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %250, !dbg !550
  br i1 %eq443, label %result_block447, label %parent_type_block444, !dbg !550

parent_type_block444:                             ; preds = %check_subtype442
  %251 = inttoptr i64 %250 to ptr, !dbg !550
  %ptradd445 = getelementptr inbounds i8, ptr %251, i64 8, !dbg !550
  %typeid.parent446 = load i64, ptr %ptradd445, align 8, !dbg !550
  %252 = icmp eq i64 %typeid.parent446, 0, !dbg !550
  br i1 %252, label %result_block447, label %check_subtype442, !dbg !550

result_block447:                                  ; preds = %parent_type_block444, %check_subtype442
  %253 = phi i1 [ false, %parent_type_block444 ], [ true, %check_subtype442 ], !dbg !550
  br i1 %253, label %switch.case448, label %next_if466, !dbg !550

switch.case448:                                   ; preds = %result_block447
    #dbg_declare(ptr %i449, !551, !DIExpression(), !554)
  %254 = load ptr, ptr %v186, align 8, !dbg !554
  %checknull450 = icmp eq ptr %254, null, !dbg !554
  %255 = call i1 @llvm.expect.i1(i1 %checknull450, i1 false), !dbg !554
  br i1 %255, label %panic451, label %checkok455, !dbg !554

checkok455:                                       ; preds = %switch.case448
  %256 = load i128, ptr %254, align 16, !dbg !554
  store i128 %256, ptr %i449, align 16, !dbg !554
  %257 = load i128, ptr %i449, align 16, !dbg !555
  %258 = load i64, ptr %max, align 8, !dbg !555
  %zext456 = zext i64 %258 to i128, !dbg !555
  %gt457 = icmp ugt i128 %257, %zext456, !dbg !555
  br i1 %gt457, label %or.phi461, label %or.rhs458, !dbg !555

or.rhs458:                                        ; preds = %checkok455
  %259 = load i128, ptr %i449, align 16, !dbg !555
  %260 = load i64, ptr %min, align 8, !dbg !555
  %zext459 = zext i64 %260 to i128, !dbg !555
  %lt460 = icmp ult i128 %259, %zext459, !dbg !555
  br label %or.phi461, !dbg !555

or.phi461:                                        ; preds = %or.rhs458, %checkok455
  %val462 = phi i1 [ true, %checkok455 ], [ %lt460, %or.rhs458 ], !dbg !555
  br i1 %val462, label %if.then463, label %if.exit464, !dbg !555

if.then463:                                       ; preds = %or.phi461
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var137, align 8, !dbg !555
  br label %panic_block, !dbg !555

if.exit464:                                       ; preds = %or.phi461
  %261 = load i128, ptr %i449, align 16, !dbg !556
  %trunc465 = trunc i128 %261 to i64, !dbg !556
  store i64 %trunc465, ptr %blockret187, align 8, !dbg !556
  br label %expr_block.exit473, !dbg !556

next_if466:                                       ; preds = %result_block447
  br label %switch.default, !dbg !556

switch.default:                                   ; preds = %next_if466
  store %"char[]" { ptr @.str.95, i64 30 }, ptr %string467, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg468, ptr align 8 %string467, i32 16, i1 false)
  store %"char[]" { ptr @.str.96, i64 12 }, ptr %indirectarg469, align 8
  store %"char[]" { ptr @.str.97, i64 17 }, ptr %indirectarg470, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg471, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg468, ptr align 8 %indirectarg469, ptr align 8 %indirectarg470, i32 198, ptr align 8 %indirectarg471), !dbg !557
  unreachable, !dbg !561

expr_block.exit473:                               ; preds = %if.exit464, %if.exit440, %if.exit417, %if.exit392, %if.exit367, %if.exit348, %if.exit315, %if.exit283, %if.exit248, %if.exit220
  br label %noerr_block478, !dbg !561

panic_block:                                      ; preds = %if.then463, %if.then439, %if.then416, %if.then391, %if.then366, %if.then347, %if.then335, %if.then314, %if.then303, %if.then282, %if.then269, %if.then247, %if.then240, %if.then219
  %262 = insertvalue %any undef, ptr %error_var137, 0, !dbg !561
  %263 = insertvalue %any %262, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !561
  store %"char[]" { ptr @.panic_msg.98, i64 36 }, ptr %indirectarg474, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg475, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg476, align 8
  store %any %263, ptr %varargslots, align 16
  %264 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %264, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg477, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg474, ptr align 8 %indirectarg475, ptr align 8 %indirectarg476, i32 198, ptr align 8 %indirectarg477), !dbg !464
  unreachable, !dbg !464

noerr_block478:                                   ; preds = %expr_block.exit473
  %265 = load i64, ptr %blockret187, align 8, !dbg !464
  store i64 %265, ptr %i, align 8, !dbg !464
  %266 = load i64, ptr %i, align 8, !dbg !562
  %ptradd479 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !562
  %267 = load i64, ptr %ptradd479, align 8, !dbg !562
  %"introspect*480" = inttoptr i64 %267 to ptr, !dbg !562
  %typeid.kind481 = load i8, ptr %"introspect*480", align 8, !dbg !562
  %eq482 = icmp eq i8 %typeid.kind481, 8, !dbg !562
  br i1 %eq482, label %check_type_ok487, label %check_next483, !dbg !562

check_next483:                                    ; preds = %noerr_block478
  store %"char[]" { ptr @.panic_msg.99, i64 51 }, ptr %indirectarg484, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg485, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg486, align 8
  %268 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %268(ptr align 8 %indirectarg484, ptr align 8 %indirectarg485, ptr align 8 %indirectarg486, i32 199), !dbg !562
  unreachable, !dbg !562

check_type_ok487:                                 ; preds = %noerr_block478
  %ptradd488 = getelementptr inbounds i8, ptr %"introspect*480", i64 40, !dbg !562
  %namelen = load i64, ptr %ptradd488, align 8, !dbg !562
  %ptradd489 = getelementptr inbounds i8, ptr %"introspect*480", i64 48, !dbg !562
  %269 = insertvalue %"char[][]" undef, ptr %ptradd489, 0, !dbg !562
  %270 = insertvalue %"char[][]" %269, i64 %namelen, 1, !dbg !562
  %271 = extractvalue %"char[][]" %270, 1, !dbg !562
  %lt490 = icmp ult i64 %266, %271, !dbg !562
  br i1 %lt490, label %assert_ok498, label %assert_fail491, !dbg !562

assert_fail491:                                   ; preds = %check_type_ok487
  %272 = insertvalue %any undef, ptr %i, 0, !dbg !562
  %273 = insertvalue %any %272, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !562
  store %"char[]" { ptr @.panic_msg.100, i64 49 }, ptr %indirectarg492, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg493, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg494, align 8
  store %any %273, ptr %varargslots495, align 16
  %274 = insertvalue %"any[]" undef, ptr %varargslots495, 0
  %"$$temp496" = insertvalue %"any[]" %274, i64 1, 1
  store %"any[]" %"$$temp496", ptr %indirectarg497, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg492, ptr align 8 %indirectarg493, ptr align 8 %indirectarg494, i32 199, ptr align 8 %indirectarg497), !dbg !562
  unreachable, !dbg !562

assert_ok498:                                     ; preds = %check_type_ok487
  %ptradd500 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !563
  %275 = load i64, ptr %ptradd500, align 8, !dbg !563
  %"introspect*501" = inttoptr i64 %275 to ptr, !dbg !563
  %typeid.kind502 = load i8, ptr %"introspect*501", align 8, !dbg !563
  %eq503 = icmp eq i8 %typeid.kind502, 8, !dbg !563
  br i1 %eq503, label %check_type_ok508, label %check_next504, !dbg !563

check_next504:                                    ; preds = %assert_ok498
  store %"char[]" { ptr @.panic_msg.99, i64 51 }, ptr %indirectarg505, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg506, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg507, align 8
  %276 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %276(ptr align 8 %indirectarg505, ptr align 8 %indirectarg506, ptr align 8 %indirectarg507, i32 200), !dbg !563
  unreachable, !dbg !563

check_type_ok508:                                 ; preds = %assert_ok498
  %ptradd509 = getelementptr inbounds i8, ptr %"introspect*501", i64 40, !dbg !563
  %namelen510 = load i64, ptr %ptradd509, align 8, !dbg !563
  %ptradd511 = getelementptr inbounds i8, ptr %"introspect*501", i64 48, !dbg !563
  %277 = insertvalue %"char[][]" undef, ptr %ptradd511, 0, !dbg !563
  %278 = insertvalue %"char[][]" %277, i64 %namelen510, 1, !dbg !563
  %279 = extractvalue %"char[][]" %278, 1, !dbg !563
  %280 = extractvalue %"char[][]" %278, 0, !dbg !563
  %281 = load i64, ptr %i, align 8, !dbg !563
  %ge = icmp uge i64 %281, %279, !dbg !563
  %282 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !563
  br i1 %282, label %panic512, label %checkok521, !dbg !563

checkok521:                                       ; preds = %check_type_ok508
  %ptroffset = getelementptr inbounds [16 x i8], ptr %280, i64 %281, !dbg !563
  %283 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg523, ptr align 8 %ptroffset, i32 16, i1 false)
  %284 = call i64 @std.io.Formatter.out_substr(ptr %retparam522, ptr %283, ptr align 8 %indirectarg523), !dbg !563
  %not_err524 = icmp eq i64 %284, 0, !dbg !563
  %285 = call i1 @llvm.expect.i1(i1 %not_err524, i1 true), !dbg !563
  br i1 %285, label %after_check526, label %assign_optional525, !dbg !563

assign_optional525:                               ; preds = %checkok521
  store i64 %284, ptr %reterr499, align 8, !dbg !563
  br label %err_retblock527, !dbg !563

after_check526:                                   ; preds = %checkok521
  %286 = load i64, ptr %retparam522, align 8, !dbg !563
  store i64 %286, ptr %0, align 8, !dbg !563
  ret i64 0, !dbg !563

err_retblock527:                                  ; preds = %assign_optional525
  %287 = load i64, ptr %reterr499, align 8, !dbg !563
  ret i64 %287, !dbg !563

switch.case528:                                   ; preds = %switch.entry135
  %288 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.102, i64 8 }, ptr %indirectarg531, align 8
  %289 = call i64 @std.io.Formatter.out_substr(ptr %retparam530, ptr %288, ptr align 8 %indirectarg531), !dbg !564
  %not_err532 = icmp eq i64 %289, 0, !dbg !564
  %290 = call i1 @llvm.expect.i1(i1 %not_err532, i1 true), !dbg !564
  br i1 %290, label %after_check534, label %assign_optional533, !dbg !564

assign_optional533:                               ; preds = %switch.case528
  store i64 %289, ptr %reterr529, align 8, !dbg !564
  br label %err_retblock535, !dbg !564

after_check534:                                   ; preds = %switch.case528
  %291 = load i64, ptr %retparam530, align 8, !dbg !564
  store i64 %291, ptr %0, align 8, !dbg !564
  ret i64 0, !dbg !564

err_retblock535:                                  ; preds = %assign_optional533
  %292 = load i64, ptr %reterr529, align 8, !dbg !564
  ret i64 %292, !dbg !564

switch.case536:                                   ; preds = %switch.entry135
  %293 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.103, i64 7 }, ptr %indirectarg539, align 8
  %294 = call i64 @std.io.Formatter.out_substr(ptr %retparam538, ptr %293, ptr align 8 %indirectarg539), !dbg !566
  %not_err540 = icmp eq i64 %294, 0, !dbg !566
  %295 = call i1 @llvm.expect.i1(i1 %not_err540, i1 true), !dbg !566
  br i1 %295, label %after_check542, label %assign_optional541, !dbg !566

assign_optional541:                               ; preds = %switch.case536
  store i64 %294, ptr %reterr537, align 8, !dbg !566
  br label %err_retblock543, !dbg !566

after_check542:                                   ; preds = %switch.case536
  %296 = load i64, ptr %retparam538, align 8, !dbg !566
  store i64 %296, ptr %0, align 8, !dbg !566
  ret i64 0, !dbg !566

err_retblock543:                                  ; preds = %assign_optional541
  %297 = load i64, ptr %reterr537, align 8, !dbg !566
  ret i64 %297, !dbg !566

switch.case544:                                   ; preds = %switch.entry135
  %298 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.104, i64 11 }, ptr %indirectarg547, align 8
  %299 = call i64 @std.io.Formatter.out_substr(ptr %retparam546, ptr %298, ptr align 8 %indirectarg547), !dbg !568
  %not_err548 = icmp eq i64 %299, 0, !dbg !568
  %300 = call i1 @llvm.expect.i1(i1 %not_err548, i1 true), !dbg !568
  br i1 %300, label %after_check550, label %assign_optional549, !dbg !568

assign_optional549:                               ; preds = %switch.case544
  store i64 %299, ptr %reterr545, align 8, !dbg !568
  br label %err_retblock551, !dbg !568

after_check550:                                   ; preds = %switch.case544
  %301 = load i64, ptr %retparam546, align 8, !dbg !568
  store i64 %301, ptr %0, align 8, !dbg !568
  ret i64 0, !dbg !568

err_retblock551:                                  ; preds = %assign_optional549
  %302 = load i64, ptr %reterr545, align 8, !dbg !568
  ret i64 %302, !dbg !568

switch.case552:                                   ; preds = %switch.entry135
  %303 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.105, i64 10 }, ptr %indirectarg555, align 8
  %304 = call i64 @std.io.Formatter.out_substr(ptr %retparam554, ptr %303, ptr align 8 %indirectarg555), !dbg !570
  %not_err556 = icmp eq i64 %304, 0, !dbg !570
  %305 = call i1 @llvm.expect.i1(i1 %not_err556, i1 true), !dbg !570
  br i1 %305, label %after_check558, label %assign_optional557, !dbg !570

assign_optional557:                               ; preds = %switch.case552
  store i64 %304, ptr %reterr553, align 8, !dbg !570
  br label %err_retblock559, !dbg !570

after_check558:                                   ; preds = %switch.case552
  %306 = load i64, ptr %retparam554, align 8, !dbg !570
  store i64 %306, ptr %0, align 8, !dbg !570
  ret i64 0, !dbg !570

err_retblock559:                                  ; preds = %assign_optional557
  %307 = load i64, ptr %reterr553, align 8, !dbg !570
  ret i64 %307, !dbg !570

switch.case560:                                   ; preds = %switch.entry135
  %ptradd561 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !572
  %308 = load i64, ptr %ptradd561, align 8, !dbg !572
  %eq562 = icmp eq i64 %308, ptrtoint (ptr @"$ct.String" to i64), !dbg !572
  br i1 %eq562, label %if.then563, label %if.exit577, !dbg !572

if.then563:                                       ; preds = %switch.case560
  %309 = load ptr, ptr %2, align 8, !dbg !574
  %checknull565 = icmp eq ptr %309, null, !dbg !574
  %310 = call i1 @llvm.expect.i1(i1 %checknull565, i1 false), !dbg !574
  br i1 %310, label %panic566, label %checkok570, !dbg !574

checkok570:                                       ; preds = %if.then563
  %311 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg572, ptr align 8 %309, i32 16, i1 false)
  %312 = call i64 @std.io.Formatter.out_substr(ptr %retparam571, ptr %311, ptr align 8 %indirectarg572), !dbg !574
  %not_err573 = icmp eq i64 %312, 0, !dbg !574
  %313 = call i1 @llvm.expect.i1(i1 %not_err573, i1 true), !dbg !574
  br i1 %313, label %after_check575, label %assign_optional574, !dbg !574

assign_optional574:                               ; preds = %checkok570
  store i64 %312, ptr %reterr564, align 8, !dbg !574
  br label %err_retblock576, !dbg !574

after_check575:                                   ; preds = %checkok570
  %314 = load i64, ptr %retparam571, align 8, !dbg !574
  store i64 %314, ptr %0, align 8, !dbg !574
  ret i64 0, !dbg !574

err_retblock576:                                  ; preds = %assign_optional574
  %315 = load i64, ptr %reterr564, align 8, !dbg !574
  ret i64 %315, !dbg !574

if.exit577:                                       ; preds = %switch.case560
  %ptradd578 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !576
  %316 = load i64, ptr %ptradd578, align 8, !dbg !576
  %eq579 = icmp eq i64 %316, ptrtoint (ptr @"$ct.std.core.string.ZString" to i64), !dbg !576
  br i1 %eq579, label %if.then580, label %if.exit602, !dbg !576

if.then580:                                       ; preds = %if.exit577
  %317 = load ptr, ptr %2, align 8, !dbg !577
  %checknull582 = icmp eq ptr %317, null, !dbg !577
  %318 = call i1 @llvm.expect.i1(i1 %checknull582, i1 false), !dbg !577
  br i1 %318, label %panic583, label %checkok587, !dbg !577

checkok587:                                       ; preds = %if.then580
  %319 = load ptr, ptr %317, align 8, !dbg !577
  %i2b588 = icmp ne ptr %319, null, !dbg !577
  br i1 %i2b588, label %cond.lhs, label %cond.rhs, !dbg !577

cond.lhs:                                         ; preds = %checkok587
  %320 = load ptr, ptr %2, align 8, !dbg !577
  %checknull589 = icmp eq ptr %320, null, !dbg !577
  %321 = call i1 @llvm.expect.i1(i1 %checknull589, i1 false), !dbg !577
  br i1 %321, label %panic590, label %checkok594, !dbg !577

checkok594:                                       ; preds = %cond.lhs
  %322 = load ptr, ptr %320, align 8
  call void @std.core.string.ZString.str_view(ptr sret(%"char[]") align 8 %sretparam, ptr %322), !dbg !577
  %323 = load %"char[]", ptr %sretparam, align 8, !dbg !577
  br label %cond.phi, !dbg !577

cond.rhs:                                         ; preds = %checkok587
  br label %cond.phi, !dbg !577

cond.phi:                                         ; preds = %cond.rhs, %checkok594
  %val595 = phi %"char[]" [ %323, %checkok594 ], [ { ptr @.str.109, i64 6 }, %cond.rhs ], !dbg !577
  %324 = load ptr, ptr %self, align 8
  store %"char[]" %val595, ptr %indirectarg597, align 8
  %325 = call i64 @std.io.Formatter.out_substr(ptr %retparam596, ptr %324, ptr align 8 %indirectarg597), !dbg !577
  %not_err598 = icmp eq i64 %325, 0, !dbg !577
  %326 = call i1 @llvm.expect.i1(i1 %not_err598, i1 true), !dbg !577
  br i1 %326, label %after_check600, label %assign_optional599, !dbg !577

assign_optional599:                               ; preds = %cond.phi
  store i64 %325, ptr %reterr581, align 8, !dbg !577
  br label %err_retblock601, !dbg !577

after_check600:                                   ; preds = %cond.phi
  %327 = load i64, ptr %retparam596, align 8, !dbg !577
  store i64 %327, ptr %0, align 8, !dbg !577
  ret i64 0, !dbg !577

err_retblock601:                                  ; preds = %assign_optional599
  %328 = load i64, ptr %reterr581, align 8, !dbg !577
  ret i64 %328, !dbg !577

if.exit602:                                       ; preds = %if.exit577
  %ptradd603 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !579
  %329 = load i64, ptr %ptradd603, align 8, !dbg !579
  %eq604 = icmp eq i64 %329, ptrtoint (ptr @"$ct.std.core.dstring.DString" to i64), !dbg !579
  br i1 %eq604, label %if.then605, label %if.exit631, !dbg !579

if.then605:                                       ; preds = %if.exit602
  %330 = load ptr, ptr %2, align 8, !dbg !580
  %checknull607 = icmp eq ptr %330, null, !dbg !580
  %331 = call i1 @llvm.expect.i1(i1 %checknull607, i1 false), !dbg !580
  br i1 %331, label %panic608, label %checkok612, !dbg !580

checkok612:                                       ; preds = %if.then605
  %332 = load ptr, ptr %330, align 8, !dbg !580
  %i2b613 = icmp ne ptr %332, null, !dbg !580
  br i1 %i2b613, label %cond.lhs614, label %cond.rhs622, !dbg !580

cond.lhs614:                                      ; preds = %checkok612
  %333 = load ptr, ptr %2, align 8, !dbg !580
  %checknull615 = icmp eq ptr %333, null, !dbg !580
  %334 = call i1 @llvm.expect.i1(i1 %checknull615, i1 false), !dbg !580
  br i1 %334, label %panic616, label %checkok620, !dbg !580

checkok620:                                       ; preds = %cond.lhs614
  %335 = load ptr, ptr %333, align 8
  call void @std.core.dstring.DString.str_view(ptr sret(%"char[]") align 8 %sretparam621, ptr %335), !dbg !580
  %336 = load %"char[]", ptr %sretparam621, align 8, !dbg !580
  br label %cond.phi623, !dbg !580

cond.rhs622:                                      ; preds = %checkok612
  br label %cond.phi623, !dbg !580

cond.phi623:                                      ; preds = %cond.rhs622, %checkok620
  %val624 = phi %"char[]" [ %336, %checkok620 ], [ { ptr @.str.112, i64 6 }, %cond.rhs622 ], !dbg !580
  %337 = load ptr, ptr %self, align 8
  store %"char[]" %val624, ptr %indirectarg626, align 8
  %338 = call i64 @std.io.Formatter.out_substr(ptr %retparam625, ptr %337, ptr align 8 %indirectarg626), !dbg !580
  %not_err627 = icmp eq i64 %338, 0, !dbg !580
  %339 = call i1 @llvm.expect.i1(i1 %not_err627, i1 true), !dbg !580
  br i1 %339, label %after_check629, label %assign_optional628, !dbg !580

assign_optional628:                               ; preds = %cond.phi623
  store i64 %338, ptr %reterr606, align 8, !dbg !580
  br label %err_retblock630, !dbg !580

after_check629:                                   ; preds = %cond.phi623
  %340 = load i64, ptr %retparam625, align 8, !dbg !580
  store i64 %340, ptr %0, align 8, !dbg !580
  ret i64 0, !dbg !580

err_retblock630:                                  ; preds = %assign_optional628
  %341 = load i64, ptr %reterr606, align 8, !dbg !580
  ret i64 %341, !dbg !580

if.exit631:                                       ; preds = %if.exit602
  store ptr %2, ptr %self633, align 8
  %342 = load ptr, ptr %self633, align 8, !dbg !582
  %checknull634 = icmp eq ptr %342, null, !dbg !582
  %343 = call i1 @llvm.expect.i1(i1 %checknull634, i1 false), !dbg !582
  br i1 %343, label %panic635, label %checkok639, !dbg !582

checkok639:                                       ; preds = %if.exit631
  %344 = load ptr, ptr %342, align 8, !dbg !582
  %345 = load ptr, ptr %self633, align 8, !dbg !582
  %checknull640 = icmp eq ptr %345, null, !dbg !582
  %346 = call i1 @llvm.expect.i1(i1 %checknull640, i1 false), !dbg !582
  br i1 %346, label %panic641, label %checkok645, !dbg !582

checkok645:                                       ; preds = %checkok639
  %ptradd646 = getelementptr inbounds i8, ptr %345, i64 8, !dbg !582
  %347 = load i64, ptr %ptradd646, align 8, !dbg !582
  %"introspect*647" = inttoptr i64 %347 to ptr, !dbg !582
  %typeid.kind648 = load i8, ptr %"introspect*647", align 8, !dbg !582
  %eq649 = icmp eq i8 %typeid.kind648, 15, !dbg !582
  br i1 %eq649, label %check_type_ok668, label %check_next650, !dbg !582

check_next650:                                    ; preds = %checkok645
  %eq651 = icmp eq i8 %typeid.kind648, 19, !dbg !582
  br i1 %eq651, label %check_type_ok668, label %check_next652, !dbg !582

check_next652:                                    ; preds = %check_next650
  %eq653 = icmp eq i8 %typeid.kind648, 17, !dbg !582
  br i1 %eq653, label %check_type_ok668, label %check_next654, !dbg !582

check_next654:                                    ; preds = %check_next652
  %eq655 = icmp eq i8 %typeid.kind648, 8, !dbg !582
  br i1 %eq655, label %check_type_ok668, label %check_next656, !dbg !582

check_next656:                                    ; preds = %check_next654
  %eq657 = icmp eq i8 %typeid.kind648, 16, !dbg !582
  br i1 %eq657, label %check_type_ok668, label %check_next658, !dbg !582

check_next658:                                    ; preds = %check_next656
  %eq659 = icmp eq i8 %typeid.kind648, 18, !dbg !582
  br i1 %eq659, label %check_type_ok668, label %check_next660, !dbg !582

check_next660:                                    ; preds = %check_next658
  %eq661 = icmp eq i8 %typeid.kind648, 14, !dbg !582
  br i1 %eq661, label %check_type_ok668, label %check_next662, !dbg !582

check_next662:                                    ; preds = %check_next660
  %eq663 = icmp eq i8 %typeid.kind648, 12, !dbg !582
  br i1 %eq663, label %check_type_ok668, label %check_next664, !dbg !582

check_next664:                                    ; preds = %check_next662
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg665, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg666, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg667, align 8
  %348 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %348(ptr align 8 %indirectarg665, ptr align 8 %indirectarg666, ptr align 8 %indirectarg667, i32 199), !dbg !582
  unreachable, !dbg !582

check_type_ok668:                                 ; preds = %check_next662, %check_next660, %check_next658, %check_next656, %check_next654, %check_next652, %check_next650, %checkok645
  %ptradd669 = getelementptr inbounds i8, ptr %"introspect*647", i64 32, !dbg !582
  %typeid.inner670 = load i64, ptr %ptradd669, align 8, !dbg !582
  %349 = insertvalue %any undef, ptr %344, 0, !dbg !582
  %350 = insertvalue %any %349, i64 %typeid.inner670, 1, !dbg !582
  %351 = load ptr, ptr %self, align 8
  store %any %350, ptr %indirectarg672, align 8
  %352 = call i64 @std.io.Formatter.out_str(ptr %retparam671, ptr %351, ptr align 8 %indirectarg672), !dbg !584
  %not_err673 = icmp eq i64 %352, 0, !dbg !584
  %353 = call i1 @llvm.expect.i1(i1 %not_err673, i1 true), !dbg !584
  br i1 %353, label %after_check675, label %assign_optional674, !dbg !584

assign_optional674:                               ; preds = %check_type_ok668
  store i64 %352, ptr %reterr632, align 8, !dbg !584
  br label %err_retblock676, !dbg !584

after_check675:                                   ; preds = %check_type_ok668
  %354 = load i64, ptr %retparam671, align 8, !dbg !584
  store i64 %354, ptr %0, align 8, !dbg !584
  ret i64 0, !dbg !584

err_retblock676:                                  ; preds = %assign_optional674
  %355 = load i64, ptr %reterr632, align 8, !dbg !584
  ret i64 %355, !dbg !584

switch.case677:                                   ; preds = %switch.entry135
    #dbg_declare(ptr %inner, !585, !DIExpression(), !587)
  %ptradd678 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !587
  %356 = load i64, ptr %ptradd678, align 8, !dbg !587
  %"introspect*679" = inttoptr i64 %356 to ptr, !dbg !587
  %typeid.kind680 = load i8, ptr %"introspect*679", align 8, !dbg !587
  %eq681 = icmp eq i8 %typeid.kind680, 15, !dbg !587
  br i1 %eq681, label %check_type_ok700, label %check_next682, !dbg !587

check_next682:                                    ; preds = %switch.case677
  %eq683 = icmp eq i8 %typeid.kind680, 19, !dbg !587
  br i1 %eq683, label %check_type_ok700, label %check_next684, !dbg !587

check_next684:                                    ; preds = %check_next682
  %eq685 = icmp eq i8 %typeid.kind680, 17, !dbg !587
  br i1 %eq685, label %check_type_ok700, label %check_next686, !dbg !587

check_next686:                                    ; preds = %check_next684
  %eq687 = icmp eq i8 %typeid.kind680, 8, !dbg !587
  br i1 %eq687, label %check_type_ok700, label %check_next688, !dbg !587

check_next688:                                    ; preds = %check_next686
  %eq689 = icmp eq i8 %typeid.kind680, 16, !dbg !587
  br i1 %eq689, label %check_type_ok700, label %check_next690, !dbg !587

check_next690:                                    ; preds = %check_next688
  %eq691 = icmp eq i8 %typeid.kind680, 18, !dbg !587
  br i1 %eq691, label %check_type_ok700, label %check_next692, !dbg !587

check_next692:                                    ; preds = %check_next690
  %eq693 = icmp eq i8 %typeid.kind680, 14, !dbg !587
  br i1 %eq693, label %check_type_ok700, label %check_next694, !dbg !587

check_next694:                                    ; preds = %check_next692
  %eq695 = icmp eq i8 %typeid.kind680, 12, !dbg !587
  br i1 %eq695, label %check_type_ok700, label %check_next696, !dbg !587

check_next696:                                    ; preds = %check_next694
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg697, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg698, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg699, align 8
  %357 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %357(ptr align 8 %indirectarg697, ptr align 8 %indirectarg698, ptr align 8 %indirectarg699, i32 224), !dbg !587
  unreachable, !dbg !587

check_type_ok700:                                 ; preds = %check_next694, %check_next692, %check_next690, %check_next688, %check_next686, %check_next684, %check_next682, %switch.case677
  %ptradd701 = getelementptr inbounds i8, ptr %"introspect*679", i64 32, !dbg !587
  %typeid.inner702 = load i64, ptr %ptradd701, align 8, !dbg !587
  store i64 %typeid.inner702, ptr %inner, align 8, !dbg !587
    #dbg_declare(ptr %pointer, !588, !DIExpression(), !590)
  %358 = load ptr, ptr %2, align 8, !dbg !590
  store ptr %358, ptr %pointer, align 8, !dbg !590
  %ptradd703 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !591
  %359 = load i64, ptr %ptradd703, align 8, !dbg !591
  %"introspect*704" = inttoptr i64 %359 to ptr, !dbg !591
  %typeid.kind705 = load i8, ptr %"introspect*704", align 8, !dbg !591
  %eq706 = icmp eq i8 %typeid.kind705, 15, !dbg !591
  br i1 %eq706, label %check_type_ok725, label %check_next707, !dbg !591

check_next707:                                    ; preds = %check_type_ok700
  %eq708 = icmp eq i8 %typeid.kind705, 19, !dbg !591
  br i1 %eq708, label %check_type_ok725, label %check_next709, !dbg !591

check_next709:                                    ; preds = %check_next707
  %eq710 = icmp eq i8 %typeid.kind705, 17, !dbg !591
  br i1 %eq710, label %check_type_ok725, label %check_next711, !dbg !591

check_next711:                                    ; preds = %check_next709
  %eq712 = icmp eq i8 %typeid.kind705, 8, !dbg !591
  br i1 %eq712, label %check_type_ok725, label %check_next713, !dbg !591

check_next713:                                    ; preds = %check_next711
  %eq714 = icmp eq i8 %typeid.kind705, 16, !dbg !591
  br i1 %eq714, label %check_type_ok725, label %check_next715, !dbg !591

check_next715:                                    ; preds = %check_next713
  %eq716 = icmp eq i8 %typeid.kind705, 18, !dbg !591
  br i1 %eq716, label %check_type_ok725, label %check_next717, !dbg !591

check_next717:                                    ; preds = %check_next715
  %eq718 = icmp eq i8 %typeid.kind705, 14, !dbg !591
  br i1 %eq718, label %check_type_ok725, label %check_next719, !dbg !591

check_next719:                                    ; preds = %check_next717
  %eq720 = icmp eq i8 %typeid.kind705, 12, !dbg !591
  br i1 %eq720, label %check_type_ok725, label %check_next721, !dbg !591

check_next721:                                    ; preds = %check_next719
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg722, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg723, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg724, align 8
  %360 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %360(ptr align 8 %indirectarg722, ptr align 8 %indirectarg723, ptr align 8 %indirectarg724, i32 226), !dbg !591
  unreachable, !dbg !591

check_type_ok725:                                 ; preds = %check_next719, %check_next717, %check_next715, %check_next713, %check_next711, %check_next709, %check_next707, %check_type_ok700
  %ptradd726 = getelementptr inbounds i8, ptr %"introspect*704", i64 32, !dbg !591
  %typeid.inner727 = load i64, ptr %ptradd726, align 8, !dbg !591
  %neq728 = icmp ne i64 %typeid.inner727, ptrtoint (ptr @"$ct.void" to i64), !dbg !591
  br i1 %neq728, label %if.then729, label %if.exit769, !dbg !591

if.then729:                                       ; preds = %check_type_ok725
    #dbg_declare(ptr %deref, !592, !DIExpression(), !594)
  %361 = load ptr, ptr %pointer, align 8, !dbg !594
  %checknull730 = icmp eq ptr %361, null, !dbg !594
  %362 = call i1 @llvm.expect.i1(i1 %checknull730, i1 false), !dbg !594
  br i1 %362, label %panic731, label %checkok735, !dbg !594

checkok735:                                       ; preds = %if.then729
  %363 = load ptr, ptr %361, align 8
  store ptr %363, ptr %ptr, align 8
  %364 = load i64, ptr %inner, align 8
  store i64 %364, ptr %type, align 8
  %365 = load ptr, ptr %ptr, align 8, !dbg !595
  %366 = load i64, ptr %type, align 8, !dbg !595
  %367 = insertvalue %any undef, ptr %365, 0, !dbg !595
  %368 = insertvalue %any %367, i64 %366, 1, !dbg !595
  store %any %368, ptr %deref, align 8, !dbg !595
  %369 = load %any, ptr %deref, align 8, !dbg !597
  %370 = load ptr, ptr %self, align 8
  store %any %369, ptr %indirectarg737, align 8
  %371 = call i64 @std.io.Formatter.print_with_function(ptr %retparam736, ptr %370, ptr align 8 %indirectarg737), !dbg !597
  %not_err738 = icmp eq i64 %371, 0, !dbg !597
  %372 = call i1 @llvm.expect.i1(i1 %not_err738, i1 true), !dbg !597
  br i1 %372, label %after_check740, label %assign_optional739, !dbg !597

assign_optional739:                               ; preds = %checkok735
  store i64 %371, ptr %n.f, align 8, !dbg !597
  br label %after_assign741, !dbg !597

after_check740:                                   ; preds = %checkok735
  %373 = load i64, ptr %retparam736, align 8, !dbg !597
  store i64 %373, ptr %n, align 8, !dbg !597
  store i64 0, ptr %n.f, align 8, !dbg !597
  br label %after_assign741, !dbg !597

after_assign741:                                  ; preds = %after_check740, %assign_optional739
  %load.err742 = load i64, ptr %n.f, align 8, !dbg !598
  %result743 = icmp eq i64 %load.err742, 0, !dbg !598
  br i1 %result743, label %if.then744, label %if.exit746, !dbg !598

if.then744:                                       ; preds = %after_assign741
  %374 = load i64, ptr %n, align 8, !dbg !598
  store i64 %374, ptr %0, align 8, !dbg !598
  ret i64 0, !dbg !598

if.exit746:                                       ; preds = %after_assign741
    #dbg_declare(ptr %f748, !599, !DIExpression(), !601)
  br label %testblock749, !dbg !601

testblock749:                                     ; preds = %if.exit746
  %optval750 = load i64, ptr %n.f, align 8, !dbg !601
  %not_err751 = icmp eq i64 %optval750, 0, !dbg !601
  %375 = call i1 @llvm.expect.i1(i1 %not_err751, i1 true), !dbg !601
  br i1 %375, label %after_check753, label %assign_optional752, !dbg !601

assign_optional752:                               ; preds = %testblock749
  store i64 %optval750, ptr %f748, align 8, !dbg !601
  br label %end_block754, !dbg !601

after_check753:                                   ; preds = %testblock749
  store i64 0, ptr %f748, align 8, !dbg !601
  br label %end_block754, !dbg !601

end_block754:                                     ; preds = %after_check753, %assign_optional752
  %376 = load i64, ptr %f748, align 8, !dbg !601
  %i2b755 = icmp ne i64 %376, 0, !dbg !601
  br i1 %i2b755, label %if.then756, label %if.exit757, !dbg !601

if.then756:                                       ; preds = %end_block754
  %377 = load i64, ptr %f748, align 8, !dbg !601
  store i64 %377, ptr %blockret747, align 8, !dbg !601
  br label %expr_block.exit758, !dbg !601

if.exit757:                                       ; preds = %end_block754
  store i64 0, ptr %blockret747, align 8, !dbg !603
  br label %expr_block.exit758, !dbg !603

expr_block.exit758:                               ; preds = %if.exit757, %if.then756
  %378 = load i64, ptr %blockret747, align 8, !dbg !603
  %neq759 = icmp ne i64 %378, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !602
  br i1 %neq759, label %if.then760, label %if.exit768, !dbg !602

if.then760:                                       ; preds = %expr_block.exit758
  %optval762 = load i64, ptr %n.f, align 8, !dbg !602
  %not_err763 = icmp eq i64 %optval762, 0, !dbg !602
  %379 = call i1 @llvm.expect.i1(i1 %not_err763, i1 true), !dbg !602
  br i1 %379, label %after_check765, label %assign_optional764, !dbg !602

assign_optional764:                               ; preds = %if.then760
  store i64 %optval762, ptr %error_var761, align 8, !dbg !602
  br label %guard_block766, !dbg !602

after_check765:                                   ; preds = %if.then760
  br label %noerr_block767, !dbg !602

guard_block766:                                   ; preds = %assign_optional764
  %380 = load i64, ptr %error_var761, align 8, !dbg !602
  ret i64 %380, !dbg !602

noerr_block767:                                   ; preds = %after_check765
  br label %if.exit768, !dbg !602

if.exit768:                                       ; preds = %noerr_block767, %expr_block.exit758
  br label %if.exit769, !dbg !602

if.exit769:                                       ; preds = %if.exit768, %check_type_ok725
    #dbg_declare(ptr %flags770, !604, !DIExpression(), !605)
  %381 = load ptr, ptr %self, align 8, !dbg !605
  %ptradd771 = getelementptr inbounds i8, ptr %381, i64 16, !dbg !605
  %382 = load i32, ptr %ptradd771, align 8, !dbg !605
  store i32 %382, ptr %flags770, align 4, !dbg !605
    #dbg_declare(ptr %width772, !606, !DIExpression(), !607)
  %383 = load ptr, ptr %self, align 8, !dbg !607
  %ptradd773 = getelementptr inbounds i8, ptr %383, i64 16, !dbg !607
  %ptradd774 = getelementptr inbounds i8, ptr %ptradd773, i64 4, !dbg !607
  %384 = load i32, ptr %ptradd774, align 4, !dbg !607
  store i32 %384, ptr %width772, align 4, !dbg !607
  %385 = load ptr, ptr %self, align 8, !dbg !608
  %ptradd775 = getelementptr inbounds i8, ptr %385, i64 16, !dbg !608
  %ptradd776 = getelementptr inbounds i8, ptr %ptradd775, i64 4, !dbg !608
  store i32 0, ptr %ptradd776, align 4, !dbg !608
  %386 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.114, i64 2 }, ptr %indirectarg779, align 8
  %387 = call i64 @std.io.Formatter.out_substr(ptr %retparam778, ptr %386, ptr align 8 %indirectarg779), !dbg !609
  %not_err780 = icmp eq i64 %387, 0, !dbg !609
  %388 = call i1 @llvm.expect.i1(i1 %not_err780, i1 true), !dbg !609
  br i1 %388, label %after_check782, label %assign_optional781, !dbg !609

assign_optional781:                               ; preds = %if.exit769
  store i64 %387, ptr %error_var777, align 8, !dbg !609
  br label %guard_block783, !dbg !609

after_check782:                                   ; preds = %if.exit769
  br label %noerr_block787, !dbg !609

guard_block783:                                   ; preds = %assign_optional781
  %389 = load ptr, ptr %self, align 8, !dbg !610
  %ptradd784 = getelementptr inbounds i8, ptr %389, i64 16, !dbg !610
  %390 = load i32, ptr %flags770, align 4, !dbg !610
  store i32 %390, ptr %ptradd784, align 8, !dbg !610
  %391 = load ptr, ptr %self, align 8, !dbg !612
  %ptradd785 = getelementptr inbounds i8, ptr %391, i64 16, !dbg !612
  %ptradd786 = getelementptr inbounds i8, ptr %ptradd785, i64 4, !dbg !612
  %392 = load i32, ptr %width772, align 4, !dbg !612
  store i32 %392, ptr %ptradd786, align 4, !dbg !612
  %393 = load i64, ptr %error_var777, align 8, !dbg !612
  ret i64 %393, !dbg !612

noerr_block787:                                   ; preds = %after_check782
  %394 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg790, ptr align 8 %2, i32 16, i1 false)
  %395 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam789, ptr %394, ptr align 8 %indirectarg790, i32 16), !dbg !613
  %not_err791 = icmp eq i64 %395, 0, !dbg !613
  %396 = call i1 @llvm.expect.i1(i1 %not_err791, i1 true), !dbg !613
  br i1 %396, label %after_check793, label %assign_optional792, !dbg !613

assign_optional792:                               ; preds = %noerr_block787
  store i64 %395, ptr %reterr788, align 8, !dbg !613
  br label %err_retblock797, !dbg !613

after_check793:                                   ; preds = %noerr_block787
  %397 = load i64, ptr %retparam789, align 8, !dbg !613
  %398 = load ptr, ptr %self, align 8, !dbg !614
  %ptradd794 = getelementptr inbounds i8, ptr %398, i64 16, !dbg !614
  %399 = load i32, ptr %flags770, align 4, !dbg !614
  store i32 %399, ptr %ptradd794, align 8, !dbg !614
  %400 = load ptr, ptr %self, align 8, !dbg !616
  %ptradd795 = getelementptr inbounds i8, ptr %400, i64 16, !dbg !616
  %ptradd796 = getelementptr inbounds i8, ptr %ptradd795, i64 4, !dbg !616
  %401 = load i32, ptr %width772, align 4, !dbg !616
  store i32 %401, ptr %ptradd796, align 4, !dbg !616
  store i64 %397, ptr %0, align 8, !dbg !616
  ret i64 0, !dbg !616

err_retblock797:                                  ; preds = %assign_optional792
  %402 = load ptr, ptr %self, align 8, !dbg !617
  %ptradd798 = getelementptr inbounds i8, ptr %402, i64 16, !dbg !617
  %403 = load i32, ptr %flags770, align 4, !dbg !617
  store i32 %403, ptr %ptradd798, align 8, !dbg !617
  %404 = load ptr, ptr %self, align 8, !dbg !619
  %ptradd799 = getelementptr inbounds i8, ptr %404, i64 16, !dbg !619
  %ptradd800 = getelementptr inbounds i8, ptr %ptradd799, i64 4, !dbg !619
  %405 = load i32, ptr %width772, align 4, !dbg !619
  store i32 %405, ptr %ptradd800, align 4, !dbg !619
  %406 = load i64, ptr %reterr788, align 8, !dbg !619
  ret i64 %406, !dbg !619

switch.case801:                                   ; preds = %switch.entry135
    #dbg_declare(ptr %flags802, !620, !DIExpression(), !622)
  %407 = load ptr, ptr %self, align 8, !dbg !622
  %ptradd803 = getelementptr inbounds i8, ptr %407, i64 16, !dbg !622
  %408 = load i32, ptr %ptradd803, align 8, !dbg !622
  store i32 %408, ptr %flags802, align 4, !dbg !622
    #dbg_declare(ptr %width804, !623, !DIExpression(), !624)
  %409 = load ptr, ptr %self, align 8, !dbg !624
  %ptradd805 = getelementptr inbounds i8, ptr %409, i64 16, !dbg !624
  %ptradd806 = getelementptr inbounds i8, ptr %ptradd805, i64 4, !dbg !624
  %410 = load i32, ptr %ptradd806, align 4, !dbg !624
  store i32 %410, ptr %width804, align 4, !dbg !624
  %411 = load ptr, ptr %self, align 8, !dbg !625
  %ptradd807 = getelementptr inbounds i8, ptr %411, i64 16, !dbg !625
  store i32 0, ptr %ptradd807, align 8, !dbg !625
  %412 = load ptr, ptr %self, align 8, !dbg !626
  %ptradd808 = getelementptr inbounds i8, ptr %412, i64 16, !dbg !626
  %ptradd809 = getelementptr inbounds i8, ptr %ptradd808, i64 4, !dbg !626
  store i32 0, ptr %ptradd809, align 4, !dbg !626
    #dbg_declare(ptr %inner810, !627, !DIExpression(), !628)
  %ptradd811 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !628
  %413 = load i64, ptr %ptradd811, align 8, !dbg !628
  %"introspect*812" = inttoptr i64 %413 to ptr, !dbg !628
  %typeid.kind813 = load i8, ptr %"introspect*812", align 8, !dbg !628
  %eq814 = icmp eq i8 %typeid.kind813, 15, !dbg !628
  br i1 %eq814, label %check_type_ok833, label %check_next815, !dbg !628

check_next815:                                    ; preds = %switch.case801
  %eq816 = icmp eq i8 %typeid.kind813, 19, !dbg !628
  br i1 %eq816, label %check_type_ok833, label %check_next817, !dbg !628

check_next817:                                    ; preds = %check_next815
  %eq818 = icmp eq i8 %typeid.kind813, 17, !dbg !628
  br i1 %eq818, label %check_type_ok833, label %check_next819, !dbg !628

check_next819:                                    ; preds = %check_next817
  %eq820 = icmp eq i8 %typeid.kind813, 8, !dbg !628
  br i1 %eq820, label %check_type_ok833, label %check_next821, !dbg !628

check_next821:                                    ; preds = %check_next819
  %eq822 = icmp eq i8 %typeid.kind813, 16, !dbg !628
  br i1 %eq822, label %check_type_ok833, label %check_next823, !dbg !628

check_next823:                                    ; preds = %check_next821
  %eq824 = icmp eq i8 %typeid.kind813, 18, !dbg !628
  br i1 %eq824, label %check_type_ok833, label %check_next825, !dbg !628

check_next825:                                    ; preds = %check_next823
  %eq826 = icmp eq i8 %typeid.kind813, 14, !dbg !628
  br i1 %eq826, label %check_type_ok833, label %check_next827, !dbg !628

check_next827:                                    ; preds = %check_next825
  %eq828 = icmp eq i8 %typeid.kind813, 12, !dbg !628
  br i1 %eq828, label %check_type_ok833, label %check_next829, !dbg !628

check_next829:                                    ; preds = %check_next827
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg830, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg831, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg832, align 8
  %414 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %414(ptr align 8 %indirectarg830, ptr align 8 %indirectarg831, ptr align 8 %indirectarg832, i32 254), !dbg !628
  unreachable, !dbg !628

check_type_ok833:                                 ; preds = %check_next827, %check_next825, %check_next823, %check_next821, %check_next819, %check_next817, %check_next815, %switch.case801
  %ptradd834 = getelementptr inbounds i8, ptr %"introspect*812", i64 32, !dbg !628
  %typeid.inner835 = load i64, ptr %ptradd834, align 8, !dbg !628
  store i64 %typeid.inner835, ptr %inner810, align 8, !dbg !628
    #dbg_declare(ptr %size, !629, !DIExpression(), !630)
  %415 = load i64, ptr %inner810, align 8, !dbg !630
  %"introspect*836" = inttoptr i64 %415 to ptr, !dbg !630
  %typeid.kind837 = load i8, ptr %"introspect*836", align 8, !dbg !630
  %ptradd838 = getelementptr inbounds i8, ptr %"introspect*836", i64 24, !dbg !630
  %typeid.size = load i64, ptr %ptradd838, align 8, !dbg !630
  store i64 %typeid.size, ptr %size, align 8, !dbg !630
    #dbg_declare(ptr %alen, !631, !DIExpression(), !632)
  %ptradd839 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !632
  %416 = load i64, ptr %ptradd839, align 8, !dbg !632
  %"introspect*840" = inttoptr i64 %416 to ptr, !dbg !632
  %typeid.kind841 = load i8, ptr %"introspect*840", align 8, !dbg !632
  %eq842 = icmp eq i8 %typeid.kind841, 15, !dbg !632
  br i1 %eq842, label %check_type_ok853, label %check_next843, !dbg !632

check_next843:                                    ; preds = %check_type_ok833
  %eq844 = icmp eq i8 %typeid.kind841, 17, !dbg !632
  br i1 %eq844, label %check_type_ok853, label %check_next845, !dbg !632

check_next845:                                    ; preds = %check_next843
  %eq846 = icmp eq i8 %typeid.kind841, 8, !dbg !632
  br i1 %eq846, label %check_type_ok853, label %check_next847, !dbg !632

check_next847:                                    ; preds = %check_next845
  %eq848 = icmp eq i8 %typeid.kind841, 16, !dbg !632
  br i1 %eq848, label %check_type_ok853, label %check_next849, !dbg !632

check_next849:                                    ; preds = %check_next847
  store %"char[]" { ptr @.panic_msg.115, i64 43 }, ptr %indirectarg850, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg851, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg852, align 8
  %417 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %417(ptr align 8 %indirectarg850, ptr align 8 %indirectarg851, ptr align 8 %indirectarg852, i32 256), !dbg !632
  unreachable, !dbg !632

check_type_ok853:                                 ; preds = %check_next847, %check_next845, %check_next843, %check_type_ok833
  %ptradd854 = getelementptr inbounds i8, ptr %"introspect*840", i64 40, !dbg !632
  %typeid.len = load i64, ptr %ptradd854, align 8, !dbg !632
  store i64 %typeid.len, ptr %alen, align 8, !dbg !632
    #dbg_declare(ptr %ptr855, !633, !DIExpression(), !634)
  %418 = load ptr, ptr %2, align 8, !dbg !634
  store ptr %418, ptr %ptr855, align 8, !dbg !634
    #dbg_declare(ptr %len, !635, !DIExpression(), !636)
  %419 = load ptr, ptr %self, align 8
  %420 = call i64 @std.io.Formatter.out(ptr %retparam857, ptr %419, i8 91), !dbg !636
  %not_err858 = icmp eq i64 %420, 0, !dbg !636
  %421 = call i1 @llvm.expect.i1(i1 %not_err858, i1 true), !dbg !636
  br i1 %421, label %after_check860, label %assign_optional859, !dbg !636

assign_optional859:                               ; preds = %check_type_ok853
  store i64 %420, ptr %error_var856, align 8, !dbg !636
  br label %guard_block861, !dbg !636

after_check860:                                   ; preds = %check_type_ok853
  br label %noerr_block865, !dbg !636

guard_block861:                                   ; preds = %assign_optional859
  %422 = load ptr, ptr %self, align 8, !dbg !637
  %ptradd862 = getelementptr inbounds i8, ptr %422, i64 16, !dbg !637
  %423 = load i32, ptr %flags802, align 4, !dbg !637
  store i32 %423, ptr %ptradd862, align 8, !dbg !637
  %424 = load ptr, ptr %self, align 8, !dbg !639
  %ptradd863 = getelementptr inbounds i8, ptr %424, i64 16, !dbg !639
  %ptradd864 = getelementptr inbounds i8, ptr %ptradd863, i64 4, !dbg !639
  %425 = load i32, ptr %width804, align 4, !dbg !639
  store i32 %425, ptr %ptradd864, align 4, !dbg !639
  %426 = load i64, ptr %error_var856, align 8, !dbg !639
  ret i64 %426, !dbg !639

noerr_block865:                                   ; preds = %after_check860
  %427 = load i64, ptr %retparam857, align 8, !dbg !639
  store i64 %427, ptr %len, align 8, !dbg !639
    #dbg_declare(ptr %i866, !640, !DIExpression(), !642)
  store i64 0, ptr %i866, align 8, !dbg !642
  br label %loop.cond, !dbg !642

loop.cond:                                        ; preds = %noerr_block894, %noerr_block865
  %428 = load i64, ptr %i866, align 8, !dbg !642
  %429 = load i64, ptr %alen, align 8, !dbg !642
  %lt867 = icmp ult i64 %428, %429, !dbg !642
  br i1 %lt867, label %loop.body, label %loop.exit, !dbg !642

loop.body:                                        ; preds = %loop.cond
  %430 = load i64, ptr %i866, align 8, !dbg !643
  %neq868 = icmp ne i64 0, %430, !dbg !643
  br i1 %neq868, label %if.then869, label %if.exit881, !dbg !643

if.then869:                                       ; preds = %loop.body
  %431 = load i64, ptr %len, align 8, !dbg !643
  %432 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.116, i64 2 }, ptr %indirectarg872, align 8
  %433 = call i64 @std.io.Formatter.out_substr(ptr %retparam871, ptr %432, ptr align 8 %indirectarg872), !dbg !643
  %not_err873 = icmp eq i64 %433, 0, !dbg !643
  %434 = call i1 @llvm.expect.i1(i1 %not_err873, i1 true), !dbg !643
  br i1 %434, label %after_check875, label %assign_optional874, !dbg !643

assign_optional874:                               ; preds = %if.then869
  store i64 %433, ptr %error_var870, align 8, !dbg !643
  br label %guard_block876, !dbg !643

after_check875:                                   ; preds = %if.then869
  br label %noerr_block880, !dbg !643

guard_block876:                                   ; preds = %assign_optional874
  %435 = load ptr, ptr %self, align 8, !dbg !645
  %ptradd877 = getelementptr inbounds i8, ptr %435, i64 16, !dbg !645
  %436 = load i32, ptr %flags802, align 4, !dbg !645
  store i32 %436, ptr %ptradd877, align 8, !dbg !645
  %437 = load ptr, ptr %self, align 8, !dbg !647
  %ptradd878 = getelementptr inbounds i8, ptr %437, i64 16, !dbg !647
  %ptradd879 = getelementptr inbounds i8, ptr %ptradd878, i64 4, !dbg !647
  %438 = load i32, ptr %width804, align 4, !dbg !647
  store i32 %438, ptr %ptradd879, align 4, !dbg !647
  %439 = load i64, ptr %error_var870, align 8, !dbg !647
  ret i64 %439, !dbg !647

noerr_block880:                                   ; preds = %after_check875
  %440 = load i64, ptr %retparam871, align 8, !dbg !647
  %add = add i64 %431, %440, !dbg !643
  store i64 %add, ptr %len, align 8, !dbg !643
  br label %if.exit881, !dbg !643

if.exit881:                                       ; preds = %noerr_block880, %loop.body
  %441 = load i64, ptr %len, align 8, !dbg !648
  %442 = load ptr, ptr %ptr855, align 8
  store ptr %442, ptr %ptr883, align 8
  %443 = load i64, ptr %inner810, align 8
  store i64 %443, ptr %type884, align 8
  %444 = load ptr, ptr %ptr883, align 8, !dbg !649
  %445 = load i64, ptr %type884, align 8, !dbg !649
  %446 = insertvalue %any undef, ptr %444, 0, !dbg !649
  %447 = insertvalue %any %446, i64 %445, 1, !dbg !649
  %448 = load ptr, ptr %self, align 8
  store %any %447, ptr %indirectarg886, align 8
  %449 = call i64 @std.io.Formatter.out_str(ptr %retparam885, ptr %448, ptr align 8 %indirectarg886), !dbg !648
  %not_err887 = icmp eq i64 %449, 0, !dbg !648
  %450 = call i1 @llvm.expect.i1(i1 %not_err887, i1 true), !dbg !648
  br i1 %450, label %after_check889, label %assign_optional888, !dbg !648

assign_optional888:                               ; preds = %if.exit881
  store i64 %449, ptr %error_var882, align 8, !dbg !648
  br label %guard_block890, !dbg !648

after_check889:                                   ; preds = %if.exit881
  br label %noerr_block894, !dbg !648

guard_block890:                                   ; preds = %assign_optional888
  %451 = load ptr, ptr %self, align 8, !dbg !651
  %ptradd891 = getelementptr inbounds i8, ptr %451, i64 16, !dbg !651
  %452 = load i32, ptr %flags802, align 4, !dbg !651
  store i32 %452, ptr %ptradd891, align 8, !dbg !651
  %453 = load ptr, ptr %self, align 8, !dbg !653
  %ptradd892 = getelementptr inbounds i8, ptr %453, i64 16, !dbg !653
  %ptradd893 = getelementptr inbounds i8, ptr %ptradd892, i64 4, !dbg !653
  %454 = load i32, ptr %width804, align 4, !dbg !653
  store i32 %454, ptr %ptradd893, align 4, !dbg !653
  %455 = load i64, ptr %error_var882, align 8, !dbg !653
  ret i64 %455, !dbg !653

noerr_block894:                                   ; preds = %after_check889
  %456 = load i64, ptr %retparam885, align 8, !dbg !653
  %add895 = add i64 %441, %456, !dbg !648
  store i64 %add895, ptr %len, align 8, !dbg !648
  %457 = load ptr, ptr %ptr855, align 8, !dbg !654
  %458 = load i64, ptr %size, align 8, !dbg !654
  %ptradd_any = getelementptr i8, ptr %457, i64 %458, !dbg !654
  store ptr %ptradd_any, ptr %ptr855, align 8, !dbg !654
  %459 = load i64, ptr %i866, align 8, !dbg !642
  %add896 = add i64 %459, 1, !dbg !642
  store i64 %add896, ptr %i866, align 8, !dbg !642
  br label %loop.cond, !dbg !642

loop.exit:                                        ; preds = %loop.cond
  %460 = load i64, ptr %len, align 8, !dbg !655
  %461 = load ptr, ptr %self, align 8
  %462 = call i64 @std.io.Formatter.out(ptr %retparam898, ptr %461, i8 93), !dbg !655
  %not_err899 = icmp eq i64 %462, 0, !dbg !655
  %463 = call i1 @llvm.expect.i1(i1 %not_err899, i1 true), !dbg !655
  br i1 %463, label %after_check901, label %assign_optional900, !dbg !655

assign_optional900:                               ; preds = %loop.exit
  store i64 %462, ptr %error_var897, align 8, !dbg !655
  br label %guard_block902, !dbg !655

after_check901:                                   ; preds = %loop.exit
  br label %noerr_block906, !dbg !655

guard_block902:                                   ; preds = %assign_optional900
  %464 = load ptr, ptr %self, align 8, !dbg !656
  %ptradd903 = getelementptr inbounds i8, ptr %464, i64 16, !dbg !656
  %465 = load i32, ptr %flags802, align 4, !dbg !656
  store i32 %465, ptr %ptradd903, align 8, !dbg !656
  %466 = load ptr, ptr %self, align 8, !dbg !658
  %ptradd904 = getelementptr inbounds i8, ptr %466, i64 16, !dbg !658
  %ptradd905 = getelementptr inbounds i8, ptr %ptradd904, i64 4, !dbg !658
  %467 = load i32, ptr %width804, align 4, !dbg !658
  store i32 %467, ptr %ptradd905, align 4, !dbg !658
  %468 = load i64, ptr %error_var897, align 8, !dbg !658
  ret i64 %468, !dbg !658

noerr_block906:                                   ; preds = %after_check901
  %469 = load i64, ptr %retparam898, align 8, !dbg !658
  %add907 = add i64 %460, %469, !dbg !655
  store i64 %add907, ptr %len, align 8, !dbg !655
  %470 = load i64, ptr %len, align 8, !dbg !659
  %471 = load ptr, ptr %self, align 8, !dbg !660
  %ptradd909 = getelementptr inbounds i8, ptr %471, i64 16, !dbg !660
  %472 = load i32, ptr %flags802, align 4, !dbg !660
  store i32 %472, ptr %ptradd909, align 8, !dbg !660
  %473 = load ptr, ptr %self, align 8, !dbg !662
  %ptradd910 = getelementptr inbounds i8, ptr %473, i64 16, !dbg !662
  %ptradd911 = getelementptr inbounds i8, ptr %ptradd910, i64 4, !dbg !662
  %474 = load i32, ptr %width804, align 4, !dbg !662
  store i32 %474, ptr %ptradd911, align 4, !dbg !662
  store i64 %470, ptr %0, align 8, !dbg !662
  ret i64 0, !dbg !662

switch.case912:                                   ; preds = %switch.entry135
    #dbg_declare(ptr %flags913, !663, !DIExpression(), !665)
  %475 = load ptr, ptr %self, align 8, !dbg !665
  %ptradd914 = getelementptr inbounds i8, ptr %475, i64 16, !dbg !665
  %476 = load i32, ptr %ptradd914, align 8, !dbg !665
  store i32 %476, ptr %flags913, align 4, !dbg !665
    #dbg_declare(ptr %width915, !666, !DIExpression(), !667)
  %477 = load ptr, ptr %self, align 8, !dbg !667
  %ptradd916 = getelementptr inbounds i8, ptr %477, i64 16, !dbg !667
  %ptradd917 = getelementptr inbounds i8, ptr %ptradd916, i64 4, !dbg !667
  %478 = load i32, ptr %ptradd917, align 4, !dbg !667
  store i32 %478, ptr %width915, align 4, !dbg !667
  %479 = load ptr, ptr %self, align 8, !dbg !668
  %ptradd918 = getelementptr inbounds i8, ptr %479, i64 16, !dbg !668
  store i32 0, ptr %ptradd918, align 8, !dbg !668
  %480 = load ptr, ptr %self, align 8, !dbg !669
  %ptradd919 = getelementptr inbounds i8, ptr %480, i64 16, !dbg !669
  %ptradd920 = getelementptr inbounds i8, ptr %ptradd919, i64 4, !dbg !669
  store i32 0, ptr %ptradd920, align 4, !dbg !669
    #dbg_declare(ptr %inner921, !670, !DIExpression(), !671)
  %ptradd922 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !671
  %481 = load i64, ptr %ptradd922, align 8, !dbg !671
  %"introspect*923" = inttoptr i64 %481 to ptr, !dbg !671
  %typeid.kind924 = load i8, ptr %"introspect*923", align 8, !dbg !671
  %eq925 = icmp eq i8 %typeid.kind924, 15, !dbg !671
  br i1 %eq925, label %check_type_ok944, label %check_next926, !dbg !671

check_next926:                                    ; preds = %switch.case912
  %eq927 = icmp eq i8 %typeid.kind924, 19, !dbg !671
  br i1 %eq927, label %check_type_ok944, label %check_next928, !dbg !671

check_next928:                                    ; preds = %check_next926
  %eq929 = icmp eq i8 %typeid.kind924, 17, !dbg !671
  br i1 %eq929, label %check_type_ok944, label %check_next930, !dbg !671

check_next930:                                    ; preds = %check_next928
  %eq931 = icmp eq i8 %typeid.kind924, 8, !dbg !671
  br i1 %eq931, label %check_type_ok944, label %check_next932, !dbg !671

check_next932:                                    ; preds = %check_next930
  %eq933 = icmp eq i8 %typeid.kind924, 16, !dbg !671
  br i1 %eq933, label %check_type_ok944, label %check_next934, !dbg !671

check_next934:                                    ; preds = %check_next932
  %eq935 = icmp eq i8 %typeid.kind924, 18, !dbg !671
  br i1 %eq935, label %check_type_ok944, label %check_next936, !dbg !671

check_next936:                                    ; preds = %check_next934
  %eq937 = icmp eq i8 %typeid.kind924, 14, !dbg !671
  br i1 %eq937, label %check_type_ok944, label %check_next938, !dbg !671

check_next938:                                    ; preds = %check_next936
  %eq939 = icmp eq i8 %typeid.kind924, 12, !dbg !671
  br i1 %eq939, label %check_type_ok944, label %check_next940, !dbg !671

check_next940:                                    ; preds = %check_next938
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg941, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg942, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg943, align 8
  %482 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %482(ptr align 8 %indirectarg941, ptr align 8 %indirectarg942, ptr align 8 %indirectarg943, i32 279), !dbg !671
  unreachable, !dbg !671

check_type_ok944:                                 ; preds = %check_next938, %check_next936, %check_next934, %check_next932, %check_next930, %check_next928, %check_next926, %switch.case912
  %ptradd945 = getelementptr inbounds i8, ptr %"introspect*923", i64 32, !dbg !671
  %typeid.inner946 = load i64, ptr %ptradd945, align 8, !dbg !671
  store i64 %typeid.inner946, ptr %inner921, align 8, !dbg !671
    #dbg_declare(ptr %size947, !672, !DIExpression(), !673)
  %483 = load i64, ptr %inner921, align 8, !dbg !673
  %"introspect*948" = inttoptr i64 %483 to ptr, !dbg !673
  %typeid.kind949 = load i8, ptr %"introspect*948", align 8, !dbg !673
  %ptradd950 = getelementptr inbounds i8, ptr %"introspect*948", i64 24, !dbg !673
  %typeid.size951 = load i64, ptr %ptradd950, align 8, !dbg !673
  store i64 %typeid.size951, ptr %size947, align 8, !dbg !673
    #dbg_declare(ptr %vlen, !674, !DIExpression(), !675)
  %ptradd952 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !675
  %484 = load i64, ptr %ptradd952, align 8, !dbg !675
  %"introspect*953" = inttoptr i64 %484 to ptr, !dbg !675
  %typeid.kind954 = load i8, ptr %"introspect*953", align 8, !dbg !675
  %eq955 = icmp eq i8 %typeid.kind954, 15, !dbg !675
  br i1 %eq955, label %check_type_ok966, label %check_next956, !dbg !675

check_next956:                                    ; preds = %check_type_ok944
  %eq957 = icmp eq i8 %typeid.kind954, 17, !dbg !675
  br i1 %eq957, label %check_type_ok966, label %check_next958, !dbg !675

check_next958:                                    ; preds = %check_next956
  %eq959 = icmp eq i8 %typeid.kind954, 8, !dbg !675
  br i1 %eq959, label %check_type_ok966, label %check_next960, !dbg !675

check_next960:                                    ; preds = %check_next958
  %eq961 = icmp eq i8 %typeid.kind954, 16, !dbg !675
  br i1 %eq961, label %check_type_ok966, label %check_next962, !dbg !675

check_next962:                                    ; preds = %check_next960
  store %"char[]" { ptr @.panic_msg.115, i64 43 }, ptr %indirectarg963, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg964, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg965, align 8
  %485 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %485(ptr align 8 %indirectarg963, ptr align 8 %indirectarg964, ptr align 8 %indirectarg965, i32 281), !dbg !675
  unreachable, !dbg !675

check_type_ok966:                                 ; preds = %check_next960, %check_next958, %check_next956, %check_type_ok944
  %ptradd967 = getelementptr inbounds i8, ptr %"introspect*953", i64 40, !dbg !675
  %typeid.len968 = load i64, ptr %ptradd967, align 8, !dbg !675
  store i64 %typeid.len968, ptr %vlen, align 8, !dbg !675
    #dbg_declare(ptr %ptr969, !676, !DIExpression(), !677)
  %486 = load ptr, ptr %2, align 8, !dbg !677
  store ptr %486, ptr %ptr969, align 8, !dbg !677
    #dbg_declare(ptr %len970, !678, !DIExpression(), !679)
  %487 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.117, i64 2 }, ptr %indirectarg973, align 8
  %488 = call i64 @std.io.Formatter.out_substr(ptr %retparam972, ptr %487, ptr align 8 %indirectarg973), !dbg !679
  %not_err974 = icmp eq i64 %488, 0, !dbg !679
  %489 = call i1 @llvm.expect.i1(i1 %not_err974, i1 true), !dbg !679
  br i1 %489, label %after_check976, label %assign_optional975, !dbg !679

assign_optional975:                               ; preds = %check_type_ok966
  store i64 %488, ptr %error_var971, align 8, !dbg !679
  br label %guard_block977, !dbg !679

after_check976:                                   ; preds = %check_type_ok966
  br label %noerr_block981, !dbg !679

guard_block977:                                   ; preds = %assign_optional975
  %490 = load ptr, ptr %self, align 8, !dbg !680
  %ptradd978 = getelementptr inbounds i8, ptr %490, i64 16, !dbg !680
  %491 = load i32, ptr %flags913, align 4, !dbg !680
  store i32 %491, ptr %ptradd978, align 8, !dbg !680
  %492 = load ptr, ptr %self, align 8, !dbg !682
  %ptradd979 = getelementptr inbounds i8, ptr %492, i64 16, !dbg !682
  %ptradd980 = getelementptr inbounds i8, ptr %ptradd979, i64 4, !dbg !682
  %493 = load i32, ptr %width915, align 4, !dbg !682
  store i32 %493, ptr %ptradd980, align 4, !dbg !682
  %494 = load i64, ptr %error_var971, align 8, !dbg !682
  ret i64 %494, !dbg !682

noerr_block981:                                   ; preds = %after_check976
  %495 = load i64, ptr %retparam972, align 8, !dbg !682
  store i64 %495, ptr %len970, align 8, !dbg !682
    #dbg_declare(ptr %i982, !683, !DIExpression(), !685)
  store i64 0, ptr %i982, align 8, !dbg !685
  br label %loop.cond983, !dbg !685

loop.cond983:                                     ; preds = %noerr_block1013, %noerr_block981
  %496 = load i64, ptr %i982, align 8, !dbg !685
  %497 = load i64, ptr %vlen, align 8, !dbg !685
  %lt984 = icmp ult i64 %496, %497, !dbg !685
  br i1 %lt984, label %loop.body985, label %loop.exit1017, !dbg !685

loop.body985:                                     ; preds = %loop.cond983
  %498 = load i64, ptr %i982, align 8, !dbg !686
  %neq986 = icmp ne i64 0, %498, !dbg !686
  br i1 %neq986, label %if.then987, label %if.exit1000, !dbg !686

if.then987:                                       ; preds = %loop.body985
  %499 = load i64, ptr %len970, align 8, !dbg !686
  %500 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.118, i64 2 }, ptr %indirectarg990, align 8
  %501 = call i64 @std.io.Formatter.out_substr(ptr %retparam989, ptr %500, ptr align 8 %indirectarg990), !dbg !686
  %not_err991 = icmp eq i64 %501, 0, !dbg !686
  %502 = call i1 @llvm.expect.i1(i1 %not_err991, i1 true), !dbg !686
  br i1 %502, label %after_check993, label %assign_optional992, !dbg !686

assign_optional992:                               ; preds = %if.then987
  store i64 %501, ptr %error_var988, align 8, !dbg !686
  br label %guard_block994, !dbg !686

after_check993:                                   ; preds = %if.then987
  br label %noerr_block998, !dbg !686

guard_block994:                                   ; preds = %assign_optional992
  %503 = load ptr, ptr %self, align 8, !dbg !688
  %ptradd995 = getelementptr inbounds i8, ptr %503, i64 16, !dbg !688
  %504 = load i32, ptr %flags913, align 4, !dbg !688
  store i32 %504, ptr %ptradd995, align 8, !dbg !688
  %505 = load ptr, ptr %self, align 8, !dbg !690
  %ptradd996 = getelementptr inbounds i8, ptr %505, i64 16, !dbg !690
  %ptradd997 = getelementptr inbounds i8, ptr %ptradd996, i64 4, !dbg !690
  %506 = load i32, ptr %width915, align 4, !dbg !690
  store i32 %506, ptr %ptradd997, align 4, !dbg !690
  %507 = load i64, ptr %error_var988, align 8, !dbg !690
  ret i64 %507, !dbg !690

noerr_block998:                                   ; preds = %after_check993
  %508 = load i64, ptr %retparam989, align 8, !dbg !690
  %add999 = add i64 %499, %508, !dbg !686
  store i64 %add999, ptr %len970, align 8, !dbg !686
  br label %if.exit1000, !dbg !686

if.exit1000:                                      ; preds = %noerr_block998, %loop.body985
  %509 = load i64, ptr %len970, align 8, !dbg !691
  %510 = load ptr, ptr %ptr969, align 8
  store ptr %510, ptr %ptr1002, align 8
  %511 = load i64, ptr %inner921, align 8
  store i64 %511, ptr %type1003, align 8
  %512 = load ptr, ptr %ptr1002, align 8, !dbg !692
  %513 = load i64, ptr %type1003, align 8, !dbg !692
  %514 = insertvalue %any undef, ptr %512, 0, !dbg !692
  %515 = insertvalue %any %514, i64 %513, 1, !dbg !692
  %516 = load ptr, ptr %self, align 8
  store %any %515, ptr %indirectarg1005, align 8
  %517 = call i64 @std.io.Formatter.out_str(ptr %retparam1004, ptr %516, ptr align 8 %indirectarg1005), !dbg !691
  %not_err1006 = icmp eq i64 %517, 0, !dbg !691
  %518 = call i1 @llvm.expect.i1(i1 %not_err1006, i1 true), !dbg !691
  br i1 %518, label %after_check1008, label %assign_optional1007, !dbg !691

assign_optional1007:                              ; preds = %if.exit1000
  store i64 %517, ptr %error_var1001, align 8, !dbg !691
  br label %guard_block1009, !dbg !691

after_check1008:                                  ; preds = %if.exit1000
  br label %noerr_block1013, !dbg !691

guard_block1009:                                  ; preds = %assign_optional1007
  %519 = load ptr, ptr %self, align 8, !dbg !694
  %ptradd1010 = getelementptr inbounds i8, ptr %519, i64 16, !dbg !694
  %520 = load i32, ptr %flags913, align 4, !dbg !694
  store i32 %520, ptr %ptradd1010, align 8, !dbg !694
  %521 = load ptr, ptr %self, align 8, !dbg !696
  %ptradd1011 = getelementptr inbounds i8, ptr %521, i64 16, !dbg !696
  %ptradd1012 = getelementptr inbounds i8, ptr %ptradd1011, i64 4, !dbg !696
  %522 = load i32, ptr %width915, align 4, !dbg !696
  store i32 %522, ptr %ptradd1012, align 4, !dbg !696
  %523 = load i64, ptr %error_var1001, align 8, !dbg !696
  ret i64 %523, !dbg !696

noerr_block1013:                                  ; preds = %after_check1008
  %524 = load i64, ptr %retparam1004, align 8, !dbg !696
  %add1014 = add i64 %509, %524, !dbg !691
  store i64 %add1014, ptr %len970, align 8, !dbg !691
  %525 = load ptr, ptr %ptr969, align 8, !dbg !697
  %526 = load i64, ptr %size947, align 8, !dbg !697
  %ptradd_any1015 = getelementptr i8, ptr %525, i64 %526, !dbg !697
  store ptr %ptradd_any1015, ptr %ptr969, align 8, !dbg !697
  %527 = load i64, ptr %i982, align 8, !dbg !685
  %add1016 = add i64 %527, 1, !dbg !685
  store i64 %add1016, ptr %i982, align 8, !dbg !685
  br label %loop.cond983, !dbg !685

loop.exit1017:                                    ; preds = %loop.cond983
  %528 = load i64, ptr %len970, align 8, !dbg !698
  %529 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.119, i64 2 }, ptr %indirectarg1020, align 8
  %530 = call i64 @std.io.Formatter.out_substr(ptr %retparam1019, ptr %529, ptr align 8 %indirectarg1020), !dbg !698
  %not_err1021 = icmp eq i64 %530, 0, !dbg !698
  %531 = call i1 @llvm.expect.i1(i1 %not_err1021, i1 true), !dbg !698
  br i1 %531, label %after_check1023, label %assign_optional1022, !dbg !698

assign_optional1022:                              ; preds = %loop.exit1017
  store i64 %530, ptr %error_var1018, align 8, !dbg !698
  br label %guard_block1024, !dbg !698

after_check1023:                                  ; preds = %loop.exit1017
  br label %noerr_block1028, !dbg !698

guard_block1024:                                  ; preds = %assign_optional1022
  %532 = load ptr, ptr %self, align 8, !dbg !699
  %ptradd1025 = getelementptr inbounds i8, ptr %532, i64 16, !dbg !699
  %533 = load i32, ptr %flags913, align 4, !dbg !699
  store i32 %533, ptr %ptradd1025, align 8, !dbg !699
  %534 = load ptr, ptr %self, align 8, !dbg !701
  %ptradd1026 = getelementptr inbounds i8, ptr %534, i64 16, !dbg !701
  %ptradd1027 = getelementptr inbounds i8, ptr %ptradd1026, i64 4, !dbg !701
  %535 = load i32, ptr %width915, align 4, !dbg !701
  store i32 %535, ptr %ptradd1027, align 4, !dbg !701
  %536 = load i64, ptr %error_var1018, align 8, !dbg !701
  ret i64 %536, !dbg !701

noerr_block1028:                                  ; preds = %after_check1023
  %537 = load i64, ptr %retparam1019, align 8, !dbg !701
  %add1029 = add i64 %528, %537, !dbg !698
  store i64 %add1029, ptr %len970, align 8, !dbg !698
  %538 = load i64, ptr %len970, align 8, !dbg !702
  %539 = load ptr, ptr %self, align 8, !dbg !703
  %ptradd1031 = getelementptr inbounds i8, ptr %539, i64 16, !dbg !703
  %540 = load i32, ptr %flags913, align 4, !dbg !703
  store i32 %540, ptr %ptradd1031, align 8, !dbg !703
  %541 = load ptr, ptr %self, align 8, !dbg !705
  %ptradd1032 = getelementptr inbounds i8, ptr %541, i64 16, !dbg !705
  %ptradd1033 = getelementptr inbounds i8, ptr %ptradd1032, i64 4, !dbg !705
  %542 = load i32, ptr %width915, align 4, !dbg !705
  store i32 %542, ptr %ptradd1033, align 4, !dbg !705
  store i64 %538, ptr %0, align 8, !dbg !705
  ret i64 0, !dbg !705

switch.case1034:                                  ; preds = %switch.entry135
    #dbg_declare(ptr %inner1035, !706, !DIExpression(), !708)
  %ptradd1036 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !708
  %543 = load i64, ptr %ptradd1036, align 8, !dbg !708
  %"introspect*1037" = inttoptr i64 %543 to ptr, !dbg !708
  %typeid.kind1038 = load i8, ptr %"introspect*1037", align 8, !dbg !708
  %eq1039 = icmp eq i8 %typeid.kind1038, 15, !dbg !708
  br i1 %eq1039, label %check_type_ok1058, label %check_next1040, !dbg !708

check_next1040:                                   ; preds = %switch.case1034
  %eq1041 = icmp eq i8 %typeid.kind1038, 19, !dbg !708
  br i1 %eq1041, label %check_type_ok1058, label %check_next1042, !dbg !708

check_next1042:                                   ; preds = %check_next1040
  %eq1043 = icmp eq i8 %typeid.kind1038, 17, !dbg !708
  br i1 %eq1043, label %check_type_ok1058, label %check_next1044, !dbg !708

check_next1044:                                   ; preds = %check_next1042
  %eq1045 = icmp eq i8 %typeid.kind1038, 8, !dbg !708
  br i1 %eq1045, label %check_type_ok1058, label %check_next1046, !dbg !708

check_next1046:                                   ; preds = %check_next1044
  %eq1047 = icmp eq i8 %typeid.kind1038, 16, !dbg !708
  br i1 %eq1047, label %check_type_ok1058, label %check_next1048, !dbg !708

check_next1048:                                   ; preds = %check_next1046
  %eq1049 = icmp eq i8 %typeid.kind1038, 18, !dbg !708
  br i1 %eq1049, label %check_type_ok1058, label %check_next1050, !dbg !708

check_next1050:                                   ; preds = %check_next1048
  %eq1051 = icmp eq i8 %typeid.kind1038, 14, !dbg !708
  br i1 %eq1051, label %check_type_ok1058, label %check_next1052, !dbg !708

check_next1052:                                   ; preds = %check_next1050
  %eq1053 = icmp eq i8 %typeid.kind1038, 12, !dbg !708
  br i1 %eq1053, label %check_type_ok1058, label %check_next1054, !dbg !708

check_next1054:                                   ; preds = %check_next1052
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg1055, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1056, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg1057, align 8
  %544 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %544(ptr align 8 %indirectarg1055, ptr align 8 %indirectarg1056, ptr align 8 %indirectarg1057, i32 295), !dbg !708
  unreachable, !dbg !708

check_type_ok1058:                                ; preds = %check_next1052, %check_next1050, %check_next1048, %check_next1046, %check_next1044, %check_next1042, %check_next1040, %switch.case1034
  %ptradd1059 = getelementptr inbounds i8, ptr %"introspect*1037", i64 32, !dbg !708
  %typeid.inner1060 = load i64, ptr %ptradd1059, align 8, !dbg !708
  store i64 %typeid.inner1060, ptr %inner1035, align 8, !dbg !708
  %545 = load i64, ptr %inner1035, align 8, !dbg !709
  %eq1061 = icmp eq i64 %545, ptrtoint (ptr @"$ct.void" to i64), !dbg !709
  br i1 %eq1061, label %if.then1062, label %if.exit1063, !dbg !709

if.then1062:                                      ; preds = %check_type_ok1058
  store i64 ptrtoint (ptr @"$ct.char" to i64), ptr %inner1035, align 8, !dbg !709
  br label %if.exit1063, !dbg !709

if.exit1063:                                      ; preds = %if.then1062, %check_type_ok1058
    #dbg_declare(ptr %flags1064, !710, !DIExpression(), !711)
  %546 = load ptr, ptr %self, align 8, !dbg !711
  %ptradd1065 = getelementptr inbounds i8, ptr %546, i64 16, !dbg !711
  %547 = load i32, ptr %ptradd1065, align 8, !dbg !711
  store i32 %547, ptr %flags1064, align 4, !dbg !711
    #dbg_declare(ptr %width1066, !712, !DIExpression(), !713)
  %548 = load ptr, ptr %self, align 8, !dbg !713
  %ptradd1067 = getelementptr inbounds i8, ptr %548, i64 16, !dbg !713
  %ptradd1068 = getelementptr inbounds i8, ptr %ptradd1067, i64 4, !dbg !713
  %549 = load i32, ptr %ptradd1068, align 4, !dbg !713
  store i32 %549, ptr %width1066, align 4, !dbg !713
  %550 = load ptr, ptr %self, align 8, !dbg !714
  %ptradd1069 = getelementptr inbounds i8, ptr %550, i64 16, !dbg !714
  store i32 0, ptr %ptradd1069, align 8, !dbg !714
  %551 = load ptr, ptr %self, align 8, !dbg !715
  %ptradd1070 = getelementptr inbounds i8, ptr %551, i64 16, !dbg !715
  %ptradd1071 = getelementptr inbounds i8, ptr %ptradd1070, i64 4, !dbg !715
  store i32 0, ptr %ptradd1071, align 4, !dbg !715
    #dbg_declare(ptr %size1072, !716, !DIExpression(), !717)
  %552 = load i64, ptr %inner1035, align 8, !dbg !717
  %"introspect*1073" = inttoptr i64 %552 to ptr, !dbg !717
  %typeid.kind1074 = load i8, ptr %"introspect*1073", align 8, !dbg !717
  %ptradd1075 = getelementptr inbounds i8, ptr %"introspect*1073", i64 24, !dbg !717
  %typeid.size1076 = load i64, ptr %ptradd1075, align 8, !dbg !717
  store i64 %typeid.size1076, ptr %size1072, align 8, !dbg !717
    #dbg_declare(ptr %temp, !718, !DIExpression(), !720)
  %553 = load ptr, ptr %2, align 8, !dbg !720
  store ptr %553, ptr %temp, align 8, !dbg !720
    #dbg_declare(ptr %ptr1077, !721, !DIExpression(), !722)
  %554 = load ptr, ptr %temp, align 8, !dbg !722
  %checknull1078 = icmp eq ptr %554, null, !dbg !722
  %555 = call i1 @llvm.expect.i1(i1 %checknull1078, i1 false), !dbg !722
  br i1 %555, label %panic1079, label %checkok1083, !dbg !722

checkok1083:                                      ; preds = %if.exit1063
  %556 = load ptr, ptr %554, align 8, !dbg !722
  store ptr %556, ptr %ptr1077, align 8, !dbg !722
    #dbg_declare(ptr %slen, !723, !DIExpression(), !724)
  %557 = load ptr, ptr %temp, align 8, !dbg !724
  %checknull1084 = icmp eq ptr %557, null, !dbg !724
  %558 = call i1 @llvm.expect.i1(i1 %checknull1084, i1 false), !dbg !724
  br i1 %558, label %panic1085, label %checkok1089, !dbg !724

checkok1089:                                      ; preds = %checkok1083
  %ptradd1090 = getelementptr inbounds i8, ptr %557, i64 8, !dbg !724
  %559 = load i64, ptr %ptradd1090, align 8, !dbg !724
  store i64 %559, ptr %slen, align 8, !dbg !724
    #dbg_declare(ptr %len1091, !725, !DIExpression(), !726)
  %560 = load ptr, ptr %self, align 8
  %561 = call i64 @std.io.Formatter.out(ptr %retparam1093, ptr %560, i8 91), !dbg !726
  %not_err1094 = icmp eq i64 %561, 0, !dbg !726
  %562 = call i1 @llvm.expect.i1(i1 %not_err1094, i1 true), !dbg !726
  br i1 %562, label %after_check1096, label %assign_optional1095, !dbg !726

assign_optional1095:                              ; preds = %checkok1089
  store i64 %561, ptr %error_var1092, align 8, !dbg !726
  br label %guard_block1097, !dbg !726

after_check1096:                                  ; preds = %checkok1089
  br label %noerr_block1101, !dbg !726

guard_block1097:                                  ; preds = %assign_optional1095
  %563 = load ptr, ptr %self, align 8, !dbg !727
  %ptradd1098 = getelementptr inbounds i8, ptr %563, i64 16, !dbg !727
  %564 = load i32, ptr %flags1064, align 4, !dbg !727
  store i32 %564, ptr %ptradd1098, align 8, !dbg !727
  %565 = load ptr, ptr %self, align 8, !dbg !729
  %ptradd1099 = getelementptr inbounds i8, ptr %565, i64 16, !dbg !729
  %ptradd1100 = getelementptr inbounds i8, ptr %ptradd1099, i64 4, !dbg !729
  %566 = load i32, ptr %width1066, align 4, !dbg !729
  store i32 %566, ptr %ptradd1100, align 4, !dbg !729
  %567 = load i64, ptr %error_var1092, align 8, !dbg !729
  ret i64 %567, !dbg !729

noerr_block1101:                                  ; preds = %after_check1096
  %568 = load i64, ptr %retparam1093, align 8, !dbg !729
  store i64 %568, ptr %len1091, align 8, !dbg !729
    #dbg_declare(ptr %i1102, !730, !DIExpression(), !732)
  store i64 0, ptr %i1102, align 8, !dbg !732
  br label %loop.cond1103, !dbg !732

loop.cond1103:                                    ; preds = %noerr_block1133, %noerr_block1101
  %569 = load i64, ptr %i1102, align 8, !dbg !732
  %570 = load i64, ptr %slen, align 8, !dbg !732
  %lt1104 = icmp ult i64 %569, %570, !dbg !732
  br i1 %lt1104, label %loop.body1105, label %loop.exit1137, !dbg !732

loop.body1105:                                    ; preds = %loop.cond1103
  %571 = load i64, ptr %i1102, align 8, !dbg !733
  %neq1106 = icmp ne i64 0, %571, !dbg !733
  br i1 %neq1106, label %if.then1107, label %if.exit1120, !dbg !733

if.then1107:                                      ; preds = %loop.body1105
  %572 = load i64, ptr %len1091, align 8, !dbg !733
  %573 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.121, i64 2 }, ptr %indirectarg1110, align 8
  %574 = call i64 @std.io.Formatter.out_substr(ptr %retparam1109, ptr %573, ptr align 8 %indirectarg1110), !dbg !733
  %not_err1111 = icmp eq i64 %574, 0, !dbg !733
  %575 = call i1 @llvm.expect.i1(i1 %not_err1111, i1 true), !dbg !733
  br i1 %575, label %after_check1113, label %assign_optional1112, !dbg !733

assign_optional1112:                              ; preds = %if.then1107
  store i64 %574, ptr %error_var1108, align 8, !dbg !733
  br label %guard_block1114, !dbg !733

after_check1113:                                  ; preds = %if.then1107
  br label %noerr_block1118, !dbg !733

guard_block1114:                                  ; preds = %assign_optional1112
  %576 = load ptr, ptr %self, align 8, !dbg !735
  %ptradd1115 = getelementptr inbounds i8, ptr %576, i64 16, !dbg !735
  %577 = load i32, ptr %flags1064, align 4, !dbg !735
  store i32 %577, ptr %ptradd1115, align 8, !dbg !735
  %578 = load ptr, ptr %self, align 8, !dbg !737
  %ptradd1116 = getelementptr inbounds i8, ptr %578, i64 16, !dbg !737
  %ptradd1117 = getelementptr inbounds i8, ptr %ptradd1116, i64 4, !dbg !737
  %579 = load i32, ptr %width1066, align 4, !dbg !737
  store i32 %579, ptr %ptradd1117, align 4, !dbg !737
  %580 = load i64, ptr %error_var1108, align 8, !dbg !737
  ret i64 %580, !dbg !737

noerr_block1118:                                  ; preds = %after_check1113
  %581 = load i64, ptr %retparam1109, align 8, !dbg !737
  %add1119 = add i64 %572, %581, !dbg !733
  store i64 %add1119, ptr %len1091, align 8, !dbg !733
  br label %if.exit1120, !dbg !733

if.exit1120:                                      ; preds = %noerr_block1118, %loop.body1105
  %582 = load i64, ptr %len1091, align 8, !dbg !738
  %583 = load ptr, ptr %ptr1077, align 8
  store ptr %583, ptr %ptr1122, align 8
  %584 = load i64, ptr %inner1035, align 8
  store i64 %584, ptr %type1123, align 8
  %585 = load ptr, ptr %ptr1122, align 8, !dbg !739
  %586 = load i64, ptr %type1123, align 8, !dbg !739
  %587 = insertvalue %any undef, ptr %585, 0, !dbg !739
  %588 = insertvalue %any %587, i64 %586, 1, !dbg !739
  %589 = load ptr, ptr %self, align 8
  store %any %588, ptr %indirectarg1125, align 8
  %590 = call i64 @std.io.Formatter.out_str(ptr %retparam1124, ptr %589, ptr align 8 %indirectarg1125), !dbg !738
  %not_err1126 = icmp eq i64 %590, 0, !dbg !738
  %591 = call i1 @llvm.expect.i1(i1 %not_err1126, i1 true), !dbg !738
  br i1 %591, label %after_check1128, label %assign_optional1127, !dbg !738

assign_optional1127:                              ; preds = %if.exit1120
  store i64 %590, ptr %error_var1121, align 8, !dbg !738
  br label %guard_block1129, !dbg !738

after_check1128:                                  ; preds = %if.exit1120
  br label %noerr_block1133, !dbg !738

guard_block1129:                                  ; preds = %assign_optional1127
  %592 = load ptr, ptr %self, align 8, !dbg !741
  %ptradd1130 = getelementptr inbounds i8, ptr %592, i64 16, !dbg !741
  %593 = load i32, ptr %flags1064, align 4, !dbg !741
  store i32 %593, ptr %ptradd1130, align 8, !dbg !741
  %594 = load ptr, ptr %self, align 8, !dbg !743
  %ptradd1131 = getelementptr inbounds i8, ptr %594, i64 16, !dbg !743
  %ptradd1132 = getelementptr inbounds i8, ptr %ptradd1131, i64 4, !dbg !743
  %595 = load i32, ptr %width1066, align 4, !dbg !743
  store i32 %595, ptr %ptradd1132, align 4, !dbg !743
  %596 = load i64, ptr %error_var1121, align 8, !dbg !743
  ret i64 %596, !dbg !743

noerr_block1133:                                  ; preds = %after_check1128
  %597 = load i64, ptr %retparam1124, align 8, !dbg !743
  %add1134 = add i64 %582, %597, !dbg !738
  store i64 %add1134, ptr %len1091, align 8, !dbg !738
  %598 = load ptr, ptr %ptr1077, align 8, !dbg !744
  %599 = load i64, ptr %size1072, align 8, !dbg !744
  %ptradd_any1135 = getelementptr i8, ptr %598, i64 %599, !dbg !744
  store ptr %ptradd_any1135, ptr %ptr1077, align 8, !dbg !744
  %600 = load i64, ptr %i1102, align 8, !dbg !732
  %add1136 = add i64 %600, 1, !dbg !732
  store i64 %add1136, ptr %i1102, align 8, !dbg !732
  br label %loop.cond1103, !dbg !732

loop.exit1137:                                    ; preds = %loop.cond1103
  %601 = load i64, ptr %len1091, align 8, !dbg !745
  %602 = load ptr, ptr %self, align 8
  %603 = call i64 @std.io.Formatter.out(ptr %retparam1139, ptr %602, i8 93), !dbg !745
  %not_err1140 = icmp eq i64 %603, 0, !dbg !745
  %604 = call i1 @llvm.expect.i1(i1 %not_err1140, i1 true), !dbg !745
  br i1 %604, label %after_check1142, label %assign_optional1141, !dbg !745

assign_optional1141:                              ; preds = %loop.exit1137
  store i64 %603, ptr %error_var1138, align 8, !dbg !745
  br label %guard_block1143, !dbg !745

after_check1142:                                  ; preds = %loop.exit1137
  br label %noerr_block1147, !dbg !745

guard_block1143:                                  ; preds = %assign_optional1141
  %605 = load ptr, ptr %self, align 8, !dbg !746
  %ptradd1144 = getelementptr inbounds i8, ptr %605, i64 16, !dbg !746
  %606 = load i32, ptr %flags1064, align 4, !dbg !746
  store i32 %606, ptr %ptradd1144, align 8, !dbg !746
  %607 = load ptr, ptr %self, align 8, !dbg !748
  %ptradd1145 = getelementptr inbounds i8, ptr %607, i64 16, !dbg !748
  %ptradd1146 = getelementptr inbounds i8, ptr %ptradd1145, i64 4, !dbg !748
  %608 = load i32, ptr %width1066, align 4, !dbg !748
  store i32 %608, ptr %ptradd1146, align 4, !dbg !748
  %609 = load i64, ptr %error_var1138, align 8, !dbg !748
  ret i64 %609, !dbg !748

noerr_block1147:                                  ; preds = %after_check1142
  %610 = load i64, ptr %retparam1139, align 8, !dbg !748
  %add1148 = add i64 %601, %610, !dbg !745
  store i64 %add1148, ptr %len1091, align 8, !dbg !745
  %611 = load i64, ptr %len1091, align 8, !dbg !749
  %612 = load ptr, ptr %self, align 8, !dbg !750
  %ptradd1150 = getelementptr inbounds i8, ptr %612, i64 16, !dbg !750
  %613 = load i32, ptr %flags1064, align 4, !dbg !750
  store i32 %613, ptr %ptradd1150, align 8, !dbg !750
  %614 = load ptr, ptr %self, align 8, !dbg !752
  %ptradd1151 = getelementptr inbounds i8, ptr %614, i64 16, !dbg !752
  %ptradd1152 = getelementptr inbounds i8, ptr %ptradd1151, i64 4, !dbg !752
  %615 = load i32, ptr %width1066, align 4, !dbg !752
  store i32 %615, ptr %ptradd1152, align 4, !dbg !752
  store i64 %611, ptr %0, align 8, !dbg !752
  ret i64 0, !dbg !752

switch.case1153:                                  ; preds = %switch.entry135, %switch.entry135
  store %"char[]" { ptr @.str.122, i64 15 }, ptr %string1154, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1155, ptr align 8 %string1154, i32 16, i1 false)
  store %"char[]" { ptr @.str.123, i64 12 }, ptr %indirectarg1156, align 8
  store %"char[]" { ptr @.str.124, i64 17 }, ptr %indirectarg1157, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg1158, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg1155, ptr align 8 %indirectarg1156, ptr align 8 %indirectarg1157, i32 322, ptr align 8 %indirectarg1158), !dbg !753
  unreachable, !dbg !757

switch.exit1159:                                  ; preds = %switch.entry135
  %616 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.125, i64 12 }, ptr %indirectarg1162, align 8
  %617 = call i64 @std.io.Formatter.out_substr(ptr %retparam1161, ptr %616, ptr align 8 %indirectarg1162), !dbg !758
  %not_err1163 = icmp eq i64 %617, 0, !dbg !758
  %618 = call i1 @llvm.expect.i1(i1 %not_err1163, i1 true), !dbg !758
  br i1 %618, label %after_check1165, label %assign_optional1164, !dbg !758

assign_optional1164:                              ; preds = %switch.exit1159
  store i64 %617, ptr %reterr1160, align 8, !dbg !758
  br label %err_retblock1166, !dbg !758

after_check1165:                                  ; preds = %switch.exit1159
  %619 = load i64, ptr %retparam1161, align 8, !dbg !758
  store i64 %619, ptr %0, align 8, !dbg !758
  ret i64 0, !dbg !758

err_retblock1166:                                 ; preds = %assign_optional1164
  %620 = load i64, ptr %reterr1160, align 8, !dbg !758
  ret i64 %620, !dbg !758

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg2, align 8
  %621 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %621(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 149), !dbg !405
  unreachable, !dbg !405

panic14:                                          ; preds = %switch.case12
  store %"char[]" { ptr @.panic_msg.69, i64 58 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg17, align 8
  %622 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %622(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 159), !dbg !413
  unreachable, !dbg !413

panic28:                                          ; preds = %switch.case25
  store %"char[]" { ptr @.panic_msg.70, i64 49 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg31, align 8
  %623 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %623(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 162), !dbg !415
  unreachable, !dbg !415

panic103:                                         ; preds = %switch.case100
  store %"char[]" { ptr @.panic_msg.76, i64 54 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg106, align 8
  %624 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %624(ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, i32 189), !dbg !450
  unreachable, !dbg !450

panic153:                                         ; preds = %assert_ok150
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg154, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg155, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg156, align 8
  %625 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %625(ptr align 8 %indirectarg154, ptr align 8 %indirectarg155, ptr align 8 %indirectarg156, i32 199), !dbg !470
  unreachable, !dbg !470

panic159:                                         ; preds = %checkok157
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg160, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg161, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg162, align 8
  %626 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %626(ptr align 8 %indirectarg160, ptr align 8 %indirectarg161, ptr align 8 %indirectarg162, i32 199), !dbg !470
  unreachable, !dbg !470

panic213:                                         ; preds = %switch.case211
  store %"char[]" { ptr @.panic_msg.84, i64 52 }, ptr %indirectarg214, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg215, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg216, align 8
  %627 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %627(ptr align 8 %indirectarg214, ptr align 8 %indirectarg215, ptr align 8 %indirectarg216, i32 35), !dbg !492
  unreachable, !dbg !492

panic230:                                         ; preds = %switch.case228
  store %"char[]" { ptr @.panic_msg.87, i64 53 }, ptr %indirectarg231, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg232, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg233, align 8
  %628 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %628(ptr align 8 %indirectarg231, ptr align 8 %indirectarg232, ptr align 8 %indirectarg233, i32 39), !dbg !499
  unreachable, !dbg !499

panic260:                                         ; preds = %switch.case257
  store %"char[]" { ptr @.panic_msg.88, i64 51 }, ptr %indirectarg261, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg262, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg263, align 8
  %629 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %629(ptr align 8 %indirectarg261, ptr align 8 %indirectarg262, ptr align 8 %indirectarg263, i32 44), !dbg !506
  unreachable, !dbg !506

panic294:                                         ; preds = %switch.case292
  store %"char[]" { ptr @.panic_msg.89, i64 52 }, ptr %indirectarg295, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg296, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg297, align 8
  %630 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %630(ptr align 8 %indirectarg295, ptr align 8 %indirectarg296, ptr align 8 %indirectarg297, i32 49), !dbg !513
  unreachable, !dbg !513

panic326:                                         ; preds = %switch.case323
  store %"char[]" { ptr @.panic_msg.90, i64 54 }, ptr %indirectarg327, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg328, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg329, align 8
  %631 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %631(ptr align 8 %indirectarg327, ptr align 8 %indirectarg328, ptr align 8 %indirectarg329, i32 54), !dbg !521
  unreachable, !dbg !521

panic359:                                         ; preds = %switch.case356
  store %"char[]" { ptr @.panic_msg.84, i64 52 }, ptr %indirectarg360, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg361, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg362, align 8
  %632 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %632(ptr align 8 %indirectarg360, ptr align 8 %indirectarg361, ptr align 8 %indirectarg362, i32 59), !dbg !528
  unreachable, !dbg !528

panic379:                                         ; preds = %switch.case376
  store %"char[]" { ptr @.panic_msg.91, i64 54 }, ptr %indirectarg380, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg381, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg382, align 8
  %633 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %633(ptr align 8 %indirectarg380, ptr align 8 %indirectarg381, ptr align 8 %indirectarg382, i32 63), !dbg !535
  unreachable, !dbg !535

panic404:                                         ; preds = %switch.case401
  store %"char[]" { ptr @.panic_msg.92, i64 52 }, ptr %indirectarg405, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg406, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg407, align 8
  %634 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %634(ptr align 8 %indirectarg405, ptr align 8 %indirectarg406, ptr align 8 %indirectarg407, i32 67), !dbg !541
  unreachable, !dbg !541

panic429:                                         ; preds = %switch.case426
  store %"char[]" { ptr @.panic_msg.93, i64 53 }, ptr %indirectarg430, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg431, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg432, align 8
  %635 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %635(ptr align 8 %indirectarg430, ptr align 8 %indirectarg431, ptr align 8 %indirectarg432, i32 71), !dbg !547
  unreachable, !dbg !547

panic451:                                         ; preds = %switch.case448
  store %"char[]" { ptr @.panic_msg.94, i64 55 }, ptr %indirectarg452, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg453, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg454, align 8
  %636 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %636(ptr align 8 %indirectarg452, ptr align 8 %indirectarg453, ptr align 8 %indirectarg454, i32 75), !dbg !554
  unreachable, !dbg !554

panic512:                                         ; preds = %check_type_ok508
  store i64 %279, ptr %taddr, align 8
  %637 = insertvalue %any undef, ptr %taddr, 0
  %638 = insertvalue %any %637, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %281, ptr %taddr513, align 8
  %639 = insertvalue %any undef, ptr %taddr513, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg514, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg515, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg516, align 8
  store %any %638, ptr %varargslots517, align 16
  %ptradd518 = getelementptr inbounds i8, ptr %varargslots517, i64 16
  store %any %640, ptr %ptradd518, align 16
  %641 = insertvalue %"any[]" undef, ptr %varargslots517, 0
  %"$$temp519" = insertvalue %"any[]" %641, i64 2, 1
  store %"any[]" %"$$temp519", ptr %indirectarg520, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg514, ptr align 8 %indirectarg515, ptr align 8 %indirectarg516, i32 200, ptr align 8 %indirectarg520), !dbg !563
  unreachable, !dbg !563

panic566:                                         ; preds = %if.then563
  store %"char[]" { ptr @.panic_msg.106, i64 52 }, ptr %indirectarg567, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg568, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg569, align 8
  %642 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %642(ptr align 8 %indirectarg567, ptr align 8 %indirectarg568, ptr align 8 %indirectarg569, i32 212), !dbg !574
  unreachable, !dbg !574

panic583:                                         ; preds = %if.then580
  store %"char[]" { ptr @.panic_msg.107, i64 53 }, ptr %indirectarg584, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg585, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg586, align 8
  %643 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %643(ptr align 8 %indirectarg584, ptr align 8 %indirectarg585, ptr align 8 %indirectarg586, i32 216), !dbg !577
  unreachable, !dbg !577

panic590:                                         ; preds = %cond.lhs
  store %"char[]" { ptr @.panic_msg.108, i64 54 }, ptr %indirectarg591, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg592, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg593, align 8
  %644 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %644(ptr align 8 %indirectarg591, ptr align 8 %indirectarg592, ptr align 8 %indirectarg593, i32 216), !dbg !577
  unreachable, !dbg !577

panic608:                                         ; preds = %if.then605
  store %"char[]" { ptr @.panic_msg.110, i64 53 }, ptr %indirectarg609, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg610, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg611, align 8
  %645 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %645(ptr align 8 %indirectarg609, ptr align 8 %indirectarg610, ptr align 8 %indirectarg611, i32 220), !dbg !580
  unreachable, !dbg !580

panic616:                                         ; preds = %cond.lhs614
  store %"char[]" { ptr @.panic_msg.111, i64 54 }, ptr %indirectarg617, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg618, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg619, align 8
  %646 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %646(ptr align 8 %indirectarg617, ptr align 8 %indirectarg618, ptr align 8 %indirectarg619, i32 220), !dbg !580
  unreachable, !dbg !580

panic635:                                         ; preds = %if.exit631
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg636, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg637, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg638, align 8
  %647 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %647(ptr align 8 %indirectarg636, ptr align 8 %indirectarg637, ptr align 8 %indirectarg638, i32 199), !dbg !582
  unreachable, !dbg !582

panic641:                                         ; preds = %checkok639
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg642, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg643, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg644, align 8
  %648 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %648(ptr align 8 %indirectarg642, ptr align 8 %indirectarg643, ptr align 8 %indirectarg644, i32 199), !dbg !582
  unreachable, !dbg !582

panic731:                                         ; preds = %if.then729
  store %"char[]" { ptr @.panic_msg.113, i64 48 }, ptr %indirectarg732, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg733, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg734, align 8
  %649 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %649(ptr align 8 %indirectarg732, ptr align 8 %indirectarg733, ptr align 8 %indirectarg734, i32 228), !dbg !594
  unreachable, !dbg !594

panic1079:                                        ; preds = %if.exit1063
  store %"char[]" { ptr @.panic_msg.120, i64 45 }, ptr %indirectarg1080, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1081, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg1082, align 8
  %650 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %650(ptr align 8 %indirectarg1080, ptr align 8 %indirectarg1081, ptr align 8 %indirectarg1082, i32 309), !dbg !722
  unreachable, !dbg !722

panic1085:                                        ; preds = %checkok1083
  store %"char[]" { ptr @.panic_msg.120, i64 45 }, ptr %indirectarg1086, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1087, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %indirectarg1088, align 8
  %651 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %651(ptr align 8 %indirectarg1086, ptr align 8 %indirectarg1087, ptr align 8 %indirectarg1088, i32 310), !dbg !724
  unreachable, !dbg !724
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.vprintf(ptr %0, ptr %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !759 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %total_len = alloca i64, align 8
  %format_len = alloca i64, align 8
  %variant_index = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %f = alloca ptr, align 8
  %retparam22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots35 = alloca [2 x %any], align 16
  %indirectarg38 = alloca %"any[]", align 8
  %error_var42 = alloca i64, align 8
  %retparam43 = alloca i64, align 8
  %switch = alloca i8, align 1
  %reterr65 = alloca i64, align 8
  %f66 = alloca ptr, align 8
  %retparam67 = alloca i64, align 8
  %indirectarg68 = alloca %"char[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %w = alloca i32, align 4
  %w.f = alloca i64, align 8
  %retparam89 = alloca i32, align 4
  %temp_err = alloca i64, align 8
  %reterr97 = alloca i64, align 8
  %f98 = alloca ptr, align 8
  %retparam99 = alloca i64, align 8
  %indirectarg100 = alloca %"char[]", align 8
  %taddr108 = alloca i64, align 8
  %taddr109 = alloca i64, align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %varargslots113 = alloca [2 x %any], align 16
  %indirectarg116 = alloca %"any[]", align 8
  %reterr133 = alloca i64, align 8
  %f134 = alloca ptr, align 8
  %retparam135 = alloca i64, align 8
  %indirectarg136 = alloca %"char[]", align 8
  %prec = alloca i32, align 4
  %prec.f = alloca i64, align 8
  %retparam143 = alloca i32, align 4
  %temp_err148 = alloca i64, align 8
  %reterr157 = alloca i64, align 8
  %f158 = alloca ptr, align 8
  %retparam159 = alloca i64, align 8
  %indirectarg160 = alloca %"char[]", align 8
  %taddr171 = alloca i64, align 8
  %taddr172 = alloca i64, align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %varargslots176 = alloca [2 x %any], align 16
  %indirectarg179 = alloca %"any[]", align 8
  %base = alloca i32, align 4
  %self186 = alloca ptr, align 8
  %f187 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %error_var197 = alloca i64, align 8
  %retparam198 = alloca i64, align 8
  %indirectarg199 = alloca %"char[]", align 8
  %current = alloca %any, align 8
  %taddr211 = alloca i64, align 8
  %taddr212 = alloca i64, align 8
  %indirectarg213 = alloca %"char[]", align 8
  %indirectarg214 = alloca %"char[]", align 8
  %indirectarg215 = alloca %"char[]", align 8
  %varargslots216 = alloca [2 x %any], align 16
  %indirectarg219 = alloca %"any[]", align 8
  %switch221 = alloca i8, align 1
  %error_var237 = alloca i64, align 8
  %f238 = alloca ptr, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam240 = alloca double, align 8
  %indirectarg241 = alloca %any, align 8
  %retparam245 = alloca i64, align 8
  %err = alloca i64, align 8
  %switch258 = alloca i64, align 8
  %self263 = alloca ptr, align 8
  %f264 = alloca i64, align 8
  %blockret265 = alloca i64, align 8
  %self278 = alloca ptr, align 8
  %f279 = alloca i64, align 8
  %blockret280 = alloca i64, align 8
  %error_var291 = alloca i64, align 8
  %retparam292 = alloca i64, align 8
  %indirectarg293 = alloca %"char[]", align 8
  %error_var307 = alloca i64, align 8
  %f308 = alloca ptr, align 8
  %len310 = alloca i64, align 8
  %len.f311 = alloca i64, align 8
  %retparam312 = alloca double, align 8
  %indirectarg313 = alloca %any, align 8
  %retparam317 = alloca i64, align 8
  %err322 = alloca i64, align 8
  %switch331 = alloca i64, align 8
  %self337 = alloca ptr, align 8
  %f338 = alloca i64, align 8
  %blockret339 = alloca i64, align 8
  %self352 = alloca ptr, align 8
  %f353 = alloca i64, align 8
  %blockret354 = alloca i64, align 8
  %error_var365 = alloca i64, align 8
  %retparam366 = alloca i64, align 8
  %indirectarg367 = alloca %"char[]", align 8
  %error_var381 = alloca i64, align 8
  %f382 = alloca ptr, align 8
  %len384 = alloca i64, align 8
  %len.f385 = alloca i64, align 8
  %retparam386 = alloca double, align 8
  %indirectarg387 = alloca %any, align 8
  %retparam391 = alloca i64, align 8
  %err396 = alloca i64, align 8
  %switch405 = alloca i64, align 8
  %self411 = alloca ptr, align 8
  %f412 = alloca i64, align 8
  %blockret413 = alloca i64, align 8
  %self426 = alloca ptr, align 8
  %f427 = alloca i64, align 8
  %blockret428 = alloca i64, align 8
  %error_var439 = alloca i64, align 8
  %retparam440 = alloca i64, align 8
  %indirectarg441 = alloca %"char[]", align 8
  %error_var455 = alloca i64, align 8
  %f456 = alloca ptr, align 8
  %len458 = alloca i64, align 8
  %len.f459 = alloca i64, align 8
  %retparam460 = alloca double, align 8
  %indirectarg461 = alloca %any, align 8
  %retparam465 = alloca i64, align 8
  %err470 = alloca i64, align 8
  %switch479 = alloca i64, align 8
  %self485 = alloca ptr, align 8
  %f486 = alloca i64, align 8
  %blockret487 = alloca i64, align 8
  %self500 = alloca ptr, align 8
  %f501 = alloca i64, align 8
  %blockret502 = alloca i64, align 8
  %error_var513 = alloca i64, align 8
  %retparam514 = alloca i64, align 8
  %indirectarg515 = alloca %"char[]", align 8
  %error_var527 = alloca i64, align 8
  %retparam528 = alloca i64, align 8
  %indirectarg529 = alloca %any, align 8
  %len539 = alloca i64, align 8
  %error_var540 = alloca i64, align 8
  %retparam541 = alloca i64, align 8
  %indirectarg542 = alloca %any, align 8
  %error_var549 = alloca i64, align 8
  %retparam552 = alloca i64, align 8
  %out_fn = alloca ptr, align 8
  %len562 = alloca i64, align 8
  %error_var563 = alloca i64, align 8
  %retparam564 = alloca i64, align 8
  %indirectarg565 = alloca %any, align 8
  %error_var572 = alloca i64, align 8
  %retparam576 = alloca i64, align 8
  %error_var583 = alloca i64, align 8
  %retparam584 = alloca i64, align 8
  %indirectarg585 = alloca %any, align 8
  %self596 = alloca ptr, align 8
  %f597 = alloca i64, align 8
  %blockret598 = alloca i64, align 8
  %error_var609 = alloca i64, align 8
  %retparam610 = alloca i64, align 8
  %indirectarg611 = alloca %"char[]", align 8
  %is_neg = alloca i8, align 1
  %error_var630 = alloca i64, align 8
  %f631 = alloca ptr, align 8
  %len633 = alloca i64, align 8
  %len.f634 = alloca i64, align 8
  %retparam635 = alloca i128, align 16
  %indirectarg636 = alloca %any, align 8
  %retparam640 = alloca i64, align 8
  %indirectarg641 = alloca i128, align 16
  %err646 = alloca i64, align 8
  %switch655 = alloca i64, align 8
  %self661 = alloca ptr, align 8
  %f662 = alloca i64, align 8
  %blockret663 = alloca i64, align 8
  %self676 = alloca ptr, align 8
  %f677 = alloca i64, align 8
  %blockret678 = alloca i64, align 8
  %error_var689 = alloca i64, align 8
  %retparam690 = alloca i64, align 8
  %indirectarg691 = alloca %"char[]", align 8
  %reterr711 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !760
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !760
  br i1 %5, label %panic, label %checkok, !dbg !760

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !761, !DIExpression(), !762)
    #dbg_declare(ptr %2, !763, !DIExpression(), !762)
    #dbg_declare(ptr %3, !764, !DIExpression(), !762)
  %6 = load ptr, ptr %self, align 8, !dbg !765
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !765
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 24, !dbg !765
  store i64 0, ptr %ptradd3, align 8, !dbg !765
  %7 = load ptr, ptr %self, align 8, !dbg !766
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !766
  %8 = load ptr, ptr %ptradd4, align 8, !dbg !766
  %i2nb = icmp eq ptr %8, null, !dbg !766
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !766

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !767
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !767
  store ptr @std.io.out_null_fn, ptr %ptradd5, align 8, !dbg !767
  br label %if.exit, !dbg !767

if.exit:                                          ; preds = %if.then, %checkok
    #dbg_declare(ptr %total_len, !769, !DIExpression(), !770)
  store i64 0, ptr %total_len, align 8, !dbg !770
    #dbg_declare(ptr %format_len, !771, !DIExpression(), !772)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !772
  %10 = load i64, ptr %ptradd6, align 8, !dbg !772
  store i64 %10, ptr %format_len, align 8, !dbg !772
    #dbg_declare(ptr %variant_index, !773, !DIExpression(), !774)
  store i64 0, ptr %variant_index, align 8, !dbg !774
    #dbg_declare(ptr %i, !775, !DIExpression(), !777)
  store i64 0, ptr %i, align 8, !dbg !777
  br label %loop.cond, !dbg !777

loop.cond:                                        ; preds = %loop.inc, %if.exit
  %11 = load i64, ptr %i, align 8, !dbg !777
  %12 = load i64, ptr %format_len, align 8, !dbg !777
  %lt = icmp ult i64 %11, %12, !dbg !777
  br i1 %lt, label %loop.body, label %loop.exit703, !dbg !777

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !778, !DIExpression(), !780)
  %ptradd7 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !780
  %13 = load i64, ptr %ptradd7, align 8, !dbg !780
  %14 = load ptr, ptr %2, align 8, !dbg !780
  %15 = load i64, ptr %i, align 8, !dbg !780
  %ge = icmp uge i64 %15, %13, !dbg !780
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !780
  br i1 %16, label %panic8, label %checkok15, !dbg !780

checkok15:                                        ; preds = %loop.body
  %ptradd16 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !780
  %17 = load i8, ptr %ptradd16, align 1, !dbg !780
  store i8 %17, ptr %c, align 1, !dbg !780
  %18 = load i8, ptr %c, align 1, !dbg !781
  %neq = icmp ne i8 %18, 37, !dbg !781
  br i1 %neq, label %if.then17, label %if.exit18, !dbg !781

if.then17:                                        ; preds = %checkok15
  %19 = load i64, ptr %total_len, align 8, !dbg !782
  %20 = load ptr, ptr %self, align 8
  %21 = load i8, ptr %c, align 1
  %22 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %20, i8 %21), !dbg !782
  %not_err = icmp eq i64 %22, 0, !dbg !782
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !782
  br i1 %23, label %after_check, label %assign_optional, !dbg !782

assign_optional:                                  ; preds = %if.then17
  store i64 %22, ptr %error_var, align 8, !dbg !782
  br label %guard_block, !dbg !782

after_check:                                      ; preds = %if.then17
  br label %noerr_block, !dbg !782

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !782
  ret i64 %24, !dbg !782

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !782
  %add = add i64 %19, %25, !dbg !782
  store i64 %add, ptr %total_len, align 8, !dbg !782
  br label %loop.inc, !dbg !784

if.exit18:                                        ; preds = %checkok15
  %26 = load i64, ptr %i, align 8, !dbg !785
  %add19 = add i64 %26, 1, !dbg !785
  store i64 %add19, ptr %i, align 8, !dbg !785
  %27 = load i64, ptr %i, align 8, !dbg !786
  %28 = load i64, ptr %format_len, align 8, !dbg !786
  %ge20 = icmp uge i64 %27, %28, !dbg !786
  br i1 %ge20, label %if.then21, label %if.exit26, !dbg !786

if.then21:                                        ; preds = %if.exit18
  %29 = load ptr, ptr %self, align 8
  store ptr %29, ptr %f, align 8
  %30 = load ptr, ptr %f, align 8
  store %"char[]" { ptr @.str.127, i64 4 }, ptr %indirectarg23, align 8
  %31 = call i64 @std.io.Formatter.out_substr(ptr %retparam22, ptr %30, ptr align 8 %indirectarg23), !dbg !787
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr, align 8, !dbg !789
  br label %err_retblock, !dbg !789

err_retblock:                                     ; preds = %if.then21
  %32 = load i64, ptr %reterr, align 8, !dbg !789
  ret i64 %32, !dbg !789

if.exit26:                                        ; preds = %if.exit18
  %ptradd27 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !790
  %33 = load i64, ptr %ptradd27, align 8, !dbg !790
  %34 = load ptr, ptr %2, align 8, !dbg !790
  %35 = load i64, ptr %i, align 8, !dbg !790
  %ge28 = icmp uge i64 %35, %33, !dbg !790
  %36 = call i1 @llvm.expect.i1(i1 %ge28, i1 false), !dbg !790
  br i1 %36, label %panic29, label %checkok39, !dbg !790

checkok39:                                        ; preds = %if.exit26
  %ptradd40 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !790
  %37 = load i8, ptr %ptradd40, align 1, !dbg !790
  store i8 %37, ptr %c, align 1, !dbg !790
  %38 = load i8, ptr %c, align 1, !dbg !791
  %eq = icmp eq i8 %38, 37, !dbg !791
  br i1 %eq, label %if.then41, label %if.exit50, !dbg !791

if.then41:                                        ; preds = %checkok39
  %39 = load i64, ptr %total_len, align 8, !dbg !792
  %40 = load ptr, ptr %self, align 8
  %41 = load i8, ptr %c, align 1
  %42 = call i64 @std.io.Formatter.out(ptr %retparam43, ptr %40, i8 %41), !dbg !792
  %not_err44 = icmp eq i64 %42, 0, !dbg !792
  %43 = call i1 @llvm.expect.i1(i1 %not_err44, i1 true), !dbg !792
  br i1 %43, label %after_check46, label %assign_optional45, !dbg !792

assign_optional45:                                ; preds = %if.then41
  store i64 %42, ptr %error_var42, align 8, !dbg !792
  br label %guard_block47, !dbg !792

after_check46:                                    ; preds = %if.then41
  br label %noerr_block48, !dbg !792

guard_block47:                                    ; preds = %assign_optional45
  %44 = load i64, ptr %error_var42, align 8, !dbg !792
  ret i64 %44, !dbg !792

noerr_block48:                                    ; preds = %after_check46
  %45 = load i64, ptr %retparam43, align 8, !dbg !792
  %add49 = add i64 %39, %45, !dbg !792
  store i64 %add49, ptr %total_len, align 8, !dbg !792
  br label %loop.inc, !dbg !794

if.exit50:                                        ; preds = %checkok39
  %46 = load ptr, ptr %self, align 8, !dbg !795
  %ptradd51 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !795
  store i32 0, ptr %ptradd51, align 8, !dbg !795
  br label %loop.body52, !dbg !796

loop.body52:                                      ; preds = %checkok85, %if.exit50
  %47 = load i8, ptr %c, align 1
  store i8 %47, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body52
  %48 = load i8, ptr %switch, align 1
  switch i8 %48, label %switch.default [
    i8 48, label %switch.case
    i8 45, label %switch.case54
    i8 43, label %switch.case56
    i8 32, label %switch.case58
    i8 35, label %switch.case60
  ]

switch.case:                                      ; preds = %switch.entry
  %49 = load ptr, ptr %self, align 8, !dbg !797
  %ptradd53 = getelementptr inbounds i8, ptr %49, i64 16, !dbg !797
  %50 = load i32, ptr %ptradd53, align 8, !dbg !797
  %51 = and i32 %50, -2, !dbg !797
  %52 = or i32 %51, 1, !dbg !797
  store i32 %52, ptr %ptradd53, align 8, !dbg !797
  br label %switch.exit, !dbg !797

switch.case54:                                    ; preds = %switch.entry
  %53 = load ptr, ptr %self, align 8, !dbg !802
  %ptradd55 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !802
  %54 = load i32, ptr %ptradd55, align 8, !dbg !802
  %55 = and i32 %54, -3, !dbg !802
  %56 = or i32 %55, 2, !dbg !802
  store i32 %56, ptr %ptradd55, align 8, !dbg !802
  br label %switch.exit, !dbg !802

switch.case56:                                    ; preds = %switch.entry
  %57 = load ptr, ptr %self, align 8, !dbg !804
  %ptradd57 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !804
  %58 = load i32, ptr %ptradd57, align 8, !dbg !804
  %59 = and i32 %58, -5, !dbg !804
  %60 = or i32 %59, 4, !dbg !804
  store i32 %60, ptr %ptradd57, align 8, !dbg !804
  br label %switch.exit, !dbg !804

switch.case58:                                    ; preds = %switch.entry
  %61 = load ptr, ptr %self, align 8, !dbg !806
  %ptradd59 = getelementptr inbounds i8, ptr %61, i64 16, !dbg !806
  %62 = load i32, ptr %ptradd59, align 8, !dbg !806
  %63 = and i32 %62, -9, !dbg !806
  %64 = or i32 %63, 8, !dbg !806
  store i32 %64, ptr %ptradd59, align 8, !dbg !806
  br label %switch.exit, !dbg !806

switch.case60:                                    ; preds = %switch.entry
  %65 = load ptr, ptr %self, align 8, !dbg !808
  %ptradd61 = getelementptr inbounds i8, ptr %65, i64 16, !dbg !808
  %66 = load i32, ptr %ptradd61, align 8, !dbg !808
  %67 = and i32 %66, -17, !dbg !808
  %68 = or i32 %67, 16, !dbg !808
  store i32 %68, ptr %ptradd61, align 8, !dbg !808
  br label %switch.exit, !dbg !808

switch.default:                                   ; preds = %switch.entry
  br label %loop.exit, !dbg !810

switch.exit:                                      ; preds = %switch.case60, %switch.case58, %switch.case56, %switch.case54, %switch.case
  %69 = load i64, ptr %i, align 8, !dbg !812
  %add62 = add i64 %69, 1, !dbg !812
  store i64 %add62, ptr %i, align 8, !dbg !812
  %70 = load i64, ptr %format_len, align 8, !dbg !812
  %ge63 = icmp uge i64 %add62, %70, !dbg !812
  br i1 %ge63, label %if.then64, label %if.exit72, !dbg !812

if.then64:                                        ; preds = %switch.exit
  %71 = load ptr, ptr %self, align 8
  store ptr %71, ptr %f66, align 8
  %72 = load ptr, ptr %f66, align 8
  store %"char[]" { ptr @.str.128, i64 4 }, ptr %indirectarg68, align 8
  %73 = call i64 @std.io.Formatter.out_substr(ptr %retparam67, ptr %72, ptr align 8 %indirectarg68), !dbg !813
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr65, align 8, !dbg !815
  br label %err_retblock71, !dbg !815

err_retblock71:                                   ; preds = %if.then64
  %74 = load i64, ptr %reterr65, align 8, !dbg !815
  ret i64 %74, !dbg !815

if.exit72:                                        ; preds = %switch.exit
  %ptradd73 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !816
  %75 = load i64, ptr %ptradd73, align 8, !dbg !816
  %76 = load ptr, ptr %2, align 8, !dbg !816
  %77 = load i64, ptr %i, align 8, !dbg !816
  %ge74 = icmp uge i64 %77, %75, !dbg !816
  %78 = call i1 @llvm.expect.i1(i1 %ge74, i1 false), !dbg !816
  br i1 %78, label %panic75, label %checkok85, !dbg !816

checkok85:                                        ; preds = %if.exit72
  %ptradd86 = getelementptr inbounds i8, ptr %76, i64 %77, !dbg !816
  %79 = load i8, ptr %ptradd86, align 1, !dbg !816
  store i8 %79, ptr %c, align 1, !dbg !816
  br label %loop.body52, !dbg !816

loop.exit:                                        ; preds = %switch.default
    #dbg_declare(ptr %w, !817, !DIExpression(), !818)
  %ptradd87 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !818
  %ptradd88 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !818
  %80 = load ptr, ptr %3, align 8
  %81 = load i64, ptr %ptradd87, align 8
  %82 = load ptr, ptr %2, align 8
  %83 = load i64, ptr %ptradd88, align 8
  %84 = call i64 @std.io.printf_parse_format_field(ptr %retparam89, ptr %80, i64 %81, ptr %variant_index, ptr %82, i64 %83, ptr %i) #5, !dbg !818
  %not_err90 = icmp eq i64 %84, 0, !dbg !818
  %85 = call i1 @llvm.expect.i1(i1 %not_err90, i1 true), !dbg !818
  br i1 %85, label %after_check92, label %assign_optional91, !dbg !818

assign_optional91:                                ; preds = %loop.exit
  store i64 %84, ptr %w.f, align 8, !dbg !818
  br label %after_assign, !dbg !818

after_check92:                                    ; preds = %loop.exit
  %86 = load i32, ptr %retparam89, align 4, !dbg !818
  store i32 %86, ptr %w, align 4, !dbg !818
  store i64 0, ptr %w.f, align 8, !dbg !818
  br label %after_assign, !dbg !818

after_assign:                                     ; preds = %after_check92, %assign_optional91
  br label %testblock

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %w.f, align 8, !dbg !819
  %not_err93 = icmp eq i64 %optval, 0, !dbg !819
  %87 = call i1 @llvm.expect.i1(i1 %not_err93, i1 true), !dbg !819
  br i1 %87, label %after_check95, label %assign_optional94, !dbg !819

assign_optional94:                                ; preds = %testblock
  store i64 %optval, ptr %temp_err, align 8, !dbg !819
  br label %end_block, !dbg !819

after_check95:                                    ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !819
  br label %end_block, !dbg !819

end_block:                                        ; preds = %after_check95, %assign_optional94
  %88 = load i64, ptr %temp_err, align 8, !dbg !819
  %i2b = icmp ne i64 %88, 0, !dbg !819
  br i1 %i2b, label %if.then96, label %if.exit104, !dbg !819

if.then96:                                        ; preds = %end_block
  %89 = load ptr, ptr %self, align 8
  store ptr %89, ptr %f98, align 8
  %90 = load ptr, ptr %f98, align 8
  store %"char[]" { ptr @.str.129, i64 4 }, ptr %indirectarg100, align 8
  %91 = call i64 @std.io.Formatter.out_substr(ptr %retparam99, ptr %90, ptr align 8 %indirectarg100), !dbg !820
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr97, align 8, !dbg !822
  br label %err_retblock103, !dbg !822

err_retblock103:                                  ; preds = %if.then96
  %92 = load i64, ptr %reterr97, align 8, !dbg !822
  ret i64 %92, !dbg !822

if.exit104:                                       ; preds = %end_block
  %ptradd105 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !823
  %93 = load i64, ptr %ptradd105, align 8, !dbg !823
  %94 = load ptr, ptr %2, align 8, !dbg !823
  %95 = load i64, ptr %i, align 8, !dbg !823
  %ge106 = icmp uge i64 %95, %93, !dbg !823
  %96 = call i1 @llvm.expect.i1(i1 %ge106, i1 false), !dbg !823
  br i1 %96, label %panic107, label %checkok117, !dbg !823

checkok117:                                       ; preds = %if.exit104
  %ptradd118 = getelementptr inbounds i8, ptr %94, i64 %95, !dbg !823
  %97 = load i8, ptr %ptradd118, align 1, !dbg !823
  store i8 %97, ptr %c, align 1, !dbg !823
  %98 = load i32, ptr %w, align 4, !dbg !824
  %lt119 = icmp slt i32 %98, 0, !dbg !824
  br i1 %lt119, label %if.then120, label %if.exit122, !dbg !824

if.then120:                                       ; preds = %checkok117
  %99 = load ptr, ptr %self, align 8, !dbg !825
  %ptradd121 = getelementptr inbounds i8, ptr %99, i64 16, !dbg !825
  %100 = load i32, ptr %ptradd121, align 8, !dbg !825
  %101 = and i32 %100, -3, !dbg !825
  %102 = or i32 %101, 2, !dbg !825
  store i32 %102, ptr %ptradd121, align 8, !dbg !825
  %103 = load i32, ptr %w, align 4, !dbg !827
  %neg = sub i32 0, %103, !dbg !827
  store i32 %neg, ptr %w, align 4, !dbg !827
  store i64 0, ptr %w.f, align 8, !dbg !827
  br label %if.exit122, !dbg !827

if.exit122:                                       ; preds = %if.then120, %checkok117
  %104 = load ptr, ptr %self, align 8, !dbg !828
  %ptradd123 = getelementptr inbounds i8, ptr %104, i64 16, !dbg !828
  %ptradd124 = getelementptr inbounds i8, ptr %ptradd123, i64 4, !dbg !828
  %105 = load i32, ptr %w, align 4, !dbg !828
  store i32 %105, ptr %ptradd124, align 4, !dbg !828
  %106 = load ptr, ptr %self, align 8, !dbg !829
  %ptradd125 = getelementptr inbounds i8, ptr %106, i64 16, !dbg !829
  %ptradd126 = getelementptr inbounds i8, ptr %ptradd125, i64 8, !dbg !829
  store i32 0, ptr %ptradd126, align 8, !dbg !829
  %107 = load i8, ptr %c, align 1, !dbg !830
  %eq127 = icmp eq i8 %107, 46, !dbg !830
  br i1 %eq127, label %if.then128, label %if.exit182, !dbg !830

if.then128:                                       ; preds = %if.exit122
  %108 = load ptr, ptr %self, align 8, !dbg !831
  %ptradd129 = getelementptr inbounds i8, ptr %108, i64 16, !dbg !831
  %109 = load i32, ptr %ptradd129, align 8, !dbg !831
  %110 = and i32 %109, -65, !dbg !831
  %111 = or i32 %110, 64, !dbg !831
  store i32 %111, ptr %ptradd129, align 8, !dbg !831
  %112 = load i64, ptr %i, align 8, !dbg !833
  %add130 = add i64 %112, 1, !dbg !833
  store i64 %add130, ptr %i, align 8, !dbg !833
  %113 = load i64, ptr %format_len, align 8, !dbg !833
  %ge131 = icmp uge i64 %add130, %113, !dbg !833
  br i1 %ge131, label %if.then132, label %if.exit140, !dbg !833

if.then132:                                       ; preds = %if.then128
  %114 = load ptr, ptr %self, align 8
  store ptr %114, ptr %f134, align 8
  %115 = load ptr, ptr %f134, align 8
  store %"char[]" { ptr @.str.130, i64 12 }, ptr %indirectarg136, align 8
  %116 = call i64 @std.io.Formatter.out_substr(ptr %retparam135, ptr %115, ptr align 8 %indirectarg136), !dbg !834
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr133, align 8, !dbg !836
  br label %err_retblock139, !dbg !836

err_retblock139:                                  ; preds = %if.then132
  %117 = load i64, ptr %reterr133, align 8, !dbg !836
  ret i64 %117, !dbg !836

if.exit140:                                       ; preds = %if.then128
    #dbg_declare(ptr %prec, !837, !DIExpression(), !838)
  %ptradd141 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !838
  %ptradd142 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !838
  %118 = load ptr, ptr %3, align 8
  %119 = load i64, ptr %ptradd141, align 8
  %120 = load ptr, ptr %2, align 8
  %121 = load i64, ptr %ptradd142, align 8
  %122 = call i64 @std.io.printf_parse_format_field(ptr %retparam143, ptr %118, i64 %119, ptr %variant_index, ptr %120, i64 %121, ptr %i) #5, !dbg !838
  %not_err144 = icmp eq i64 %122, 0, !dbg !838
  %123 = call i1 @llvm.expect.i1(i1 %not_err144, i1 true), !dbg !838
  br i1 %123, label %after_check146, label %assign_optional145, !dbg !838

assign_optional145:                               ; preds = %if.exit140
  store i64 %122, ptr %prec.f, align 8, !dbg !838
  br label %after_assign147, !dbg !838

after_check146:                                   ; preds = %if.exit140
  %124 = load i32, ptr %retparam143, align 4, !dbg !838
  store i32 %124, ptr %prec, align 4, !dbg !838
  store i64 0, ptr %prec.f, align 8, !dbg !838
  br label %after_assign147, !dbg !838

after_assign147:                                  ; preds = %after_check146, %assign_optional145
  br label %testblock149

testblock149:                                     ; preds = %after_assign147
  %optval150 = load i64, ptr %prec.f, align 8, !dbg !839
  %not_err151 = icmp eq i64 %optval150, 0, !dbg !839
  %125 = call i1 @llvm.expect.i1(i1 %not_err151, i1 true), !dbg !839
  br i1 %125, label %after_check153, label %assign_optional152, !dbg !839

assign_optional152:                               ; preds = %testblock149
  store i64 %optval150, ptr %temp_err148, align 8, !dbg !839
  br label %end_block154, !dbg !839

after_check153:                                   ; preds = %testblock149
  store i64 0, ptr %temp_err148, align 8, !dbg !839
  br label %end_block154, !dbg !839

end_block154:                                     ; preds = %after_check153, %assign_optional152
  %126 = load i64, ptr %temp_err148, align 8, !dbg !839
  %i2b155 = icmp ne i64 %126, 0, !dbg !839
  br i1 %i2b155, label %if.then156, label %if.exit164, !dbg !839

if.then156:                                       ; preds = %end_block154
  %127 = load ptr, ptr %self, align 8
  store ptr %127, ptr %f158, align 8
  %128 = load ptr, ptr %f158, align 8
  store %"char[]" { ptr @.str.131, i64 12 }, ptr %indirectarg160, align 8
  %129 = call i64 @std.io.Formatter.out_substr(ptr %retparam159, ptr %128, ptr align 8 %indirectarg160), !dbg !840
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr157, align 8, !dbg !842
  br label %err_retblock163, !dbg !842

err_retblock163:                                  ; preds = %if.then156
  %130 = load i64, ptr %reterr157, align 8, !dbg !842
  ret i64 %130, !dbg !842

if.exit164:                                       ; preds = %end_block154
  %131 = load ptr, ptr %self, align 8, !dbg !843
  %ptradd165 = getelementptr inbounds i8, ptr %131, i64 16, !dbg !843
  %ptradd166 = getelementptr inbounds i8, ptr %ptradd165, i64 8, !dbg !843
  %132 = load i32, ptr %prec, align 4, !dbg !843
  %lt167 = icmp slt i32 %132, 0, !dbg !843
  br i1 %lt167, label %cond.lhs, label %cond.rhs, !dbg !843

cond.lhs:                                         ; preds = %if.exit164
  br label %cond.phi, !dbg !843

cond.rhs:                                         ; preds = %if.exit164
  %133 = load i32, ptr %prec, align 4, !dbg !843
  br label %cond.phi, !dbg !843

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i32 [ 0, %cond.lhs ], [ %133, %cond.rhs ], !dbg !843
  store i32 %val, ptr %ptradd166, align 8, !dbg !843
  %ptradd168 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !844
  %134 = load i64, ptr %ptradd168, align 8, !dbg !844
  %135 = load ptr, ptr %2, align 8, !dbg !844
  %136 = load i64, ptr %i, align 8, !dbg !844
  %ge169 = icmp uge i64 %136, %134, !dbg !844
  %137 = call i1 @llvm.expect.i1(i1 %ge169, i1 false), !dbg !844
  br i1 %137, label %panic170, label %checkok180, !dbg !844

checkok180:                                       ; preds = %cond.phi
  %ptradd181 = getelementptr inbounds i8, ptr %135, i64 %136, !dbg !844
  %138 = load i8, ptr %ptradd181, align 1, !dbg !844
  store i8 %138, ptr %c, align 1, !dbg !844
  br label %if.exit182, !dbg !844

if.exit182:                                       ; preds = %checkok180, %if.exit122
    #dbg_declare(ptr %base, !845, !DIExpression(), !846)
  store i32 0, ptr %base, align 4, !dbg !846
  %139 = load i64, ptr %variant_index, align 8, !dbg !847
  %ptradd183 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !847
  %140 = load i64, ptr %ptradd183, align 8, !dbg !847
  %ge184 = icmp uge i64 %139, %140, !dbg !847
  br i1 %ge184, label %if.then185, label %if.exit206, !dbg !847

if.then185:                                       ; preds = %if.exit182
  %141 = load ptr, ptr %self, align 8
  store ptr %141, ptr %self186, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" to i64), ptr %f187, align 8
  %142 = load ptr, ptr %self186, align 8, !dbg !848
  %ptradd188 = getelementptr inbounds i8, ptr %142, i64 16, !dbg !848
  %ptradd189 = getelementptr inbounds i8, ptr %ptradd188, i64 24, !dbg !848
  %143 = load i64, ptr %ptradd189, align 8, !dbg !848
  %i2b190 = icmp ne i64 %143, 0, !dbg !848
  br i1 %i2b190, label %if.then191, label %if.exit194, !dbg !848

if.then191:                                       ; preds = %if.then185
  %144 = load ptr, ptr %self186, align 8, !dbg !848
  %ptradd192 = getelementptr inbounds i8, ptr %144, i64 16, !dbg !848
  %ptradd193 = getelementptr inbounds i8, ptr %ptradd192, i64 24, !dbg !848
  %145 = load i64, ptr %ptradd193, align 8, !dbg !848
  store i64 %145, ptr %blockret, align 8, !dbg !848
  br label %expr_block.exit, !dbg !848

if.exit194:                                       ; preds = %if.then185
  %146 = load ptr, ptr %self186, align 8, !dbg !852
  %ptradd195 = getelementptr inbounds i8, ptr %146, i64 16, !dbg !852
  %ptradd196 = getelementptr inbounds i8, ptr %ptradd195, i64 24, !dbg !852
  %147 = load i64, ptr %f187, align 8, !dbg !852
  store i64 %147, ptr %ptradd196, align 8, !dbg !852
  %148 = load i64, ptr %f187, align 8, !dbg !853
  store i64 %148, ptr %blockret, align 8, !dbg !853
  br label %expr_block.exit, !dbg !853

expr_block.exit:                                  ; preds = %if.exit194, %if.then191
  %149 = load i64, ptr %total_len, align 8, !dbg !854
  %150 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.132, i64 9 }, ptr %indirectarg199, align 8
  %151 = call i64 @std.io.Formatter.out_substr(ptr %retparam198, ptr %150, ptr align 8 %indirectarg199), !dbg !854
  %not_err200 = icmp eq i64 %151, 0, !dbg !854
  %152 = call i1 @llvm.expect.i1(i1 %not_err200, i1 true), !dbg !854
  br i1 %152, label %after_check202, label %assign_optional201, !dbg !854

assign_optional201:                               ; preds = %expr_block.exit
  store i64 %151, ptr %error_var197, align 8, !dbg !854
  br label %guard_block203, !dbg !854

after_check202:                                   ; preds = %expr_block.exit
  br label %noerr_block204, !dbg !854

guard_block203:                                   ; preds = %assign_optional201
  %153 = load i64, ptr %error_var197, align 8, !dbg !854
  ret i64 %153, !dbg !854

noerr_block204:                                   ; preds = %after_check202
  %154 = load i64, ptr %retparam198, align 8, !dbg !854
  %add205 = add i64 %149, %154, !dbg !854
  store i64 %add205, ptr %total_len, align 8, !dbg !854
  br label %loop.inc, !dbg !855

if.exit206:                                       ; preds = %if.exit182
    #dbg_declare(ptr %current, !856, !DIExpression(), !857)
  %ptradd207 = getelementptr inbounds i8, ptr %3, i64 8, !dbg !857
  %155 = load i64, ptr %ptradd207, align 8, !dbg !857
  %156 = load ptr, ptr %3, align 8, !dbg !857
  %157 = load i64, ptr %variant_index, align 8, !dbg !857
  %add208 = add i64 %157, 1, !dbg !857
  store i64 %add208, ptr %variant_index, align 8, !dbg !857
  %ge209 = icmp uge i64 %157, %155, !dbg !857
  %158 = call i1 @llvm.expect.i1(i1 %ge209, i1 false), !dbg !857
  br i1 %158, label %panic210, label %checkok220, !dbg !857

checkok220:                                       ; preds = %if.exit206
  %ptroffset = getelementptr inbounds [16 x i8], ptr %156, i64 %157, !dbg !857
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %current, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !857
  %159 = load i8, ptr %c, align 1
  store i8 %159, ptr %switch221, align 1
  br label %switch.entry222

switch.entry222:                                  ; preds = %checkok220
  %160 = load i8, ptr %switch221, align 1
  switch i8 %160, label %switch.default595 [
    i8 100, label %switch.case223
    i8 88, label %switch.case225
    i8 120, label %switch.case227
    i8 79, label %switch.case228
    i8 111, label %switch.case230
    i8 66, label %switch.case231
    i8 98, label %switch.case233
    i8 65, label %switch.case234
    i8 97, label %switch.case236
    i8 70, label %switch.case304
    i8 102, label %switch.case306
    i8 69, label %switch.case378
    i8 101, label %switch.case380
    i8 71, label %switch.case452
    i8 103, label %switch.case454
    i8 99, label %switch.case526
    i8 115, label %switch.case536
    i8 112, label %switch.case592
  ]

switch.case223:                                   ; preds = %switch.entry222
  store i32 10, ptr %base, align 4, !dbg !858
  %161 = load ptr, ptr %self, align 8, !dbg !861
  %ptradd224 = getelementptr inbounds i8, ptr %161, i64 16, !dbg !861
  %162 = load i32, ptr %ptradd224, align 8, !dbg !861
  %163 = and i32 %162, -17, !dbg !861
  store i32 %163, ptr %ptradd224, align 8, !dbg !861
  br label %switch.exit618, !dbg !861

switch.case225:                                   ; preds = %switch.entry222
  %164 = load ptr, ptr %self, align 8, !dbg !862
  %ptradd226 = getelementptr inbounds i8, ptr %164, i64 16, !dbg !862
  %165 = load i32, ptr %ptradd226, align 8, !dbg !862
  %166 = and i32 %165, -33, !dbg !862
  %167 = or i32 %166, 32, !dbg !862
  store i32 %167, ptr %ptradd226, align 8, !dbg !862
  br label %switch.case227, !dbg !864

switch.case227:                                   ; preds = %switch.entry222, %switch.case225
  store i32 16, ptr %base, align 4, !dbg !865
  br label %switch.exit618, !dbg !865

switch.case228:                                   ; preds = %switch.entry222
  %168 = load ptr, ptr %self, align 8, !dbg !867
  %ptradd229 = getelementptr inbounds i8, ptr %168, i64 16, !dbg !867
  %169 = load i32, ptr %ptradd229, align 8, !dbg !867
  %170 = and i32 %169, -33, !dbg !867
  %171 = or i32 %170, 32, !dbg !867
  store i32 %171, ptr %ptradd229, align 8, !dbg !867
  br label %switch.case230, !dbg !869

switch.case230:                                   ; preds = %switch.entry222, %switch.case228
  store i32 8, ptr %base, align 4, !dbg !870
  br label %switch.exit618, !dbg !870

switch.case231:                                   ; preds = %switch.entry222
  %172 = load ptr, ptr %self, align 8, !dbg !872
  %ptradd232 = getelementptr inbounds i8, ptr %172, i64 16, !dbg !872
  %173 = load i32, ptr %ptradd232, align 8, !dbg !872
  %174 = and i32 %173, -33, !dbg !872
  %175 = or i32 %174, 32, !dbg !872
  store i32 %175, ptr %ptradd232, align 8, !dbg !872
  br label %switch.case233, !dbg !874

switch.case233:                                   ; preds = %switch.entry222, %switch.case231
  store i32 2, ptr %base, align 4, !dbg !875
  br label %switch.exit618, !dbg !875

switch.case234:                                   ; preds = %switch.entry222
  %176 = load ptr, ptr %self, align 8, !dbg !877
  %ptradd235 = getelementptr inbounds i8, ptr %176, i64 16, !dbg !877
  %177 = load i32, ptr %ptradd235, align 8, !dbg !877
  %178 = and i32 %177, -33, !dbg !877
  %179 = or i32 %178, 32, !dbg !877
  store i32 %179, ptr %ptradd235, align 8, !dbg !877
  br label %switch.case236, !dbg !879

switch.case236:                                   ; preds = %switch.entry222, %switch.case234
  %180 = load i64, ptr %total_len, align 8, !dbg !880
  %181 = load ptr, ptr %self, align 8
  store ptr %181, ptr %f238, align 8
    #dbg_declare(ptr %len, !882, !DIExpression(), !884)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg241, ptr align 8 %current, i32 16, i1 false)
  %182 = call i64 @std.io.float_from_any(ptr %retparam240, ptr align 8 %indirectarg241), !dbg !885
  %not_err242 = icmp eq i64 %182, 0, !dbg !885
  %183 = call i1 @llvm.expect.i1(i1 %not_err242, i1 true), !dbg !885
  br i1 %183, label %after_check244, label %assign_optional243, !dbg !885

assign_optional243:                               ; preds = %switch.case236
  store i64 %182, ptr %len.f, align 8, !dbg !885
  br label %after_assign249, !dbg !885

after_check244:                                   ; preds = %switch.case236
  %184 = load ptr, ptr %self, align 8
  %185 = load double, ptr %retparam240, align 8
  %186 = call i64 @std.io.Formatter.atoa(ptr %retparam245, ptr %184, double %185), !dbg !884
  %not_err246 = icmp eq i64 %186, 0, !dbg !884
  %187 = call i1 @llvm.expect.i1(i1 %not_err246, i1 true), !dbg !884
  br i1 %187, label %after_check248, label %assign_optional247, !dbg !884

assign_optional247:                               ; preds = %after_check244
  store i64 %186, ptr %len.f, align 8, !dbg !884
  br label %after_assign249, !dbg !884

after_check248:                                   ; preds = %after_check244
  %188 = load i64, ptr %retparam245, align 8, !dbg !884
  store i64 %188, ptr %len, align 8, !dbg !884
  store i64 0, ptr %len.f, align 8, !dbg !884
  br label %after_assign249, !dbg !884

after_assign249:                                  ; preds = %after_check248, %assign_optional247, %assign_optional243
    #dbg_declare(ptr %err, !886, !DIExpression(), !887)
  br label %testblock250, !dbg !887

testblock250:                                     ; preds = %after_assign249
  %optval251 = load i64, ptr %len.f, align 8, !dbg !887
  %not_err252 = icmp eq i64 %optval251, 0, !dbg !887
  %189 = call i1 @llvm.expect.i1(i1 %not_err252, i1 true), !dbg !887
  br i1 %189, label %after_check254, label %assign_optional253, !dbg !887

assign_optional253:                               ; preds = %testblock250
  store i64 %optval251, ptr %err, align 8, !dbg !887
  br label %end_block255, !dbg !887

after_check254:                                   ; preds = %testblock250
  store i64 0, ptr %err, align 8, !dbg !887
  br label %end_block255, !dbg !887

end_block255:                                     ; preds = %after_check254, %assign_optional253
  %190 = load i64, ptr %err, align 8, !dbg !887
  %neq256 = icmp ne i64 %190, 0, !dbg !887
  br i1 %neq256, label %if.then257, label %if.exit300, !dbg !887

if.then257:                                       ; preds = %end_block255
  store i64 %190, ptr %switch258, align 8
  br label %switch.entry259

switch.entry259:                                  ; preds = %if.then257
  %191 = load i64, ptr %switch258, align 8
  %eq260 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %191, !dbg !888
  br i1 %eq260, label %switch.case262, label %next_if, !dbg !888

next_if:                                          ; preds = %switch.entry259
  %eq261 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %191, !dbg !889
  br i1 %eq261, label %switch.case262, label %next_if276, !dbg !889

switch.case262:                                   ; preds = %next_if, %switch.entry259
  %192 = load ptr, ptr %f238, align 8
  store ptr %192, ptr %self263, align 8
  %193 = load i64, ptr %err, align 8
  store i64 %193, ptr %f264, align 8
  %194 = load ptr, ptr %self263, align 8, !dbg !890
  %ptradd266 = getelementptr inbounds i8, ptr %194, i64 16, !dbg !890
  %ptradd267 = getelementptr inbounds i8, ptr %ptradd266, i64 24, !dbg !890
  %195 = load i64, ptr %ptradd267, align 8, !dbg !890
  %i2b268 = icmp ne i64 %195, 0, !dbg !890
  br i1 %i2b268, label %if.then269, label %if.exit272, !dbg !890

if.then269:                                       ; preds = %switch.case262
  %196 = load ptr, ptr %self263, align 8, !dbg !890
  %ptradd270 = getelementptr inbounds i8, ptr %196, i64 16, !dbg !890
  %ptradd271 = getelementptr inbounds i8, ptr %ptradd270, i64 24, !dbg !890
  %197 = load i64, ptr %ptradd271, align 8, !dbg !890
  store i64 %197, ptr %blockret265, align 8, !dbg !890
  br label %expr_block.exit275, !dbg !890

if.exit272:                                       ; preds = %switch.case262
  %198 = load ptr, ptr %self263, align 8, !dbg !894
  %ptradd273 = getelementptr inbounds i8, ptr %198, i64 16, !dbg !894
  %ptradd274 = getelementptr inbounds i8, ptr %ptradd273, i64 24, !dbg !894
  %199 = load i64, ptr %f264, align 8, !dbg !894
  store i64 %199, ptr %ptradd274, align 8, !dbg !894
  %200 = load i64, ptr %f264, align 8, !dbg !895
  store i64 %200, ptr %blockret265, align 8, !dbg !895
  br label %expr_block.exit275, !dbg !895

expr_block.exit275:                               ; preds = %if.exit272, %if.then269
  %201 = load i64, ptr %blockret265, align 8, !dbg !895
  store i64 %201, ptr %error_var237, align 8, !dbg !895
  br label %guard_block301, !dbg !895

next_if276:                                       ; preds = %next_if
  br label %switch.default277, !dbg !895

switch.default277:                                ; preds = %next_if276
  %202 = load ptr, ptr %f238, align 8
  store ptr %202, ptr %self278, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f279, align 8
  %203 = load ptr, ptr %self278, align 8, !dbg !896
  %ptradd281 = getelementptr inbounds i8, ptr %203, i64 16, !dbg !896
  %ptradd282 = getelementptr inbounds i8, ptr %ptradd281, i64 24, !dbg !896
  %204 = load i64, ptr %ptradd282, align 8, !dbg !896
  %i2b283 = icmp ne i64 %204, 0, !dbg !896
  br i1 %i2b283, label %if.then284, label %if.exit287, !dbg !896

if.then284:                                       ; preds = %switch.default277
  %205 = load ptr, ptr %self278, align 8, !dbg !896
  %ptradd285 = getelementptr inbounds i8, ptr %205, i64 16, !dbg !896
  %ptradd286 = getelementptr inbounds i8, ptr %ptradd285, i64 24, !dbg !896
  %206 = load i64, ptr %ptradd286, align 8, !dbg !896
  store i64 %206, ptr %blockret280, align 8, !dbg !896
  br label %expr_block.exit290, !dbg !896

if.exit287:                                       ; preds = %switch.default277
  %207 = load ptr, ptr %self278, align 8, !dbg !900
  %ptradd288 = getelementptr inbounds i8, ptr %207, i64 16, !dbg !900
  %ptradd289 = getelementptr inbounds i8, ptr %ptradd288, i64 24, !dbg !900
  %208 = load i64, ptr %f279, align 8, !dbg !900
  store i64 %208, ptr %ptradd289, align 8, !dbg !900
  %209 = load i64, ptr %f279, align 8, !dbg !901
  store i64 %209, ptr %blockret280, align 8, !dbg !901
  br label %expr_block.exit290, !dbg !901

expr_block.exit290:                               ; preds = %if.exit287, %if.then284
  %210 = load i64, ptr %blockret280, align 8, !dbg !901
  store i64 %210, ptr %err, align 8, !dbg !901
  %211 = load ptr, ptr %f238, align 8
  store %"char[]" { ptr @.str.133, i64 9 }, ptr %indirectarg293, align 8
  %212 = call i64 @std.io.Formatter.out_substr(ptr %retparam292, ptr %211, ptr align 8 %indirectarg293), !dbg !902
  %not_err294 = icmp eq i64 %212, 0, !dbg !902
  %213 = call i1 @llvm.expect.i1(i1 %not_err294, i1 true), !dbg !902
  br i1 %213, label %after_check296, label %assign_optional295, !dbg !902

assign_optional295:                               ; preds = %expr_block.exit290
  store i64 %212, ptr %error_var291, align 8, !dbg !902
  br label %guard_block297, !dbg !902

after_check296:                                   ; preds = %expr_block.exit290
  br label %noerr_block298, !dbg !902

guard_block297:                                   ; preds = %assign_optional295
  %214 = load i64, ptr %error_var291, align 8, !dbg !902
  store i64 %214, ptr %error_var237, align 8, !dbg !902
  br label %guard_block301, !dbg !902

noerr_block298:                                   ; preds = %after_check296
  %215 = load i64, ptr %err, align 8, !dbg !903
  store i64 %215, ptr %error_var237, align 8, !dbg !903
  br label %guard_block301, !dbg !903

if.exit300:                                       ; preds = %end_block255
  br label %noerr_block302, !dbg !904

guard_block301:                                   ; preds = %noerr_block298, %guard_block297, %expr_block.exit275
  %216 = load i64, ptr %error_var237, align 8, !dbg !904
  ret i64 %216, !dbg !904

noerr_block302:                                   ; preds = %if.exit300
  %217 = load i64, ptr %len, align 8, !dbg !904
  %add303 = add i64 %180, %217, !dbg !880
  store i64 %add303, ptr %total_len, align 8, !dbg !880
  br label %loop.inc, !dbg !905

switch.case304:                                   ; preds = %switch.entry222
  %218 = load ptr, ptr %self, align 8, !dbg !906
  %ptradd305 = getelementptr inbounds i8, ptr %218, i64 16, !dbg !906
  %219 = load i32, ptr %ptradd305, align 8, !dbg !906
  %220 = and i32 %219, -33, !dbg !906
  %221 = or i32 %220, 32, !dbg !906
  store i32 %221, ptr %ptradd305, align 8, !dbg !906
  br label %switch.case306, !dbg !908

switch.case306:                                   ; preds = %switch.entry222, %switch.case304
  %222 = load i64, ptr %total_len, align 8, !dbg !909
  %223 = load ptr, ptr %self, align 8
  store ptr %223, ptr %f308, align 8
    #dbg_declare(ptr %len310, !911, !DIExpression(), !913)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg313, ptr align 8 %current, i32 16, i1 false)
  %224 = call i64 @std.io.float_from_any(ptr %retparam312, ptr align 8 %indirectarg313), !dbg !914
  %not_err314 = icmp eq i64 %224, 0, !dbg !914
  %225 = call i1 @llvm.expect.i1(i1 %not_err314, i1 true), !dbg !914
  br i1 %225, label %after_check316, label %assign_optional315, !dbg !914

assign_optional315:                               ; preds = %switch.case306
  store i64 %224, ptr %len.f311, align 8, !dbg !914
  br label %after_assign321, !dbg !914

after_check316:                                   ; preds = %switch.case306
  %226 = load ptr, ptr %self, align 8
  %227 = load double, ptr %retparam312, align 8
  %228 = call i64 @std.io.Formatter.ftoa(ptr %retparam317, ptr %226, double %227), !dbg !913
  %not_err318 = icmp eq i64 %228, 0, !dbg !913
  %229 = call i1 @llvm.expect.i1(i1 %not_err318, i1 true), !dbg !913
  br i1 %229, label %after_check320, label %assign_optional319, !dbg !913

assign_optional319:                               ; preds = %after_check316
  store i64 %228, ptr %len.f311, align 8, !dbg !913
  br label %after_assign321, !dbg !913

after_check320:                                   ; preds = %after_check316
  %230 = load i64, ptr %retparam317, align 8, !dbg !913
  store i64 %230, ptr %len310, align 8, !dbg !913
  store i64 0, ptr %len.f311, align 8, !dbg !913
  br label %after_assign321, !dbg !913

after_assign321:                                  ; preds = %after_check320, %assign_optional319, %assign_optional315
    #dbg_declare(ptr %err322, !915, !DIExpression(), !916)
  br label %testblock323, !dbg !916

testblock323:                                     ; preds = %after_assign321
  %optval324 = load i64, ptr %len.f311, align 8, !dbg !916
  %not_err325 = icmp eq i64 %optval324, 0, !dbg !916
  %231 = call i1 @llvm.expect.i1(i1 %not_err325, i1 true), !dbg !916
  br i1 %231, label %after_check327, label %assign_optional326, !dbg !916

assign_optional326:                               ; preds = %testblock323
  store i64 %optval324, ptr %err322, align 8, !dbg !916
  br label %end_block328, !dbg !916

after_check327:                                   ; preds = %testblock323
  store i64 0, ptr %err322, align 8, !dbg !916
  br label %end_block328, !dbg !916

end_block328:                                     ; preds = %after_check327, %assign_optional326
  %232 = load i64, ptr %err322, align 8, !dbg !916
  %neq329 = icmp ne i64 %232, 0, !dbg !916
  br i1 %neq329, label %if.then330, label %if.exit374, !dbg !916

if.then330:                                       ; preds = %end_block328
  store i64 %232, ptr %switch331, align 8
  br label %switch.entry332

switch.entry332:                                  ; preds = %if.then330
  %233 = load i64, ptr %switch331, align 8
  %eq333 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %233, !dbg !917
  br i1 %eq333, label %switch.case336, label %next_if334, !dbg !917

next_if334:                                       ; preds = %switch.entry332
  %eq335 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %233, !dbg !918
  br i1 %eq335, label %switch.case336, label %next_if350, !dbg !918

switch.case336:                                   ; preds = %next_if334, %switch.entry332
  %234 = load ptr, ptr %f308, align 8
  store ptr %234, ptr %self337, align 8
  %235 = load i64, ptr %err322, align 8
  store i64 %235, ptr %f338, align 8
  %236 = load ptr, ptr %self337, align 8, !dbg !919
  %ptradd340 = getelementptr inbounds i8, ptr %236, i64 16, !dbg !919
  %ptradd341 = getelementptr inbounds i8, ptr %ptradd340, i64 24, !dbg !919
  %237 = load i64, ptr %ptradd341, align 8, !dbg !919
  %i2b342 = icmp ne i64 %237, 0, !dbg !919
  br i1 %i2b342, label %if.then343, label %if.exit346, !dbg !919

if.then343:                                       ; preds = %switch.case336
  %238 = load ptr, ptr %self337, align 8, !dbg !919
  %ptradd344 = getelementptr inbounds i8, ptr %238, i64 16, !dbg !919
  %ptradd345 = getelementptr inbounds i8, ptr %ptradd344, i64 24, !dbg !919
  %239 = load i64, ptr %ptradd345, align 8, !dbg !919
  store i64 %239, ptr %blockret339, align 8, !dbg !919
  br label %expr_block.exit349, !dbg !919

if.exit346:                                       ; preds = %switch.case336
  %240 = load ptr, ptr %self337, align 8, !dbg !923
  %ptradd347 = getelementptr inbounds i8, ptr %240, i64 16, !dbg !923
  %ptradd348 = getelementptr inbounds i8, ptr %ptradd347, i64 24, !dbg !923
  %241 = load i64, ptr %f338, align 8, !dbg !923
  store i64 %241, ptr %ptradd348, align 8, !dbg !923
  %242 = load i64, ptr %f338, align 8, !dbg !924
  store i64 %242, ptr %blockret339, align 8, !dbg !924
  br label %expr_block.exit349, !dbg !924

expr_block.exit349:                               ; preds = %if.exit346, %if.then343
  %243 = load i64, ptr %blockret339, align 8, !dbg !924
  store i64 %243, ptr %error_var307, align 8, !dbg !924
  br label %guard_block375, !dbg !924

next_if350:                                       ; preds = %next_if334
  br label %switch.default351, !dbg !924

switch.default351:                                ; preds = %next_if350
  %244 = load ptr, ptr %f308, align 8
  store ptr %244, ptr %self352, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f353, align 8
  %245 = load ptr, ptr %self352, align 8, !dbg !925
  %ptradd355 = getelementptr inbounds i8, ptr %245, i64 16, !dbg !925
  %ptradd356 = getelementptr inbounds i8, ptr %ptradd355, i64 24, !dbg !925
  %246 = load i64, ptr %ptradd356, align 8, !dbg !925
  %i2b357 = icmp ne i64 %246, 0, !dbg !925
  br i1 %i2b357, label %if.then358, label %if.exit361, !dbg !925

if.then358:                                       ; preds = %switch.default351
  %247 = load ptr, ptr %self352, align 8, !dbg !925
  %ptradd359 = getelementptr inbounds i8, ptr %247, i64 16, !dbg !925
  %ptradd360 = getelementptr inbounds i8, ptr %ptradd359, i64 24, !dbg !925
  %248 = load i64, ptr %ptradd360, align 8, !dbg !925
  store i64 %248, ptr %blockret354, align 8, !dbg !925
  br label %expr_block.exit364, !dbg !925

if.exit361:                                       ; preds = %switch.default351
  %249 = load ptr, ptr %self352, align 8, !dbg !929
  %ptradd362 = getelementptr inbounds i8, ptr %249, i64 16, !dbg !929
  %ptradd363 = getelementptr inbounds i8, ptr %ptradd362, i64 24, !dbg !929
  %250 = load i64, ptr %f353, align 8, !dbg !929
  store i64 %250, ptr %ptradd363, align 8, !dbg !929
  %251 = load i64, ptr %f353, align 8, !dbg !930
  store i64 %251, ptr %blockret354, align 8, !dbg !930
  br label %expr_block.exit364, !dbg !930

expr_block.exit364:                               ; preds = %if.exit361, %if.then358
  %252 = load i64, ptr %blockret354, align 8, !dbg !930
  store i64 %252, ptr %err322, align 8, !dbg !930
  %253 = load ptr, ptr %f308, align 8
  store %"char[]" { ptr @.str.134, i64 9 }, ptr %indirectarg367, align 8
  %254 = call i64 @std.io.Formatter.out_substr(ptr %retparam366, ptr %253, ptr align 8 %indirectarg367), !dbg !931
  %not_err368 = icmp eq i64 %254, 0, !dbg !931
  %255 = call i1 @llvm.expect.i1(i1 %not_err368, i1 true), !dbg !931
  br i1 %255, label %after_check370, label %assign_optional369, !dbg !931

assign_optional369:                               ; preds = %expr_block.exit364
  store i64 %254, ptr %error_var365, align 8, !dbg !931
  br label %guard_block371, !dbg !931

after_check370:                                   ; preds = %expr_block.exit364
  br label %noerr_block372, !dbg !931

guard_block371:                                   ; preds = %assign_optional369
  %256 = load i64, ptr %error_var365, align 8, !dbg !931
  store i64 %256, ptr %error_var307, align 8, !dbg !931
  br label %guard_block375, !dbg !931

noerr_block372:                                   ; preds = %after_check370
  %257 = load i64, ptr %err322, align 8, !dbg !932
  store i64 %257, ptr %error_var307, align 8, !dbg !932
  br label %guard_block375, !dbg !932

if.exit374:                                       ; preds = %end_block328
  br label %noerr_block376, !dbg !933

guard_block375:                                   ; preds = %noerr_block372, %guard_block371, %expr_block.exit349
  %258 = load i64, ptr %error_var307, align 8, !dbg !933
  ret i64 %258, !dbg !933

noerr_block376:                                   ; preds = %if.exit374
  %259 = load i64, ptr %len310, align 8, !dbg !933
  %add377 = add i64 %222, %259, !dbg !909
  store i64 %add377, ptr %total_len, align 8, !dbg !909
  br label %loop.inc, !dbg !934

switch.case378:                                   ; preds = %switch.entry222
  %260 = load ptr, ptr %self, align 8, !dbg !935
  %ptradd379 = getelementptr inbounds i8, ptr %260, i64 16, !dbg !935
  %261 = load i32, ptr %ptradd379, align 8, !dbg !935
  %262 = and i32 %261, -33, !dbg !935
  %263 = or i32 %262, 32, !dbg !935
  store i32 %263, ptr %ptradd379, align 8, !dbg !935
  br label %switch.case380, !dbg !937

switch.case380:                                   ; preds = %switch.entry222, %switch.case378
  %264 = load i64, ptr %total_len, align 8, !dbg !938
  %265 = load ptr, ptr %self, align 8
  store ptr %265, ptr %f382, align 8
    #dbg_declare(ptr %len384, !940, !DIExpression(), !942)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg387, ptr align 8 %current, i32 16, i1 false)
  %266 = call i64 @std.io.float_from_any(ptr %retparam386, ptr align 8 %indirectarg387), !dbg !943
  %not_err388 = icmp eq i64 %266, 0, !dbg !943
  %267 = call i1 @llvm.expect.i1(i1 %not_err388, i1 true), !dbg !943
  br i1 %267, label %after_check390, label %assign_optional389, !dbg !943

assign_optional389:                               ; preds = %switch.case380
  store i64 %266, ptr %len.f385, align 8, !dbg !943
  br label %after_assign395, !dbg !943

after_check390:                                   ; preds = %switch.case380
  %268 = load ptr, ptr %self, align 8
  %269 = load double, ptr %retparam386, align 8
  %270 = call i64 @std.io.Formatter.etoa(ptr %retparam391, ptr %268, double %269), !dbg !942
  %not_err392 = icmp eq i64 %270, 0, !dbg !942
  %271 = call i1 @llvm.expect.i1(i1 %not_err392, i1 true), !dbg !942
  br i1 %271, label %after_check394, label %assign_optional393, !dbg !942

assign_optional393:                               ; preds = %after_check390
  store i64 %270, ptr %len.f385, align 8, !dbg !942
  br label %after_assign395, !dbg !942

after_check394:                                   ; preds = %after_check390
  %272 = load i64, ptr %retparam391, align 8, !dbg !942
  store i64 %272, ptr %len384, align 8, !dbg !942
  store i64 0, ptr %len.f385, align 8, !dbg !942
  br label %after_assign395, !dbg !942

after_assign395:                                  ; preds = %after_check394, %assign_optional393, %assign_optional389
    #dbg_declare(ptr %err396, !944, !DIExpression(), !945)
  br label %testblock397, !dbg !945

testblock397:                                     ; preds = %after_assign395
  %optval398 = load i64, ptr %len.f385, align 8, !dbg !945
  %not_err399 = icmp eq i64 %optval398, 0, !dbg !945
  %273 = call i1 @llvm.expect.i1(i1 %not_err399, i1 true), !dbg !945
  br i1 %273, label %after_check401, label %assign_optional400, !dbg !945

assign_optional400:                               ; preds = %testblock397
  store i64 %optval398, ptr %err396, align 8, !dbg !945
  br label %end_block402, !dbg !945

after_check401:                                   ; preds = %testblock397
  store i64 0, ptr %err396, align 8, !dbg !945
  br label %end_block402, !dbg !945

end_block402:                                     ; preds = %after_check401, %assign_optional400
  %274 = load i64, ptr %err396, align 8, !dbg !945
  %neq403 = icmp ne i64 %274, 0, !dbg !945
  br i1 %neq403, label %if.then404, label %if.exit448, !dbg !945

if.then404:                                       ; preds = %end_block402
  store i64 %274, ptr %switch405, align 8
  br label %switch.entry406

switch.entry406:                                  ; preds = %if.then404
  %275 = load i64, ptr %switch405, align 8
  %eq407 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %275, !dbg !946
  br i1 %eq407, label %switch.case410, label %next_if408, !dbg !946

next_if408:                                       ; preds = %switch.entry406
  %eq409 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %275, !dbg !947
  br i1 %eq409, label %switch.case410, label %next_if424, !dbg !947

switch.case410:                                   ; preds = %next_if408, %switch.entry406
  %276 = load ptr, ptr %f382, align 8
  store ptr %276, ptr %self411, align 8
  %277 = load i64, ptr %err396, align 8
  store i64 %277, ptr %f412, align 8
  %278 = load ptr, ptr %self411, align 8, !dbg !948
  %ptradd414 = getelementptr inbounds i8, ptr %278, i64 16, !dbg !948
  %ptradd415 = getelementptr inbounds i8, ptr %ptradd414, i64 24, !dbg !948
  %279 = load i64, ptr %ptradd415, align 8, !dbg !948
  %i2b416 = icmp ne i64 %279, 0, !dbg !948
  br i1 %i2b416, label %if.then417, label %if.exit420, !dbg !948

if.then417:                                       ; preds = %switch.case410
  %280 = load ptr, ptr %self411, align 8, !dbg !948
  %ptradd418 = getelementptr inbounds i8, ptr %280, i64 16, !dbg !948
  %ptradd419 = getelementptr inbounds i8, ptr %ptradd418, i64 24, !dbg !948
  %281 = load i64, ptr %ptradd419, align 8, !dbg !948
  store i64 %281, ptr %blockret413, align 8, !dbg !948
  br label %expr_block.exit423, !dbg !948

if.exit420:                                       ; preds = %switch.case410
  %282 = load ptr, ptr %self411, align 8, !dbg !952
  %ptradd421 = getelementptr inbounds i8, ptr %282, i64 16, !dbg !952
  %ptradd422 = getelementptr inbounds i8, ptr %ptradd421, i64 24, !dbg !952
  %283 = load i64, ptr %f412, align 8, !dbg !952
  store i64 %283, ptr %ptradd422, align 8, !dbg !952
  %284 = load i64, ptr %f412, align 8, !dbg !953
  store i64 %284, ptr %blockret413, align 8, !dbg !953
  br label %expr_block.exit423, !dbg !953

expr_block.exit423:                               ; preds = %if.exit420, %if.then417
  %285 = load i64, ptr %blockret413, align 8, !dbg !953
  store i64 %285, ptr %error_var381, align 8, !dbg !953
  br label %guard_block449, !dbg !953

next_if424:                                       ; preds = %next_if408
  br label %switch.default425, !dbg !953

switch.default425:                                ; preds = %next_if424
  %286 = load ptr, ptr %f382, align 8
  store ptr %286, ptr %self426, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f427, align 8
  %287 = load ptr, ptr %self426, align 8, !dbg !954
  %ptradd429 = getelementptr inbounds i8, ptr %287, i64 16, !dbg !954
  %ptradd430 = getelementptr inbounds i8, ptr %ptradd429, i64 24, !dbg !954
  %288 = load i64, ptr %ptradd430, align 8, !dbg !954
  %i2b431 = icmp ne i64 %288, 0, !dbg !954
  br i1 %i2b431, label %if.then432, label %if.exit435, !dbg !954

if.then432:                                       ; preds = %switch.default425
  %289 = load ptr, ptr %self426, align 8, !dbg !954
  %ptradd433 = getelementptr inbounds i8, ptr %289, i64 16, !dbg !954
  %ptradd434 = getelementptr inbounds i8, ptr %ptradd433, i64 24, !dbg !954
  %290 = load i64, ptr %ptradd434, align 8, !dbg !954
  store i64 %290, ptr %blockret428, align 8, !dbg !954
  br label %expr_block.exit438, !dbg !954

if.exit435:                                       ; preds = %switch.default425
  %291 = load ptr, ptr %self426, align 8, !dbg !958
  %ptradd436 = getelementptr inbounds i8, ptr %291, i64 16, !dbg !958
  %ptradd437 = getelementptr inbounds i8, ptr %ptradd436, i64 24, !dbg !958
  %292 = load i64, ptr %f427, align 8, !dbg !958
  store i64 %292, ptr %ptradd437, align 8, !dbg !958
  %293 = load i64, ptr %f427, align 8, !dbg !959
  store i64 %293, ptr %blockret428, align 8, !dbg !959
  br label %expr_block.exit438, !dbg !959

expr_block.exit438:                               ; preds = %if.exit435, %if.then432
  %294 = load i64, ptr %blockret428, align 8, !dbg !959
  store i64 %294, ptr %err396, align 8, !dbg !959
  %295 = load ptr, ptr %f382, align 8
  store %"char[]" { ptr @.str.135, i64 9 }, ptr %indirectarg441, align 8
  %296 = call i64 @std.io.Formatter.out_substr(ptr %retparam440, ptr %295, ptr align 8 %indirectarg441), !dbg !960
  %not_err442 = icmp eq i64 %296, 0, !dbg !960
  %297 = call i1 @llvm.expect.i1(i1 %not_err442, i1 true), !dbg !960
  br i1 %297, label %after_check444, label %assign_optional443, !dbg !960

assign_optional443:                               ; preds = %expr_block.exit438
  store i64 %296, ptr %error_var439, align 8, !dbg !960
  br label %guard_block445, !dbg !960

after_check444:                                   ; preds = %expr_block.exit438
  br label %noerr_block446, !dbg !960

guard_block445:                                   ; preds = %assign_optional443
  %298 = load i64, ptr %error_var439, align 8, !dbg !960
  store i64 %298, ptr %error_var381, align 8, !dbg !960
  br label %guard_block449, !dbg !960

noerr_block446:                                   ; preds = %after_check444
  %299 = load i64, ptr %err396, align 8, !dbg !961
  store i64 %299, ptr %error_var381, align 8, !dbg !961
  br label %guard_block449, !dbg !961

if.exit448:                                       ; preds = %end_block402
  br label %noerr_block450, !dbg !962

guard_block449:                                   ; preds = %noerr_block446, %guard_block445, %expr_block.exit423
  %300 = load i64, ptr %error_var381, align 8, !dbg !962
  ret i64 %300, !dbg !962

noerr_block450:                                   ; preds = %if.exit448
  %301 = load i64, ptr %len384, align 8, !dbg !962
  %add451 = add i64 %264, %301, !dbg !938
  store i64 %add451, ptr %total_len, align 8, !dbg !938
  br label %loop.inc, !dbg !963

switch.case452:                                   ; preds = %switch.entry222
  %302 = load ptr, ptr %self, align 8, !dbg !964
  %ptradd453 = getelementptr inbounds i8, ptr %302, i64 16, !dbg !964
  %303 = load i32, ptr %ptradd453, align 8, !dbg !964
  %304 = and i32 %303, -33, !dbg !964
  %305 = or i32 %304, 32, !dbg !964
  store i32 %305, ptr %ptradd453, align 8, !dbg !964
  br label %switch.case454, !dbg !966

switch.case454:                                   ; preds = %switch.entry222, %switch.case452
  %306 = load i64, ptr %total_len, align 8, !dbg !967
  %307 = load ptr, ptr %self, align 8
  store ptr %307, ptr %f456, align 8
    #dbg_declare(ptr %len458, !969, !DIExpression(), !971)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg461, ptr align 8 %current, i32 16, i1 false)
  %308 = call i64 @std.io.float_from_any(ptr %retparam460, ptr align 8 %indirectarg461), !dbg !972
  %not_err462 = icmp eq i64 %308, 0, !dbg !972
  %309 = call i1 @llvm.expect.i1(i1 %not_err462, i1 true), !dbg !972
  br i1 %309, label %after_check464, label %assign_optional463, !dbg !972

assign_optional463:                               ; preds = %switch.case454
  store i64 %308, ptr %len.f459, align 8, !dbg !972
  br label %after_assign469, !dbg !972

after_check464:                                   ; preds = %switch.case454
  %310 = load ptr, ptr %self, align 8
  %311 = load double, ptr %retparam460, align 8
  %312 = call i64 @std.io.Formatter.gtoa(ptr %retparam465, ptr %310, double %311), !dbg !971
  %not_err466 = icmp eq i64 %312, 0, !dbg !971
  %313 = call i1 @llvm.expect.i1(i1 %not_err466, i1 true), !dbg !971
  br i1 %313, label %after_check468, label %assign_optional467, !dbg !971

assign_optional467:                               ; preds = %after_check464
  store i64 %312, ptr %len.f459, align 8, !dbg !971
  br label %after_assign469, !dbg !971

after_check468:                                   ; preds = %after_check464
  %314 = load i64, ptr %retparam465, align 8, !dbg !971
  store i64 %314, ptr %len458, align 8, !dbg !971
  store i64 0, ptr %len.f459, align 8, !dbg !971
  br label %after_assign469, !dbg !971

after_assign469:                                  ; preds = %after_check468, %assign_optional467, %assign_optional463
    #dbg_declare(ptr %err470, !973, !DIExpression(), !974)
  br label %testblock471, !dbg !974

testblock471:                                     ; preds = %after_assign469
  %optval472 = load i64, ptr %len.f459, align 8, !dbg !974
  %not_err473 = icmp eq i64 %optval472, 0, !dbg !974
  %315 = call i1 @llvm.expect.i1(i1 %not_err473, i1 true), !dbg !974
  br i1 %315, label %after_check475, label %assign_optional474, !dbg !974

assign_optional474:                               ; preds = %testblock471
  store i64 %optval472, ptr %err470, align 8, !dbg !974
  br label %end_block476, !dbg !974

after_check475:                                   ; preds = %testblock471
  store i64 0, ptr %err470, align 8, !dbg !974
  br label %end_block476, !dbg !974

end_block476:                                     ; preds = %after_check475, %assign_optional474
  %316 = load i64, ptr %err470, align 8, !dbg !974
  %neq477 = icmp ne i64 %316, 0, !dbg !974
  br i1 %neq477, label %if.then478, label %if.exit522, !dbg !974

if.then478:                                       ; preds = %end_block476
  store i64 %316, ptr %switch479, align 8
  br label %switch.entry480

switch.entry480:                                  ; preds = %if.then478
  %317 = load i64, ptr %switch479, align 8
  %eq481 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %317, !dbg !975
  br i1 %eq481, label %switch.case484, label %next_if482, !dbg !975

next_if482:                                       ; preds = %switch.entry480
  %eq483 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %317, !dbg !976
  br i1 %eq483, label %switch.case484, label %next_if498, !dbg !976

switch.case484:                                   ; preds = %next_if482, %switch.entry480
  %318 = load ptr, ptr %f456, align 8
  store ptr %318, ptr %self485, align 8
  %319 = load i64, ptr %err470, align 8
  store i64 %319, ptr %f486, align 8
  %320 = load ptr, ptr %self485, align 8, !dbg !977
  %ptradd488 = getelementptr inbounds i8, ptr %320, i64 16, !dbg !977
  %ptradd489 = getelementptr inbounds i8, ptr %ptradd488, i64 24, !dbg !977
  %321 = load i64, ptr %ptradd489, align 8, !dbg !977
  %i2b490 = icmp ne i64 %321, 0, !dbg !977
  br i1 %i2b490, label %if.then491, label %if.exit494, !dbg !977

if.then491:                                       ; preds = %switch.case484
  %322 = load ptr, ptr %self485, align 8, !dbg !977
  %ptradd492 = getelementptr inbounds i8, ptr %322, i64 16, !dbg !977
  %ptradd493 = getelementptr inbounds i8, ptr %ptradd492, i64 24, !dbg !977
  %323 = load i64, ptr %ptradd493, align 8, !dbg !977
  store i64 %323, ptr %blockret487, align 8, !dbg !977
  br label %expr_block.exit497, !dbg !977

if.exit494:                                       ; preds = %switch.case484
  %324 = load ptr, ptr %self485, align 8, !dbg !981
  %ptradd495 = getelementptr inbounds i8, ptr %324, i64 16, !dbg !981
  %ptradd496 = getelementptr inbounds i8, ptr %ptradd495, i64 24, !dbg !981
  %325 = load i64, ptr %f486, align 8, !dbg !981
  store i64 %325, ptr %ptradd496, align 8, !dbg !981
  %326 = load i64, ptr %f486, align 8, !dbg !982
  store i64 %326, ptr %blockret487, align 8, !dbg !982
  br label %expr_block.exit497, !dbg !982

expr_block.exit497:                               ; preds = %if.exit494, %if.then491
  %327 = load i64, ptr %blockret487, align 8, !dbg !982
  store i64 %327, ptr %error_var455, align 8, !dbg !982
  br label %guard_block523, !dbg !982

next_if498:                                       ; preds = %next_if482
  br label %switch.default499, !dbg !982

switch.default499:                                ; preds = %next_if498
  %328 = load ptr, ptr %f456, align 8
  store ptr %328, ptr %self500, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f501, align 8
  %329 = load ptr, ptr %self500, align 8, !dbg !983
  %ptradd503 = getelementptr inbounds i8, ptr %329, i64 16, !dbg !983
  %ptradd504 = getelementptr inbounds i8, ptr %ptradd503, i64 24, !dbg !983
  %330 = load i64, ptr %ptradd504, align 8, !dbg !983
  %i2b505 = icmp ne i64 %330, 0, !dbg !983
  br i1 %i2b505, label %if.then506, label %if.exit509, !dbg !983

if.then506:                                       ; preds = %switch.default499
  %331 = load ptr, ptr %self500, align 8, !dbg !983
  %ptradd507 = getelementptr inbounds i8, ptr %331, i64 16, !dbg !983
  %ptradd508 = getelementptr inbounds i8, ptr %ptradd507, i64 24, !dbg !983
  %332 = load i64, ptr %ptradd508, align 8, !dbg !983
  store i64 %332, ptr %blockret502, align 8, !dbg !983
  br label %expr_block.exit512, !dbg !983

if.exit509:                                       ; preds = %switch.default499
  %333 = load ptr, ptr %self500, align 8, !dbg !987
  %ptradd510 = getelementptr inbounds i8, ptr %333, i64 16, !dbg !987
  %ptradd511 = getelementptr inbounds i8, ptr %ptradd510, i64 24, !dbg !987
  %334 = load i64, ptr %f501, align 8, !dbg !987
  store i64 %334, ptr %ptradd511, align 8, !dbg !987
  %335 = load i64, ptr %f501, align 8, !dbg !988
  store i64 %335, ptr %blockret502, align 8, !dbg !988
  br label %expr_block.exit512, !dbg !988

expr_block.exit512:                               ; preds = %if.exit509, %if.then506
  %336 = load i64, ptr %blockret502, align 8, !dbg !988
  store i64 %336, ptr %err470, align 8, !dbg !988
  %337 = load ptr, ptr %f456, align 8
  store %"char[]" { ptr @.str.136, i64 9 }, ptr %indirectarg515, align 8
  %338 = call i64 @std.io.Formatter.out_substr(ptr %retparam514, ptr %337, ptr align 8 %indirectarg515), !dbg !989
  %not_err516 = icmp eq i64 %338, 0, !dbg !989
  %339 = call i1 @llvm.expect.i1(i1 %not_err516, i1 true), !dbg !989
  br i1 %339, label %after_check518, label %assign_optional517, !dbg !989

assign_optional517:                               ; preds = %expr_block.exit512
  store i64 %338, ptr %error_var513, align 8, !dbg !989
  br label %guard_block519, !dbg !989

after_check518:                                   ; preds = %expr_block.exit512
  br label %noerr_block520, !dbg !989

guard_block519:                                   ; preds = %assign_optional517
  %340 = load i64, ptr %error_var513, align 8, !dbg !989
  store i64 %340, ptr %error_var455, align 8, !dbg !989
  br label %guard_block523, !dbg !989

noerr_block520:                                   ; preds = %after_check518
  %341 = load i64, ptr %err470, align 8, !dbg !990
  store i64 %341, ptr %error_var455, align 8, !dbg !990
  br label %guard_block523, !dbg !990

if.exit522:                                       ; preds = %end_block476
  br label %noerr_block524, !dbg !991

guard_block523:                                   ; preds = %noerr_block520, %guard_block519, %expr_block.exit497
  %342 = load i64, ptr %error_var455, align 8, !dbg !991
  ret i64 %342, !dbg !991

noerr_block524:                                   ; preds = %if.exit522
  %343 = load i64, ptr %len458, align 8, !dbg !991
  %add525 = add i64 %306, %343, !dbg !967
  store i64 %add525, ptr %total_len, align 8, !dbg !967
  br label %loop.inc, !dbg !992

switch.case526:                                   ; preds = %switch.entry222
  %344 = load i64, ptr %total_len, align 8, !dbg !993
  %345 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg529, ptr align 8 %current, i32 16, i1 false)
  %346 = call i64 @std.io.Formatter.out_char(ptr %retparam528, ptr %345, ptr align 8 %indirectarg529), !dbg !993
  %not_err530 = icmp eq i64 %346, 0, !dbg !993
  %347 = call i1 @llvm.expect.i1(i1 %not_err530, i1 true), !dbg !993
  br i1 %347, label %after_check532, label %assign_optional531, !dbg !993

assign_optional531:                               ; preds = %switch.case526
  store i64 %346, ptr %error_var527, align 8, !dbg !993
  br label %guard_block533, !dbg !993

after_check532:                                   ; preds = %switch.case526
  br label %noerr_block534, !dbg !993

guard_block533:                                   ; preds = %assign_optional531
  %348 = load i64, ptr %error_var527, align 8, !dbg !993
  ret i64 %348, !dbg !993

noerr_block534:                                   ; preds = %after_check532
  %349 = load i64, ptr %retparam528, align 8, !dbg !993
  %add535 = add i64 %344, %349, !dbg !993
  store i64 %add535, ptr %total_len, align 8, !dbg !993
  br label %loop.inc, !dbg !995

switch.case536:                                   ; preds = %switch.entry222
  %350 = load ptr, ptr %self, align 8, !dbg !996
  %ptradd537 = getelementptr inbounds i8, ptr %350, i64 16, !dbg !996
  %351 = load i32, ptr %ptradd537, align 8, !dbg !996
  %lshrl = lshr i32 %351, 1, !dbg !996
  %352 = and i32 1, %lshrl, !dbg !996
  %trunc = trunc i32 %352 to i8, !dbg !996
  %353 = trunc i8 %trunc to i1, !dbg !996
  br i1 %353, label %if.then538, label %if.exit559, !dbg !996

if.then538:                                       ; preds = %switch.case536
    #dbg_declare(ptr %len539, !998, !DIExpression(), !1000)
  %354 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg542, ptr align 8 %current, i32 16, i1 false)
  %355 = call i64 @std.io.Formatter.out_str(ptr %retparam541, ptr %354, ptr align 8 %indirectarg542), !dbg !1000
  %not_err543 = icmp eq i64 %355, 0, !dbg !1000
  %356 = call i1 @llvm.expect.i1(i1 %not_err543, i1 true), !dbg !1000
  br i1 %356, label %after_check545, label %assign_optional544, !dbg !1000

assign_optional544:                               ; preds = %if.then538
  store i64 %355, ptr %error_var540, align 8, !dbg !1000
  br label %guard_block546, !dbg !1000

after_check545:                                   ; preds = %if.then538
  br label %noerr_block547, !dbg !1000

guard_block546:                                   ; preds = %assign_optional544
  %357 = load i64, ptr %error_var540, align 8, !dbg !1000
  ret i64 %357, !dbg !1000

noerr_block547:                                   ; preds = %after_check545
  %358 = load i64, ptr %retparam541, align 8, !dbg !1000
  store i64 %358, ptr %len539, align 8, !dbg !1000
  %359 = load i64, ptr %total_len, align 8, !dbg !1001
  %360 = load i64, ptr %len539, align 8, !dbg !1001
  %add548 = add i64 %359, %360, !dbg !1001
  store i64 %add548, ptr %total_len, align 8, !dbg !1001
  %361 = load i64, ptr %total_len, align 8, !dbg !1002
  %362 = load ptr, ptr %self, align 8, !dbg !1002
  %ptradd550 = getelementptr inbounds i8, ptr %362, i64 16, !dbg !1002
  %ptradd551 = getelementptr inbounds i8, ptr %ptradd550, i64 4, !dbg !1002
  %363 = load i32, ptr %ptradd551, align 4, !dbg !1002
  %zext = zext i32 %363 to i64, !dbg !1002
  %364 = load i64, ptr %len539, align 8, !dbg !1002
  %365 = load ptr, ptr %self, align 8
  %366 = call i64 @std.io.Formatter.pad(ptr %retparam552, ptr %365, i8 32, i64 %zext, i64 %364) #5, !dbg !1002
  %not_err553 = icmp eq i64 %366, 0, !dbg !1002
  %367 = call i1 @llvm.expect.i1(i1 %not_err553, i1 true), !dbg !1002
  br i1 %367, label %after_check555, label %assign_optional554, !dbg !1002

assign_optional554:                               ; preds = %noerr_block547
  store i64 %366, ptr %error_var549, align 8, !dbg !1002
  br label %guard_block556, !dbg !1002

after_check555:                                   ; preds = %noerr_block547
  br label %noerr_block557, !dbg !1002

guard_block556:                                   ; preds = %assign_optional554
  %368 = load i64, ptr %error_var549, align 8, !dbg !1002
  ret i64 %368, !dbg !1002

noerr_block557:                                   ; preds = %after_check555
  %369 = load i64, ptr %retparam552, align 8, !dbg !1002
  %add558 = add i64 %361, %369, !dbg !1002
  store i64 %add558, ptr %total_len, align 8, !dbg !1002
  br label %loop.inc, !dbg !1003

if.exit559:                                       ; preds = %switch.case536
    #dbg_declare(ptr %out_fn, !1004, !DIExpression(), !1005)
  %370 = load ptr, ptr %self, align 8, !dbg !1005
  %ptradd560 = getelementptr inbounds i8, ptr %370, i64 8, !dbg !1005
  %371 = load ptr, ptr %ptradd560, align 8, !dbg !1005
  store ptr %371, ptr %out_fn, align 8, !dbg !1005
  %372 = load ptr, ptr %self, align 8, !dbg !1006
  %ptradd561 = getelementptr inbounds i8, ptr %372, i64 8, !dbg !1006
  store ptr @std.io.out_null_fn, ptr %ptradd561, align 8, !dbg !1006
    #dbg_declare(ptr %len562, !1007, !DIExpression(), !1008)
  %373 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg565, ptr align 8 %current, i32 16, i1 false)
  %374 = call i64 @std.io.Formatter.out_str(ptr %retparam564, ptr %373, ptr align 8 %indirectarg565), !dbg !1008
  %not_err566 = icmp eq i64 %374, 0, !dbg !1008
  %375 = call i1 @llvm.expect.i1(i1 %not_err566, i1 true), !dbg !1008
  br i1 %375, label %after_check568, label %assign_optional567, !dbg !1008

assign_optional567:                               ; preds = %if.exit559
  store i64 %374, ptr %error_var563, align 8, !dbg !1008
  br label %guard_block569, !dbg !1008

after_check568:                                   ; preds = %if.exit559
  br label %noerr_block570, !dbg !1008

guard_block569:                                   ; preds = %assign_optional567
  %376 = load i64, ptr %error_var563, align 8, !dbg !1008
  ret i64 %376, !dbg !1008

noerr_block570:                                   ; preds = %after_check568
  %377 = load i64, ptr %retparam564, align 8, !dbg !1008
  store i64 %377, ptr %len562, align 8, !dbg !1008
  %378 = load ptr, ptr %self, align 8, !dbg !1009
  %ptradd571 = getelementptr inbounds i8, ptr %378, i64 8, !dbg !1009
  %379 = load ptr, ptr %out_fn, align 8, !dbg !1009
  store ptr %379, ptr %ptradd571, align 8, !dbg !1009
  %380 = load i64, ptr %total_len, align 8, !dbg !1010
  %381 = load ptr, ptr %self, align 8, !dbg !1010
  %ptradd573 = getelementptr inbounds i8, ptr %381, i64 16, !dbg !1010
  %ptradd574 = getelementptr inbounds i8, ptr %ptradd573, i64 4, !dbg !1010
  %382 = load i32, ptr %ptradd574, align 4, !dbg !1010
  %zext575 = zext i32 %382 to i64, !dbg !1010
  %383 = load i64, ptr %len562, align 8, !dbg !1010
  %384 = load ptr, ptr %self, align 8
  %385 = call i64 @std.io.Formatter.pad(ptr %retparam576, ptr %384, i8 32, i64 %zext575, i64 %383) #5, !dbg !1010
  %not_err577 = icmp eq i64 %385, 0, !dbg !1010
  %386 = call i1 @llvm.expect.i1(i1 %not_err577, i1 true), !dbg !1010
  br i1 %386, label %after_check579, label %assign_optional578, !dbg !1010

assign_optional578:                               ; preds = %noerr_block570
  store i64 %385, ptr %error_var572, align 8, !dbg !1010
  br label %guard_block580, !dbg !1010

after_check579:                                   ; preds = %noerr_block570
  br label %noerr_block581, !dbg !1010

guard_block580:                                   ; preds = %assign_optional578
  %387 = load i64, ptr %error_var572, align 8, !dbg !1010
  ret i64 %387, !dbg !1010

noerr_block581:                                   ; preds = %after_check579
  %388 = load i64, ptr %retparam576, align 8, !dbg !1010
  %add582 = add i64 %380, %388, !dbg !1010
  store i64 %add582, ptr %total_len, align 8, !dbg !1010
  %389 = load i64, ptr %total_len, align 8, !dbg !1011
  %390 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg585, ptr align 8 %current, i32 16, i1 false)
  %391 = call i64 @std.io.Formatter.out_str(ptr %retparam584, ptr %390, ptr align 8 %indirectarg585), !dbg !1011
  %not_err586 = icmp eq i64 %391, 0, !dbg !1011
  %392 = call i1 @llvm.expect.i1(i1 %not_err586, i1 true), !dbg !1011
  br i1 %392, label %after_check588, label %assign_optional587, !dbg !1011

assign_optional587:                               ; preds = %noerr_block581
  store i64 %391, ptr %error_var583, align 8, !dbg !1011
  br label %guard_block589, !dbg !1011

after_check588:                                   ; preds = %noerr_block581
  br label %noerr_block590, !dbg !1011

guard_block589:                                   ; preds = %assign_optional587
  %393 = load i64, ptr %error_var583, align 8, !dbg !1011
  ret i64 %393, !dbg !1011

noerr_block590:                                   ; preds = %after_check588
  %394 = load i64, ptr %retparam584, align 8, !dbg !1011
  %add591 = add i64 %389, %394, !dbg !1011
  store i64 %add591, ptr %total_len, align 8, !dbg !1011
  br label %loop.inc, !dbg !1012

switch.case592:                                   ; preds = %switch.entry222
  %395 = load ptr, ptr %self, align 8, !dbg !1013
  %ptradd593 = getelementptr inbounds i8, ptr %395, i64 16, !dbg !1013
  %396 = load i32, ptr %ptradd593, align 8, !dbg !1013
  %397 = and i32 %396, -2, !dbg !1013
  %398 = or i32 %397, 1, !dbg !1013
  store i32 %398, ptr %ptradd593, align 8, !dbg !1013
  %399 = load ptr, ptr %self, align 8, !dbg !1015
  %ptradd594 = getelementptr inbounds i8, ptr %399, i64 16, !dbg !1015
  %400 = load i32, ptr %ptradd594, align 8, !dbg !1015
  %401 = and i32 %400, -17, !dbg !1015
  %402 = or i32 %401, 16, !dbg !1015
  store i32 %402, ptr %ptradd594, align 8, !dbg !1015
  store i32 16, ptr %base, align 4, !dbg !1016
  br label %switch.exit618, !dbg !1016

switch.default595:                                ; preds = %switch.entry222
  %403 = load ptr, ptr %self, align 8
  store ptr %403, ptr %self596, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %f597, align 8
  %404 = load ptr, ptr %self596, align 8, !dbg !1017
  %ptradd599 = getelementptr inbounds i8, ptr %404, i64 16, !dbg !1017
  %ptradd600 = getelementptr inbounds i8, ptr %ptradd599, i64 24, !dbg !1017
  %405 = load i64, ptr %ptradd600, align 8, !dbg !1017
  %i2b601 = icmp ne i64 %405, 0, !dbg !1017
  br i1 %i2b601, label %if.then602, label %if.exit605, !dbg !1017

if.then602:                                       ; preds = %switch.default595
  %406 = load ptr, ptr %self596, align 8, !dbg !1017
  %ptradd603 = getelementptr inbounds i8, ptr %406, i64 16, !dbg !1017
  %ptradd604 = getelementptr inbounds i8, ptr %ptradd603, i64 24, !dbg !1017
  %407 = load i64, ptr %ptradd604, align 8, !dbg !1017
  store i64 %407, ptr %blockret598, align 8, !dbg !1017
  br label %expr_block.exit608, !dbg !1017

if.exit605:                                       ; preds = %switch.default595
  %408 = load ptr, ptr %self596, align 8, !dbg !1021
  %ptradd606 = getelementptr inbounds i8, ptr %408, i64 16, !dbg !1021
  %ptradd607 = getelementptr inbounds i8, ptr %ptradd606, i64 24, !dbg !1021
  %409 = load i64, ptr %f597, align 8, !dbg !1021
  store i64 %409, ptr %ptradd607, align 8, !dbg !1021
  %410 = load i64, ptr %f597, align 8, !dbg !1022
  store i64 %410, ptr %blockret598, align 8, !dbg !1022
  br label %expr_block.exit608, !dbg !1022

expr_block.exit608:                               ; preds = %if.exit605, %if.then602
  %411 = load i64, ptr %total_len, align 8, !dbg !1023
  %412 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.137, i64 12 }, ptr %indirectarg611, align 8
  %413 = call i64 @std.io.Formatter.out_substr(ptr %retparam610, ptr %412, ptr align 8 %indirectarg611), !dbg !1023
  %not_err612 = icmp eq i64 %413, 0, !dbg !1023
  %414 = call i1 @llvm.expect.i1(i1 %not_err612, i1 true), !dbg !1023
  br i1 %414, label %after_check614, label %assign_optional613, !dbg !1023

assign_optional613:                               ; preds = %expr_block.exit608
  store i64 %413, ptr %error_var609, align 8, !dbg !1023
  br label %guard_block615, !dbg !1023

after_check614:                                   ; preds = %expr_block.exit608
  br label %noerr_block616, !dbg !1023

guard_block615:                                   ; preds = %assign_optional613
  %415 = load i64, ptr %error_var609, align 8, !dbg !1023
  ret i64 %415, !dbg !1023

noerr_block616:                                   ; preds = %after_check614
  %416 = load i64, ptr %retparam610, align 8, !dbg !1023
  %add617 = add i64 %411, %416, !dbg !1023
  store i64 %add617, ptr %total_len, align 8, !dbg !1023
  br label %loop.inc, !dbg !1024

switch.exit618:                                   ; preds = %switch.case592, %switch.case233, %switch.case230, %switch.case227, %switch.case223
  %417 = load i32, ptr %base, align 4, !dbg !1025
  %neq619 = icmp ne i32 10, %417, !dbg !1025
  br i1 %neq619, label %if.then620, label %if.exit623, !dbg !1025

if.then620:                                       ; preds = %switch.exit618
  %418 = load ptr, ptr %self, align 8, !dbg !1026
  %ptradd621 = getelementptr inbounds i8, ptr %418, i64 16, !dbg !1026
  %419 = load i32, ptr %ptradd621, align 8, !dbg !1026
  %420 = and i32 %419, -5, !dbg !1026
  store i32 %420, ptr %ptradd621, align 8, !dbg !1026
  %421 = load ptr, ptr %self, align 8, !dbg !1028
  %ptradd622 = getelementptr inbounds i8, ptr %421, i64 16, !dbg !1028
  %422 = load i32, ptr %ptradd622, align 8, !dbg !1028
  %423 = and i32 %422, -9, !dbg !1028
  store i32 %423, ptr %ptradd622, align 8, !dbg !1028
  br label %if.exit623, !dbg !1028

if.exit623:                                       ; preds = %if.then620, %switch.exit618
  %424 = load ptr, ptr %self, align 8, !dbg !1029
  %ptradd624 = getelementptr inbounds i8, ptr %424, i64 16, !dbg !1029
  %425 = load i32, ptr %ptradd624, align 8, !dbg !1029
  %lshrl625 = lshr i32 %425, 6, !dbg !1029
  %426 = and i32 1, %lshrl625, !dbg !1029
  %trunc626 = trunc i32 %426 to i8, !dbg !1029
  %427 = trunc i8 %trunc626 to i1, !dbg !1029
  br i1 %427, label %if.then627, label %if.exit629, !dbg !1029

if.then627:                                       ; preds = %if.exit623
  %428 = load ptr, ptr %self, align 8, !dbg !1029
  %ptradd628 = getelementptr inbounds i8, ptr %428, i64 16, !dbg !1029
  %429 = load i32, ptr %ptradd628, align 8, !dbg !1029
  %430 = and i32 %429, -2, !dbg !1029
  store i32 %430, ptr %ptradd628, align 8, !dbg !1029
  br label %if.exit629, !dbg !1029

if.exit629:                                       ; preds = %if.then627, %if.exit623
    #dbg_declare(ptr %is_neg, !1030, !DIExpression(), !1031)
  store i8 0, ptr %is_neg, align 1, !dbg !1031
  %431 = load i64, ptr %total_len, align 8, !dbg !1032
  %432 = load ptr, ptr %self, align 8
  store ptr %432, ptr %f631, align 8
    #dbg_declare(ptr %len633, !1033, !DIExpression(), !1035)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg636, ptr align 8 %current, i32 16, i1 false)
  %433 = call i64 @std.io.int_from_any(ptr %retparam635, ptr align 8 %indirectarg636, ptr %is_neg), !dbg !1036
  %not_err637 = icmp eq i64 %433, 0, !dbg !1036
  %434 = call i1 @llvm.expect.i1(i1 %not_err637, i1 true), !dbg !1036
  br i1 %434, label %after_check639, label %assign_optional638, !dbg !1036

assign_optional638:                               ; preds = %if.exit629
  store i64 %433, ptr %len.f634, align 8, !dbg !1036
  br label %after_assign645, !dbg !1036

after_check639:                                   ; preds = %if.exit629
  %435 = load ptr, ptr %self, align 8
  %436 = load i128, ptr %retparam635, align 16
  store i128 %436, ptr %indirectarg641, align 16
  %437 = load i8, ptr %is_neg, align 1
  %438 = load i32, ptr %base, align 4
  %439 = call i64 @std.io.Formatter.ntoa(ptr %retparam640, ptr %435, ptr align 16 %indirectarg641, i8 zeroext %437, i32 %438), !dbg !1035
  %not_err642 = icmp eq i64 %439, 0, !dbg !1035
  %440 = call i1 @llvm.expect.i1(i1 %not_err642, i1 true), !dbg !1035
  br i1 %440, label %after_check644, label %assign_optional643, !dbg !1035

assign_optional643:                               ; preds = %after_check639
  store i64 %439, ptr %len.f634, align 8, !dbg !1035
  br label %after_assign645, !dbg !1035

after_check644:                                   ; preds = %after_check639
  %441 = load i64, ptr %retparam640, align 8, !dbg !1035
  store i64 %441, ptr %len633, align 8, !dbg !1035
  store i64 0, ptr %len.f634, align 8, !dbg !1035
  br label %after_assign645, !dbg !1035

after_assign645:                                  ; preds = %after_check644, %assign_optional643, %assign_optional638
    #dbg_declare(ptr %err646, !1037, !DIExpression(), !1038)
  br label %testblock647, !dbg !1038

testblock647:                                     ; preds = %after_assign645
  %optval648 = load i64, ptr %len.f634, align 8, !dbg !1038
  %not_err649 = icmp eq i64 %optval648, 0, !dbg !1038
  %442 = call i1 @llvm.expect.i1(i1 %not_err649, i1 true), !dbg !1038
  br i1 %442, label %after_check651, label %assign_optional650, !dbg !1038

assign_optional650:                               ; preds = %testblock647
  store i64 %optval648, ptr %err646, align 8, !dbg !1038
  br label %end_block652, !dbg !1038

after_check651:                                   ; preds = %testblock647
  store i64 0, ptr %err646, align 8, !dbg !1038
  br label %end_block652, !dbg !1038

end_block652:                                     ; preds = %after_check651, %assign_optional650
  %443 = load i64, ptr %err646, align 8, !dbg !1038
  %neq653 = icmp ne i64 %443, 0, !dbg !1038
  br i1 %neq653, label %if.then654, label %if.exit698, !dbg !1038

if.then654:                                       ; preds = %end_block652
  store i64 %443, ptr %switch655, align 8
  br label %switch.entry656

switch.entry656:                                  ; preds = %if.then654
  %444 = load i64, ptr %switch655, align 8
  %eq657 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %444, !dbg !1039
  br i1 %eq657, label %switch.case660, label %next_if658, !dbg !1039

next_if658:                                       ; preds = %switch.entry656
  %eq659 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %444, !dbg !1040
  br i1 %eq659, label %switch.case660, label %next_if674, !dbg !1040

switch.case660:                                   ; preds = %next_if658, %switch.entry656
  %445 = load ptr, ptr %f631, align 8
  store ptr %445, ptr %self661, align 8
  %446 = load i64, ptr %err646, align 8
  store i64 %446, ptr %f662, align 8
  %447 = load ptr, ptr %self661, align 8, !dbg !1041
  %ptradd664 = getelementptr inbounds i8, ptr %447, i64 16, !dbg !1041
  %ptradd665 = getelementptr inbounds i8, ptr %ptradd664, i64 24, !dbg !1041
  %448 = load i64, ptr %ptradd665, align 8, !dbg !1041
  %i2b666 = icmp ne i64 %448, 0, !dbg !1041
  br i1 %i2b666, label %if.then667, label %if.exit670, !dbg !1041

if.then667:                                       ; preds = %switch.case660
  %449 = load ptr, ptr %self661, align 8, !dbg !1041
  %ptradd668 = getelementptr inbounds i8, ptr %449, i64 16, !dbg !1041
  %ptradd669 = getelementptr inbounds i8, ptr %ptradd668, i64 24, !dbg !1041
  %450 = load i64, ptr %ptradd669, align 8, !dbg !1041
  store i64 %450, ptr %blockret663, align 8, !dbg !1041
  br label %expr_block.exit673, !dbg !1041

if.exit670:                                       ; preds = %switch.case660
  %451 = load ptr, ptr %self661, align 8, !dbg !1045
  %ptradd671 = getelementptr inbounds i8, ptr %451, i64 16, !dbg !1045
  %ptradd672 = getelementptr inbounds i8, ptr %ptradd671, i64 24, !dbg !1045
  %452 = load i64, ptr %f662, align 8, !dbg !1045
  store i64 %452, ptr %ptradd672, align 8, !dbg !1045
  %453 = load i64, ptr %f662, align 8, !dbg !1046
  store i64 %453, ptr %blockret663, align 8, !dbg !1046
  br label %expr_block.exit673, !dbg !1046

expr_block.exit673:                               ; preds = %if.exit670, %if.then667
  %454 = load i64, ptr %blockret663, align 8, !dbg !1046
  store i64 %454, ptr %error_var630, align 8, !dbg !1046
  br label %guard_block699, !dbg !1046

next_if674:                                       ; preds = %next_if658
  br label %switch.default675, !dbg !1046

switch.default675:                                ; preds = %next_if674
  %455 = load ptr, ptr %f631, align 8
  store ptr %455, ptr %self676, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f677, align 8
  %456 = load ptr, ptr %self676, align 8, !dbg !1047
  %ptradd679 = getelementptr inbounds i8, ptr %456, i64 16, !dbg !1047
  %ptradd680 = getelementptr inbounds i8, ptr %ptradd679, i64 24, !dbg !1047
  %457 = load i64, ptr %ptradd680, align 8, !dbg !1047
  %i2b681 = icmp ne i64 %457, 0, !dbg !1047
  br i1 %i2b681, label %if.then682, label %if.exit685, !dbg !1047

if.then682:                                       ; preds = %switch.default675
  %458 = load ptr, ptr %self676, align 8, !dbg !1047
  %ptradd683 = getelementptr inbounds i8, ptr %458, i64 16, !dbg !1047
  %ptradd684 = getelementptr inbounds i8, ptr %ptradd683, i64 24, !dbg !1047
  %459 = load i64, ptr %ptradd684, align 8, !dbg !1047
  store i64 %459, ptr %blockret678, align 8, !dbg !1047
  br label %expr_block.exit688, !dbg !1047

if.exit685:                                       ; preds = %switch.default675
  %460 = load ptr, ptr %self676, align 8, !dbg !1051
  %ptradd686 = getelementptr inbounds i8, ptr %460, i64 16, !dbg !1051
  %ptradd687 = getelementptr inbounds i8, ptr %ptradd686, i64 24, !dbg !1051
  %461 = load i64, ptr %f677, align 8, !dbg !1051
  store i64 %461, ptr %ptradd687, align 8, !dbg !1051
  %462 = load i64, ptr %f677, align 8, !dbg !1052
  store i64 %462, ptr %blockret678, align 8, !dbg !1052
  br label %expr_block.exit688, !dbg !1052

expr_block.exit688:                               ; preds = %if.exit685, %if.then682
  %463 = load i64, ptr %blockret678, align 8, !dbg !1052
  store i64 %463, ptr %err646, align 8, !dbg !1052
  %464 = load ptr, ptr %f631, align 8
  store %"char[]" { ptr @.str.138, i64 9 }, ptr %indirectarg691, align 8
  %465 = call i64 @std.io.Formatter.out_substr(ptr %retparam690, ptr %464, ptr align 8 %indirectarg691), !dbg !1053
  %not_err692 = icmp eq i64 %465, 0, !dbg !1053
  %466 = call i1 @llvm.expect.i1(i1 %not_err692, i1 true), !dbg !1053
  br i1 %466, label %after_check694, label %assign_optional693, !dbg !1053

assign_optional693:                               ; preds = %expr_block.exit688
  store i64 %465, ptr %error_var689, align 8, !dbg !1053
  br label %guard_block695, !dbg !1053

after_check694:                                   ; preds = %expr_block.exit688
  br label %noerr_block696, !dbg !1053

guard_block695:                                   ; preds = %assign_optional693
  %467 = load i64, ptr %error_var689, align 8, !dbg !1053
  store i64 %467, ptr %error_var630, align 8, !dbg !1053
  br label %guard_block699, !dbg !1053

noerr_block696:                                   ; preds = %after_check694
  %468 = load i64, ptr %err646, align 8, !dbg !1054
  store i64 %468, ptr %error_var630, align 8, !dbg !1054
  br label %guard_block699, !dbg !1054

if.exit698:                                       ; preds = %end_block652
  br label %noerr_block700, !dbg !1055

guard_block699:                                   ; preds = %noerr_block696, %guard_block695, %expr_block.exit673
  %469 = load i64, ptr %error_var630, align 8, !dbg !1055
  ret i64 %469, !dbg !1055

noerr_block700:                                   ; preds = %if.exit698
  %470 = load i64, ptr %len633, align 8, !dbg !1055
  %add701 = add i64 %431, %470, !dbg !1032
  store i64 %add701, ptr %total_len, align 8, !dbg !1032
  br label %loop.inc, !dbg !1032

loop.inc:                                         ; preds = %noerr_block700, %noerr_block616, %noerr_block590, %noerr_block557, %noerr_block534, %noerr_block524, %noerr_block450, %noerr_block376, %noerr_block302, %noerr_block204, %noerr_block48, %noerr_block
  %471 = load i64, ptr %i, align 8, !dbg !777
  %add702 = add i64 %471, 1, !dbg !777
  store i64 %add702, ptr %i, align 8, !dbg !777
  br label %loop.cond, !dbg !777

loop.exit703:                                     ; preds = %loop.cond
  %472 = load ptr, ptr %self, align 8, !dbg !1056
  %ptradd704 = getelementptr inbounds i8, ptr %472, i64 16, !dbg !1056
  %ptradd705 = getelementptr inbounds i8, ptr %ptradd704, i64 24, !dbg !1056
  %473 = load i64, ptr %ptradd705, align 8, !dbg !1056
  %i2b706 = icmp ne i64 %473, 0, !dbg !1056
  br i1 %i2b706, label %if.then707, label %if.exit710, !dbg !1056

if.then707:                                       ; preds = %loop.exit703
  %474 = load ptr, ptr %self, align 8, !dbg !1056
  %ptradd708 = getelementptr inbounds i8, ptr %474, i64 16, !dbg !1056
  %ptradd709 = getelementptr inbounds i8, ptr %ptradd708, i64 24, !dbg !1056
  %475 = load i64, ptr %ptradd709, align 8, !dbg !1056
  ret i64 %475, !dbg !1056

if.exit710:                                       ; preds = %loop.exit703
  %476 = load i64, ptr %total_len, align 8, !dbg !1057
  store i64 %476, ptr %0, align 8, !dbg !1057
  ret i64 0, !dbg !1057

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.126, i64 7 }, ptr %indirectarg2, align 8
  %477 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %477(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 357), !dbg !762
  unreachable, !dbg !762

panic8:                                           ; preds = %loop.body
  store i64 %13, ptr %taddr, align 8
  %478 = insertvalue %any undef, ptr %taddr, 0
  %479 = insertvalue %any %478, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr9, align 8
  %480 = insertvalue %any undef, ptr %taddr9, 0
  %481 = insertvalue %any %480, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.126, i64 7 }, ptr %indirectarg12, align 8
  store %any %479, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %481, ptr %ptradd13, align 16
  %482 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %482, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 371, ptr align 8 %indirectarg14), !dbg !780
  unreachable, !dbg !780

panic29:                                          ; preds = %if.exit26
  store i64 %33, ptr %taddr30, align 8
  %483 = insertvalue %any undef, ptr %taddr30, 0
  %484 = insertvalue %any %483, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr31, align 8
  %485 = insertvalue %any undef, ptr %taddr31, 0
  %486 = insertvalue %any %485, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.126, i64 7 }, ptr %indirectarg34, align 8
  store %any %484, ptr %varargslots35, align 16
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots35, i64 16
  store %any %486, ptr %ptradd36, align 16
  %487 = insertvalue %"any[]" undef, ptr %varargslots35, 0
  %"$$temp37" = insertvalue %"any[]" %487, i64 2, 1
  store %"any[]" %"$$temp37", ptr %indirectarg38, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 380, ptr align 8 %indirectarg38), !dbg !790
  unreachable, !dbg !790

panic75:                                          ; preds = %if.exit72
  store i64 %75, ptr %taddr76, align 8
  %488 = insertvalue %any undef, ptr %taddr76, 0
  %489 = insertvalue %any %488, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %77, ptr %taddr77, align 8
  %490 = insertvalue %any undef, ptr %taddr77, 0
  %491 = insertvalue %any %490, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.126, i64 7 }, ptr %indirectarg80, align 8
  store %any %489, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %491, ptr %ptradd82, align 16
  %492 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %492, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 400, ptr align 8 %indirectarg84), !dbg !816
  unreachable, !dbg !816

panic107:                                         ; preds = %if.exit104
  store i64 %93, ptr %taddr108, align 8
  %493 = insertvalue %any undef, ptr %taddr108, 0
  %494 = insertvalue %any %493, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %95, ptr %taddr109, align 8
  %495 = insertvalue %any undef, ptr %taddr109, 0
  %496 = insertvalue %any %495, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.func.126, i64 7 }, ptr %indirectarg112, align 8
  store %any %494, ptr %varargslots113, align 16
  %ptradd114 = getelementptr inbounds i8, ptr %varargslots113, i64 16
  store %any %496, ptr %ptradd114, align 16
  %497 = insertvalue %"any[]" undef, ptr %varargslots113, 0
  %"$$temp115" = insertvalue %"any[]" %497, i64 2, 1
  store %"any[]" %"$$temp115", ptr %indirectarg116, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, i32 405, ptr align 8 %indirectarg116), !dbg !823
  unreachable, !dbg !823

panic170:                                         ; preds = %cond.phi
  store i64 %134, ptr %taddr171, align 8
  %498 = insertvalue %any undef, ptr %taddr171, 0
  %499 = insertvalue %any %498, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %136, ptr %taddr172, align 8
  %500 = insertvalue %any undef, ptr %taddr172, 0
  %501 = insertvalue %any %500, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg173, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg174, align 8
  store %"char[]" { ptr @.func.126, i64 7 }, ptr %indirectarg175, align 8
  store %any %499, ptr %varargslots176, align 16
  %ptradd177 = getelementptr inbounds i8, ptr %varargslots176, i64 16
  store %any %501, ptr %ptradd177, align 16
  %502 = insertvalue %"any[]" undef, ptr %varargslots176, 0
  %"$$temp178" = insertvalue %"any[]" %502, i64 2, 1
  store %"any[]" %"$$temp178", ptr %indirectarg179, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg173, ptr align 8 %indirectarg174, ptr align 8 %indirectarg175, i32 421, ptr align 8 %indirectarg179), !dbg !844
  unreachable, !dbg !844

panic210:                                         ; preds = %if.exit206
  store i64 %155, ptr %taddr211, align 8
  %503 = insertvalue %any undef, ptr %taddr211, 0
  %504 = insertvalue %any %503, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %157, ptr %taddr212, align 8
  %505 = insertvalue %any undef, ptr %taddr212, 0
  %506 = insertvalue %any %505, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg213, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg214, align 8
  store %"char[]" { ptr @.func.126, i64 7 }, ptr %indirectarg215, align 8
  store %any %504, ptr %varargslots216, align 16
  %ptradd217 = getelementptr inbounds i8, ptr %varargslots216, i64 16
  store %any %506, ptr %ptradd217, align 16
  %507 = insertvalue %"any[]" undef, ptr %varargslots216, 0
  %"$$temp218" = insertvalue %"any[]" %507, i64 2, 1
  store %"any[]" %"$$temp218", ptr %indirectarg219, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg213, ptr align 8 %indirectarg214, ptr align 8 %indirectarg215, i32 432, ptr align 8 %indirectarg219), !dbg !857
  unreachable, !dbg !857
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.print(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !1058 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.anon = alloca i64, align 8
  %.anon5 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1061
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1061
  br i1 %4, label %panic, label %checkok, !dbg !1061

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1062, !DIExpression(), !1063)
    #dbg_declare(ptr %2, !1064, !DIExpression(), !1063)
  %5 = load ptr, ptr %self, align 8, !dbg !1065
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1065
  %6 = load ptr, ptr %ptradd, align 8, !dbg !1065
  %i2nb = icmp eq ptr %6, null, !dbg !1065
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1065

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !1066
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1066
  store ptr @std.io.out_null_fn, ptr %ptradd3, align 8, !dbg !1066
  br label %if.exit, !dbg !1066

if.exit:                                          ; preds = %if.then, %checkok
    #dbg_declare(ptr %.anon, !1068, !DIExpression(), !1070)
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1070
  %8 = load i64, ptr %ptradd4, align 8, !dbg !1070
  store i64 %8, ptr %.anon, align 8, !dbg !1070
    #dbg_declare(ptr %.anon5, !1068, !DIExpression(), !1070)
  store i64 0, ptr %.anon5, align 8, !dbg !1070
  br label %loop.cond, !dbg !1070

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %9 = load i64, ptr %.anon5, align 8, !dbg !1070
  %10 = load i64, ptr %.anon, align 8, !dbg !1070
  %lt = icmp ult i64 %9, %10, !dbg !1070
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1070

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1071, !DIExpression(), !1073)
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1073
  %11 = load i64, ptr %ptradd6, align 8, !dbg !1073
  %12 = load ptr, ptr %2, align 8, !dbg !1073
  %13 = load i64, ptr %.anon5, align 8, !dbg !1073
  %ge = icmp uge i64 %13, %11, !dbg !1073
  %14 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1073
  br i1 %14, label %panic7, label %checkok14, !dbg !1073

checkok14:                                        ; preds = %loop.body
  %ptradd15 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !1073
  %15 = load i8, ptr %ptradd15, align 1, !dbg !1073
  store i8 %15, ptr %c, align 1, !dbg !1073
  %16 = load ptr, ptr %self, align 8
  %17 = load i8, ptr %c, align 1
  %18 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %16, i8 %17), !dbg !1073
  %not_err = icmp eq i64 %18, 0, !dbg !1073
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1073
  br i1 %19, label %after_check, label %assign_optional, !dbg !1073

assign_optional:                                  ; preds = %checkok14
  store i64 %18, ptr %error_var, align 8, !dbg !1073
  br label %guard_block, !dbg !1073

after_check:                                      ; preds = %checkok14
  br label %noerr_block, !dbg !1073

guard_block:                                      ; preds = %assign_optional
  %20 = load i64, ptr %error_var, align 8, !dbg !1073
  ret i64 %20, !dbg !1073

noerr_block:                                      ; preds = %after_check
  %21 = load i64, ptr %.anon5, align 8, !dbg !1070
  %addnuw = add nuw i64 %21, 1, !dbg !1070
  store i64 %addnuw, ptr %.anon5, align 8, !dbg !1070
  br label %loop.cond, !dbg !1070

loop.exit:                                        ; preds = %loop.cond
  %22 = load ptr, ptr %self, align 8, !dbg !1074
  %ptradd16 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1074
  %ptradd17 = getelementptr inbounds i8, ptr %ptradd16, i64 16, !dbg !1074
  %23 = load i64, ptr %ptradd17, align 8, !dbg !1074
  store i64 %23, ptr %0, align 8, !dbg !1074
  ret i64 0, !dbg !1074

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.139, i64 5 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 524), !dbg !1063
  unreachable, !dbg !1063

panic7:                                           ; preds = %loop.body
  store i64 %11, ptr %taddr, align 8
  %25 = insertvalue %any undef, ptr %taddr, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr8, align 8
  %27 = insertvalue %any undef, ptr %taddr8, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.55, i64 12 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.139, i64 5 }, ptr %indirectarg11, align 8
  store %any %26, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %28, ptr %ptradd12, align 16
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 531, ptr align 8 %indirectarg13), !dbg !1073
  unreachable, !dbg !1073
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_null_fn(ptr %0, i8 %1) #0 !dbg !1075 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !1076, !DIExpression(), !1077)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !1078, !DIExpression(), !1077)
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.adjust(ptr %0, ptr %1, i64 %2) #0 !dbg !1079 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr3 = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1082
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1082
  br i1 %4, label %panic, label %checkok, !dbg !1082

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1083, !DIExpression(), !1084)
  store i64 %2, ptr %len, align 8
    #dbg_declare(ptr %len, !1085, !DIExpression(), !1084)
  %5 = load ptr, ptr %self, align 8, !dbg !1086
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1086
  %6 = load i32, ptr %ptradd, align 8, !dbg !1086
  %lshrl = lshr i32 %6, 1, !dbg !1086
  %7 = and i32 1, %lshrl, !dbg !1086
  %trunc = trunc i32 %7 to i8, !dbg !1086
  %8 = trunc i8 %trunc to i1, !dbg !1086
  %not = xor i1 %8, true, !dbg !1086
  br i1 %not, label %if.then, label %if.exit, !dbg !1086

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !1086
  ret i64 0, !dbg !1086

if.exit:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1087
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1087
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 4, !dbg !1087
  %10 = load i32, ptr %ptradd5, align 4, !dbg !1087
  %zext = zext i32 %10 to i64, !dbg !1087
  %11 = load i64, ptr %len, align 8, !dbg !1087
  %12 = load ptr, ptr %self, align 8
  %13 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %12, i8 32, i64 %zext, i64 %11) #5, !dbg !1087
  %not_err = icmp eq i64 %13, 0, !dbg !1087
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1087
  br i1 %14, label %after_check, label %assign_optional, !dbg !1087

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr3, align 8, !dbg !1087
  br label %err_retblock, !dbg !1087

after_check:                                      ; preds = %if.exit
  %15 = load i64, ptr %retparam, align 8, !dbg !1087
  store i64 %15, ptr %0, align 8, !dbg !1087
  ret i64 0, !dbg !1087

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr3, align 8, !dbg !1087
  ret i64 %16, !dbg !1087

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.157, i64 6 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 19), !dbg !1084
  unreachable, !dbg !1084
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_substr(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !1088 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %l = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %prec = alloca i32, align 4
  %index = alloca i64, align 8
  %chars = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1089
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1089
  br i1 %4, label %panic, label %checkok, !dbg !1089

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1090, !DIExpression(), !1091)
    #dbg_declare(ptr %2, !1092, !DIExpression(), !1091)
    #dbg_declare(ptr %l, !1093, !DIExpression(), !1094)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %2, i32 16, i1 false)
  %5 = call i64 @std.core.string.conv.utf8_codepoints(ptr align 8 %indirectarg3), !dbg !1094
  store i64 %5, ptr %l, align 8, !dbg !1094
    #dbg_declare(ptr %prec, !1095, !DIExpression(), !1096)
  %6 = load ptr, ptr %self, align 8, !dbg !1096
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1096
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !1096
  %7 = load i32, ptr %ptradd4, align 8, !dbg !1096
  store i32 %7, ptr %prec, align 4, !dbg !1096
  %8 = load ptr, ptr %self, align 8, !dbg !1097
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1097
  %9 = load i32, ptr %ptradd5, align 8, !dbg !1097
  %lshrl = lshr i32 %9, 6, !dbg !1097
  %10 = and i32 1, %lshrl, !dbg !1097
  %trunc = trunc i32 %10 to i8, !dbg !1097
  %11 = trunc i8 %trunc to i1, !dbg !1097
  br i1 %11, label %and.rhs, label %and.phi, !dbg !1097

and.rhs:                                          ; preds = %checkok
  %12 = load i64, ptr %l, align 8, !dbg !1097
  %13 = load i32, ptr %prec, align 4, !dbg !1097
  %zext = zext i32 %13 to i64, !dbg !1097
  %lt = icmp ult i64 %12, %zext, !dbg !1097
  br label %and.phi, !dbg !1097

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !1097
  br i1 %val, label %if.then, label %if.exit, !dbg !1097

if.then:                                          ; preds = %and.phi
  %14 = load i32, ptr %prec, align 4, !dbg !1097
  %zext6 = zext i32 %14 to i64, !dbg !1097
  store i64 %zext6, ptr %l, align 8, !dbg !1097
  br label %if.exit, !dbg !1097

if.exit:                                          ; preds = %if.then, %and.phi
    #dbg_declare(ptr %index, !1098, !DIExpression(), !1099)
  store i64 0, ptr %index, align 8, !dbg !1099
    #dbg_declare(ptr %chars, !1100, !DIExpression(), !1101)
  %ptradd7 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1101
  %15 = load i64, ptr %ptradd7, align 8, !dbg !1101
  store i64 %15, ptr %chars, align 8, !dbg !1101
    #dbg_declare(ptr %ptr, !1102, !DIExpression(), !1103)
  %16 = load ptr, ptr %2, align 8, !dbg !1103
  store ptr %16, ptr %ptr, align 8, !dbg !1103
  br label %loop.cond, !dbg !1104

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %17 = load i64, ptr %index, align 8, !dbg !1105
  %18 = load i64, ptr %chars, align 8, !dbg !1105
  %lt8 = icmp ult i64 %17, %18, !dbg !1105
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1105

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1107, !DIExpression(), !1109)
  %19 = load ptr, ptr %ptr, align 8, !dbg !1109
  %20 = load i64, ptr %index, align 8, !dbg !1109
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 %20, !dbg !1109
  %21 = load i8, ptr %ptradd9, align 1, !dbg !1109
  store i8 %21, ptr %c, align 1, !dbg !1109
  %22 = load i8, ptr %c, align 1, !dbg !1110
  %zext10 = zext i8 %22 to i32, !dbg !1110
  %and = and i32 %zext10, 192, !dbg !1110
  %neq = icmp ne i32 %and, 128, !dbg !1110
  br i1 %neq, label %and.rhs11, label %and.phi15, !dbg !1110

and.rhs11:                                        ; preds = %loop.body
  %23 = load ptr, ptr %self, align 8, !dbg !1110
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1110
  %24 = load i32, ptr %ptradd12, align 8, !dbg !1110
  %lshrl13 = lshr i32 %24, 6, !dbg !1110
  %25 = and i32 1, %lshrl13, !dbg !1110
  %trunc14 = trunc i32 %25 to i8, !dbg !1110
  %26 = trunc i8 %trunc14 to i1, !dbg !1110
  br label %and.phi15, !dbg !1110

and.phi15:                                        ; preds = %and.rhs11, %loop.body
  %val16 = phi i1 [ false, %loop.body ], [ %26, %and.rhs11 ], !dbg !1110
  br i1 %val16, label %and.rhs17, label %and.phi18, !dbg !1110

and.rhs17:                                        ; preds = %and.phi15
  %27 = load i32, ptr %prec, align 4, !dbg !1110
  %sub = sub i32 %27, 1, !dbg !1110
  store i32 %sub, ptr %prec, align 4, !dbg !1110
  %i2nb = icmp eq i32 %27, 0, !dbg !1110
  br label %and.phi18, !dbg !1110

and.phi18:                                        ; preds = %and.rhs17, %and.phi15
  %val19 = phi i1 [ false, %and.phi15 ], [ %i2nb, %and.rhs17 ], !dbg !1110
  br i1 %val19, label %if.then20, label %if.exit21, !dbg !1110

if.then20:                                        ; preds = %and.phi18
  br label %loop.exit, !dbg !1110

if.exit21:                                        ; preds = %and.phi18
  %28 = load ptr, ptr %self, align 8
  %29 = load i8, ptr %c, align 1
  %30 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %28, i8 %29), !dbg !1111
  %not_err = icmp eq i64 %30, 0, !dbg !1111
  %31 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1111
  br i1 %31, label %after_check, label %assign_optional, !dbg !1111

assign_optional:                                  ; preds = %if.exit21
  store i64 %30, ptr %error_var, align 8, !dbg !1111
  br label %guard_block, !dbg !1111

after_check:                                      ; preds = %if.exit21
  br label %noerr_block, !dbg !1111

guard_block:                                      ; preds = %assign_optional
  %32 = load i64, ptr %error_var, align 8, !dbg !1111
  ret i64 %32, !dbg !1111

noerr_block:                                      ; preds = %after_check
  %33 = load i64, ptr %index, align 8, !dbg !1112
  %add = add i64 %33, 1, !dbg !1112
  store i64 %add, ptr %index, align 8, !dbg !1112
  br label %loop.cond, !dbg !1112

loop.exit:                                        ; preds = %if.then20, %loop.cond
  %34 = load i64, ptr %index, align 8, !dbg !1113
  store i64 %34, ptr %0, align 8, !dbg !1113
  ret i64 0, !dbg !1113

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.158, i64 10 }, ptr %indirectarg2, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 145), !dbg !1091
  unreachable, !dbg !1091
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.pad(ptr %0, ptr %1, i8 %2, i64 %3, i64 %4) #0 comdat !dbg !1114 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %width = alloca i64, align 8
  %len = alloca i64, align 8
  %delta = alloca i64, align 8
  %i = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1117
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1117
  br i1 %6, label %panic, label %checkok, !dbg !1117

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1118, !DIExpression(), !1119)
  store i8 %2, ptr %c, align 1
    #dbg_declare(ptr %c, !1120, !DIExpression(), !1119)
  store i64 %3, ptr %width, align 8
    #dbg_declare(ptr %width, !1121, !DIExpression(), !1119)
  store i64 %4, ptr %len, align 8
    #dbg_declare(ptr %len, !1123, !DIExpression(), !1119)
    #dbg_declare(ptr %delta, !1124, !DIExpression(), !1125)
  %7 = load i64, ptr %width, align 8, !dbg !1125
  %8 = load i64, ptr %len, align 8, !dbg !1125
  %sub = sub i64 %7, %8, !dbg !1125
  store i64 %sub, ptr %delta, align 8, !dbg !1125
    #dbg_declare(ptr %i, !1126, !DIExpression(), !1128)
  store i64 0, ptr %i, align 8, !dbg !1128
  br label %loop.cond, !dbg !1128

loop.cond:                                        ; preds = %noerr_block, %checkok
  %9 = load i64, ptr %i, align 8, !dbg !1128
  %10 = load i64, ptr %delta, align 8, !dbg !1128
  %lt = icmp slt i64 %9, %10, !dbg !1128
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1128

loop.body:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8
  %12 = load i8, ptr %c, align 1
  %13 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %11, i8 %12), !dbg !1128
  %not_err = icmp eq i64 %13, 0, !dbg !1128
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1128
  br i1 %14, label %after_check, label %assign_optional, !dbg !1128

assign_optional:                                  ; preds = %loop.body
  store i64 %13, ptr %error_var, align 8, !dbg !1128
  br label %guard_block, !dbg !1128

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !1128

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !1128
  ret i64 %15, !dbg !1128

noerr_block:                                      ; preds = %after_check
  %16 = load i64, ptr %i, align 8, !dbg !1128
  %add = add i64 %16, 1, !dbg !1128
  store i64 %add, ptr %i, align 8, !dbg !1128
  br label %loop.cond, !dbg !1128

loop.exit:                                        ; preds = %loop.cond
  store i32 0, ptr %x, align 4
  %17 = load i64, ptr %delta, align 8
  store i64 %17, ptr %.anon, align 8
  %18 = load i32, ptr %x, align 4
  store i32 %18, ptr %a, align 4
  %19 = load i64, ptr %.anon, align 8
  store i64 %19, ptr %b, align 8
  %20 = load i32, ptr %a, align 4, !dbg !1129
  %sext = sext i32 %20 to i64, !dbg !1129
  %21 = load i64, ptr %b, align 8, !dbg !1129
  %gt = icmp sgt i64 %sext, %21, !dbg !1129
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1129

cond.lhs:                                         ; preds = %loop.exit
  %22 = load i32, ptr %x, align 4, !dbg !1132
  %sext3 = sext i32 %22 to i64, !dbg !1132
  br label %cond.phi, !dbg !1132

cond.rhs:                                         ; preds = %loop.exit
  %23 = load i64, ptr %.anon, align 8, !dbg !1132
  br label %cond.phi, !dbg !1132

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext3, %cond.lhs ], [ %23, %cond.rhs ], !dbg !1132
  store i64 %val, ptr %0, align 8, !dbg !1132
  ret i64 0, !dbg !1132

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.159, i64 3 }, ptr %indirectarg2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 164), !dbg !1119
  unreachable, !dbg !1119
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.out_chars(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !1135 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.anon = alloca i64, align 8
  %.anon3 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1138
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1138
  br i1 %4, label %panic, label %checkok, !dbg !1138

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1139, !DIExpression(), !1140)
    #dbg_declare(ptr %2, !1141, !DIExpression(), !1140)
    #dbg_declare(ptr %.anon, !1142, !DIExpression(), !1144)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1144
  %5 = load i64, ptr %ptradd, align 8, !dbg !1144
  store i64 %5, ptr %.anon, align 8, !dbg !1144
    #dbg_declare(ptr %.anon3, !1142, !DIExpression(), !1144)
  store i64 0, ptr %.anon3, align 8, !dbg !1144
  br label %loop.cond, !dbg !1144

loop.cond:                                        ; preds = %noerr_block, %checkok
  %6 = load i64, ptr %.anon3, align 8, !dbg !1144
  %7 = load i64, ptr %.anon, align 8, !dbg !1144
  %lt = icmp ult i64 %6, %7, !dbg !1144
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1144

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1145, !DIExpression(), !1147)
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1147
  %8 = load i64, ptr %ptradd4, align 8, !dbg !1147
  %9 = load ptr, ptr %2, align 8, !dbg !1147
  %10 = load i64, ptr %.anon3, align 8, !dbg !1147
  %ge = icmp uge i64 %10, %8, !dbg !1147
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1147
  br i1 %11, label %panic5, label %checkok12, !dbg !1147

checkok12:                                        ; preds = %loop.body
  %ptradd13 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !1147
  %12 = load i8, ptr %ptradd13, align 1, !dbg !1147
  store i8 %12, ptr %c, align 1, !dbg !1147
  %13 = load ptr, ptr %self, align 8
  %14 = load i8, ptr %c, align 1
  %15 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %13, i8 %14), !dbg !1147
  %not_err = icmp eq i64 %15, 0, !dbg !1147
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1147
  br i1 %16, label %after_check, label %assign_optional, !dbg !1147

assign_optional:                                  ; preds = %checkok12
  store i64 %15, ptr %error_var, align 8, !dbg !1147
  br label %guard_block, !dbg !1147

after_check:                                      ; preds = %checkok12
  br label %noerr_block, !dbg !1147

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !1147
  ret i64 %17, !dbg !1147

noerr_block:                                      ; preds = %after_check
  %18 = load i64, ptr %.anon3, align 8, !dbg !1144
  %addnuw = add nuw i64 %18, 1, !dbg !1144
  store i64 %addnuw, ptr %.anon3, align 8, !dbg !1144
  br label %loop.cond, !dbg !1144

loop.exit:                                        ; preds = %loop.cond
  %ptradd14 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1148
  %19 = load i64, ptr %ptradd14, align 8, !dbg !1148
  store i64 %19, ptr %0, align 8, !dbg !1148
  ret i64 0, !dbg !1148

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.160, i64 9 }, ptr %indirectarg2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 178), !dbg !1140
  unreachable, !dbg !1140

panic5:                                           ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr6, align 8
  %23 = insertvalue %any undef, ptr %taddr6, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.160, i64 9 }, ptr %indirectarg9, align 8
  store %any %22, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd10, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 180, ptr align 8 %indirectarg11), !dbg !1147
  unreachable, !dbg !1147
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.etoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1149 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1153
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1153
  br i1 %4, label %panic, label %checkok, !dbg !1153

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1154, !DIExpression(), !1153)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1155, !DIExpression(), !1153)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 1, double %6), !dbg !1153
  %not_err = icmp eq i64 %7, 0, !dbg !1153
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1153
  br i1 %8, label %after_check, label %assign_optional, !dbg !1153

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1153
  br label %err_retblock, !dbg !1153

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1153
  store i64 %9, ptr %0, align 8, !dbg !1153
  ret i64 0, !dbg !1153

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1153
  ret i64 %10, !dbg !1153

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.161, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 192), !dbg !1153
  unreachable, !dbg !1153
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.ftoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1156 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1157
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1157
  br i1 %4, label %panic, label %checkok, !dbg !1157

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1158, !DIExpression(), !1157)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1159, !DIExpression(), !1157)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 0, double %6), !dbg !1157
  %not_err = icmp eq i64 %7, 0, !dbg !1157
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1157
  br i1 %8, label %after_check, label %assign_optional, !dbg !1157

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1157
  br label %err_retblock, !dbg !1157

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1157
  store i64 %9, ptr %0, align 8, !dbg !1157
  ret i64 0, !dbg !1157

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1157
  ret i64 %10, !dbg !1157

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.162, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 193), !dbg !1157
  unreachable, !dbg !1157
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.gtoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1160 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1161
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1161
  br i1 %4, label %panic, label %checkok, !dbg !1161

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1162, !DIExpression(), !1161)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1163, !DIExpression(), !1161)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 2, double %6), !dbg !1161
  %not_err = icmp eq i64 %7, 0, !dbg !1161
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1161
  br i1 %8, label %after_check, label %assign_optional, !dbg !1161

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1161
  br label %err_retblock, !dbg !1161

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1161
  store i64 %9, ptr %0, align 8, !dbg !1161
  ret i64 0, !dbg !1161

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1161
  ret i64 %10, !dbg !1161

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.163, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 194), !dbg !1161
  unreachable, !dbg !1161
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Formatter.atoa(ptr %0, ptr %1, double %2) #0 comdat !dbg !1164 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1165
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1165
  br i1 %4, label %panic, label %checkok, !dbg !1165

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1166, !DIExpression(), !1165)
  store double %2, ptr %y, align 8
    #dbg_declare(ptr %y, !1167, !DIExpression(), !1165)
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 3, double %6), !dbg !1165
  %not_err = icmp eq i64 %7, 0, !dbg !1165
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1165
  br i1 %8, label %after_check, label %assign_optional, !dbg !1165

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1165
  br label %err_retblock, !dbg !1165

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1165
  store i64 %9, ptr %0, align 8, !dbg !1165
  ret i64 0, !dbg !1165

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1165
  ret i64 %10, !dbg !1165

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.164, i64 4 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 195), !dbg !1165
  unreachable, !dbg !1165
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.floatformat(ptr %0, ptr %1, i32 %2, double %3) #0 !dbg !1168 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %formatting = alloca i32, align 4
  %y = alloca double, align 8
  %big = alloca [126 x i32], align 16
  %is_neg = alloca i8, align 1
  %x = alloca double, align 8
  %expr = alloca double, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %pl = alloca i64, align 8
  %x9 = alloca double, align 8
  %expr10 = alloca double, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %x31 = alloca double, align 8
  %expr32 = alloca double, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %error_var50 = alloca i64, align 8
  %retparam52 = alloca i64, align 8
  %error_var60 = alloca i64, align 8
  %retparam61 = alloca i64, align 8
  %indirectarg62 = alloca %"char[]", align 8
  %error_var73 = alloca i64, align 8
  %retparam78 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %e2 = alloca i32, align 4
  %x87 = alloca double, align 8
  %e = alloca ptr, align 8
  %ebuf0 = alloca [12 x i8], align 1
  %ebuf = alloca ptr, align 8
  %buf_array = alloca [22 x i8], align 16
  %buf = alloca ptr, align 8
  %p = alloca i64, align 8
  %round = alloca double, align 8
  %re = alloca i32, align 4
  %estr = alloca ptr, align 8
  %indirectarg133 = alloca i128, align 16
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg147 = alloca %"char[]", align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %indirectarg158 = alloca %"char[]", align 8
  %s164 = alloca ptr, align 8
  %xdigits = alloca ptr, align 8
  %x172 = alloca i32, align 4
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %indirectarg203 = alloca %"char[]", align 8
  %indirectarg204 = alloca %"char[]", align 8
  %indirectarg205 = alloca %"char[]", align 8
  %outlen = alloca i64, align 8
  %explen = alloca i64, align 8
  %len214 = alloca i64, align 8
  %l = alloca i64, align 8
  %error_var239 = alloca i64, align 8
  %retparam244 = alloca i64, align 8
  %error_var259 = alloca i64, align 8
  %retparam261 = alloca i64, align 8
  %error_var269 = alloca i64, align 8
  %retparam274 = alloca i64, align 8
  %indirectarg275 = alloca %"char[]", align 8
  %error_var285 = alloca i64, align 8
  %retparam290 = alloca i64, align 8
  %error_var298 = alloca i64, align 8
  %retparam300 = alloca i64, align 8
  %indirectarg301 = alloca %"char[]", align 8
  %error_var308 = alloca i64, align 8
  %retparam311 = alloca i64, align 8
  %error_var318 = alloca i64, align 8
  %retparam321 = alloca i64, align 8
  %indirectarg322 = alloca %"char[]", align 8
  %error_var333 = alloca i64, align 8
  %retparam338 = alloca i64, align 8
  %reterr346 = alloca i64, align 8
  %a = alloca ptr, align 8
  %z = alloca ptr, align 8
  %r = alloca ptr, align 8
  %v = alloca i32, align 4
  %carry = alloca i32, align 4
  %sh = alloca i32, align 4
  %x371 = alloca i32, align 4
  %y372 = alloca i32, align 4
  %d = alloca ptr, align 8
  %x376 = alloca i64, align 8
  %indirectarg379 = alloca %"char[]", align 8
  %indirectarg380 = alloca %"char[]", align 8
  %indirectarg381 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %indirectarg386 = alloca %"char[]", align 8
  %indirectarg387 = alloca %"char[]", align 8
  %indirectarg388 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg389 = alloca %"any[]", align 8
  %indirectarg395 = alloca %"char[]", align 8
  %indirectarg396 = alloca %"char[]", align 8
  %indirectarg397 = alloca %"char[]", align 8
  %indirectarg408 = alloca %"char[]", align 8
  %indirectarg409 = alloca %"char[]", align 8
  %indirectarg410 = alloca %"char[]", align 8
  %carry427 = alloca i32, align 4
  %b = alloca ptr, align 8
  %sh428 = alloca i32, align 4
  %x429 = alloca i32, align 4
  %y431 = alloca i32, align 4
  %need = alloca i32, align 4
  %d437 = alloca ptr, align 8
  %rm = alloca i32, align 4
  %indirectarg443 = alloca %"char[]", align 8
  %indirectarg444 = alloca %"char[]", align 8
  %indirectarg445 = alloca %"char[]", align 8
  %taddr448 = alloca i32, align 4
  %indirectarg449 = alloca %"char[]", align 8
  %indirectarg450 = alloca %"char[]", align 8
  %indirectarg451 = alloca %"char[]", align 8
  %varargslots452 = alloca [1 x %any], align 16
  %indirectarg454 = alloca %"any[]", align 8
  %taddr458 = alloca i32, align 4
  %indirectarg459 = alloca %"char[]", align 8
  %indirectarg460 = alloca %"char[]", align 8
  %indirectarg461 = alloca %"char[]", align 8
  %varargslots462 = alloca [1 x %any], align 16
  %indirectarg464 = alloca %"any[]", align 8
  %indirectarg471 = alloca %"char[]", align 8
  %indirectarg472 = alloca %"char[]", align 8
  %indirectarg473 = alloca %"char[]", align 8
  %indirectarg477 = alloca %"char[]", align 8
  %indirectarg478 = alloca %"char[]", align 8
  %indirectarg479 = alloca %"char[]", align 8
  %taddr483 = alloca i32, align 4
  %indirectarg484 = alloca %"char[]", align 8
  %indirectarg485 = alloca %"char[]", align 8
  %indirectarg486 = alloca %"char[]", align 8
  %varargslots487 = alloca [1 x %any], align 16
  %indirectarg489 = alloca %"any[]", align 8
  %taddr495 = alloca i32, align 4
  %indirectarg496 = alloca %"char[]", align 8
  %indirectarg497 = alloca %"char[]", align 8
  %indirectarg498 = alloca %"char[]", align 8
  %varargslots499 = alloca [1 x %any], align 16
  %indirectarg501 = alloca %"any[]", align 8
  %taddr505 = alloca i32, align 4
  %indirectarg506 = alloca %"char[]", align 8
  %indirectarg507 = alloca %"char[]", align 8
  %indirectarg508 = alloca %"char[]", align 8
  %varargslots509 = alloca [1 x %any], align 16
  %indirectarg511 = alloca %"any[]", align 8
  %e535 = alloca i32, align 4
  %i = alloca i32, align 4
  %indirectarg543 = alloca %"char[]", align 8
  %indirectarg544 = alloca %"char[]", align 8
  %indirectarg545 = alloca %"char[]", align 8
  %j = alloca i32, align 4
  %x572 = alloca i32, align 4
  %d573 = alloca ptr, align 8
  %i582 = alloca i32, align 4
  %indirectarg592 = alloca %"char[]", align 8
  %indirectarg593 = alloca %"char[]", align 8
  %indirectarg594 = alloca %"char[]", align 8
  %indirectarg597 = alloca %"char[]", align 8
  %indirectarg598 = alloca %"char[]", align 8
  %indirectarg599 = alloca %"char[]", align 8
  %round608 = alloca double, align 8
  %small = alloca double, align 8
  %indirectarg611 = alloca %"char[]", align 8
  %indirectarg612 = alloca %"char[]", align 8
  %indirectarg613 = alloca %"char[]", align 8
  %indirectarg617 = alloca %"char[]", align 8
  %indirectarg618 = alloca %"char[]", align 8
  %indirectarg619 = alloca %"char[]", align 8
  %switch = alloca i8, align 1
  %indirectarg666 = alloca %"char[]", align 8
  %indirectarg667 = alloca %"char[]", align 8
  %indirectarg668 = alloca %"char[]", align 8
  %indirectarg676 = alloca %"char[]", align 8
  %indirectarg677 = alloca %"char[]", align 8
  %indirectarg678 = alloca %"char[]", align 8
  %indirectarg682 = alloca %"char[]", align 8
  %indirectarg683 = alloca %"char[]", align 8
  %indirectarg684 = alloca %"char[]", align 8
  %indirectarg690 = alloca %"char[]", align 8
  %indirectarg691 = alloca %"char[]", align 8
  %indirectarg692 = alloca %"char[]", align 8
  %indirectarg699 = alloca %"char[]", align 8
  %indirectarg700 = alloca %"char[]", align 8
  %indirectarg701 = alloca %"char[]", align 8
  %indirectarg708 = alloca %"char[]", align 8
  %indirectarg709 = alloca %"char[]", align 8
  %indirectarg710 = alloca %"char[]", align 8
  %indirectarg715 = alloca %"char[]", align 8
  %indirectarg716 = alloca %"char[]", align 8
  %indirectarg717 = alloca %"char[]", align 8
  %indirectarg726 = alloca %"char[]", align 8
  %indirectarg727 = alloca %"char[]", align 8
  %indirectarg728 = alloca %"char[]", align 8
  %i786 = alloca i32, align 4
  %indirectarg791 = alloca %"char[]", align 8
  %indirectarg792 = alloca %"char[]", align 8
  %indirectarg793 = alloca %"char[]", align 8
  %x805 = alloca i64, align 8
  %x806 = alloca i64, align 8
  %y811 = alloca i64, align 8
  %y812 = alloca i64, align 8
  %x814 = alloca i64, align 8
  %x815 = alloca i64, align 8
  %y822 = alloca i64, align 8
  %y823 = alloca i64, align 8
  %l839 = alloca i32, align 4
  %estr851 = alloca ptr, align 8
  %indirectarg870 = alloca i128, align 16
  %indirectarg879 = alloca %"char[]", align 8
  %indirectarg880 = alloca %"char[]", align 8
  %indirectarg881 = alloca %"char[]", align 8
  %indirectarg888 = alloca %"char[]", align 8
  %indirectarg889 = alloca %"char[]", align 8
  %indirectarg890 = alloca %"char[]", align 8
  %len909 = alloca i64, align 8
  %error_var921 = alloca i64, align 8
  %retparam927 = alloca i64, align 8
  %error_var942 = alloca i64, align 8
  %retparam944 = alloca i64, align 8
  %error_var955 = alloca i64, align 8
  %retparam961 = alloca i64, align 8
  %d974 = alloca ptr, align 8
  %s978 = alloca ptr, align 8
  %indirectarg981 = alloca %"char[]", align 8
  %indirectarg982 = alloca %"char[]", align 8
  %indirectarg983 = alloca %"char[]", align 8
  %indirectarg987 = alloca i128, align 16
  %switch988 = alloca i8, align 1
  %indirectarg1006 = alloca %"char[]", align 8
  %indirectarg1007 = alloca %"char[]", align 8
  %indirectarg1008 = alloca %"char[]", align 8
  %error_var1012 = alloca i64, align 8
  %retparam1016 = alloca i64, align 8
  %indirectarg1017 = alloca %"char[]", align 8
  %error_var1034 = alloca i64, align 8
  %retparam1035 = alloca i64, align 8
  %s1050 = alloca ptr, align 8
  %indirectarg1053 = alloca %"char[]", align 8
  %indirectarg1054 = alloca %"char[]", align 8
  %indirectarg1055 = alloca %"char[]", align 8
  %indirectarg1059 = alloca i128, align 16
  %indirectarg1066 = alloca %"char[]", align 8
  %indirectarg1067 = alloca %"char[]", align 8
  %indirectarg1068 = alloca %"char[]", align 8
  %error_var1071 = alloca i64, align 8
  %x1072 = alloca i64, align 8
  %y1073 = alloca i64, align 8
  %retparam1076 = alloca i64, align 8
  %indirectarg1077 = alloca %"char[]", align 8
  %error_var1087 = alloca i64, align 8
  %retparam1089 = alloca i64, align 8
  %d1101 = alloca ptr, align 8
  %s1109 = alloca ptr, align 8
  %indirectarg1112 = alloca %"char[]", align 8
  %indirectarg1113 = alloca %"char[]", align 8
  %indirectarg1114 = alloca %"char[]", align 8
  %indirectarg1118 = alloca i128, align 16
  %error_var1132 = alloca i64, align 8
  %retparam1134 = alloca i64, align 8
  %error_var1149 = alloca i64, align 8
  %retparam1150 = alloca i64, align 8
  %error_var1159 = alloca i64, align 8
  %x1161 = alloca i64, align 8
  %y1162 = alloca i64, align 8
  %retparam1165 = alloca i64, align 8
  %indirectarg1166 = alloca %"char[]", align 8
  %error_var1177 = alloca i64, align 8
  %retparam1179 = alloca i64, align 8
  %error_var1186 = alloca i64, align 8
  %retparam1189 = alloca i64, align 8
  %indirectarg1190 = alloca %"char[]", align 8
  %error_var1202 = alloca i64, align 8
  %retparam1208 = alloca i64, align 8
  %reterr1216 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1171
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1171
  br i1 %5, label %panic, label %checkok, !dbg !1171

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1172, !DIExpression(), !1173)
  store i32 %2, ptr %formatting, align 4
    #dbg_declare(ptr %formatting, !1174, !DIExpression(), !1173)
  store double %3, ptr %y, align 8
    #dbg_declare(ptr %y, !1175, !DIExpression(), !1173)
    #dbg_declare(ptr %big, !1176, !DIExpression(), !1180)
  call void @llvm.memset.p0.i64(ptr align 16 %big, i8 0, i64 504, i1 false), !dbg !1180
    #dbg_declare(ptr %is_neg, !1181, !DIExpression(), !1182)
  store i8 0, ptr %is_neg, align 1, !dbg !1182
  %6 = load double, ptr %y, align 8
  store double %6, ptr %x, align 8
  %7 = load double, ptr %x, align 8
  store double %7, ptr %expr, align 8
  %checknull = icmp eq ptr %expr, null, !dbg !1183
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1183
  br i1 %8, label %panic3, label %checkok7, !dbg !1183

checkok7:                                         ; preds = %checkok
  %9 = load i64, ptr %expr, align 8, !dbg !1183
  %lshr = lshr i64 %9, 63, !dbg !1185
  %10 = freeze i64 %lshr, !dbg !1185
  %trunc = trunc i64 %10 to i32, !dbg !1185
  %i2b = icmp ne i32 %trunc, 0, !dbg !1185
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1185

if.then:                                          ; preds = %checkok7
  store i8 1, ptr %is_neg, align 1, !dbg !1189
  %11 = load double, ptr %y, align 8, !dbg !1191
  %fneg = fneg double %11, !dbg !1191
  store double %fneg, ptr %y, align 8, !dbg !1191
  br label %if.exit, !dbg !1191

if.exit:                                          ; preds = %if.then, %checkok7
    #dbg_declare(ptr %pl, !1192, !DIExpression(), !1193)
  %12 = load i8, ptr %is_neg, align 1, !dbg !1193
  %13 = trunc i8 %12 to i1, !dbg !1193
  br i1 %13, label %or.phi, label %or.rhs, !dbg !1193

or.rhs:                                           ; preds = %if.exit
  %14 = load ptr, ptr %self, align 8, !dbg !1193
  %ptradd = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1193
  %15 = load i32, ptr %ptradd, align 8, !dbg !1193
  %lshrl = lshr i32 %15, 2, !dbg !1193
  %16 = and i32 1, %lshrl, !dbg !1193
  %trunc8 = trunc i32 %16 to i8, !dbg !1193
  %17 = trunc i8 %trunc8 to i1, !dbg !1193
  br label %or.phi, !dbg !1193

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %17, %or.rhs ], !dbg !1193
  %ternary = select i1 %val, i64 1, i64 0, !dbg !1193
  store i64 %ternary, ptr %pl, align 8, !dbg !1193
  %18 = load double, ptr %y, align 8
  store double %18, ptr %x9, align 8
  %19 = load double, ptr %x9, align 8
  store double %19, ptr %expr10, align 8
  %checknull11 = icmp eq ptr %expr10, null, !dbg !1194
  %20 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !1194
  br i1 %20, label %panic12, label %checkok16, !dbg !1194

checkok16:                                        ; preds = %or.phi
  %21 = load i64, ptr %expr10, align 8, !dbg !1194
  %and = and i64 %21, 9223372036854775807, !dbg !1196
  %lt = icmp ult i64 %and, 9218868437227405312, !dbg !1196
  %not = xor i1 %lt, true, !dbg !1196
  br i1 %not, label %if.then17, label %if.exit86, !dbg !1196

if.then17:                                        ; preds = %checkok16
    #dbg_declare(ptr %len, !1199, !DIExpression(), !1201)
  store i64 0, ptr %len, align 8, !dbg !1201
  %22 = load ptr, ptr %self, align 8, !dbg !1202
  %ptradd18 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1202
  %23 = load i32, ptr %ptradd18, align 8, !dbg !1202
  %lshrl19 = lshr i32 %23, 1, !dbg !1202
  %24 = and i32 1, %lshrl19, !dbg !1202
  %trunc20 = trunc i32 %24 to i8, !dbg !1202
  %25 = trunc i8 %trunc20 to i1, !dbg !1202
  %not21 = xor i1 %25, true, !dbg !1202
  br i1 %not21, label %if.then22, label %if.exit26, !dbg !1202

if.then22:                                        ; preds = %if.then17
  %26 = load i64, ptr %len, align 8, !dbg !1202
  %27 = load ptr, ptr %self, align 8, !dbg !1202
  %ptradd23 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !1202
  %ptradd24 = getelementptr inbounds i8, ptr %ptradd23, i64 4, !dbg !1202
  %28 = load i32, ptr %ptradd24, align 4, !dbg !1202
  %zext = zext i32 %28 to i64, !dbg !1202
  %29 = load i64, ptr %pl, align 8, !dbg !1202
  %add = add i64 3, %29, !dbg !1202
  %30 = load ptr, ptr %self, align 8
  %31 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %30, i8 32, i64 %zext, i64 %add) #5, !dbg !1202
  %not_err = icmp eq i64 %31, 0, !dbg !1202
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1202
  br i1 %32, label %after_check, label %assign_optional, !dbg !1202

assign_optional:                                  ; preds = %if.then22
  store i64 %31, ptr %error_var, align 8, !dbg !1202
  br label %guard_block, !dbg !1202

after_check:                                      ; preds = %if.then22
  br label %noerr_block, !dbg !1202

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !1202
  ret i64 %33, !dbg !1202

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %retparam, align 8, !dbg !1202
  %add25 = add i64 %26, %34, !dbg !1202
  store i64 %add25, ptr %len, align 8, !dbg !1202
  br label %if.exit26, !dbg !1202

if.exit26:                                        ; preds = %noerr_block, %if.then17
    #dbg_declare(ptr %s, !1203, !DIExpression(), !1204)
  %35 = load ptr, ptr %self, align 8, !dbg !1204
  %ptradd27 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !1204
  %36 = load i32, ptr %ptradd27, align 8, !dbg !1204
  %lshrl28 = lshr i32 %36, 5, !dbg !1204
  %37 = and i32 1, %lshrl28, !dbg !1204
  %trunc29 = trunc i32 %37 to i8, !dbg !1204
  %38 = trunc i8 %trunc29 to i1, !dbg !1204
  %ternary30 = select i1 %38, %"char[]" { ptr @.str.166, i64 3 }, %"char[]" { ptr @.str.167, i64 3 }, !dbg !1204
  store %"char[]" %ternary30, ptr %s, align 8, !dbg !1204
  %39 = load double, ptr %y, align 8
  store double %39, ptr %x31, align 8
  %40 = load double, ptr %x31, align 8
  store double %40, ptr %expr32, align 8
  %checknull33 = icmp eq ptr %expr32, null, !dbg !1205
  %41 = call i1 @llvm.expect.i1(i1 %checknull33, i1 false), !dbg !1205
  br i1 %41, label %panic34, label %checkok38, !dbg !1205

checkok38:                                        ; preds = %if.exit26
  %42 = load i64, ptr %expr32, align 8, !dbg !1205
  %and39 = and i64 %42, 9223372036854775807, !dbg !1207
  %gt = icmp ugt i64 %and39, 9218868437227405312, !dbg !1207
  br i1 %gt, label %if.then40, label %if.exit45, !dbg !1207

if.then40:                                        ; preds = %checkok38
  %43 = load ptr, ptr %self, align 8, !dbg !1209
  %ptradd41 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !1209
  %44 = load i32, ptr %ptradd41, align 8, !dbg !1209
  %lshrl42 = lshr i32 %44, 5, !dbg !1209
  %45 = and i32 1, %lshrl42, !dbg !1209
  %trunc43 = trunc i32 %45 to i8, !dbg !1209
  %46 = trunc i8 %trunc43 to i1, !dbg !1209
  %ternary44 = select i1 %46, %"char[]" { ptr @.str.168, i64 3 }, %"char[]" { ptr @.str.169, i64 3 }, !dbg !1209
  store %"char[]" %ternary44, ptr %s, align 8, !dbg !1209
  br label %if.exit45, !dbg !1209

if.exit45:                                        ; preds = %if.then40, %checkok38
  %47 = load i64, ptr %len, align 8, !dbg !1210
  %ptradd46 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1210
  %48 = load i64, ptr %ptradd46, align 8, !dbg !1210
  %add47 = add i64 %47, %48, !dbg !1210
  store i64 %add47, ptr %len, align 8, !dbg !1210
  %49 = load i64, ptr %pl, align 8, !dbg !1211
  %i2b48 = icmp ne i64 %49, 0, !dbg !1211
  br i1 %i2b48, label %if.then49, label %if.exit59, !dbg !1211

if.then49:                                        ; preds = %if.exit45
  %50 = load i64, ptr %len, align 8, !dbg !1211
  %51 = load i8, ptr %is_neg, align 1, !dbg !1211
  %52 = trunc i8 %51 to i1, !dbg !1211
  %ternary51 = select i1 %52, i8 45, i8 43, !dbg !1211
  %53 = load ptr, ptr %self, align 8
  %54 = call i64 @std.io.Formatter.out(ptr %retparam52, ptr %53, i8 %ternary51), !dbg !1211
  %not_err53 = icmp eq i64 %54, 0, !dbg !1211
  %55 = call i1 @llvm.expect.i1(i1 %not_err53, i1 true), !dbg !1211
  br i1 %55, label %after_check55, label %assign_optional54, !dbg !1211

assign_optional54:                                ; preds = %if.then49
  store i64 %54, ptr %error_var50, align 8, !dbg !1211
  br label %guard_block56, !dbg !1211

after_check55:                                    ; preds = %if.then49
  br label %noerr_block57, !dbg !1211

guard_block56:                                    ; preds = %assign_optional54
  %56 = load i64, ptr %error_var50, align 8, !dbg !1211
  ret i64 %56, !dbg !1211

noerr_block57:                                    ; preds = %after_check55
  %57 = load i64, ptr %retparam52, align 8, !dbg !1211
  %add58 = add i64 %50, %57, !dbg !1211
  store i64 %add58, ptr %len, align 8, !dbg !1211
  br label %if.exit59, !dbg !1211

if.exit59:                                        ; preds = %noerr_block57, %if.exit45
  %58 = load i64, ptr %len, align 8, !dbg !1212
  %59 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg62, ptr align 8 %s, i32 16, i1 false)
  %60 = call i64 @std.io.Formatter.out_chars(ptr %retparam61, ptr %59, ptr align 8 %indirectarg62), !dbg !1212
  %not_err63 = icmp eq i64 %60, 0, !dbg !1212
  %61 = call i1 @llvm.expect.i1(i1 %not_err63, i1 true), !dbg !1212
  br i1 %61, label %after_check65, label %assign_optional64, !dbg !1212

assign_optional64:                                ; preds = %if.exit59
  store i64 %60, ptr %error_var60, align 8, !dbg !1212
  br label %guard_block66, !dbg !1212

after_check65:                                    ; preds = %if.exit59
  br label %noerr_block67, !dbg !1212

guard_block66:                                    ; preds = %assign_optional64
  %62 = load i64, ptr %error_var60, align 8, !dbg !1212
  ret i64 %62, !dbg !1212

noerr_block67:                                    ; preds = %after_check65
  %63 = load i64, ptr %retparam61, align 8, !dbg !1212
  %add68 = add i64 %58, %63, !dbg !1212
  store i64 %add68, ptr %len, align 8, !dbg !1212
  %64 = load ptr, ptr %self, align 8, !dbg !1213
  %ptradd69 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !1213
  %65 = load i32, ptr %ptradd69, align 8, !dbg !1213
  %lshrl70 = lshr i32 %65, 1, !dbg !1213
  %66 = and i32 1, %lshrl70, !dbg !1213
  %trunc71 = trunc i32 %66 to i8, !dbg !1213
  %67 = trunc i8 %trunc71 to i1, !dbg !1213
  br i1 %67, label %if.then72, label %if.exit85, !dbg !1213

if.then72:                                        ; preds = %noerr_block67
  %68 = load i64, ptr %len, align 8, !dbg !1213
  %69 = load ptr, ptr %self, align 8, !dbg !1213
  %ptradd74 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !1213
  %ptradd75 = getelementptr inbounds i8, ptr %ptradd74, i64 4, !dbg !1213
  %70 = load i32, ptr %ptradd75, align 4, !dbg !1213
  %zext76 = zext i32 %70 to i64, !dbg !1213
  %71 = load i64, ptr %pl, align 8, !dbg !1213
  %add77 = add i64 3, %71, !dbg !1213
  %72 = load ptr, ptr %self, align 8
  %73 = call i64 @std.io.Formatter.pad(ptr %retparam78, ptr %72, i8 32, i64 %zext76, i64 %add77) #5, !dbg !1213
  %not_err79 = icmp eq i64 %73, 0, !dbg !1213
  %74 = call i1 @llvm.expect.i1(i1 %not_err79, i1 true), !dbg !1213
  br i1 %74, label %after_check81, label %assign_optional80, !dbg !1213

assign_optional80:                                ; preds = %if.then72
  store i64 %73, ptr %error_var73, align 8, !dbg !1213
  br label %guard_block82, !dbg !1213

after_check81:                                    ; preds = %if.then72
  br label %noerr_block83, !dbg !1213

guard_block82:                                    ; preds = %assign_optional80
  %75 = load i64, ptr %error_var73, align 8, !dbg !1213
  ret i64 %75, !dbg !1213

noerr_block83:                                    ; preds = %after_check81
  %76 = load i64, ptr %retparam78, align 8, !dbg !1213
  %add84 = add i64 %68, %76, !dbg !1213
  store i64 %add84, ptr %len, align 8, !dbg !1213
  br label %if.exit85, !dbg !1213

if.exit85:                                        ; preds = %noerr_block83, %noerr_block67
  %77 = load i64, ptr %len, align 8, !dbg !1214
  store i64 %77, ptr %0, align 8, !dbg !1214
  ret i64 0, !dbg !1214

if.exit86:                                        ; preds = %checkok16
    #dbg_declare(ptr %e2, !1215, !DIExpression(), !1216)
  store i32 0, ptr %e2, align 4, !dbg !1216
  %78 = load double, ptr %y, align 8
  store double %78, ptr %x87, align 8
  store ptr %e2, ptr %e, align 8
  %79 = load double, ptr %x87, align 8, !dbg !1217
  %80 = load ptr, ptr %e, align 8, !dbg !1217
  %81 = call double @std.math._frexp(double %79, ptr %80), !dbg !1217
  %fmul = fmul double %81, 2.000000e+00, !dbg !1219
  store double %fmul, ptr %y, align 8, !dbg !1219
  %82 = load double, ptr %y, align 8, !dbg !1220
  %fpbool = fcmp une double %82, 0.000000e+00, !dbg !1220
  br i1 %fpbool, label %if.then88, label %if.exit89, !dbg !1220

if.then88:                                        ; preds = %if.exit86
  %83 = load i32, ptr %e2, align 4, !dbg !1220
  %sub = sub i32 %83, 1, !dbg !1220
  store i32 %sub, ptr %e2, align 4, !dbg !1220
  br label %if.exit89, !dbg !1220

if.exit89:                                        ; preds = %if.then88, %if.exit86
    #dbg_declare(ptr %ebuf0, !1221, !DIExpression(), !1225)
  store i8 0, ptr %ebuf0, align 1, !dbg !1225
  %ptradd90 = getelementptr inbounds i8, ptr %ebuf0, i64 1, !dbg !1225
  store i8 0, ptr %ptradd90, align 1, !dbg !1225
  %ptradd91 = getelementptr inbounds i8, ptr %ebuf0, i64 2, !dbg !1225
  store i8 0, ptr %ptradd91, align 1, !dbg !1225
  %ptradd92 = getelementptr inbounds i8, ptr %ebuf0, i64 3, !dbg !1225
  store i8 0, ptr %ptradd92, align 1, !dbg !1225
  %ptradd93 = getelementptr inbounds i8, ptr %ebuf0, i64 4, !dbg !1225
  store i8 0, ptr %ptradd93, align 1, !dbg !1225
  %ptradd94 = getelementptr inbounds i8, ptr %ebuf0, i64 5, !dbg !1225
  store i8 0, ptr %ptradd94, align 1, !dbg !1225
  %ptradd95 = getelementptr inbounds i8, ptr %ebuf0, i64 6, !dbg !1225
  store i8 0, ptr %ptradd95, align 1, !dbg !1225
  %ptradd96 = getelementptr inbounds i8, ptr %ebuf0, i64 7, !dbg !1225
  store i8 0, ptr %ptradd96, align 1, !dbg !1225
  %ptradd97 = getelementptr inbounds i8, ptr %ebuf0, i64 8, !dbg !1225
  store i8 0, ptr %ptradd97, align 1, !dbg !1225
  %ptradd98 = getelementptr inbounds i8, ptr %ebuf0, i64 9, !dbg !1225
  store i8 0, ptr %ptradd98, align 1, !dbg !1225
  %ptradd99 = getelementptr inbounds i8, ptr %ebuf0, i64 10, !dbg !1225
  store i8 0, ptr %ptradd99, align 1, !dbg !1225
  %ptradd100 = getelementptr inbounds i8, ptr %ebuf0, i64 11, !dbg !1225
  store i8 0, ptr %ptradd100, align 1, !dbg !1225
    #dbg_declare(ptr %ebuf, !1226, !DIExpression(), !1227)
  %ptradd_any = getelementptr i8, ptr %ebuf0, i64 12, !dbg !1227
  store ptr %ptradd_any, ptr %ebuf, align 8, !dbg !1227
    #dbg_declare(ptr %buf_array, !1228, !DIExpression(), !1232)
  call void @llvm.memset.p0.i64(ptr align 16 %buf_array, i8 0, i64 22, i1 false), !dbg !1232
    #dbg_declare(ptr %buf, !1233, !DIExpression(), !1234)
  store ptr %buf_array, ptr %buf, align 8, !dbg !1234
    #dbg_declare(ptr %p, !1235, !DIExpression(), !1236)
  %84 = load ptr, ptr %self, align 8, !dbg !1236
  %ptradd101 = getelementptr inbounds i8, ptr %84, i64 16, !dbg !1236
  %85 = load i32, ptr %ptradd101, align 8, !dbg !1236
  %lshrl102 = lshr i32 %85, 6, !dbg !1236
  %86 = and i32 1, %lshrl102, !dbg !1236
  %trunc103 = trunc i32 %86 to i8, !dbg !1236
  %87 = trunc i8 %trunc103 to i1, !dbg !1236
  br i1 %87, label %cond.lhs, label %cond.rhs, !dbg !1236

cond.lhs:                                         ; preds = %if.exit89
  %88 = load ptr, ptr %self, align 8, !dbg !1236
  %ptradd104 = getelementptr inbounds i8, ptr %88, i64 16, !dbg !1236
  %ptradd105 = getelementptr inbounds i8, ptr %ptradd104, i64 8, !dbg !1236
  %89 = load i32, ptr %ptradd105, align 8, !dbg !1236
  br label %cond.phi, !dbg !1236

cond.rhs:                                         ; preds = %if.exit89
  br label %cond.phi, !dbg !1236

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val106 = phi i32 [ %89, %cond.lhs ], [ -1, %cond.rhs ], !dbg !1236
  %sext = sext i32 %val106 to i64, !dbg !1236
  store i64 %sext, ptr %p, align 8, !dbg !1236
  %90 = load i32, ptr %formatting, align 4, !dbg !1237
  %eq = icmp eq i32 %90, 3, !dbg !1237
  br i1 %eq, label %if.then107, label %if.exit347, !dbg !1237

if.then107:                                       ; preds = %cond.phi
    #dbg_declare(ptr %round, !1238, !DIExpression(), !1240)
  store double 8.000000e+00, ptr %round, align 8, !dbg !1240
  %91 = load i64, ptr %pl, align 8, !dbg !1241
  %add108 = add i64 %91, 2, !dbg !1241
  store i64 %add108, ptr %pl, align 8, !dbg !1241
  %92 = load i64, ptr %p, align 8, !dbg !1242
  %gt109 = icmp sgt i64 %92, 0, !dbg !1242
  br i1 %gt109, label %and.rhs, label %and.phi, !dbg !1242

and.rhs:                                          ; preds = %if.then107
  %93 = load i64, ptr %p, align 8, !dbg !1242
  %lt110 = icmp slt i64 %93, 12, !dbg !1242
  br label %and.phi, !dbg !1242

and.phi:                                          ; preds = %and.rhs, %if.then107
  %val111 = phi i1 [ false, %if.then107 ], [ %lt110, %and.rhs ], !dbg !1242
  br i1 %val111, label %if.then112, label %if.exit125, !dbg !1242

if.then112:                                       ; preds = %and.phi
    #dbg_declare(ptr %re, !1243, !DIExpression(), !1245)
  %94 = load i64, ptr %p, align 8, !dbg !1245
  %trunc113 = trunc i64 %94 to i32, !dbg !1245
  %sub114 = sub i32 12, %trunc113, !dbg !1245
  store i32 %sub114, ptr %re, align 4, !dbg !1245
  %95 = load double, ptr %round, align 8, !dbg !1246
  %fmul115 = fmul double %95, 2.000000e+00, !dbg !1246
  store double %fmul115, ptr %round, align 8, !dbg !1246
  br label %loop.cond, !dbg !1247

loop.cond:                                        ; preds = %loop.body, %if.then112
  %96 = load i32, ptr %re, align 4, !dbg !1248
  %sub116 = sub i32 %96, 1, !dbg !1248
  store i32 %sub116, ptr %re, align 4, !dbg !1248
  %i2b117 = icmp ne i32 %96, 0, !dbg !1248
  br i1 %i2b117, label %loop.body, label %loop.exit, !dbg !1248

loop.body:                                        ; preds = %loop.cond
  %97 = load double, ptr %round, align 8, !dbg !1248
  %fmul118 = fmul double %97, 1.600000e+01, !dbg !1248
  store double %fmul118, ptr %round, align 8, !dbg !1248
  br label %loop.cond, !dbg !1248

loop.exit:                                        ; preds = %loop.cond
  %98 = load i8, ptr %is_neg, align 1, !dbg !1250
  %99 = trunc i8 %98 to i1, !dbg !1250
  br i1 %99, label %if.then119, label %if.else, !dbg !1250

if.then119:                                       ; preds = %loop.exit
  %100 = load double, ptr %y, align 8, !dbg !1251
  %fneg120 = fneg double %100, !dbg !1251
  store double %fneg120, ptr %y, align 8, !dbg !1251
  %101 = load double, ptr %y, align 8, !dbg !1253
  %102 = load double, ptr %round, align 8, !dbg !1253
  %fsub = fsub double %101, %102, !dbg !1253
  store double %fsub, ptr %y, align 8, !dbg !1253
  %103 = load double, ptr %y, align 8, !dbg !1254
  %104 = load double, ptr %round, align 8, !dbg !1254
  %fadd = fadd double %103, %104, !dbg !1254
  store double %fadd, ptr %y, align 8, !dbg !1254
  %105 = load double, ptr %y, align 8, !dbg !1255
  %fneg121 = fneg double %105, !dbg !1255
  store double %fneg121, ptr %y, align 8, !dbg !1255
  br label %if.exit124, !dbg !1255

if.else:                                          ; preds = %loop.exit
  %106 = load double, ptr %y, align 8, !dbg !1256
  %107 = load double, ptr %round, align 8, !dbg !1256
  %fadd122 = fadd double %106, %107, !dbg !1256
  store double %fadd122, ptr %y, align 8, !dbg !1256
  %108 = load double, ptr %y, align 8, !dbg !1258
  %109 = load double, ptr %round, align 8, !dbg !1258
  %fsub123 = fsub double %108, %109, !dbg !1258
  store double %fsub123, ptr %y, align 8, !dbg !1258
  br label %if.exit124, !dbg !1258

if.exit124:                                       ; preds = %if.else, %if.then119
  br label %if.exit125, !dbg !1258

if.exit125:                                       ; preds = %if.exit124, %and.phi
    #dbg_declare(ptr %estr, !1259, !DIExpression(), !1260)
  %110 = load i32, ptr %e2, align 4, !dbg !1260
  %lt126 = icmp slt i32 %110, 0, !dbg !1260
  br i1 %lt126, label %cond.lhs127, label %cond.rhs129, !dbg !1260

cond.lhs127:                                      ; preds = %if.exit125
  %111 = load i32, ptr %e2, align 4, !dbg !1260
  %neg = sub i32 0, %111, !dbg !1260
  %sext128 = sext i32 %neg to i128, !dbg !1260
  br label %cond.phi131, !dbg !1260

cond.rhs129:                                      ; preds = %if.exit125
  %112 = load i32, ptr %e2, align 4, !dbg !1260
  %sext130 = sext i32 %112 to i128, !dbg !1260
  br label %cond.phi131, !dbg !1260

cond.phi131:                                      ; preds = %cond.rhs129, %cond.lhs127
  %val132 = phi i128 [ %sext128, %cond.lhs127 ], [ %sext130, %cond.rhs129 ], !dbg !1260
  store i128 %val132, ptr %indirectarg133, align 16
  %113 = load ptr, ptr %ebuf, align 8
  %114 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg133, ptr %113), !dbg !1260
  store ptr %114, ptr %estr, align 8, !dbg !1260
  %115 = load ptr, ptr %estr, align 8, !dbg !1261
  %116 = load ptr, ptr %ebuf, align 8, !dbg !1261
  %eq134 = icmp eq ptr %115, %116, !dbg !1261
  br i1 %eq134, label %if.then135, label %if.exit143, !dbg !1261

if.then135:                                       ; preds = %cond.phi131
  %117 = load ptr, ptr %estr, align 8, !dbg !1261
  %ptradd_any136 = getelementptr i8, ptr %117, i8 -1, !dbg !1261
  store ptr %ptradd_any136, ptr %estr, align 8, !dbg !1261
  %checknull137 = icmp eq ptr %ptradd_any136, null, !dbg !1261
  %118 = call i1 @llvm.expect.i1(i1 %checknull137, i1 false), !dbg !1261
  br i1 %118, label %panic138, label %checkok142, !dbg !1261

checkok142:                                       ; preds = %if.then135
  store i8 48, ptr %ptradd_any136, align 1, !dbg !1261
  br label %if.exit143, !dbg !1261

if.exit143:                                       ; preds = %checkok142, %cond.phi131
  %119 = load ptr, ptr %estr, align 8, !dbg !1262
  %ptradd_any144 = getelementptr i8, ptr %119, i8 -1, !dbg !1262
  store ptr %ptradd_any144, ptr %estr, align 8, !dbg !1262
  %checknull145 = icmp eq ptr %ptradd_any144, null, !dbg !1262
  %120 = call i1 @llvm.expect.i1(i1 %checknull145, i1 false), !dbg !1262
  br i1 %120, label %panic146, label %checkok150, !dbg !1262

checkok150:                                       ; preds = %if.exit143
  %121 = load i32, ptr %e2, align 4, !dbg !1262
  %lt151 = icmp slt i32 %121, 0, !dbg !1262
  %ternary152 = select i1 %lt151, i8 45, i8 43, !dbg !1262
  store i8 %ternary152, ptr %ptradd_any144, align 1, !dbg !1262
  %122 = load ptr, ptr %estr, align 8, !dbg !1263
  %ptradd_any153 = getelementptr i8, ptr %122, i8 -1, !dbg !1263
  store ptr %ptradd_any153, ptr %estr, align 8, !dbg !1263
  %checknull154 = icmp eq ptr %ptradd_any153, null, !dbg !1263
  %123 = call i1 @llvm.expect.i1(i1 %checknull154, i1 false), !dbg !1263
  br i1 %123, label %panic155, label %checkok159, !dbg !1263

checkok159:                                       ; preds = %checkok150
  %124 = load ptr, ptr %self, align 8, !dbg !1263
  %ptradd160 = getelementptr inbounds i8, ptr %124, i64 16, !dbg !1263
  %125 = load i32, ptr %ptradd160, align 8, !dbg !1263
  %lshrl161 = lshr i32 %125, 5, !dbg !1263
  %126 = and i32 1, %lshrl161, !dbg !1263
  %trunc162 = trunc i32 %126 to i8, !dbg !1263
  %127 = trunc i8 %trunc162 to i1, !dbg !1263
  %ternary163 = select i1 %127, i8 80, i8 112, !dbg !1263
  store i8 %ternary163, ptr %ptradd_any153, align 1, !dbg !1263
    #dbg_declare(ptr %s164, !1264, !DIExpression(), !1265)
  %128 = load ptr, ptr %buf, align 8, !dbg !1265
  store ptr %128, ptr %s164, align 8, !dbg !1265
    #dbg_declare(ptr %xdigits, !1266, !DIExpression(), !1267)
  %129 = load ptr, ptr %self, align 8, !dbg !1267
  %ptradd165 = getelementptr inbounds i8, ptr %129, i64 16, !dbg !1267
  %130 = load i32, ptr %ptradd165, align 8, !dbg !1267
  %lshrl166 = lshr i32 %130, 5, !dbg !1267
  %131 = and i32 1, %lshrl166, !dbg !1267
  %trunc167 = trunc i32 %131 to i8, !dbg !1267
  %132 = trunc i8 %trunc167 to i1, !dbg !1267
  %ternary168 = select i1 %132, ptr @std.io.XDIGITS_H, ptr @std.io.XDIGITS_L, !dbg !1267
  store ptr %ternary168, ptr %xdigits, align 8, !dbg !1267
  br label %loop.body171, !dbg !1268

loop.cond169:                                     ; preds = %if.exit207
  %133 = load double, ptr %y, align 8, !dbg !1269
  %fpbool170 = fcmp une double %133, 0.000000e+00, !dbg !1269
  br i1 %fpbool170, label %loop.body171, label %loop.exit208, !dbg !1269

loop.body171:                                     ; preds = %loop.cond169, %checkok159
    #dbg_declare(ptr %x172, !1271, !DIExpression(), !1273)
  %134 = load double, ptr %y, align 8, !dbg !1273
  %fpsi = fptosi double %134 to i32, !dbg !1273
  store i32 %fpsi, ptr %x172, align 4, !dbg !1273
  %135 = load ptr, ptr %s164, align 8, !dbg !1274
  %ptradd_any173 = getelementptr i8, ptr %135, i8 1, !dbg !1274
  store ptr %ptradd_any173, ptr %s164, align 8, !dbg !1274
  %checknull174 = icmp eq ptr %135, null, !dbg !1274
  %136 = call i1 @llvm.expect.i1(i1 %checknull174, i1 false), !dbg !1274
  br i1 %136, label %panic175, label %checkok179, !dbg !1274

checkok179:                                       ; preds = %loop.body171
  %137 = load ptr, ptr %xdigits, align 8, !dbg !1274
  %138 = load i32, ptr %x172, align 4, !dbg !1274
  %sext180 = sext i32 %138 to i64, !dbg !1274
  %ptradd181 = getelementptr inbounds i8, ptr %137, i64 %sext180, !dbg !1274
  %139 = load i8, ptr %ptradd181, align 1, !dbg !1274
  store i8 %139, ptr %135, align 1, !dbg !1274
  %140 = load double, ptr %y, align 8, !dbg !1275
  %141 = load i32, ptr %x172, align 4, !dbg !1275
  %sifp = sitofp i32 %141 to double, !dbg !1275
  %fsub182 = fsub double %140, %sifp, !dbg !1275
  %fmul183 = fmul double 1.600000e+01, %fsub182, !dbg !1275
  store double %fmul183, ptr %y, align 8, !dbg !1275
  %142 = load ptr, ptr %s164, align 8, !dbg !1276
  %143 = load ptr, ptr %buf, align 8, !dbg !1276
  %144 = ptrtoint ptr %143 to i64, !dbg !1276
  %145 = ptrtoint ptr %142 to i64, !dbg !1276
  %146 = sub i64 %145, %144, !dbg !1276
  %147 = sdiv exact i64 %146, 1, !dbg !1276
  %eq184 = icmp eq i64 %147, 1, !dbg !1276
  br i1 %eq184, label %and.rhs185, label %and.phi197, !dbg !1276

and.rhs185:                                       ; preds = %checkok179
  %148 = load double, ptr %y, align 8, !dbg !1276
  %fpbool186 = fcmp une double %148, 0.000000e+00, !dbg !1276
  br i1 %fpbool186, label %or.phi189, label %or.rhs187, !dbg !1276

or.rhs187:                                        ; preds = %and.rhs185
  %149 = load i64, ptr %p, align 8, !dbg !1276
  %gt188 = icmp sgt i64 %149, 0, !dbg !1276
  br label %or.phi189, !dbg !1276

or.phi189:                                        ; preds = %or.rhs187, %and.rhs185
  %val190 = phi i1 [ true, %and.rhs185 ], [ %gt188, %or.rhs187 ], !dbg !1276
  br i1 %val190, label %or.phi195, label %or.rhs191, !dbg !1276

or.rhs191:                                        ; preds = %or.phi189
  %150 = load ptr, ptr %self, align 8, !dbg !1276
  %ptradd192 = getelementptr inbounds i8, ptr %150, i64 16, !dbg !1276
  %151 = load i32, ptr %ptradd192, align 8, !dbg !1276
  %lshrl193 = lshr i32 %151, 4, !dbg !1276
  %152 = and i32 1, %lshrl193, !dbg !1276
  %trunc194 = trunc i32 %152 to i8, !dbg !1276
  %153 = trunc i8 %trunc194 to i1, !dbg !1276
  br label %or.phi195, !dbg !1276

or.phi195:                                        ; preds = %or.rhs191, %or.phi189
  %val196 = phi i1 [ true, %or.phi189 ], [ %153, %or.rhs191 ], !dbg !1276
  br label %and.phi197, !dbg !1276

and.phi197:                                       ; preds = %or.phi195, %checkok179
  %val198 = phi i1 [ false, %checkok179 ], [ %val196, %or.phi195 ], !dbg !1276
  br i1 %val198, label %if.then199, label %if.exit207, !dbg !1276

if.then199:                                       ; preds = %and.phi197
  %154 = load ptr, ptr %s164, align 8, !dbg !1276
  %ptradd_any200 = getelementptr i8, ptr %154, i8 1, !dbg !1276
  store ptr %ptradd_any200, ptr %s164, align 8, !dbg !1276
  %checknull201 = icmp eq ptr %154, null, !dbg !1276
  %155 = call i1 @llvm.expect.i1(i1 %checknull201, i1 false), !dbg !1276
  br i1 %155, label %panic202, label %checkok206, !dbg !1276

checkok206:                                       ; preds = %if.then199
  store i8 46, ptr %154, align 1, !dbg !1276
  br label %if.exit207, !dbg !1276

if.exit207:                                       ; preds = %checkok206, %and.phi197
  br label %loop.cond169, !dbg !1276

loop.exit208:                                     ; preds = %loop.cond169
    #dbg_declare(ptr %outlen, !1277, !DIExpression(), !1278)
  %156 = load ptr, ptr %s164, align 8, !dbg !1278
  %157 = load ptr, ptr %buf, align 8, !dbg !1278
  %158 = ptrtoint ptr %157 to i64, !dbg !1278
  %159 = ptrtoint ptr %156 to i64, !dbg !1278
  %160 = sub i64 %159, %158, !dbg !1278
  %161 = sdiv exact i64 %160, 1, !dbg !1278
  store i64 %161, ptr %outlen, align 8, !dbg !1278
    #dbg_declare(ptr %explen, !1279, !DIExpression(), !1280)
  %162 = load ptr, ptr %ebuf, align 8, !dbg !1280
  %163 = load ptr, ptr %estr, align 8, !dbg !1280
  %164 = ptrtoint ptr %163 to i64, !dbg !1280
  %165 = ptrtoint ptr %162 to i64, !dbg !1280
  %166 = sub i64 %165, %164, !dbg !1280
  %167 = sdiv exact i64 %166, 1, !dbg !1280
  store i64 %167, ptr %explen, align 8, !dbg !1280
  %168 = load i64, ptr %p, align 8, !dbg !1281
  %169 = load i64, ptr %explen, align 8, !dbg !1281
  %sub209 = sub i64 2147483645, %169, !dbg !1281
  %170 = load i64, ptr %pl, align 8, !dbg !1281
  %sub210 = sub i64 %sub209, %170, !dbg !1281
  %gt211 = icmp sgt i64 %168, %sub210, !dbg !1281
  br i1 %gt211, label %if.then212, label %if.exit213, !dbg !1281

if.then212:                                       ; preds = %loop.exit208
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1281

if.exit213:                                       ; preds = %loop.exit208
    #dbg_declare(ptr %len214, !1282, !DIExpression(), !1283)
  store i64 0, ptr %len214, align 8, !dbg !1283
    #dbg_declare(ptr %l, !1284, !DIExpression(), !1285)
  %171 = load i64, ptr %p, align 8, !dbg !1285
  %i2b215 = icmp ne i64 %171, 0, !dbg !1285
  br i1 %i2b215, label %and.rhs216, label %and.phi219, !dbg !1285

and.rhs216:                                       ; preds = %if.exit213
  %172 = load i64, ptr %outlen, align 8, !dbg !1285
  %sub217 = sub i64 %172, 2, !dbg !1285
  %173 = load i64, ptr %p, align 8, !dbg !1285
  %lt218 = icmp slt i64 %sub217, %173, !dbg !1285
  br label %and.phi219, !dbg !1285

and.phi219:                                       ; preds = %and.rhs216, %if.exit213
  %val220 = phi i1 [ false, %if.exit213 ], [ %lt218, %and.rhs216 ], !dbg !1285
  br i1 %val220, label %cond.lhs221, label %cond.rhs224, !dbg !1285

cond.lhs221:                                      ; preds = %and.phi219
  %174 = load i64, ptr %p, align 8, !dbg !1286
  %add222 = add i64 %174, 2, !dbg !1286
  %175 = load i64, ptr %explen, align 8, !dbg !1286
  %add223 = add i64 %add222, %175, !dbg !1286
  br label %cond.phi226, !dbg !1286

cond.rhs224:                                      ; preds = %and.phi219
  %176 = load i64, ptr %outlen, align 8, !dbg !1287
  %177 = load i64, ptr %explen, align 8, !dbg !1287
  %add225 = add i64 %176, %177, !dbg !1287
  br label %cond.phi226, !dbg !1287

cond.phi226:                                      ; preds = %cond.rhs224, %cond.lhs221
  %val227 = phi i64 [ %add223, %cond.lhs221 ], [ %add225, %cond.rhs224 ], !dbg !1287
  store i64 %val227, ptr %l, align 8, !dbg !1287
  %178 = load ptr, ptr %self, align 8, !dbg !1288
  %ptradd228 = getelementptr inbounds i8, ptr %178, i64 16, !dbg !1288
  %179 = load i32, ptr %ptradd228, align 8, !dbg !1288
  %lshrl229 = lshr i32 %179, 1, !dbg !1288
  %180 = and i32 1, %lshrl229, !dbg !1288
  %trunc230 = trunc i32 %180 to i8, !dbg !1288
  %181 = trunc i8 %trunc230 to i1, !dbg !1288
  %not231 = xor i1 %181, true, !dbg !1288
  br i1 %not231, label %and.rhs232, label %and.phi236, !dbg !1288

and.rhs232:                                       ; preds = %cond.phi226
  %182 = load ptr, ptr %self, align 8, !dbg !1288
  %ptradd233 = getelementptr inbounds i8, ptr %182, i64 16, !dbg !1288
  %183 = load i32, ptr %ptradd233, align 8, !dbg !1288
  %184 = and i32 1, %183, !dbg !1288
  %trunc234 = trunc i32 %184 to i8, !dbg !1288
  %185 = trunc i8 %trunc234 to i1, !dbg !1288
  %not235 = xor i1 %185, true, !dbg !1288
  br label %and.phi236, !dbg !1288

and.phi236:                                       ; preds = %and.rhs232, %cond.phi226
  %val237 = phi i1 [ false, %cond.phi226 ], [ %not235, %and.rhs232 ], !dbg !1288
  br i1 %val237, label %if.then238, label %if.exit251, !dbg !1288

if.then238:                                       ; preds = %and.phi236
  %186 = load i64, ptr %len214, align 8, !dbg !1288
  %187 = load ptr, ptr %self, align 8, !dbg !1288
  %ptradd240 = getelementptr inbounds i8, ptr %187, i64 16, !dbg !1288
  %ptradd241 = getelementptr inbounds i8, ptr %ptradd240, i64 4, !dbg !1288
  %188 = load i32, ptr %ptradd241, align 4, !dbg !1288
  %zext242 = zext i32 %188 to i64, !dbg !1288
  %189 = load i64, ptr %pl, align 8, !dbg !1288
  %190 = load i64, ptr %l, align 8, !dbg !1288
  %add243 = add i64 %189, %190, !dbg !1288
  %191 = load ptr, ptr %self, align 8
  %192 = call i64 @std.io.Formatter.pad(ptr %retparam244, ptr %191, i8 32, i64 %zext242, i64 %add243) #5, !dbg !1288
  %not_err245 = icmp eq i64 %192, 0, !dbg !1288
  %193 = call i1 @llvm.expect.i1(i1 %not_err245, i1 true), !dbg !1288
  br i1 %193, label %after_check247, label %assign_optional246, !dbg !1288

assign_optional246:                               ; preds = %if.then238
  store i64 %192, ptr %error_var239, align 8, !dbg !1288
  br label %guard_block248, !dbg !1288

after_check247:                                   ; preds = %if.then238
  br label %noerr_block249, !dbg !1288

guard_block248:                                   ; preds = %assign_optional246
  %194 = load i64, ptr %error_var239, align 8, !dbg !1288
  ret i64 %194, !dbg !1288

noerr_block249:                                   ; preds = %after_check247
  %195 = load i64, ptr %retparam244, align 8, !dbg !1288
  %add250 = add i64 %186, %195, !dbg !1288
  store i64 %add250, ptr %len214, align 8, !dbg !1288
  br label %if.exit251, !dbg !1288

if.exit251:                                       ; preds = %noerr_block249, %and.phi236
  %196 = load i8, ptr %is_neg, align 1, !dbg !1289
  %197 = trunc i8 %196 to i1, !dbg !1289
  br i1 %197, label %or.phi256, label %or.rhs252, !dbg !1289

or.rhs252:                                        ; preds = %if.exit251
  %198 = load ptr, ptr %self, align 8, !dbg !1289
  %ptradd253 = getelementptr inbounds i8, ptr %198, i64 16, !dbg !1289
  %199 = load i32, ptr %ptradd253, align 8, !dbg !1289
  %lshrl254 = lshr i32 %199, 2, !dbg !1289
  %200 = and i32 1, %lshrl254, !dbg !1289
  %trunc255 = trunc i32 %200 to i8, !dbg !1289
  %201 = trunc i8 %trunc255 to i1, !dbg !1289
  br label %or.phi256, !dbg !1289

or.phi256:                                        ; preds = %or.rhs252, %if.exit251
  %val257 = phi i1 [ true, %if.exit251 ], [ %201, %or.rhs252 ], !dbg !1289
  br i1 %val257, label %if.then258, label %if.exit268, !dbg !1289

if.then258:                                       ; preds = %or.phi256
  %202 = load i64, ptr %len214, align 8, !dbg !1289
  %203 = load i8, ptr %is_neg, align 1, !dbg !1289
  %204 = trunc i8 %203 to i1, !dbg !1289
  %ternary260 = select i1 %204, i8 45, i8 43, !dbg !1289
  %205 = load ptr, ptr %self, align 8
  %206 = call i64 @std.io.Formatter.out(ptr %retparam261, ptr %205, i8 %ternary260), !dbg !1289
  %not_err262 = icmp eq i64 %206, 0, !dbg !1289
  %207 = call i1 @llvm.expect.i1(i1 %not_err262, i1 true), !dbg !1289
  br i1 %207, label %after_check264, label %assign_optional263, !dbg !1289

assign_optional263:                               ; preds = %if.then258
  store i64 %206, ptr %error_var259, align 8, !dbg !1289
  br label %guard_block265, !dbg !1289

after_check264:                                   ; preds = %if.then258
  br label %noerr_block266, !dbg !1289

guard_block265:                                   ; preds = %assign_optional263
  %208 = load i64, ptr %error_var259, align 8, !dbg !1289
  ret i64 %208, !dbg !1289

noerr_block266:                                   ; preds = %after_check264
  %209 = load i64, ptr %retparam261, align 8, !dbg !1289
  %add267 = add i64 %202, %209, !dbg !1289
  store i64 %add267, ptr %len214, align 8, !dbg !1289
  br label %if.exit268, !dbg !1289

if.exit268:                                       ; preds = %noerr_block266, %or.phi256
  %210 = load i64, ptr %len214, align 8, !dbg !1290
  %211 = load ptr, ptr %self, align 8, !dbg !1290
  %ptradd270 = getelementptr inbounds i8, ptr %211, i64 16, !dbg !1290
  %212 = load i32, ptr %ptradd270, align 8, !dbg !1290
  %lshrl271 = lshr i32 %212, 5, !dbg !1290
  %213 = and i32 1, %lshrl271, !dbg !1290
  %trunc272 = trunc i32 %213 to i8, !dbg !1290
  %214 = trunc i8 %trunc272 to i1, !dbg !1290
  %ternary273 = select i1 %214, %"char[]" { ptr @.str.172, i64 2 }, %"char[]" { ptr @.str.173, i64 2 }, !dbg !1290
  %215 = load ptr, ptr %self, align 8
  store %"char[]" %ternary273, ptr %indirectarg275, align 8
  %216 = call i64 @std.io.Formatter.out_chars(ptr %retparam274, ptr %215, ptr align 8 %indirectarg275), !dbg !1290
  %not_err276 = icmp eq i64 %216, 0, !dbg !1290
  %217 = call i1 @llvm.expect.i1(i1 %not_err276, i1 true), !dbg !1290
  br i1 %217, label %after_check278, label %assign_optional277, !dbg !1290

assign_optional277:                               ; preds = %if.exit268
  store i64 %216, ptr %error_var269, align 8, !dbg !1290
  br label %guard_block279, !dbg !1290

after_check278:                                   ; preds = %if.exit268
  br label %noerr_block280, !dbg !1290

guard_block279:                                   ; preds = %assign_optional277
  %218 = load i64, ptr %error_var269, align 8, !dbg !1290
  ret i64 %218, !dbg !1290

noerr_block280:                                   ; preds = %after_check278
  %219 = load i64, ptr %retparam274, align 8, !dbg !1290
  %add281 = add i64 %210, %219, !dbg !1290
  store i64 %add281, ptr %len214, align 8, !dbg !1290
  %220 = load ptr, ptr %self, align 8, !dbg !1291
  %ptradd282 = getelementptr inbounds i8, ptr %220, i64 16, !dbg !1291
  %221 = load i32, ptr %ptradd282, align 8, !dbg !1291
  %222 = and i32 1, %221, !dbg !1291
  %trunc283 = trunc i32 %222 to i8, !dbg !1291
  %223 = trunc i8 %trunc283 to i1, !dbg !1291
  br i1 %223, label %if.then284, label %if.exit297, !dbg !1291

if.then284:                                       ; preds = %noerr_block280
  %224 = load i64, ptr %len214, align 8, !dbg !1291
  %225 = load ptr, ptr %self, align 8, !dbg !1291
  %ptradd286 = getelementptr inbounds i8, ptr %225, i64 16, !dbg !1291
  %ptradd287 = getelementptr inbounds i8, ptr %ptradd286, i64 4, !dbg !1291
  %226 = load i32, ptr %ptradd287, align 4, !dbg !1291
  %zext288 = zext i32 %226 to i64, !dbg !1291
  %227 = load i64, ptr %pl, align 8, !dbg !1291
  %228 = load i64, ptr %l, align 8, !dbg !1291
  %add289 = add i64 %227, %228, !dbg !1291
  %229 = load ptr, ptr %self, align 8
  %230 = call i64 @std.io.Formatter.pad(ptr %retparam290, ptr %229, i8 48, i64 %zext288, i64 %add289) #5, !dbg !1291
  %not_err291 = icmp eq i64 %230, 0, !dbg !1291
  %231 = call i1 @llvm.expect.i1(i1 %not_err291, i1 true), !dbg !1291
  br i1 %231, label %after_check293, label %assign_optional292, !dbg !1291

assign_optional292:                               ; preds = %if.then284
  store i64 %230, ptr %error_var285, align 8, !dbg !1291
  br label %guard_block294, !dbg !1291

after_check293:                                   ; preds = %if.then284
  br label %noerr_block295, !dbg !1291

guard_block294:                                   ; preds = %assign_optional292
  %232 = load i64, ptr %error_var285, align 8, !dbg !1291
  ret i64 %232, !dbg !1291

noerr_block295:                                   ; preds = %after_check293
  %233 = load i64, ptr %retparam290, align 8, !dbg !1291
  %add296 = add i64 %224, %233, !dbg !1291
  store i64 %add296, ptr %len214, align 8, !dbg !1291
  br label %if.exit297, !dbg !1291

if.exit297:                                       ; preds = %noerr_block295, %noerr_block280
  %234 = load i64, ptr %len214, align 8, !dbg !1292
  %235 = load ptr, ptr %buf, align 8, !dbg !1292
  %236 = load i64, ptr %outlen, align 8, !dbg !1292
  %add299 = add i64 0, %236, !dbg !1292
  %size = sub i64 %add299, 0, !dbg !1292
  %237 = insertvalue %"char[]" undef, ptr %235, 0, !dbg !1292
  %238 = insertvalue %"char[]" %237, i64 %size, 1, !dbg !1292
  %239 = load ptr, ptr %self, align 8
  store %"char[]" %238, ptr %indirectarg301, align 8
  %240 = call i64 @std.io.Formatter.out_chars(ptr %retparam300, ptr %239, ptr align 8 %indirectarg301), !dbg !1292
  %not_err302 = icmp eq i64 %240, 0, !dbg !1292
  %241 = call i1 @llvm.expect.i1(i1 %not_err302, i1 true), !dbg !1292
  br i1 %241, label %after_check304, label %assign_optional303, !dbg !1292

assign_optional303:                               ; preds = %if.exit297
  store i64 %240, ptr %error_var298, align 8, !dbg !1292
  br label %guard_block305, !dbg !1292

after_check304:                                   ; preds = %if.exit297
  br label %noerr_block306, !dbg !1292

guard_block305:                                   ; preds = %assign_optional303
  %242 = load i64, ptr %error_var298, align 8, !dbg !1292
  ret i64 %242, !dbg !1292

noerr_block306:                                   ; preds = %after_check304
  %243 = load i64, ptr %retparam300, align 8, !dbg !1292
  %add307 = add i64 %234, %243, !dbg !1292
  store i64 %add307, ptr %len214, align 8, !dbg !1292
  %244 = load i64, ptr %len214, align 8, !dbg !1293
  %245 = load i64, ptr %l, align 8, !dbg !1293
  %246 = load i64, ptr %outlen, align 8, !dbg !1293
  %sub309 = sub i64 %245, %246, !dbg !1293
  %247 = load i64, ptr %explen, align 8, !dbg !1293
  %sub310 = sub i64 %sub309, %247, !dbg !1293
  %248 = load ptr, ptr %self, align 8
  %249 = call i64 @std.io.Formatter.pad(ptr %retparam311, ptr %248, i8 48, i64 %sub310, i64 0) #5, !dbg !1293
  %not_err312 = icmp eq i64 %249, 0, !dbg !1293
  %250 = call i1 @llvm.expect.i1(i1 %not_err312, i1 true), !dbg !1293
  br i1 %250, label %after_check314, label %assign_optional313, !dbg !1293

assign_optional313:                               ; preds = %noerr_block306
  store i64 %249, ptr %error_var308, align 8, !dbg !1293
  br label %guard_block315, !dbg !1293

after_check314:                                   ; preds = %noerr_block306
  br label %noerr_block316, !dbg !1293

guard_block315:                                   ; preds = %assign_optional313
  %251 = load i64, ptr %error_var308, align 8, !dbg !1293
  ret i64 %251, !dbg !1293

noerr_block316:                                   ; preds = %after_check314
  %252 = load i64, ptr %retparam311, align 8, !dbg !1293
  %add317 = add i64 %244, %252, !dbg !1293
  store i64 %add317, ptr %len214, align 8, !dbg !1293
  %253 = load i64, ptr %len214, align 8, !dbg !1294
  %254 = load ptr, ptr %estr, align 8, !dbg !1294
  %255 = load i64, ptr %explen, align 8, !dbg !1294
  %add319 = add i64 0, %255, !dbg !1294
  %size320 = sub i64 %add319, 0, !dbg !1294
  %256 = insertvalue %"char[]" undef, ptr %254, 0, !dbg !1294
  %257 = insertvalue %"char[]" %256, i64 %size320, 1, !dbg !1294
  %258 = load ptr, ptr %self, align 8
  store %"char[]" %257, ptr %indirectarg322, align 8
  %259 = call i64 @std.io.Formatter.out_chars(ptr %retparam321, ptr %258, ptr align 8 %indirectarg322), !dbg !1294
  %not_err323 = icmp eq i64 %259, 0, !dbg !1294
  %260 = call i1 @llvm.expect.i1(i1 %not_err323, i1 true), !dbg !1294
  br i1 %260, label %after_check325, label %assign_optional324, !dbg !1294

assign_optional324:                               ; preds = %noerr_block316
  store i64 %259, ptr %error_var318, align 8, !dbg !1294
  br label %guard_block326, !dbg !1294

after_check325:                                   ; preds = %noerr_block316
  br label %noerr_block327, !dbg !1294

guard_block326:                                   ; preds = %assign_optional324
  %261 = load i64, ptr %error_var318, align 8, !dbg !1294
  ret i64 %261, !dbg !1294

noerr_block327:                                   ; preds = %after_check325
  %262 = load i64, ptr %retparam321, align 8, !dbg !1294
  %add328 = add i64 %253, %262, !dbg !1294
  store i64 %add328, ptr %len214, align 8, !dbg !1294
  %263 = load ptr, ptr %self, align 8, !dbg !1295
  %ptradd329 = getelementptr inbounds i8, ptr %263, i64 16, !dbg !1295
  %264 = load i32, ptr %ptradd329, align 8, !dbg !1295
  %lshrl330 = lshr i32 %264, 1, !dbg !1295
  %265 = and i32 1, %lshrl330, !dbg !1295
  %trunc331 = trunc i32 %265 to i8, !dbg !1295
  %266 = trunc i8 %trunc331 to i1, !dbg !1295
  br i1 %266, label %if.then332, label %if.exit345, !dbg !1295

if.then332:                                       ; preds = %noerr_block327
  %267 = load i64, ptr %len214, align 8, !dbg !1295
  %268 = load ptr, ptr %self, align 8, !dbg !1295
  %ptradd334 = getelementptr inbounds i8, ptr %268, i64 16, !dbg !1295
  %ptradd335 = getelementptr inbounds i8, ptr %ptradd334, i64 4, !dbg !1295
  %269 = load i32, ptr %ptradd335, align 4, !dbg !1295
  %zext336 = zext i32 %269 to i64, !dbg !1295
  %270 = load i64, ptr %pl, align 8, !dbg !1295
  %271 = load i64, ptr %l, align 8, !dbg !1295
  %add337 = add i64 %270, %271, !dbg !1295
  %272 = load ptr, ptr %self, align 8
  %273 = call i64 @std.io.Formatter.pad(ptr %retparam338, ptr %272, i8 32, i64 %zext336, i64 %add337) #5, !dbg !1295
  %not_err339 = icmp eq i64 %273, 0, !dbg !1295
  %274 = call i1 @llvm.expect.i1(i1 %not_err339, i1 true), !dbg !1295
  br i1 %274, label %after_check341, label %assign_optional340, !dbg !1295

assign_optional340:                               ; preds = %if.then332
  store i64 %273, ptr %error_var333, align 8, !dbg !1295
  br label %guard_block342, !dbg !1295

after_check341:                                   ; preds = %if.then332
  br label %noerr_block343, !dbg !1295

guard_block342:                                   ; preds = %assign_optional340
  %275 = load i64, ptr %error_var333, align 8, !dbg !1295
  ret i64 %275, !dbg !1295

noerr_block343:                                   ; preds = %after_check341
  %276 = load i64, ptr %retparam338, align 8, !dbg !1295
  %add344 = add i64 %267, %276, !dbg !1295
  store i64 %add344, ptr %len214, align 8, !dbg !1295
  br label %if.exit345, !dbg !1295

if.exit345:                                       ; preds = %noerr_block343, %noerr_block327
  %277 = load i64, ptr %len214, align 8, !dbg !1296
  store i64 %277, ptr %0, align 8, !dbg !1296
  ret i64 0, !dbg !1296

if.exit347:                                       ; preds = %cond.phi
  %278 = load i64, ptr %p, align 8, !dbg !1297
  %lt348 = icmp slt i64 %278, 0, !dbg !1297
  br i1 %lt348, label %if.then349, label %if.exit350, !dbg !1297

if.then349:                                       ; preds = %if.exit347
  store i64 6, ptr %p, align 8, !dbg !1297
  br label %if.exit350, !dbg !1297

if.exit350:                                       ; preds = %if.then349, %if.exit347
  %279 = load double, ptr %y, align 8, !dbg !1298
  %fpbool351 = fcmp une double %279, 0.000000e+00, !dbg !1298
  br i1 %fpbool351, label %if.then352, label %if.exit355, !dbg !1298

if.then352:                                       ; preds = %if.exit350
  %280 = load double, ptr %y, align 8, !dbg !1299
  %fmul353 = fmul double %280, 0x41B0000000000000, !dbg !1299
  store double %fmul353, ptr %y, align 8, !dbg !1299
  %281 = load i32, ptr %e2, align 4, !dbg !1301
  %sub354 = sub i32 %281, 28, !dbg !1301
  store i32 %sub354, ptr %e2, align 4, !dbg !1301
  br label %if.exit355, !dbg !1301

if.exit355:                                       ; preds = %if.then352, %if.exit350
    #dbg_declare(ptr %a, !1302, !DIExpression(), !1304)
  store ptr null, ptr %a, align 8, !dbg !1304
    #dbg_declare(ptr %z, !1305, !DIExpression(), !1304)
  store ptr null, ptr %z, align 8, !dbg !1304
    #dbg_declare(ptr %r, !1306, !DIExpression(), !1304)
  store ptr null, ptr %r, align 8, !dbg !1304
  %282 = load i32, ptr %e2, align 4, !dbg !1307
  %lt356 = icmp slt i32 %282, 0, !dbg !1307
  br i1 %lt356, label %if.then357, label %if.else358, !dbg !1307

if.then357:                                       ; preds = %if.exit355
  store ptr %big, ptr %z, align 8, !dbg !1308
  store ptr %big, ptr %r, align 8, !dbg !1308
  store ptr %big, ptr %a, align 8, !dbg !1308
  br label %if.exit360, !dbg !1308

if.else358:                                       ; preds = %if.exit355
  %ptradd_any359 = getelementptr i8, ptr %big, i64 288, !dbg !1310
  store ptr %ptradd_any359, ptr %z, align 8, !dbg !1310
  store ptr %ptradd_any359, ptr %r, align 8, !dbg !1310
  store ptr %ptradd_any359, ptr %a, align 8, !dbg !1310
  br label %if.exit360, !dbg !1310

if.exit360:                                       ; preds = %if.else358, %if.then357
  br label %loop.body363, !dbg !1312

loop.cond361:                                     ; preds = %loop.body363
  %283 = load double, ptr %y, align 8, !dbg !1313
  %fpbool362 = fcmp une double %283, 0.000000e+00, !dbg !1313
  br i1 %fpbool362, label %loop.body363, label %loop.exit367, !dbg !1313

loop.body363:                                     ; preds = %loop.cond361, %if.exit360
    #dbg_declare(ptr %v, !1315, !DIExpression(), !1317)
  %284 = load ptr, ptr %z, align 8, !dbg !1317
  %ptradd_any364 = getelementptr i8, ptr %284, i8 4, !dbg !1317
  store ptr %ptradd_any364, ptr %z, align 8, !dbg !1317
  %285 = load double, ptr %y, align 8, !dbg !1317
  %fpui = fptoui double %285 to i32, !dbg !1317
  store i32 %fpui, ptr %284, align 4, !dbg !1317
  store i32 %fpui, ptr %v, align 4, !dbg !1317
  %286 = load double, ptr %y, align 8, !dbg !1318
  %287 = load i32, ptr %v, align 4, !dbg !1318
  %uifp = uitofp i32 %287 to double, !dbg !1318
  %fsub365 = fsub double %286, %uifp, !dbg !1318
  %fmul366 = fmul double 1.000000e+09, %fsub365, !dbg !1318
  store double %fmul366, ptr %y, align 8, !dbg !1318
  br label %loop.cond361, !dbg !1318

loop.exit367:                                     ; preds = %loop.cond361
  br label %loop.cond368, !dbg !1319

loop.cond368:                                     ; preds = %loop.exit421, %loop.exit367
  %288 = load i32, ptr %e2, align 4, !dbg !1320
  %gt369 = icmp sgt i32 %288, 0, !dbg !1320
  br i1 %gt369, label %loop.body370, label %loop.exit423, !dbg !1320

loop.body370:                                     ; preds = %loop.cond368
    #dbg_declare(ptr %carry, !1322, !DIExpression(), !1324)
  store i32 0, ptr %carry, align 4, !dbg !1324
    #dbg_declare(ptr %sh, !1325, !DIExpression(), !1326)
  store i32 29, ptr %x371, align 4
  %289 = load i32, ptr %e2, align 4
  store i32 %289, ptr %y372, align 4
  %290 = load i32, ptr %x371, align 4, !dbg !1327
  %291 = load i32, ptr %y372, align 4, !dbg !1327
  %292 = call i32 @llvm.smin.i32(i32 %290, i32 %291), !dbg !1327
  store i32 %292, ptr %sh, align 4, !dbg !1327
    #dbg_declare(ptr %d, !1329, !DIExpression(), !1331)
  %293 = load ptr, ptr %z, align 8, !dbg !1331
  %ptradd_any373 = getelementptr i8, ptr %293, i64 -4, !dbg !1331
  store ptr %ptradd_any373, ptr %d, align 8, !dbg !1331
  br label %loop.cond374, !dbg !1331

loop.cond374:                                     ; preds = %checkok398, %loop.body370
  %294 = load ptr, ptr %d, align 8, !dbg !1331
  %295 = load ptr, ptr %a, align 8, !dbg !1331
  %ge = icmp uge ptr %294, %295, !dbg !1331
  br i1 %ge, label %loop.body375, label %loop.exit402, !dbg !1331

loop.body375:                                     ; preds = %loop.cond374
    #dbg_declare(ptr %x376, !1332, !DIExpression(), !1334)
  %296 = load ptr, ptr %d, align 8, !dbg !1334
  %checknull377 = icmp eq ptr %296, null, !dbg !1334
  %297 = call i1 @llvm.expect.i1(i1 %checknull377, i1 false), !dbg !1334
  br i1 %297, label %panic378, label %checkok382, !dbg !1334

checkok382:                                       ; preds = %loop.body375
  %298 = load i32, ptr %296, align 4, !dbg !1334
  %zext383 = zext i32 %298 to i64, !dbg !1334
  %299 = load i32, ptr %sh, align 4, !dbg !1334
  %zext384 = zext i32 %299 to i64, !dbg !1334
  %shift_exceeds = icmp uge i64 %zext384, 64, !dbg !1334
  %300 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !1334
  br i1 %300, label %panic385, label %checkok390, !dbg !1334

checkok390:                                       ; preds = %checkok382
  %shl = shl i64 %zext383, %zext384, !dbg !1334
  %301 = freeze i64 %shl, !dbg !1334
  %302 = load i32, ptr %carry, align 4, !dbg !1334
  %zext391 = zext i32 %302 to i64, !dbg !1334
  %add392 = add i64 %301, %zext391, !dbg !1334
  store i64 %add392, ptr %x376, align 8, !dbg !1334
  %303 = load ptr, ptr %d, align 8, !dbg !1335
  %checknull393 = icmp eq ptr %303, null, !dbg !1335
  %304 = call i1 @llvm.expect.i1(i1 %checknull393, i1 false), !dbg !1335
  br i1 %304, label %panic394, label %checkok398, !dbg !1335

checkok398:                                       ; preds = %checkok390
  %305 = load i64, ptr %x376, align 8, !dbg !1335
  %smod = srem i64 %305, 1000000000, !dbg !1335
  %trunc399 = trunc i64 %smod to i32, !dbg !1335
  store i32 %trunc399, ptr %303, align 4, !dbg !1335
  %306 = load i64, ptr %x376, align 8, !dbg !1336
  %sdiv = sdiv i64 %306, 1000000000, !dbg !1336
  %trunc400 = trunc i64 %sdiv to i32, !dbg !1336
  store i32 %trunc400, ptr %carry, align 4, !dbg !1336
  %307 = load ptr, ptr %d, align 8, !dbg !1331
  %ptradd_any401 = getelementptr i8, ptr %307, i8 -4, !dbg !1331
  store ptr %ptradd_any401, ptr %d, align 8, !dbg !1331
  br label %loop.cond374, !dbg !1331

loop.exit402:                                     ; preds = %loop.cond374
  %308 = load i32, ptr %carry, align 4, !dbg !1337
  %i2b403 = icmp ne i32 %308, 0, !dbg !1337
  br i1 %i2b403, label %if.then404, label %if.exit412, !dbg !1337

if.then404:                                       ; preds = %loop.exit402
  %309 = load ptr, ptr %a, align 8, !dbg !1337
  %ptradd_any405 = getelementptr i8, ptr %309, i8 -4, !dbg !1337
  store ptr %ptradd_any405, ptr %a, align 8, !dbg !1337
  %checknull406 = icmp eq ptr %ptradd_any405, null, !dbg !1337
  %310 = call i1 @llvm.expect.i1(i1 %checknull406, i1 false), !dbg !1337
  br i1 %310, label %panic407, label %checkok411, !dbg !1337

checkok411:                                       ; preds = %if.then404
  %311 = load i32, ptr %carry, align 4, !dbg !1337
  store i32 %311, ptr %ptradd_any405, align 4, !dbg !1337
  br label %if.exit412, !dbg !1337

if.exit412:                                       ; preds = %checkok411, %loop.exit402
  br label %loop.cond413, !dbg !1338

loop.cond413:                                     ; preds = %loop.body419, %if.exit412
  %312 = load ptr, ptr %z, align 8, !dbg !1339
  %313 = load ptr, ptr %a, align 8, !dbg !1339
  %gt414 = icmp ugt ptr %312, %313, !dbg !1339
  br i1 %gt414, label %and.rhs415, label %and.phi417, !dbg !1339

and.rhs415:                                       ; preds = %loop.cond413
  %314 = load ptr, ptr %z, align 8, !dbg !1339
  %ptradd416 = getelementptr inbounds i8, ptr %314, i64 -4, !dbg !1339
  %315 = load i32, ptr %ptradd416, align 4, !dbg !1339
  %i2nb = icmp eq i32 %315, 0, !dbg !1339
  br label %and.phi417, !dbg !1339

and.phi417:                                       ; preds = %and.rhs415, %loop.cond413
  %val418 = phi i1 [ false, %loop.cond413 ], [ %i2nb, %and.rhs415 ], !dbg !1339
  br i1 %val418, label %loop.body419, label %loop.exit421, !dbg !1339

loop.body419:                                     ; preds = %and.phi417
  %316 = load ptr, ptr %z, align 8, !dbg !1339
  %ptradd_any420 = getelementptr i8, ptr %316, i8 -4, !dbg !1339
  store ptr %ptradd_any420, ptr %z, align 8, !dbg !1339
  br label %loop.cond413, !dbg !1339

loop.exit421:                                     ; preds = %and.phi417
  %317 = load i32, ptr %e2, align 4, !dbg !1341
  %318 = load i32, ptr %sh, align 4, !dbg !1341
  %sub422 = sub i32 %317, %318, !dbg !1341
  store i32 %sub422, ptr %e2, align 4, !dbg !1341
  br label %loop.cond368, !dbg !1341

loop.exit423:                                     ; preds = %loop.cond368
  br label %loop.cond424, !dbg !1342

loop.cond424:                                     ; preds = %if.exit532, %loop.exit423
  %319 = load i32, ptr %e2, align 4, !dbg !1343
  %lt425 = icmp slt i32 %319, 0, !dbg !1343
  br i1 %lt425, label %loop.body426, label %loop.exit534, !dbg !1343

loop.body426:                                     ; preds = %loop.cond424
    #dbg_declare(ptr %carry427, !1345, !DIExpression(), !1347)
  store i32 0, ptr %carry427, align 4, !dbg !1347
    #dbg_declare(ptr %b, !1348, !DIExpression(), !1349)
  store ptr null, ptr %b, align 8, !dbg !1349
    #dbg_declare(ptr %sh428, !1350, !DIExpression(), !1351)
  store i32 9, ptr %x429, align 4
  %320 = load i32, ptr %e2, align 4, !dbg !1351
  %neg430 = sub i32 0, %320, !dbg !1351
  store i32 %neg430, ptr %y431, align 4
  %321 = load i32, ptr %x429, align 4, !dbg !1352
  %322 = load i32, ptr %y431, align 4, !dbg !1352
  %323 = call i32 @llvm.smin.i32(i32 %321, i32 %322), !dbg !1352
  store i32 %323, ptr %sh428, align 4, !dbg !1352
    #dbg_declare(ptr %need, !1354, !DIExpression(), !1355)
  %324 = load i64, ptr %p, align 8, !dbg !1355
  %add432 = add i64 %324, 17, !dbg !1355
  %add433 = add i64 %add432, 8, !dbg !1355
  %sdiv434 = sdiv i64 %add433, 9, !dbg !1355
  %add435 = add i64 1, %sdiv434, !dbg !1355
  %trunc436 = trunc i64 %add435 to i32, !dbg !1355
  store i32 %trunc436, ptr %need, align 4, !dbg !1355
    #dbg_declare(ptr %d437, !1356, !DIExpression(), !1358)
  %325 = load ptr, ptr %a, align 8, !dbg !1358
  store ptr %325, ptr %d437, align 8, !dbg !1358
  br label %loop.cond438, !dbg !1358

loop.cond438:                                     ; preds = %checkok512, %loop.body426
  %326 = load ptr, ptr %d437, align 8, !dbg !1358
  %327 = load ptr, ptr %z, align 8, !dbg !1358
  %lt439 = icmp ult ptr %326, %327, !dbg !1358
  br i1 %lt439, label %loop.body440, label %loop.exit514, !dbg !1358

loop.body440:                                     ; preds = %loop.cond438
    #dbg_declare(ptr %rm, !1359, !DIExpression(), !1361)
  %328 = load ptr, ptr %d437, align 8, !dbg !1361
  %checknull441 = icmp eq ptr %328, null, !dbg !1361
  %329 = call i1 @llvm.expect.i1(i1 %checknull441, i1 false), !dbg !1361
  br i1 %329, label %panic442, label %checkok446, !dbg !1361

checkok446:                                       ; preds = %loop.body440
  %330 = load i32, ptr %328, align 4, !dbg !1361
  %331 = load i32, ptr %sh428, align 4, !dbg !1361
  %shift_underflow = icmp slt i32 %331, 0, !dbg !1361
  %332 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !1361
  br i1 %332, label %panic447, label %checkok455, !dbg !1361

checkok455:                                       ; preds = %checkok446
  %shift_exceeds456 = icmp sge i32 %331, 32, !dbg !1361
  %333 = call i1 @llvm.expect.i1(i1 %shift_exceeds456, i1 false), !dbg !1361
  br i1 %333, label %panic457, label %checkok465, !dbg !1361

checkok465:                                       ; preds = %checkok455
  %shl466 = shl i32 1, %331, !dbg !1361
  %334 = freeze i32 %shl466, !dbg !1361
  %sub467 = sub i32 %334, 1, !dbg !1361
  %and468 = and i32 %330, %sub467, !dbg !1361
  store i32 %and468, ptr %rm, align 4, !dbg !1361
  %335 = load ptr, ptr %d437, align 8, !dbg !1362
  %checknull469 = icmp eq ptr %335, null, !dbg !1362
  %336 = call i1 @llvm.expect.i1(i1 %checknull469, i1 false), !dbg !1362
  br i1 %336, label %panic470, label %checkok474, !dbg !1362

checkok474:                                       ; preds = %checkok465
  %337 = load ptr, ptr %d437, align 8, !dbg !1362
  %checknull475 = icmp eq ptr %337, null, !dbg !1362
  %338 = call i1 @llvm.expect.i1(i1 %checknull475, i1 false), !dbg !1362
  br i1 %338, label %panic476, label %checkok480, !dbg !1362

checkok480:                                       ; preds = %checkok474
  %339 = load i32, ptr %337, align 4, !dbg !1362
  %340 = load i32, ptr %sh428, align 4, !dbg !1362
  %shift_exceeds481 = icmp uge i32 %340, 32, !dbg !1362
  %341 = call i1 @llvm.expect.i1(i1 %shift_exceeds481, i1 false), !dbg !1362
  br i1 %341, label %panic482, label %checkok490, !dbg !1362

checkok490:                                       ; preds = %checkok480
  %lshr491 = lshr i32 %339, %340, !dbg !1362
  %342 = freeze i32 %lshr491, !dbg !1362
  %343 = load i32, ptr %carry427, align 4, !dbg !1362
  %add492 = add i32 %342, %343, !dbg !1362
  store i32 %add492, ptr %335, align 4, !dbg !1362
  %344 = load i32, ptr %sh428, align 4, !dbg !1363
  %shift_underflow493 = icmp slt i32 %344, 0, !dbg !1363
  %345 = call i1 @llvm.expect.i1(i1 %shift_underflow493, i1 false), !dbg !1363
  br i1 %345, label %panic494, label %checkok502, !dbg !1363

checkok502:                                       ; preds = %checkok490
  %shift_exceeds503 = icmp sge i32 %344, 32, !dbg !1363
  %346 = call i1 @llvm.expect.i1(i1 %shift_exceeds503, i1 false), !dbg !1363
  br i1 %346, label %panic504, label %checkok512, !dbg !1363

checkok512:                                       ; preds = %checkok502
  %ashr = ashr i32 1000000000, %344, !dbg !1363
  %347 = freeze i32 %ashr, !dbg !1363
  %348 = load i32, ptr %rm, align 4, !dbg !1363
  %mul = mul i32 %347, %348, !dbg !1363
  store i32 %mul, ptr %carry427, align 4, !dbg !1363
  %349 = load ptr, ptr %d437, align 8, !dbg !1358
  %ptradd_any513 = getelementptr i8, ptr %349, i8 4, !dbg !1358
  store ptr %ptradd_any513, ptr %d437, align 8, !dbg !1358
  br label %loop.cond438, !dbg !1358

loop.exit514:                                     ; preds = %loop.cond438
  %350 = load ptr, ptr %a, align 8, !dbg !1364
  %351 = load i32, ptr %350, align 4, !dbg !1364
  %i2nb515 = icmp eq i32 %351, 0, !dbg !1364
  br i1 %i2nb515, label %if.then516, label %if.exit518, !dbg !1364

if.then516:                                       ; preds = %loop.exit514
  %352 = load ptr, ptr %a, align 8, !dbg !1364
  %ptradd_any517 = getelementptr i8, ptr %352, i8 4, !dbg !1364
  store ptr %ptradd_any517, ptr %a, align 8, !dbg !1364
  br label %if.exit518, !dbg !1364

if.exit518:                                       ; preds = %if.then516, %loop.exit514
  %353 = load i32, ptr %carry427, align 4, !dbg !1365
  %i2b519 = icmp ne i32 %353, 0, !dbg !1365
  br i1 %i2b519, label %if.then520, label %if.exit522, !dbg !1365

if.then520:                                       ; preds = %if.exit518
  %354 = load ptr, ptr %z, align 8, !dbg !1365
  %ptradd_any521 = getelementptr i8, ptr %354, i8 4, !dbg !1365
  store ptr %ptradd_any521, ptr %z, align 8, !dbg !1365
  %355 = load i32, ptr %carry427, align 4, !dbg !1365
  store i32 %355, ptr %354, align 4, !dbg !1365
  br label %if.exit522, !dbg !1365

if.exit522:                                       ; preds = %if.then520, %if.exit518
  %356 = load i32, ptr %formatting, align 4, !dbg !1366
  %eq523 = icmp eq i32 %356, 0, !dbg !1366
  br i1 %eq523, label %cond.lhs524, label %cond.rhs525, !dbg !1366

cond.lhs524:                                      ; preds = %if.exit522
  %357 = load ptr, ptr %r, align 8, !dbg !1366
  br label %cond.phi526, !dbg !1366

cond.rhs525:                                      ; preds = %if.exit522
  %358 = load ptr, ptr %a, align 8, !dbg !1366
  br label %cond.phi526, !dbg !1366

cond.phi526:                                      ; preds = %cond.rhs525, %cond.lhs524
  %val527 = phi ptr [ %357, %cond.lhs524 ], [ %358, %cond.rhs525 ], !dbg !1366
  store ptr %val527, ptr %b, align 8, !dbg !1366
  %359 = load ptr, ptr %z, align 8, !dbg !1367
  %360 = load ptr, ptr %b, align 8, !dbg !1367
  %361 = ptrtoint ptr %360 to i64, !dbg !1367
  %362 = ptrtoint ptr %359 to i64, !dbg !1367
  %363 = sub i64 %362, %361, !dbg !1367
  %364 = sdiv exact i64 %363, 4, !dbg !1367
  %365 = load i32, ptr %need, align 4, !dbg !1367
  %sext528 = sext i32 %365 to i64, !dbg !1367
  %gt529 = icmp sgt i64 %364, %sext528, !dbg !1367
  br i1 %gt529, label %if.then530, label %if.exit532, !dbg !1367

if.then530:                                       ; preds = %cond.phi526
  %366 = load ptr, ptr %b, align 8, !dbg !1367
  %367 = load i32, ptr %need, align 4, !dbg !1367
  %sext531 = sext i32 %367 to i64, !dbg !1367
  %ptroffset_any = getelementptr [4 x i8], ptr %366, i64 %sext531, !dbg !1367
  store ptr %ptroffset_any, ptr %z, align 8, !dbg !1367
  br label %if.exit532, !dbg !1367

if.exit532:                                       ; preds = %if.then530, %cond.phi526
  %368 = load i32, ptr %e2, align 4, !dbg !1368
  %369 = load i32, ptr %sh428, align 4, !dbg !1368
  %add533 = add i32 %368, %369, !dbg !1368
  store i32 %add533, ptr %e2, align 4, !dbg !1368
  br label %loop.cond424, !dbg !1368

loop.exit534:                                     ; preds = %loop.cond424
    #dbg_declare(ptr %e535, !1369, !DIExpression(), !1370)
  store i32 0, ptr %e535, align 4, !dbg !1370
  %370 = load ptr, ptr %a, align 8, !dbg !1371
  %371 = load ptr, ptr %z, align 8, !dbg !1371
  %lt536 = icmp ult ptr %370, %371, !dbg !1371
  br i1 %lt536, label %if.then537, label %if.exit551, !dbg !1371

if.then537:                                       ; preds = %loop.exit534
    #dbg_declare(ptr %i, !1372, !DIExpression(), !1375)
  store i32 10, ptr %i, align 4, !dbg !1375
  %372 = load ptr, ptr %r, align 8, !dbg !1375
  %373 = load ptr, ptr %a, align 8, !dbg !1375
  %374 = ptrtoint ptr %373 to i64, !dbg !1375
  %375 = ptrtoint ptr %372 to i64, !dbg !1375
  %376 = sub i64 %375, %374, !dbg !1375
  %377 = sdiv exact i64 %376, 4, !dbg !1375
  %mul538 = mul i64 9, %377, !dbg !1375
  %trunc539 = trunc i64 %mul538 to i32, !dbg !1375
  store i32 %trunc539, ptr %e535, align 4, !dbg !1375
  br label %loop.cond540, !dbg !1375

loop.cond540:                                     ; preds = %loop.body547, %if.then537
  %378 = load ptr, ptr %a, align 8, !dbg !1375
  %checknull541 = icmp eq ptr %378, null, !dbg !1375
  %379 = call i1 @llvm.expect.i1(i1 %checknull541, i1 false), !dbg !1375
  br i1 %379, label %panic542, label %checkok546, !dbg !1375

checkok546:                                       ; preds = %loop.cond540
  %380 = load i32, ptr %378, align 4, !dbg !1375
  %381 = load i32, ptr %i, align 4, !dbg !1375
  %le = icmp sle i32 %381, %380, !dbg !1375
  %check = icmp slt i32 %380, 0, !dbg !1375
  %siui-le = or i1 %check, %le, !dbg !1375
  br i1 %siui-le, label %loop.body547, label %loop.exit550, !dbg !1375

loop.body547:                                     ; preds = %checkok546
  %382 = load i32, ptr %i, align 4, !dbg !1375
  %mul548 = mul i32 %382, 10, !dbg !1375
  store i32 %mul548, ptr %i, align 4, !dbg !1375
  %383 = load i32, ptr %e535, align 4, !dbg !1375
  %add549 = add i32 %383, 1, !dbg !1375
  store i32 %add549, ptr %e535, align 4, !dbg !1375
  br label %loop.cond540, !dbg !1375

loop.exit550:                                     ; preds = %checkok546
  br label %if.exit551, !dbg !1375

if.exit551:                                       ; preds = %loop.exit550, %loop.exit534
    #dbg_declare(ptr %j, !1376, !DIExpression(), !1377)
  %384 = load i64, ptr %p, align 8, !dbg !1377
  %385 = load i32, ptr %formatting, align 4, !dbg !1377
  %eq552 = icmp eq i32 %385, 0, !dbg !1377
  br i1 %eq552, label %cond.lhs553, label %cond.rhs554, !dbg !1377

cond.lhs553:                                      ; preds = %if.exit551
  br label %cond.phi562, !dbg !1377

cond.rhs554:                                      ; preds = %if.exit551
  %386 = load i32, ptr %e535, align 4, !dbg !1377
  %387 = load i32, ptr %formatting, align 4, !dbg !1377
  %eq555 = icmp eq i32 %387, 2, !dbg !1377
  br i1 %eq555, label %and.rhs556, label %and.phi558, !dbg !1377

and.rhs556:                                       ; preds = %cond.rhs554
  %388 = load i64, ptr %p, align 8, !dbg !1377
  %i2b557 = icmp ne i64 %388, 0, !dbg !1377
  br label %and.phi558, !dbg !1377

and.phi558:                                       ; preds = %and.rhs556, %cond.rhs554
  %val559 = phi i1 [ false, %cond.rhs554 ], [ %i2b557, %and.rhs556 ], !dbg !1377
  %zext560 = zext i1 %val559 to i32, !dbg !1377
  %sub561 = sub i32 %386, %zext560, !dbg !1377
  br label %cond.phi562, !dbg !1377

cond.phi562:                                      ; preds = %and.phi558, %cond.lhs553
  %val563 = phi i32 [ 0, %cond.lhs553 ], [ %sub561, %and.phi558 ], !dbg !1377
  %sext564 = sext i32 %val563 to i64, !dbg !1377
  %sub565 = sub i64 %384, %sext564, !dbg !1377
  %trunc566 = trunc i64 %sub565 to i32, !dbg !1377
  store i32 %trunc566, ptr %j, align 4, !dbg !1377
  %389 = load i32, ptr %j, align 4, !dbg !1378
  %sext567 = sext i32 %389 to i64, !dbg !1378
  %390 = load ptr, ptr %z, align 8, !dbg !1378
  %391 = load ptr, ptr %r, align 8, !dbg !1378
  %392 = ptrtoint ptr %391 to i64, !dbg !1378
  %393 = ptrtoint ptr %390 to i64, !dbg !1378
  %394 = sub i64 %393, %392, !dbg !1378
  %395 = sdiv exact i64 %394, 4, !dbg !1378
  %sub568 = sub i64 %395, 1, !dbg !1378
  %mul569 = mul i64 9, %sub568, !dbg !1378
  %lt570 = icmp slt i64 %sext567, %mul569, !dbg !1378
  br i1 %lt570, label %if.then571, label %if.exit744, !dbg !1378

if.then571:                                       ; preds = %cond.phi562
    #dbg_declare(ptr %x572, !1379, !DIExpression(), !1381)
  store i32 0, ptr %x572, align 4, !dbg !1381
    #dbg_declare(ptr %d573, !1382, !DIExpression(), !1383)
  %396 = load ptr, ptr %r, align 8, !dbg !1383
  %397 = load i32, ptr %j, align 4, !dbg !1383
  %add574 = add i32 %397, 9216, !dbg !1383
  %sdiv575 = sdiv i32 %add574, 9, !dbg !1383
  %sub576 = sub i32 %sdiv575, 1024, !dbg !1383
  %sext577 = sext i32 %sub576 to i64, !dbg !1383
  %add578 = add i64 1, %sext577, !dbg !1383
  %ptroffset_any579 = getelementptr [4 x i8], ptr %396, i64 %add578, !dbg !1383
  store ptr %ptroffset_any579, ptr %d573, align 8, !dbg !1383
  %398 = load i32, ptr %j, align 4, !dbg !1384
  %add580 = add i32 %398, 9216, !dbg !1384
  store i32 %add580, ptr %j, align 4, !dbg !1384
  %399 = load i32, ptr %j, align 4, !dbg !1385
  %smod581 = srem i32 %399, 9, !dbg !1385
  store i32 %smod581, ptr %j, align 4, !dbg !1385
    #dbg_declare(ptr %i582, !1386, !DIExpression(), !1387)
  store i32 0, ptr %i582, align 4, !dbg !1387
  store i32 10, ptr %i582, align 4, !dbg !1388
  %400 = load i32, ptr %j, align 4, !dbg !1388
  %add583 = add i32 %400, 1, !dbg !1388
  store i32 %add583, ptr %j, align 4, !dbg !1388
  br label %loop.cond584, !dbg !1388

loop.cond584:                                     ; preds = %loop.body586, %if.then571
  %401 = load i32, ptr %j, align 4, !dbg !1388
  %lt585 = icmp slt i32 %401, 9, !dbg !1388
  br i1 %lt585, label %loop.body586, label %loop.exit589, !dbg !1388

loop.body586:                                     ; preds = %loop.cond584
  %402 = load i32, ptr %i582, align 4, !dbg !1388
  %mul587 = mul i32 %402, 10, !dbg !1388
  store i32 %mul587, ptr %i582, align 4, !dbg !1388
  %403 = load i32, ptr %j, align 4, !dbg !1388
  %add588 = add i32 %403, 1, !dbg !1388
  store i32 %add588, ptr %j, align 4, !dbg !1388
  br label %loop.cond584, !dbg !1388

loop.exit589:                                     ; preds = %loop.cond584
  %404 = load ptr, ptr %d573, align 8, !dbg !1390
  %checknull590 = icmp eq ptr %404, null, !dbg !1390
  %405 = call i1 @llvm.expect.i1(i1 %checknull590, i1 false), !dbg !1390
  br i1 %405, label %panic591, label %checkok595, !dbg !1390

checkok595:                                       ; preds = %loop.exit589
  %406 = load i32, ptr %404, align 4, !dbg !1390
  %407 = load i32, ptr %i582, align 4, !dbg !1390
  %zero = icmp eq i32 %407, 0, !dbg !1390
  %408 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1390
  br i1 %408, label %panic596, label %checkok600, !dbg !1390

checkok600:                                       ; preds = %checkok595
  %smod601 = srem i32 %406, %407, !dbg !1390
  store i32 %smod601, ptr %x572, align 4, !dbg !1390
  %409 = load i32, ptr %x572, align 4, !dbg !1391
  %i2b602 = icmp ne i32 %409, 0, !dbg !1391
  br i1 %i2b602, label %or.phi605, label %or.rhs603, !dbg !1391

or.rhs603:                                        ; preds = %checkok600
  %410 = load ptr, ptr %d573, align 8, !dbg !1391
  %ptradd_any604 = getelementptr i8, ptr %410, i64 4, !dbg !1391
  %411 = load ptr, ptr %z, align 8, !dbg !1391
  %neq = icmp ne ptr %ptradd_any604, %411, !dbg !1391
  br label %or.phi605, !dbg !1391

or.phi605:                                        ; preds = %or.rhs603, %checkok600
  %val606 = phi i1 [ true, %checkok600 ], [ %neq, %or.rhs603 ], !dbg !1391
  br i1 %val606, label %if.then607, label %if.exit738, !dbg !1391

if.then607:                                       ; preds = %or.phi605
    #dbg_declare(ptr %round608, !1392, !DIExpression(), !1394)
  store double 0x4340000000000000, ptr %round608, align 8, !dbg !1394
    #dbg_declare(ptr %small, !1395, !DIExpression(), !1396)
  store double 0.000000e+00, ptr %small, align 8, !dbg !1396
  %412 = load ptr, ptr %d573, align 8, !dbg !1397
  %checknull609 = icmp eq ptr %412, null, !dbg !1397
  %413 = call i1 @llvm.expect.i1(i1 %checknull609, i1 false), !dbg !1397
  br i1 %413, label %panic610, label %checkok614, !dbg !1397

checkok614:                                       ; preds = %if.then607
  %414 = load i32, ptr %412, align 4, !dbg !1397
  %415 = load i32, ptr %i582, align 4, !dbg !1397
  %zero615 = icmp eq i32 %415, 0, !dbg !1397
  %416 = call i1 @llvm.expect.i1(i1 %zero615, i1 false), !dbg !1397
  br i1 %416, label %panic616, label %checkok620, !dbg !1397

checkok620:                                       ; preds = %checkok614
  %sdiv621 = sdiv i32 %414, %415, !dbg !1397
  %and622 = and i32 %sdiv621, 1, !dbg !1397
  %i2b623 = icmp ne i32 %and622, 0, !dbg !1397
  br i1 %i2b623, label %or.phi636, label %or.rhs624, !dbg !1397

or.rhs624:                                        ; preds = %checkok620
  %417 = load i32, ptr %i582, align 4, !dbg !1397
  %eq625 = icmp eq i32 %417, 1000000000, !dbg !1397
  br i1 %eq625, label %and.rhs626, label %and.phi628, !dbg !1397

and.rhs626:                                       ; preds = %or.rhs624
  %418 = load ptr, ptr %d573, align 8, !dbg !1397
  %419 = load ptr, ptr %a, align 8, !dbg !1397
  %gt627 = icmp ugt ptr %418, %419, !dbg !1397
  br label %and.phi628, !dbg !1397

and.phi628:                                       ; preds = %and.rhs626, %or.rhs624
  %val629 = phi i1 [ false, %or.rhs624 ], [ %gt627, %and.rhs626 ], !dbg !1397
  br i1 %val629, label %and.rhs630, label %and.phi634, !dbg !1397

and.rhs630:                                       ; preds = %and.phi628
  %420 = load ptr, ptr %d573, align 8, !dbg !1397
  %ptradd631 = getelementptr inbounds i8, ptr %420, i64 -4, !dbg !1397
  %421 = load i32, ptr %ptradd631, align 4, !dbg !1397
  %and632 = and i32 %421, 1, !dbg !1397
  %i2b633 = icmp ne i32 %and632, 0, !dbg !1397
  br label %and.phi634, !dbg !1397

and.phi634:                                       ; preds = %and.rhs630, %and.phi628
  %val635 = phi i1 [ false, %and.phi628 ], [ %i2b633, %and.rhs630 ], !dbg !1397
  br label %or.phi636, !dbg !1397

or.phi636:                                        ; preds = %and.phi634, %checkok620
  %val637 = phi i1 [ true, %checkok620 ], [ %val635, %and.phi634 ], !dbg !1397
  br i1 %val637, label %if.then638, label %if.exit640, !dbg !1397

if.then638:                                       ; preds = %or.phi636
  %422 = load double, ptr %round608, align 8, !dbg !1398
  %fadd639 = fadd double %422, 2.000000e+00, !dbg !1398
  store double %fadd639, ptr %round608, align 8, !dbg !1398
  br label %if.exit640, !dbg !1398

if.exit640:                                       ; preds = %if.then638, %or.phi636
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit640
  %423 = load i8, ptr %switch, align 1
  %424 = trunc i8 %423 to i1
  %425 = load i32, ptr %x572, align 4, !dbg !1400
  %426 = load i32, ptr %i582, align 4, !dbg !1400
  %sdiv641 = sdiv i32 %426, 2, !dbg !1400
  %gt642 = icmp sgt i32 %sdiv641, %425, !dbg !1400
  %check643 = icmp sge i32 %425, 0, !dbg !1400
  %siui-gt = and i1 %check643, %gt642, !dbg !1400
  %eq644 = icmp eq i1 %siui-gt, %424, !dbg !1400
  br i1 %eq644, label %switch.case, label %next_if, !dbg !1400

switch.case:                                      ; preds = %switch.entry
  store double 5.000000e-01, ptr %small, align 8, !dbg !1402
  br label %switch.exit, !dbg !1402

next_if:                                          ; preds = %switch.entry
  %427 = load i32, ptr %x572, align 4, !dbg !1404
  %428 = load i32, ptr %i582, align 4, !dbg !1404
  %sdiv645 = sdiv i32 %428, 2, !dbg !1404
  %eq646 = icmp eq i32 %sdiv645, %427, !dbg !1404
  %check647 = icmp sge i32 %sdiv645, 0, !dbg !1404
  %siui-eq = and i1 %check647, %eq646, !dbg !1404
  br i1 %siui-eq, label %and.rhs648, label %and.phi651, !dbg !1404

and.rhs648:                                       ; preds = %next_if
  %429 = load ptr, ptr %d573, align 8, !dbg !1404
  %ptradd_any649 = getelementptr i8, ptr %429, i64 4, !dbg !1404
  %430 = load ptr, ptr %z, align 8, !dbg !1404
  %eq650 = icmp eq ptr %ptradd_any649, %430, !dbg !1404
  br label %and.phi651, !dbg !1404

and.phi651:                                       ; preds = %and.rhs648, %next_if
  %val652 = phi i1 [ false, %next_if ], [ %eq650, %and.rhs648 ], !dbg !1404
  %eq653 = icmp eq i1 %val652, %424, !dbg !1404
  br i1 %eq653, label %switch.case654, label %next_if655, !dbg !1404

switch.case654:                                   ; preds = %and.phi651
  store double 1.000000e+00, ptr %small, align 8, !dbg !1405
  br label %switch.exit, !dbg !1405

next_if655:                                       ; preds = %and.phi651
  br label %switch.default, !dbg !1405

switch.default:                                   ; preds = %next_if655
  store double 1.500000e+00, ptr %small, align 8, !dbg !1407
  br label %switch.exit, !dbg !1407

switch.exit:                                      ; preds = %switch.default, %switch.case654, %switch.case
  %431 = load i64, ptr %pl, align 8, !dbg !1409
  %i2b656 = icmp ne i64 %431, 0, !dbg !1409
  br i1 %i2b656, label %and.rhs657, label %and.phi658, !dbg !1409

and.rhs657:                                       ; preds = %switch.exit
  %432 = load i8, ptr %is_neg, align 1, !dbg !1409
  %433 = trunc i8 %432 to i1, !dbg !1409
  br label %and.phi658, !dbg !1409

and.phi658:                                       ; preds = %and.rhs657, %switch.exit
  %val659 = phi i1 [ false, %switch.exit ], [ %433, %and.rhs657 ], !dbg !1409
  br i1 %val659, label %if.then660, label %if.exit663, !dbg !1409

if.then660:                                       ; preds = %and.phi658
  %434 = load double, ptr %round608, align 8, !dbg !1410
  %fmul661 = fmul double %434, -1.000000e+00, !dbg !1410
  store double %fmul661, ptr %round608, align 8, !dbg !1410
  %435 = load double, ptr %small, align 8, !dbg !1412
  %fmul662 = fmul double %435, -1.000000e+00, !dbg !1412
  store double %fmul662, ptr %small, align 8, !dbg !1412
  br label %if.exit663, !dbg !1412

if.exit663:                                       ; preds = %if.then660, %and.phi658
  %436 = load ptr, ptr %d573, align 8, !dbg !1413
  %checknull664 = icmp eq ptr %436, null, !dbg !1413
  %437 = call i1 @llvm.expect.i1(i1 %checknull664, i1 false), !dbg !1413
  br i1 %437, label %panic665, label %checkok669, !dbg !1413

checkok669:                                       ; preds = %if.exit663
  %438 = load i32, ptr %436, align 4, !dbg !1413
  %439 = load i32, ptr %x572, align 4, !dbg !1413
  %sub670 = sub i32 %438, %439, !dbg !1413
  store i32 %sub670, ptr %436, align 4, !dbg !1413
  %440 = load double, ptr %round608, align 8, !dbg !1414
  %441 = load double, ptr %small, align 8, !dbg !1414
  %fadd671 = fadd double %440, %441, !dbg !1414
  %442 = load double, ptr %round608, align 8, !dbg !1414
  %neq672 = fcmp one double %fadd671, %442, !dbg !1414
  br i1 %neq672, label %if.then673, label %if.exit737, !dbg !1414

if.then673:                                       ; preds = %checkok669
  %443 = load ptr, ptr %d573, align 8, !dbg !1415
  %checknull674 = icmp eq ptr %443, null, !dbg !1415
  %444 = call i1 @llvm.expect.i1(i1 %checknull674, i1 false), !dbg !1415
  br i1 %444, label %panic675, label %checkok679, !dbg !1415

checkok679:                                       ; preds = %if.then673
  %445 = load ptr, ptr %d573, align 8, !dbg !1415
  %checknull680 = icmp eq ptr %445, null, !dbg !1415
  %446 = call i1 @llvm.expect.i1(i1 %checknull680, i1 false), !dbg !1415
  br i1 %446, label %panic681, label %checkok685, !dbg !1415

checkok685:                                       ; preds = %checkok679
  %447 = load i32, ptr %445, align 4, !dbg !1415
  %448 = load i32, ptr %i582, align 4, !dbg !1415
  %add686 = add i32 %447, %448, !dbg !1415
  store i32 %add686, ptr %443, align 4, !dbg !1415
  br label %loop.cond687, !dbg !1417

loop.cond687:                                     ; preds = %checkok718, %checkok685
  %449 = load ptr, ptr %d573, align 8, !dbg !1418
  %checknull688 = icmp eq ptr %449, null, !dbg !1418
  %450 = call i1 @llvm.expect.i1(i1 %checknull688, i1 false), !dbg !1418
  br i1 %450, label %panic689, label %checkok693, !dbg !1418

checkok693:                                       ; preds = %loop.cond687
  %451 = load i32, ptr %449, align 4, !dbg !1418
  %lt694 = icmp ult i32 999999999, %451, !dbg !1418
  br i1 %lt694, label %loop.body695, label %loop.exit720, !dbg !1418

loop.body695:                                     ; preds = %checkok693
  %452 = load ptr, ptr %d573, align 8, !dbg !1420
  %ptradd_any696 = getelementptr i8, ptr %452, i8 -4, !dbg !1420
  store ptr %ptradd_any696, ptr %d573, align 8, !dbg !1420
  %checknull697 = icmp eq ptr %452, null, !dbg !1420
  %453 = call i1 @llvm.expect.i1(i1 %checknull697, i1 false), !dbg !1420
  br i1 %453, label %panic698, label %checkok702, !dbg !1420

checkok702:                                       ; preds = %loop.body695
  store i32 0, ptr %452, align 4, !dbg !1420
  %454 = load ptr, ptr %d573, align 8, !dbg !1422
  %455 = load ptr, ptr %a, align 8, !dbg !1422
  %lt703 = icmp ult ptr %454, %455, !dbg !1422
  br i1 %lt703, label %if.then704, label %if.exit712, !dbg !1422

if.then704:                                       ; preds = %checkok702
  %456 = load ptr, ptr %a, align 8, !dbg !1422
  %ptradd_any705 = getelementptr i8, ptr %456, i8 -4, !dbg !1422
  store ptr %ptradd_any705, ptr %a, align 8, !dbg !1422
  %checknull706 = icmp eq ptr %ptradd_any705, null, !dbg !1422
  %457 = call i1 @llvm.expect.i1(i1 %checknull706, i1 false), !dbg !1422
  br i1 %457, label %panic707, label %checkok711, !dbg !1422

checkok711:                                       ; preds = %if.then704
  store i32 0, ptr %ptradd_any705, align 4, !dbg !1422
  br label %if.exit712, !dbg !1422

if.exit712:                                       ; preds = %checkok711, %checkok702
  %458 = load ptr, ptr %d573, align 8, !dbg !1423
  %checknull713 = icmp eq ptr %458, null, !dbg !1423
  %459 = call i1 @llvm.expect.i1(i1 %checknull713, i1 false), !dbg !1423
  br i1 %459, label %panic714, label %checkok718, !dbg !1423

checkok718:                                       ; preds = %if.exit712
  %460 = load i32, ptr %458, align 4, !dbg !1423
  %add719 = add i32 %460, 1, !dbg !1423
  store i32 %add719, ptr %458, align 4, !dbg !1423
  br label %loop.cond687, !dbg !1423

loop.exit720:                                     ; preds = %checkok693
  store i32 10, ptr %i582, align 4, !dbg !1424
  %461 = load ptr, ptr %r, align 8, !dbg !1424
  %462 = load ptr, ptr %a, align 8, !dbg !1424
  %463 = ptrtoint ptr %462 to i64, !dbg !1424
  %464 = ptrtoint ptr %461 to i64, !dbg !1424
  %465 = sub i64 %464, %463, !dbg !1424
  %466 = sdiv exact i64 %465, 4, !dbg !1424
  %mul721 = mul i64 9, %466, !dbg !1424
  %trunc722 = trunc i64 %mul721 to i32, !dbg !1424
  store i32 %trunc722, ptr %e535, align 4, !dbg !1424
  br label %loop.cond723, !dbg !1424

loop.cond723:                                     ; preds = %loop.body733, %loop.exit720
  %467 = load ptr, ptr %a, align 8, !dbg !1424
  %checknull724 = icmp eq ptr %467, null, !dbg !1424
  %468 = call i1 @llvm.expect.i1(i1 %checknull724, i1 false), !dbg !1424
  br i1 %468, label %panic725, label %checkok729, !dbg !1424

checkok729:                                       ; preds = %loop.cond723
  %469 = load i32, ptr %467, align 4, !dbg !1424
  %470 = load i32, ptr %i582, align 4, !dbg !1424
  %le730 = icmp sle i32 %470, %469, !dbg !1424
  %check731 = icmp slt i32 %469, 0, !dbg !1424
  %siui-le732 = or i1 %check731, %le730, !dbg !1424
  br i1 %siui-le732, label %loop.body733, label %loop.exit736, !dbg !1424

loop.body733:                                     ; preds = %checkok729
  %471 = load i32, ptr %i582, align 4, !dbg !1424
  %mul734 = mul i32 %471, 10, !dbg !1424
  store i32 %mul734, ptr %i582, align 4, !dbg !1424
  %472 = load i32, ptr %e535, align 4, !dbg !1424
  %add735 = add i32 %472, 1, !dbg !1424
  store i32 %add735, ptr %e535, align 4, !dbg !1424
  br label %loop.cond723, !dbg !1424

loop.exit736:                                     ; preds = %checkok729
  br label %if.exit737, !dbg !1424

if.exit737:                                       ; preds = %loop.exit736, %checkok669
  br label %if.exit738, !dbg !1424

if.exit738:                                       ; preds = %if.exit737, %or.phi605
  %473 = load ptr, ptr %z, align 8, !dbg !1426
  %474 = load ptr, ptr %d573, align 8, !dbg !1426
  %ptradd_any739 = getelementptr i8, ptr %474, i64 4, !dbg !1426
  %gt740 = icmp ugt ptr %473, %ptradd_any739, !dbg !1426
  br i1 %gt740, label %if.then741, label %if.exit743, !dbg !1426

if.then741:                                       ; preds = %if.exit738
  %475 = load ptr, ptr %d573, align 8, !dbg !1426
  %ptradd_any742 = getelementptr i8, ptr %475, i64 4, !dbg !1426
  store ptr %ptradd_any742, ptr %z, align 8, !dbg !1426
  br label %if.exit743, !dbg !1426

if.exit743:                                       ; preds = %if.then741, %if.exit738
  br label %if.exit744, !dbg !1426

if.exit744:                                       ; preds = %if.exit743, %cond.phi562
  br label %loop.cond745, !dbg !1427

loop.cond745:                                     ; preds = %loop.body752, %if.exit744
  %476 = load ptr, ptr %z, align 8, !dbg !1428
  %477 = load ptr, ptr %a, align 8, !dbg !1428
  %gt746 = icmp ugt ptr %476, %477, !dbg !1428
  br i1 %gt746, label %and.rhs747, label %and.phi750, !dbg !1428

and.rhs747:                                       ; preds = %loop.cond745
  %478 = load ptr, ptr %z, align 8, !dbg !1428
  %ptradd748 = getelementptr inbounds i8, ptr %478, i64 -4, !dbg !1428
  %479 = load i32, ptr %ptradd748, align 4, !dbg !1428
  %i2nb749 = icmp eq i32 %479, 0, !dbg !1428
  br label %and.phi750, !dbg !1428

and.phi750:                                       ; preds = %and.rhs747, %loop.cond745
  %val751 = phi i1 [ false, %loop.cond745 ], [ %i2nb749, %and.rhs747 ], !dbg !1428
  br i1 %val751, label %loop.body752, label %loop.exit754, !dbg !1428

loop.body752:                                     ; preds = %and.phi750
  %480 = load ptr, ptr %z, align 8, !dbg !1428
  %ptradd_any753 = getelementptr i8, ptr %480, i8 -4, !dbg !1428
  store ptr %ptradd_any753, ptr %z, align 8, !dbg !1428
  br label %loop.cond745, !dbg !1428

loop.exit754:                                     ; preds = %and.phi750
  %481 = load i32, ptr %formatting, align 4, !dbg !1430
  %eq755 = icmp eq i32 %481, 2, !dbg !1430
  br i1 %eq755, label %if.then756, label %if.exit826, !dbg !1430

if.then756:                                       ; preds = %loop.exit754
  %482 = load i64, ptr %p, align 8, !dbg !1431
  %i2nb757 = icmp eq i64 %482, 0, !dbg !1431
  br i1 %i2nb757, label %if.then758, label %if.exit760, !dbg !1431

if.then758:                                       ; preds = %if.then756
  %483 = load i64, ptr %p, align 8, !dbg !1431
  %add759 = add i64 %483, 1, !dbg !1431
  store i64 %add759, ptr %p, align 8, !dbg !1431
  br label %if.exit760, !dbg !1431

if.exit760:                                       ; preds = %if.then758, %if.then756
  %484 = load i64, ptr %p, align 8, !dbg !1433
  %485 = load i32, ptr %e535, align 4, !dbg !1433
  %sext761 = sext i32 %485 to i64, !dbg !1433
  %gt762 = icmp sgt i64 %484, %sext761, !dbg !1433
  br i1 %gt762, label %and.rhs763, label %and.phi765, !dbg !1433

and.rhs763:                                       ; preds = %if.exit760
  %486 = load i32, ptr %e535, align 4, !dbg !1433
  %ge764 = icmp sge i32 %486, -4, !dbg !1433
  br label %and.phi765, !dbg !1433

and.phi765:                                       ; preds = %and.rhs763, %if.exit760
  %val766 = phi i1 [ false, %if.exit760 ], [ %ge764, %and.rhs763 ], !dbg !1433
  br i1 %val766, label %if.then767, label %if.else771, !dbg !1433

if.then767:                                       ; preds = %and.phi765
  store i32 0, ptr %formatting, align 4, !dbg !1434
  %487 = load i64, ptr %p, align 8, !dbg !1436
  %488 = load i32, ptr %e535, align 4, !dbg !1436
  %sext768 = sext i32 %488 to i64, !dbg !1436
  %add769 = add i64 %sext768, 1, !dbg !1436
  %sub770 = sub i64 %487, %add769, !dbg !1436
  store i64 %sub770, ptr %p, align 8, !dbg !1436
  br label %if.exit773, !dbg !1436

if.else771:                                       ; preds = %and.phi765
  store i32 1, ptr %formatting, align 4, !dbg !1437
  %489 = load i64, ptr %p, align 8, !dbg !1439
  %sub772 = sub i64 %489, 1, !dbg !1439
  store i64 %sub772, ptr %p, align 8, !dbg !1439
  br label %if.exit773, !dbg !1439

if.exit773:                                       ; preds = %if.else771, %if.then767
  %490 = load ptr, ptr %self, align 8, !dbg !1440
  %ptradd774 = getelementptr inbounds i8, ptr %490, i64 16, !dbg !1440
  %491 = load i32, ptr %ptradd774, align 8, !dbg !1440
  %lshrl775 = lshr i32 %491, 4, !dbg !1440
  %492 = and i32 1, %lshrl775, !dbg !1440
  %trunc776 = trunc i32 %492 to i8, !dbg !1440
  %493 = trunc i8 %trunc776 to i1, !dbg !1440
  %not777 = xor i1 %493, true, !dbg !1440
  br i1 %not777, label %if.then778, label %if.exit825, !dbg !1440

if.then778:                                       ; preds = %if.exit773
  %494 = load ptr, ptr %z, align 8, !dbg !1441
  %495 = load ptr, ptr %a, align 8, !dbg !1441
  %gt779 = icmp ugt ptr %494, %495, !dbg !1441
  br i1 %gt779, label %and.rhs780, label %and.phi783, !dbg !1441

and.rhs780:                                       ; preds = %if.then778
  %496 = load ptr, ptr %z, align 8, !dbg !1441
  %ptradd781 = getelementptr inbounds i8, ptr %496, i64 -4, !dbg !1441
  %497 = load i32, ptr %ptradd781, align 4, !dbg !1441
  %i2b782 = icmp ne i32 %497, 0, !dbg !1441
  br label %and.phi783, !dbg !1441

and.phi783:                                       ; preds = %and.rhs780, %if.then778
  %val784 = phi i1 [ false, %if.then778 ], [ %i2b782, %and.rhs780 ], !dbg !1441
  br i1 %val784, label %if.then785, label %if.else801, !dbg !1441

if.then785:                                       ; preds = %and.phi783
    #dbg_declare(ptr %i786, !1443, !DIExpression(), !1446)
  store i32 10, ptr %i786, align 4, !dbg !1446
  store i32 0, ptr %j, align 4, !dbg !1446
  br label %loop.cond787, !dbg !1446

loop.cond787:                                     ; preds = %loop.body797, %if.then785
  %498 = load ptr, ptr %z, align 8, !dbg !1446
  %ptradd788 = getelementptr inbounds i8, ptr %498, i64 -4, !dbg !1446
  %499 = load i32, ptr %ptradd788, align 4, !dbg !1446
  %500 = load i32, ptr %i786, align 4, !dbg !1446
  %zero789 = icmp eq i32 %500, 0, !dbg !1446
  %501 = call i1 @llvm.expect.i1(i1 %zero789, i1 false), !dbg !1446
  br i1 %501, label %panic790, label %checkok794, !dbg !1446

checkok794:                                       ; preds = %loop.cond787
  %smod795 = srem i32 %499, %500, !dbg !1446
  %eq796 = icmp eq i32 %smod795, 0, !dbg !1446
  br i1 %eq796, label %loop.body797, label %loop.exit800, !dbg !1446

loop.body797:                                     ; preds = %checkok794
  %502 = load i32, ptr %i786, align 4, !dbg !1446
  %mul798 = mul i32 %502, 10, !dbg !1446
  store i32 %mul798, ptr %i786, align 4, !dbg !1446
  %503 = load i32, ptr %j, align 4, !dbg !1446
  %add799 = add i32 %503, 1, !dbg !1446
  store i32 %add799, ptr %j, align 4, !dbg !1446
  br label %loop.cond787, !dbg !1446

loop.exit800:                                     ; preds = %checkok794
  br label %if.exit802, !dbg !1446

if.else801:                                       ; preds = %and.phi783
  store i32 9, ptr %j, align 4, !dbg !1447
  br label %if.exit802, !dbg !1447

if.exit802:                                       ; preds = %if.else801, %loop.exit800
  %504 = load i32, ptr %formatting, align 4, !dbg !1449
  %eq803 = icmp eq i32 %504, 0, !dbg !1449
  br i1 %eq803, label %if.then804, label %if.else813, !dbg !1449

if.then804:                                       ; preds = %if.exit802
  %505 = load i64, ptr %p, align 8
  store i64 %505, ptr %x805, align 8
  store i64 0, ptr %x806, align 8
  %506 = load ptr, ptr %z, align 8, !dbg !1450
  %507 = load ptr, ptr %r, align 8, !dbg !1450
  %508 = ptrtoint ptr %507 to i64, !dbg !1450
  %509 = ptrtoint ptr %506 to i64, !dbg !1450
  %510 = sub i64 %509, %508, !dbg !1450
  %511 = sdiv exact i64 %510, 4, !dbg !1450
  %sub807 = sub i64 %511, 1, !dbg !1450
  %mul808 = mul i64 9, %sub807, !dbg !1450
  %512 = load i32, ptr %j, align 4, !dbg !1450
  %sext809 = sext i32 %512 to i64, !dbg !1450
  %sub810 = sub i64 %mul808, %sext809, !dbg !1450
  store i64 %sub810, ptr %y811, align 8
  %513 = load i64, ptr %x806, align 8, !dbg !1452
  %514 = load i64, ptr %y811, align 8, !dbg !1452
  %515 = call i64 @llvm.smax.i64(i64 %513, i64 %514), !dbg !1452
  store i64 %515, ptr %y812, align 8
  %516 = load i64, ptr %x805, align 8, !dbg !1454
  %517 = load i64, ptr %y812, align 8, !dbg !1454
  %518 = call i64 @llvm.smin.i64(i64 %516, i64 %517), !dbg !1454
  store i64 %518, ptr %p, align 8, !dbg !1454
  br label %if.exit824, !dbg !1454

if.else813:                                       ; preds = %if.exit802
  %519 = load i64, ptr %p, align 8
  store i64 %519, ptr %x814, align 8
  store i64 0, ptr %x815, align 8
  %520 = load ptr, ptr %z, align 8, !dbg !1456
  %521 = load ptr, ptr %r, align 8, !dbg !1456
  %522 = ptrtoint ptr %521 to i64, !dbg !1456
  %523 = ptrtoint ptr %520 to i64, !dbg !1456
  %524 = sub i64 %523, %522, !dbg !1456
  %525 = sdiv exact i64 %524, 4, !dbg !1456
  %sub816 = sub i64 %525, 1, !dbg !1456
  %mul817 = mul i64 9, %sub816, !dbg !1456
  %526 = load i32, ptr %e535, align 4, !dbg !1456
  %sext818 = sext i32 %526 to i64, !dbg !1456
  %add819 = add i64 %mul817, %sext818, !dbg !1456
  %527 = load i32, ptr %j, align 4, !dbg !1456
  %sext820 = sext i32 %527 to i64, !dbg !1456
  %sub821 = sub i64 %add819, %sext820, !dbg !1456
  store i64 %sub821, ptr %y822, align 8
  %528 = load i64, ptr %x815, align 8, !dbg !1458
  %529 = load i64, ptr %y822, align 8, !dbg !1458
  %530 = call i64 @llvm.smax.i64(i64 %528, i64 %529), !dbg !1458
  store i64 %530, ptr %y823, align 8
  %531 = load i64, ptr %x814, align 8, !dbg !1460
  %532 = load i64, ptr %y823, align 8, !dbg !1460
  %533 = call i64 @llvm.smin.i64(i64 %531, i64 %532), !dbg !1460
  store i64 %533, ptr %p, align 8, !dbg !1460
  br label %if.exit824, !dbg !1460

if.exit824:                                       ; preds = %if.else813, %if.then804
  br label %if.exit825, !dbg !1460

if.exit825:                                       ; preds = %if.exit824, %if.exit773
  br label %if.exit826, !dbg !1460

if.exit826:                                       ; preds = %if.exit825, %loop.exit754
  %534 = load i64, ptr %p, align 8, !dbg !1462
  %535 = load i64, ptr %p, align 8, !dbg !1462
  %i2b827 = icmp ne i64 %535, 0, !dbg !1462
  br i1 %i2b827, label %or.phi832, label %or.rhs828, !dbg !1462

or.rhs828:                                        ; preds = %if.exit826
  %536 = load ptr, ptr %self, align 8, !dbg !1462
  %ptradd829 = getelementptr inbounds i8, ptr %536, i64 16, !dbg !1462
  %537 = load i32, ptr %ptradd829, align 8, !dbg !1462
  %lshrl830 = lshr i32 %537, 4, !dbg !1462
  %538 = and i32 1, %lshrl830, !dbg !1462
  %trunc831 = trunc i32 %538 to i8, !dbg !1462
  %539 = trunc i8 %trunc831 to i1, !dbg !1462
  br label %or.phi832, !dbg !1462

or.phi832:                                        ; preds = %or.rhs828, %if.exit826
  %val833 = phi i1 [ true, %if.exit826 ], [ %539, %or.rhs828 ], !dbg !1462
  %zext834 = zext i1 %val833 to i64, !dbg !1462
  %sub835 = sub i64 2147483646, %zext834, !dbg !1462
  %gt836 = icmp sgt i64 %534, %sub835, !dbg !1462
  br i1 %gt836, label %if.then837, label %if.exit838, !dbg !1462

if.then837:                                       ; preds = %or.phi832
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1462

if.exit838:                                       ; preds = %or.phi832
    #dbg_declare(ptr %l839, !1463, !DIExpression(), !1464)
  %540 = load i64, ptr %p, align 8, !dbg !1464
  %add840 = add i64 1, %540, !dbg !1464
  %541 = load i64, ptr %p, align 8, !dbg !1464
  %i2b841 = icmp ne i64 %541, 0, !dbg !1464
  br i1 %i2b841, label %or.phi846, label %or.rhs842, !dbg !1464

or.rhs842:                                        ; preds = %if.exit838
  %542 = load ptr, ptr %self, align 8, !dbg !1464
  %ptradd843 = getelementptr inbounds i8, ptr %542, i64 16, !dbg !1464
  %543 = load i32, ptr %ptradd843, align 8, !dbg !1464
  %lshrl844 = lshr i32 %543, 4, !dbg !1464
  %544 = and i32 1, %lshrl844, !dbg !1464
  %trunc845 = trunc i32 %544 to i8, !dbg !1464
  %545 = trunc i8 %trunc845 to i1, !dbg !1464
  br label %or.phi846, !dbg !1464

or.phi846:                                        ; preds = %or.rhs842, %if.exit838
  %val847 = phi i1 [ true, %if.exit838 ], [ %545, %or.rhs842 ], !dbg !1464
  %zext848 = zext i1 %val847 to i64, !dbg !1464
  %add849 = add i64 %add840, %zext848, !dbg !1464
  %trunc850 = trunc i64 %add849 to i32, !dbg !1464
  store i32 %trunc850, ptr %l839, align 4, !dbg !1464
    #dbg_declare(ptr %estr851, !1465, !DIExpression(), !1466)
  %546 = load i32, ptr %formatting, align 4, !dbg !1467
  %eq852 = icmp eq i32 %546, 0, !dbg !1467
  br i1 %eq852, label %if.then853, label %if.else862, !dbg !1467

if.then853:                                       ; preds = %or.phi846
  %547 = load i32, ptr %e535, align 4, !dbg !1468
  %548 = load i32, ptr %l839, align 4, !dbg !1468
  %sub854 = sub i32 2147483647, %548, !dbg !1468
  %gt855 = icmp sgt i32 %547, %sub854, !dbg !1468
  br i1 %gt855, label %if.then856, label %if.exit857, !dbg !1468

if.then856:                                       ; preds = %if.then853
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1468

if.exit857:                                       ; preds = %if.then853
  %549 = load i32, ptr %e535, align 4, !dbg !1470
  %gt858 = icmp sgt i32 %549, 0, !dbg !1470
  br i1 %gt858, label %if.then859, label %if.exit861, !dbg !1470

if.then859:                                       ; preds = %if.exit857
  %550 = load i32, ptr %l839, align 4, !dbg !1470
  %551 = load i32, ptr %e535, align 4, !dbg !1470
  %add860 = add i32 %550, %551, !dbg !1470
  store i32 %add860, ptr %l839, align 4, !dbg !1470
  br label %if.exit861, !dbg !1470

if.exit861:                                       ; preds = %if.then859, %if.exit857
  br label %if.exit903, !dbg !1470

if.else862:                                       ; preds = %or.phi846
  %552 = load i32, ptr %e535, align 4, !dbg !1471
  %lt863 = icmp slt i32 %552, 0, !dbg !1471
  br i1 %lt863, label %cond.lhs864, label %cond.rhs866, !dbg !1471

cond.lhs864:                                      ; preds = %if.else862
  %553 = load i32, ptr %e535, align 4, !dbg !1471
  %neg865 = sub i32 0, %553, !dbg !1471
  br label %cond.phi867, !dbg !1471

cond.rhs866:                                      ; preds = %if.else862
  %554 = load i32, ptr %e535, align 4, !dbg !1471
  br label %cond.phi867, !dbg !1471

cond.phi867:                                      ; preds = %cond.rhs866, %cond.lhs864
  %val868 = phi i32 [ %neg865, %cond.lhs864 ], [ %554, %cond.rhs866 ], !dbg !1471
  %sext869 = sext i32 %val868 to i128, !dbg !1471
  store i128 %sext869, ptr %indirectarg870, align 16
  %555 = load ptr, ptr %ebuf, align 8
  %556 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg870, ptr %555), !dbg !1471
  store ptr %556, ptr %estr851, align 8, !dbg !1471
  br label %loop.cond871, !dbg !1473

loop.cond871:                                     ; preds = %loop.body873, %cond.phi867
  %557 = load ptr, ptr %ebuf, align 8, !dbg !1474
  %558 = load ptr, ptr %estr851, align 8, !dbg !1474
  %559 = ptrtoint ptr %558 to i64, !dbg !1474
  %560 = ptrtoint ptr %557 to i64, !dbg !1474
  %561 = sub i64 %560, %559, !dbg !1474
  %562 = sdiv exact i64 %561, 1, !dbg !1474
  %lt872 = icmp slt i64 %562, 2, !dbg !1474
  br i1 %lt872, label %loop.body873, label %loop.exit875, !dbg !1474

loop.body873:                                     ; preds = %loop.cond871
  %563 = load ptr, ptr %estr851, align 8, !dbg !1474
  %ptradd_any874 = getelementptr i8, ptr %563, i8 -1, !dbg !1474
  store ptr %ptradd_any874, ptr %estr851, align 8, !dbg !1474
  store i8 48, ptr %ptradd_any874, align 1, !dbg !1474
  br label %loop.cond871, !dbg !1474

loop.exit875:                                     ; preds = %loop.cond871
  %564 = load ptr, ptr %estr851, align 8, !dbg !1476
  %ptradd_any876 = getelementptr i8, ptr %564, i8 -1, !dbg !1476
  store ptr %ptradd_any876, ptr %estr851, align 8, !dbg !1476
  %checknull877 = icmp eq ptr %ptradd_any876, null, !dbg !1476
  %565 = call i1 @llvm.expect.i1(i1 %checknull877, i1 false), !dbg !1476
  br i1 %565, label %panic878, label %checkok882, !dbg !1476

checkok882:                                       ; preds = %loop.exit875
  %566 = load i32, ptr %e535, align 4, !dbg !1476
  %lt883 = icmp slt i32 %566, 0, !dbg !1476
  %ternary884 = select i1 %lt883, i8 45, i8 43, !dbg !1476
  store i8 %ternary884, ptr %ptradd_any876, align 1, !dbg !1476
  %567 = load ptr, ptr %estr851, align 8, !dbg !1477
  %ptradd_any885 = getelementptr i8, ptr %567, i8 -1, !dbg !1477
  store ptr %ptradd_any885, ptr %estr851, align 8, !dbg !1477
  %checknull886 = icmp eq ptr %ptradd_any885, null, !dbg !1477
  %568 = call i1 @llvm.expect.i1(i1 %checknull886, i1 false), !dbg !1477
  br i1 %568, label %panic887, label %checkok891, !dbg !1477

checkok891:                                       ; preds = %checkok882
  %569 = load ptr, ptr %self, align 8, !dbg !1477
  %ptradd892 = getelementptr inbounds i8, ptr %569, i64 16, !dbg !1477
  %570 = load i32, ptr %ptradd892, align 8, !dbg !1477
  %lshrl893 = lshr i32 %570, 5, !dbg !1477
  %571 = and i32 1, %lshrl893, !dbg !1477
  %trunc894 = trunc i32 %571 to i8, !dbg !1477
  %572 = trunc i8 %trunc894 to i1, !dbg !1477
  %ternary895 = select i1 %572, i8 69, i8 101, !dbg !1477
  store i8 %ternary895, ptr %ptradd_any885, align 1, !dbg !1477
  %573 = load ptr, ptr %ebuf, align 8, !dbg !1478
  %574 = load ptr, ptr %estr851, align 8, !dbg !1478
  %575 = ptrtoint ptr %574 to i64, !dbg !1478
  %576 = ptrtoint ptr %573 to i64, !dbg !1478
  %577 = sub i64 %576, %575, !dbg !1478
  %578 = sdiv exact i64 %577, 1, !dbg !1478
  %579 = load i32, ptr %l839, align 4, !dbg !1478
  %sext896 = sext i32 %579 to i64, !dbg !1478
  %sub897 = sub i64 2147483647, %sext896, !dbg !1478
  %gt898 = icmp sgt i64 %578, %sub897, !dbg !1478
  br i1 %gt898, label %if.then899, label %if.exit900, !dbg !1478

if.then899:                                       ; preds = %checkok891
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1478

if.exit900:                                       ; preds = %checkok891
  %580 = load i32, ptr %l839, align 4, !dbg !1479
  %581 = load ptr, ptr %ebuf, align 8, !dbg !1479
  %582 = load ptr, ptr %estr851, align 8, !dbg !1479
  %583 = ptrtoint ptr %582 to i64, !dbg !1479
  %584 = ptrtoint ptr %581 to i64, !dbg !1479
  %585 = sub i64 %584, %583, !dbg !1479
  %586 = sdiv exact i64 %585, 1, !dbg !1479
  %trunc901 = trunc i64 %586 to i32, !dbg !1479
  %add902 = add i32 %580, %trunc901, !dbg !1479
  store i32 %add902, ptr %l839, align 4, !dbg !1479
  br label %if.exit903, !dbg !1479

if.exit903:                                       ; preds = %if.exit900, %if.exit861
  %587 = load i32, ptr %l839, align 4, !dbg !1480
  %sext904 = sext i32 %587 to i64, !dbg !1480
  %588 = load i64, ptr %pl, align 8, !dbg !1480
  %sub905 = sub i64 2147483647, %588, !dbg !1480
  %gt906 = icmp sgt i64 %sext904, %sub905, !dbg !1480
  br i1 %gt906, label %if.then907, label %if.exit908, !dbg !1480

if.then907:                                       ; preds = %if.exit903
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1480

if.exit908:                                       ; preds = %if.exit903
    #dbg_declare(ptr %len909, !1481, !DIExpression(), !1482)
  store i64 0, ptr %len909, align 8, !dbg !1482
  %589 = load ptr, ptr %self, align 8, !dbg !1483
  %ptradd910 = getelementptr inbounds i8, ptr %589, i64 16, !dbg !1483
  %590 = load i32, ptr %ptradd910, align 8, !dbg !1483
  %lshrl911 = lshr i32 %590, 1, !dbg !1483
  %591 = and i32 1, %lshrl911, !dbg !1483
  %trunc912 = trunc i32 %591 to i8, !dbg !1483
  %592 = trunc i8 %trunc912 to i1, !dbg !1483
  %not913 = xor i1 %592, true, !dbg !1483
  br i1 %not913, label %and.rhs914, label %and.phi918, !dbg !1483

and.rhs914:                                       ; preds = %if.exit908
  %593 = load ptr, ptr %self, align 8, !dbg !1483
  %ptradd915 = getelementptr inbounds i8, ptr %593, i64 16, !dbg !1483
  %594 = load i32, ptr %ptradd915, align 8, !dbg !1483
  %595 = and i32 1, %594, !dbg !1483
  %trunc916 = trunc i32 %595 to i8, !dbg !1483
  %596 = trunc i8 %trunc916 to i1, !dbg !1483
  %not917 = xor i1 %596, true, !dbg !1483
  br label %and.phi918, !dbg !1483

and.phi918:                                       ; preds = %and.rhs914, %if.exit908
  %val919 = phi i1 [ false, %if.exit908 ], [ %not917, %and.rhs914 ], !dbg !1483
  br i1 %val919, label %if.then920, label %if.exit934, !dbg !1483

if.then920:                                       ; preds = %and.phi918
  %597 = load i64, ptr %len909, align 8, !dbg !1483
  %598 = load ptr, ptr %self, align 8, !dbg !1483
  %ptradd922 = getelementptr inbounds i8, ptr %598, i64 16, !dbg !1483
  %ptradd923 = getelementptr inbounds i8, ptr %ptradd922, i64 4, !dbg !1483
  %599 = load i32, ptr %ptradd923, align 4, !dbg !1483
  %zext924 = zext i32 %599 to i64, !dbg !1483
  %600 = load i64, ptr %pl, align 8, !dbg !1483
  %601 = load i32, ptr %l839, align 4, !dbg !1483
  %sext925 = sext i32 %601 to i64, !dbg !1483
  %add926 = add i64 %600, %sext925, !dbg !1483
  %602 = load ptr, ptr %self, align 8
  %603 = call i64 @std.io.Formatter.pad(ptr %retparam927, ptr %602, i8 32, i64 %zext924, i64 %add926) #5, !dbg !1483
  %not_err928 = icmp eq i64 %603, 0, !dbg !1483
  %604 = call i1 @llvm.expect.i1(i1 %not_err928, i1 true), !dbg !1483
  br i1 %604, label %after_check930, label %assign_optional929, !dbg !1483

assign_optional929:                               ; preds = %if.then920
  store i64 %603, ptr %error_var921, align 8, !dbg !1483
  br label %guard_block931, !dbg !1483

after_check930:                                   ; preds = %if.then920
  br label %noerr_block932, !dbg !1483

guard_block931:                                   ; preds = %assign_optional929
  %605 = load i64, ptr %error_var921, align 8, !dbg !1483
  ret i64 %605, !dbg !1483

noerr_block932:                                   ; preds = %after_check930
  %606 = load i64, ptr %retparam927, align 8, !dbg !1483
  %add933 = add i64 %597, %606, !dbg !1483
  store i64 %add933, ptr %len909, align 8, !dbg !1483
  br label %if.exit934, !dbg !1483

if.exit934:                                       ; preds = %noerr_block932, %and.phi918
  %607 = load i8, ptr %is_neg, align 1, !dbg !1484
  %608 = trunc i8 %607 to i1, !dbg !1484
  br i1 %608, label %or.phi939, label %or.rhs935, !dbg !1484

or.rhs935:                                        ; preds = %if.exit934
  %609 = load ptr, ptr %self, align 8, !dbg !1484
  %ptradd936 = getelementptr inbounds i8, ptr %609, i64 16, !dbg !1484
  %610 = load i32, ptr %ptradd936, align 8, !dbg !1484
  %lshrl937 = lshr i32 %610, 2, !dbg !1484
  %611 = and i32 1, %lshrl937, !dbg !1484
  %trunc938 = trunc i32 %611 to i8, !dbg !1484
  %612 = trunc i8 %trunc938 to i1, !dbg !1484
  br label %or.phi939, !dbg !1484

or.phi939:                                        ; preds = %or.rhs935, %if.exit934
  %val940 = phi i1 [ true, %if.exit934 ], [ %612, %or.rhs935 ], !dbg !1484
  br i1 %val940, label %if.then941, label %if.exit951, !dbg !1484

if.then941:                                       ; preds = %or.phi939
  %613 = load i64, ptr %len909, align 8, !dbg !1484
  %614 = load i8, ptr %is_neg, align 1, !dbg !1484
  %615 = trunc i8 %614 to i1, !dbg !1484
  %ternary943 = select i1 %615, i8 45, i8 43, !dbg !1484
  %616 = load ptr, ptr %self, align 8
  %617 = call i64 @std.io.Formatter.out(ptr %retparam944, ptr %616, i8 %ternary943), !dbg !1484
  %not_err945 = icmp eq i64 %617, 0, !dbg !1484
  %618 = call i1 @llvm.expect.i1(i1 %not_err945, i1 true), !dbg !1484
  br i1 %618, label %after_check947, label %assign_optional946, !dbg !1484

assign_optional946:                               ; preds = %if.then941
  store i64 %617, ptr %error_var942, align 8, !dbg !1484
  br label %guard_block948, !dbg !1484

after_check947:                                   ; preds = %if.then941
  br label %noerr_block949, !dbg !1484

guard_block948:                                   ; preds = %assign_optional946
  %619 = load i64, ptr %error_var942, align 8, !dbg !1484
  ret i64 %619, !dbg !1484

noerr_block949:                                   ; preds = %after_check947
  %620 = load i64, ptr %retparam944, align 8, !dbg !1484
  %add950 = add i64 %613, %620, !dbg !1484
  store i64 %add950, ptr %len909, align 8, !dbg !1484
  br label %if.exit951, !dbg !1484

if.exit951:                                       ; preds = %noerr_block949, %or.phi939
  %621 = load ptr, ptr %self, align 8, !dbg !1485
  %ptradd952 = getelementptr inbounds i8, ptr %621, i64 16, !dbg !1485
  %622 = load i32, ptr %ptradd952, align 8, !dbg !1485
  %623 = and i32 1, %622, !dbg !1485
  %trunc953 = trunc i32 %623 to i8, !dbg !1485
  %624 = trunc i8 %trunc953 to i1, !dbg !1485
  br i1 %624, label %if.then954, label %if.exit968, !dbg !1485

if.then954:                                       ; preds = %if.exit951
  %625 = load i64, ptr %len909, align 8, !dbg !1485
  %626 = load ptr, ptr %self, align 8, !dbg !1485
  %ptradd956 = getelementptr inbounds i8, ptr %626, i64 16, !dbg !1485
  %ptradd957 = getelementptr inbounds i8, ptr %ptradd956, i64 4, !dbg !1485
  %627 = load i32, ptr %ptradd957, align 4, !dbg !1485
  %zext958 = zext i32 %627 to i64, !dbg !1485
  %628 = load i64, ptr %pl, align 8, !dbg !1485
  %629 = load i32, ptr %l839, align 4, !dbg !1485
  %sext959 = sext i32 %629 to i64, !dbg !1485
  %add960 = add i64 %628, %sext959, !dbg !1485
  %630 = load ptr, ptr %self, align 8
  %631 = call i64 @std.io.Formatter.pad(ptr %retparam961, ptr %630, i8 48, i64 %zext958, i64 %add960) #5, !dbg !1485
  %not_err962 = icmp eq i64 %631, 0, !dbg !1485
  %632 = call i1 @llvm.expect.i1(i1 %not_err962, i1 true), !dbg !1485
  br i1 %632, label %after_check964, label %assign_optional963, !dbg !1485

assign_optional963:                               ; preds = %if.then954
  store i64 %631, ptr %error_var955, align 8, !dbg !1485
  br label %guard_block965, !dbg !1485

after_check964:                                   ; preds = %if.then954
  br label %noerr_block966, !dbg !1485

guard_block965:                                   ; preds = %assign_optional963
  %633 = load i64, ptr %error_var955, align 8, !dbg !1485
  ret i64 %633, !dbg !1485

noerr_block966:                                   ; preds = %after_check964
  %634 = load i64, ptr %retparam961, align 8, !dbg !1485
  %add967 = add i64 %625, %634, !dbg !1485
  store i64 %add967, ptr %len909, align 8, !dbg !1485
  br label %if.exit968, !dbg !1485

if.exit968:                                       ; preds = %noerr_block966, %if.exit951
  %635 = load i32, ptr %formatting, align 4, !dbg !1486
  %eq969 = icmp eq i32 %635, 0, !dbg !1486
  br i1 %eq969, label %if.then970, label %if.else1096, !dbg !1486

if.then970:                                       ; preds = %if.exit968
  %636 = load ptr, ptr %a, align 8, !dbg !1487
  %637 = load ptr, ptr %r, align 8, !dbg !1487
  %gt971 = icmp ugt ptr %636, %637, !dbg !1487
  br i1 %gt971, label %if.then972, label %if.exit973, !dbg !1487

if.then972:                                       ; preds = %if.then970
  %638 = load ptr, ptr %r, align 8, !dbg !1487
  store ptr %638, ptr %a, align 8, !dbg !1487
  br label %if.exit973, !dbg !1487

if.exit973:                                       ; preds = %if.then972, %if.then970
    #dbg_declare(ptr %d974, !1489, !DIExpression(), !1490)
  %639 = load ptr, ptr %a, align 8, !dbg !1490
  store ptr %639, ptr %d974, align 8, !dbg !1490
  br label %loop.cond975, !dbg !1491

loop.cond975:                                     ; preds = %noerr_block1022, %if.exit973
  %640 = load ptr, ptr %d974, align 8, !dbg !1492
  %641 = load ptr, ptr %r, align 8, !dbg !1492
  %le976 = icmp ule ptr %640, %641, !dbg !1492
  br i1 %le976, label %loop.body977, label %loop.exit1025, !dbg !1492

loop.body977:                                     ; preds = %loop.cond975
    #dbg_declare(ptr %s978, !1494, !DIExpression(), !1496)
  %642 = load ptr, ptr %d974, align 8, !dbg !1496
  %checknull979 = icmp eq ptr %642, null, !dbg !1496
  %643 = call i1 @llvm.expect.i1(i1 %checknull979, i1 false), !dbg !1496
  br i1 %643, label %panic980, label %checkok984, !dbg !1496

checkok984:                                       ; preds = %loop.body977
  %644 = load i32, ptr %642, align 4, !dbg !1496
  %zext985 = zext i32 %644 to i128, !dbg !1496
  %645 = load ptr, ptr %buf, align 8, !dbg !1496
  %ptradd_any986 = getelementptr i8, ptr %645, i64 9, !dbg !1496
  store i128 %zext985, ptr %indirectarg987, align 16
  %646 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg987, ptr %ptradd_any986), !dbg !1496
  store ptr %646, ptr %s978, align 8, !dbg !1496
  store i8 1, ptr %switch988, align 1
  br label %switch.entry989

switch.entry989:                                  ; preds = %checkok984
  %647 = load i8, ptr %switch988, align 1
  %648 = trunc i8 %647 to i1
  %649 = load ptr, ptr %d974, align 8, !dbg !1497
  %650 = load ptr, ptr %a, align 8, !dbg !1497
  %neq990 = icmp ne ptr %649, %650, !dbg !1497
  %eq991 = icmp eq i1 %neq990, %648, !dbg !1497
  br i1 %eq991, label %switch.case992, label %next_if998, !dbg !1497

switch.case992:                                   ; preds = %switch.entry989
  br label %loop.cond993, !dbg !1499

loop.cond993:                                     ; preds = %loop.body995, %switch.case992
  %651 = load ptr, ptr %s978, align 8, !dbg !1501
  %652 = load ptr, ptr %buf, align 8, !dbg !1501
  %gt994 = icmp ugt ptr %651, %652, !dbg !1501
  br i1 %gt994, label %loop.body995, label %loop.exit997, !dbg !1501

loop.body995:                                     ; preds = %loop.cond993
  %653 = load ptr, ptr %s978, align 8, !dbg !1501
  %ptradd_any996 = getelementptr i8, ptr %653, i8 -1, !dbg !1501
  store ptr %ptradd_any996, ptr %s978, align 8, !dbg !1501
  store i8 48, ptr %ptradd_any996, align 1, !dbg !1501
  br label %loop.cond993, !dbg !1501

loop.exit997:                                     ; preds = %loop.cond993
  br label %switch.exit1011, !dbg !1501

next_if998:                                       ; preds = %switch.entry989
  %654 = load ptr, ptr %s978, align 8, !dbg !1503
  %655 = load ptr, ptr %buf, align 8, !dbg !1503
  %ptradd_any999 = getelementptr i8, ptr %655, i64 9, !dbg !1503
  %eq1000 = icmp eq ptr %654, %ptradd_any999, !dbg !1503
  %eq1001 = icmp eq i1 %eq1000, %648, !dbg !1503
  br i1 %eq1001, label %switch.case1002, label %next_if1010, !dbg !1503

switch.case1002:                                  ; preds = %next_if998
  %656 = load ptr, ptr %s978, align 8, !dbg !1504
  %ptradd_any1003 = getelementptr i8, ptr %656, i8 -1, !dbg !1504
  store ptr %ptradd_any1003, ptr %s978, align 8, !dbg !1504
  %checknull1004 = icmp eq ptr %ptradd_any1003, null, !dbg !1504
  %657 = call i1 @llvm.expect.i1(i1 %checknull1004, i1 false), !dbg !1504
  br i1 %657, label %panic1005, label %checkok1009, !dbg !1504

checkok1009:                                      ; preds = %switch.case1002
  store i8 48, ptr %ptradd_any1003, align 1, !dbg !1504
  br label %switch.exit1011, !dbg !1504

next_if1010:                                      ; preds = %next_if998
  br label %switch.exit1011, !dbg !1504

switch.exit1011:                                  ; preds = %next_if1010, %checkok1009, %loop.exit997
  %658 = load i64, ptr %len909, align 8, !dbg !1506
  %659 = load ptr, ptr %s978, align 8, !dbg !1506
  %660 = load ptr, ptr %buf, align 8, !dbg !1506
  %ptradd_any1013 = getelementptr i8, ptr %660, i64 9, !dbg !1506
  %661 = load ptr, ptr %s978, align 8, !dbg !1506
  %662 = ptrtoint ptr %661 to i64, !dbg !1506
  %663 = ptrtoint ptr %ptradd_any1013 to i64, !dbg !1506
  %664 = sub i64 %663, %662, !dbg !1506
  %665 = sdiv exact i64 %664, 1, !dbg !1506
  %add1014 = add i64 0, %665, !dbg !1506
  %size1015 = sub i64 %add1014, 0, !dbg !1506
  %666 = insertvalue %"char[]" undef, ptr %659, 0, !dbg !1506
  %667 = insertvalue %"char[]" %666, i64 %size1015, 1, !dbg !1506
  %668 = load ptr, ptr %self, align 8
  store %"char[]" %667, ptr %indirectarg1017, align 8
  %669 = call i64 @std.io.Formatter.out_chars(ptr %retparam1016, ptr %668, ptr align 8 %indirectarg1017), !dbg !1506
  %not_err1018 = icmp eq i64 %669, 0, !dbg !1506
  %670 = call i1 @llvm.expect.i1(i1 %not_err1018, i1 true), !dbg !1506
  br i1 %670, label %after_check1020, label %assign_optional1019, !dbg !1506

assign_optional1019:                              ; preds = %switch.exit1011
  store i64 %669, ptr %error_var1012, align 8, !dbg !1506
  br label %guard_block1021, !dbg !1506

after_check1020:                                  ; preds = %switch.exit1011
  br label %noerr_block1022, !dbg !1506

guard_block1021:                                  ; preds = %assign_optional1019
  %671 = load i64, ptr %error_var1012, align 8, !dbg !1506
  ret i64 %671, !dbg !1506

noerr_block1022:                                  ; preds = %after_check1020
  %672 = load i64, ptr %retparam1016, align 8, !dbg !1506
  %add1023 = add i64 %658, %672, !dbg !1506
  store i64 %add1023, ptr %len909, align 8, !dbg !1506
  %673 = load ptr, ptr %d974, align 8, !dbg !1492
  %ptradd_any1024 = getelementptr i8, ptr %673, i8 4, !dbg !1492
  store ptr %ptradd_any1024, ptr %d974, align 8, !dbg !1492
  br label %loop.cond975, !dbg !1492

loop.exit1025:                                    ; preds = %loop.cond975
  %674 = load i64, ptr %p, align 8, !dbg !1507
  %i2b1026 = icmp ne i64 %674, 0, !dbg !1507
  br i1 %i2b1026, label %or.phi1031, label %or.rhs1027, !dbg !1507

or.rhs1027:                                       ; preds = %loop.exit1025
  %675 = load ptr, ptr %self, align 8, !dbg !1507
  %ptradd1028 = getelementptr inbounds i8, ptr %675, i64 16, !dbg !1507
  %676 = load i32, ptr %ptradd1028, align 8, !dbg !1507
  %lshrl1029 = lshr i32 %676, 4, !dbg !1507
  %677 = and i32 1, %lshrl1029, !dbg !1507
  %trunc1030 = trunc i32 %677 to i8, !dbg !1507
  %678 = trunc i8 %trunc1030 to i1, !dbg !1507
  br label %or.phi1031, !dbg !1507

or.phi1031:                                       ; preds = %or.rhs1027, %loop.exit1025
  %val1032 = phi i1 [ true, %loop.exit1025 ], [ %678, %or.rhs1027 ], !dbg !1507
  br i1 %val1032, label %if.then1033, label %if.exit1042, !dbg !1507

if.then1033:                                      ; preds = %or.phi1031
  %679 = load i64, ptr %len909, align 8, !dbg !1507
  %680 = load ptr, ptr %self, align 8
  %681 = call i64 @std.io.Formatter.out(ptr %retparam1035, ptr %680, i8 46), !dbg !1507
  %not_err1036 = icmp eq i64 %681, 0, !dbg !1507
  %682 = call i1 @llvm.expect.i1(i1 %not_err1036, i1 true), !dbg !1507
  br i1 %682, label %after_check1038, label %assign_optional1037, !dbg !1507

assign_optional1037:                              ; preds = %if.then1033
  store i64 %681, ptr %error_var1034, align 8, !dbg !1507
  br label %guard_block1039, !dbg !1507

after_check1038:                                  ; preds = %if.then1033
  br label %noerr_block1040, !dbg !1507

guard_block1039:                                  ; preds = %assign_optional1037
  %683 = load i64, ptr %error_var1034, align 8, !dbg !1507
  ret i64 %683, !dbg !1507

noerr_block1040:                                  ; preds = %after_check1038
  %684 = load i64, ptr %retparam1035, align 8, !dbg !1507
  %add1041 = add i64 %679, %684, !dbg !1507
  store i64 %add1041, ptr %len909, align 8, !dbg !1507
  br label %if.exit1042, !dbg !1507

if.exit1042:                                      ; preds = %noerr_block1040, %or.phi1031
  br label %loop.cond1043, !dbg !1508

loop.cond1043:                                    ; preds = %noerr_block1082, %if.exit1042
  %685 = load ptr, ptr %d974, align 8, !dbg !1509
  %686 = load ptr, ptr %z, align 8, !dbg !1509
  %lt1044 = icmp ult ptr %685, %686, !dbg !1509
  br i1 %lt1044, label %and.rhs1045, label %and.phi1047, !dbg !1509

and.rhs1045:                                      ; preds = %loop.cond1043
  %687 = load i64, ptr %p, align 8, !dbg !1509
  %gt1046 = icmp sgt i64 %687, 0, !dbg !1509
  br label %and.phi1047, !dbg !1509

and.phi1047:                                      ; preds = %and.rhs1045, %loop.cond1043
  %val1048 = phi i1 [ false, %loop.cond1043 ], [ %gt1046, %and.rhs1045 ], !dbg !1509
  br i1 %val1048, label %loop.body1049, label %loop.exit1086, !dbg !1509

loop.body1049:                                    ; preds = %and.phi1047
    #dbg_declare(ptr %s1050, !1511, !DIExpression(), !1513)
  %688 = load ptr, ptr %d974, align 8, !dbg !1513
  %checknull1051 = icmp eq ptr %688, null, !dbg !1513
  %689 = call i1 @llvm.expect.i1(i1 %checknull1051, i1 false), !dbg !1513
  br i1 %689, label %panic1052, label %checkok1056, !dbg !1513

checkok1056:                                      ; preds = %loop.body1049
  %690 = load i32, ptr %688, align 4, !dbg !1513
  %zext1057 = zext i32 %690 to i128, !dbg !1513
  %691 = load ptr, ptr %buf, align 8, !dbg !1513
  %ptradd_any1058 = getelementptr i8, ptr %691, i64 9, !dbg !1513
  store i128 %zext1057, ptr %indirectarg1059, align 16
  %692 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg1059, ptr %ptradd_any1058), !dbg !1513
  store ptr %692, ptr %s1050, align 8, !dbg !1513
  br label %loop.cond1060, !dbg !1514

loop.cond1060:                                    ; preds = %checkok1069, %checkok1056
  %693 = load ptr, ptr %s1050, align 8, !dbg !1515
  %694 = load ptr, ptr %buf, align 8, !dbg !1515
  %gt1061 = icmp ugt ptr %693, %694, !dbg !1515
  br i1 %gt1061, label %loop.body1062, label %loop.exit1070, !dbg !1515

loop.body1062:                                    ; preds = %loop.cond1060
  %695 = load ptr, ptr %s1050, align 8, !dbg !1515
  %ptradd_any1063 = getelementptr i8, ptr %695, i8 -1, !dbg !1515
  store ptr %ptradd_any1063, ptr %s1050, align 8, !dbg !1515
  %checknull1064 = icmp eq ptr %ptradd_any1063, null, !dbg !1515
  %696 = call i1 @llvm.expect.i1(i1 %checknull1064, i1 false), !dbg !1515
  br i1 %696, label %panic1065, label %checkok1069, !dbg !1515

checkok1069:                                      ; preds = %loop.body1062
  store i8 48, ptr %ptradd_any1063, align 1, !dbg !1515
  br label %loop.cond1060, !dbg !1515

loop.exit1070:                                    ; preds = %loop.cond1060
  %697 = load i64, ptr %len909, align 8, !dbg !1517
  %698 = load ptr, ptr %s1050, align 8, !dbg !1517
  store i64 9, ptr %x1072, align 8
  %699 = load i64, ptr %p, align 8
  store i64 %699, ptr %y1073, align 8
  %700 = load i64, ptr %x1072, align 8, !dbg !1518
  %701 = load i64, ptr %y1073, align 8, !dbg !1518
  %702 = call i64 @llvm.smin.i64(i64 %700, i64 %701), !dbg !1518
  %add1074 = add i64 0, %702, !dbg !1518
  %size1075 = sub i64 %add1074, 0, !dbg !1518
  %703 = insertvalue %"char[]" undef, ptr %698, 0, !dbg !1518
  %704 = insertvalue %"char[]" %703, i64 %size1075, 1, !dbg !1518
  %705 = load ptr, ptr %self, align 8
  store %"char[]" %704, ptr %indirectarg1077, align 8
  %706 = call i64 @std.io.Formatter.out_chars(ptr %retparam1076, ptr %705, ptr align 8 %indirectarg1077), !dbg !1517
  %not_err1078 = icmp eq i64 %706, 0, !dbg !1517
  %707 = call i1 @llvm.expect.i1(i1 %not_err1078, i1 true), !dbg !1517
  br i1 %707, label %after_check1080, label %assign_optional1079, !dbg !1517

assign_optional1079:                              ; preds = %loop.exit1070
  store i64 %706, ptr %error_var1071, align 8, !dbg !1517
  br label %guard_block1081, !dbg !1517

after_check1080:                                  ; preds = %loop.exit1070
  br label %noerr_block1082, !dbg !1517

guard_block1081:                                  ; preds = %assign_optional1079
  %708 = load i64, ptr %error_var1071, align 8, !dbg !1517
  ret i64 %708, !dbg !1517

noerr_block1082:                                  ; preds = %after_check1080
  %709 = load i64, ptr %retparam1076, align 8, !dbg !1517
  %add1083 = add i64 %697, %709, !dbg !1517
  store i64 %add1083, ptr %len909, align 8, !dbg !1517
  %710 = load ptr, ptr %d974, align 8, !dbg !1509
  %ptradd_any1084 = getelementptr i8, ptr %710, i8 4, !dbg !1509
  store ptr %ptradd_any1084, ptr %d974, align 8, !dbg !1509
  %711 = load i64, ptr %p, align 8, !dbg !1509
  %sub1085 = sub i64 %711, 9, !dbg !1509
  store i64 %sub1085, ptr %p, align 8, !dbg !1509
  br label %loop.cond1043, !dbg !1509

loop.exit1086:                                    ; preds = %and.phi1047
  %712 = load i64, ptr %len909, align 8, !dbg !1520
  %713 = load i64, ptr %p, align 8, !dbg !1520
  %add1088 = add i64 %713, 9, !dbg !1520
  %714 = load ptr, ptr %self, align 8
  %715 = call i64 @std.io.Formatter.pad(ptr %retparam1089, ptr %714, i8 48, i64 %add1088, i64 9) #5, !dbg !1520
  %not_err1090 = icmp eq i64 %715, 0, !dbg !1520
  %716 = call i1 @llvm.expect.i1(i1 %not_err1090, i1 true), !dbg !1520
  br i1 %716, label %after_check1092, label %assign_optional1091, !dbg !1520

assign_optional1091:                              ; preds = %loop.exit1086
  store i64 %715, ptr %error_var1087, align 8, !dbg !1520
  br label %guard_block1093, !dbg !1520

after_check1092:                                  ; preds = %loop.exit1086
  br label %noerr_block1094, !dbg !1520

guard_block1093:                                  ; preds = %assign_optional1091
  %717 = load i64, ptr %error_var1087, align 8, !dbg !1520
  ret i64 %717, !dbg !1520

noerr_block1094:                                  ; preds = %after_check1092
  %718 = load i64, ptr %retparam1089, align 8, !dbg !1520
  %add1095 = add i64 %712, %718, !dbg !1520
  store i64 %add1095, ptr %len909, align 8, !dbg !1520
  br label %if.exit1197, !dbg !1520

if.else1096:                                      ; preds = %if.exit968
  %719 = load ptr, ptr %z, align 8, !dbg !1521
  %720 = load ptr, ptr %a, align 8, !dbg !1521
  %le1097 = icmp ule ptr %719, %720, !dbg !1521
  br i1 %le1097, label %if.then1098, label %if.exit1100, !dbg !1521

if.then1098:                                      ; preds = %if.else1096
  %721 = load ptr, ptr %a, align 8, !dbg !1521
  %ptradd_any1099 = getelementptr i8, ptr %721, i64 4, !dbg !1521
  store ptr %ptradd_any1099, ptr %z, align 8, !dbg !1521
  br label %if.exit1100, !dbg !1521

if.exit1100:                                      ; preds = %if.then1098, %if.else1096
    #dbg_declare(ptr %d1101, !1523, !DIExpression(), !1525)
  %722 = load ptr, ptr %a, align 8, !dbg !1525
  store ptr %722, ptr %d1101, align 8, !dbg !1525
  br label %loop.cond1102, !dbg !1525

loop.cond1102:                                    ; preds = %noerr_block1171, %if.exit1100
  %723 = load ptr, ptr %d1101, align 8, !dbg !1525
  %724 = load ptr, ptr %z, align 8, !dbg !1525
  %lt1103 = icmp ult ptr %723, %724, !dbg !1525
  br i1 %lt1103, label %and.rhs1104, label %and.phi1106, !dbg !1525

and.rhs1104:                                      ; preds = %loop.cond1102
  %725 = load i64, ptr %p, align 8, !dbg !1525
  %ge1105 = icmp sge i64 %725, 0, !dbg !1525
  br label %and.phi1106, !dbg !1525

and.phi1106:                                      ; preds = %and.rhs1104, %loop.cond1102
  %val1107 = phi i1 [ false, %loop.cond1102 ], [ %ge1105, %and.rhs1104 ], !dbg !1525
  br i1 %val1107, label %loop.body1108, label %loop.exit1176, !dbg !1525

loop.body1108:                                    ; preds = %and.phi1106
    #dbg_declare(ptr %s1109, !1526, !DIExpression(), !1528)
  %726 = load ptr, ptr %d1101, align 8, !dbg !1528
  %checknull1110 = icmp eq ptr %726, null, !dbg !1528
  %727 = call i1 @llvm.expect.i1(i1 %checknull1110, i1 false), !dbg !1528
  br i1 %727, label %panic1111, label %checkok1115, !dbg !1528

checkok1115:                                      ; preds = %loop.body1108
  %728 = load i32, ptr %726, align 4, !dbg !1528
  %zext1116 = zext i32 %728 to i128, !dbg !1528
  %729 = load ptr, ptr %buf, align 8, !dbg !1528
  %ptradd_any1117 = getelementptr i8, ptr %729, i64 9, !dbg !1528
  store i128 %zext1116, ptr %indirectarg1118, align 16
  %730 = call ptr @std.io.fmt_u(ptr align 16 %indirectarg1118, ptr %ptradd_any1117), !dbg !1528
  store ptr %730, ptr %s1109, align 8, !dbg !1528
  %731 = load ptr, ptr %s1109, align 8, !dbg !1529
  %732 = load ptr, ptr %buf, align 8, !dbg !1529
  %ptradd_any1119 = getelementptr i8, ptr %732, i64 9, !dbg !1529
  %eq1120 = icmp eq ptr %731, %ptradd_any1119, !dbg !1529
  br i1 %eq1120, label %if.then1121, label %if.exit1123, !dbg !1529

if.then1121:                                      ; preds = %checkok1115
  %733 = load ptr, ptr %s1109, align 8, !dbg !1529
  %ptradd_any1122 = getelementptr i8, ptr %733, i8 -1, !dbg !1529
  store ptr %ptradd_any1122, ptr %s1109, align 8, !dbg !1529
  store i8 48, ptr %ptradd_any1122, align 1, !dbg !1529
  br label %if.exit1123, !dbg !1529

if.exit1123:                                      ; preds = %if.then1121, %checkok1115
  %734 = load ptr, ptr %d1101, align 8, !dbg !1530
  %735 = load ptr, ptr %a, align 8, !dbg !1530
  %neq1124 = icmp ne ptr %734, %735, !dbg !1530
  br i1 %neq1124, label %if.then1125, label %if.else1131, !dbg !1530

if.then1125:                                      ; preds = %if.exit1123
  br label %loop.cond1126, !dbg !1531

loop.cond1126:                                    ; preds = %loop.body1128, %if.then1125
  %736 = load ptr, ptr %s1109, align 8, !dbg !1533
  %737 = load ptr, ptr %buf, align 8, !dbg !1533
  %gt1127 = icmp ugt ptr %736, %737, !dbg !1533
  br i1 %gt1127, label %loop.body1128, label %loop.exit1130, !dbg !1533

loop.body1128:                                    ; preds = %loop.cond1126
  %738 = load ptr, ptr %s1109, align 8, !dbg !1533
  %ptradd_any1129 = getelementptr i8, ptr %738, i8 -1, !dbg !1533
  store ptr %ptradd_any1129, ptr %s1109, align 8, !dbg !1533
  store i8 48, ptr %ptradd_any1129, align 1, !dbg !1533
  br label %loop.cond1126, !dbg !1533

loop.exit1130:                                    ; preds = %loop.cond1126
  br label %if.exit1158, !dbg !1533

if.else1131:                                      ; preds = %if.exit1123
  %739 = load i64, ptr %len909, align 8, !dbg !1535
  %740 = load ptr, ptr %s1109, align 8, !dbg !1535
  %ptradd_any1133 = getelementptr i8, ptr %740, i8 1, !dbg !1535
  store ptr %ptradd_any1133, ptr %s1109, align 8, !dbg !1535
  %741 = load ptr, ptr %self, align 8
  %742 = load i8, ptr %740, align 1
  %743 = call i64 @std.io.Formatter.out(ptr %retparam1134, ptr %741, i8 %742), !dbg !1535
  %not_err1135 = icmp eq i64 %743, 0, !dbg !1535
  %744 = call i1 @llvm.expect.i1(i1 %not_err1135, i1 true), !dbg !1535
  br i1 %744, label %after_check1137, label %assign_optional1136, !dbg !1535

assign_optional1136:                              ; preds = %if.else1131
  store i64 %743, ptr %error_var1132, align 8, !dbg !1535
  br label %guard_block1138, !dbg !1535

after_check1137:                                  ; preds = %if.else1131
  br label %noerr_block1139, !dbg !1535

guard_block1138:                                  ; preds = %assign_optional1136
  %745 = load i64, ptr %error_var1132, align 8, !dbg !1535
  ret i64 %745, !dbg !1535

noerr_block1139:                                  ; preds = %after_check1137
  %746 = load i64, ptr %retparam1134, align 8, !dbg !1535
  %add1140 = add i64 %739, %746, !dbg !1535
  store i64 %add1140, ptr %len909, align 8, !dbg !1535
  %747 = load i64, ptr %p, align 8, !dbg !1537
  %gt1141 = icmp sgt i64 %747, 0, !dbg !1537
  br i1 %gt1141, label %or.phi1146, label %or.rhs1142, !dbg !1537

or.rhs1142:                                       ; preds = %noerr_block1139
  %748 = load ptr, ptr %self, align 8, !dbg !1537
  %ptradd1143 = getelementptr inbounds i8, ptr %748, i64 16, !dbg !1537
  %749 = load i32, ptr %ptradd1143, align 8, !dbg !1537
  %lshrl1144 = lshr i32 %749, 4, !dbg !1537
  %750 = and i32 1, %lshrl1144, !dbg !1537
  %trunc1145 = trunc i32 %750 to i8, !dbg !1537
  %751 = trunc i8 %trunc1145 to i1, !dbg !1537
  br label %or.phi1146, !dbg !1537

or.phi1146:                                       ; preds = %or.rhs1142, %noerr_block1139
  %val1147 = phi i1 [ true, %noerr_block1139 ], [ %751, %or.rhs1142 ], !dbg !1537
  br i1 %val1147, label %if.then1148, label %if.exit1157, !dbg !1537

if.then1148:                                      ; preds = %or.phi1146
  %752 = load i64, ptr %len909, align 8, !dbg !1537
  %753 = load ptr, ptr %self, align 8
  %754 = call i64 @std.io.Formatter.out(ptr %retparam1150, ptr %753, i8 46), !dbg !1537
  %not_err1151 = icmp eq i64 %754, 0, !dbg !1537
  %755 = call i1 @llvm.expect.i1(i1 %not_err1151, i1 true), !dbg !1537
  br i1 %755, label %after_check1153, label %assign_optional1152, !dbg !1537

assign_optional1152:                              ; preds = %if.then1148
  store i64 %754, ptr %error_var1149, align 8, !dbg !1537
  br label %guard_block1154, !dbg !1537

after_check1153:                                  ; preds = %if.then1148
  br label %noerr_block1155, !dbg !1537

guard_block1154:                                  ; preds = %assign_optional1152
  %756 = load i64, ptr %error_var1149, align 8, !dbg !1537
  ret i64 %756, !dbg !1537

noerr_block1155:                                  ; preds = %after_check1153
  %757 = load i64, ptr %retparam1150, align 8, !dbg !1537
  %add1156 = add i64 %752, %757, !dbg !1537
  store i64 %add1156, ptr %len909, align 8, !dbg !1537
  br label %if.exit1157, !dbg !1537

if.exit1157:                                      ; preds = %noerr_block1155, %or.phi1146
  br label %if.exit1158, !dbg !1537

if.exit1158:                                      ; preds = %if.exit1157, %loop.exit1130
  %758 = load i64, ptr %len909, align 8, !dbg !1538
  %759 = load ptr, ptr %s1109, align 8, !dbg !1538
  %760 = load ptr, ptr %buf, align 8, !dbg !1538
  %ptradd_any1160 = getelementptr i8, ptr %760, i64 9, !dbg !1538
  %761 = load ptr, ptr %s1109, align 8, !dbg !1538
  %762 = ptrtoint ptr %761 to i64, !dbg !1538
  %763 = ptrtoint ptr %ptradd_any1160 to i64, !dbg !1538
  %764 = sub i64 %763, %762, !dbg !1538
  %765 = sdiv exact i64 %764, 1, !dbg !1538
  store i64 %765, ptr %x1161, align 8
  %766 = load i64, ptr %p, align 8
  store i64 %766, ptr %y1162, align 8
  %767 = load i64, ptr %x1161, align 8, !dbg !1539
  %768 = load i64, ptr %y1162, align 8, !dbg !1539
  %769 = call i64 @llvm.smin.i64(i64 %767, i64 %768), !dbg !1539
  %add1163 = add i64 0, %769, !dbg !1539
  %size1164 = sub i64 %add1163, 0, !dbg !1539
  %770 = insertvalue %"char[]" undef, ptr %759, 0, !dbg !1539
  %771 = insertvalue %"char[]" %770, i64 %size1164, 1, !dbg !1539
  %772 = load ptr, ptr %self, align 8
  store %"char[]" %771, ptr %indirectarg1166, align 8
  %773 = call i64 @std.io.Formatter.out_chars(ptr %retparam1165, ptr %772, ptr align 8 %indirectarg1166), !dbg !1538
  %not_err1167 = icmp eq i64 %773, 0, !dbg !1538
  %774 = call i1 @llvm.expect.i1(i1 %not_err1167, i1 true), !dbg !1538
  br i1 %774, label %after_check1169, label %assign_optional1168, !dbg !1538

assign_optional1168:                              ; preds = %if.exit1158
  store i64 %773, ptr %error_var1159, align 8, !dbg !1538
  br label %guard_block1170, !dbg !1538

after_check1169:                                  ; preds = %if.exit1158
  br label %noerr_block1171, !dbg !1538

guard_block1170:                                  ; preds = %assign_optional1168
  %775 = load i64, ptr %error_var1159, align 8, !dbg !1538
  ret i64 %775, !dbg !1538

noerr_block1171:                                  ; preds = %after_check1169
  %776 = load i64, ptr %retparam1165, align 8, !dbg !1538
  %add1172 = add i64 %758, %776, !dbg !1538
  store i64 %add1172, ptr %len909, align 8, !dbg !1538
  %777 = load i64, ptr %p, align 8, !dbg !1541
  %778 = load ptr, ptr %buf, align 8, !dbg !1541
  %ptradd_any1173 = getelementptr i8, ptr %778, i64 9, !dbg !1541
  %779 = load ptr, ptr %s1109, align 8, !dbg !1541
  %780 = ptrtoint ptr %779 to i64, !dbg !1541
  %781 = ptrtoint ptr %ptradd_any1173 to i64, !dbg !1541
  %782 = sub i64 %781, %780, !dbg !1541
  %783 = sdiv exact i64 %782, 1, !dbg !1541
  %sub1174 = sub i64 %777, %783, !dbg !1541
  store i64 %sub1174, ptr %p, align 8, !dbg !1541
  %784 = load ptr, ptr %d1101, align 8, !dbg !1525
  %ptradd_any1175 = getelementptr i8, ptr %784, i8 4, !dbg !1525
  store ptr %ptradd_any1175, ptr %d1101, align 8, !dbg !1525
  br label %loop.cond1102, !dbg !1525

loop.exit1176:                                    ; preds = %and.phi1106
  %785 = load i64, ptr %len909, align 8, !dbg !1542
  %786 = load i64, ptr %p, align 8, !dbg !1542
  %add1178 = add i64 %786, 18, !dbg !1542
  %787 = load ptr, ptr %self, align 8
  %788 = call i64 @std.io.Formatter.pad(ptr %retparam1179, ptr %787, i8 48, i64 %add1178, i64 18) #5, !dbg !1542
  %not_err1180 = icmp eq i64 %788, 0, !dbg !1542
  %789 = call i1 @llvm.expect.i1(i1 %not_err1180, i1 true), !dbg !1542
  br i1 %789, label %after_check1182, label %assign_optional1181, !dbg !1542

assign_optional1181:                              ; preds = %loop.exit1176
  store i64 %788, ptr %error_var1177, align 8, !dbg !1542
  br label %guard_block1183, !dbg !1542

after_check1182:                                  ; preds = %loop.exit1176
  br label %noerr_block1184, !dbg !1542

guard_block1183:                                  ; preds = %assign_optional1181
  %790 = load i64, ptr %error_var1177, align 8, !dbg !1542
  ret i64 %790, !dbg !1542

noerr_block1184:                                  ; preds = %after_check1182
  %791 = load i64, ptr %retparam1179, align 8, !dbg !1542
  %add1185 = add i64 %785, %791, !dbg !1542
  store i64 %add1185, ptr %len909, align 8, !dbg !1542
  %792 = load i64, ptr %len909, align 8, !dbg !1543
  %793 = load ptr, ptr %estr851, align 8, !dbg !1543
  %794 = load ptr, ptr %ebuf, align 8, !dbg !1543
  %795 = load ptr, ptr %estr851, align 8, !dbg !1543
  %796 = ptrtoint ptr %795 to i64, !dbg !1543
  %797 = ptrtoint ptr %794 to i64, !dbg !1543
  %798 = sub i64 %797, %796, !dbg !1543
  %799 = sdiv exact i64 %798, 1, !dbg !1543
  %add1187 = add i64 0, %799, !dbg !1543
  %size1188 = sub i64 %add1187, 0, !dbg !1543
  %800 = insertvalue %"char[]" undef, ptr %793, 0, !dbg !1543
  %801 = insertvalue %"char[]" %800, i64 %size1188, 1, !dbg !1543
  %802 = load ptr, ptr %self, align 8
  store %"char[]" %801, ptr %indirectarg1190, align 8
  %803 = call i64 @std.io.Formatter.out_chars(ptr %retparam1189, ptr %802, ptr align 8 %indirectarg1190), !dbg !1543
  %not_err1191 = icmp eq i64 %803, 0, !dbg !1543
  %804 = call i1 @llvm.expect.i1(i1 %not_err1191, i1 true), !dbg !1543
  br i1 %804, label %after_check1193, label %assign_optional1192, !dbg !1543

assign_optional1192:                              ; preds = %noerr_block1184
  store i64 %803, ptr %error_var1186, align 8, !dbg !1543
  br label %guard_block1194, !dbg !1543

after_check1193:                                  ; preds = %noerr_block1184
  br label %noerr_block1195, !dbg !1543

guard_block1194:                                  ; preds = %assign_optional1192
  %805 = load i64, ptr %error_var1186, align 8, !dbg !1543
  ret i64 %805, !dbg !1543

noerr_block1195:                                  ; preds = %after_check1193
  %806 = load i64, ptr %retparam1189, align 8, !dbg !1543
  %add1196 = add i64 %792, %806, !dbg !1543
  store i64 %add1196, ptr %len909, align 8, !dbg !1543
  br label %if.exit1197, !dbg !1543

if.exit1197:                                      ; preds = %noerr_block1195, %noerr_block1094
  %807 = load ptr, ptr %self, align 8, !dbg !1544
  %ptradd1198 = getelementptr inbounds i8, ptr %807, i64 16, !dbg !1544
  %808 = load i32, ptr %ptradd1198, align 8, !dbg !1544
  %lshrl1199 = lshr i32 %808, 1, !dbg !1544
  %809 = and i32 1, %lshrl1199, !dbg !1544
  %trunc1200 = trunc i32 %809 to i8, !dbg !1544
  %810 = trunc i8 %trunc1200 to i1, !dbg !1544
  br i1 %810, label %if.then1201, label %if.exit1215, !dbg !1544

if.then1201:                                      ; preds = %if.exit1197
  %811 = load i64, ptr %len909, align 8, !dbg !1544
  %812 = load ptr, ptr %self, align 8, !dbg !1544
  %ptradd1203 = getelementptr inbounds i8, ptr %812, i64 16, !dbg !1544
  %ptradd1204 = getelementptr inbounds i8, ptr %ptradd1203, i64 4, !dbg !1544
  %813 = load i32, ptr %ptradd1204, align 4, !dbg !1544
  %zext1205 = zext i32 %813 to i64, !dbg !1544
  %814 = load i64, ptr %pl, align 8, !dbg !1544
  %815 = load i32, ptr %l839, align 4, !dbg !1544
  %sext1206 = sext i32 %815 to i64, !dbg !1544
  %add1207 = add i64 %814, %sext1206, !dbg !1544
  %816 = load ptr, ptr %self, align 8
  %817 = call i64 @std.io.Formatter.pad(ptr %retparam1208, ptr %816, i8 32, i64 %zext1205, i64 %add1207) #5, !dbg !1544
  %not_err1209 = icmp eq i64 %817, 0, !dbg !1544
  %818 = call i1 @llvm.expect.i1(i1 %not_err1209, i1 true), !dbg !1544
  br i1 %818, label %after_check1211, label %assign_optional1210, !dbg !1544

assign_optional1210:                              ; preds = %if.then1201
  store i64 %817, ptr %error_var1202, align 8, !dbg !1544
  br label %guard_block1212, !dbg !1544

after_check1211:                                  ; preds = %if.then1201
  br label %noerr_block1213, !dbg !1544

guard_block1212:                                  ; preds = %assign_optional1210
  %819 = load i64, ptr %error_var1202, align 8, !dbg !1544
  ret i64 %819, !dbg !1544

noerr_block1213:                                  ; preds = %after_check1211
  %820 = load i64, ptr %retparam1208, align 8, !dbg !1544
  %add1214 = add i64 %811, %820, !dbg !1544
  store i64 %add1214, ptr %len909, align 8, !dbg !1544
  br label %if.exit1215, !dbg !1544

if.exit1215:                                      ; preds = %noerr_block1213, %if.exit1197
  %821 = load i64, ptr %len909, align 8, !dbg !1545
  store i64 %821, ptr %0, align 8, !dbg !1545
  ret i64 0, !dbg !1545

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg2, align 8
  %822 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %822(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 197), !dbg !1173
  unreachable, !dbg !1173

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg6, align 8
  %823 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %823(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 212), !dbg !1183
  unreachable, !dbg !1183

panic12:                                          ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg15, align 8
  %824 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %824(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 212), !dbg !1194
  unreachable, !dbg !1194

panic34:                                          ; preds = %if.exit26
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg37, align 8
  %825 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %825(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 212), !dbg !1205
  unreachable, !dbg !1205

panic138:                                         ; preds = %if.then135
  store %"char[]" { ptr @.panic_msg.170, i64 47 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg140, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg141, align 8
  %826 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %826(ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, ptr align 8 %indirectarg141, i32 259), !dbg !1261
  unreachable, !dbg !1261

panic146:                                         ; preds = %if.exit143
  store %"char[]" { ptr @.panic_msg.170, i64 47 }, ptr %indirectarg147, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg149, align 8
  %827 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %827(ptr align 8 %indirectarg147, ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, i32 260), !dbg !1262
  unreachable, !dbg !1262

panic155:                                         ; preds = %checkok150
  store %"char[]" { ptr @.panic_msg.170, i64 47 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg157, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg158, align 8
  %828 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %828(ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, ptr align 8 %indirectarg158, i32 261), !dbg !1263
  unreachable, !dbg !1263

panic175:                                         ; preds = %loop.body171
  store %"char[]" { ptr @.panic_msg.171, i64 44 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg178, align 8
  %829 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %829(ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, i32 267), !dbg !1274
  unreachable, !dbg !1274

panic202:                                         ; preds = %if.then199
  store %"char[]" { ptr @.panic_msg.171, i64 44 }, ptr %indirectarg203, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg204, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg205, align 8
  %830 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %830(ptr align 8 %indirectarg203, ptr align 8 %indirectarg204, ptr align 8 %indirectarg205, i32 269), !dbg !1276
  unreachable, !dbg !1276

panic378:                                         ; preds = %loop.body375
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg379, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg380, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg381, align 8
  %831 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %831(ptr align 8 %indirectarg379, ptr align 8 %indirectarg380, ptr align 8 %indirectarg381, i32 317), !dbg !1334
  unreachable, !dbg !1334

panic385:                                         ; preds = %checkok382
  store i64 %zext384, ptr %taddr, align 8
  %832 = insertvalue %any undef, ptr %taddr, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg386, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg387, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg388, align 8
  store %any %833, ptr %varargslots, align 16
  %834 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %834, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg389, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg386, ptr align 8 %indirectarg387, ptr align 8 %indirectarg388, i32 317, ptr align 8 %indirectarg389), !dbg !1334
  unreachable, !dbg !1334

panic394:                                         ; preds = %checkok390
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg395, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg396, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg397, align 8
  %835 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %835(ptr align 8 %indirectarg395, ptr align 8 %indirectarg396, ptr align 8 %indirectarg397, i32 318), !dbg !1335
  unreachable, !dbg !1335

panic407:                                         ; preds = %if.then404
  store %"char[]" { ptr @.panic_msg.175, i64 44 }, ptr %indirectarg408, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg409, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg410, align 8
  %836 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %836(ptr align 8 %indirectarg408, ptr align 8 %indirectarg409, ptr align 8 %indirectarg410, i32 321), !dbg !1337
  unreachable, !dbg !1337

panic442:                                         ; preds = %loop.body440
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg443, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg444, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg445, align 8
  %837 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %837(ptr align 8 %indirectarg443, ptr align 8 %indirectarg444, ptr align 8 %indirectarg445, i32 335), !dbg !1361
  unreachable, !dbg !1361

panic447:                                         ; preds = %checkok446
  store i32 %331, ptr %taddr448, align 4
  %838 = insertvalue %any undef, ptr %taddr448, 0
  %839 = insertvalue %any %838, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg449, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg450, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg451, align 8
  store %any %839, ptr %varargslots452, align 16
  %840 = insertvalue %"any[]" undef, ptr %varargslots452, 0
  %"$$temp453" = insertvalue %"any[]" %840, i64 1, 1
  store %"any[]" %"$$temp453", ptr %indirectarg454, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg449, ptr align 8 %indirectarg450, ptr align 8 %indirectarg451, i32 335, ptr align 8 %indirectarg454), !dbg !1361
  unreachable, !dbg !1361

panic457:                                         ; preds = %checkok455
  store i32 %331, ptr %taddr458, align 4
  %841 = insertvalue %any undef, ptr %taddr458, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg459, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg460, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg461, align 8
  store %any %842, ptr %varargslots462, align 16
  %843 = insertvalue %"any[]" undef, ptr %varargslots462, 0
  %"$$temp463" = insertvalue %"any[]" %843, i64 1, 1
  store %"any[]" %"$$temp463", ptr %indirectarg464, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg459, ptr align 8 %indirectarg460, ptr align 8 %indirectarg461, i32 335, ptr align 8 %indirectarg464), !dbg !1361
  unreachable, !dbg !1361

panic470:                                         ; preds = %checkok465
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg471, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg472, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg473, align 8
  %844 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %844(ptr align 8 %indirectarg471, ptr align 8 %indirectarg472, ptr align 8 %indirectarg473, i32 336), !dbg !1362
  unreachable, !dbg !1362

panic476:                                         ; preds = %checkok474
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg477, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg478, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg479, align 8
  %845 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %845(ptr align 8 %indirectarg477, ptr align 8 %indirectarg478, ptr align 8 %indirectarg479, i32 336), !dbg !1362
  unreachable, !dbg !1362

panic482:                                         ; preds = %checkok480
  store i32 %340, ptr %taddr483, align 4
  %846 = insertvalue %any undef, ptr %taddr483, 0
  %847 = insertvalue %any %846, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg484, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg485, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg486, align 8
  store %any %847, ptr %varargslots487, align 16
  %848 = insertvalue %"any[]" undef, ptr %varargslots487, 0
  %"$$temp488" = insertvalue %"any[]" %848, i64 1, 1
  store %"any[]" %"$$temp488", ptr %indirectarg489, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg484, ptr align 8 %indirectarg485, ptr align 8 %indirectarg486, i32 336, ptr align 8 %indirectarg489), !dbg !1362
  unreachable, !dbg !1362

panic494:                                         ; preds = %checkok490
  store i32 %344, ptr %taddr495, align 4
  %849 = insertvalue %any undef, ptr %taddr495, 0
  %850 = insertvalue %any %849, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg496, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg497, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg498, align 8
  store %any %850, ptr %varargslots499, align 16
  %851 = insertvalue %"any[]" undef, ptr %varargslots499, 0
  %"$$temp500" = insertvalue %"any[]" %851, i64 1, 1
  store %"any[]" %"$$temp500", ptr %indirectarg501, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg496, ptr align 8 %indirectarg497, ptr align 8 %indirectarg498, i32 337, ptr align 8 %indirectarg501), !dbg !1363
  unreachable, !dbg !1363

panic504:                                         ; preds = %checkok502
  store i32 %344, ptr %taddr505, align 4
  %852 = insertvalue %any undef, ptr %taddr505, 0
  %853 = insertvalue %any %852, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.42, i64 35 }, ptr %indirectarg506, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg507, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg508, align 8
  store %any %853, ptr %varargslots509, align 16
  %854 = insertvalue %"any[]" undef, ptr %varargslots509, 0
  %"$$temp510" = insertvalue %"any[]" %854, i64 1, 1
  store %"any[]" %"$$temp510", ptr %indirectarg511, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg506, ptr align 8 %indirectarg507, ptr align 8 %indirectarg508, i32 337, ptr align 8 %indirectarg511), !dbg !1363
  unreachable, !dbg !1363

panic542:                                         ; preds = %loop.cond540
  store %"char[]" { ptr @.panic_msg.176, i64 42 }, ptr %indirectarg543, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg544, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg545, align 8
  %855 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %855(ptr align 8 %indirectarg543, ptr align 8 %indirectarg544, ptr align 8 %indirectarg545, i32 350), !dbg !1375
  unreachable, !dbg !1375

panic591:                                         ; preds = %loop.exit589
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg592, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg593, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg594, align 8
  %856 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %856(ptr align 8 %indirectarg592, ptr align 8 %indirectarg593, ptr align 8 %indirectarg594, i32 364), !dbg !1390
  unreachable, !dbg !1390

panic596:                                         ; preds = %checkok595
  store %"char[]" { ptr @.panic_msg.177, i64 10 }, ptr %indirectarg597, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg598, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg599, align 8
  %857 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %857(ptr align 8 %indirectarg597, ptr align 8 %indirectarg598, ptr align 8 %indirectarg599, i32 364), !dbg !1390
  unreachable, !dbg !1390

panic610:                                         ; preds = %if.then607
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg611, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg612, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg613, align 8
  %858 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %858(ptr align 8 %indirectarg611, ptr align 8 %indirectarg612, ptr align 8 %indirectarg613, i32 370), !dbg !1397
  unreachable, !dbg !1397

panic616:                                         ; preds = %checkok614
  store %"char[]" { ptr @.panic_msg.178, i64 17 }, ptr %indirectarg617, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg618, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg619, align 8
  %859 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %859(ptr align 8 %indirectarg617, ptr align 8 %indirectarg618, ptr align 8 %indirectarg619, i32 370), !dbg !1397
  unreachable, !dbg !1397

panic665:                                         ; preds = %if.exit663
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg666, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg667, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg668, align 8
  %860 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %860(ptr align 8 %indirectarg666, ptr align 8 %indirectarg667, ptr align 8 %indirectarg668, i32 388), !dbg !1413
  unreachable, !dbg !1413

panic675:                                         ; preds = %if.then673
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg676, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg677, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg678, align 8
  %861 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %861(ptr align 8 %indirectarg676, ptr align 8 %indirectarg677, ptr align 8 %indirectarg678, i32 392), !dbg !1415
  unreachable, !dbg !1415

panic681:                                         ; preds = %checkok679
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg682, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg683, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg684, align 8
  %862 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %862(ptr align 8 %indirectarg682, ptr align 8 %indirectarg683, ptr align 8 %indirectarg684, i32 392), !dbg !1415
  unreachable, !dbg !1415

panic689:                                         ; preds = %loop.cond687
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg690, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg691, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg692, align 8
  %863 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %863(ptr align 8 %indirectarg690, ptr align 8 %indirectarg691, ptr align 8 %indirectarg692, i32 393), !dbg !1418
  unreachable, !dbg !1418

panic698:                                         ; preds = %loop.body695
  store %"char[]" { ptr @.panic_msg.179, i64 44 }, ptr %indirectarg699, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg700, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg701, align 8
  %864 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %864(ptr align 8 %indirectarg699, ptr align 8 %indirectarg700, ptr align 8 %indirectarg701, i32 395), !dbg !1420
  unreachable, !dbg !1420

panic707:                                         ; preds = %if.then704
  store %"char[]" { ptr @.panic_msg.175, i64 44 }, ptr %indirectarg708, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg709, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg710, align 8
  %865 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %865(ptr align 8 %indirectarg708, ptr align 8 %indirectarg709, ptr align 8 %indirectarg710, i32 396), !dbg !1422
  unreachable, !dbg !1422

panic714:                                         ; preds = %if.exit712
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg715, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg716, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg717, align 8
  %866 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %866(ptr align 8 %indirectarg715, ptr align 8 %indirectarg716, ptr align 8 %indirectarg717, i32 397), !dbg !1423
  unreachable, !dbg !1423

panic725:                                         ; preds = %loop.cond723
  store %"char[]" { ptr @.panic_msg.176, i64 42 }, ptr %indirectarg726, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg727, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg728, align 8
  %867 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %867(ptr align 8 %indirectarg726, ptr align 8 %indirectarg727, ptr align 8 %indirectarg728, i32 399), !dbg !1424
  unreachable, !dbg !1424

panic790:                                         ; preds = %loop.cond787
  store %"char[]" { ptr @.panic_msg.177, i64 10 }, ptr %indirectarg791, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg792, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg793, align 8
  %868 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %868(ptr align 8 %indirectarg791, ptr align 8 %indirectarg792, ptr align 8 %indirectarg793, i32 424), !dbg !1446
  unreachable, !dbg !1446

panic878:                                         ; preds = %loop.exit875
  store %"char[]" { ptr @.panic_msg.170, i64 47 }, ptr %indirectarg879, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg880, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg881, align 8
  %869 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %869(ptr align 8 %indirectarg879, ptr align 8 %indirectarg880, ptr align 8 %indirectarg881, i32 453), !dbg !1476
  unreachable, !dbg !1476

panic887:                                         ; preds = %checkok882
  store %"char[]" { ptr @.panic_msg.170, i64 47 }, ptr %indirectarg888, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg889, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg890, align 8
  %870 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %870(ptr align 8 %indirectarg888, ptr align 8 %indirectarg889, ptr align 8 %indirectarg890, i32 454), !dbg !1477
  unreachable, !dbg !1477

panic980:                                         ; preds = %loop.body977
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg981, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg982, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg983, align 8
  %871 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %871(ptr align 8 %indirectarg981, ptr align 8 %indirectarg982, ptr align 8 %indirectarg983, i32 469), !dbg !1496
  unreachable, !dbg !1496

panic1005:                                        ; preds = %switch.case1002
  store %"char[]" { ptr @.panic_msg.149, i64 44 }, ptr %indirectarg1006, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1007, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg1008, align 8
  %872 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %872(ptr align 8 %indirectarg1006, ptr align 8 %indirectarg1007, ptr align 8 %indirectarg1008, i32 475), !dbg !1504
  unreachable, !dbg !1504

panic1052:                                        ; preds = %loop.body1049
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg1053, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1054, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg1055, align 8
  %873 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %873(ptr align 8 %indirectarg1053, ptr align 8 %indirectarg1054, ptr align 8 %indirectarg1055, i32 482), !dbg !1513
  unreachable, !dbg !1513

panic1065:                                        ; preds = %loop.body1062
  store %"char[]" { ptr @.panic_msg.149, i64 44 }, ptr %indirectarg1066, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1067, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg1068, align 8
  %874 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %874(ptr align 8 %indirectarg1066, ptr align 8 %indirectarg1067, ptr align 8 %indirectarg1068, i32 483), !dbg !1515
  unreachable, !dbg !1515

panic1111:                                        ; preds = %loop.body1108
  store %"char[]" { ptr @.panic_msg.174, i64 42 }, ptr %indirectarg1112, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1113, align 8
  store %"char[]" { ptr @.func.165, i64 11 }, ptr %indirectarg1114, align 8
  %875 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %875(ptr align 8 %indirectarg1112, ptr align 8 %indirectarg1113, ptr align 8 %indirectarg1114, i32 493), !dbg !1528
  unreachable, !dbg !1528
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa(ptr %0, ptr %1, ptr align 16 %2, i8 zeroext %3, i32 %4) #0 !dbg !1546 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %buf = alloca [256 x i8], align 16
  %len = alloca i64, align 8
  %past_10 = alloca i8, align 1
  %digit = alloca i8, align 1
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %5 = icmp eq ptr %1, null, !dbg !1549
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1549
  br i1 %6, label %panic, label %checkok, !dbg !1549

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1550, !DIExpression(), !1551)
    #dbg_declare(ptr %2, !1552, !DIExpression(), !1551)
  store i8 %3, ptr %negative, align 1
    #dbg_declare(ptr %negative, !1553, !DIExpression(), !1551)
  store i32 %4, ptr %base, align 4
    #dbg_declare(ptr %base, !1554, !DIExpression(), !1551)
    #dbg_declare(ptr %buf, !1555, !DIExpression(), !1559)
    #dbg_declare(ptr %len, !1560, !DIExpression(), !1561)
  store i64 0, ptr %len, align 8, !dbg !1561
  %7 = load i128, ptr %2, align 16, !dbg !1562
  %i2nb = icmp eq i128 %7, 0, !dbg !1562
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1562

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1562
  %ptradd = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1562
  %9 = load i32, ptr %ptradd, align 8, !dbg !1562
  %10 = and i32 %9, -17, !dbg !1562
  store i32 %10, ptr %ptradd, align 8, !dbg !1562
  br label %if.exit, !dbg !1562

if.exit:                                          ; preds = %if.then, %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !1563
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1563
  %12 = load i32, ptr %ptradd3, align 8, !dbg !1563
  %lshrl = lshr i32 %12, 6, !dbg !1563
  %13 = and i32 1, %lshrl, !dbg !1563
  %trunc = trunc i32 %13 to i8, !dbg !1563
  %14 = trunc i8 %trunc to i1, !dbg !1563
  %not = xor i1 %14, true, !dbg !1563
  br i1 %not, label %or.phi, label %or.rhs, !dbg !1563

or.rhs:                                           ; preds = %if.exit
  %15 = load i128, ptr %2, align 16, !dbg !1563
  %i2b = icmp ne i128 %15, 0, !dbg !1563
  br label %or.phi, !dbg !1563

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %i2b, %or.rhs ], !dbg !1563
  br i1 %val, label %if.then4, label %if.exit41, !dbg !1563

if.then4:                                         ; preds = %or.phi
    #dbg_declare(ptr %past_10, !1564, !DIExpression(), !1566)
  %16 = load ptr, ptr %self, align 8, !dbg !1566
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1566
  %17 = load i32, ptr %ptradd5, align 8, !dbg !1566
  %lshrl6 = lshr i32 %17, 5, !dbg !1566
  %18 = and i32 1, %lshrl6, !dbg !1566
  %trunc7 = trunc i32 %18 to i8, !dbg !1566
  %19 = trunc i8 %trunc7 to i1, !dbg !1566
  %ternary = select i1 %19, i8 65, i8 97, !dbg !1566
  %zext = zext i8 %ternary to i32, !dbg !1566
  %sub = sub i32 %zext, 10, !dbg !1566
  %trunc8 = trunc i32 %sub to i8, !dbg !1566
  store i8 %trunc8, ptr %past_10, align 1, !dbg !1566
  br label %loop.body, !dbg !1567

loop.cond:                                        ; preds = %checkok40
  %20 = load i128, ptr %2, align 16, !dbg !1568
  %i2b9 = icmp ne i128 %20, 0, !dbg !1568
  br i1 %i2b9, label %loop.body, label %loop.exit, !dbg !1568

loop.body:                                        ; preds = %loop.cond, %if.then4
  %21 = load i64, ptr %len, align 8, !dbg !1570
  %le = icmp ule i64 256, %21, !dbg !1570
  br i1 %le, label %if.then10, label %if.exit11, !dbg !1570

if.then10:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1570

if.exit11:                                        ; preds = %loop.body
    #dbg_declare(ptr %digit, !1572, !DIExpression(), !1573)
  %22 = load i128, ptr %2, align 16, !dbg !1573
  %23 = load i32, ptr %base, align 4, !dbg !1573
  %zext12 = zext i32 %23 to i128, !dbg !1573
  %zero = icmp eq i128 %zext12, 0, !dbg !1573
  %24 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1573
  br i1 %24, label %panic13, label %checkok17, !dbg !1573

checkok17:                                        ; preds = %if.exit11
  %umod = urem i128 %22, %zext12, !dbg !1573
  %trunc18 = trunc i128 %umod to i8, !dbg !1573
  store i8 %trunc18, ptr %digit, align 1, !dbg !1573
  %25 = load i64, ptr %len, align 8, !dbg !1574
  %add = add i64 %25, 1, !dbg !1574
  store i64 %add, ptr %len, align 8, !dbg !1574
  %ge = icmp uge i64 %25, 256, !dbg !1574
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1574
  br i1 %26, label %panic19, label %checkok26, !dbg !1574

checkok26:                                        ; preds = %checkok17
  %ptradd27 = getelementptr inbounds i8, ptr %buf, i64 %25, !dbg !1574
  %27 = load i8, ptr %digit, align 1, !dbg !1574
  %zext28 = zext i8 %27 to i32, !dbg !1574
  %28 = load i8, ptr %digit, align 1, !dbg !1574
  %zext29 = zext i8 %28 to i32, !dbg !1574
  %gt = icmp ugt i32 10, %zext29, !dbg !1574
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1574

cond.lhs:                                         ; preds = %checkok26
  br label %cond.phi, !dbg !1574

cond.rhs:                                         ; preds = %checkok26
  %29 = load i8, ptr %past_10, align 1, !dbg !1574
  br label %cond.phi, !dbg !1574

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val30 = phi i8 [ 48, %cond.lhs ], [ %29, %cond.rhs ], !dbg !1574
  %zext31 = zext i8 %val30 to i32, !dbg !1574
  %add32 = add i32 %zext28, %zext31, !dbg !1574
  %trunc33 = trunc i32 %add32 to i8, !dbg !1574
  store i8 %trunc33, ptr %ptradd27, align 1, !dbg !1574
  %30 = load i128, ptr %2, align 16, !dbg !1575
  %31 = load i32, ptr %base, align 4, !dbg !1575
  %zext34 = zext i32 %31 to i128, !dbg !1575
  %zero35 = icmp eq i128 %zext34, 0, !dbg !1575
  %32 = call i1 @llvm.expect.i1(i1 %zero35, i1 false), !dbg !1575
  br i1 %32, label %panic36, label %checkok40, !dbg !1575

checkok40:                                        ; preds = %cond.phi
  %udiv = udiv i128 %30, %zext34, !dbg !1575
  store i128 %udiv, ptr %2, align 16, !dbg !1575
  br label %loop.cond, !dbg !1575

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit41, !dbg !1575

if.exit41:                                        ; preds = %loop.exit, %or.phi
  %33 = insertvalue %"char[]" undef, ptr %buf, 0, !dbg !1576
  %34 = insertvalue %"char[]" %33, i64 256, 1, !dbg !1576
  %35 = load ptr, ptr %self, align 8
  store %"char[]" %34, ptr %indirectarg42, align 8
  %36 = load i64, ptr %len, align 8
  %37 = load i8, ptr %negative, align 1
  %38 = load i32, ptr %base, align 4
  %39 = call i64 @std.io.Formatter.ntoa_format(ptr %retparam, ptr %35, ptr align 8 %indirectarg42, i64 %36, i8 zeroext %37, i32 %38), !dbg !1576
  %not_err = icmp eq i64 %39, 0, !dbg !1576
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1576
  br i1 %40, label %after_check, label %assign_optional, !dbg !1576

assign_optional:                                  ; preds = %if.exit41
  store i64 %39, ptr %reterr, align 8, !dbg !1576
  br label %err_retblock, !dbg !1576

after_check:                                      ; preds = %if.exit41
  %41 = load i64, ptr %retparam, align 8, !dbg !1576
  store i64 %41, ptr %0, align 8, !dbg !1576
  ret i64 0, !dbg !1576

err_retblock:                                     ; preds = %assign_optional
  %42 = load i64, ptr %reterr, align 8, !dbg !1576
  ret i64 %42, !dbg !1576

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.180, i64 4 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 516), !dbg !1551
  unreachable, !dbg !1551

panic13:                                          ; preds = %if.exit11
  store %"char[]" { ptr @.panic_msg.177, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.180, i64 4 }, ptr %indirectarg16, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 531), !dbg !1573
  unreachable, !dbg !1573

panic19:                                          ; preds = %checkok17
  store i64 256, ptr %taddr, align 8
  %45 = insertvalue %any undef, ptr %taddr, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr20, align 8
  %47 = insertvalue %any undef, ptr %taddr20, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.180, i64 4 }, ptr %indirectarg23, align 8
  store %any %46, ptr %varargslots, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %48, ptr %ptradd24, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 532, ptr align 8 %indirectarg25), !dbg !1574
  unreachable, !dbg !1574

panic36:                                          ; preds = %cond.phi
  store %"char[]" { ptr @.panic_msg.178, i64 17 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.func.180, i64 4 }, ptr %indirectarg39, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, i32 533), !dbg !1575
  unreachable, !dbg !1575
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_format(ptr %0, ptr %1, ptr align 8 %2, i64 %3, i8 zeroext %4, i32 %5) #0 !dbg !1577 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr31 = alloca i64, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg36 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 16
  %indirectarg66 = alloca %"any[]", align 8
  %switch = alloca i32, align 4
  %taddr117 = alloca i64, align 8
  %taddr118 = alloca i64, align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %varargslots122 = alloca [2 x %any], align 16
  %indirectarg125 = alloca %"any[]", align 8
  %taddr136 = alloca i64, align 8
  %taddr137 = alloca i64, align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %varargslots141 = alloca [2 x %any], align 16
  %indirectarg144 = alloca %"any[]", align 8
  %taddr156 = alloca i64, align 8
  %taddr157 = alloca i64, align 8
  %indirectarg158 = alloca %"char[]", align 8
  %indirectarg159 = alloca %"char[]", align 8
  %indirectarg160 = alloca %"char[]", align 8
  %varargslots161 = alloca [2 x %any], align 16
  %indirectarg164 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg171 = alloca %"char[]", align 8
  %indirectarg172 = alloca %"char[]", align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"any[]", align 8
  %taddr179 = alloca i64, align 8
  %taddr180 = alloca i64, align 8
  %indirectarg181 = alloca %"char[]", align 8
  %indirectarg182 = alloca %"char[]", align 8
  %indirectarg183 = alloca %"char[]", align 8
  %varargslots184 = alloca [2 x %any], align 16
  %indirectarg187 = alloca %"any[]", align 8
  %switch192 = alloca i8, align 1
  %taddr204 = alloca i64, align 8
  %taddr205 = alloca i64, align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %indirectarg208 = alloca %"char[]", align 8
  %varargslots209 = alloca [2 x %any], align 16
  %indirectarg212 = alloca %"any[]", align 8
  %taddr228 = alloca i64, align 8
  %taddr229 = alloca i64, align 8
  %indirectarg230 = alloca %"char[]", align 8
  %indirectarg231 = alloca %"char[]", align 8
  %indirectarg232 = alloca %"char[]", align 8
  %varargslots233 = alloca [2 x %any], align 16
  %indirectarg236 = alloca %"any[]", align 8
  %taddr253 = alloca i64, align 8
  %taddr254 = alloca i64, align 8
  %indirectarg255 = alloca %"char[]", align 8
  %indirectarg256 = alloca %"char[]", align 8
  %indirectarg257 = alloca %"char[]", align 8
  %varargslots258 = alloca [2 x %any], align 16
  %indirectarg261 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %taddr269 = alloca i64, align 8
  %taddr270 = alloca i64, align 8
  %indirectarg271 = alloca %"char[]", align 8
  %indirectarg272 = alloca %"char[]", align 8
  %indirectarg273 = alloca %"char[]", align 8
  %varargslots274 = alloca [2 x %any], align 16
  %indirectarg277 = alloca %"any[]", align 8
  %taddr283 = alloca i64, align 8
  %taddr284 = alloca i64, align 8
  %indirectarg285 = alloca %"char[]", align 8
  %indirectarg286 = alloca %"char[]", align 8
  %indirectarg287 = alloca %"char[]", align 8
  %varargslots288 = alloca [2 x %any], align 16
  %indirectarg291 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg293 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !1580
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !1580
  br i1 %7, label %panic, label %checkok, !dbg !1580

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1581, !DIExpression(), !1582)
    #dbg_declare(ptr %2, !1583, !DIExpression(), !1582)
  store i64 %3, ptr %len, align 8
    #dbg_declare(ptr %len, !1584, !DIExpression(), !1582)
  store i8 %4, ptr %negative, align 1
    #dbg_declare(ptr %negative, !1585, !DIExpression(), !1582)
  store i32 %5, ptr %base, align 4
    #dbg_declare(ptr %base, !1586, !DIExpression(), !1582)
  %8 = load ptr, ptr %self, align 8, !dbg !1587
  %ptradd = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1587
  %9 = load i32, ptr %ptradd, align 8, !dbg !1587
  %lshrl = lshr i32 %9, 1, !dbg !1587
  %10 = and i32 1, %lshrl, !dbg !1587
  %trunc = trunc i32 %10 to i8, !dbg !1587
  %11 = trunc i8 %trunc to i1, !dbg !1587
  %not = xor i1 %11, true, !dbg !1587
  br i1 %not, label %if.then, label %if.exit70, !dbg !1587

if.then:                                          ; preds = %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !1588
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1588
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 4, !dbg !1588
  %13 = load i32, ptr %ptradd4, align 4, !dbg !1588
  %i2b = icmp ne i32 %13, 0, !dbg !1588
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !1588

and.rhs:                                          ; preds = %if.then
  %14 = load ptr, ptr %self, align 8, !dbg !1588
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1588
  %15 = load i32, ptr %ptradd5, align 8, !dbg !1588
  %16 = and i32 1, %15, !dbg !1588
  %trunc6 = trunc i32 %16 to i8, !dbg !1588
  %17 = trunc i8 %trunc6 to i1, !dbg !1588
  br label %and.phi, !dbg !1588

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %17, %and.rhs ], !dbg !1588
  br i1 %val, label %and.rhs7, label %and.phi18, !dbg !1588

and.rhs7:                                         ; preds = %and.phi
  %18 = load i8, ptr %negative, align 1, !dbg !1588
  %19 = trunc i8 %18 to i1, !dbg !1588
  br i1 %19, label %or.phi, label %or.rhs, !dbg !1588

or.rhs:                                           ; preds = %and.rhs7
  %20 = load ptr, ptr %self, align 8, !dbg !1588
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !1588
  %21 = load i32, ptr %ptradd8, align 8, !dbg !1588
  %lshrl9 = lshr i32 %21, 2, !dbg !1588
  %22 = and i32 1, %lshrl9, !dbg !1588
  %trunc10 = trunc i32 %22 to i8, !dbg !1588
  %23 = trunc i8 %trunc10 to i1, !dbg !1588
  br label %or.phi, !dbg !1588

or.phi:                                           ; preds = %or.rhs, %and.rhs7
  %val11 = phi i1 [ true, %and.rhs7 ], [ %23, %or.rhs ], !dbg !1588
  br i1 %val11, label %or.phi16, label %or.rhs12, !dbg !1588

or.rhs12:                                         ; preds = %or.phi
  %24 = load ptr, ptr %self, align 8, !dbg !1588
  %ptradd13 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1588
  %25 = load i32, ptr %ptradd13, align 8, !dbg !1588
  %lshrl14 = lshr i32 %25, 3, !dbg !1588
  %26 = and i32 1, %lshrl14, !dbg !1588
  %trunc15 = trunc i32 %26 to i8, !dbg !1588
  %27 = trunc i8 %trunc15 to i1, !dbg !1588
  br label %or.phi16, !dbg !1588

or.phi16:                                         ; preds = %or.rhs12, %or.phi
  %val17 = phi i1 [ true, %or.phi ], [ %27, %or.rhs12 ], !dbg !1588
  br label %and.phi18, !dbg !1588

and.phi18:                                        ; preds = %or.phi16, %and.phi
  %val19 = phi i1 [ false, %and.phi ], [ %val17, %or.phi16 ], !dbg !1588
  br i1 %val19, label %if.then20, label %if.exit, !dbg !1588

if.then20:                                        ; preds = %and.phi18
  %28 = load ptr, ptr %self, align 8, !dbg !1588
  %ptradd21 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !1588
  %ptradd22 = getelementptr inbounds i8, ptr %ptradd21, i64 4, !dbg !1588
  %29 = load i32, ptr %ptradd22, align 4, !dbg !1588
  %sub = sub i32 %29, 1, !dbg !1588
  store i32 %sub, ptr %ptradd22, align 4, !dbg !1588
  br label %if.exit, !dbg !1588

if.exit:                                          ; preds = %if.then20, %and.phi18
  br label %loop.cond, !dbg !1590

loop.cond:                                        ; preds = %checkok37, %if.exit
  %30 = load i64, ptr %len, align 8, !dbg !1591
  %31 = load ptr, ptr %self, align 8, !dbg !1591
  %ptradd23 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1591
  %ptradd24 = getelementptr inbounds i8, ptr %ptradd23, i64 8, !dbg !1591
  %32 = load i32, ptr %ptradd24, align 8, !dbg !1591
  %zext = zext i32 %32 to i64, !dbg !1591
  %lt = icmp ult i64 %30, %zext, !dbg !1591
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1591

loop.body:                                        ; preds = %loop.cond
  %33 = load i64, ptr %len, align 8, !dbg !1593
  %ptradd25 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1593
  %34 = load i64, ptr %ptradd25, align 8, !dbg !1593
  %ge = icmp uge i64 %33, %34, !dbg !1593
  br i1 %ge, label %if.then26, label %if.exit27, !dbg !1593

if.then26:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1593

if.exit27:                                        ; preds = %loop.body
  %ptradd28 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1595
  %35 = load i64, ptr %ptradd28, align 8, !dbg !1595
  %36 = load ptr, ptr %2, align 8, !dbg !1595
  %37 = load i64, ptr %len, align 8, !dbg !1595
  %add = add i64 %37, 1, !dbg !1595
  store i64 %add, ptr %len, align 8, !dbg !1595
  %ge29 = icmp uge i64 %37, %35, !dbg !1595
  %38 = call i1 @llvm.expect.i1(i1 %ge29, i1 false), !dbg !1595
  br i1 %38, label %panic30, label %checkok37, !dbg !1595

checkok37:                                        ; preds = %if.exit27
  %ptradd38 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !1595
  store i8 48, ptr %ptradd38, align 1, !dbg !1595
  br label %loop.cond, !dbg !1595

loop.exit:                                        ; preds = %loop.cond
  br label %loop.cond39, !dbg !1596

loop.cond39:                                      ; preds = %checkok67, %loop.exit
  %39 = load ptr, ptr %self, align 8, !dbg !1597
  %ptradd40 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !1597
  %40 = load i32, ptr %ptradd40, align 8, !dbg !1597
  %41 = and i32 1, %40, !dbg !1597
  %trunc41 = trunc i32 %41 to i8, !dbg !1597
  %42 = trunc i8 %trunc41 to i1, !dbg !1597
  br i1 %42, label %and.rhs42, label %and.phi47, !dbg !1597

and.rhs42:                                        ; preds = %loop.cond39
  %43 = load i64, ptr %len, align 8, !dbg !1597
  %44 = load ptr, ptr %self, align 8, !dbg !1597
  %ptradd43 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !1597
  %ptradd44 = getelementptr inbounds i8, ptr %ptradd43, i64 4, !dbg !1597
  %45 = load i32, ptr %ptradd44, align 4, !dbg !1597
  %zext45 = zext i32 %45 to i64, !dbg !1597
  %lt46 = icmp ult i64 %43, %zext45, !dbg !1597
  br label %and.phi47, !dbg !1597

and.phi47:                                        ; preds = %and.rhs42, %loop.cond39
  %val48 = phi i1 [ false, %loop.cond39 ], [ %lt46, %and.rhs42 ], !dbg !1597
  br i1 %val48, label %loop.body49, label %loop.exit69, !dbg !1597

loop.body49:                                      ; preds = %and.phi47
  %46 = load i64, ptr %len, align 8, !dbg !1599
  %ptradd50 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1599
  %47 = load i64, ptr %ptradd50, align 8, !dbg !1599
  %ge51 = icmp uge i64 %46, %47, !dbg !1599
  br i1 %ge51, label %if.then52, label %if.exit53, !dbg !1599

if.then52:                                        ; preds = %loop.body49
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1599

if.exit53:                                        ; preds = %loop.body49
  %ptradd54 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1601
  %48 = load i64, ptr %ptradd54, align 8, !dbg !1601
  %49 = load ptr, ptr %2, align 8, !dbg !1601
  %50 = load i64, ptr %len, align 8, !dbg !1601
  %add55 = add i64 %50, 1, !dbg !1601
  store i64 %add55, ptr %len, align 8, !dbg !1601
  %ge56 = icmp uge i64 %50, %48, !dbg !1601
  %51 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1601
  br i1 %51, label %panic57, label %checkok67, !dbg !1601

checkok67:                                        ; preds = %if.exit53
  %ptradd68 = getelementptr inbounds i8, ptr %49, i64 %50, !dbg !1601
  store i8 48, ptr %ptradd68, align 1, !dbg !1601
  br label %loop.cond39, !dbg !1601

loop.exit69:                                      ; preds = %and.phi47
  br label %if.exit70, !dbg !1601

if.exit70:                                        ; preds = %loop.exit69, %checkok
  %52 = load ptr, ptr %self, align 8, !dbg !1602
  %ptradd71 = getelementptr inbounds i8, ptr %52, i64 16, !dbg !1602
  %53 = load i32, ptr %ptradd71, align 8, !dbg !1602
  %lshrl72 = lshr i32 %53, 4, !dbg !1602
  %54 = and i32 1, %lshrl72, !dbg !1602
  %trunc73 = trunc i32 %54 to i8, !dbg !1602
  %55 = trunc i8 %trunc73 to i1, !dbg !1602
  br i1 %55, label %and.rhs74, label %and.phi75, !dbg !1602

and.rhs74:                                        ; preds = %if.exit70
  %56 = load i32, ptr %base, align 4, !dbg !1602
  %neq = icmp ne i32 10, %56, !dbg !1602
  br label %and.phi75, !dbg !1602

and.phi75:                                        ; preds = %and.rhs74, %if.exit70
  %val76 = phi i1 [ false, %if.exit70 ], [ %neq, %and.rhs74 ], !dbg !1602
  br i1 %val76, label %if.then77, label %if.exit191, !dbg !1602

if.then77:                                        ; preds = %and.phi75
  %57 = load ptr, ptr %self, align 8, !dbg !1603
  %ptradd78 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !1603
  %58 = load i32, ptr %ptradd78, align 8, !dbg !1603
  %lshrl79 = lshr i32 %58, 6, !dbg !1603
  %59 = and i32 1, %lshrl79, !dbg !1603
  %trunc80 = trunc i32 %59 to i8, !dbg !1603
  %60 = trunc i8 %trunc80 to i1, !dbg !1603
  %not81 = xor i1 %60, true, !dbg !1603
  br i1 %not81, label %and.rhs82, label %and.phi84, !dbg !1603

and.rhs82:                                        ; preds = %if.then77
  %61 = load i64, ptr %len, align 8, !dbg !1603
  %i2b83 = icmp ne i64 %61, 0, !dbg !1603
  br label %and.phi84, !dbg !1603

and.phi84:                                        ; preds = %and.rhs82, %if.then77
  %val85 = phi i1 [ false, %if.then77 ], [ %i2b83, %and.rhs82 ], !dbg !1603
  br i1 %val85, label %and.rhs86, label %and.phi90, !dbg !1603

and.rhs86:                                        ; preds = %and.phi84
  %62 = load i64, ptr %len, align 8, !dbg !1603
  %63 = load ptr, ptr %self, align 8, !dbg !1603
  %ptradd87 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !1603
  %ptradd88 = getelementptr inbounds i8, ptr %ptradd87, i64 8, !dbg !1603
  %64 = load i32, ptr %ptradd88, align 8, !dbg !1603
  %zext89 = zext i32 %64 to i64, !dbg !1603
  %eq = icmp eq i64 %62, %zext89, !dbg !1603
  br label %and.phi90, !dbg !1603

and.phi90:                                        ; preds = %and.rhs86, %and.phi84
  %val91 = phi i1 [ false, %and.phi84 ], [ %eq, %and.rhs86 ], !dbg !1603
  br i1 %val91, label %and.rhs92, label %and.phi97, !dbg !1603

and.rhs92:                                        ; preds = %and.phi90
  %65 = load i64, ptr %len, align 8, !dbg !1603
  %66 = load ptr, ptr %self, align 8, !dbg !1603
  %ptradd93 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !1603
  %ptradd94 = getelementptr inbounds i8, ptr %ptradd93, i64 4, !dbg !1603
  %67 = load i32, ptr %ptradd94, align 4, !dbg !1603
  %zext95 = zext i32 %67 to i64, !dbg !1603
  %eq96 = icmp eq i64 %65, %zext95, !dbg !1603
  br label %and.phi97, !dbg !1603

and.phi97:                                        ; preds = %and.rhs92, %and.phi90
  %val98 = phi i1 [ false, %and.phi90 ], [ %eq96, %and.rhs92 ], !dbg !1603
  br i1 %val98, label %if.then99, label %if.exit105, !dbg !1603

if.then99:                                        ; preds = %and.phi97
  %68 = load i64, ptr %len, align 8, !dbg !1605
  %sub100 = sub i64 %68, 1, !dbg !1605
  store i64 %sub100, ptr %len, align 8, !dbg !1605
  %69 = load i64, ptr %len, align 8, !dbg !1607
  %i2b101 = icmp ne i64 %69, 0, !dbg !1607
  br i1 %i2b101, label %if.then102, label %if.exit104, !dbg !1607

if.then102:                                       ; preds = %if.then99
  %70 = load i64, ptr %len, align 8, !dbg !1607
  %sub103 = sub i64 %70, 1, !dbg !1607
  store i64 %sub103, ptr %len, align 8, !dbg !1607
  br label %if.exit104, !dbg !1607

if.exit104:                                       ; preds = %if.then102, %if.then99
  br label %if.exit105, !dbg !1607

if.exit105:                                       ; preds = %if.exit104, %and.phi97
  %71 = load i32, ptr %base, align 4, !dbg !1608
  %neq106 = icmp ne i32 10, %71, !dbg !1608
  br i1 %neq106, label %if.then107, label %if.exit190, !dbg !1608

if.then107:                                       ; preds = %if.exit105
  %72 = load i64, ptr %len, align 8, !dbg !1609
  %add108 = add i64 %72, 1, !dbg !1609
  %ptradd109 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1609
  %73 = load i64, ptr %ptradd109, align 8, !dbg !1609
  %ge110 = icmp sge i64 %add108, %73, !dbg !1609
  %check = icmp sge i64 %73, 0, !dbg !1609
  %siui-ge = and i1 %check, %ge110, !dbg !1609
  br i1 %siui-ge, label %if.then111, label %if.exit112, !dbg !1609

if.then111:                                       ; preds = %if.then107
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1609

if.exit112:                                       ; preds = %if.then107
  %74 = load i32, ptr %base, align 4
  store i32 %74, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit112
  %75 = load i32, ptr %switch, align 4
  switch i32 %75, label %switch.default [
    i32 16, label %switch.case
    i32 8, label %switch.case131
    i32 2, label %switch.case151
  ]

switch.case:                                      ; preds = %switch.entry
  %ptradd113 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1611
  %76 = load i64, ptr %ptradd113, align 8, !dbg !1611
  %77 = load ptr, ptr %2, align 8, !dbg !1611
  %78 = load i64, ptr %len, align 8, !dbg !1611
  %add114 = add i64 %78, 1, !dbg !1611
  store i64 %add114, ptr %len, align 8, !dbg !1611
  %ge115 = icmp uge i64 %78, %76, !dbg !1611
  %79 = call i1 @llvm.expect.i1(i1 %ge115, i1 false), !dbg !1611
  br i1 %79, label %panic116, label %checkok126, !dbg !1611

checkok126:                                       ; preds = %switch.case
  %ptradd127 = getelementptr inbounds i8, ptr %77, i64 %78, !dbg !1611
  %80 = load ptr, ptr %self, align 8, !dbg !1611
  %ptradd128 = getelementptr inbounds i8, ptr %80, i64 16, !dbg !1611
  %81 = load i32, ptr %ptradd128, align 8, !dbg !1611
  %lshrl129 = lshr i32 %81, 5, !dbg !1611
  %82 = and i32 1, %lshrl129, !dbg !1611
  %trunc130 = trunc i32 %82 to i8, !dbg !1611
  %83 = trunc i8 %trunc130 to i1, !dbg !1611
  %ternary = select i1 %83, i8 88, i8 120, !dbg !1611
  store i8 %ternary, ptr %ptradd127, align 1, !dbg !1611
  br label %switch.exit, !dbg !1611

switch.case131:                                   ; preds = %switch.entry
  %ptradd132 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1614
  %84 = load i64, ptr %ptradd132, align 8, !dbg !1614
  %85 = load ptr, ptr %2, align 8, !dbg !1614
  %86 = load i64, ptr %len, align 8, !dbg !1614
  %add133 = add i64 %86, 1, !dbg !1614
  store i64 %add133, ptr %len, align 8, !dbg !1614
  %ge134 = icmp uge i64 %86, %84, !dbg !1614
  %87 = call i1 @llvm.expect.i1(i1 %ge134, i1 false), !dbg !1614
  br i1 %87, label %panic135, label %checkok145, !dbg !1614

checkok145:                                       ; preds = %switch.case131
  %ptradd146 = getelementptr inbounds i8, ptr %85, i64 %86, !dbg !1614
  %88 = load ptr, ptr %self, align 8, !dbg !1614
  %ptradd147 = getelementptr inbounds i8, ptr %88, i64 16, !dbg !1614
  %89 = load i32, ptr %ptradd147, align 8, !dbg !1614
  %lshrl148 = lshr i32 %89, 5, !dbg !1614
  %90 = and i32 1, %lshrl148, !dbg !1614
  %trunc149 = trunc i32 %90 to i8, !dbg !1614
  %91 = trunc i8 %trunc149 to i1, !dbg !1614
  %ternary150 = select i1 %91, i8 79, i8 111, !dbg !1614
  store i8 %ternary150, ptr %ptradd146, align 1, !dbg !1614
  br label %switch.exit, !dbg !1614

switch.case151:                                   ; preds = %switch.entry
  %ptradd152 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1616
  %92 = load i64, ptr %ptradd152, align 8, !dbg !1616
  %93 = load ptr, ptr %2, align 8, !dbg !1616
  %94 = load i64, ptr %len, align 8, !dbg !1616
  %add153 = add i64 %94, 1, !dbg !1616
  store i64 %add153, ptr %len, align 8, !dbg !1616
  %ge154 = icmp uge i64 %94, %92, !dbg !1616
  %95 = call i1 @llvm.expect.i1(i1 %ge154, i1 false), !dbg !1616
  br i1 %95, label %panic155, label %checkok165, !dbg !1616

checkok165:                                       ; preds = %switch.case151
  %ptradd166 = getelementptr inbounds i8, ptr %93, i64 %94, !dbg !1616
  %96 = load ptr, ptr %self, align 8, !dbg !1616
  %ptradd167 = getelementptr inbounds i8, ptr %96, i64 16, !dbg !1616
  %97 = load i32, ptr %ptradd167, align 8, !dbg !1616
  %lshrl168 = lshr i32 %97, 5, !dbg !1616
  %98 = and i32 1, %lshrl168, !dbg !1616
  %trunc169 = trunc i32 %98 to i8, !dbg !1616
  %99 = trunc i8 %trunc169 to i1, !dbg !1616
  %ternary170 = select i1 %99, i8 66, i8 98, !dbg !1616
  store i8 %ternary170, ptr %ptradd166, align 1, !dbg !1616
  br label %switch.exit, !dbg !1616

switch.default:                                   ; preds = %switch.entry
  store %"char[]" { ptr @.str.182, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg171, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.183, i64 20 }, ptr %indirectarg172, align 8
  store %"char[]" { ptr @.str.184, i64 21 }, ptr %indirectarg173, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg174, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg171, ptr align 8 %indirectarg172, ptr align 8 %indirectarg173, i32 578, ptr align 8 %indirectarg174), !dbg !1618
  unreachable, !dbg !1622

switch.exit:                                      ; preds = %checkok165, %checkok145, %checkok126
  %ptradd175 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1623
  %100 = load i64, ptr %ptradd175, align 8, !dbg !1623
  %101 = load ptr, ptr %2, align 8, !dbg !1623
  %102 = load i64, ptr %len, align 8, !dbg !1623
  %add176 = add i64 %102, 1, !dbg !1623
  store i64 %add176, ptr %len, align 8, !dbg !1623
  %ge177 = icmp uge i64 %102, %100, !dbg !1623
  %103 = call i1 @llvm.expect.i1(i1 %ge177, i1 false), !dbg !1623
  br i1 %103, label %panic178, label %checkok188, !dbg !1623

checkok188:                                       ; preds = %switch.exit
  %ptradd189 = getelementptr inbounds i8, ptr %101, i64 %102, !dbg !1623
  store i8 48, ptr %ptradd189, align 1, !dbg !1623
  br label %if.exit190, !dbg !1623

if.exit190:                                       ; preds = %checkok188, %if.exit105
  br label %if.exit191, !dbg !1623

if.exit191:                                       ; preds = %if.exit190, %and.phi75
  store i8 1, ptr %switch192, align 1
  br label %switch.entry193

switch.entry193:                                  ; preds = %if.exit191
  %104 = load i8, ptr %switch192, align 1
  %105 = trunc i8 %104 to i1
  %106 = load i8, ptr %negative, align 1, !dbg !1624
  %107 = trunc i8 %106 to i1, !dbg !1624
  %eq194 = icmp eq i1 %107, %105, !dbg !1624
  br i1 %eq194, label %switch.case195, label %next_if, !dbg !1624

switch.case195:                                   ; preds = %switch.entry193
  %108 = load i64, ptr %len, align 8, !dbg !1626
  %ptradd196 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1626
  %109 = load i64, ptr %ptradd196, align 8, !dbg !1626
  %ge197 = icmp uge i64 %108, %109, !dbg !1626
  br i1 %ge197, label %if.then198, label %if.exit199, !dbg !1626

if.then198:                                       ; preds = %switch.case195
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1626

if.exit199:                                       ; preds = %switch.case195
  %ptradd200 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1628
  %110 = load i64, ptr %ptradd200, align 8, !dbg !1628
  %111 = load ptr, ptr %2, align 8, !dbg !1628
  %112 = load i64, ptr %len, align 8, !dbg !1628
  %add201 = add i64 %112, 1, !dbg !1628
  store i64 %add201, ptr %len, align 8, !dbg !1628
  %ge202 = icmp uge i64 %112, %110, !dbg !1628
  %113 = call i1 @llvm.expect.i1(i1 %ge202, i1 false), !dbg !1628
  br i1 %113, label %panic203, label %checkok213, !dbg !1628

checkok213:                                       ; preds = %if.exit199
  %ptradd214 = getelementptr inbounds i8, ptr %111, i64 %112, !dbg !1628
  store i8 45, ptr %ptradd214, align 1, !dbg !1628
  br label %switch.exit265, !dbg !1628

next_if:                                          ; preds = %switch.entry193
  %114 = load ptr, ptr %self, align 8, !dbg !1629
  %ptradd215 = getelementptr inbounds i8, ptr %114, i64 16, !dbg !1629
  %115 = load i32, ptr %ptradd215, align 8, !dbg !1629
  %lshrl216 = lshr i32 %115, 2, !dbg !1629
  %116 = and i32 1, %lshrl216, !dbg !1629
  %trunc217 = trunc i32 %116 to i8, !dbg !1629
  %117 = trunc i8 %trunc217 to i1, !dbg !1629
  %eq218 = icmp eq i1 %117, %105, !dbg !1629
  br i1 %eq218, label %switch.case219, label %next_if239, !dbg !1629

switch.case219:                                   ; preds = %next_if
  %118 = load i64, ptr %len, align 8, !dbg !1630
  %ptradd220 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1630
  %119 = load i64, ptr %ptradd220, align 8, !dbg !1630
  %ge221 = icmp uge i64 %118, %119, !dbg !1630
  br i1 %ge221, label %if.then222, label %if.exit223, !dbg !1630

if.then222:                                       ; preds = %switch.case219
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1630

if.exit223:                                       ; preds = %switch.case219
  %ptradd224 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1632
  %120 = load i64, ptr %ptradd224, align 8, !dbg !1632
  %121 = load ptr, ptr %2, align 8, !dbg !1632
  %122 = load i64, ptr %len, align 8, !dbg !1632
  %add225 = add i64 %122, 1, !dbg !1632
  store i64 %add225, ptr %len, align 8, !dbg !1632
  %ge226 = icmp uge i64 %122, %120, !dbg !1632
  %123 = call i1 @llvm.expect.i1(i1 %ge226, i1 false), !dbg !1632
  br i1 %123, label %panic227, label %checkok237, !dbg !1632

checkok237:                                       ; preds = %if.exit223
  %ptradd238 = getelementptr inbounds i8, ptr %121, i64 %122, !dbg !1632
  store i8 43, ptr %ptradd238, align 1, !dbg !1632
  br label %switch.exit265, !dbg !1632

next_if239:                                       ; preds = %next_if
  %124 = load ptr, ptr %self, align 8, !dbg !1633
  %ptradd240 = getelementptr inbounds i8, ptr %124, i64 16, !dbg !1633
  %125 = load i32, ptr %ptradd240, align 8, !dbg !1633
  %lshrl241 = lshr i32 %125, 3, !dbg !1633
  %126 = and i32 1, %lshrl241, !dbg !1633
  %trunc242 = trunc i32 %126 to i8, !dbg !1633
  %127 = trunc i8 %trunc242 to i1, !dbg !1633
  %eq243 = icmp eq i1 %127, %105, !dbg !1633
  br i1 %eq243, label %switch.case244, label %next_if264, !dbg !1633

switch.case244:                                   ; preds = %next_if239
  %128 = load i64, ptr %len, align 8, !dbg !1634
  %ptradd245 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1634
  %129 = load i64, ptr %ptradd245, align 8, !dbg !1634
  %ge246 = icmp uge i64 %128, %129, !dbg !1634
  br i1 %ge246, label %if.then247, label %if.exit248, !dbg !1634

if.then247:                                       ; preds = %switch.case244
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !1634

if.exit248:                                       ; preds = %switch.case244
  %ptradd249 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1636
  %130 = load i64, ptr %ptradd249, align 8, !dbg !1636
  %131 = load ptr, ptr %2, align 8, !dbg !1636
  %132 = load i64, ptr %len, align 8, !dbg !1636
  %add250 = add i64 %132, 1, !dbg !1636
  store i64 %add250, ptr %len, align 8, !dbg !1636
  %ge251 = icmp uge i64 %132, %130, !dbg !1636
  %133 = call i1 @llvm.expect.i1(i1 %ge251, i1 false), !dbg !1636
  br i1 %133, label %panic252, label %checkok262, !dbg !1636

checkok262:                                       ; preds = %if.exit248
  %ptradd263 = getelementptr inbounds i8, ptr %131, i64 %132, !dbg !1636
  store i8 32, ptr %ptradd263, align 1, !dbg !1636
  br label %switch.exit265, !dbg !1636

next_if264:                                       ; preds = %next_if239
  br label %switch.exit265, !dbg !1636

switch.exit265:                                   ; preds = %next_if264, %checkok262, %checkok237, %checkok213
  %134 = load i64, ptr %len, align 8, !dbg !1637
  %i2b266 = icmp ne i64 %134, 0, !dbg !1637
  br i1 %i2b266, label %if.then267, label %if.exit294, !dbg !1637

if.then267:                                       ; preds = %switch.exit265
  %135 = load %"char[]", ptr %2, align 8, !dbg !1637
  %136 = extractvalue %"char[]" %135, 0, !dbg !1637
  %137 = extractvalue %"char[]" %135, 1, !dbg !1637
  %gt = icmp ugt i64 0, %137, !dbg !1637
  %138 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1637
  br i1 %138, label %panic268, label %checkok278, !dbg !1637

checkok278:                                       ; preds = %if.then267
  %139 = load i64, ptr %len, align 8, !dbg !1637
  %add279 = add i64 0, %139, !dbg !1637
  %lt280 = icmp ult i64 %137, %add279, !dbg !1637
  %sub281 = sub i64 %add279, 1, !dbg !1637
  %140 = call i1 @llvm.expect.i1(i1 %lt280, i1 false), !dbg !1637
  br i1 %140, label %panic282, label %checkok292, !dbg !1637

checkok292:                                       ; preds = %checkok278
  %size = sub i64 %add279, 0, !dbg !1637
  %141 = insertvalue %"char[]" undef, ptr %136, 0, !dbg !1637
  %142 = insertvalue %"char[]" %141, i64 %size, 1, !dbg !1637
  %143 = load ptr, ptr %self, align 8
  store %"char[]" %142, ptr %indirectarg293, align 8
  %144 = call i64 @std.io.Formatter.out_reverse(ptr %retparam, ptr %143, ptr align 8 %indirectarg293), !dbg !1637
  %not_err = icmp eq i64 %144, 0, !dbg !1637
  %145 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1637
  br i1 %145, label %after_check, label %assign_optional, !dbg !1637

assign_optional:                                  ; preds = %checkok292
  store i64 %144, ptr %error_var, align 8, !dbg !1637
  br label %guard_block, !dbg !1637

after_check:                                      ; preds = %checkok292
  br label %noerr_block, !dbg !1637

guard_block:                                      ; preds = %assign_optional
  %146 = load i64, ptr %error_var, align 8, !dbg !1637
  ret i64 %146, !dbg !1637

noerr_block:                                      ; preds = %after_check
  br label %if.exit294, !dbg !1637

if.exit294:                                       ; preds = %noerr_block, %switch.exit265
  %147 = load i64, ptr %len, align 8, !dbg !1638
  store i64 %147, ptr %0, align 8, !dbg !1638
  ret i64 0, !dbg !1638

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg2, align 8
  %148 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %148(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 540), !dbg !1582
  unreachable, !dbg !1582

panic30:                                          ; preds = %if.exit27
  store i64 %35, ptr %taddr, align 8
  %149 = insertvalue %any undef, ptr %taddr, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr31, align 8
  %151 = insertvalue %any undef, ptr %taddr31, 0
  %152 = insertvalue %any %151, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg34, align 8
  store %any %150, ptr %varargslots, align 16
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %152, ptr %ptradd35, align 16
  %153 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %153, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg36, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 549, ptr align 8 %indirectarg36), !dbg !1595
  unreachable, !dbg !1595

panic57:                                          ; preds = %if.exit53
  store i64 %48, ptr %taddr58, align 8
  %154 = insertvalue %any undef, ptr %taddr58, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr59, align 8
  %156 = insertvalue %any undef, ptr %taddr59, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg62, align 8
  store %any %155, ptr %varargslots63, align 16
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %157, ptr %ptradd64, align 16
  %158 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %158, i64 2, 1
  store %"any[]" %"$$temp65", ptr %indirectarg66, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 554, ptr align 8 %indirectarg66), !dbg !1601
  unreachable, !dbg !1601

panic116:                                         ; preds = %switch.case
  store i64 %76, ptr %taddr117, align 8
  %159 = insertvalue %any undef, ptr %taddr117, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %78, ptr %taddr118, align 8
  %161 = insertvalue %any undef, ptr %taddr118, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg121, align 8
  store %any %160, ptr %varargslots122, align 16
  %ptradd123 = getelementptr inbounds i8, ptr %varargslots122, i64 16
  store %any %162, ptr %ptradd123, align 16
  %163 = insertvalue %"any[]" undef, ptr %varargslots122, 0
  %"$$temp124" = insertvalue %"any[]" %163, i64 2, 1
  store %"any[]" %"$$temp124", ptr %indirectarg125, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, i32 572, ptr align 8 %indirectarg125), !dbg !1611
  unreachable, !dbg !1611

panic135:                                         ; preds = %switch.case131
  store i64 %84, ptr %taddr136, align 8
  %164 = insertvalue %any undef, ptr %taddr136, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %86, ptr %taddr137, align 8
  %166 = insertvalue %any undef, ptr %taddr137, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg140, align 8
  store %any %165, ptr %varargslots141, align 16
  %ptradd142 = getelementptr inbounds i8, ptr %varargslots141, i64 16
  store %any %167, ptr %ptradd142, align 16
  %168 = insertvalue %"any[]" undef, ptr %varargslots141, 0
  %"$$temp143" = insertvalue %"any[]" %168, i64 2, 1
  store %"any[]" %"$$temp143", ptr %indirectarg144, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, i32 574, ptr align 8 %indirectarg144), !dbg !1614
  unreachable, !dbg !1614

panic155:                                         ; preds = %switch.case151
  store i64 %92, ptr %taddr156, align 8
  %169 = insertvalue %any undef, ptr %taddr156, 0
  %170 = insertvalue %any %169, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %94, ptr %taddr157, align 8
  %171 = insertvalue %any undef, ptr %taddr157, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg158, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg159, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg160, align 8
  store %any %170, ptr %varargslots161, align 16
  %ptradd162 = getelementptr inbounds i8, ptr %varargslots161, i64 16
  store %any %172, ptr %ptradd162, align 16
  %173 = insertvalue %"any[]" undef, ptr %varargslots161, 0
  %"$$temp163" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp163", ptr %indirectarg164, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg158, ptr align 8 %indirectarg159, ptr align 8 %indirectarg160, i32 576, ptr align 8 %indirectarg164), !dbg !1616
  unreachable, !dbg !1616

panic178:                                         ; preds = %switch.exit
  store i64 %100, ptr %taddr179, align 8
  %174 = insertvalue %any undef, ptr %taddr179, 0
  %175 = insertvalue %any %174, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr180, align 8
  %176 = insertvalue %any undef, ptr %taddr180, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg181, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg182, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg183, align 8
  store %any %175, ptr %varargslots184, align 16
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %177, ptr %ptradd185, align 16
  %178 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %178, i64 2, 1
  store %"any[]" %"$$temp186", ptr %indirectarg187, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg181, ptr align 8 %indirectarg182, ptr align 8 %indirectarg183, i32 580, ptr align 8 %indirectarg187), !dbg !1623
  unreachable, !dbg !1623

panic203:                                         ; preds = %if.exit199
  store i64 %110, ptr %taddr204, align 8
  %179 = insertvalue %any undef, ptr %taddr204, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %112, ptr %taddr205, align 8
  %181 = insertvalue %any undef, ptr %taddr205, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg207, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg208, align 8
  store %any %180, ptr %varargslots209, align 16
  %ptradd210 = getelementptr inbounds i8, ptr %varargslots209, i64 16
  store %any %182, ptr %ptradd210, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots209, 0
  %"$$temp211" = insertvalue %"any[]" %183, i64 2, 1
  store %"any[]" %"$$temp211", ptr %indirectarg212, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, ptr align 8 %indirectarg208, i32 588, ptr align 8 %indirectarg212), !dbg !1628
  unreachable, !dbg !1628

panic227:                                         ; preds = %if.exit223
  store i64 %120, ptr %taddr228, align 8
  %184 = insertvalue %any undef, ptr %taddr228, 0
  %185 = insertvalue %any %184, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %122, ptr %taddr229, align 8
  %186 = insertvalue %any undef, ptr %taddr229, 0
  %187 = insertvalue %any %186, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg230, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg231, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg232, align 8
  store %any %185, ptr %varargslots233, align 16
  %ptradd234 = getelementptr inbounds i8, ptr %varargslots233, i64 16
  store %any %187, ptr %ptradd234, align 16
  %188 = insertvalue %"any[]" undef, ptr %varargslots233, 0
  %"$$temp235" = insertvalue %"any[]" %188, i64 2, 1
  store %"any[]" %"$$temp235", ptr %indirectarg236, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg230, ptr align 8 %indirectarg231, ptr align 8 %indirectarg232, i32 591, ptr align 8 %indirectarg236), !dbg !1632
  unreachable, !dbg !1632

panic252:                                         ; preds = %if.exit248
  store i64 %130, ptr %taddr253, align 8
  %189 = insertvalue %any undef, ptr %taddr253, 0
  %190 = insertvalue %any %189, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %132, ptr %taddr254, align 8
  %191 = insertvalue %any undef, ptr %taddr254, 0
  %192 = insertvalue %any %191, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg255, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg256, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg257, align 8
  store %any %190, ptr %varargslots258, align 16
  %ptradd259 = getelementptr inbounds i8, ptr %varargslots258, i64 16
  store %any %192, ptr %ptradd259, align 16
  %193 = insertvalue %"any[]" undef, ptr %varargslots258, 0
  %"$$temp260" = insertvalue %"any[]" %193, i64 2, 1
  store %"any[]" %"$$temp260", ptr %indirectarg261, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg255, ptr align 8 %indirectarg256, ptr align 8 %indirectarg257, i32 594, ptr align 8 %indirectarg261), !dbg !1636
  unreachable, !dbg !1636

panic268:                                         ; preds = %if.then267
  store i64 %137, ptr %taddr269, align 8
  %194 = insertvalue %any undef, ptr %taddr269, 0
  %195 = insertvalue %any %194, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr270, align 8
  %196 = insertvalue %any undef, ptr %taddr270, 0
  %197 = insertvalue %any %196, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg271, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg272, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg273, align 8
  store %any %195, ptr %varargslots274, align 16
  %ptradd275 = getelementptr inbounds i8, ptr %varargslots274, i64 16
  store %any %197, ptr %ptradd275, align 16
  %198 = insertvalue %"any[]" undef, ptr %varargslots274, 0
  %"$$temp276" = insertvalue %"any[]" %198, i64 2, 1
  store %"any[]" %"$$temp276", ptr %indirectarg277, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg271, ptr align 8 %indirectarg272, ptr align 8 %indirectarg273, i32 596, ptr align 8 %indirectarg277), !dbg !1637
  unreachable, !dbg !1637

panic282:                                         ; preds = %checkok278
  store i64 %sub281, ptr %taddr283, align 8
  %199 = insertvalue %any undef, ptr %taddr283, 0
  %200 = insertvalue %any %199, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %137, ptr %taddr284, align 8
  %201 = insertvalue %any undef, ptr %taddr284, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg285, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg286, align 8
  store %"char[]" { ptr @.func.181, i64 11 }, ptr %indirectarg287, align 8
  store %any %200, ptr %varargslots288, align 16
  %ptradd289 = getelementptr inbounds i8, ptr %varargslots288, i64 16
  store %any %202, ptr %ptradd289, align 16
  %203 = insertvalue %"any[]" undef, ptr %varargslots288, 0
  %"$$temp290" = insertvalue %"any[]" %203, i64 2, 1
  store %"any[]" %"$$temp290", ptr %indirectarg291, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg285, ptr align 8 %indirectarg286, ptr align 8 %indirectarg287, i32 596, ptr align 8 %indirectarg291), !dbg !1637
  unreachable, !dbg !1637
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.ntoa_any(ptr %0, ptr %1, ptr align 8 %2, i32 %3) #0 !dbg !1639 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %base = alloca i32, align 4
  %is_neg = alloca i8, align 1
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i128, align 16
  %indirectarg3 = alloca %any, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg7 = alloca %"any[]", align 8
  %retparam8 = alloca i64, align 8
  %indirectarg9 = alloca i128, align 16
  %4 = icmp eq ptr %1, null, !dbg !1642
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1642
  br i1 %5, label %panic, label %checkok, !dbg !1642

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1643, !DIExpression(), !1644)
    #dbg_declare(ptr %2, !1645, !DIExpression(), !1644)
  store i32 %3, ptr %base, align 4
    #dbg_declare(ptr %base, !1646, !DIExpression(), !1644)
    #dbg_declare(ptr %is_neg, !1647, !DIExpression(), !1648)
  store i8 0, ptr %is_neg, align 1, !dbg !1648
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg3, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.io.int_from_any(ptr %retparam, ptr align 8 %indirectarg3, ptr %is_neg), !dbg !1649
  %not_err = icmp eq i64 %6, 0, !dbg !1649
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1649
  br i1 %7, label %after_check, label %assign_optional, !dbg !1649

assign_optional:                                  ; preds = %checkok
  store i64 %6, ptr %error_var, align 8, !dbg !1649
  br label %panic_block, !dbg !1649

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1649

panic_block:                                      ; preds = %assign_optional
  %8 = insertvalue %any undef, ptr %error_var, 0, !dbg !1649
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !1649
  store %"char[]" { ptr @.panic_msg.98, i64 36 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.186, i64 8 }, ptr %indirectarg6, align 8
  store %any %9, ptr %varargslots, align 16
  %10 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %10, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg7, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 604, ptr align 8 %indirectarg7), !dbg !1649
  unreachable, !dbg !1649

noerr_block:                                      ; preds = %after_check
  %11 = load ptr, ptr %self, align 8
  %12 = load i128, ptr %retparam, align 16
  store i128 %12, ptr %indirectarg9, align 16
  %13 = load i8, ptr %is_neg, align 1
  %14 = load i32, ptr %base, align 4
  %15 = call i64 @std.io.Formatter.ntoa(ptr %retparam8, ptr %11, ptr align 16 %indirectarg9, i8 zeroext %13, i32 %14) #5, !dbg !1649
  %not_err10 = icmp eq i64 %15, 0, !dbg !1649
  %16 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !1649
  br i1 %16, label %after_check12, label %assign_optional11, !dbg !1649

assign_optional11:                                ; preds = %noerr_block
  store i64 %15, ptr %reterr, align 8, !dbg !1649
  br label %err_retblock, !dbg !1649

after_check12:                                    ; preds = %noerr_block
  %17 = load i64, ptr %retparam8, align 8, !dbg !1649
  store i64 %17, ptr %0, align 8, !dbg !1649
  ret i64 0, !dbg !1649

err_retblock:                                     ; preds = %assign_optional11
  %18 = load i64, ptr %reterr, align 8, !dbg !1649
  ret i64 %18, !dbg !1649

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.186, i64 8 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 601), !dbg !1644
  unreachable, !dbg !1644
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_char(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !1650 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %l = alloca i32, align 4
  %error_var = alloca i64, align 8
  %retparam4 = alloca i64, align 8
  %c = alloca i32, align 4
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c25 = alloca i8, align 1
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %i = alloca i32, align 4
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %l101 = alloca i64, align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %i135 = alloca i128, align 16
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %c170 = alloca i8, align 1
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %s190 = alloca i16, align 2
  %indirectarg193 = alloca %"char[]", align 8
  %indirectarg194 = alloca %"char[]", align 8
  %indirectarg195 = alloca %"char[]", align 8
  %i215 = alloca i32, align 4
  %indirectarg218 = alloca %"char[]", align 8
  %indirectarg219 = alloca %"char[]", align 8
  %indirectarg220 = alloca %"char[]", align 8
  %l237 = alloca i64, align 8
  %indirectarg240 = alloca %"char[]", align 8
  %indirectarg241 = alloca %"char[]", align 8
  %indirectarg242 = alloca %"char[]", align 8
  %i262 = alloca i128, align 16
  %indirectarg265 = alloca %"char[]", align 8
  %indirectarg266 = alloca %"char[]", align 8
  %indirectarg267 = alloca %"char[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg280 = alloca %"char[]", align 8
  %indirectarg281 = alloca %"char[]", align 8
  %indirectarg282 = alloca %"char[]", align 8
  %indirectarg283 = alloca %"any[]", align 8
  %switch285 = alloca i8, align 1
  %error_var290 = alloca i64, align 8
  %retparam292 = alloca i64, align 8
  %error_var302 = alloca i64, align 8
  %retparam304 = alloca i64, align 8
  %error_var310 = alloca i64, align 8
  %retparam313 = alloca i64, align 8
  %error_var323 = alloca i64, align 8
  %retparam327 = alloca i64, align 8
  %error_var333 = alloca i64, align 8
  %retparam338 = alloca i64, align 8
  %error_var344 = alloca i64, align 8
  %retparam348 = alloca i64, align 8
  %error_var356 = alloca i64, align 8
  %retparam360 = alloca i64, align 8
  %error_var366 = alloca i64, align 8
  %retparam371 = alloca i64, align 8
  %error_var377 = alloca i64, align 8
  %retparam382 = alloca i64, align 8
  %error_var388 = alloca i64, align 8
  %retparam392 = alloca i64, align 8
  %error_var398 = alloca i64, align 8
  %retparam400 = alloca i64, align 8
  %reterr407 = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1651
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1651
  br i1 %4, label %panic, label %checkok, !dbg !1651

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1652, !DIExpression(), !1653)
    #dbg_declare(ptr %2, !1654, !DIExpression(), !1653)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1655
  %5 = load i64, ptr %ptradd, align 8, !dbg !1655
  %"introspect*" = inttoptr i64 %5 to ptr, !dbg !1655
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1655
  %6 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind) #5, !dbg !1655
  %7 = trunc i8 %6 to i1, !dbg !1655
  %not = xor i1 %7, true, !dbg !1655
  br i1 %not, label %if.then, label %if.exit, !dbg !1655

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.188, i64 10 }, ptr %indirectarg3, align 8
  %9 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %8, ptr align 8 %indirectarg3), !dbg !1656
  %not_err = icmp eq i64 %9, 0, !dbg !1656
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1656
  br i1 %10, label %after_check, label %assign_optional, !dbg !1656

assign_optional:                                  ; preds = %if.then
  store i64 %9, ptr %reterr, align 8, !dbg !1656
  br label %err_retblock, !dbg !1656

after_check:                                      ; preds = %if.then
  %11 = load i64, ptr %retparam, align 8, !dbg !1656
  store i64 %11, ptr %0, align 8, !dbg !1656
  ret i64 0, !dbg !1656

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !1656
  ret i64 %12, !dbg !1656

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !1658, !DIExpression(), !1659)
  store i64 1, ptr %len, align 8, !dbg !1659
    #dbg_declare(ptr %l, !1660, !DIExpression(), !1661)
  store i32 1, ptr %l, align 4, !dbg !1661
  %13 = load i64, ptr %len, align 8, !dbg !1662
  %14 = load i32, ptr %l, align 4, !dbg !1662
  %zext = zext i32 %14 to i64, !dbg !1662
  %15 = load ptr, ptr %self, align 8
  %16 = call i64 @std.io.Formatter.adjust(ptr %retparam4, ptr %15, i64 %zext), !dbg !1662
  %not_err5 = icmp eq i64 %16, 0, !dbg !1662
  %17 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !1662
  br i1 %17, label %after_check7, label %assign_optional6, !dbg !1662

assign_optional6:                                 ; preds = %if.exit
  store i64 %16, ptr %error_var, align 8, !dbg !1662
  br label %guard_block, !dbg !1662

after_check7:                                     ; preds = %if.exit
  br label %noerr_block, !dbg !1662

guard_block:                                      ; preds = %assign_optional6
  %18 = load i64, ptr %error_var, align 8, !dbg !1662
  ret i64 %18, !dbg !1662

noerr_block:                                      ; preds = %after_check7
  %19 = load i64, ptr %retparam4, align 8, !dbg !1662
  %add = add i64 %13, %19, !dbg !1662
  store i64 %add, ptr %len, align 8, !dbg !1662
    #dbg_declare(ptr %c, !1663, !DIExpression(), !1665)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %2, i32 16, i1 false)
  %20 = call i8 @std.core.types.TypeKind.is_int(i8 3) #5, !dbg !1666
  %21 = trunc i8 %20 to i1, !dbg !1666
  br i1 %21, label %assert_ok, label %assert_fail, !dbg !1666

assert_fail:                                      ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.79, i64 69 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg10, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 22), !dbg !1666
  unreachable, !dbg !1666

assert_ok:                                        ; preds = %noerr_block
  %ptradd11 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !1669
  %23 = load i64, ptr %ptradd11, align 8, !dbg !1669
  %"introspect*12" = inttoptr i64 %23 to ptr, !dbg !1669
  %typeid.kind13 = load i8, ptr %"introspect*12", align 8, !dbg !1669
  %24 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind13) #5, !dbg !1669
  %25 = trunc i8 %24 to i1, !dbg !1669
  br i1 %25, label %assert_ok18, label %assert_fail14, !dbg !1669

assert_fail14:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.83, i64 71 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg17, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 23), !dbg !1669
  unreachable, !dbg !1669

assert_ok18:                                      ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !1670, !DIExpression(), !1671)
  %ptradd19 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !1671
  %27 = load i64, ptr %ptradd19, align 8, !dbg !1671
  store i64 %27, ptr %any_type, align 8, !dbg !1671
    #dbg_declare(ptr %kind, !1672, !DIExpression(), !1673)
  %28 = load i64, ptr %any_type, align 8, !dbg !1673
  %"introspect*20" = inttoptr i64 %28 to ptr, !dbg !1673
  %typeid.kind21 = load i8, ptr %"introspect*20", align 8, !dbg !1673
  store i8 %typeid.kind21, ptr %kind, align 1, !dbg !1673
    #dbg_declare(ptr %is_mixed_signed, !1674, !DIExpression(), !1675)
  %29 = load i64, ptr %any_type, align 8, !dbg !1675
  %"introspect*22" = inttoptr i64 %29 to ptr, !dbg !1675
  %typeid.kind23 = load i8, ptr %"introspect*22", align 8, !dbg !1675
  %neq = icmp ne i8 3, %typeid.kind23, !dbg !1675
  %30 = zext i1 %neq to i8, !dbg !1675
  store i8 %30, ptr %is_mixed_signed, align 1, !dbg !1675
    #dbg_declare(ptr %max, !1676, !DIExpression(), !1677)
  store i32 -1, ptr %max, align 4, !dbg !1677
    #dbg_declare(ptr %min, !1678, !DIExpression(), !1679)
  store i32 0, ptr %min, align 4, !dbg !1679
  %31 = load i64, ptr %any_type, align 8
  store i64 %31, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok18
  %32 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !1680

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %33 = phi i64 [ %32, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !1680
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %33, !dbg !1680
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !1680

parent_type_block:                                ; preds = %check_subtype
  %34 = inttoptr i64 %33 to ptr, !dbg !1680
  %ptradd24 = getelementptr inbounds i8, ptr %34, i64 8, !dbg !1680
  %typeid.parent = load i64, ptr %ptradd24, align 8, !dbg !1680
  %35 = icmp eq i64 %typeid.parent, 0, !dbg !1680
  br i1 %35, label %result_block, label %check_subtype, !dbg !1680

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %36 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1680
  br i1 %36, label %switch.case, label %next_if, !dbg !1680

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c25, !1682, !DIExpression(), !1684)
  %37 = load ptr, ptr %v, align 8, !dbg !1684
  %checknull = icmp eq ptr %37, null, !dbg !1684
  %38 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1684
  br i1 %38, label %panic26, label %checkok30, !dbg !1684

checkok30:                                        ; preds = %switch.case
  %39 = load i8, ptr %37, align 1, !dbg !1684
  store i8 %39, ptr %c25, align 1, !dbg !1684
  %40 = load i8, ptr %is_mixed_signed, align 1, !dbg !1685
  %41 = trunc i8 %40 to i1, !dbg !1685
  br i1 %41, label %and.rhs, label %and.phi, !dbg !1685

and.rhs:                                          ; preds = %checkok30
  %42 = load i8, ptr %c25, align 1, !dbg !1685
  %sext = sext i8 %42 to i32, !dbg !1685
  %lt = icmp slt i32 %sext, 0, !dbg !1685
  br label %and.phi, !dbg !1685

and.phi:                                          ; preds = %and.rhs, %checkok30
  %val = phi i1 [ false, %checkok30 ], [ %lt, %and.rhs ], !dbg !1685
  br i1 %val, label %if.then31, label %if.exit32, !dbg !1685

if.then31:                                        ; preds = %and.phi
  br label %else_block, !dbg !1685

if.exit32:                                        ; preds = %and.phi
  %43 = load i8, ptr %c25, align 1, !dbg !1686
  %sext33 = sext i8 %43 to i32, !dbg !1686
  store i32 %sext33, ptr %blockret, align 4, !dbg !1686
  br label %expr_block.exit, !dbg !1686

next_if:                                          ; preds = %result_block
  br label %check_subtype34, !dbg !1687

check_subtype34:                                  ; preds = %parent_type_block36, %next_if
  %44 = phi i64 [ %32, %next_if ], [ %typeid.parent38, %parent_type_block36 ], !dbg !1687
  %eq35 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %44, !dbg !1687
  br i1 %eq35, label %result_block39, label %parent_type_block36, !dbg !1687

parent_type_block36:                              ; preds = %check_subtype34
  %45 = inttoptr i64 %44 to ptr, !dbg !1687
  %ptradd37 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1687
  %typeid.parent38 = load i64, ptr %ptradd37, align 8, !dbg !1687
  %46 = icmp eq i64 %typeid.parent38, 0, !dbg !1687
  br i1 %46, label %result_block39, label %check_subtype34, !dbg !1687

result_block39:                                   ; preds = %parent_type_block36, %check_subtype34
  %47 = phi i1 [ false, %parent_type_block36 ], [ true, %check_subtype34 ], !dbg !1687
  br i1 %47, label %switch.case40, label %next_if62, !dbg !1687

switch.case40:                                    ; preds = %result_block39
    #dbg_declare(ptr %s, !1688, !DIExpression(), !1690)
  %48 = load ptr, ptr %v, align 8, !dbg !1690
  %checknull41 = icmp eq ptr %48, null, !dbg !1690
  %49 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !1690
  br i1 %49, label %panic42, label %checkok46, !dbg !1690

checkok46:                                        ; preds = %switch.case40
  %50 = load i16, ptr %48, align 2, !dbg !1690
  store i16 %50, ptr %s, align 2, !dbg !1690
  %51 = load i8, ptr %is_mixed_signed, align 1, !dbg !1691
  %52 = trunc i8 %51 to i1, !dbg !1691
  br i1 %52, label %and.rhs47, label %and.phi50, !dbg !1691

and.rhs47:                                        ; preds = %checkok46
  %53 = load i16, ptr %s, align 2, !dbg !1691
  %sext48 = sext i16 %53 to i32, !dbg !1691
  %lt49 = icmp slt i32 %sext48, 0, !dbg !1691
  br label %and.phi50, !dbg !1691

and.phi50:                                        ; preds = %and.rhs47, %checkok46
  %val51 = phi i1 [ false, %checkok46 ], [ %lt49, %and.rhs47 ], !dbg !1691
  br i1 %val51, label %if.then52, label %if.exit53, !dbg !1691

if.then52:                                        ; preds = %and.phi50
  br label %else_block, !dbg !1691

if.exit53:                                        ; preds = %and.phi50
  %54 = load i16, ptr %s, align 2, !dbg !1692
  %sext54 = sext i16 %54 to i32, !dbg !1692
  %55 = load i32, ptr %max, align 4, !dbg !1692
  %gt = icmp sgt i32 %sext54, %55, !dbg !1692
  %check = icmp sge i32 %55, 0, !dbg !1692
  %siui-gt = and i1 %check, %gt, !dbg !1692
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !1692

or.rhs:                                           ; preds = %if.exit53
  %56 = load i16, ptr %s, align 2, !dbg !1692
  %sext55 = sext i16 %56 to i32, !dbg !1692
  %57 = load i32, ptr %min, align 4, !dbg !1692
  %lt56 = icmp slt i32 %sext55, %57, !dbg !1692
  %check57 = icmp slt i32 %57, 0, !dbg !1692
  %siui-lt = or i1 %check57, %lt56, !dbg !1692
  br label %or.phi, !dbg !1692

or.phi:                                           ; preds = %or.rhs, %if.exit53
  %val58 = phi i1 [ true, %if.exit53 ], [ %siui-lt, %or.rhs ], !dbg !1692
  br i1 %val58, label %if.then59, label %if.exit60, !dbg !1692

if.then59:                                        ; preds = %or.phi
  br label %else_block, !dbg !1692

if.exit60:                                        ; preds = %or.phi
  %58 = load i16, ptr %s, align 2, !dbg !1693
  %sext61 = sext i16 %58 to i32, !dbg !1693
  store i32 %sext61, ptr %blockret, align 4, !dbg !1693
  br label %expr_block.exit, !dbg !1693

next_if62:                                        ; preds = %result_block39
  br label %check_subtype63, !dbg !1694

check_subtype63:                                  ; preds = %parent_type_block65, %next_if62
  %59 = phi i64 [ %32, %next_if62 ], [ %typeid.parent67, %parent_type_block65 ], !dbg !1694
  %eq64 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %59, !dbg !1694
  br i1 %eq64, label %result_block68, label %parent_type_block65, !dbg !1694

parent_type_block65:                              ; preds = %check_subtype63
  %60 = inttoptr i64 %59 to ptr, !dbg !1694
  %ptradd66 = getelementptr inbounds i8, ptr %60, i64 8, !dbg !1694
  %typeid.parent67 = load i64, ptr %ptradd66, align 8, !dbg !1694
  %61 = icmp eq i64 %typeid.parent67, 0, !dbg !1694
  br i1 %61, label %result_block68, label %check_subtype63, !dbg !1694

result_block68:                                   ; preds = %parent_type_block65, %check_subtype63
  %62 = phi i1 [ false, %parent_type_block65 ], [ true, %check_subtype63 ], !dbg !1694
  br i1 %62, label %switch.case69, label %next_if93, !dbg !1694

switch.case69:                                    ; preds = %result_block68
    #dbg_declare(ptr %i, !1695, !DIExpression(), !1697)
  %63 = load ptr, ptr %v, align 8, !dbg !1697
  %checknull70 = icmp eq ptr %63, null, !dbg !1697
  %64 = call i1 @llvm.expect.i1(i1 %checknull70, i1 false), !dbg !1697
  br i1 %64, label %panic71, label %checkok75, !dbg !1697

checkok75:                                        ; preds = %switch.case69
  %65 = load i32, ptr %63, align 4, !dbg !1697
  store i32 %65, ptr %i, align 4, !dbg !1697
  %66 = load i8, ptr %is_mixed_signed, align 1, !dbg !1698
  %67 = trunc i8 %66 to i1, !dbg !1698
  br i1 %67, label %and.rhs76, label %and.phi78, !dbg !1698

and.rhs76:                                        ; preds = %checkok75
  %68 = load i32, ptr %i, align 4, !dbg !1698
  %lt77 = icmp slt i32 %68, 0, !dbg !1698
  br label %and.phi78, !dbg !1698

and.phi78:                                        ; preds = %and.rhs76, %checkok75
  %val79 = phi i1 [ false, %checkok75 ], [ %lt77, %and.rhs76 ], !dbg !1698
  br i1 %val79, label %if.then80, label %if.exit81, !dbg !1698

if.then80:                                        ; preds = %and.phi78
  br label %else_block, !dbg !1698

if.exit81:                                        ; preds = %and.phi78
  %69 = load i32, ptr %i, align 4, !dbg !1699
  %70 = load i32, ptr %max, align 4, !dbg !1699
  %gt82 = icmp sgt i32 %69, %70, !dbg !1699
  %check83 = icmp sge i32 %70, 0, !dbg !1699
  %siui-gt84 = and i1 %check83, %gt82, !dbg !1699
  br i1 %siui-gt84, label %or.phi89, label %or.rhs85, !dbg !1699

or.rhs85:                                         ; preds = %if.exit81
  %71 = load i32, ptr %i, align 4, !dbg !1699
  %72 = load i32, ptr %min, align 4, !dbg !1699
  %lt86 = icmp slt i32 %71, %72, !dbg !1699
  %check87 = icmp slt i32 %72, 0, !dbg !1699
  %siui-lt88 = or i1 %check87, %lt86, !dbg !1699
  br label %or.phi89, !dbg !1699

or.phi89:                                         ; preds = %or.rhs85, %if.exit81
  %val90 = phi i1 [ true, %if.exit81 ], [ %siui-lt88, %or.rhs85 ], !dbg !1699
  br i1 %val90, label %if.then91, label %if.exit92, !dbg !1699

if.then91:                                        ; preds = %or.phi89
  br label %else_block, !dbg !1699

if.exit92:                                        ; preds = %or.phi89
  %73 = load i32, ptr %i, align 4, !dbg !1700
  store i32 %73, ptr %blockret, align 4, !dbg !1700
  br label %expr_block.exit, !dbg !1700

next_if93:                                        ; preds = %result_block68
  br label %check_subtype94, !dbg !1701

check_subtype94:                                  ; preds = %parent_type_block96, %next_if93
  %74 = phi i64 [ %32, %next_if93 ], [ %typeid.parent98, %parent_type_block96 ], !dbg !1701
  %eq95 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %74, !dbg !1701
  br i1 %eq95, label %result_block99, label %parent_type_block96, !dbg !1701

parent_type_block96:                              ; preds = %check_subtype94
  %75 = inttoptr i64 %74 to ptr, !dbg !1701
  %ptradd97 = getelementptr inbounds i8, ptr %75, i64 8, !dbg !1701
  %typeid.parent98 = load i64, ptr %ptradd97, align 8, !dbg !1701
  %76 = icmp eq i64 %typeid.parent98, 0, !dbg !1701
  br i1 %76, label %result_block99, label %check_subtype94, !dbg !1701

result_block99:                                   ; preds = %parent_type_block96, %check_subtype94
  %77 = phi i1 [ false, %parent_type_block96 ], [ true, %check_subtype94 ], !dbg !1701
  br i1 %77, label %switch.case100, label %next_if127, !dbg !1701

switch.case100:                                   ; preds = %result_block99
    #dbg_declare(ptr %l101, !1702, !DIExpression(), !1704)
  %78 = load ptr, ptr %v, align 8, !dbg !1704
  %checknull102 = icmp eq ptr %78, null, !dbg !1704
  %79 = call i1 @llvm.expect.i1(i1 %checknull102, i1 false), !dbg !1704
  br i1 %79, label %panic103, label %checkok107, !dbg !1704

checkok107:                                       ; preds = %switch.case100
  %80 = load i64, ptr %78, align 8, !dbg !1704
  store i64 %80, ptr %l101, align 8, !dbg !1704
  %81 = load i8, ptr %is_mixed_signed, align 1, !dbg !1705
  %82 = trunc i8 %81 to i1, !dbg !1705
  br i1 %82, label %and.rhs108, label %and.phi110, !dbg !1705

and.rhs108:                                       ; preds = %checkok107
  %83 = load i64, ptr %l101, align 8, !dbg !1705
  %lt109 = icmp slt i64 %83, 0, !dbg !1705
  br label %and.phi110, !dbg !1705

and.phi110:                                       ; preds = %and.rhs108, %checkok107
  %val111 = phi i1 [ false, %checkok107 ], [ %lt109, %and.rhs108 ], !dbg !1705
  br i1 %val111, label %if.then112, label %if.exit113, !dbg !1705

if.then112:                                       ; preds = %and.phi110
  br label %else_block, !dbg !1705

if.exit113:                                       ; preds = %and.phi110
  %84 = load i64, ptr %l101, align 8, !dbg !1706
  %85 = load i32, ptr %max, align 4, !dbg !1706
  %zext114 = zext i32 %85 to i64, !dbg !1706
  %gt115 = icmp sgt i64 %84, %zext114, !dbg !1706
  %check116 = icmp sge i64 %zext114, 0, !dbg !1706
  %siui-gt117 = and i1 %check116, %gt115, !dbg !1706
  br i1 %siui-gt117, label %or.phi123, label %or.rhs118, !dbg !1706

or.rhs118:                                        ; preds = %if.exit113
  %86 = load i64, ptr %l101, align 8, !dbg !1706
  %87 = load i32, ptr %min, align 4, !dbg !1706
  %zext119 = zext i32 %87 to i64, !dbg !1706
  %lt120 = icmp slt i64 %86, %zext119, !dbg !1706
  %check121 = icmp slt i64 %zext119, 0, !dbg !1706
  %siui-lt122 = or i1 %check121, %lt120, !dbg !1706
  br label %or.phi123, !dbg !1706

or.phi123:                                        ; preds = %or.rhs118, %if.exit113
  %val124 = phi i1 [ true, %if.exit113 ], [ %siui-lt122, %or.rhs118 ], !dbg !1706
  br i1 %val124, label %if.then125, label %if.exit126, !dbg !1706

if.then125:                                       ; preds = %or.phi123
  br label %else_block, !dbg !1706

if.exit126:                                       ; preds = %or.phi123
  %88 = load i64, ptr %l101, align 8, !dbg !1707
  %trunc = trunc i64 %88 to i32, !dbg !1707
  store i32 %trunc, ptr %blockret, align 4, !dbg !1707
  br label %expr_block.exit, !dbg !1707

next_if127:                                       ; preds = %result_block99
  br label %check_subtype128, !dbg !1708

check_subtype128:                                 ; preds = %parent_type_block130, %next_if127
  %89 = phi i64 [ %32, %next_if127 ], [ %typeid.parent132, %parent_type_block130 ], !dbg !1708
  %eq129 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %89, !dbg !1708
  br i1 %eq129, label %result_block133, label %parent_type_block130, !dbg !1708

parent_type_block130:                             ; preds = %check_subtype128
  %90 = inttoptr i64 %89 to ptr, !dbg !1708
  %ptradd131 = getelementptr inbounds i8, ptr %90, i64 8, !dbg !1708
  %typeid.parent132 = load i64, ptr %ptradd131, align 8, !dbg !1708
  %91 = icmp eq i64 %typeid.parent132, 0, !dbg !1708
  br i1 %91, label %result_block133, label %check_subtype128, !dbg !1708

result_block133:                                  ; preds = %parent_type_block130, %check_subtype128
  %92 = phi i1 [ false, %parent_type_block130 ], [ true, %check_subtype128 ], !dbg !1708
  br i1 %92, label %switch.case134, label %next_if162, !dbg !1708

switch.case134:                                   ; preds = %result_block133
    #dbg_declare(ptr %i135, !1709, !DIExpression(), !1711)
  %93 = load ptr, ptr %v, align 8, !dbg !1711
  %checknull136 = icmp eq ptr %93, null, !dbg !1711
  %94 = call i1 @llvm.expect.i1(i1 %checknull136, i1 false), !dbg !1711
  br i1 %94, label %panic137, label %checkok141, !dbg !1711

checkok141:                                       ; preds = %switch.case134
  %95 = load i128, ptr %93, align 16, !dbg !1711
  store i128 %95, ptr %i135, align 16, !dbg !1711
  %96 = load i8, ptr %is_mixed_signed, align 1, !dbg !1712
  %97 = trunc i8 %96 to i1, !dbg !1712
  br i1 %97, label %and.rhs142, label %and.phi144, !dbg !1712

and.rhs142:                                       ; preds = %checkok141
  %98 = load i128, ptr %i135, align 16, !dbg !1712
  %lt143 = icmp slt i128 %98, 0, !dbg !1712
  br label %and.phi144, !dbg !1712

and.phi144:                                       ; preds = %and.rhs142, %checkok141
  %val145 = phi i1 [ false, %checkok141 ], [ %lt143, %and.rhs142 ], !dbg !1712
  br i1 %val145, label %if.then146, label %if.exit147, !dbg !1712

if.then146:                                       ; preds = %and.phi144
  br label %else_block, !dbg !1712

if.exit147:                                       ; preds = %and.phi144
  %99 = load i128, ptr %i135, align 16, !dbg !1713
  %100 = load i32, ptr %max, align 4, !dbg !1713
  %zext148 = zext i32 %100 to i128, !dbg !1713
  %gt149 = icmp sgt i128 %99, %zext148, !dbg !1713
  %check150 = icmp sge i128 %zext148, 0, !dbg !1713
  %siui-gt151 = and i1 %check150, %gt149, !dbg !1713
  br i1 %siui-gt151, label %or.phi157, label %or.rhs152, !dbg !1713

or.rhs152:                                        ; preds = %if.exit147
  %101 = load i128, ptr %i135, align 16, !dbg !1713
  %102 = load i32, ptr %min, align 4, !dbg !1713
  %zext153 = zext i32 %102 to i128, !dbg !1713
  %lt154 = icmp slt i128 %101, %zext153, !dbg !1713
  %check155 = icmp slt i128 %zext153, 0, !dbg !1713
  %siui-lt156 = or i1 %check155, %lt154, !dbg !1713
  br label %or.phi157, !dbg !1713

or.phi157:                                        ; preds = %or.rhs152, %if.exit147
  %val158 = phi i1 [ true, %if.exit147 ], [ %siui-lt156, %or.rhs152 ], !dbg !1713
  br i1 %val158, label %if.then159, label %if.exit160, !dbg !1713

if.then159:                                       ; preds = %or.phi157
  br label %else_block, !dbg !1713

if.exit160:                                       ; preds = %or.phi157
  %103 = load i128, ptr %i135, align 16, !dbg !1714
  %trunc161 = trunc i128 %103 to i32, !dbg !1714
  store i32 %trunc161, ptr %blockret, align 4, !dbg !1714
  br label %expr_block.exit, !dbg !1714

next_if162:                                       ; preds = %result_block133
  br label %check_subtype163, !dbg !1715

check_subtype163:                                 ; preds = %parent_type_block165, %next_if162
  %104 = phi i64 [ %32, %next_if162 ], [ %typeid.parent167, %parent_type_block165 ], !dbg !1715
  %eq164 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %104, !dbg !1715
  br i1 %eq164, label %result_block168, label %parent_type_block165, !dbg !1715

parent_type_block165:                             ; preds = %check_subtype163
  %105 = inttoptr i64 %104 to ptr, !dbg !1715
  %ptradd166 = getelementptr inbounds i8, ptr %105, i64 8, !dbg !1715
  %typeid.parent167 = load i64, ptr %ptradd166, align 8, !dbg !1715
  %106 = icmp eq i64 %typeid.parent167, 0, !dbg !1715
  br i1 %106, label %result_block168, label %check_subtype163, !dbg !1715

result_block168:                                  ; preds = %parent_type_block165, %check_subtype163
  %107 = phi i1 [ false, %parent_type_block165 ], [ true, %check_subtype163 ], !dbg !1715
  br i1 %107, label %switch.case169, label %next_if182, !dbg !1715

switch.case169:                                   ; preds = %result_block168
    #dbg_declare(ptr %c170, !1716, !DIExpression(), !1718)
  %108 = load ptr, ptr %v, align 8, !dbg !1718
  %checknull171 = icmp eq ptr %108, null, !dbg !1718
  %109 = call i1 @llvm.expect.i1(i1 %checknull171, i1 false), !dbg !1718
  br i1 %109, label %panic172, label %checkok176, !dbg !1718

checkok176:                                       ; preds = %switch.case169
  %110 = load i8, ptr %108, align 1, !dbg !1718
  store i8 %110, ptr %c170, align 1, !dbg !1718
  %111 = load i8, ptr %c170, align 1, !dbg !1719
  %zext177 = zext i8 %111 to i32, !dbg !1719
  %112 = load i32, ptr %max, align 4, !dbg !1719
  %gt178 = icmp ugt i32 %zext177, %112, !dbg !1719
  br i1 %gt178, label %if.then179, label %if.exit180, !dbg !1719

if.then179:                                       ; preds = %checkok176
  br label %else_block, !dbg !1719

if.exit180:                                       ; preds = %checkok176
  %113 = load i8, ptr %c170, align 1, !dbg !1720
  %zext181 = zext i8 %113 to i32, !dbg !1720
  store i32 %zext181, ptr %blockret, align 4, !dbg !1720
  br label %expr_block.exit, !dbg !1720

next_if182:                                       ; preds = %result_block168
  br label %check_subtype183, !dbg !1721

check_subtype183:                                 ; preds = %parent_type_block185, %next_if182
  %114 = phi i64 [ %32, %next_if182 ], [ %typeid.parent187, %parent_type_block185 ], !dbg !1721
  %eq184 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %114, !dbg !1721
  br i1 %eq184, label %result_block188, label %parent_type_block185, !dbg !1721

parent_type_block185:                             ; preds = %check_subtype183
  %115 = inttoptr i64 %114 to ptr, !dbg !1721
  %ptradd186 = getelementptr inbounds i8, ptr %115, i64 8, !dbg !1721
  %typeid.parent187 = load i64, ptr %ptradd186, align 8, !dbg !1721
  %116 = icmp eq i64 %typeid.parent187, 0, !dbg !1721
  br i1 %116, label %result_block188, label %check_subtype183, !dbg !1721

result_block188:                                  ; preds = %parent_type_block185, %check_subtype183
  %117 = phi i1 [ false, %parent_type_block185 ], [ true, %check_subtype183 ], !dbg !1721
  br i1 %117, label %switch.case189, label %next_if207, !dbg !1721

switch.case189:                                   ; preds = %result_block188
    #dbg_declare(ptr %s190, !1722, !DIExpression(), !1724)
  %118 = load ptr, ptr %v, align 8, !dbg !1724
  %checknull191 = icmp eq ptr %118, null, !dbg !1724
  %119 = call i1 @llvm.expect.i1(i1 %checknull191, i1 false), !dbg !1724
  br i1 %119, label %panic192, label %checkok196, !dbg !1724

checkok196:                                       ; preds = %switch.case189
  %120 = load i16, ptr %118, align 2, !dbg !1724
  store i16 %120, ptr %s190, align 2, !dbg !1724
  %121 = load i16, ptr %s190, align 2, !dbg !1725
  %zext197 = zext i16 %121 to i32, !dbg !1725
  %122 = load i32, ptr %max, align 4, !dbg !1725
  %gt198 = icmp ugt i32 %zext197, %122, !dbg !1725
  br i1 %gt198, label %or.phi202, label %or.rhs199, !dbg !1725

or.rhs199:                                        ; preds = %checkok196
  %123 = load i16, ptr %s190, align 2, !dbg !1725
  %zext200 = zext i16 %123 to i32, !dbg !1725
  %124 = load i32, ptr %min, align 4, !dbg !1725
  %lt201 = icmp ult i32 %zext200, %124, !dbg !1725
  br label %or.phi202, !dbg !1725

or.phi202:                                        ; preds = %or.rhs199, %checkok196
  %val203 = phi i1 [ true, %checkok196 ], [ %lt201, %or.rhs199 ], !dbg !1725
  br i1 %val203, label %if.then204, label %if.exit205, !dbg !1725

if.then204:                                       ; preds = %or.phi202
  br label %else_block, !dbg !1725

if.exit205:                                       ; preds = %or.phi202
  %125 = load i16, ptr %s190, align 2, !dbg !1726
  %zext206 = zext i16 %125 to i32, !dbg !1726
  store i32 %zext206, ptr %blockret, align 4, !dbg !1726
  br label %expr_block.exit, !dbg !1726

next_if207:                                       ; preds = %result_block188
  br label %check_subtype208, !dbg !1727

check_subtype208:                                 ; preds = %parent_type_block210, %next_if207
  %126 = phi i64 [ %32, %next_if207 ], [ %typeid.parent212, %parent_type_block210 ], !dbg !1727
  %eq209 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %126, !dbg !1727
  br i1 %eq209, label %result_block213, label %parent_type_block210, !dbg !1727

parent_type_block210:                             ; preds = %check_subtype208
  %127 = inttoptr i64 %126 to ptr, !dbg !1727
  %ptradd211 = getelementptr inbounds i8, ptr %127, i64 8, !dbg !1727
  %typeid.parent212 = load i64, ptr %ptradd211, align 8, !dbg !1727
  %128 = icmp eq i64 %typeid.parent212, 0, !dbg !1727
  br i1 %128, label %result_block213, label %check_subtype208, !dbg !1727

result_block213:                                  ; preds = %parent_type_block210, %check_subtype208
  %129 = phi i1 [ false, %parent_type_block210 ], [ true, %check_subtype208 ], !dbg !1727
  br i1 %129, label %switch.case214, label %next_if229, !dbg !1727

switch.case214:                                   ; preds = %result_block213
    #dbg_declare(ptr %i215, !1728, !DIExpression(), !1730)
  %130 = load ptr, ptr %v, align 8, !dbg !1730
  %checknull216 = icmp eq ptr %130, null, !dbg !1730
  %131 = call i1 @llvm.expect.i1(i1 %checknull216, i1 false), !dbg !1730
  br i1 %131, label %panic217, label %checkok221, !dbg !1730

checkok221:                                       ; preds = %switch.case214
  %132 = load i32, ptr %130, align 4, !dbg !1730
  store i32 %132, ptr %i215, align 4, !dbg !1730
  %133 = load i32, ptr %i215, align 4, !dbg !1731
  %134 = load i32, ptr %max, align 4, !dbg !1731
  %gt222 = icmp ugt i32 %133, %134, !dbg !1731
  br i1 %gt222, label %or.phi225, label %or.rhs223, !dbg !1731

or.rhs223:                                        ; preds = %checkok221
  %135 = load i32, ptr %i215, align 4, !dbg !1731
  %136 = load i32, ptr %min, align 4, !dbg !1731
  %lt224 = icmp ult i32 %135, %136, !dbg !1731
  br label %or.phi225, !dbg !1731

or.phi225:                                        ; preds = %or.rhs223, %checkok221
  %val226 = phi i1 [ true, %checkok221 ], [ %lt224, %or.rhs223 ], !dbg !1731
  br i1 %val226, label %if.then227, label %if.exit228, !dbg !1731

if.then227:                                       ; preds = %or.phi225
  br label %else_block, !dbg !1731

if.exit228:                                       ; preds = %or.phi225
  %137 = load i32, ptr %i215, align 4, !dbg !1732
  store i32 %137, ptr %blockret, align 4, !dbg !1732
  br label %expr_block.exit, !dbg !1732

next_if229:                                       ; preds = %result_block213
  br label %check_subtype230, !dbg !1733

check_subtype230:                                 ; preds = %parent_type_block232, %next_if229
  %138 = phi i64 [ %32, %next_if229 ], [ %typeid.parent234, %parent_type_block232 ], !dbg !1733
  %eq231 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %138, !dbg !1733
  br i1 %eq231, label %result_block235, label %parent_type_block232, !dbg !1733

parent_type_block232:                             ; preds = %check_subtype230
  %139 = inttoptr i64 %138 to ptr, !dbg !1733
  %ptradd233 = getelementptr inbounds i8, ptr %139, i64 8, !dbg !1733
  %typeid.parent234 = load i64, ptr %ptradd233, align 8, !dbg !1733
  %140 = icmp eq i64 %typeid.parent234, 0, !dbg !1733
  br i1 %140, label %result_block235, label %check_subtype230, !dbg !1733

result_block235:                                  ; preds = %parent_type_block232, %check_subtype230
  %141 = phi i1 [ false, %parent_type_block232 ], [ true, %check_subtype230 ], !dbg !1733
  br i1 %141, label %switch.case236, label %next_if254, !dbg !1733

switch.case236:                                   ; preds = %result_block235
    #dbg_declare(ptr %l237, !1734, !DIExpression(), !1736)
  %142 = load ptr, ptr %v, align 8, !dbg !1736
  %checknull238 = icmp eq ptr %142, null, !dbg !1736
  %143 = call i1 @llvm.expect.i1(i1 %checknull238, i1 false), !dbg !1736
  br i1 %143, label %panic239, label %checkok243, !dbg !1736

checkok243:                                       ; preds = %switch.case236
  %144 = load i64, ptr %142, align 8, !dbg !1736
  store i64 %144, ptr %l237, align 8, !dbg !1736
  %145 = load i64, ptr %l237, align 8, !dbg !1737
  %146 = load i32, ptr %max, align 4, !dbg !1737
  %zext244 = zext i32 %146 to i64, !dbg !1737
  %gt245 = icmp ugt i64 %145, %zext244, !dbg !1737
  br i1 %gt245, label %or.phi249, label %or.rhs246, !dbg !1737

or.rhs246:                                        ; preds = %checkok243
  %147 = load i64, ptr %l237, align 8, !dbg !1737
  %148 = load i32, ptr %min, align 4, !dbg !1737
  %zext247 = zext i32 %148 to i64, !dbg !1737
  %lt248 = icmp ult i64 %147, %zext247, !dbg !1737
  br label %or.phi249, !dbg !1737

or.phi249:                                        ; preds = %or.rhs246, %checkok243
  %val250 = phi i1 [ true, %checkok243 ], [ %lt248, %or.rhs246 ], !dbg !1737
  br i1 %val250, label %if.then251, label %if.exit252, !dbg !1737

if.then251:                                       ; preds = %or.phi249
  br label %else_block, !dbg !1737

if.exit252:                                       ; preds = %or.phi249
  %149 = load i64, ptr %l237, align 8, !dbg !1738
  %trunc253 = trunc i64 %149 to i32, !dbg !1738
  store i32 %trunc253, ptr %blockret, align 4, !dbg !1738
  br label %expr_block.exit, !dbg !1738

next_if254:                                       ; preds = %result_block235
  br label %check_subtype255, !dbg !1739

check_subtype255:                                 ; preds = %parent_type_block257, %next_if254
  %150 = phi i64 [ %32, %next_if254 ], [ %typeid.parent259, %parent_type_block257 ], !dbg !1739
  %eq256 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %150, !dbg !1739
  br i1 %eq256, label %result_block260, label %parent_type_block257, !dbg !1739

parent_type_block257:                             ; preds = %check_subtype255
  %151 = inttoptr i64 %150 to ptr, !dbg !1739
  %ptradd258 = getelementptr inbounds i8, ptr %151, i64 8, !dbg !1739
  %typeid.parent259 = load i64, ptr %ptradd258, align 8, !dbg !1739
  %152 = icmp eq i64 %typeid.parent259, 0, !dbg !1739
  br i1 %152, label %result_block260, label %check_subtype255, !dbg !1739

result_block260:                                  ; preds = %parent_type_block257, %check_subtype255
  %153 = phi i1 [ false, %parent_type_block257 ], [ true, %check_subtype255 ], !dbg !1739
  br i1 %153, label %switch.case261, label %next_if279, !dbg !1739

switch.case261:                                   ; preds = %result_block260
    #dbg_declare(ptr %i262, !1740, !DIExpression(), !1742)
  %154 = load ptr, ptr %v, align 8, !dbg !1742
  %checknull263 = icmp eq ptr %154, null, !dbg !1742
  %155 = call i1 @llvm.expect.i1(i1 %checknull263, i1 false), !dbg !1742
  br i1 %155, label %panic264, label %checkok268, !dbg !1742

checkok268:                                       ; preds = %switch.case261
  %156 = load i128, ptr %154, align 16, !dbg !1742
  store i128 %156, ptr %i262, align 16, !dbg !1742
  %157 = load i128, ptr %i262, align 16, !dbg !1743
  %158 = load i32, ptr %max, align 4, !dbg !1743
  %zext269 = zext i32 %158 to i128, !dbg !1743
  %gt270 = icmp ugt i128 %157, %zext269, !dbg !1743
  br i1 %gt270, label %or.phi274, label %or.rhs271, !dbg !1743

or.rhs271:                                        ; preds = %checkok268
  %159 = load i128, ptr %i262, align 16, !dbg !1743
  %160 = load i32, ptr %min, align 4, !dbg !1743
  %zext272 = zext i32 %160 to i128, !dbg !1743
  %lt273 = icmp ult i128 %159, %zext272, !dbg !1743
  br label %or.phi274, !dbg !1743

or.phi274:                                        ; preds = %or.rhs271, %checkok268
  %val275 = phi i1 [ true, %checkok268 ], [ %lt273, %or.rhs271 ], !dbg !1743
  br i1 %val275, label %if.then276, label %if.exit277, !dbg !1743

if.then276:                                       ; preds = %or.phi274
  br label %else_block, !dbg !1743

if.exit277:                                       ; preds = %or.phi274
  %161 = load i128, ptr %i262, align 16, !dbg !1744
  %trunc278 = trunc i128 %161 to i32, !dbg !1744
  store i32 %trunc278, ptr %blockret, align 4, !dbg !1744
  br label %expr_block.exit, !dbg !1744

next_if279:                                       ; preds = %result_block260
  br label %switch.default, !dbg !1744

switch.default:                                   ; preds = %next_if279
  store %"char[]" { ptr @.str.189, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg280, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.190, i64 20 }, ptr %indirectarg281, align 8
  store %"char[]" { ptr @.str.191, i64 18 }, ptr %indirectarg282, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg283, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg280, ptr align 8 %indirectarg281, ptr align 8 %indirectarg282, i32 618, ptr align 8 %indirectarg283), !dbg !1745
  unreachable, !dbg !1749

expr_block.exit:                                  ; preds = %if.exit277, %if.exit252, %if.exit228, %if.exit205, %if.exit180, %if.exit160, %if.exit126, %if.exit92, %if.exit60, %if.exit32
  %162 = load i32, ptr %blockret, align 4, !dbg !1749
  br label %phi_block, !dbg !1749

else_block:                                       ; preds = %if.then276, %if.then251, %if.then227, %if.then204, %if.then179, %if.then159, %if.then146, %if.then125, %if.then112, %if.then91, %if.then80, %if.then59, %if.then52, %if.then31
  br label %phi_block, !dbg !1665

phi_block:                                        ; preds = %else_block, %expr_block.exit
  %val284 = phi i32 [ %162, %expr_block.exit ], [ 65533, %else_block ], !dbg !1665
  store i32 %val284, ptr %c, align 4, !dbg !1665
  store i8 1, ptr %switch285, align 1
  br label %switch.entry286

switch.entry286:                                  ; preds = %phi_block
  %163 = load i8, ptr %switch285, align 1
  %164 = trunc i8 %163 to i1
  %165 = load i32, ptr %c, align 4, !dbg !1750
  %lt287 = icmp ult i32 %165, 127, !dbg !1750
  %eq288 = icmp eq i1 %lt287, %164, !dbg !1750
  br i1 %eq288, label %switch.case289, label %next_if298, !dbg !1750

switch.case289:                                   ; preds = %switch.entry286
  %166 = load i32, ptr %c, align 4, !dbg !1752
  %trunc291 = trunc i32 %166 to i8, !dbg !1752
  %167 = load ptr, ptr %self, align 8
  %168 = call i64 @std.io.Formatter.out(ptr %retparam292, ptr %167, i8 %trunc291), !dbg !1752
  %not_err293 = icmp eq i64 %168, 0, !dbg !1752
  %169 = call i1 @llvm.expect.i1(i1 %not_err293, i1 true), !dbg !1752
  br i1 %169, label %after_check295, label %assign_optional294, !dbg !1752

assign_optional294:                               ; preds = %switch.case289
  store i64 %168, ptr %error_var290, align 8, !dbg !1752
  br label %guard_block296, !dbg !1752

after_check295:                                   ; preds = %switch.case289
  br label %noerr_block297, !dbg !1752

guard_block296:                                   ; preds = %assign_optional294
  %170 = load i64, ptr %error_var290, align 8, !dbg !1752
  ret i64 %170, !dbg !1752

noerr_block297:                                   ; preds = %after_check295
  br label %switch.exit, !dbg !1752

next_if298:                                       ; preds = %switch.entry286
  %171 = load i32, ptr %c, align 4, !dbg !1754
  %lt299 = icmp ult i32 %171, 2047, !dbg !1754
  %eq300 = icmp eq i1 %lt299, %164, !dbg !1754
  br i1 %eq300, label %switch.case301, label %next_if319, !dbg !1754

switch.case301:                                   ; preds = %next_if298
  %172 = load i32, ptr %c, align 4, !dbg !1755
  %lshr = lshr i32 %172, 6, !dbg !1755
  %173 = freeze i32 %lshr, !dbg !1755
  %or = or i32 192, %173, !dbg !1755
  %trunc303 = trunc i32 %or to i8, !dbg !1755
  %174 = load ptr, ptr %self, align 8
  %175 = call i64 @std.io.Formatter.out(ptr %retparam304, ptr %174, i8 %trunc303), !dbg !1755
  %not_err305 = icmp eq i64 %175, 0, !dbg !1755
  %176 = call i1 @llvm.expect.i1(i1 %not_err305, i1 true), !dbg !1755
  br i1 %176, label %after_check307, label %assign_optional306, !dbg !1755

assign_optional306:                               ; preds = %switch.case301
  store i64 %175, ptr %error_var302, align 8, !dbg !1755
  br label %guard_block308, !dbg !1755

after_check307:                                   ; preds = %switch.case301
  br label %noerr_block309, !dbg !1755

guard_block308:                                   ; preds = %assign_optional306
  %177 = load i64, ptr %error_var302, align 8, !dbg !1755
  ret i64 %177, !dbg !1755

noerr_block309:                                   ; preds = %after_check307
  %178 = load i32, ptr %c, align 4, !dbg !1757
  %and = and i32 %178, 63, !dbg !1757
  %or311 = or i32 128, %and, !dbg !1757
  %trunc312 = trunc i32 %or311 to i8, !dbg !1757
  %179 = load ptr, ptr %self, align 8
  %180 = call i64 @std.io.Formatter.out(ptr %retparam313, ptr %179, i8 %trunc312), !dbg !1757
  %not_err314 = icmp eq i64 %180, 0, !dbg !1757
  %181 = call i1 @llvm.expect.i1(i1 %not_err314, i1 true), !dbg !1757
  br i1 %181, label %after_check316, label %assign_optional315, !dbg !1757

assign_optional315:                               ; preds = %noerr_block309
  store i64 %180, ptr %error_var310, align 8, !dbg !1757
  br label %guard_block317, !dbg !1757

after_check316:                                   ; preds = %noerr_block309
  br label %noerr_block318, !dbg !1757

guard_block317:                                   ; preds = %assign_optional315
  %182 = load i64, ptr %error_var310, align 8, !dbg !1757
  ret i64 %182, !dbg !1757

noerr_block318:                                   ; preds = %after_check316
  br label %switch.exit, !dbg !1757

next_if319:                                       ; preds = %next_if298
  %183 = load i32, ptr %c, align 4, !dbg !1758
  %lt320 = icmp ult i32 %183, 65535, !dbg !1758
  %eq321 = icmp eq i1 %lt320, %164, !dbg !1758
  br i1 %eq321, label %switch.case322, label %next_if354, !dbg !1758

switch.case322:                                   ; preds = %next_if319
  %184 = load i32, ptr %c, align 4, !dbg !1759
  %lshr324 = lshr i32 %184, 12, !dbg !1759
  %185 = freeze i32 %lshr324, !dbg !1759
  %or325 = or i32 224, %185, !dbg !1759
  %trunc326 = trunc i32 %or325 to i8, !dbg !1759
  %186 = load ptr, ptr %self, align 8
  %187 = call i64 @std.io.Formatter.out(ptr %retparam327, ptr %186, i8 %trunc326), !dbg !1759
  %not_err328 = icmp eq i64 %187, 0, !dbg !1759
  %188 = call i1 @llvm.expect.i1(i1 %not_err328, i1 true), !dbg !1759
  br i1 %188, label %after_check330, label %assign_optional329, !dbg !1759

assign_optional329:                               ; preds = %switch.case322
  store i64 %187, ptr %error_var323, align 8, !dbg !1759
  br label %guard_block331, !dbg !1759

after_check330:                                   ; preds = %switch.case322
  br label %noerr_block332, !dbg !1759

guard_block331:                                   ; preds = %assign_optional329
  %189 = load i64, ptr %error_var323, align 8, !dbg !1759
  ret i64 %189, !dbg !1759

noerr_block332:                                   ; preds = %after_check330
  %190 = load i32, ptr %c, align 4, !dbg !1761
  %lshr334 = lshr i32 %190, 6, !dbg !1761
  %191 = freeze i32 %lshr334, !dbg !1761
  %and335 = and i32 %191, 63, !dbg !1761
  %or336 = or i32 128, %and335, !dbg !1761
  %trunc337 = trunc i32 %or336 to i8, !dbg !1761
  %192 = load ptr, ptr %self, align 8
  %193 = call i64 @std.io.Formatter.out(ptr %retparam338, ptr %192, i8 %trunc337), !dbg !1761
  %not_err339 = icmp eq i64 %193, 0, !dbg !1761
  %194 = call i1 @llvm.expect.i1(i1 %not_err339, i1 true), !dbg !1761
  br i1 %194, label %after_check341, label %assign_optional340, !dbg !1761

assign_optional340:                               ; preds = %noerr_block332
  store i64 %193, ptr %error_var333, align 8, !dbg !1761
  br label %guard_block342, !dbg !1761

after_check341:                                   ; preds = %noerr_block332
  br label %noerr_block343, !dbg !1761

guard_block342:                                   ; preds = %assign_optional340
  %195 = load i64, ptr %error_var333, align 8, !dbg !1761
  ret i64 %195, !dbg !1761

noerr_block343:                                   ; preds = %after_check341
  %196 = load i32, ptr %c, align 4, !dbg !1762
  %and345 = and i32 %196, 63, !dbg !1762
  %or346 = or i32 128, %and345, !dbg !1762
  %trunc347 = trunc i32 %or346 to i8, !dbg !1762
  %197 = load ptr, ptr %self, align 8
  %198 = call i64 @std.io.Formatter.out(ptr %retparam348, ptr %197, i8 %trunc347), !dbg !1762
  %not_err349 = icmp eq i64 %198, 0, !dbg !1762
  %199 = call i1 @llvm.expect.i1(i1 %not_err349, i1 true), !dbg !1762
  br i1 %199, label %after_check351, label %assign_optional350, !dbg !1762

assign_optional350:                               ; preds = %noerr_block343
  store i64 %198, ptr %error_var344, align 8, !dbg !1762
  br label %guard_block352, !dbg !1762

after_check351:                                   ; preds = %noerr_block343
  br label %noerr_block353, !dbg !1762

guard_block352:                                   ; preds = %assign_optional350
  %200 = load i64, ptr %error_var344, align 8, !dbg !1762
  ret i64 %200, !dbg !1762

noerr_block353:                                   ; preds = %after_check351
  br label %switch.exit, !dbg !1762

next_if354:                                       ; preds = %next_if319
  br label %switch.default355, !dbg !1762

switch.default355:                                ; preds = %next_if354
  %201 = load i32, ptr %c, align 4, !dbg !1763
  %lshr357 = lshr i32 %201, 18, !dbg !1763
  %202 = freeze i32 %lshr357, !dbg !1763
  %or358 = or i32 240, %202, !dbg !1763
  %trunc359 = trunc i32 %or358 to i8, !dbg !1763
  %203 = load ptr, ptr %self, align 8
  %204 = call i64 @std.io.Formatter.out(ptr %retparam360, ptr %203, i8 %trunc359), !dbg !1763
  %not_err361 = icmp eq i64 %204, 0, !dbg !1763
  %205 = call i1 @llvm.expect.i1(i1 %not_err361, i1 true), !dbg !1763
  br i1 %205, label %after_check363, label %assign_optional362, !dbg !1763

assign_optional362:                               ; preds = %switch.default355
  store i64 %204, ptr %error_var356, align 8, !dbg !1763
  br label %guard_block364, !dbg !1763

after_check363:                                   ; preds = %switch.default355
  br label %noerr_block365, !dbg !1763

guard_block364:                                   ; preds = %assign_optional362
  %206 = load i64, ptr %error_var356, align 8, !dbg !1763
  ret i64 %206, !dbg !1763

noerr_block365:                                   ; preds = %after_check363
  %207 = load i32, ptr %c, align 4, !dbg !1765
  %lshr367 = lshr i32 %207, 12, !dbg !1765
  %208 = freeze i32 %lshr367, !dbg !1765
  %and368 = and i32 %208, 63, !dbg !1765
  %or369 = or i32 128, %and368, !dbg !1765
  %trunc370 = trunc i32 %or369 to i8, !dbg !1765
  %209 = load ptr, ptr %self, align 8
  %210 = call i64 @std.io.Formatter.out(ptr %retparam371, ptr %209, i8 %trunc370), !dbg !1765
  %not_err372 = icmp eq i64 %210, 0, !dbg !1765
  %211 = call i1 @llvm.expect.i1(i1 %not_err372, i1 true), !dbg !1765
  br i1 %211, label %after_check374, label %assign_optional373, !dbg !1765

assign_optional373:                               ; preds = %noerr_block365
  store i64 %210, ptr %error_var366, align 8, !dbg !1765
  br label %guard_block375, !dbg !1765

after_check374:                                   ; preds = %noerr_block365
  br label %noerr_block376, !dbg !1765

guard_block375:                                   ; preds = %assign_optional373
  %212 = load i64, ptr %error_var366, align 8, !dbg !1765
  ret i64 %212, !dbg !1765

noerr_block376:                                   ; preds = %after_check374
  %213 = load i32, ptr %c, align 4, !dbg !1766
  %lshr378 = lshr i32 %213, 6, !dbg !1766
  %214 = freeze i32 %lshr378, !dbg !1766
  %and379 = and i32 %214, 63, !dbg !1766
  %or380 = or i32 128, %and379, !dbg !1766
  %trunc381 = trunc i32 %or380 to i8, !dbg !1766
  %215 = load ptr, ptr %self, align 8
  %216 = call i64 @std.io.Formatter.out(ptr %retparam382, ptr %215, i8 %trunc381), !dbg !1766
  %not_err383 = icmp eq i64 %216, 0, !dbg !1766
  %217 = call i1 @llvm.expect.i1(i1 %not_err383, i1 true), !dbg !1766
  br i1 %217, label %after_check385, label %assign_optional384, !dbg !1766

assign_optional384:                               ; preds = %noerr_block376
  store i64 %216, ptr %error_var377, align 8, !dbg !1766
  br label %guard_block386, !dbg !1766

after_check385:                                   ; preds = %noerr_block376
  br label %noerr_block387, !dbg !1766

guard_block386:                                   ; preds = %assign_optional384
  %218 = load i64, ptr %error_var377, align 8, !dbg !1766
  ret i64 %218, !dbg !1766

noerr_block387:                                   ; preds = %after_check385
  %219 = load i32, ptr %c, align 4, !dbg !1767
  %and389 = and i32 %219, 63, !dbg !1767
  %or390 = or i32 128, %and389, !dbg !1767
  %trunc391 = trunc i32 %or390 to i8, !dbg !1767
  %220 = load ptr, ptr %self, align 8
  %221 = call i64 @std.io.Formatter.out(ptr %retparam392, ptr %220, i8 %trunc391), !dbg !1767
  %not_err393 = icmp eq i64 %221, 0, !dbg !1767
  %222 = call i1 @llvm.expect.i1(i1 %not_err393, i1 true), !dbg !1767
  br i1 %222, label %after_check395, label %assign_optional394, !dbg !1767

assign_optional394:                               ; preds = %noerr_block387
  store i64 %221, ptr %error_var388, align 8, !dbg !1767
  br label %guard_block396, !dbg !1767

after_check395:                                   ; preds = %noerr_block387
  br label %noerr_block397, !dbg !1767

guard_block396:                                   ; preds = %assign_optional394
  %223 = load i64, ptr %error_var388, align 8, !dbg !1767
  ret i64 %223, !dbg !1767

noerr_block397:                                   ; preds = %after_check395
  br label %switch.exit, !dbg !1767

switch.exit:                                      ; preds = %noerr_block397, %noerr_block353, %noerr_block318, %noerr_block297
  %224 = load i64, ptr %len, align 8, !dbg !1768
  %225 = load i32, ptr %l, align 4, !dbg !1768
  %zext399 = zext i32 %225 to i64, !dbg !1768
  %226 = load ptr, ptr %self, align 8
  %227 = call i64 @std.io.Formatter.adjust(ptr %retparam400, ptr %226, i64 %zext399), !dbg !1768
  %not_err401 = icmp eq i64 %227, 0, !dbg !1768
  %228 = call i1 @llvm.expect.i1(i1 %not_err401, i1 true), !dbg !1768
  br i1 %228, label %after_check403, label %assign_optional402, !dbg !1768

assign_optional402:                               ; preds = %switch.exit
  store i64 %227, ptr %error_var398, align 8, !dbg !1768
  br label %guard_block404, !dbg !1768

after_check403:                                   ; preds = %switch.exit
  br label %noerr_block405, !dbg !1768

guard_block404:                                   ; preds = %assign_optional402
  %229 = load i64, ptr %error_var398, align 8, !dbg !1768
  ret i64 %229, !dbg !1768

noerr_block405:                                   ; preds = %after_check403
  %230 = load i64, ptr %retparam400, align 8, !dbg !1768
  %add406 = add i64 %224, %230, !dbg !1768
  store i64 %add406, ptr %len, align 8, !dbg !1768
  %231 = load i64, ptr %len, align 8, !dbg !1769
  store i64 %231, ptr %0, align 8, !dbg !1769
  ret i64 0, !dbg !1769

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg2, align 8
  %232 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %232(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 607), !dbg !1653
  unreachable, !dbg !1653

panic26:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.84, i64 52 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg29, align 8
  %233 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %233(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 35), !dbg !1684
  unreachable, !dbg !1684

panic42:                                          ; preds = %switch.case40
  store %"char[]" { ptr @.panic_msg.87, i64 53 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg45, align 8
  %234 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %234(ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, i32 39), !dbg !1690
  unreachable, !dbg !1690

panic71:                                          ; preds = %switch.case69
  store %"char[]" { ptr @.panic_msg.88, i64 51 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg74, align 8
  %235 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %235(ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, i32 44), !dbg !1697
  unreachable, !dbg !1697

panic103:                                         ; preds = %switch.case100
  store %"char[]" { ptr @.panic_msg.89, i64 52 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg106, align 8
  %236 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %236(ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, i32 49), !dbg !1704
  unreachable, !dbg !1704

panic137:                                         ; preds = %switch.case134
  store %"char[]" { ptr @.panic_msg.90, i64 54 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg140, align 8
  %237 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %237(ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, i32 54), !dbg !1711
  unreachable, !dbg !1711

panic172:                                         ; preds = %switch.case169
  store %"char[]" { ptr @.panic_msg.84, i64 52 }, ptr %indirectarg173, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg174, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg175, align 8
  %238 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %238(ptr align 8 %indirectarg173, ptr align 8 %indirectarg174, ptr align 8 %indirectarg175, i32 59), !dbg !1718
  unreachable, !dbg !1718

panic192:                                         ; preds = %switch.case189
  store %"char[]" { ptr @.panic_msg.91, i64 54 }, ptr %indirectarg193, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg194, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg195, align 8
  %239 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %239(ptr align 8 %indirectarg193, ptr align 8 %indirectarg194, ptr align 8 %indirectarg195, i32 63), !dbg !1724
  unreachable, !dbg !1724

panic217:                                         ; preds = %switch.case214
  store %"char[]" { ptr @.panic_msg.92, i64 52 }, ptr %indirectarg218, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg219, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg220, align 8
  %240 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %240(ptr align 8 %indirectarg218, ptr align 8 %indirectarg219, ptr align 8 %indirectarg220, i32 67), !dbg !1730
  unreachable, !dbg !1730

panic239:                                         ; preds = %switch.case236
  store %"char[]" { ptr @.panic_msg.93, i64 53 }, ptr %indirectarg240, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg241, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg242, align 8
  %241 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %241(ptr align 8 %indirectarg240, ptr align 8 %indirectarg241, ptr align 8 %indirectarg242, i32 71), !dbg !1736
  unreachable, !dbg !1736

panic264:                                         ; preds = %switch.case261
  store %"char[]" { ptr @.panic_msg.94, i64 55 }, ptr %indirectarg265, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg266, align 8
  store %"char[]" { ptr @.func.187, i64 8 }, ptr %indirectarg267, align 8
  %242 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %242(ptr align 8 %indirectarg265, ptr align 8 %indirectarg266, ptr align 8 %indirectarg267, i32 75), !dbg !1742
  unreachable, !dbg !1742
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.Formatter.out_reverse(ptr %0, ptr %1, ptr align 8 %2) #0 !dbg !1770 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %buffer_start_idx = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var11 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %retparam22 = alloca i64, align 8
  %error_var29 = alloca i64, align 8
  %retparam30 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1771
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1771
  br i1 %4, label %panic, label %checkok, !dbg !1771

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !1772, !DIExpression(), !1773)
    #dbg_declare(ptr %2, !1774, !DIExpression(), !1773)
    #dbg_declare(ptr %n, !1775, !DIExpression(), !1776)
  store i64 0, ptr %n, align 8, !dbg !1776
    #dbg_declare(ptr %buffer_start_idx, !1777, !DIExpression(), !1778)
  %5 = load ptr, ptr %self, align 8, !dbg !1778
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1778
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 16, !dbg !1778
  %6 = load i64, ptr %ptradd3, align 8, !dbg !1778
  store i64 %6, ptr %buffer_start_idx, align 8, !dbg !1778
    #dbg_declare(ptr %len, !1779, !DIExpression(), !1780)
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1780
  %7 = load i64, ptr %ptradd4, align 8, !dbg !1780
  store i64 %7, ptr %len, align 8, !dbg !1780
  %8 = load ptr, ptr %self, align 8, !dbg !1781
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1781
  %9 = load i32, ptr %ptradd5, align 8, !dbg !1781
  %10 = and i32 1, %9, !dbg !1781
  %trunc = trunc i32 %10 to i8, !dbg !1781
  %11 = trunc i8 %trunc to i1, !dbg !1781
  %not = xor i1 %11, true, !dbg !1781
  br i1 %not, label %and.rhs, label %and.phi, !dbg !1781

and.rhs:                                          ; preds = %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !1781
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1781
  %13 = load i32, ptr %ptradd6, align 8, !dbg !1781
  %lshrl = lshr i32 %13, 1, !dbg !1781
  %14 = and i32 1, %lshrl, !dbg !1781
  %trunc7 = trunc i32 %14 to i8, !dbg !1781
  %15 = trunc i8 %trunc7 to i1, !dbg !1781
  %not8 = xor i1 %15, true, !dbg !1781
  br label %and.phi, !dbg !1781

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %not8, %and.rhs ], !dbg !1781
  br i1 %val, label %if.then, label %if.exit, !dbg !1781

if.then:                                          ; preds = %and.phi
  %16 = load i64, ptr %n, align 8, !dbg !1782
  %17 = load ptr, ptr %self, align 8, !dbg !1782
  %ptradd9 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1782
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 4, !dbg !1782
  %18 = load i32, ptr %ptradd10, align 4, !dbg !1782
  %zext = zext i32 %18 to i64, !dbg !1782
  %19 = load i64, ptr %len, align 8, !dbg !1782
  %20 = load ptr, ptr %self, align 8
  %21 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %20, i8 32, i64 %zext, i64 %19) #5, !dbg !1782
  %not_err = icmp eq i64 %21, 0, !dbg !1782
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1782
  br i1 %22, label %after_check, label %assign_optional, !dbg !1782

assign_optional:                                  ; preds = %if.then
  store i64 %21, ptr %error_var, align 8, !dbg !1782
  br label %guard_block, !dbg !1782

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !1782

guard_block:                                      ; preds = %assign_optional
  %23 = load i64, ptr %error_var, align 8, !dbg !1782
  ret i64 %23, !dbg !1782

noerr_block:                                      ; preds = %after_check
  %24 = load i64, ptr %retparam, align 8, !dbg !1782
  %add = add i64 %16, %24, !dbg !1782
  store i64 %add, ptr %n, align 8, !dbg !1782
  br label %if.exit, !dbg !1782

if.exit:                                          ; preds = %noerr_block, %and.phi
  br label %loop.cond, !dbg !1784

loop.cond:                                        ; preds = %noerr_block27, %if.exit
  %25 = load i64, ptr %len, align 8, !dbg !1785
  %i2b = icmp ne i64 %25, 0, !dbg !1785
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !1785

loop.body:                                        ; preds = %loop.cond
  %26 = load i64, ptr %n, align 8, !dbg !1785
  %ptradd12 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !1785
  %27 = load i64, ptr %ptradd12, align 8, !dbg !1785
  %28 = load ptr, ptr %2, align 8, !dbg !1785
  %29 = load i64, ptr %len, align 8, !dbg !1785
  %sub = sub i64 %29, 1, !dbg !1785
  store i64 %sub, ptr %len, align 8, !dbg !1785
  %ge = icmp uge i64 %sub, %27, !dbg !1785
  %30 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1785
  br i1 %30, label %panic13, label %checkok20, !dbg !1785

checkok20:                                        ; preds = %loop.body
  %ptradd21 = getelementptr inbounds i8, ptr %28, i64 %sub, !dbg !1785
  %31 = load ptr, ptr %self, align 8
  %32 = load i8, ptr %ptradd21, align 1
  %33 = call i64 @std.io.Formatter.out(ptr %retparam22, ptr %31, i8 %32), !dbg !1785
  %not_err23 = icmp eq i64 %33, 0, !dbg !1785
  %34 = call i1 @llvm.expect.i1(i1 %not_err23, i1 true), !dbg !1785
  br i1 %34, label %after_check25, label %assign_optional24, !dbg !1785

assign_optional24:                                ; preds = %checkok20
  store i64 %33, ptr %error_var11, align 8, !dbg !1785
  br label %guard_block26, !dbg !1785

after_check25:                                    ; preds = %checkok20
  br label %noerr_block27, !dbg !1785

guard_block26:                                    ; preds = %assign_optional24
  %35 = load i64, ptr %error_var11, align 8, !dbg !1785
  ret i64 %35, !dbg !1785

noerr_block27:                                    ; preds = %after_check25
  %36 = load i64, ptr %retparam22, align 8, !dbg !1785
  %add28 = add i64 %26, %36, !dbg !1785
  store i64 %add28, ptr %n, align 8, !dbg !1785
  br label %loop.cond, !dbg !1785

loop.exit:                                        ; preds = %loop.cond
  %37 = load i64, ptr %n, align 8, !dbg !1787
  %38 = load ptr, ptr %self, align 8
  %39 = load i64, ptr %n, align 8
  %40 = call i64 @std.io.Formatter.adjust(ptr %retparam30, ptr %38, i64 %39), !dbg !1787
  %not_err31 = icmp eq i64 %40, 0, !dbg !1787
  %41 = call i1 @llvm.expect.i1(i1 %not_err31, i1 true), !dbg !1787
  br i1 %41, label %after_check33, label %assign_optional32, !dbg !1787

assign_optional32:                                ; preds = %loop.exit
  store i64 %40, ptr %error_var29, align 8, !dbg !1787
  br label %guard_block34, !dbg !1787

after_check33:                                    ; preds = %loop.exit
  br label %noerr_block35, !dbg !1787

guard_block34:                                    ; preds = %assign_optional32
  %42 = load i64, ptr %error_var29, align 8, !dbg !1787
  ret i64 %42, !dbg !1787

noerr_block35:                                    ; preds = %after_check33
  %43 = load i64, ptr %retparam30, align 8, !dbg !1787
  %add36 = add i64 %37, %43, !dbg !1787
  store i64 %add36, ptr %n, align 8, !dbg !1787
  %44 = load i64, ptr %n, align 8, !dbg !1788
  store i64 %44, ptr %0, align 8, !dbg !1788
  ret i64 0, !dbg !1788

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.192, i64 11 }, ptr %indirectarg2, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 641), !dbg !1773
  unreachable, !dbg !1773

panic13:                                          ; preds = %loop.body
  store i64 %27, ptr %taddr, align 8
  %46 = insertvalue %any undef, ptr %taddr, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr14, align 8
  %48 = insertvalue %any undef, ptr %taddr14, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.192, i64 11 }, ptr %indirectarg17, align 8
  store %any %47, ptr %varargslots, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %49, ptr %ptradd18, align 16
  %50 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %50, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 652, ptr align 8 %indirectarg19), !dbg !1785
  unreachable, !dbg !1785
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.int_from_any(ptr %0, ptr align 8 %1, ptr %2) #0 !dbg !1789 {
entry:
  %is_neg = alloca ptr, align 8
  %switch = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %reterr10 = alloca i64, align 8
  %self = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %retparam = alloca i128, align 16
  %indirectarg44 = alloca %any, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %switch52 = alloca i64, align 8
  %arg = alloca ptr, align 8
  %reterr57 = alloca i64, align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %arg72 = alloca ptr, align 8
  %val = alloca i32, align 4
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %reterr79 = alloca i64, align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %arg97 = alloca ptr, align 8
  %val98 = alloca i32, align 4
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %reterr106 = alloca i64, align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %indirectarg111 = alloca %"char[]", align 8
  %arg130 = alloca ptr, align 8
  %val131 = alloca i32, align 4
  %indirectarg134 = alloca %"char[]", align 8
  %indirectarg135 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %reterr138 = alloca i64, align 8
  %indirectarg141 = alloca %"char[]", align 8
  %indirectarg142 = alloca %"char[]", align 8
  %indirectarg143 = alloca %"char[]", align 8
  %arg162 = alloca ptr, align 8
  %val163 = alloca i64, align 8
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg167 = alloca %"char[]", align 8
  %indirectarg168 = alloca %"char[]", align 8
  %reterr170 = alloca i64, align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %arg194 = alloca ptr, align 8
  %val195 = alloca i128, align 16
  %indirectarg198 = alloca %"char[]", align 8
  %indirectarg199 = alloca %"char[]", align 8
  %indirectarg200 = alloca %"char[]", align 8
  %reterr202 = alloca i64, align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %arg224 = alloca ptr, align 8
  %reterr225 = alloca i64, align 8
  %indirectarg228 = alloca %"char[]", align 8
  %indirectarg229 = alloca %"char[]", align 8
  %indirectarg230 = alloca %"char[]", align 8
  %arg241 = alloca ptr, align 8
  %reterr242 = alloca i64, align 8
  %indirectarg245 = alloca %"char[]", align 8
  %indirectarg246 = alloca %"char[]", align 8
  %indirectarg247 = alloca %"char[]", align 8
  %arg258 = alloca ptr, align 8
  %reterr259 = alloca i64, align 8
  %indirectarg262 = alloca %"char[]", align 8
  %indirectarg263 = alloca %"char[]", align 8
  %indirectarg264 = alloca %"char[]", align 8
  %arg275 = alloca ptr, align 8
  %reterr276 = alloca i64, align 8
  %indirectarg279 = alloca %"char[]", align 8
  %indirectarg280 = alloca %"char[]", align 8
  %indirectarg281 = alloca %"char[]", align 8
  %arg292 = alloca ptr, align 8
  %reterr293 = alloca i64, align 8
  %indirectarg296 = alloca %"char[]", align 8
  %indirectarg297 = alloca %"char[]", align 8
  %indirectarg298 = alloca %"char[]", align 8
  %arg308 = alloca ptr, align 8
  %f = alloca float, align 4
  %indirectarg311 = alloca %"char[]", align 8
  %indirectarg312 = alloca %"char[]", align 8
  %indirectarg313 = alloca %"char[]", align 8
  %reterr315 = alloca i64, align 8
  %indirectarg318 = alloca %"char[]", align 8
  %indirectarg319 = alloca %"char[]", align 8
  %indirectarg320 = alloca %"char[]", align 8
  %arg335 = alloca ptr, align 8
  %d = alloca double, align 8
  %indirectarg338 = alloca %"char[]", align 8
  %indirectarg339 = alloca %"char[]", align 8
  %indirectarg340 = alloca %"char[]", align 8
  %reterr342 = alloca i64, align 8
  %indirectarg345 = alloca %"char[]", align 8
  %indirectarg346 = alloca %"char[]", align 8
  %indirectarg347 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !1794, !DIExpression(), !1795)
  store ptr %2, ptr %is_neg, align 8
    #dbg_declare(ptr %is_neg, !1796, !DIExpression(), !1795)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1797
  %3 = load i64, ptr %ptradd, align 8, !dbg !1797
  %"introspect*" = inttoptr i64 %3 to ptr, !dbg !1797
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1797
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %4 = load i8, ptr %switch, align 1
  switch i8 %4, label %switch.default [
    i8 19, label %switch.case
    i8 18, label %switch.case9
    i8 8, label %switch.case9
  ]

switch.case:                                      ; preds = %switch.entry
  %5 = load ptr, ptr %is_neg, align 8, !dbg !1799
  %checknull = icmp eq ptr %5, null, !dbg !1799
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1799
  br i1 %6, label %panic, label %checkok, !dbg !1799

checkok:                                          ; preds = %switch.case
  store i8 0, ptr %5, align 1, !dbg !1799
  %7 = load ptr, ptr %1, align 8, !dbg !1801
  %checknull3 = icmp eq ptr %7, null, !dbg !1801
  %8 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !1801
  br i1 %8, label %panic4, label %checkok8, !dbg !1801

checkok8:                                         ; preds = %checkok
  %9 = load ptr, ptr %7, align 8, !dbg !1801
  %ptrxi = ptrtoint ptr %9 to i64, !dbg !1801
  %zext = zext i64 %ptrxi to i128, !dbg !1801
  store i128 %zext, ptr %0, align 16, !dbg !1801
  ret i64 0, !dbg !1801

switch.case9:                                     ; preds = %switch.entry, %switch.entry
  store ptr %1, ptr %self, align 8
  %10 = load ptr, ptr %self, align 8, !dbg !1802
  %checknull11 = icmp eq ptr %10, null, !dbg !1802
  %11 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !1802
  br i1 %11, label %panic12, label %checkok16, !dbg !1802

checkok16:                                        ; preds = %switch.case9
  %12 = load ptr, ptr %10, align 8, !dbg !1802
  %13 = load ptr, ptr %self, align 8, !dbg !1802
  %checknull17 = icmp eq ptr %13, null, !dbg !1802
  %14 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !1802
  br i1 %14, label %panic18, label %checkok22, !dbg !1802

checkok22:                                        ; preds = %checkok16
  %ptradd23 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1802
  %15 = load i64, ptr %ptradd23, align 8, !dbg !1802
  %"introspect*24" = inttoptr i64 %15 to ptr, !dbg !1802
  %typeid.kind25 = load i8, ptr %"introspect*24", align 8, !dbg !1802
  %eq = icmp eq i8 %typeid.kind25, 15, !dbg !1802
  br i1 %eq, label %check_type_ok, label %check_next, !dbg !1802

check_next:                                       ; preds = %checkok22
  %eq26 = icmp eq i8 %typeid.kind25, 19, !dbg !1802
  br i1 %eq26, label %check_type_ok, label %check_next27, !dbg !1802

check_next27:                                     ; preds = %check_next
  %eq28 = icmp eq i8 %typeid.kind25, 17, !dbg !1802
  br i1 %eq28, label %check_type_ok, label %check_next29, !dbg !1802

check_next29:                                     ; preds = %check_next27
  %eq30 = icmp eq i8 %typeid.kind25, 8, !dbg !1802
  br i1 %eq30, label %check_type_ok, label %check_next31, !dbg !1802

check_next31:                                     ; preds = %check_next29
  %eq32 = icmp eq i8 %typeid.kind25, 16, !dbg !1802
  br i1 %eq32, label %check_type_ok, label %check_next33, !dbg !1802

check_next33:                                     ; preds = %check_next31
  %eq34 = icmp eq i8 %typeid.kind25, 18, !dbg !1802
  br i1 %eq34, label %check_type_ok, label %check_next35, !dbg !1802

check_next35:                                     ; preds = %check_next33
  %eq36 = icmp eq i8 %typeid.kind25, 14, !dbg !1802
  br i1 %eq36, label %check_type_ok, label %check_next37, !dbg !1802

check_next37:                                     ; preds = %check_next35
  %eq38 = icmp eq i8 %typeid.kind25, 12, !dbg !1802
  br i1 %eq38, label %check_type_ok, label %check_next39, !dbg !1802

check_next39:                                     ; preds = %check_next37
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg42, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 199), !dbg !1802
  unreachable, !dbg !1802

check_type_ok:                                    ; preds = %check_next37, %check_next35, %check_next33, %check_next31, %check_next29, %check_next27, %check_next, %checkok22
  %ptradd43 = getelementptr inbounds i8, ptr %"introspect*24", i64 32, !dbg !1802
  %typeid.inner = load i64, ptr %ptradd43, align 8, !dbg !1802
  %17 = insertvalue %any undef, ptr %12, 0, !dbg !1802
  %18 = insertvalue %any %17, i64 %typeid.inner, 1, !dbg !1802
  store %any %18, ptr %indirectarg44, align 8
  %19 = load ptr, ptr %is_neg, align 8
  %20 = call i64 @std.io.int_from_any(ptr %retparam, ptr align 8 %indirectarg44, ptr %19), !dbg !1804
  %not_err = icmp eq i64 %20, 0, !dbg !1804
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1804
  br i1 %21, label %after_check, label %assign_optional, !dbg !1804

assign_optional:                                  ; preds = %check_type_ok
  store i64 %20, ptr %reterr10, align 8, !dbg !1804
  br label %err_retblock, !dbg !1804

after_check:                                      ; preds = %check_type_ok
  %22 = load i128, ptr %retparam, align 16, !dbg !1804
  store i128 %22, ptr %0, align 16, !dbg !1804
  ret i64 0, !dbg !1804

err_retblock:                                     ; preds = %assign_optional
  %23 = load i64, ptr %reterr10, align 8, !dbg !1804
  ret i64 %23, !dbg !1804

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1806

switch.exit:                                      ; preds = %switch.default
  %24 = load ptr, ptr %is_neg, align 8, !dbg !1808
  %checknull45 = icmp eq ptr %24, null, !dbg !1808
  %25 = call i1 @llvm.expect.i1(i1 %checknull45, i1 false), !dbg !1808
  br i1 %25, label %panic46, label %checkok50, !dbg !1808

checkok50:                                        ; preds = %switch.exit
  store i8 0, ptr %24, align 1, !dbg !1808
  %ptradd51 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1809
  %26 = load i64, ptr %ptradd51, align 8
  store i64 %26, ptr %switch52, align 8
  br label %switch.entry53

switch.entry53:                                   ; preds = %checkok50
  %27 = load i64, ptr %switch52, align 8
  br label %check_subtype, !dbg !1811

check_subtype:                                    ; preds = %parent_type_block, %switch.entry53
  %28 = phi i64 [ %27, %switch.entry53 ], [ %typeid.parent, %parent_type_block ], !dbg !1811
  %eq54 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %28, !dbg !1811
  br i1 %eq54, label %result_block, label %parent_type_block, !dbg !1811

parent_type_block:                                ; preds = %check_subtype
  %29 = inttoptr i64 %28 to ptr, !dbg !1811
  %ptradd55 = getelementptr inbounds i8, ptr %29, i64 8, !dbg !1811
  %typeid.parent = load i64, ptr %ptradd55, align 8, !dbg !1811
  %30 = icmp eq i64 %typeid.parent, 0, !dbg !1811
  br i1 %30, label %result_block, label %check_subtype, !dbg !1811

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %31 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1811
  br i1 %31, label %switch.case56, label %next_if, !dbg !1811

switch.case56:                                    ; preds = %result_block
    #dbg_declare(ptr %arg, !1812, !DIExpression(), !1814)
  %32 = load ptr, ptr %1, align 8, !dbg !1814
  store ptr %32, ptr %arg, align 8, !dbg !1814
  %33 = load ptr, ptr %arg, align 8, !dbg !1815
  %checknull58 = icmp eq ptr %33, null, !dbg !1815
  %34 = call i1 @llvm.expect.i1(i1 %checknull58, i1 false), !dbg !1815
  br i1 %34, label %panic59, label %checkok63, !dbg !1815

checkok63:                                        ; preds = %switch.case56
  %35 = load i8, ptr %33, align 1, !dbg !1815
  %36 = trunc i8 %35 to i1, !dbg !1815
  %zext64 = zext i1 %36 to i128, !dbg !1815
  store i128 %zext64, ptr %0, align 16, !dbg !1815
  ret i64 0, !dbg !1815

next_if:                                          ; preds = %result_block
  br label %check_subtype65, !dbg !1816

check_subtype65:                                  ; preds = %parent_type_block67, %next_if
  %37 = phi i64 [ %27, %next_if ], [ %typeid.parent69, %parent_type_block67 ], !dbg !1816
  %eq66 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %37, !dbg !1816
  br i1 %eq66, label %result_block70, label %parent_type_block67, !dbg !1816

parent_type_block67:                              ; preds = %check_subtype65
  %38 = inttoptr i64 %37 to ptr, !dbg !1816
  %ptradd68 = getelementptr inbounds i8, ptr %38, i64 8, !dbg !1816
  %typeid.parent69 = load i64, ptr %ptradd68, align 8, !dbg !1816
  %39 = icmp eq i64 %typeid.parent69, 0, !dbg !1816
  br i1 %39, label %result_block70, label %check_subtype65, !dbg !1816

result_block70:                                   ; preds = %parent_type_block67, %check_subtype65
  %40 = phi i1 [ false, %parent_type_block67 ], [ true, %check_subtype65 ], !dbg !1816
  br i1 %40, label %switch.case71, label %next_if89, !dbg !1816

switch.case71:                                    ; preds = %result_block70
    #dbg_declare(ptr %arg72, !1817, !DIExpression(), !1820)
  %41 = load ptr, ptr %1, align 8, !dbg !1820
  store ptr %41, ptr %arg72, align 8, !dbg !1820
    #dbg_declare(ptr %val, !1821, !DIExpression(), !1822)
  %42 = load ptr, ptr %arg72, align 8, !dbg !1822
  %checknull73 = icmp eq ptr %42, null, !dbg !1822
  %43 = call i1 @llvm.expect.i1(i1 %checknull73, i1 false), !dbg !1822
  br i1 %43, label %panic74, label %checkok78, !dbg !1822

checkok78:                                        ; preds = %switch.case71
  %44 = load i8, ptr %42, align 1, !dbg !1822
  %sext = sext i8 %44 to i32, !dbg !1822
  store i32 %sext, ptr %val, align 4, !dbg !1822
  %45 = load ptr, ptr %is_neg, align 8, !dbg !1823
  %checknull80 = icmp eq ptr %45, null, !dbg !1823
  %46 = call i1 @llvm.expect.i1(i1 %checknull80, i1 false), !dbg !1823
  br i1 %46, label %panic81, label %checkok85, !dbg !1823

checkok85:                                        ; preds = %checkok78
  %47 = load i32, ptr %val, align 4, !dbg !1823
  %lt = icmp slt i32 %47, 0, !dbg !1823
  %48 = zext i1 %lt to i8, !dbg !1823
  store i8 %48, ptr %45, align 1, !dbg !1823
  %49 = trunc i8 %48 to i1, !dbg !1823
  br i1 %49, label %cond.lhs, label %cond.rhs, !dbg !1823

cond.lhs:                                         ; preds = %checkok85
  %50 = load i32, ptr %val, align 4, !dbg !1823
  %sext86 = sext i32 %50 to i128, !dbg !1823
  %bnot = xor i128 %sext86, -1, !dbg !1823
  %add = add i128 %bnot, 1, !dbg !1823
  br label %cond.phi, !dbg !1823

cond.rhs:                                         ; preds = %checkok85
  %51 = load i32, ptr %val, align 4, !dbg !1823
  %sext87 = sext i32 %51 to i128, !dbg !1823
  br label %cond.phi, !dbg !1823

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val88 = phi i128 [ %add, %cond.lhs ], [ %sext87, %cond.rhs ], !dbg !1823
  store i128 %val88, ptr %0, align 16, !dbg !1823
  ret i64 0, !dbg !1823

next_if89:                                        ; preds = %result_block70
  br label %check_subtype90, !dbg !1824

check_subtype90:                                  ; preds = %parent_type_block92, %next_if89
  %52 = phi i64 [ %27, %next_if89 ], [ %typeid.parent94, %parent_type_block92 ], !dbg !1824
  %eq91 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %52, !dbg !1824
  br i1 %eq91, label %result_block95, label %parent_type_block92, !dbg !1824

parent_type_block92:                              ; preds = %check_subtype90
  %53 = inttoptr i64 %52 to ptr, !dbg !1824
  %ptradd93 = getelementptr inbounds i8, ptr %53, i64 8, !dbg !1824
  %typeid.parent94 = load i64, ptr %ptradd93, align 8, !dbg !1824
  %54 = icmp eq i64 %typeid.parent94, 0, !dbg !1824
  br i1 %54, label %result_block95, label %check_subtype90, !dbg !1824

result_block95:                                   ; preds = %parent_type_block92, %check_subtype90
  %55 = phi i1 [ false, %parent_type_block92 ], [ true, %check_subtype90 ], !dbg !1824
  br i1 %55, label %switch.case96, label %next_if122, !dbg !1824

switch.case96:                                    ; preds = %result_block95
    #dbg_declare(ptr %arg97, !1825, !DIExpression(), !1828)
  %56 = load ptr, ptr %1, align 8, !dbg !1828
  store ptr %56, ptr %arg97, align 8, !dbg !1828
    #dbg_declare(ptr %val98, !1829, !DIExpression(), !1830)
  %57 = load ptr, ptr %arg97, align 8, !dbg !1830
  %checknull99 = icmp eq ptr %57, null, !dbg !1830
  %58 = call i1 @llvm.expect.i1(i1 %checknull99, i1 false), !dbg !1830
  br i1 %58, label %panic100, label %checkok104, !dbg !1830

checkok104:                                       ; preds = %switch.case96
  %59 = load i16, ptr %57, align 2, !dbg !1830
  %sext105 = sext i16 %59 to i32, !dbg !1830
  store i32 %sext105, ptr %val98, align 4, !dbg !1830
  %60 = load ptr, ptr %is_neg, align 8, !dbg !1831
  %checknull107 = icmp eq ptr %60, null, !dbg !1831
  %61 = call i1 @llvm.expect.i1(i1 %checknull107, i1 false), !dbg !1831
  br i1 %61, label %panic108, label %checkok112, !dbg !1831

checkok112:                                       ; preds = %checkok104
  %62 = load i32, ptr %val98, align 4, !dbg !1831
  %lt113 = icmp slt i32 %62, 0, !dbg !1831
  %63 = zext i1 %lt113 to i8, !dbg !1831
  store i8 %63, ptr %60, align 1, !dbg !1831
  %64 = trunc i8 %63 to i1, !dbg !1831
  br i1 %64, label %cond.lhs114, label %cond.rhs118, !dbg !1831

cond.lhs114:                                      ; preds = %checkok112
  %65 = load i32, ptr %val98, align 4, !dbg !1831
  %sext115 = sext i32 %65 to i128, !dbg !1831
  %bnot116 = xor i128 %sext115, -1, !dbg !1831
  %add117 = add i128 %bnot116, 1, !dbg !1831
  br label %cond.phi120, !dbg !1831

cond.rhs118:                                      ; preds = %checkok112
  %66 = load i32, ptr %val98, align 4, !dbg !1831
  %sext119 = sext i32 %66 to i128, !dbg !1831
  br label %cond.phi120, !dbg !1831

cond.phi120:                                      ; preds = %cond.rhs118, %cond.lhs114
  %val121 = phi i128 [ %add117, %cond.lhs114 ], [ %sext119, %cond.rhs118 ], !dbg !1831
  store i128 %val121, ptr %0, align 16, !dbg !1831
  ret i64 0, !dbg !1831

next_if122:                                       ; preds = %result_block95
  br label %check_subtype123, !dbg !1832

check_subtype123:                                 ; preds = %parent_type_block125, %next_if122
  %67 = phi i64 [ %27, %next_if122 ], [ %typeid.parent127, %parent_type_block125 ], !dbg !1832
  %eq124 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %67, !dbg !1832
  br i1 %eq124, label %result_block128, label %parent_type_block125, !dbg !1832

parent_type_block125:                             ; preds = %check_subtype123
  %68 = inttoptr i64 %67 to ptr, !dbg !1832
  %ptradd126 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !1832
  %typeid.parent127 = load i64, ptr %ptradd126, align 8, !dbg !1832
  %69 = icmp eq i64 %typeid.parent127, 0, !dbg !1832
  br i1 %69, label %result_block128, label %check_subtype123, !dbg !1832

result_block128:                                  ; preds = %parent_type_block125, %check_subtype123
  %70 = phi i1 [ false, %parent_type_block125 ], [ true, %check_subtype123 ], !dbg !1832
  br i1 %70, label %switch.case129, label %next_if154, !dbg !1832

switch.case129:                                   ; preds = %result_block128
    #dbg_declare(ptr %arg130, !1833, !DIExpression(), !1836)
  %71 = load ptr, ptr %1, align 8, !dbg !1836
  store ptr %71, ptr %arg130, align 8, !dbg !1836
    #dbg_declare(ptr %val131, !1837, !DIExpression(), !1838)
  %72 = load ptr, ptr %arg130, align 8, !dbg !1838
  %checknull132 = icmp eq ptr %72, null, !dbg !1838
  %73 = call i1 @llvm.expect.i1(i1 %checknull132, i1 false), !dbg !1838
  br i1 %73, label %panic133, label %checkok137, !dbg !1838

checkok137:                                       ; preds = %switch.case129
  %74 = load i32, ptr %72, align 4, !dbg !1838
  store i32 %74, ptr %val131, align 4, !dbg !1838
  %75 = load ptr, ptr %is_neg, align 8, !dbg !1839
  %checknull139 = icmp eq ptr %75, null, !dbg !1839
  %76 = call i1 @llvm.expect.i1(i1 %checknull139, i1 false), !dbg !1839
  br i1 %76, label %panic140, label %checkok144, !dbg !1839

checkok144:                                       ; preds = %checkok137
  %77 = load i32, ptr %val131, align 4, !dbg !1839
  %lt145 = icmp slt i32 %77, 0, !dbg !1839
  %78 = zext i1 %lt145 to i8, !dbg !1839
  store i8 %78, ptr %75, align 1, !dbg !1839
  %79 = trunc i8 %78 to i1, !dbg !1839
  br i1 %79, label %cond.lhs146, label %cond.rhs150, !dbg !1839

cond.lhs146:                                      ; preds = %checkok144
  %80 = load i32, ptr %val131, align 4, !dbg !1839
  %sext147 = sext i32 %80 to i128, !dbg !1839
  %bnot148 = xor i128 %sext147, -1, !dbg !1839
  %add149 = add i128 %bnot148, 1, !dbg !1839
  br label %cond.phi152, !dbg !1839

cond.rhs150:                                      ; preds = %checkok144
  %81 = load i32, ptr %val131, align 4, !dbg !1839
  %sext151 = sext i32 %81 to i128, !dbg !1839
  br label %cond.phi152, !dbg !1839

cond.phi152:                                      ; preds = %cond.rhs150, %cond.lhs146
  %val153 = phi i128 [ %add149, %cond.lhs146 ], [ %sext151, %cond.rhs150 ], !dbg !1839
  store i128 %val153, ptr %0, align 16, !dbg !1839
  ret i64 0, !dbg !1839

next_if154:                                       ; preds = %result_block128
  br label %check_subtype155, !dbg !1840

check_subtype155:                                 ; preds = %parent_type_block157, %next_if154
  %82 = phi i64 [ %27, %next_if154 ], [ %typeid.parent159, %parent_type_block157 ], !dbg !1840
  %eq156 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %82, !dbg !1840
  br i1 %eq156, label %result_block160, label %parent_type_block157, !dbg !1840

parent_type_block157:                             ; preds = %check_subtype155
  %83 = inttoptr i64 %82 to ptr, !dbg !1840
  %ptradd158 = getelementptr inbounds i8, ptr %83, i64 8, !dbg !1840
  %typeid.parent159 = load i64, ptr %ptradd158, align 8, !dbg !1840
  %84 = icmp eq i64 %typeid.parent159, 0, !dbg !1840
  br i1 %84, label %result_block160, label %check_subtype155, !dbg !1840

result_block160:                                  ; preds = %parent_type_block157, %check_subtype155
  %85 = phi i1 [ false, %parent_type_block157 ], [ true, %check_subtype155 ], !dbg !1840
  br i1 %85, label %switch.case161, label %next_if186, !dbg !1840

switch.case161:                                   ; preds = %result_block160
    #dbg_declare(ptr %arg162, !1841, !DIExpression(), !1844)
  %86 = load ptr, ptr %1, align 8, !dbg !1844
  store ptr %86, ptr %arg162, align 8, !dbg !1844
    #dbg_declare(ptr %val163, !1845, !DIExpression(), !1846)
  %87 = load ptr, ptr %arg162, align 8, !dbg !1846
  %checknull164 = icmp eq ptr %87, null, !dbg !1846
  %88 = call i1 @llvm.expect.i1(i1 %checknull164, i1 false), !dbg !1846
  br i1 %88, label %panic165, label %checkok169, !dbg !1846

checkok169:                                       ; preds = %switch.case161
  %89 = load i64, ptr %87, align 8, !dbg !1846
  store i64 %89, ptr %val163, align 8, !dbg !1846
  %90 = load ptr, ptr %is_neg, align 8, !dbg !1847
  %checknull171 = icmp eq ptr %90, null, !dbg !1847
  %91 = call i1 @llvm.expect.i1(i1 %checknull171, i1 false), !dbg !1847
  br i1 %91, label %panic172, label %checkok176, !dbg !1847

checkok176:                                       ; preds = %checkok169
  %92 = load i64, ptr %val163, align 8, !dbg !1847
  %lt177 = icmp slt i64 %92, 0, !dbg !1847
  %93 = zext i1 %lt177 to i8, !dbg !1847
  store i8 %93, ptr %90, align 1, !dbg !1847
  %94 = trunc i8 %93 to i1, !dbg !1847
  br i1 %94, label %cond.lhs178, label %cond.rhs182, !dbg !1847

cond.lhs178:                                      ; preds = %checkok176
  %95 = load i64, ptr %val163, align 8, !dbg !1847
  %sext179 = sext i64 %95 to i128, !dbg !1847
  %bnot180 = xor i128 %sext179, -1, !dbg !1847
  %add181 = add i128 %bnot180, 1, !dbg !1847
  br label %cond.phi184, !dbg !1847

cond.rhs182:                                      ; preds = %checkok176
  %96 = load i64, ptr %val163, align 8, !dbg !1847
  %sext183 = sext i64 %96 to i128, !dbg !1847
  br label %cond.phi184, !dbg !1847

cond.phi184:                                      ; preds = %cond.rhs182, %cond.lhs178
  %val185 = phi i128 [ %add181, %cond.lhs178 ], [ %sext183, %cond.rhs182 ], !dbg !1847
  store i128 %val185, ptr %0, align 16, !dbg !1847
  ret i64 0, !dbg !1847

next_if186:                                       ; preds = %result_block160
  br label %check_subtype187, !dbg !1848

check_subtype187:                                 ; preds = %parent_type_block189, %next_if186
  %97 = phi i64 [ %27, %next_if186 ], [ %typeid.parent191, %parent_type_block189 ], !dbg !1848
  %eq188 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %97, !dbg !1848
  br i1 %eq188, label %result_block192, label %parent_type_block189, !dbg !1848

parent_type_block189:                             ; preds = %check_subtype187
  %98 = inttoptr i64 %97 to ptr, !dbg !1848
  %ptradd190 = getelementptr inbounds i8, ptr %98, i64 8, !dbg !1848
  %typeid.parent191 = load i64, ptr %ptradd190, align 8, !dbg !1848
  %99 = icmp eq i64 %typeid.parent191, 0, !dbg !1848
  br i1 %99, label %result_block192, label %check_subtype187, !dbg !1848

result_block192:                                  ; preds = %parent_type_block189, %check_subtype187
  %100 = phi i1 [ false, %parent_type_block189 ], [ true, %check_subtype187 ], !dbg !1848
  br i1 %100, label %switch.case193, label %next_if216, !dbg !1848

switch.case193:                                   ; preds = %result_block192
    #dbg_declare(ptr %arg194, !1849, !DIExpression(), !1852)
  %101 = load ptr, ptr %1, align 8, !dbg !1852
  store ptr %101, ptr %arg194, align 8, !dbg !1852
    #dbg_declare(ptr %val195, !1853, !DIExpression(), !1854)
  %102 = load ptr, ptr %arg194, align 8, !dbg !1854
  %checknull196 = icmp eq ptr %102, null, !dbg !1854
  %103 = call i1 @llvm.expect.i1(i1 %checknull196, i1 false), !dbg !1854
  br i1 %103, label %panic197, label %checkok201, !dbg !1854

checkok201:                                       ; preds = %switch.case193
  %104 = load i128, ptr %102, align 16, !dbg !1854
  store i128 %104, ptr %val195, align 16, !dbg !1854
  %105 = load ptr, ptr %is_neg, align 8, !dbg !1855
  %checknull203 = icmp eq ptr %105, null, !dbg !1855
  %106 = call i1 @llvm.expect.i1(i1 %checknull203, i1 false), !dbg !1855
  br i1 %106, label %panic204, label %checkok208, !dbg !1855

checkok208:                                       ; preds = %checkok201
  %107 = load i128, ptr %val195, align 16, !dbg !1855
  %lt209 = icmp slt i128 %107, 0, !dbg !1855
  %108 = zext i1 %lt209 to i8, !dbg !1855
  store i8 %108, ptr %105, align 1, !dbg !1855
  %109 = trunc i8 %108 to i1, !dbg !1855
  br i1 %109, label %cond.lhs210, label %cond.rhs213, !dbg !1855

cond.lhs210:                                      ; preds = %checkok208
  %110 = load i128, ptr %val195, align 16, !dbg !1855
  %bnot211 = xor i128 %110, -1, !dbg !1855
  %add212 = add i128 %bnot211, 1, !dbg !1855
  br label %cond.phi214, !dbg !1855

cond.rhs213:                                      ; preds = %checkok208
  %111 = load i128, ptr %val195, align 16, !dbg !1855
  br label %cond.phi214, !dbg !1855

cond.phi214:                                      ; preds = %cond.rhs213, %cond.lhs210
  %val215 = phi i128 [ %add212, %cond.lhs210 ], [ %111, %cond.rhs213 ], !dbg !1855
  store i128 %val215, ptr %0, align 16, !dbg !1855
  ret i64 0, !dbg !1855

next_if216:                                       ; preds = %result_block192
  br label %check_subtype217, !dbg !1856

check_subtype217:                                 ; preds = %parent_type_block219, %next_if216
  %112 = phi i64 [ %27, %next_if216 ], [ %typeid.parent221, %parent_type_block219 ], !dbg !1856
  %eq218 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %112, !dbg !1856
  br i1 %eq218, label %result_block222, label %parent_type_block219, !dbg !1856

parent_type_block219:                             ; preds = %check_subtype217
  %113 = inttoptr i64 %112 to ptr, !dbg !1856
  %ptradd220 = getelementptr inbounds i8, ptr %113, i64 8, !dbg !1856
  %typeid.parent221 = load i64, ptr %ptradd220, align 8, !dbg !1856
  %114 = icmp eq i64 %typeid.parent221, 0, !dbg !1856
  br i1 %114, label %result_block222, label %check_subtype217, !dbg !1856

result_block222:                                  ; preds = %parent_type_block219, %check_subtype217
  %115 = phi i1 [ false, %parent_type_block219 ], [ true, %check_subtype217 ], !dbg !1856
  br i1 %115, label %switch.case223, label %next_if233, !dbg !1856

switch.case223:                                   ; preds = %result_block222
    #dbg_declare(ptr %arg224, !1857, !DIExpression(), !1859)
  %116 = load ptr, ptr %1, align 8, !dbg !1859
  store ptr %116, ptr %arg224, align 8, !dbg !1859
  %117 = load ptr, ptr %arg224, align 8, !dbg !1860
  %checknull226 = icmp eq ptr %117, null, !dbg !1860
  %118 = call i1 @llvm.expect.i1(i1 %checknull226, i1 false), !dbg !1860
  br i1 %118, label %panic227, label %checkok231, !dbg !1860

checkok231:                                       ; preds = %switch.case223
  %119 = load i8, ptr %117, align 1, !dbg !1860
  %zext232 = zext i8 %119 to i128, !dbg !1860
  store i128 %zext232, ptr %0, align 16, !dbg !1860
  ret i64 0, !dbg !1860

next_if233:                                       ; preds = %result_block222
  br label %check_subtype234, !dbg !1861

check_subtype234:                                 ; preds = %parent_type_block236, %next_if233
  %120 = phi i64 [ %27, %next_if233 ], [ %typeid.parent238, %parent_type_block236 ], !dbg !1861
  %eq235 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %120, !dbg !1861
  br i1 %eq235, label %result_block239, label %parent_type_block236, !dbg !1861

parent_type_block236:                             ; preds = %check_subtype234
  %121 = inttoptr i64 %120 to ptr, !dbg !1861
  %ptradd237 = getelementptr inbounds i8, ptr %121, i64 8, !dbg !1861
  %typeid.parent238 = load i64, ptr %ptradd237, align 8, !dbg !1861
  %122 = icmp eq i64 %typeid.parent238, 0, !dbg !1861
  br i1 %122, label %result_block239, label %check_subtype234, !dbg !1861

result_block239:                                  ; preds = %parent_type_block236, %check_subtype234
  %123 = phi i1 [ false, %parent_type_block236 ], [ true, %check_subtype234 ], !dbg !1861
  br i1 %123, label %switch.case240, label %next_if250, !dbg !1861

switch.case240:                                   ; preds = %result_block239
    #dbg_declare(ptr %arg241, !1862, !DIExpression(), !1865)
  %124 = load ptr, ptr %1, align 8, !dbg !1865
  store ptr %124, ptr %arg241, align 8, !dbg !1865
  %125 = load ptr, ptr %arg241, align 8, !dbg !1866
  %checknull243 = icmp eq ptr %125, null, !dbg !1866
  %126 = call i1 @llvm.expect.i1(i1 %checknull243, i1 false), !dbg !1866
  br i1 %126, label %panic244, label %checkok248, !dbg !1866

checkok248:                                       ; preds = %switch.case240
  %127 = load i16, ptr %125, align 2, !dbg !1866
  %zext249 = zext i16 %127 to i128, !dbg !1866
  store i128 %zext249, ptr %0, align 16, !dbg !1866
  ret i64 0, !dbg !1866

next_if250:                                       ; preds = %result_block239
  br label %check_subtype251, !dbg !1867

check_subtype251:                                 ; preds = %parent_type_block253, %next_if250
  %128 = phi i64 [ %27, %next_if250 ], [ %typeid.parent255, %parent_type_block253 ], !dbg !1867
  %eq252 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %128, !dbg !1867
  br i1 %eq252, label %result_block256, label %parent_type_block253, !dbg !1867

parent_type_block253:                             ; preds = %check_subtype251
  %129 = inttoptr i64 %128 to ptr, !dbg !1867
  %ptradd254 = getelementptr inbounds i8, ptr %129, i64 8, !dbg !1867
  %typeid.parent255 = load i64, ptr %ptradd254, align 8, !dbg !1867
  %130 = icmp eq i64 %typeid.parent255, 0, !dbg !1867
  br i1 %130, label %result_block256, label %check_subtype251, !dbg !1867

result_block256:                                  ; preds = %parent_type_block253, %check_subtype251
  %131 = phi i1 [ false, %parent_type_block253 ], [ true, %check_subtype251 ], !dbg !1867
  br i1 %131, label %switch.case257, label %next_if267, !dbg !1867

switch.case257:                                   ; preds = %result_block256
    #dbg_declare(ptr %arg258, !1868, !DIExpression(), !1870)
  %132 = load ptr, ptr %1, align 8, !dbg !1870
  store ptr %132, ptr %arg258, align 8, !dbg !1870
  %133 = load ptr, ptr %arg258, align 8, !dbg !1871
  %checknull260 = icmp eq ptr %133, null, !dbg !1871
  %134 = call i1 @llvm.expect.i1(i1 %checknull260, i1 false), !dbg !1871
  br i1 %134, label %panic261, label %checkok265, !dbg !1871

checkok265:                                       ; preds = %switch.case257
  %135 = load i32, ptr %133, align 4, !dbg !1871
  %zext266 = zext i32 %135 to i128, !dbg !1871
  store i128 %zext266, ptr %0, align 16, !dbg !1871
  ret i64 0, !dbg !1871

next_if267:                                       ; preds = %result_block256
  br label %check_subtype268, !dbg !1872

check_subtype268:                                 ; preds = %parent_type_block270, %next_if267
  %136 = phi i64 [ %27, %next_if267 ], [ %typeid.parent272, %parent_type_block270 ], !dbg !1872
  %eq269 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %136, !dbg !1872
  br i1 %eq269, label %result_block273, label %parent_type_block270, !dbg !1872

parent_type_block270:                             ; preds = %check_subtype268
  %137 = inttoptr i64 %136 to ptr, !dbg !1872
  %ptradd271 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !1872
  %typeid.parent272 = load i64, ptr %ptradd271, align 8, !dbg !1872
  %138 = icmp eq i64 %typeid.parent272, 0, !dbg !1872
  br i1 %138, label %result_block273, label %check_subtype268, !dbg !1872

result_block273:                                  ; preds = %parent_type_block270, %check_subtype268
  %139 = phi i1 [ false, %parent_type_block270 ], [ true, %check_subtype268 ], !dbg !1872
  br i1 %139, label %switch.case274, label %next_if284, !dbg !1872

switch.case274:                                   ; preds = %result_block273
    #dbg_declare(ptr %arg275, !1873, !DIExpression(), !1876)
  %140 = load ptr, ptr %1, align 8, !dbg !1876
  store ptr %140, ptr %arg275, align 8, !dbg !1876
  %141 = load ptr, ptr %arg275, align 8, !dbg !1877
  %checknull277 = icmp eq ptr %141, null, !dbg !1877
  %142 = call i1 @llvm.expect.i1(i1 %checknull277, i1 false), !dbg !1877
  br i1 %142, label %panic278, label %checkok282, !dbg !1877

checkok282:                                       ; preds = %switch.case274
  %143 = load i64, ptr %141, align 8, !dbg !1877
  %zext283 = zext i64 %143 to i128, !dbg !1877
  store i128 %zext283, ptr %0, align 16, !dbg !1877
  ret i64 0, !dbg !1877

next_if284:                                       ; preds = %result_block273
  br label %check_subtype285, !dbg !1878

check_subtype285:                                 ; preds = %parent_type_block287, %next_if284
  %144 = phi i64 [ %27, %next_if284 ], [ %typeid.parent289, %parent_type_block287 ], !dbg !1878
  %eq286 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %144, !dbg !1878
  br i1 %eq286, label %result_block290, label %parent_type_block287, !dbg !1878

parent_type_block287:                             ; preds = %check_subtype285
  %145 = inttoptr i64 %144 to ptr, !dbg !1878
  %ptradd288 = getelementptr inbounds i8, ptr %145, i64 8, !dbg !1878
  %typeid.parent289 = load i64, ptr %ptradd288, align 8, !dbg !1878
  %146 = icmp eq i64 %typeid.parent289, 0, !dbg !1878
  br i1 %146, label %result_block290, label %check_subtype285, !dbg !1878

result_block290:                                  ; preds = %parent_type_block287, %check_subtype285
  %147 = phi i1 [ false, %parent_type_block287 ], [ true, %check_subtype285 ], !dbg !1878
  br i1 %147, label %switch.case291, label %next_if300, !dbg !1878

switch.case291:                                   ; preds = %result_block290
    #dbg_declare(ptr %arg292, !1879, !DIExpression(), !1881)
  %148 = load ptr, ptr %1, align 8, !dbg !1881
  store ptr %148, ptr %arg292, align 8, !dbg !1881
  %149 = load ptr, ptr %arg292, align 8, !dbg !1882
  %checknull294 = icmp eq ptr %149, null, !dbg !1882
  %150 = call i1 @llvm.expect.i1(i1 %checknull294, i1 false), !dbg !1882
  br i1 %150, label %panic295, label %checkok299, !dbg !1882

checkok299:                                       ; preds = %switch.case291
  %151 = load i128, ptr %149, align 16, !dbg !1882
  store i128 %151, ptr %0, align 16, !dbg !1882
  ret i64 0, !dbg !1882

next_if300:                                       ; preds = %result_block290
  br label %check_subtype301, !dbg !1883

check_subtype301:                                 ; preds = %parent_type_block303, %next_if300
  %152 = phi i64 [ %27, %next_if300 ], [ %typeid.parent305, %parent_type_block303 ], !dbg !1883
  %eq302 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %152, !dbg !1883
  br i1 %eq302, label %result_block306, label %parent_type_block303, !dbg !1883

parent_type_block303:                             ; preds = %check_subtype301
  %153 = inttoptr i64 %152 to ptr, !dbg !1883
  %ptradd304 = getelementptr inbounds i8, ptr %153, i64 8, !dbg !1883
  %typeid.parent305 = load i64, ptr %ptradd304, align 8, !dbg !1883
  %154 = icmp eq i64 %typeid.parent305, 0, !dbg !1883
  br i1 %154, label %result_block306, label %check_subtype301, !dbg !1883

result_block306:                                  ; preds = %parent_type_block303, %check_subtype301
  %155 = phi i1 [ false, %parent_type_block303 ], [ true, %check_subtype301 ], !dbg !1883
  br i1 %155, label %switch.case307, label %next_if327, !dbg !1883

switch.case307:                                   ; preds = %result_block306
    #dbg_declare(ptr %arg308, !1884, !DIExpression(), !1888)
  %156 = load ptr, ptr %1, align 8, !dbg !1888
  store ptr %156, ptr %arg308, align 8, !dbg !1888
    #dbg_declare(ptr %f, !1889, !DIExpression(), !1890)
  %157 = load ptr, ptr %arg308, align 8, !dbg !1890
  %checknull309 = icmp eq ptr %157, null, !dbg !1890
  %158 = call i1 @llvm.expect.i1(i1 %checknull309, i1 false), !dbg !1890
  br i1 %158, label %panic310, label %checkok314, !dbg !1890

checkok314:                                       ; preds = %switch.case307
  %159 = load float, ptr %157, align 4, !dbg !1890
  store float %159, ptr %f, align 4, !dbg !1890
  %160 = load ptr, ptr %is_neg, align 8, !dbg !1891
  %checknull316 = icmp eq ptr %160, null, !dbg !1891
  %161 = call i1 @llvm.expect.i1(i1 %checknull316, i1 false), !dbg !1891
  br i1 %161, label %panic317, label %checkok321, !dbg !1891

checkok321:                                       ; preds = %checkok314
  %162 = load float, ptr %f, align 4, !dbg !1891
  %lt322 = fcmp olt float %162, 0.000000e+00, !dbg !1891
  %163 = zext i1 %lt322 to i8, !dbg !1891
  store i8 %163, ptr %160, align 1, !dbg !1891
  %164 = trunc i8 %163 to i1, !dbg !1891
  br i1 %164, label %cond.lhs323, label %cond.rhs324, !dbg !1891

cond.lhs323:                                      ; preds = %checkok321
  %165 = load float, ptr %f, align 4, !dbg !1891
  %fneg = fneg float %165, !dbg !1891
  br label %cond.phi325, !dbg !1891

cond.rhs324:                                      ; preds = %checkok321
  %166 = load float, ptr %f, align 4, !dbg !1891
  br label %cond.phi325, !dbg !1891

cond.phi325:                                      ; preds = %cond.rhs324, %cond.lhs323
  %val326 = phi float [ %fneg, %cond.lhs323 ], [ %166, %cond.rhs324 ], !dbg !1891
  %fpui = fptoui float %val326 to i128, !dbg !1891
  store i128 %fpui, ptr %0, align 16, !dbg !1891
  ret i64 0, !dbg !1891

next_if327:                                       ; preds = %result_block306
  br label %check_subtype328, !dbg !1892

check_subtype328:                                 ; preds = %parent_type_block330, %next_if327
  %167 = phi i64 [ %27, %next_if327 ], [ %typeid.parent332, %parent_type_block330 ], !dbg !1892
  %eq329 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %167, !dbg !1892
  br i1 %eq329, label %result_block333, label %parent_type_block330, !dbg !1892

parent_type_block330:                             ; preds = %check_subtype328
  %168 = inttoptr i64 %167 to ptr, !dbg !1892
  %ptradd331 = getelementptr inbounds i8, ptr %168, i64 8, !dbg !1892
  %typeid.parent332 = load i64, ptr %ptradd331, align 8, !dbg !1892
  %169 = icmp eq i64 %typeid.parent332, 0, !dbg !1892
  br i1 %169, label %result_block333, label %check_subtype328, !dbg !1892

result_block333:                                  ; preds = %parent_type_block330, %check_subtype328
  %170 = phi i1 [ false, %parent_type_block330 ], [ true, %check_subtype328 ], !dbg !1892
  br i1 %170, label %switch.case334, label %next_if356, !dbg !1892

switch.case334:                                   ; preds = %result_block333
    #dbg_declare(ptr %arg335, !1893, !DIExpression(), !1896)
  %171 = load ptr, ptr %1, align 8, !dbg !1896
  store ptr %171, ptr %arg335, align 8, !dbg !1896
    #dbg_declare(ptr %d, !1897, !DIExpression(), !1898)
  %172 = load ptr, ptr %arg335, align 8, !dbg !1898
  %checknull336 = icmp eq ptr %172, null, !dbg !1898
  %173 = call i1 @llvm.expect.i1(i1 %checknull336, i1 false), !dbg !1898
  br i1 %173, label %panic337, label %checkok341, !dbg !1898

checkok341:                                       ; preds = %switch.case334
  %174 = load double, ptr %172, align 8, !dbg !1898
  store double %174, ptr %d, align 8, !dbg !1898
  %175 = load ptr, ptr %is_neg, align 8, !dbg !1899
  %checknull343 = icmp eq ptr %175, null, !dbg !1899
  %176 = call i1 @llvm.expect.i1(i1 %checknull343, i1 false), !dbg !1899
  br i1 %176, label %panic344, label %checkok348, !dbg !1899

checkok348:                                       ; preds = %checkok341
  %177 = load double, ptr %d, align 8, !dbg !1899
  %lt349 = fcmp olt double %177, 0.000000e+00, !dbg !1899
  %178 = zext i1 %lt349 to i8, !dbg !1899
  store i8 %178, ptr %175, align 1, !dbg !1899
  %179 = trunc i8 %178 to i1, !dbg !1899
  br i1 %179, label %cond.lhs350, label %cond.rhs352, !dbg !1899

cond.lhs350:                                      ; preds = %checkok348
  %180 = load double, ptr %d, align 8, !dbg !1899
  %fneg351 = fneg double %180, !dbg !1899
  br label %cond.phi353, !dbg !1899

cond.rhs352:                                      ; preds = %checkok348
  %181 = load double, ptr %d, align 8, !dbg !1899
  br label %cond.phi353, !dbg !1899

cond.phi353:                                      ; preds = %cond.rhs352, %cond.lhs350
  %val354 = phi double [ %fneg351, %cond.lhs350 ], [ %181, %cond.rhs352 ], !dbg !1899
  %fpui355 = fptoui double %val354 to i128, !dbg !1899
  store i128 %fpui355, ptr %0, align 16, !dbg !1899
  ret i64 0, !dbg !1899

next_if356:                                       ; preds = %result_block333
  br label %switch.default357, !dbg !1899

switch.default357:                                ; preds = %next_if356
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !1900

panic:                                            ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg2, align 8
  %182 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %182(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 30), !dbg !1799
  unreachable, !dbg !1799

panic4:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.144, i64 55 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg7, align 8
  %183 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %183(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 31), !dbg !1801
  unreachable, !dbg !1801

panic12:                                          ; preds = %switch.case9
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg15, align 8
  %184 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %184(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 199), !dbg !1802
  unreachable, !dbg !1802

panic18:                                          ; preds = %checkok16
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg21, align 8
  %185 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %185(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 199), !dbg !1802
  unreachable, !dbg !1802

panic46:                                          ; preds = %switch.exit
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg49, align 8
  %186 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %186(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 38), !dbg !1808
  unreachable, !dbg !1808

panic59:                                          ; preds = %switch.case56
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg62, align 8
  %187 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %187(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 42), !dbg !1815
  unreachable, !dbg !1815

panic74:                                          ; preds = %switch.case71
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg77, align 8
  %188 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %188(ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, i32 44), !dbg !1822
  unreachable, !dbg !1822

panic81:                                          ; preds = %checkok78
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg84, align 8
  %189 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %189(ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, i32 45), !dbg !1823
  unreachable, !dbg !1823

panic100:                                         ; preds = %switch.case96
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg103, align 8
  %190 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %190(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 47), !dbg !1830
  unreachable, !dbg !1830

panic108:                                         ; preds = %checkok104
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg110, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg111, align 8
  %191 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %191(ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, ptr align 8 %indirectarg111, i32 48), !dbg !1831
  unreachable, !dbg !1831

panic133:                                         ; preds = %switch.case129
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg134, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg135, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg136, align 8
  %192 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %192(ptr align 8 %indirectarg134, ptr align 8 %indirectarg135, ptr align 8 %indirectarg136, i32 50), !dbg !1838
  unreachable, !dbg !1838

panic140:                                         ; preds = %checkok137
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg141, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg142, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg143, align 8
  %193 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %193(ptr align 8 %indirectarg141, ptr align 8 %indirectarg142, ptr align 8 %indirectarg143, i32 51), !dbg !1839
  unreachable, !dbg !1839

panic165:                                         ; preds = %switch.case161
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg166, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg167, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg168, align 8
  %194 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %194(ptr align 8 %indirectarg166, ptr align 8 %indirectarg167, ptr align 8 %indirectarg168, i32 53), !dbg !1846
  unreachable, !dbg !1846

panic172:                                         ; preds = %checkok169
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg173, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg174, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg175, align 8
  %195 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %195(ptr align 8 %indirectarg173, ptr align 8 %indirectarg174, ptr align 8 %indirectarg175, i32 54), !dbg !1847
  unreachable, !dbg !1847

panic197:                                         ; preds = %switch.case193
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg198, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg199, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg200, align 8
  %196 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %196(ptr align 8 %indirectarg198, ptr align 8 %indirectarg199, ptr align 8 %indirectarg200, i32 56), !dbg !1854
  unreachable, !dbg !1854

panic204:                                         ; preds = %checkok201
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg207, align 8
  %197 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %197(ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, i32 57), !dbg !1855
  unreachable, !dbg !1855

panic227:                                         ; preds = %switch.case223
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg228, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg229, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg230, align 8
  %198 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %198(ptr align 8 %indirectarg228, ptr align 8 %indirectarg229, ptr align 8 %indirectarg230, i32 59), !dbg !1860
  unreachable, !dbg !1860

panic244:                                         ; preds = %switch.case240
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg245, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg246, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg247, align 8
  %199 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %199(ptr align 8 %indirectarg245, ptr align 8 %indirectarg246, ptr align 8 %indirectarg247, i32 61), !dbg !1866
  unreachable, !dbg !1866

panic261:                                         ; preds = %switch.case257
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg262, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg263, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg264, align 8
  %200 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %200(ptr align 8 %indirectarg262, ptr align 8 %indirectarg263, ptr align 8 %indirectarg264, i32 63), !dbg !1871
  unreachable, !dbg !1871

panic278:                                         ; preds = %switch.case274
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg279, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg280, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg281, align 8
  %201 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %201(ptr align 8 %indirectarg279, ptr align 8 %indirectarg280, ptr align 8 %indirectarg281, i32 65), !dbg !1877
  unreachable, !dbg !1877

panic295:                                         ; preds = %switch.case291
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg296, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg297, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg298, align 8
  %202 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %202(ptr align 8 %indirectarg296, ptr align 8 %indirectarg297, ptr align 8 %indirectarg298, i32 67), !dbg !1882
  unreachable, !dbg !1882

panic310:                                         ; preds = %switch.case307
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg311, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg312, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg313, align 8
  %203 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %203(ptr align 8 %indirectarg311, ptr align 8 %indirectarg312, ptr align 8 %indirectarg313, i32 69), !dbg !1890
  unreachable, !dbg !1890

panic317:                                         ; preds = %checkok314
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg318, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg319, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg320, align 8
  %204 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %204(ptr align 8 %indirectarg318, ptr align 8 %indirectarg319, ptr align 8 %indirectarg320, i32 70), !dbg !1891
  unreachable, !dbg !1891

panic337:                                         ; preds = %switch.case334
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg338, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg339, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg340, align 8
  %205 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %205(ptr align 8 %indirectarg338, ptr align 8 %indirectarg339, ptr align 8 %indirectarg340, i32 72), !dbg !1898
  unreachable, !dbg !1898

panic344:                                         ; preds = %checkok341
  store %"char[]" { ptr @.panic_msg.141, i64 47 }, ptr %indirectarg345, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg346, align 8
  store %"char[]" { ptr @.func.143, i64 12 }, ptr %indirectarg347, align 8
  %206 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %206(ptr align 8 %indirectarg345, ptr align 8 %indirectarg346, ptr align 8 %indirectarg347, i32 73), !dbg !1899
  unreachable, !dbg !1899
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.float_from_any(ptr %0, ptr align 8 %1) #0 !dbg !1902 {
entry:
  %reterr = alloca i64, align 8
  %self = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %retparam = alloca double, align 8
  %indirectarg31 = alloca %any, align 8
  %switch = alloca i64, align 8
  %arg = alloca ptr, align 8
  %reterr35 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %arg49 = alloca ptr, align 8
  %reterr50 = alloca i64, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %arg65 = alloca ptr, align 8
  %reterr66 = alloca i64, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %arg82 = alloca ptr, align 8
  %reterr83 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %arg99 = alloca ptr, align 8
  %reterr100 = alloca i64, align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %indirectarg105 = alloca %"char[]", align 8
  %arg116 = alloca ptr, align 8
  %reterr117 = alloca i64, align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %indirectarg122 = alloca %"char[]", align 8
  %arg133 = alloca ptr, align 8
  %reterr134 = alloca i64, align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %arg149 = alloca ptr, align 8
  %reterr150 = alloca i64, align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %indirectarg155 = alloca %"char[]", align 8
  %arg166 = alloca ptr, align 8
  %reterr167 = alloca i64, align 8
  %indirectarg170 = alloca %"char[]", align 8
  %indirectarg171 = alloca %"char[]", align 8
  %indirectarg172 = alloca %"char[]", align 8
  %arg183 = alloca ptr, align 8
  %reterr184 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %arg200 = alloca ptr, align 8
  %reterr201 = alloca i64, align 8
  %indirectarg204 = alloca %"char[]", align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %arg217 = alloca ptr, align 8
  %reterr218 = alloca i64, align 8
  %indirectarg221 = alloca %"char[]", align 8
  %indirectarg222 = alloca %"char[]", align 8
  %indirectarg223 = alloca %"char[]", align 8
  %arg233 = alloca ptr, align 8
  %reterr234 = alloca i64, align 8
  %indirectarg237 = alloca %"char[]", align 8
  %indirectarg238 = alloca %"char[]", align 8
  %indirectarg239 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !1907, !DIExpression(), !1908)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1909
  %2 = load i64, ptr %ptradd, align 8, !dbg !1909
  %"introspect*" = inttoptr i64 %2 to ptr, !dbg !1909
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !1909
  %eq = icmp eq i8 %typeid.kind, 18, !dbg !1909
  br i1 %eq, label %if.then, label %if.exit, !dbg !1909

if.then:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  %3 = load ptr, ptr %self, align 8, !dbg !1910
  %checknull = icmp eq ptr %3, null, !dbg !1910
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1910
  br i1 %4, label %panic, label %checkok, !dbg !1910

checkok:                                          ; preds = %if.then
  %5 = load ptr, ptr %3, align 8, !dbg !1910
  %6 = load ptr, ptr %self, align 8, !dbg !1910
  %checknull3 = icmp eq ptr %6, null, !dbg !1910
  %7 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !1910
  br i1 %7, label %panic4, label %checkok8, !dbg !1910

checkok8:                                         ; preds = %checkok
  %ptradd9 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1910
  %8 = load i64, ptr %ptradd9, align 8, !dbg !1910
  %"introspect*10" = inttoptr i64 %8 to ptr, !dbg !1910
  %typeid.kind11 = load i8, ptr %"introspect*10", align 8, !dbg !1910
  %eq12 = icmp eq i8 %typeid.kind11, 15, !dbg !1910
  br i1 %eq12, label %check_type_ok, label %check_next, !dbg !1910

check_next:                                       ; preds = %checkok8
  %eq13 = icmp eq i8 %typeid.kind11, 19, !dbg !1910
  br i1 %eq13, label %check_type_ok, label %check_next14, !dbg !1910

check_next14:                                     ; preds = %check_next
  %eq15 = icmp eq i8 %typeid.kind11, 17, !dbg !1910
  br i1 %eq15, label %check_type_ok, label %check_next16, !dbg !1910

check_next16:                                     ; preds = %check_next14
  %eq17 = icmp eq i8 %typeid.kind11, 8, !dbg !1910
  br i1 %eq17, label %check_type_ok, label %check_next18, !dbg !1910

check_next18:                                     ; preds = %check_next16
  %eq19 = icmp eq i8 %typeid.kind11, 16, !dbg !1910
  br i1 %eq19, label %check_type_ok, label %check_next20, !dbg !1910

check_next20:                                     ; preds = %check_next18
  %eq21 = icmp eq i8 %typeid.kind11, 18, !dbg !1910
  br i1 %eq21, label %check_type_ok, label %check_next22, !dbg !1910

check_next22:                                     ; preds = %check_next20
  %eq23 = icmp eq i8 %typeid.kind11, 14, !dbg !1910
  br i1 %eq23, label %check_type_ok, label %check_next24, !dbg !1910

check_next24:                                     ; preds = %check_next22
  %eq25 = icmp eq i8 %typeid.kind11, 12, !dbg !1910
  br i1 %eq25, label %check_type_ok, label %check_next26, !dbg !1910

check_next26:                                     ; preds = %check_next24
  store %"char[]" { ptr @.panic_msg.82, i64 49 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg29, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 199), !dbg !1910
  unreachable, !dbg !1910

check_type_ok:                                    ; preds = %check_next24, %check_next22, %check_next20, %check_next18, %check_next16, %check_next14, %check_next, %checkok8
  %ptradd30 = getelementptr inbounds i8, ptr %"introspect*10", i64 32, !dbg !1910
  %typeid.inner = load i64, ptr %ptradd30, align 8, !dbg !1910
  %10 = insertvalue %any undef, ptr %5, 0, !dbg !1910
  %11 = insertvalue %any %10, i64 %typeid.inner, 1, !dbg !1910
  store %any %11, ptr %indirectarg31, align 8
  %12 = call i64 @std.io.float_from_any(ptr %retparam, ptr align 8 %indirectarg31), !dbg !1912
  %not_err = icmp eq i64 %12, 0, !dbg !1912
  %13 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1912
  br i1 %13, label %after_check, label %assign_optional, !dbg !1912

assign_optional:                                  ; preds = %check_type_ok
  store i64 %12, ptr %reterr, align 8, !dbg !1912
  br label %err_retblock, !dbg !1912

after_check:                                      ; preds = %check_type_ok
  %14 = load double, ptr %retparam, align 8, !dbg !1912
  store double %14, ptr %0, align 8, !dbg !1912
  ret i64 0, !dbg !1912

err_retblock:                                     ; preds = %assign_optional
  %15 = load i64, ptr %reterr, align 8, !dbg !1912
  ret i64 %15, !dbg !1912

if.exit:                                          ; preds = %entry
  %ptradd32 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1914
  %16 = load i64, ptr %ptradd32, align 8
  store i64 %16, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit
  %17 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !1916

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %18 = phi i64 [ %17, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !1916
  %eq33 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %18, !dbg !1916
  br i1 %eq33, label %result_block, label %parent_type_block, !dbg !1916

parent_type_block:                                ; preds = %check_subtype
  %19 = inttoptr i64 %18 to ptr, !dbg !1916
  %ptradd34 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !1916
  %typeid.parent = load i64, ptr %ptradd34, align 8, !dbg !1916
  %20 = icmp eq i64 %typeid.parent, 0, !dbg !1916
  br i1 %20, label %result_block, label %check_subtype, !dbg !1916

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %21 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !1916
  br i1 %21, label %switch.case, label %next_if, !dbg !1916

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %arg, !1917, !DIExpression(), !1919)
  %22 = load ptr, ptr %1, align 8, !dbg !1919
  store ptr %22, ptr %arg, align 8, !dbg !1919
  %23 = load ptr, ptr %arg, align 8, !dbg !1920
  %checknull36 = icmp eq ptr %23, null, !dbg !1920
  %24 = call i1 @llvm.expect.i1(i1 %checknull36, i1 false), !dbg !1920
  br i1 %24, label %panic37, label %checkok41, !dbg !1920

checkok41:                                        ; preds = %switch.case
  %25 = load i8, ptr %23, align 1, !dbg !1920
  %26 = trunc i8 %25 to i1, !dbg !1920
  %boolfp = uitofp i1 %26 to double, !dbg !1920
  store double %boolfp, ptr %0, align 8, !dbg !1920
  ret i64 0, !dbg !1920

next_if:                                          ; preds = %result_block
  br label %check_subtype42, !dbg !1921

check_subtype42:                                  ; preds = %parent_type_block44, %next_if
  %27 = phi i64 [ %17, %next_if ], [ %typeid.parent46, %parent_type_block44 ], !dbg !1921
  %eq43 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %27, !dbg !1921
  br i1 %eq43, label %result_block47, label %parent_type_block44, !dbg !1921

parent_type_block44:                              ; preds = %check_subtype42
  %28 = inttoptr i64 %27 to ptr, !dbg !1921
  %ptradd45 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !1921
  %typeid.parent46 = load i64, ptr %ptradd45, align 8, !dbg !1921
  %29 = icmp eq i64 %typeid.parent46, 0, !dbg !1921
  br i1 %29, label %result_block47, label %check_subtype42, !dbg !1921

result_block47:                                   ; preds = %parent_type_block44, %check_subtype42
  %30 = phi i1 [ false, %parent_type_block44 ], [ true, %check_subtype42 ], !dbg !1921
  br i1 %30, label %switch.case48, label %next_if57, !dbg !1921

switch.case48:                                    ; preds = %result_block47
    #dbg_declare(ptr %arg49, !1922, !DIExpression(), !1924)
  %31 = load ptr, ptr %1, align 8, !dbg !1924
  store ptr %31, ptr %arg49, align 8, !dbg !1924
  %32 = load ptr, ptr %arg49, align 8, !dbg !1925
  %checknull51 = icmp eq ptr %32, null, !dbg !1925
  %33 = call i1 @llvm.expect.i1(i1 %checknull51, i1 false), !dbg !1925
  br i1 %33, label %panic52, label %checkok56, !dbg !1925

checkok56:                                        ; preds = %switch.case48
  %34 = load i8, ptr %32, align 1, !dbg !1925
  %sifp = sitofp i8 %34 to double, !dbg !1925
  store double %sifp, ptr %0, align 8, !dbg !1925
  ret i64 0, !dbg !1925

next_if57:                                        ; preds = %result_block47
  br label %check_subtype58, !dbg !1926

check_subtype58:                                  ; preds = %parent_type_block60, %next_if57
  %35 = phi i64 [ %17, %next_if57 ], [ %typeid.parent62, %parent_type_block60 ], !dbg !1926
  %eq59 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %35, !dbg !1926
  br i1 %eq59, label %result_block63, label %parent_type_block60, !dbg !1926

parent_type_block60:                              ; preds = %check_subtype58
  %36 = inttoptr i64 %35 to ptr, !dbg !1926
  %ptradd61 = getelementptr inbounds i8, ptr %36, i64 8, !dbg !1926
  %typeid.parent62 = load i64, ptr %ptradd61, align 8, !dbg !1926
  %37 = icmp eq i64 %typeid.parent62, 0, !dbg !1926
  br i1 %37, label %result_block63, label %check_subtype58, !dbg !1926

result_block63:                                   ; preds = %parent_type_block60, %check_subtype58
  %38 = phi i1 [ false, %parent_type_block60 ], [ true, %check_subtype58 ], !dbg !1926
  br i1 %38, label %switch.case64, label %next_if74, !dbg !1926

switch.case64:                                    ; preds = %result_block63
    #dbg_declare(ptr %arg65, !1927, !DIExpression(), !1929)
  %39 = load ptr, ptr %1, align 8, !dbg !1929
  store ptr %39, ptr %arg65, align 8, !dbg !1929
  %40 = load ptr, ptr %arg65, align 8, !dbg !1930
  %checknull67 = icmp eq ptr %40, null, !dbg !1930
  %41 = call i1 @llvm.expect.i1(i1 %checknull67, i1 false), !dbg !1930
  br i1 %41, label %panic68, label %checkok72, !dbg !1930

checkok72:                                        ; preds = %switch.case64
  %42 = load i16, ptr %40, align 2, !dbg !1930
  %sifp73 = sitofp i16 %42 to double, !dbg !1930
  store double %sifp73, ptr %0, align 8, !dbg !1930
  ret i64 0, !dbg !1930

next_if74:                                        ; preds = %result_block63
  br label %check_subtype75, !dbg !1931

check_subtype75:                                  ; preds = %parent_type_block77, %next_if74
  %43 = phi i64 [ %17, %next_if74 ], [ %typeid.parent79, %parent_type_block77 ], !dbg !1931
  %eq76 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %43, !dbg !1931
  br i1 %eq76, label %result_block80, label %parent_type_block77, !dbg !1931

parent_type_block77:                              ; preds = %check_subtype75
  %44 = inttoptr i64 %43 to ptr, !dbg !1931
  %ptradd78 = getelementptr inbounds i8, ptr %44, i64 8, !dbg !1931
  %typeid.parent79 = load i64, ptr %ptradd78, align 8, !dbg !1931
  %45 = icmp eq i64 %typeid.parent79, 0, !dbg !1931
  br i1 %45, label %result_block80, label %check_subtype75, !dbg !1931

result_block80:                                   ; preds = %parent_type_block77, %check_subtype75
  %46 = phi i1 [ false, %parent_type_block77 ], [ true, %check_subtype75 ], !dbg !1931
  br i1 %46, label %switch.case81, label %next_if91, !dbg !1931

switch.case81:                                    ; preds = %result_block80
    #dbg_declare(ptr %arg82, !1932, !DIExpression(), !1934)
  %47 = load ptr, ptr %1, align 8, !dbg !1934
  store ptr %47, ptr %arg82, align 8, !dbg !1934
  %48 = load ptr, ptr %arg82, align 8, !dbg !1935
  %checknull84 = icmp eq ptr %48, null, !dbg !1935
  %49 = call i1 @llvm.expect.i1(i1 %checknull84, i1 false), !dbg !1935
  br i1 %49, label %panic85, label %checkok89, !dbg !1935

checkok89:                                        ; preds = %switch.case81
  %50 = load i32, ptr %48, align 4, !dbg !1935
  %sifp90 = sitofp i32 %50 to double, !dbg !1935
  store double %sifp90, ptr %0, align 8, !dbg !1935
  ret i64 0, !dbg !1935

next_if91:                                        ; preds = %result_block80
  br label %check_subtype92, !dbg !1936

check_subtype92:                                  ; preds = %parent_type_block94, %next_if91
  %51 = phi i64 [ %17, %next_if91 ], [ %typeid.parent96, %parent_type_block94 ], !dbg !1936
  %eq93 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %51, !dbg !1936
  br i1 %eq93, label %result_block97, label %parent_type_block94, !dbg !1936

parent_type_block94:                              ; preds = %check_subtype92
  %52 = inttoptr i64 %51 to ptr, !dbg !1936
  %ptradd95 = getelementptr inbounds i8, ptr %52, i64 8, !dbg !1936
  %typeid.parent96 = load i64, ptr %ptradd95, align 8, !dbg !1936
  %53 = icmp eq i64 %typeid.parent96, 0, !dbg !1936
  br i1 %53, label %result_block97, label %check_subtype92, !dbg !1936

result_block97:                                   ; preds = %parent_type_block94, %check_subtype92
  %54 = phi i1 [ false, %parent_type_block94 ], [ true, %check_subtype92 ], !dbg !1936
  br i1 %54, label %switch.case98, label %next_if108, !dbg !1936

switch.case98:                                    ; preds = %result_block97
    #dbg_declare(ptr %arg99, !1937, !DIExpression(), !1939)
  %55 = load ptr, ptr %1, align 8, !dbg !1939
  store ptr %55, ptr %arg99, align 8, !dbg !1939
  %56 = load ptr, ptr %arg99, align 8, !dbg !1940
  %checknull101 = icmp eq ptr %56, null, !dbg !1940
  %57 = call i1 @llvm.expect.i1(i1 %checknull101, i1 false), !dbg !1940
  br i1 %57, label %panic102, label %checkok106, !dbg !1940

checkok106:                                       ; preds = %switch.case98
  %58 = load i64, ptr %56, align 8, !dbg !1940
  %sifp107 = sitofp i64 %58 to double, !dbg !1940
  store double %sifp107, ptr %0, align 8, !dbg !1940
  ret i64 0, !dbg !1940

next_if108:                                       ; preds = %result_block97
  br label %check_subtype109, !dbg !1941

check_subtype109:                                 ; preds = %parent_type_block111, %next_if108
  %59 = phi i64 [ %17, %next_if108 ], [ %typeid.parent113, %parent_type_block111 ], !dbg !1941
  %eq110 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %59, !dbg !1941
  br i1 %eq110, label %result_block114, label %parent_type_block111, !dbg !1941

parent_type_block111:                             ; preds = %check_subtype109
  %60 = inttoptr i64 %59 to ptr, !dbg !1941
  %ptradd112 = getelementptr inbounds i8, ptr %60, i64 8, !dbg !1941
  %typeid.parent113 = load i64, ptr %ptradd112, align 8, !dbg !1941
  %61 = icmp eq i64 %typeid.parent113, 0, !dbg !1941
  br i1 %61, label %result_block114, label %check_subtype109, !dbg !1941

result_block114:                                  ; preds = %parent_type_block111, %check_subtype109
  %62 = phi i1 [ false, %parent_type_block111 ], [ true, %check_subtype109 ], !dbg !1941
  br i1 %62, label %switch.case115, label %next_if125, !dbg !1941

switch.case115:                                   ; preds = %result_block114
    #dbg_declare(ptr %arg116, !1942, !DIExpression(), !1944)
  %63 = load ptr, ptr %1, align 8, !dbg !1944
  store ptr %63, ptr %arg116, align 8, !dbg !1944
  %64 = load ptr, ptr %arg116, align 8, !dbg !1945
  %checknull118 = icmp eq ptr %64, null, !dbg !1945
  %65 = call i1 @llvm.expect.i1(i1 %checknull118, i1 false), !dbg !1945
  br i1 %65, label %panic119, label %checkok123, !dbg !1945

checkok123:                                       ; preds = %switch.case115
  %66 = load i128, ptr %64, align 16, !dbg !1945
  %sifp124 = sitofp i128 %66 to double, !dbg !1945
  store double %sifp124, ptr %0, align 8, !dbg !1945
  ret i64 0, !dbg !1945

next_if125:                                       ; preds = %result_block114
  br label %check_subtype126, !dbg !1946

check_subtype126:                                 ; preds = %parent_type_block128, %next_if125
  %67 = phi i64 [ %17, %next_if125 ], [ %typeid.parent130, %parent_type_block128 ], !dbg !1946
  %eq127 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %67, !dbg !1946
  br i1 %eq127, label %result_block131, label %parent_type_block128, !dbg !1946

parent_type_block128:                             ; preds = %check_subtype126
  %68 = inttoptr i64 %67 to ptr, !dbg !1946
  %ptradd129 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !1946
  %typeid.parent130 = load i64, ptr %ptradd129, align 8, !dbg !1946
  %69 = icmp eq i64 %typeid.parent130, 0, !dbg !1946
  br i1 %69, label %result_block131, label %check_subtype126, !dbg !1946

result_block131:                                  ; preds = %parent_type_block128, %check_subtype126
  %70 = phi i1 [ false, %parent_type_block128 ], [ true, %check_subtype126 ], !dbg !1946
  br i1 %70, label %switch.case132, label %next_if141, !dbg !1946

switch.case132:                                   ; preds = %result_block131
    #dbg_declare(ptr %arg133, !1947, !DIExpression(), !1949)
  %71 = load ptr, ptr %1, align 8, !dbg !1949
  store ptr %71, ptr %arg133, align 8, !dbg !1949
  %72 = load ptr, ptr %arg133, align 8, !dbg !1950
  %checknull135 = icmp eq ptr %72, null, !dbg !1950
  %73 = call i1 @llvm.expect.i1(i1 %checknull135, i1 false), !dbg !1950
  br i1 %73, label %panic136, label %checkok140, !dbg !1950

checkok140:                                       ; preds = %switch.case132
  %74 = load i8, ptr %72, align 1, !dbg !1950
  %uifp = uitofp i8 %74 to double, !dbg !1950
  store double %uifp, ptr %0, align 8, !dbg !1950
  ret i64 0, !dbg !1950

next_if141:                                       ; preds = %result_block131
  br label %check_subtype142, !dbg !1951

check_subtype142:                                 ; preds = %parent_type_block144, %next_if141
  %75 = phi i64 [ %17, %next_if141 ], [ %typeid.parent146, %parent_type_block144 ], !dbg !1951
  %eq143 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %75, !dbg !1951
  br i1 %eq143, label %result_block147, label %parent_type_block144, !dbg !1951

parent_type_block144:                             ; preds = %check_subtype142
  %76 = inttoptr i64 %75 to ptr, !dbg !1951
  %ptradd145 = getelementptr inbounds i8, ptr %76, i64 8, !dbg !1951
  %typeid.parent146 = load i64, ptr %ptradd145, align 8, !dbg !1951
  %77 = icmp eq i64 %typeid.parent146, 0, !dbg !1951
  br i1 %77, label %result_block147, label %check_subtype142, !dbg !1951

result_block147:                                  ; preds = %parent_type_block144, %check_subtype142
  %78 = phi i1 [ false, %parent_type_block144 ], [ true, %check_subtype142 ], !dbg !1951
  br i1 %78, label %switch.case148, label %next_if158, !dbg !1951

switch.case148:                                   ; preds = %result_block147
    #dbg_declare(ptr %arg149, !1952, !DIExpression(), !1954)
  %79 = load ptr, ptr %1, align 8, !dbg !1954
  store ptr %79, ptr %arg149, align 8, !dbg !1954
  %80 = load ptr, ptr %arg149, align 8, !dbg !1955
  %checknull151 = icmp eq ptr %80, null, !dbg !1955
  %81 = call i1 @llvm.expect.i1(i1 %checknull151, i1 false), !dbg !1955
  br i1 %81, label %panic152, label %checkok156, !dbg !1955

checkok156:                                       ; preds = %switch.case148
  %82 = load i16, ptr %80, align 2, !dbg !1955
  %uifp157 = uitofp i16 %82 to double, !dbg !1955
  store double %uifp157, ptr %0, align 8, !dbg !1955
  ret i64 0, !dbg !1955

next_if158:                                       ; preds = %result_block147
  br label %check_subtype159, !dbg !1956

check_subtype159:                                 ; preds = %parent_type_block161, %next_if158
  %83 = phi i64 [ %17, %next_if158 ], [ %typeid.parent163, %parent_type_block161 ], !dbg !1956
  %eq160 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %83, !dbg !1956
  br i1 %eq160, label %result_block164, label %parent_type_block161, !dbg !1956

parent_type_block161:                             ; preds = %check_subtype159
  %84 = inttoptr i64 %83 to ptr, !dbg !1956
  %ptradd162 = getelementptr inbounds i8, ptr %84, i64 8, !dbg !1956
  %typeid.parent163 = load i64, ptr %ptradd162, align 8, !dbg !1956
  %85 = icmp eq i64 %typeid.parent163, 0, !dbg !1956
  br i1 %85, label %result_block164, label %check_subtype159, !dbg !1956

result_block164:                                  ; preds = %parent_type_block161, %check_subtype159
  %86 = phi i1 [ false, %parent_type_block161 ], [ true, %check_subtype159 ], !dbg !1956
  br i1 %86, label %switch.case165, label %next_if175, !dbg !1956

switch.case165:                                   ; preds = %result_block164
    #dbg_declare(ptr %arg166, !1957, !DIExpression(), !1959)
  %87 = load ptr, ptr %1, align 8, !dbg !1959
  store ptr %87, ptr %arg166, align 8, !dbg !1959
  %88 = load ptr, ptr %arg166, align 8, !dbg !1960
  %checknull168 = icmp eq ptr %88, null, !dbg !1960
  %89 = call i1 @llvm.expect.i1(i1 %checknull168, i1 false), !dbg !1960
  br i1 %89, label %panic169, label %checkok173, !dbg !1960

checkok173:                                       ; preds = %switch.case165
  %90 = load i32, ptr %88, align 4, !dbg !1960
  %uifp174 = uitofp i32 %90 to double, !dbg !1960
  store double %uifp174, ptr %0, align 8, !dbg !1960
  ret i64 0, !dbg !1960

next_if175:                                       ; preds = %result_block164
  br label %check_subtype176, !dbg !1961

check_subtype176:                                 ; preds = %parent_type_block178, %next_if175
  %91 = phi i64 [ %17, %next_if175 ], [ %typeid.parent180, %parent_type_block178 ], !dbg !1961
  %eq177 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %91, !dbg !1961
  br i1 %eq177, label %result_block181, label %parent_type_block178, !dbg !1961

parent_type_block178:                             ; preds = %check_subtype176
  %92 = inttoptr i64 %91 to ptr, !dbg !1961
  %ptradd179 = getelementptr inbounds i8, ptr %92, i64 8, !dbg !1961
  %typeid.parent180 = load i64, ptr %ptradd179, align 8, !dbg !1961
  %93 = icmp eq i64 %typeid.parent180, 0, !dbg !1961
  br i1 %93, label %result_block181, label %check_subtype176, !dbg !1961

result_block181:                                  ; preds = %parent_type_block178, %check_subtype176
  %94 = phi i1 [ false, %parent_type_block178 ], [ true, %check_subtype176 ], !dbg !1961
  br i1 %94, label %switch.case182, label %next_if192, !dbg !1961

switch.case182:                                   ; preds = %result_block181
    #dbg_declare(ptr %arg183, !1962, !DIExpression(), !1964)
  %95 = load ptr, ptr %1, align 8, !dbg !1964
  store ptr %95, ptr %arg183, align 8, !dbg !1964
  %96 = load ptr, ptr %arg183, align 8, !dbg !1965
  %checknull185 = icmp eq ptr %96, null, !dbg !1965
  %97 = call i1 @llvm.expect.i1(i1 %checknull185, i1 false), !dbg !1965
  br i1 %97, label %panic186, label %checkok190, !dbg !1965

checkok190:                                       ; preds = %switch.case182
  %98 = load i64, ptr %96, align 8, !dbg !1965
  %uifp191 = uitofp i64 %98 to double, !dbg !1965
  store double %uifp191, ptr %0, align 8, !dbg !1965
  ret i64 0, !dbg !1965

next_if192:                                       ; preds = %result_block181
  br label %check_subtype193, !dbg !1966

check_subtype193:                                 ; preds = %parent_type_block195, %next_if192
  %99 = phi i64 [ %17, %next_if192 ], [ %typeid.parent197, %parent_type_block195 ], !dbg !1966
  %eq194 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %99, !dbg !1966
  br i1 %eq194, label %result_block198, label %parent_type_block195, !dbg !1966

parent_type_block195:                             ; preds = %check_subtype193
  %100 = inttoptr i64 %99 to ptr, !dbg !1966
  %ptradd196 = getelementptr inbounds i8, ptr %100, i64 8, !dbg !1966
  %typeid.parent197 = load i64, ptr %ptradd196, align 8, !dbg !1966
  %101 = icmp eq i64 %typeid.parent197, 0, !dbg !1966
  br i1 %101, label %result_block198, label %check_subtype193, !dbg !1966

result_block198:                                  ; preds = %parent_type_block195, %check_subtype193
  %102 = phi i1 [ false, %parent_type_block195 ], [ true, %check_subtype193 ], !dbg !1966
  br i1 %102, label %switch.case199, label %next_if209, !dbg !1966

switch.case199:                                   ; preds = %result_block198
    #dbg_declare(ptr %arg200, !1967, !DIExpression(), !1969)
  %103 = load ptr, ptr %1, align 8, !dbg !1969
  store ptr %103, ptr %arg200, align 8, !dbg !1969
  %104 = load ptr, ptr %arg200, align 8, !dbg !1970
  %checknull202 = icmp eq ptr %104, null, !dbg !1970
  %105 = call i1 @llvm.expect.i1(i1 %checknull202, i1 false), !dbg !1970
  br i1 %105, label %panic203, label %checkok207, !dbg !1970

checkok207:                                       ; preds = %switch.case199
  %106 = load i128, ptr %104, align 16, !dbg !1970
  %uifp208 = uitofp i128 %106 to double, !dbg !1970
  store double %uifp208, ptr %0, align 8, !dbg !1970
  ret i64 0, !dbg !1970

next_if209:                                       ; preds = %result_block198
  br label %check_subtype210, !dbg !1971

check_subtype210:                                 ; preds = %parent_type_block212, %next_if209
  %107 = phi i64 [ %17, %next_if209 ], [ %typeid.parent214, %parent_type_block212 ], !dbg !1971
  %eq211 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %107, !dbg !1971
  br i1 %eq211, label %result_block215, label %parent_type_block212, !dbg !1971

parent_type_block212:                             ; preds = %check_subtype210
  %108 = inttoptr i64 %107 to ptr, !dbg !1971
  %ptradd213 = getelementptr inbounds i8, ptr %108, i64 8, !dbg !1971
  %typeid.parent214 = load i64, ptr %ptradd213, align 8, !dbg !1971
  %109 = icmp eq i64 %typeid.parent214, 0, !dbg !1971
  br i1 %109, label %result_block215, label %check_subtype210, !dbg !1971

result_block215:                                  ; preds = %parent_type_block212, %check_subtype210
  %110 = phi i1 [ false, %parent_type_block212 ], [ true, %check_subtype210 ], !dbg !1971
  br i1 %110, label %switch.case216, label %next_if225, !dbg !1971

switch.case216:                                   ; preds = %result_block215
    #dbg_declare(ptr %arg217, !1972, !DIExpression(), !1974)
  %111 = load ptr, ptr %1, align 8, !dbg !1974
  store ptr %111, ptr %arg217, align 8, !dbg !1974
  %112 = load ptr, ptr %arg217, align 8, !dbg !1975
  %checknull219 = icmp eq ptr %112, null, !dbg !1975
  %113 = call i1 @llvm.expect.i1(i1 %checknull219, i1 false), !dbg !1975
  br i1 %113, label %panic220, label %checkok224, !dbg !1975

checkok224:                                       ; preds = %switch.case216
  %114 = load float, ptr %112, align 4, !dbg !1975
  %fpfpext = fpext float %114 to double, !dbg !1975
  store double %fpfpext, ptr %0, align 8, !dbg !1975
  ret i64 0, !dbg !1975

next_if225:                                       ; preds = %result_block215
  br label %check_subtype226, !dbg !1976

check_subtype226:                                 ; preds = %parent_type_block228, %next_if225
  %115 = phi i64 [ %17, %next_if225 ], [ %typeid.parent230, %parent_type_block228 ], !dbg !1976
  %eq227 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %115, !dbg !1976
  br i1 %eq227, label %result_block231, label %parent_type_block228, !dbg !1976

parent_type_block228:                             ; preds = %check_subtype226
  %116 = inttoptr i64 %115 to ptr, !dbg !1976
  %ptradd229 = getelementptr inbounds i8, ptr %116, i64 8, !dbg !1976
  %typeid.parent230 = load i64, ptr %ptradd229, align 8, !dbg !1976
  %117 = icmp eq i64 %typeid.parent230, 0, !dbg !1976
  br i1 %117, label %result_block231, label %check_subtype226, !dbg !1976

result_block231:                                  ; preds = %parent_type_block228, %check_subtype226
  %118 = phi i1 [ false, %parent_type_block228 ], [ true, %check_subtype226 ], !dbg !1976
  br i1 %118, label %switch.case232, label %next_if241, !dbg !1976

switch.case232:                                   ; preds = %result_block231
    #dbg_declare(ptr %arg233, !1977, !DIExpression(), !1979)
  %119 = load ptr, ptr %1, align 8, !dbg !1979
  store ptr %119, ptr %arg233, align 8, !dbg !1979
  %120 = load ptr, ptr %arg233, align 8, !dbg !1980
  %checknull235 = icmp eq ptr %120, null, !dbg !1980
  %121 = call i1 @llvm.expect.i1(i1 %checknull235, i1 false), !dbg !1980
  br i1 %121, label %panic236, label %checkok240, !dbg !1980

checkok240:                                       ; preds = %switch.case232
  %122 = load double, ptr %120, align 8, !dbg !1980
  store double %122, ptr %0, align 8, !dbg !1980
  ret i64 0, !dbg !1980

next_if241:                                       ; preds = %result_block231
  br label %switch.default, !dbg !1980

switch.default:                                   ; preds = %next_if241
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !1981

panic:                                            ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg2, align 8
  %123 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %123(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 199), !dbg !1910
  unreachable, !dbg !1910

panic4:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.49, i64 10 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg7, align 8
  %124 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %124(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 199), !dbg !1910
  unreachable, !dbg !1910

panic37:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg40, align 8
  %125 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %125(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 91), !dbg !1920
  unreachable, !dbg !1920

panic52:                                          ; preds = %switch.case48
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg55, align 8
  %126 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %126(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 93), !dbg !1925
  unreachable, !dbg !1925

panic68:                                          ; preds = %switch.case64
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg71, align 8
  %127 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %127(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 95), !dbg !1930
  unreachable, !dbg !1930

panic85:                                          ; preds = %switch.case81
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg88, align 8
  %128 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %128(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 97), !dbg !1935
  unreachable, !dbg !1935

panic102:                                         ; preds = %switch.case98
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg104, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg105, align 8
  %129 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %129(ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, ptr align 8 %indirectarg105, i32 99), !dbg !1940
  unreachable, !dbg !1940

panic119:                                         ; preds = %switch.case115
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg121, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg122, align 8
  %130 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %130(ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, ptr align 8 %indirectarg122, i32 101), !dbg !1945
  unreachable, !dbg !1945

panic136:                                         ; preds = %switch.case132
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg139, align 8
  %131 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %131(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 103), !dbg !1950
  unreachable, !dbg !1950

panic152:                                         ; preds = %switch.case148
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg154, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg155, align 8
  %132 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %132(ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, ptr align 8 %indirectarg155, i32 105), !dbg !1955
  unreachable, !dbg !1955

panic169:                                         ; preds = %switch.case165
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg170, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg171, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg172, align 8
  %133 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %133(ptr align 8 %indirectarg170, ptr align 8 %indirectarg171, ptr align 8 %indirectarg172, i32 107), !dbg !1960
  unreachable, !dbg !1960

panic186:                                         ; preds = %switch.case182
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg189, align 8
  %134 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %134(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 109), !dbg !1965
  unreachable, !dbg !1965

panic203:                                         ; preds = %switch.case199
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg204, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg206, align 8
  %135 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %135(ptr align 8 %indirectarg204, ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, i32 111), !dbg !1970
  unreachable, !dbg !1970

panic220:                                         ; preds = %switch.case216
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg221, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg222, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg223, align 8
  %136 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %136(ptr align 8 %indirectarg221, ptr align 8 %indirectarg222, ptr align 8 %indirectarg223, i32 113), !dbg !1975
  unreachable, !dbg !1975

panic236:                                         ; preds = %switch.case232
  store %"char[]" { ptr @.panic_msg.145, i64 44 }, ptr %indirectarg237, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg238, align 8
  store %"char[]" { ptr @.func.146, i64 14 }, ptr %indirectarg239, align 8
  %137 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %137(ptr align 8 %indirectarg237, ptr align 8 %indirectarg238, ptr align 8 %indirectarg239, i32 115), !dbg !1980
  unreachable, !dbg !1980
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @std.io.simple_atoi(ptr %0, i64 %1, ptr %2) #0 !dbg !1983 {
entry:
  %buf = alloca ptr, align 8
  %maxlen = alloca i64, align 8
  %len_ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %c = alloca i8, align 1
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  store ptr %0, ptr %buf, align 8
    #dbg_declare(ptr %buf, !1986, !DIExpression(), !1987)
  store i64 %1, ptr %maxlen, align 8
    #dbg_declare(ptr %maxlen, !1988, !DIExpression(), !1987)
  store ptr %2, ptr %len_ptr, align 8
    #dbg_declare(ptr %len_ptr, !1989, !DIExpression(), !1987)
    #dbg_declare(ptr %i, !1990, !DIExpression(), !1991)
  store i32 0, ptr %i, align 4, !dbg !1991
    #dbg_declare(ptr %len, !1992, !DIExpression(), !1993)
  %3 = load ptr, ptr %len_ptr, align 8, !dbg !1993
  %checknull = icmp eq ptr %3, null, !dbg !1993
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1993
  br i1 %4, label %panic, label %checkok, !dbg !1993

checkok:                                          ; preds = %entry
  %5 = load i64, ptr %3, align 8, !dbg !1993
  store i64 %5, ptr %len, align 8, !dbg !1993
  br label %loop.cond, !dbg !1994

loop.cond:                                        ; preds = %if.exit, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !1995
  %7 = load i64, ptr %maxlen, align 8, !dbg !1995
  %lt = icmp ult i64 %6, %7, !dbg !1995
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1995

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %c, !1997, !DIExpression(), !1999)
  %8 = load ptr, ptr %buf, align 8, !dbg !1999
  %9 = load i64, ptr %len, align 8, !dbg !1999
  %ptradd = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !1999
  %10 = load i8, ptr %ptradd, align 1, !dbg !1999
  store i8 %10, ptr %c, align 1, !dbg !1999
  %11 = load i8, ptr %c, align 1, !dbg !2000
  %12 = call i8 @std.ascii.char.is_digit(i8 %11), !dbg !2000
  %13 = trunc i8 %12 to i1, !dbg !2000
  %not = xor i1 %13, true, !dbg !2000
  br i1 %not, label %if.then, label %if.exit, !dbg !2000

if.then:                                          ; preds = %loop.body
  br label %loop.exit, !dbg !2000

if.exit:                                          ; preds = %loop.body
  %14 = load i32, ptr %i, align 4, !dbg !2001
  %mul = mul i32 %14, 10, !dbg !2001
  %15 = load i8, ptr %c, align 1, !dbg !2001
  %zext = zext i8 %15 to i32, !dbg !2001
  %add = add i32 %mul, %zext, !dbg !2001
  %sub = sub i32 %add, 48, !dbg !2001
  store i32 %sub, ptr %i, align 4, !dbg !2001
  %16 = load i64, ptr %len, align 8, !dbg !2002
  %add3 = add i64 %16, 1, !dbg !2002
  store i64 %add3, ptr %len, align 8, !dbg !2002
  br label %loop.cond, !dbg !2002

loop.exit:                                        ; preds = %if.then, %loop.cond
  %17 = load ptr, ptr %len_ptr, align 8, !dbg !2003
  %checknull4 = icmp eq ptr %17, null, !dbg !2003
  %18 = call i1 @llvm.expect.i1(i1 %checknull4, i1 false), !dbg !2003
  br i1 %18, label %panic5, label %checkok9, !dbg !2003

checkok9:                                         ; preds = %loop.exit
  %19 = load i64, ptr %len, align 8, !dbg !2003
  store i64 %19, ptr %17, align 8, !dbg !2003
  %20 = load i32, ptr %i, align 4, !dbg !2004
  ret i32 %20, !dbg !2004

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.147, i64 48 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.148, i64 11 }, ptr %indirectarg2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 133), !dbg !1993
  unreachable, !dbg !1993

panic5:                                           ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.147, i64 48 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.148, i64 11 }, ptr %indirectarg8, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 141), !dbg !2003
  unreachable, !dbg !2003
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.fmt_u(ptr align 16 %0, ptr %1) #0 comdat !dbg !2005 {
entry:
  %s = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %y = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
    #dbg_declare(ptr %0, !2008, !DIExpression(), !2009)
  store ptr %1, ptr %s, align 8
    #dbg_declare(ptr %s, !2010, !DIExpression(), !2009)
  br label %loop.cond, !dbg !2011

loop.cond:                                        ; preds = %checkok, %entry
  %2 = load i128, ptr %0, align 16, !dbg !2012
  %gt = icmp ugt i128 %2, 18446744073709551615, !dbg !2012
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !2012

loop.body:                                        ; preds = %loop.cond
  %3 = load ptr, ptr %s, align 8, !dbg !2012
  %ptradd_any = getelementptr i8, ptr %3, i8 -1, !dbg !2012
  store ptr %ptradd_any, ptr %s, align 8, !dbg !2012
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !2012
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2012
  br i1 %4, label %panic, label %checkok, !dbg !2012

checkok:                                          ; preds = %loop.body
  %5 = load i128, ptr %0, align 16, !dbg !2012
  %smod = srem i128 %5, 10, !dbg !2012
  %trunc = trunc i128 %smod to i8, !dbg !2012
  %zext = zext i8 %trunc to i32, !dbg !2012
  %add = add i32 48, %zext, !dbg !2012
  %trunc3 = trunc i32 %add to i8, !dbg !2012
  store i8 %trunc3, ptr %ptradd_any, align 1, !dbg !2012
  %6 = load i128, ptr %0, align 16, !dbg !2012
  %udiv = udiv i128 %6, 10, !dbg !2012
  store i128 %udiv, ptr %0, align 16, !dbg !2012
  br label %loop.cond, !dbg !2012

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %y, !2014, !DIExpression(), !2016)
  %7 = load i128, ptr %0, align 16, !dbg !2016
  %trunc4 = trunc i128 %7 to i64, !dbg !2016
  store i64 %trunc4, ptr %y, align 8, !dbg !2016
  br label %loop.cond5, !dbg !2016

loop.cond5:                                       ; preds = %checkok13, %loop.exit
  %8 = load i64, ptr %y, align 8, !dbg !2016
  %i2b = icmp ne i64 %8, 0, !dbg !2016
  br i1 %i2b, label %loop.body6, label %loop.exit20, !dbg !2016

loop.body6:                                       ; preds = %loop.cond5
  %9 = load ptr, ptr %s, align 8, !dbg !2016
  %ptradd_any7 = getelementptr i8, ptr %9, i8 -1, !dbg !2016
  store ptr %ptradd_any7, ptr %s, align 8, !dbg !2016
  %checknull8 = icmp eq ptr %ptradd_any7, null, !dbg !2016
  %10 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2016
  br i1 %10, label %panic9, label %checkok13, !dbg !2016

checkok13:                                        ; preds = %loop.body6
  %11 = load i64, ptr %y, align 8, !dbg !2016
  %smod14 = srem i64 %11, 10, !dbg !2016
  %trunc15 = trunc i64 %smod14 to i8, !dbg !2016
  %zext16 = zext i8 %trunc15 to i32, !dbg !2016
  %add17 = add i32 48, %zext16, !dbg !2016
  %trunc18 = trunc i32 %add17 to i8, !dbg !2016
  store i8 %trunc18, ptr %ptradd_any7, align 1, !dbg !2016
  %12 = load i64, ptr %y, align 8, !dbg !2016
  %udiv19 = udiv i64 %12, 10, !dbg !2016
  store i64 %udiv19, ptr %y, align 8, !dbg !2016
  br label %loop.cond5, !dbg !2016

loop.exit20:                                      ; preds = %loop.cond5
  %13 = load ptr, ptr %s, align 8, !dbg !2017
  ret ptr %13, !dbg !2017

panic:                                            ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.149, i64 44 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.150, i64 5 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 173), !dbg !2012
  unreachable, !dbg !2012

panic9:                                           ; preds = %loop.body6
  store %"char[]" { ptr @.panic_msg.149, i64 44 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.150, i64 5 }, ptr %indirectarg12, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 174), !dbg !2016
  unreachable, !dbg !2016
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.printf_parse_format_field(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i64 %5, ptr %6) #0 !dbg !2018 {
entry:
  %args_ptr = alloca ptr, align 8
  %args_len = alloca i64, align 8
  %args_index_ptr = alloca ptr, align 8
  %format_ptr = alloca ptr, align 8
  %format_len = alloca i64, align 8
  %index_ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %reterr4 = alloca i64, align 8
  %len = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %val = alloca %any, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %intval = alloca i32, align 4
  %intval.f = alloca i64, align 8
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c51 = alloca i8, align 1
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %i = alloca i32, align 4
  %indirectarg99 = alloca %"char[]", align 8
  %indirectarg100 = alloca %"char[]", align 8
  %indirectarg101 = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %i153 = alloca i128, align 16
  %indirectarg156 = alloca %"char[]", align 8
  %indirectarg157 = alloca %"char[]", align 8
  %indirectarg158 = alloca %"char[]", align 8
  %c184 = alloca i8, align 1
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %s203 = alloca i16, align 2
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %indirectarg208 = alloca %"char[]", align 8
  %i231 = alloca i32, align 4
  %indirectarg234 = alloca %"char[]", align 8
  %indirectarg235 = alloca %"char[]", align 8
  %indirectarg236 = alloca %"char[]", align 8
  %l257 = alloca i64, align 8
  %indirectarg260 = alloca %"char[]", align 8
  %indirectarg261 = alloca %"char[]", align 8
  %indirectarg262 = alloca %"char[]", align 8
  %i286 = alloca i128, align 16
  %indirectarg289 = alloca %"char[]", align 8
  %indirectarg290 = alloca %"char[]", align 8
  %indirectarg291 = alloca %"char[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg308 = alloca %"char[]", align 8
  %indirectarg309 = alloca %"char[]", align 8
  %indirectarg310 = alloca %"char[]", align 8
  %indirectarg311 = alloca %"any[]", align 8
  %reterr312 = alloca i64, align 8
  store ptr %1, ptr %args_ptr, align 8
    #dbg_declare(ptr %args_ptr, !2021, !DIExpression(), !2022)
  store i64 %2, ptr %args_len, align 8
    #dbg_declare(ptr %args_len, !2023, !DIExpression(), !2022)
  store ptr %3, ptr %args_index_ptr, align 8
    #dbg_declare(ptr %args_index_ptr, !2024, !DIExpression(), !2022)
  store ptr %4, ptr %format_ptr, align 8
    #dbg_declare(ptr %format_ptr, !2025, !DIExpression(), !2026)
  store i64 %5, ptr %format_len, align 8
    #dbg_declare(ptr %format_len, !2027, !DIExpression(), !2026)
  store ptr %6, ptr %index_ptr, align 8
    #dbg_declare(ptr %index_ptr, !2028, !DIExpression(), !2026)
    #dbg_declare(ptr %c, !2029, !DIExpression(), !2030)
  %7 = load ptr, ptr %format_ptr, align 8, !dbg !2030
  %8 = load ptr, ptr %index_ptr, align 8, !dbg !2030
  %checknull = icmp eq ptr %8, null, !dbg !2030
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2030
  br i1 %9, label %panic, label %checkok, !dbg !2030

checkok:                                          ; preds = %entry
  %10 = load i64, ptr %8, align 8, !dbg !2030
  %ptradd = getelementptr inbounds i8, ptr %7, i64 %10, !dbg !2030
  %11 = load i8, ptr %ptradd, align 1, !dbg !2030
  store i8 %11, ptr %c, align 1, !dbg !2030
  %12 = load i8, ptr %c, align 1, !dbg !2031
  %13 = call i8 @std.ascii.char.is_digit(i8 %12), !dbg !2031
  %14 = trunc i8 %13 to i1, !dbg !2031
  br i1 %14, label %if.then, label %if.exit, !dbg !2031

if.then:                                          ; preds = %checkok
  %15 = load ptr, ptr %format_ptr, align 8, !dbg !2031
  %16 = load i64, ptr %format_len, align 8, !dbg !2031
  %17 = load ptr, ptr %index_ptr, align 8, !dbg !2031
  %18 = call i32 @std.io.simple_atoi(ptr %15, i64 %16, ptr %17) #5, !dbg !2031
  store i32 %18, ptr %0, align 4, !dbg !2031
  ret i64 0, !dbg !2031

if.exit:                                          ; preds = %checkok
  %19 = load i8, ptr %c, align 1, !dbg !2032
  %neq = icmp ne i8 %19, 42, !dbg !2032
  br i1 %neq, label %if.then3, label %if.exit5, !dbg !2032

if.then3:                                         ; preds = %if.exit
  store i32 0, ptr %0, align 4, !dbg !2032
  ret i64 0, !dbg !2032

if.exit5:                                         ; preds = %if.exit
    #dbg_declare(ptr %len, !2033, !DIExpression(), !2034)
  %20 = load ptr, ptr %index_ptr, align 8, !dbg !2034
  %checknull6 = icmp eq ptr %20, null, !dbg !2034
  %21 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !2034
  br i1 %21, label %panic7, label %checkok11, !dbg !2034

checkok11:                                        ; preds = %if.exit5
  %22 = load i64, ptr %20, align 8, !dbg !2034
  %add = add i64 %22, 1, !dbg !2034
  store i64 %add, ptr %20, align 8, !dbg !2034
  store i64 %add, ptr %len, align 8, !dbg !2034
  %23 = load i64, ptr %len, align 8, !dbg !2035
  %24 = load i64, ptr %format_len, align 8, !dbg !2035
  %ge = icmp uge i64 %23, %24, !dbg !2035
  br i1 %ge, label %if.then12, label %if.exit13, !dbg !2035

if.then12:                                        ; preds = %checkok11
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !2035

if.exit13:                                        ; preds = %checkok11
  %25 = load ptr, ptr %args_index_ptr, align 8, !dbg !2036
  %checknull14 = icmp eq ptr %25, null, !dbg !2036
  %26 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !2036
  br i1 %26, label %panic15, label %checkok19, !dbg !2036

checkok19:                                        ; preds = %if.exit13
  %27 = load i64, ptr %25, align 8, !dbg !2036
  %28 = load i64, ptr %args_len, align 8, !dbg !2036
  %ge20 = icmp uge i64 %27, %28, !dbg !2036
  br i1 %ge20, label %if.then21, label %if.exit22, !dbg !2036

if.then21:                                        ; preds = %checkok19
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !2036

if.exit22:                                        ; preds = %checkok19
    #dbg_declare(ptr %val, !2037, !DIExpression(), !2038)
  %29 = load ptr, ptr %args_ptr, align 8, !dbg !2038
  %30 = load ptr, ptr %args_index_ptr, align 8, !dbg !2038
  %checknull23 = icmp eq ptr %30, null, !dbg !2038
  %31 = call i1 @llvm.expect.i1(i1 %checknull23, i1 false), !dbg !2038
  br i1 %31, label %panic24, label %checkok28, !dbg !2038

checkok28:                                        ; preds = %if.exit22
  %32 = load i64, ptr %30, align 8, !dbg !2038
  %add29 = add i64 %32, 1, !dbg !2038
  store i64 %add29, ptr %30, align 8, !dbg !2038
  %ptroffset = getelementptr inbounds [16 x i8], ptr %29, i64 %32, !dbg !2038
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %val, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !2038
  %ptradd30 = getelementptr inbounds i8, ptr %val, i64 8, !dbg !2039
  %33 = load i64, ptr %ptradd30, align 8, !dbg !2039
  %"introspect*" = inttoptr i64 %33 to ptr, !dbg !2039
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2039
  %34 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind) #5, !dbg !2039
  %35 = trunc i8 %34 to i1, !dbg !2039
  %not = xor i1 %35, true, !dbg !2039
  br i1 %not, label %if.then31, label %if.exit32, !dbg !2039

if.then31:                                        ; preds = %checkok28
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !2039

if.exit32:                                        ; preds = %checkok28
    #dbg_declare(ptr %intval, !2040, !DIExpression(), !2041)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %val, i32 16, i1 false)
  %36 = call i8 @std.core.types.TypeKind.is_int(i8 2) #5, !dbg !2042
  %37 = trunc i8 %36 to i1, !dbg !2042
  br i1 %37, label %assert_ok, label %assert_fail, !dbg !2042

assert_fail:                                      ; preds = %if.exit32
  store %"char[]" { ptr @.panic_msg.79, i64 69 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg35, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 22), !dbg !2042
  unreachable, !dbg !2042

assert_ok:                                        ; preds = %if.exit32
  %ptradd36 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2045
  %39 = load i64, ptr %ptradd36, align 8, !dbg !2045
  %"introspect*37" = inttoptr i64 %39 to ptr, !dbg !2045
  %typeid.kind38 = load i8, ptr %"introspect*37", align 8, !dbg !2045
  %40 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind38) #5, !dbg !2045
  %41 = trunc i8 %40 to i1, !dbg !2045
  br i1 %41, label %assert_ok43, label %assert_fail39, !dbg !2045

assert_fail39:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.83, i64 71 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg42, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 23), !dbg !2045
  unreachable, !dbg !2045

assert_ok43:                                      ; preds = %assert_ok
    #dbg_declare(ptr %any_type, !2046, !DIExpression(), !2047)
  %ptradd44 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2047
  %43 = load i64, ptr %ptradd44, align 8, !dbg !2047
  store i64 %43, ptr %any_type, align 8, !dbg !2047
    #dbg_declare(ptr %kind, !2048, !DIExpression(), !2049)
  %44 = load i64, ptr %any_type, align 8, !dbg !2049
  %"introspect*45" = inttoptr i64 %44 to ptr, !dbg !2049
  %typeid.kind46 = load i8, ptr %"introspect*45", align 8, !dbg !2049
  store i8 %typeid.kind46, ptr %kind, align 1, !dbg !2049
    #dbg_declare(ptr %is_mixed_signed, !2050, !DIExpression(), !2051)
  %45 = load i64, ptr %any_type, align 8, !dbg !2051
  %"introspect*47" = inttoptr i64 %45 to ptr, !dbg !2051
  %typeid.kind48 = load i8, ptr %"introspect*47", align 8, !dbg !2051
  %neq49 = icmp ne i8 2, %typeid.kind48, !dbg !2051
  %46 = zext i1 %neq49 to i8, !dbg !2051
  store i8 %46, ptr %is_mixed_signed, align 1, !dbg !2051
    #dbg_declare(ptr %max, !2052, !DIExpression(), !2053)
  store i32 2147483647, ptr %max, align 4, !dbg !2053
    #dbg_declare(ptr %min, !2054, !DIExpression(), !2055)
  store i32 -2147483648, ptr %min, align 4, !dbg !2055
  %47 = load i64, ptr %any_type, align 8
  store i64 %47, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok43
  %48 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !2056

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %49 = phi i64 [ %48, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !2056
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %49, !dbg !2056
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !2056

parent_type_block:                                ; preds = %check_subtype
  %50 = inttoptr i64 %49 to ptr, !dbg !2056
  %ptradd50 = getelementptr inbounds i8, ptr %50, i64 8, !dbg !2056
  %typeid.parent = load i64, ptr %ptradd50, align 8, !dbg !2056
  %51 = icmp eq i64 %typeid.parent, 0, !dbg !2056
  br i1 %51, label %result_block, label %check_subtype, !dbg !2056

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %52 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2056
  br i1 %52, label %switch.case, label %next_if, !dbg !2056

switch.case:                                      ; preds = %result_block
    #dbg_declare(ptr %c51, !2058, !DIExpression(), !2060)
  %53 = load ptr, ptr %v, align 8, !dbg !2060
  %checknull52 = icmp eq ptr %53, null, !dbg !2060
  %54 = call i1 @llvm.expect.i1(i1 %checknull52, i1 false), !dbg !2060
  br i1 %54, label %panic53, label %checkok57, !dbg !2060

checkok57:                                        ; preds = %switch.case
  %55 = load i8, ptr %53, align 1, !dbg !2060
  store i8 %55, ptr %c51, align 1, !dbg !2060
  %56 = load i8, ptr %is_mixed_signed, align 1, !dbg !2061
  %57 = trunc i8 %56 to i1, !dbg !2061
  br i1 %57, label %and.rhs, label %and.phi, !dbg !2061

and.rhs:                                          ; preds = %checkok57
  %58 = load i8, ptr %c51, align 1, !dbg !2061
  %sext = sext i8 %58 to i32, !dbg !2061
  %lt = icmp slt i32 %sext, 0, !dbg !2061
  br label %and.phi, !dbg !2061

and.phi:                                          ; preds = %and.rhs, %checkok57
  %val58 = phi i1 [ false, %checkok57 ], [ %lt, %and.rhs ], !dbg !2061
  br i1 %val58, label %if.then59, label %if.exit60, !dbg !2061

if.then59:                                        ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !2061
  br label %after_assign, !dbg !2061

if.exit60:                                        ; preds = %and.phi
  %59 = load i8, ptr %c51, align 1, !dbg !2062
  %sext61 = sext i8 %59 to i32, !dbg !2062
  store i32 %sext61, ptr %blockret, align 4, !dbg !2062
  br label %expr_block.exit, !dbg !2062

next_if:                                          ; preds = %result_block
  br label %check_subtype62, !dbg !2063

check_subtype62:                                  ; preds = %parent_type_block64, %next_if
  %60 = phi i64 [ %48, %next_if ], [ %typeid.parent66, %parent_type_block64 ], !dbg !2063
  %eq63 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %60, !dbg !2063
  br i1 %eq63, label %result_block67, label %parent_type_block64, !dbg !2063

parent_type_block64:                              ; preds = %check_subtype62
  %61 = inttoptr i64 %60 to ptr, !dbg !2063
  %ptradd65 = getelementptr inbounds i8, ptr %61, i64 8, !dbg !2063
  %typeid.parent66 = load i64, ptr %ptradd65, align 8, !dbg !2063
  %62 = icmp eq i64 %typeid.parent66, 0, !dbg !2063
  br i1 %62, label %result_block67, label %check_subtype62, !dbg !2063

result_block67:                                   ; preds = %parent_type_block64, %check_subtype62
  %63 = phi i1 [ false, %parent_type_block64 ], [ true, %check_subtype62 ], !dbg !2063
  br i1 %63, label %switch.case68, label %next_if89, !dbg !2063

switch.case68:                                    ; preds = %result_block67
    #dbg_declare(ptr %s, !2064, !DIExpression(), !2066)
  %64 = load ptr, ptr %v, align 8, !dbg !2066
  %checknull69 = icmp eq ptr %64, null, !dbg !2066
  %65 = call i1 @llvm.expect.i1(i1 %checknull69, i1 false), !dbg !2066
  br i1 %65, label %panic70, label %checkok74, !dbg !2066

checkok74:                                        ; preds = %switch.case68
  %66 = load i16, ptr %64, align 2, !dbg !2066
  store i16 %66, ptr %s, align 2, !dbg !2066
  %67 = load i8, ptr %is_mixed_signed, align 1, !dbg !2067
  %68 = trunc i8 %67 to i1, !dbg !2067
  br i1 %68, label %and.rhs75, label %and.phi78, !dbg !2067

and.rhs75:                                        ; preds = %checkok74
  %69 = load i16, ptr %s, align 2, !dbg !2067
  %sext76 = sext i16 %69 to i32, !dbg !2067
  %lt77 = icmp slt i32 %sext76, 0, !dbg !2067
  br label %and.phi78, !dbg !2067

and.phi78:                                        ; preds = %and.rhs75, %checkok74
  %val79 = phi i1 [ false, %checkok74 ], [ %lt77, %and.rhs75 ], !dbg !2067
  br i1 %val79, label %if.then80, label %if.exit81, !dbg !2067

if.then80:                                        ; preds = %and.phi78
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !2067
  br label %after_assign, !dbg !2067

if.exit81:                                        ; preds = %and.phi78
  %70 = load i16, ptr %s, align 2, !dbg !2068
  %sext82 = sext i16 %70 to i32, !dbg !2068
  %71 = load i32, ptr %max, align 4, !dbg !2068
  %gt = icmp sgt i32 %sext82, %71, !dbg !2068
  br i1 %gt, label %or.phi, label %or.rhs, !dbg !2068

or.rhs:                                           ; preds = %if.exit81
  %72 = load i16, ptr %s, align 2, !dbg !2068
  %sext83 = sext i16 %72 to i32, !dbg !2068
  %73 = load i32, ptr %min, align 4, !dbg !2068
  %lt84 = icmp slt i32 %sext83, %73, !dbg !2068
  br label %or.phi, !dbg !2068

or.phi:                                           ; preds = %or.rhs, %if.exit81
  %val85 = phi i1 [ true, %if.exit81 ], [ %lt84, %or.rhs ], !dbg !2068
  br i1 %val85, label %if.then86, label %if.exit87, !dbg !2068

if.then86:                                        ; preds = %or.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2068
  br label %after_assign, !dbg !2068

if.exit87:                                        ; preds = %or.phi
  %74 = load i16, ptr %s, align 2, !dbg !2069
  %sext88 = sext i16 %74 to i32, !dbg !2069
  store i32 %sext88, ptr %blockret, align 4, !dbg !2069
  br label %expr_block.exit, !dbg !2069

next_if89:                                        ; preds = %result_block67
  br label %check_subtype90, !dbg !2070

check_subtype90:                                  ; preds = %parent_type_block92, %next_if89
  %75 = phi i64 [ %48, %next_if89 ], [ %typeid.parent94, %parent_type_block92 ], !dbg !2070
  %eq91 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %75, !dbg !2070
  br i1 %eq91, label %result_block95, label %parent_type_block92, !dbg !2070

parent_type_block92:                              ; preds = %check_subtype90
  %76 = inttoptr i64 %75 to ptr, !dbg !2070
  %ptradd93 = getelementptr inbounds i8, ptr %76, i64 8, !dbg !2070
  %typeid.parent94 = load i64, ptr %ptradd93, align 8, !dbg !2070
  %77 = icmp eq i64 %typeid.parent94, 0, !dbg !2070
  br i1 %77, label %result_block95, label %check_subtype90, !dbg !2070

result_block95:                                   ; preds = %parent_type_block92, %check_subtype90
  %78 = phi i1 [ false, %parent_type_block92 ], [ true, %check_subtype90 ], !dbg !2070
  br i1 %78, label %switch.case96, label %next_if116, !dbg !2070

switch.case96:                                    ; preds = %result_block95
    #dbg_declare(ptr %i, !2071, !DIExpression(), !2073)
  %79 = load ptr, ptr %v, align 8, !dbg !2073
  %checknull97 = icmp eq ptr %79, null, !dbg !2073
  %80 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !2073
  br i1 %80, label %panic98, label %checkok102, !dbg !2073

checkok102:                                       ; preds = %switch.case96
  %81 = load i32, ptr %79, align 4, !dbg !2073
  store i32 %81, ptr %i, align 4, !dbg !2073
  %82 = load i8, ptr %is_mixed_signed, align 1, !dbg !2074
  %83 = trunc i8 %82 to i1, !dbg !2074
  br i1 %83, label %and.rhs103, label %and.phi105, !dbg !2074

and.rhs103:                                       ; preds = %checkok102
  %84 = load i32, ptr %i, align 4, !dbg !2074
  %lt104 = icmp slt i32 %84, 0, !dbg !2074
  br label %and.phi105, !dbg !2074

and.phi105:                                       ; preds = %and.rhs103, %checkok102
  %val106 = phi i1 [ false, %checkok102 ], [ %lt104, %and.rhs103 ], !dbg !2074
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !2074

if.then107:                                       ; preds = %and.phi105
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !2074
  br label %after_assign, !dbg !2074

if.exit108:                                       ; preds = %and.phi105
  %85 = load i32, ptr %i, align 4, !dbg !2075
  %86 = load i32, ptr %max, align 4, !dbg !2075
  %gt109 = icmp sgt i32 %85, %86, !dbg !2075
  br i1 %gt109, label %or.phi112, label %or.rhs110, !dbg !2075

or.rhs110:                                        ; preds = %if.exit108
  %87 = load i32, ptr %i, align 4, !dbg !2075
  %88 = load i32, ptr %min, align 4, !dbg !2075
  %lt111 = icmp slt i32 %87, %88, !dbg !2075
  br label %or.phi112, !dbg !2075

or.phi112:                                        ; preds = %or.rhs110, %if.exit108
  %val113 = phi i1 [ true, %if.exit108 ], [ %lt111, %or.rhs110 ], !dbg !2075
  br i1 %val113, label %if.then114, label %if.exit115, !dbg !2075

if.then114:                                       ; preds = %or.phi112
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2075
  br label %after_assign, !dbg !2075

if.exit115:                                       ; preds = %or.phi112
  %89 = load i32, ptr %i, align 4, !dbg !2076
  store i32 %89, ptr %blockret, align 4, !dbg !2076
  br label %expr_block.exit, !dbg !2076

next_if116:                                       ; preds = %result_block95
  br label %check_subtype117, !dbg !2077

check_subtype117:                                 ; preds = %parent_type_block119, %next_if116
  %90 = phi i64 [ %48, %next_if116 ], [ %typeid.parent121, %parent_type_block119 ], !dbg !2077
  %eq118 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %90, !dbg !2077
  br i1 %eq118, label %result_block122, label %parent_type_block119, !dbg !2077

parent_type_block119:                             ; preds = %check_subtype117
  %91 = inttoptr i64 %90 to ptr, !dbg !2077
  %ptradd120 = getelementptr inbounds i8, ptr %91, i64 8, !dbg !2077
  %typeid.parent121 = load i64, ptr %ptradd120, align 8, !dbg !2077
  %92 = icmp eq i64 %typeid.parent121, 0, !dbg !2077
  br i1 %92, label %result_block122, label %check_subtype117, !dbg !2077

result_block122:                                  ; preds = %parent_type_block119, %check_subtype117
  %93 = phi i1 [ false, %parent_type_block119 ], [ true, %check_subtype117 ], !dbg !2077
  br i1 %93, label %switch.case123, label %next_if145, !dbg !2077

switch.case123:                                   ; preds = %result_block122
    #dbg_declare(ptr %l, !2078, !DIExpression(), !2080)
  %94 = load ptr, ptr %v, align 8, !dbg !2080
  %checknull124 = icmp eq ptr %94, null, !dbg !2080
  %95 = call i1 @llvm.expect.i1(i1 %checknull124, i1 false), !dbg !2080
  br i1 %95, label %panic125, label %checkok129, !dbg !2080

checkok129:                                       ; preds = %switch.case123
  %96 = load i64, ptr %94, align 8, !dbg !2080
  store i64 %96, ptr %l, align 8, !dbg !2080
  %97 = load i8, ptr %is_mixed_signed, align 1, !dbg !2081
  %98 = trunc i8 %97 to i1, !dbg !2081
  br i1 %98, label %and.rhs130, label %and.phi132, !dbg !2081

and.rhs130:                                       ; preds = %checkok129
  %99 = load i64, ptr %l, align 8, !dbg !2081
  %lt131 = icmp slt i64 %99, 0, !dbg !2081
  br label %and.phi132, !dbg !2081

and.phi132:                                       ; preds = %and.rhs130, %checkok129
  %val133 = phi i1 [ false, %checkok129 ], [ %lt131, %and.rhs130 ], !dbg !2081
  br i1 %val133, label %if.then134, label %if.exit135, !dbg !2081

if.then134:                                       ; preds = %and.phi132
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !2081
  br label %after_assign, !dbg !2081

if.exit135:                                       ; preds = %and.phi132
  %100 = load i64, ptr %l, align 8, !dbg !2082
  %101 = load i32, ptr %max, align 4, !dbg !2082
  %sext136 = sext i32 %101 to i64, !dbg !2082
  %gt137 = icmp sgt i64 %100, %sext136, !dbg !2082
  br i1 %gt137, label %or.phi141, label %or.rhs138, !dbg !2082

or.rhs138:                                        ; preds = %if.exit135
  %102 = load i64, ptr %l, align 8, !dbg !2082
  %103 = load i32, ptr %min, align 4, !dbg !2082
  %sext139 = sext i32 %103 to i64, !dbg !2082
  %lt140 = icmp slt i64 %102, %sext139, !dbg !2082
  br label %or.phi141, !dbg !2082

or.phi141:                                        ; preds = %or.rhs138, %if.exit135
  %val142 = phi i1 [ true, %if.exit135 ], [ %lt140, %or.rhs138 ], !dbg !2082
  br i1 %val142, label %if.then143, label %if.exit144, !dbg !2082

if.then143:                                       ; preds = %or.phi141
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2082
  br label %after_assign, !dbg !2082

if.exit144:                                       ; preds = %or.phi141
  %104 = load i64, ptr %l, align 8, !dbg !2083
  %trunc = trunc i64 %104 to i32, !dbg !2083
  store i32 %trunc, ptr %blockret, align 4, !dbg !2083
  br label %expr_block.exit, !dbg !2083

next_if145:                                       ; preds = %result_block122
  br label %check_subtype146, !dbg !2084

check_subtype146:                                 ; preds = %parent_type_block148, %next_if145
  %105 = phi i64 [ %48, %next_if145 ], [ %typeid.parent150, %parent_type_block148 ], !dbg !2084
  %eq147 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %105, !dbg !2084
  br i1 %eq147, label %result_block151, label %parent_type_block148, !dbg !2084

parent_type_block148:                             ; preds = %check_subtype146
  %106 = inttoptr i64 %105 to ptr, !dbg !2084
  %ptradd149 = getelementptr inbounds i8, ptr %106, i64 8, !dbg !2084
  %typeid.parent150 = load i64, ptr %ptradd149, align 8, !dbg !2084
  %107 = icmp eq i64 %typeid.parent150, 0, !dbg !2084
  br i1 %107, label %result_block151, label %check_subtype146, !dbg !2084

result_block151:                                  ; preds = %parent_type_block148, %check_subtype146
  %108 = phi i1 [ false, %parent_type_block148 ], [ true, %check_subtype146 ], !dbg !2084
  br i1 %108, label %switch.case152, label %next_if176, !dbg !2084

switch.case152:                                   ; preds = %result_block151
    #dbg_declare(ptr %i153, !2085, !DIExpression(), !2087)
  %109 = load ptr, ptr %v, align 8, !dbg !2087
  %checknull154 = icmp eq ptr %109, null, !dbg !2087
  %110 = call i1 @llvm.expect.i1(i1 %checknull154, i1 false), !dbg !2087
  br i1 %110, label %panic155, label %checkok159, !dbg !2087

checkok159:                                       ; preds = %switch.case152
  %111 = load i128, ptr %109, align 16, !dbg !2087
  store i128 %111, ptr %i153, align 16, !dbg !2087
  %112 = load i8, ptr %is_mixed_signed, align 1, !dbg !2088
  %113 = trunc i8 %112 to i1, !dbg !2088
  br i1 %113, label %and.rhs160, label %and.phi162, !dbg !2088

and.rhs160:                                       ; preds = %checkok159
  %114 = load i128, ptr %i153, align 16, !dbg !2088
  %lt161 = icmp slt i128 %114, 0, !dbg !2088
  br label %and.phi162, !dbg !2088

and.phi162:                                       ; preds = %and.rhs160, %checkok159
  %val163 = phi i1 [ false, %checkok159 ], [ %lt161, %and.rhs160 ], !dbg !2088
  br i1 %val163, label %if.then164, label %if.exit165, !dbg !2088

if.then164:                                       ; preds = %and.phi162
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !2088
  br label %after_assign, !dbg !2088

if.exit165:                                       ; preds = %and.phi162
  %115 = load i128, ptr %i153, align 16, !dbg !2089
  %116 = load i32, ptr %max, align 4, !dbg !2089
  %sext166 = sext i32 %116 to i128, !dbg !2089
  %gt167 = icmp sgt i128 %115, %sext166, !dbg !2089
  br i1 %gt167, label %or.phi171, label %or.rhs168, !dbg !2089

or.rhs168:                                        ; preds = %if.exit165
  %117 = load i128, ptr %i153, align 16, !dbg !2089
  %118 = load i32, ptr %min, align 4, !dbg !2089
  %sext169 = sext i32 %118 to i128, !dbg !2089
  %lt170 = icmp slt i128 %117, %sext169, !dbg !2089
  br label %or.phi171, !dbg !2089

or.phi171:                                        ; preds = %or.rhs168, %if.exit165
  %val172 = phi i1 [ true, %if.exit165 ], [ %lt170, %or.rhs168 ], !dbg !2089
  br i1 %val172, label %if.then173, label %if.exit174, !dbg !2089

if.then173:                                       ; preds = %or.phi171
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2089
  br label %after_assign, !dbg !2089

if.exit174:                                       ; preds = %or.phi171
  %119 = load i128, ptr %i153, align 16, !dbg !2090
  %trunc175 = trunc i128 %119 to i32, !dbg !2090
  store i32 %trunc175, ptr %blockret, align 4, !dbg !2090
  br label %expr_block.exit, !dbg !2090

next_if176:                                       ; preds = %result_block151
  br label %check_subtype177, !dbg !2091

check_subtype177:                                 ; preds = %parent_type_block179, %next_if176
  %120 = phi i64 [ %48, %next_if176 ], [ %typeid.parent181, %parent_type_block179 ], !dbg !2091
  %eq178 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %120, !dbg !2091
  br i1 %eq178, label %result_block182, label %parent_type_block179, !dbg !2091

parent_type_block179:                             ; preds = %check_subtype177
  %121 = inttoptr i64 %120 to ptr, !dbg !2091
  %ptradd180 = getelementptr inbounds i8, ptr %121, i64 8, !dbg !2091
  %typeid.parent181 = load i64, ptr %ptradd180, align 8, !dbg !2091
  %122 = icmp eq i64 %typeid.parent181, 0, !dbg !2091
  br i1 %122, label %result_block182, label %check_subtype177, !dbg !2091

result_block182:                                  ; preds = %parent_type_block179, %check_subtype177
  %123 = phi i1 [ false, %parent_type_block179 ], [ true, %check_subtype177 ], !dbg !2091
  br i1 %123, label %switch.case183, label %next_if195, !dbg !2091

switch.case183:                                   ; preds = %result_block182
    #dbg_declare(ptr %c184, !2092, !DIExpression(), !2094)
  %124 = load ptr, ptr %v, align 8, !dbg !2094
  %checknull185 = icmp eq ptr %124, null, !dbg !2094
  %125 = call i1 @llvm.expect.i1(i1 %checknull185, i1 false), !dbg !2094
  br i1 %125, label %panic186, label %checkok190, !dbg !2094

checkok190:                                       ; preds = %switch.case183
  %126 = load i8, ptr %124, align 1, !dbg !2094
  store i8 %126, ptr %c184, align 1, !dbg !2094
  %127 = load i8, ptr %c184, align 1, !dbg !2095
  %zext = zext i8 %127 to i32, !dbg !2095
  %128 = load i32, ptr %max, align 4, !dbg !2095
  %lt191 = icmp slt i32 %128, %zext, !dbg !2095
  %check = icmp slt i32 %zext, 0, !dbg !2095
  %siui-lt = or i1 %check, %lt191, !dbg !2095
  br i1 %siui-lt, label %if.then192, label %if.exit193, !dbg !2095

if.then192:                                       ; preds = %checkok190
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2095
  br label %after_assign, !dbg !2095

if.exit193:                                       ; preds = %checkok190
  %129 = load i8, ptr %c184, align 1, !dbg !2096
  %zext194 = zext i8 %129 to i32, !dbg !2096
  store i32 %zext194, ptr %blockret, align 4, !dbg !2096
  br label %expr_block.exit, !dbg !2096

next_if195:                                       ; preds = %result_block182
  br label %check_subtype196, !dbg !2097

check_subtype196:                                 ; preds = %parent_type_block198, %next_if195
  %130 = phi i64 [ %48, %next_if195 ], [ %typeid.parent200, %parent_type_block198 ], !dbg !2097
  %eq197 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %130, !dbg !2097
  br i1 %eq197, label %result_block201, label %parent_type_block198, !dbg !2097

parent_type_block198:                             ; preds = %check_subtype196
  %131 = inttoptr i64 %130 to ptr, !dbg !2097
  %ptradd199 = getelementptr inbounds i8, ptr %131, i64 8, !dbg !2097
  %typeid.parent200 = load i64, ptr %ptradd199, align 8, !dbg !2097
  %132 = icmp eq i64 %typeid.parent200, 0, !dbg !2097
  br i1 %132, label %result_block201, label %check_subtype196, !dbg !2097

result_block201:                                  ; preds = %parent_type_block198, %check_subtype196
  %133 = phi i1 [ false, %parent_type_block198 ], [ true, %check_subtype196 ], !dbg !2097
  br i1 %133, label %switch.case202, label %next_if223, !dbg !2097

switch.case202:                                   ; preds = %result_block201
    #dbg_declare(ptr %s203, !2098, !DIExpression(), !2100)
  %134 = load ptr, ptr %v, align 8, !dbg !2100
  %checknull204 = icmp eq ptr %134, null, !dbg !2100
  %135 = call i1 @llvm.expect.i1(i1 %checknull204, i1 false), !dbg !2100
  br i1 %135, label %panic205, label %checkok209, !dbg !2100

checkok209:                                       ; preds = %switch.case202
  %136 = load i16, ptr %134, align 2, !dbg !2100
  store i16 %136, ptr %s203, align 2, !dbg !2100
  %137 = load i16, ptr %s203, align 2, !dbg !2101
  %zext210 = zext i16 %137 to i32, !dbg !2101
  %138 = load i32, ptr %max, align 4, !dbg !2101
  %lt211 = icmp slt i32 %138, %zext210, !dbg !2101
  %check212 = icmp slt i32 %zext210, 0, !dbg !2101
  %siui-lt213 = or i1 %check212, %lt211, !dbg !2101
  br i1 %siui-lt213, label %or.phi218, label %or.rhs214, !dbg !2101

or.rhs214:                                        ; preds = %checkok209
  %139 = load i16, ptr %s203, align 2, !dbg !2101
  %zext215 = zext i16 %139 to i32, !dbg !2101
  %140 = load i32, ptr %min, align 4, !dbg !2101
  %gt216 = icmp sgt i32 %140, %zext215, !dbg !2101
  %check217 = icmp sge i32 %zext215, 0, !dbg !2101
  %siui-gt = and i1 %check217, %gt216, !dbg !2101
  br label %or.phi218, !dbg !2101

or.phi218:                                        ; preds = %or.rhs214, %checkok209
  %val219 = phi i1 [ true, %checkok209 ], [ %siui-gt, %or.rhs214 ], !dbg !2101
  br i1 %val219, label %if.then220, label %if.exit221, !dbg !2101

if.then220:                                       ; preds = %or.phi218
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2101
  br label %after_assign, !dbg !2101

if.exit221:                                       ; preds = %or.phi218
  %141 = load i16, ptr %s203, align 2, !dbg !2102
  %zext222 = zext i16 %141 to i32, !dbg !2102
  store i32 %zext222, ptr %blockret, align 4, !dbg !2102
  br label %expr_block.exit, !dbg !2102

next_if223:                                       ; preds = %result_block201
  br label %check_subtype224, !dbg !2103

check_subtype224:                                 ; preds = %parent_type_block226, %next_if223
  %142 = phi i64 [ %48, %next_if223 ], [ %typeid.parent228, %parent_type_block226 ], !dbg !2103
  %eq225 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %142, !dbg !2103
  br i1 %eq225, label %result_block229, label %parent_type_block226, !dbg !2103

parent_type_block226:                             ; preds = %check_subtype224
  %143 = inttoptr i64 %142 to ptr, !dbg !2103
  %ptradd227 = getelementptr inbounds i8, ptr %143, i64 8, !dbg !2103
  %typeid.parent228 = load i64, ptr %ptradd227, align 8, !dbg !2103
  %144 = icmp eq i64 %typeid.parent228, 0, !dbg !2103
  br i1 %144, label %result_block229, label %check_subtype224, !dbg !2103

result_block229:                                  ; preds = %parent_type_block226, %check_subtype224
  %145 = phi i1 [ false, %parent_type_block226 ], [ true, %check_subtype224 ], !dbg !2103
  br i1 %145, label %switch.case230, label %next_if249, !dbg !2103

switch.case230:                                   ; preds = %result_block229
    #dbg_declare(ptr %i231, !2104, !DIExpression(), !2106)
  %146 = load ptr, ptr %v, align 8, !dbg !2106
  %checknull232 = icmp eq ptr %146, null, !dbg !2106
  %147 = call i1 @llvm.expect.i1(i1 %checknull232, i1 false), !dbg !2106
  br i1 %147, label %panic233, label %checkok237, !dbg !2106

checkok237:                                       ; preds = %switch.case230
  %148 = load i32, ptr %146, align 4, !dbg !2106
  store i32 %148, ptr %i231, align 4, !dbg !2106
  %149 = load i32, ptr %i231, align 4, !dbg !2107
  %150 = load i32, ptr %max, align 4, !dbg !2107
  %lt238 = icmp slt i32 %150, %149, !dbg !2107
  %check239 = icmp slt i32 %149, 0, !dbg !2107
  %siui-lt240 = or i1 %check239, %lt238, !dbg !2107
  br i1 %siui-lt240, label %or.phi245, label %or.rhs241, !dbg !2107

or.rhs241:                                        ; preds = %checkok237
  %151 = load i32, ptr %i231, align 4, !dbg !2107
  %152 = load i32, ptr %min, align 4, !dbg !2107
  %gt242 = icmp sgt i32 %152, %151, !dbg !2107
  %check243 = icmp sge i32 %151, 0, !dbg !2107
  %siui-gt244 = and i1 %check243, %gt242, !dbg !2107
  br label %or.phi245, !dbg !2107

or.phi245:                                        ; preds = %or.rhs241, %checkok237
  %val246 = phi i1 [ true, %checkok237 ], [ %siui-gt244, %or.rhs241 ], !dbg !2107
  br i1 %val246, label %if.then247, label %if.exit248, !dbg !2107

if.then247:                                       ; preds = %or.phi245
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2107
  br label %after_assign, !dbg !2107

if.exit248:                                       ; preds = %or.phi245
  %153 = load i32, ptr %i231, align 4, !dbg !2108
  store i32 %153, ptr %blockret, align 4, !dbg !2108
  br label %expr_block.exit, !dbg !2108

next_if249:                                       ; preds = %result_block229
  br label %check_subtype250, !dbg !2109

check_subtype250:                                 ; preds = %parent_type_block252, %next_if249
  %154 = phi i64 [ %48, %next_if249 ], [ %typeid.parent254, %parent_type_block252 ], !dbg !2109
  %eq251 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %154, !dbg !2109
  br i1 %eq251, label %result_block255, label %parent_type_block252, !dbg !2109

parent_type_block252:                             ; preds = %check_subtype250
  %155 = inttoptr i64 %154 to ptr, !dbg !2109
  %ptradd253 = getelementptr inbounds i8, ptr %155, i64 8, !dbg !2109
  %typeid.parent254 = load i64, ptr %ptradd253, align 8, !dbg !2109
  %156 = icmp eq i64 %typeid.parent254, 0, !dbg !2109
  br i1 %156, label %result_block255, label %check_subtype250, !dbg !2109

result_block255:                                  ; preds = %parent_type_block252, %check_subtype250
  %157 = phi i1 [ false, %parent_type_block252 ], [ true, %check_subtype250 ], !dbg !2109
  br i1 %157, label %switch.case256, label %next_if278, !dbg !2109

switch.case256:                                   ; preds = %result_block255
    #dbg_declare(ptr %l257, !2110, !DIExpression(), !2112)
  %158 = load ptr, ptr %v, align 8, !dbg !2112
  %checknull258 = icmp eq ptr %158, null, !dbg !2112
  %159 = call i1 @llvm.expect.i1(i1 %checknull258, i1 false), !dbg !2112
  br i1 %159, label %panic259, label %checkok263, !dbg !2112

checkok263:                                       ; preds = %switch.case256
  %160 = load i64, ptr %158, align 8, !dbg !2112
  store i64 %160, ptr %l257, align 8, !dbg !2112
  %161 = load i64, ptr %l257, align 8, !dbg !2113
  %162 = load i32, ptr %max, align 4, !dbg !2113
  %sext264 = sext i32 %162 to i64, !dbg !2113
  %lt265 = icmp slt i64 %sext264, %161, !dbg !2113
  %check266 = icmp slt i64 %161, 0, !dbg !2113
  %siui-lt267 = or i1 %check266, %lt265, !dbg !2113
  br i1 %siui-lt267, label %or.phi273, label %or.rhs268, !dbg !2113

or.rhs268:                                        ; preds = %checkok263
  %163 = load i64, ptr %l257, align 8, !dbg !2113
  %164 = load i32, ptr %min, align 4, !dbg !2113
  %sext269 = sext i32 %164 to i64, !dbg !2113
  %gt270 = icmp sgt i64 %sext269, %163, !dbg !2113
  %check271 = icmp sge i64 %163, 0, !dbg !2113
  %siui-gt272 = and i1 %check271, %gt270, !dbg !2113
  br label %or.phi273, !dbg !2113

or.phi273:                                        ; preds = %or.rhs268, %checkok263
  %val274 = phi i1 [ true, %checkok263 ], [ %siui-gt272, %or.rhs268 ], !dbg !2113
  br i1 %val274, label %if.then275, label %if.exit276, !dbg !2113

if.then275:                                       ; preds = %or.phi273
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2113
  br label %after_assign, !dbg !2113

if.exit276:                                       ; preds = %or.phi273
  %165 = load i64, ptr %l257, align 8, !dbg !2114
  %trunc277 = trunc i64 %165 to i32, !dbg !2114
  store i32 %trunc277, ptr %blockret, align 4, !dbg !2114
  br label %expr_block.exit, !dbg !2114

next_if278:                                       ; preds = %result_block255
  br label %check_subtype279, !dbg !2115

check_subtype279:                                 ; preds = %parent_type_block281, %next_if278
  %166 = phi i64 [ %48, %next_if278 ], [ %typeid.parent283, %parent_type_block281 ], !dbg !2115
  %eq280 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %166, !dbg !2115
  br i1 %eq280, label %result_block284, label %parent_type_block281, !dbg !2115

parent_type_block281:                             ; preds = %check_subtype279
  %167 = inttoptr i64 %166 to ptr, !dbg !2115
  %ptradd282 = getelementptr inbounds i8, ptr %167, i64 8, !dbg !2115
  %typeid.parent283 = load i64, ptr %ptradd282, align 8, !dbg !2115
  %168 = icmp eq i64 %typeid.parent283, 0, !dbg !2115
  br i1 %168, label %result_block284, label %check_subtype279, !dbg !2115

result_block284:                                  ; preds = %parent_type_block281, %check_subtype279
  %169 = phi i1 [ false, %parent_type_block281 ], [ true, %check_subtype279 ], !dbg !2115
  br i1 %169, label %switch.case285, label %next_if307, !dbg !2115

switch.case285:                                   ; preds = %result_block284
    #dbg_declare(ptr %i286, !2116, !DIExpression(), !2118)
  %170 = load ptr, ptr %v, align 8, !dbg !2118
  %checknull287 = icmp eq ptr %170, null, !dbg !2118
  %171 = call i1 @llvm.expect.i1(i1 %checknull287, i1 false), !dbg !2118
  br i1 %171, label %panic288, label %checkok292, !dbg !2118

checkok292:                                       ; preds = %switch.case285
  %172 = load i128, ptr %170, align 16, !dbg !2118
  store i128 %172, ptr %i286, align 16, !dbg !2118
  %173 = load i128, ptr %i286, align 16, !dbg !2119
  %174 = load i32, ptr %max, align 4, !dbg !2119
  %sext293 = sext i32 %174 to i128, !dbg !2119
  %lt294 = icmp slt i128 %sext293, %173, !dbg !2119
  %check295 = icmp slt i128 %173, 0, !dbg !2119
  %siui-lt296 = or i1 %check295, %lt294, !dbg !2119
  br i1 %siui-lt296, label %or.phi302, label %or.rhs297, !dbg !2119

or.rhs297:                                        ; preds = %checkok292
  %175 = load i128, ptr %i286, align 16, !dbg !2119
  %176 = load i32, ptr %min, align 4, !dbg !2119
  %sext298 = sext i32 %176 to i128, !dbg !2119
  %gt299 = icmp sgt i128 %sext298, %175, !dbg !2119
  %check300 = icmp sge i128 %175, 0, !dbg !2119
  %siui-gt301 = and i1 %check300, %gt299, !dbg !2119
  br label %or.phi302, !dbg !2119

or.phi302:                                        ; preds = %or.rhs297, %checkok292
  %val303 = phi i1 [ true, %checkok292 ], [ %siui-gt301, %or.rhs297 ], !dbg !2119
  br i1 %val303, label %if.then304, label %if.exit305, !dbg !2119

if.then304:                                       ; preds = %or.phi302
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !2119
  br label %after_assign, !dbg !2119

if.exit305:                                       ; preds = %or.phi302
  %177 = load i128, ptr %i286, align 16, !dbg !2120
  %trunc306 = trunc i128 %177 to i32, !dbg !2120
  store i32 %trunc306, ptr %blockret, align 4, !dbg !2120
  br label %expr_block.exit, !dbg !2120

next_if307:                                       ; preds = %result_block284
  br label %switch.default, !dbg !2120

switch.default:                                   ; preds = %next_if307
  store %"char[]" { ptr @.str.154, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg308, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.155, i64 20 }, ptr %indirectarg309, align 8
  store %"char[]" { ptr @.str.156, i64 25 }, ptr %indirectarg310, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg311, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg308, ptr align 8 %indirectarg309, ptr align 8 %indirectarg310, i32 672, ptr align 8 %indirectarg311), !dbg !2121
  unreachable, !dbg !2125

expr_block.exit:                                  ; preds = %if.exit305, %if.exit276, %if.exit248, %if.exit221, %if.exit193, %if.exit174, %if.exit144, %if.exit115, %if.exit87, %if.exit60
  %178 = load i32, ptr %blockret, align 4, !dbg !2125
  store i32 %178, ptr %intval, align 4, !dbg !2125
  store i64 0, ptr %intval.f, align 8, !dbg !2125
  br label %after_assign, !dbg !2125

after_assign:                                     ; preds = %expr_block.exit, %if.then304, %if.then275, %if.then247, %if.then220, %if.then192, %if.then173, %if.then164, %if.then143, %if.then134, %if.then114, %if.then107, %if.then86, %if.then80, %if.then59
  %optval = load i64, ptr %intval.f, align 8, !dbg !2126
  %not_err = icmp eq i64 %optval, 0, !dbg !2126
  %179 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2126
  br i1 %179, label %after_check, label %else_block, !dbg !2126

after_check:                                      ; preds = %after_assign
  %180 = load i32, ptr %intval, align 4, !dbg !2126
  br label %phi_block, !dbg !2126

else_block:                                       ; preds = %after_assign
  store i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), ptr %reterr312, align 8, !dbg !2126
  br label %err_retblock, !dbg !2126

phi_block:                                        ; preds = %after_check
  store i32 %180, ptr %0, align 4, !dbg !2126
  ret i64 0, !dbg !2126

err_retblock:                                     ; preds = %else_block
  %181 = load i64, ptr %reterr312, align 8, !dbg !2126
  ret i64 %181, !dbg !2126

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.151, i64 50 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg2, align 8
  %182 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %182(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 664), !dbg !2030
  unreachable, !dbg !2030

panic7:                                           ; preds = %if.exit5
  store %"char[]" { ptr @.panic_msg.151, i64 50 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg10, align 8
  %183 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %183(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 667), !dbg !2034
  unreachable, !dbg !2034

panic15:                                          ; preds = %if.exit13
  store %"char[]" { ptr @.panic_msg.153, i64 55 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg18, align 8
  %184 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %184(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 669), !dbg !2036
  unreachable, !dbg !2036

panic24:                                          ; preds = %if.exit22
  store %"char[]" { ptr @.panic_msg.153, i64 55 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.142, i64 20 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg27, align 8
  %185 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %185(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 670), !dbg !2038
  unreachable, !dbg !2038

panic53:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.84, i64 52 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg56, align 8
  %186 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %186(ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, i32 35), !dbg !2060
  unreachable, !dbg !2060

panic70:                                          ; preds = %switch.case68
  store %"char[]" { ptr @.panic_msg.87, i64 53 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg73, align 8
  %187 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %187(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 39), !dbg !2066
  unreachable, !dbg !2066

panic98:                                          ; preds = %switch.case96
  store %"char[]" { ptr @.panic_msg.88, i64 51 }, ptr %indirectarg99, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg100, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg101, align 8
  %188 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %188(ptr align 8 %indirectarg99, ptr align 8 %indirectarg100, ptr align 8 %indirectarg101, i32 44), !dbg !2073
  unreachable, !dbg !2073

panic125:                                         ; preds = %switch.case123
  store %"char[]" { ptr @.panic_msg.89, i64 52 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg128, align 8
  %189 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %189(ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, i32 49), !dbg !2080
  unreachable, !dbg !2080

panic155:                                         ; preds = %switch.case152
  store %"char[]" { ptr @.panic_msg.90, i64 54 }, ptr %indirectarg156, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg157, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg158, align 8
  %190 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %190(ptr align 8 %indirectarg156, ptr align 8 %indirectarg157, ptr align 8 %indirectarg158, i32 54), !dbg !2087
  unreachable, !dbg !2087

panic186:                                         ; preds = %switch.case183
  store %"char[]" { ptr @.panic_msg.84, i64 52 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg189, align 8
  %191 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %191(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 59), !dbg !2094
  unreachable, !dbg !2094

panic205:                                         ; preds = %switch.case202
  store %"char[]" { ptr @.panic_msg.91, i64 54 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg207, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg208, align 8
  %192 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %192(ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, ptr align 8 %indirectarg208, i32 63), !dbg !2100
  unreachable, !dbg !2100

panic233:                                         ; preds = %switch.case230
  store %"char[]" { ptr @.panic_msg.92, i64 52 }, ptr %indirectarg234, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg235, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg236, align 8
  %193 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %193(ptr align 8 %indirectarg234, ptr align 8 %indirectarg235, ptr align 8 %indirectarg236, i32 67), !dbg !2106
  unreachable, !dbg !2106

panic259:                                         ; preds = %switch.case256
  store %"char[]" { ptr @.panic_msg.93, i64 53 }, ptr %indirectarg260, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg261, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg262, align 8
  %194 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %194(ptr align 8 %indirectarg260, ptr align 8 %indirectarg261, ptr align 8 %indirectarg262, i32 71), !dbg !2112
  unreachable, !dbg !2112

panic288:                                         ; preds = %switch.case285
  store %"char[]" { ptr @.panic_msg.94, i64 55 }, ptr %indirectarg289, align 8
  store %"char[]" { ptr @.file.80, i64 8 }, ptr %indirectarg290, align 8
  store %"char[]" { ptr @.func.152, i64 25 }, ptr %indirectarg291, align 8
  %195 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %195(ptr align 8 %indirectarg289, ptr align 8 %indirectarg290, ptr align 8 %indirectarg291, i32 75), !dbg !2118
  unreachable, !dbg !2118
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.fprintf(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2127 {
entry:
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2130, !DIExpression(), !2131)
    #dbg_declare(ptr %2, !2132, !DIExpression(), !2131)
    #dbg_declare(ptr %3, !2133, !DIExpression(), !2131)
    #dbg_declare(ptr %formatter, !2134, !DIExpression(), !2135)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !2135
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %1), !dbg !2136
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2137
  %not_err = icmp eq i64 %4, 0, !dbg !2137
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2137
  br i1 %5, label %after_check, label %assign_optional, !dbg !2137

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %reterr, align 8, !dbg !2137
  br label %err_retblock, !dbg !2137

after_check:                                      ; preds = %entry
  %6 = load i64, ptr %retparam, align 8, !dbg !2137
  store i64 %6, ptr %0, align 8, !dbg !2137
  ret i64 0, !dbg !2137

err_retblock:                                     ; preds = %assign_optional
  %7 = load i64, ptr %reterr, align 8, !dbg !2137
  ret i64 %7, !dbg !2137
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.fprintfn(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2138 {
entry:
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %error_var2 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.inlinecache13 = alloca ptr, align 8
  %.cachedtype14 = alloca ptr, align 8
  %error_var21 = alloca i64, align 8
  %.inlinecache23 = alloca ptr, align 8
  %.cachedtype24 = alloca ptr, align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2139, !DIExpression(), !2140)
    #dbg_declare(ptr %2, !2141, !DIExpression(), !2140)
    #dbg_declare(ptr %3, !2142, !DIExpression(), !2140)
    #dbg_declare(ptr %formatter, !2143, !DIExpression(), !2144)
  store ptr null, ptr %.cachedtype24, align 8, !dbg !2144
  store ptr null, ptr %.cachedtype14, align 8, !dbg !2144
  store ptr null, ptr %.cachedtype, align 8, !dbg !2144
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !2144
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %1), !dbg !2145
    #dbg_declare(ptr %len, !2146, !DIExpression(), !2147)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2147
  %not_err = icmp eq i64 %4, 0, !dbg !2147
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2147
  br i1 %5, label %after_check, label %assign_optional, !dbg !2147

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %error_var, align 8, !dbg !2147
  br label %guard_block, !dbg !2147

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !2147

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !2147
  ret i64 %6, !dbg !2147

noerr_block:                                      ; preds = %after_check
  %7 = load i64, ptr %retparam, align 8, !dbg !2147
  store i64 %7, ptr %len, align 8, !dbg !2147
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2148
  %8 = load i64, ptr %ptradd, align 8, !dbg !2148
  %9 = inttoptr i64 %8 to ptr, !dbg !2148
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2144
  %10 = icmp eq ptr %9, %type, !dbg !2144
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !2144

cache_miss:                                       ; preds = %noerr_block
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2144
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !2144
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.write_byte"), !dbg !2144
  store ptr %12, ptr %.inlinecache, align 8, !dbg !2144
  store ptr %9, ptr %.cachedtype, align 8, !dbg !2144
  br label %13, !dbg !2144

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2144
  br label %13, !dbg !2144

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !2144
  %14 = icmp eq ptr %fn_phi, null, !dbg !2144
  br i1 %14, label %missing_function, label %match, !dbg !2144

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg.193, i64 47 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.194, i64 5 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.195, i64 8 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 164), !dbg !2148
  unreachable, !dbg !2148

match:                                            ; preds = %13
  %16 = load ptr, ptr %1, align 8, !dbg !2148
  %17 = call i64 %fn_phi(ptr %16, i8 10), !dbg !2148
  %not_err7 = icmp eq i64 %17, 0, !dbg !2148
  %18 = call i1 @llvm.expect.i1(i1 %not_err7, i1 true), !dbg !2148
  br i1 %18, label %after_check9, label %assign_optional8, !dbg !2148

assign_optional8:                                 ; preds = %match
  store i64 %17, ptr %error_var2, align 8, !dbg !2148
  br label %guard_block10, !dbg !2148

after_check9:                                     ; preds = %match
  br label %noerr_block11, !dbg !2148

guard_block10:                                    ; preds = %assign_optional8
  %19 = load i64, ptr %error_var2, align 8, !dbg !2148
  ret i64 %19, !dbg !2148

noerr_block11:                                    ; preds = %after_check9
  %ptradd12 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2149
  %20 = load i64, ptr %ptradd12, align 8, !dbg !2149
  %21 = inttoptr i64 %20 to ptr, !dbg !2149
  %type15 = load ptr, ptr %.cachedtype14, align 8, !dbg !2144
  %22 = icmp eq ptr %21, %type15, !dbg !2144
  br i1 %22, label %cache_hit18, label %cache_miss16, !dbg !2144

cache_miss16:                                     ; preds = %noerr_block11
  %ptradd17 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !2144
  %23 = load ptr, ptr %ptradd17, align 8, !dbg !2144
  %24 = call ptr @.dyn_search(ptr %23, ptr @"$sel.flush"), !dbg !2144
  store ptr %24, ptr %.inlinecache13, align 8, !dbg !2144
  store ptr %21, ptr %.cachedtype14, align 8, !dbg !2144
  br label %25, !dbg !2144

cache_hit18:                                      ; preds = %noerr_block11
  %cache_hit_fn19 = load ptr, ptr %.inlinecache13, align 8, !dbg !2144
  br label %25, !dbg !2144

25:                                               ; preds = %cache_hit18, %cache_miss16
  %fn_phi20 = phi ptr [ %cache_hit_fn19, %cache_hit18 ], [ %24, %cache_miss16 ], !dbg !2144
  %i2b = icmp ne ptr %fn_phi20, null, !dbg !2144
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2144

if.then:                                          ; preds = %25
  %ptradd22 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2149
  %26 = load i64, ptr %ptradd22, align 8, !dbg !2149
  %27 = inttoptr i64 %26 to ptr, !dbg !2149
  %type25 = load ptr, ptr %.cachedtype24, align 8, !dbg !2144
  %28 = icmp eq ptr %27, %type25, !dbg !2144
  br i1 %28, label %cache_hit28, label %cache_miss26, !dbg !2144

cache_miss26:                                     ; preds = %if.then
  %ptradd27 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !2144
  %29 = load ptr, ptr %ptradd27, align 8, !dbg !2144
  %30 = call ptr @.dyn_search(ptr %29, ptr @"$sel.flush"), !dbg !2144
  store ptr %30, ptr %.inlinecache23, align 8, !dbg !2144
  store ptr %27, ptr %.cachedtype24, align 8, !dbg !2144
  br label %31, !dbg !2144

cache_hit28:                                      ; preds = %if.then
  %cache_hit_fn29 = load ptr, ptr %.inlinecache23, align 8, !dbg !2144
  br label %31, !dbg !2144

31:                                               ; preds = %cache_hit28, %cache_miss26
  %fn_phi30 = phi ptr [ %cache_hit_fn29, %cache_hit28 ], [ %30, %cache_miss26 ], !dbg !2144
  %32 = icmp eq ptr %fn_phi30, null, !dbg !2144
  br i1 %32, label %missing_function31, label %match35, !dbg !2144

missing_function31:                               ; preds = %31
  store %"char[]" { ptr @.panic_msg.196, i64 42 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.file.194, i64 5 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.func.195, i64 8 }, ptr %indirectarg34, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, i32 165), !dbg !2149
  unreachable, !dbg !2149

match35:                                          ; preds = %31
  %34 = load ptr, ptr %1, align 8, !dbg !2149
  %35 = call i64 %fn_phi30(ptr %34), !dbg !2149
  %not_err36 = icmp eq i64 %35, 0, !dbg !2149
  %36 = call i1 @llvm.expect.i1(i1 %not_err36, i1 true), !dbg !2149
  br i1 %36, label %after_check38, label %assign_optional37, !dbg !2149

assign_optional37:                                ; preds = %match35
  store i64 %35, ptr %error_var21, align 8, !dbg !2149
  br label %guard_block39, !dbg !2149

after_check38:                                    ; preds = %match35
  br label %noerr_block40, !dbg !2149

guard_block39:                                    ; preds = %assign_optional37
  %37 = load i64, ptr %error_var21, align 8, !dbg !2149
  ret i64 %37, !dbg !2149

noerr_block40:                                    ; preds = %after_check38
  br label %if.exit, !dbg !2149

if.exit:                                          ; preds = %noerr_block40, %25
  %38 = load i64, ptr %len, align 8, !dbg !2150
  %add = add i64 %38, 1, !dbg !2150
  store i64 %add, ptr %0, align 8, !dbg !2150
  ret i64 0, !dbg !2150
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putstream_fn(ptr %0, i8 %1) #0 !dbg !2151 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %stream = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !2152, !DIExpression(), !2153)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2154, !DIExpression(), !2153)
    #dbg_declare(ptr %stream, !2155, !DIExpression(), !2157)
  %2 = load ptr, ptr %data, align 8, !dbg !2157
  store ptr %2, ptr %stream, align 8, !dbg !2157
  %3 = load ptr, ptr %stream, align 8, !dbg !2158
  %checknull = icmp eq ptr %3, null, !dbg !2158
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2158
  br i1 %4, label %panic, label %checkok, !dbg !2158

checkok:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2158
  %5 = load i64, ptr %ptradd, align 8, !dbg !2158
  %6 = inttoptr i64 %5 to ptr, !dbg !2158
  %type = load ptr, ptr %.cachedtype, align 8
  %7 = icmp eq ptr %6, %type
  br i1 %7, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16
  %8 = load ptr, ptr %ptradd3, align 8
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.write_byte")
  store ptr %9, ptr %.inlinecache, align 8
  store ptr %6, ptr %.cachedtype, align 8
  br label %10

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %10

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ]
  %11 = icmp eq ptr %fn_phi, null
  br i1 %11, label %missing_function, label %match

missing_function:                                 ; preds = %10
  store %"char[]" { ptr @.panic_msg.193, i64 47 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.194, i64 5 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.198, i64 16 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 225), !dbg !2158
  unreachable, !dbg !2158

match:                                            ; preds = %10
  %13 = load ptr, ptr %3, align 8, !dbg !2158
  %14 = load i8, ptr %c, align 1, !dbg !2158
  %15 = call i64 %fn_phi(ptr %13, i8 %14), !dbg !2158
  %not_err = icmp eq i64 %15, 0, !dbg !2158
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2158
  br i1 %16, label %after_check, label %assign_optional, !dbg !2158

assign_optional:                                  ; preds = %match
  store i64 %15, ptr %reterr, align 8, !dbg !2158
  br label %err_retblock, !dbg !2158

after_check:                                      ; preds = %match
  ret i64 0, !dbg !2158

err_retblock:                                     ; preds = %assign_optional
  %17 = load i64, ptr %reterr, align 8, !dbg !2158
  ret i64 %17, !dbg !2158

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.197, i64 47 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.194, i64 5 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.198, i64 16 }, ptr %indirectarg2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 225), !dbg !2158
  unreachable, !dbg !2158
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_putchar_fn(ptr %0, i8 %1) #0 !dbg !2159 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !2160, !DIExpression(), !2161)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2162, !DIExpression(), !2161)
  %2 = load i8, ptr %c, align 1, !dbg !2163
  %zext = zext i8 %2 to i32, !dbg !2163
  %3 = call i32 @putchar(i32 %zext), !dbg !2163
  ret i64 0, !dbg !2163
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.printf(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2164 {
entry:
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2167, !DIExpression(), !2168)
    #dbg_declare(ptr %2, !2169, !DIExpression(), !2168)
    #dbg_declare(ptr %formatter, !2170, !DIExpression(), !2171)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !2171
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !2172
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2173
  %not_err = icmp eq i64 %3, 0, !dbg !2173
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2173
  br i1 %4, label %after_check, label %assign_optional, !dbg !2173

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %reterr, align 8, !dbg !2173
  br label %err_retblock, !dbg !2173

after_check:                                      ; preds = %entry
  %5 = load i64, ptr %retparam, align 8, !dbg !2173
  store i64 %5, ptr %0, align 8, !dbg !2173
  ret i64 0, !dbg !2173

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !2173
  ret i64 %6, !dbg !2173
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.printfn(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2174 {
entry:
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2175, !DIExpression(), !2176)
    #dbg_declare(ptr %2, !2177, !DIExpression(), !2176)
    #dbg_declare(ptr %formatter, !2178, !DIExpression(), !2179)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !2179
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !2180
    #dbg_declare(ptr %len, !2181, !DIExpression(), !2182)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %3 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2182
  %not_err = icmp eq i64 %3, 0, !dbg !2182
  %4 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2182
  br i1 %4, label %after_check, label %assign_optional, !dbg !2182

assign_optional:                                  ; preds = %entry
  store i64 %3, ptr %len.f, align 8, !dbg !2182
  br label %after_assign, !dbg !2182

after_check:                                      ; preds = %entry
  %5 = load i64, ptr %retparam, align 8, !dbg !2182
  store i64 %5, ptr %len, align 8, !dbg !2182
  store i64 0, ptr %len.f, align 8, !dbg !2182
  br label %after_assign, !dbg !2182

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @std.io.putchar(i8 10) #5, !dbg !2183
  %6 = call ptr @std.io.stdout(), !dbg !2184
  %7 = call i64 @std.io.File.flush(ptr %6), !dbg !2184
  %not_err2 = icmp eq i64 %7, 0, !dbg !2184
  %8 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true), !dbg !2184
  br i1 %8, label %after_check4, label %assign_optional3, !dbg !2184

assign_optional3:                                 ; preds = %after_assign
  store i64 %7, ptr %error_var, align 8, !dbg !2184
  br label %guard_block, !dbg !2184

after_check4:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !2184

guard_block:                                      ; preds = %assign_optional3
  %9 = load i64, ptr %error_var, align 8, !dbg !2184
  ret i64 %9, !dbg !2184

noerr_block:                                      ; preds = %after_check4
  %optval = load i64, ptr %len.f, align 8, !dbg !2185
  %not_err5 = icmp eq i64 %optval, 0, !dbg !2185
  %10 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !2185
  br i1 %10, label %after_check7, label %assign_optional6, !dbg !2185

assign_optional6:                                 ; preds = %noerr_block
  store i64 %optval, ptr %reterr, align 8, !dbg !2185
  br label %err_retblock, !dbg !2185

after_check7:                                     ; preds = %noerr_block
  %11 = load i64, ptr %len, align 8, !dbg !2185
  %add = add i64 %11, 1, !dbg !2185
  store i64 %add, ptr %0, align 8, !dbg !2185
  ret i64 0, !dbg !2185

err_retblock:                                     ; preds = %assign_optional6
  %12 = load i64, ptr %reterr, align 8, !dbg !2185
  ret i64 %12, !dbg !2185
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.eprintf(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2186 {
entry:
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2187, !DIExpression(), !2188)
    #dbg_declare(ptr %2, !2189, !DIExpression(), !2188)
    #dbg_declare(ptr %formatter, !2190, !DIExpression(), !2191)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !2191
    #dbg_declare(ptr %stream, !2192, !DIExpression(), !2193)
  %3 = call ptr @std.io.stderr(), !dbg !2193
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2193
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !2193
  store %any %5, ptr %stream, align 8, !dbg !2193
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !2194
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2195
  %not_err = icmp eq i64 %6, 0, !dbg !2195
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2195
  br i1 %7, label %after_check, label %assign_optional, !dbg !2195

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %reterr, align 8, !dbg !2195
  br label %err_retblock, !dbg !2195

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !2195
  store i64 %8, ptr %0, align 8, !dbg !2195
  ret i64 0, !dbg !2195

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !2195
  ret i64 %9, !dbg !2195
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.eprintfn(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2196 {
entry:
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %error_var5 = alloca i64, align 8
  %reterr = alloca i64, align 8
    #dbg_declare(ptr %1, !2197, !DIExpression(), !2198)
    #dbg_declare(ptr %2, !2199, !DIExpression(), !2198)
    #dbg_declare(ptr %formatter, !2200, !DIExpression(), !2201)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !2201
    #dbg_declare(ptr %stream, !2202, !DIExpression(), !2203)
  %3 = call ptr @std.io.stderr(), !dbg !2203
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !2203
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !2203
  store %any %5, ptr %stream, align 8, !dbg !2203
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !2204
    #dbg_declare(ptr %len, !2205, !DIExpression(), !2206)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %2, i32 16, i1 false)
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2206
  %not_err = icmp eq i64 %6, 0, !dbg !2206
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2206
  br i1 %7, label %after_check, label %assign_optional, !dbg !2206

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %len.f, align 8, !dbg !2206
  br label %after_assign, !dbg !2206

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !2206
  store i64 %8, ptr %len, align 8, !dbg !2206
  store i64 0, ptr %len.f, align 8, !dbg !2206
  br label %after_assign, !dbg !2206

after_assign:                                     ; preds = %after_check, %assign_optional
  %9 = call ptr @std.io.stderr(), !dbg !2207
  %10 = call i64 @std.io.File.write_byte(ptr %9, i8 10), !dbg !2207
  %not_err2 = icmp eq i64 %10, 0, !dbg !2207
  %11 = call i1 @llvm.expect.i1(i1 %not_err2, i1 true), !dbg !2207
  br i1 %11, label %after_check4, label %assign_optional3, !dbg !2207

assign_optional3:                                 ; preds = %after_assign
  store i64 %10, ptr %error_var, align 8, !dbg !2207
  br label %guard_block, !dbg !2207

after_check4:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !2207

guard_block:                                      ; preds = %assign_optional3
  %12 = load i64, ptr %error_var, align 8, !dbg !2207
  ret i64 %12, !dbg !2207

noerr_block:                                      ; preds = %after_check4
  %13 = call ptr @std.io.stderr(), !dbg !2208
  %14 = call i64 @std.io.File.flush(ptr %13), !dbg !2208
  %not_err6 = icmp eq i64 %14, 0, !dbg !2208
  %15 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !2208
  br i1 %15, label %after_check8, label %assign_optional7, !dbg !2208

assign_optional7:                                 ; preds = %noerr_block
  store i64 %14, ptr %error_var5, align 8, !dbg !2208
  br label %guard_block9, !dbg !2208

after_check8:                                     ; preds = %noerr_block
  br label %noerr_block10, !dbg !2208

guard_block9:                                     ; preds = %assign_optional7
  %16 = load i64, ptr %error_var5, align 8, !dbg !2208
  ret i64 %16, !dbg !2208

noerr_block10:                                    ; preds = %after_check8
  %optval = load i64, ptr %len.f, align 8, !dbg !2209
  %not_err11 = icmp eq i64 %optval, 0, !dbg !2209
  %17 = call i1 @llvm.expect.i1(i1 %not_err11, i1 true), !dbg !2209
  br i1 %17, label %after_check13, label %assign_optional12, !dbg !2209

assign_optional12:                                ; preds = %noerr_block10
  store i64 %optval, ptr %reterr, align 8, !dbg !2209
  br label %err_retblock, !dbg !2209

after_check13:                                    ; preds = %noerr_block10
  %18 = load i64, ptr %len, align 8, !dbg !2209
  %add = add i64 %18, 1, !dbg !2209
  store i64 %add, ptr %0, align 8, !dbg !2209
  ret i64 0, !dbg !2209

err_retblock:                                     ; preds = %assign_optional12
  %19 = load i64, ptr %reterr, align 8, !dbg !2209
  ret i64 %19, !dbg !2209
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.bprintf(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !2210 {
entry:
  %formatter = alloca %Formatter, align 8
  %data = alloca %BufferData, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg6 = alloca %"any[]", align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots14 = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
    #dbg_declare(ptr %1, !2214, !DIExpression(), !2215)
    #dbg_declare(ptr %2, !2216, !DIExpression(), !2215)
    #dbg_declare(ptr %3, !2217, !DIExpression(), !2215)
    #dbg_declare(ptr %formatter, !2218, !DIExpression(), !2219)
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !2219
    #dbg_declare(ptr %data, !2220, !DIExpression(), !2225)
  call void @llvm.memset.p0.i64(ptr align 8 %data, i8 0, i64 24, i1 false), !dbg !2225
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %data, ptr align 8 %1, i32 16, i1 false), !dbg !2225
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_buffer_fn, ptr %data), !dbg !2226
    #dbg_declare(ptr %size, !2227, !DIExpression(), !2228)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg1, ptr align 8 %3, i32 16, i1 false)
  %4 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, ptr align 8 %indirectarg, ptr align 8 %indirectarg1), !dbg !2228
  %not_err = icmp eq i64 %4, 0, !dbg !2228
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2228
  br i1 %5, label %after_check, label %assign_optional, !dbg !2228

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %error_var, align 8, !dbg !2228
  br label %guard_block, !dbg !2228

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !2228

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !2228
  ret i64 %6, !dbg !2228

noerr_block:                                      ; preds = %after_check
  %7 = load i64, ptr %retparam, align 8, !dbg !2228
  store i64 %7, ptr %size, align 8, !dbg !2228
  %8 = load %"char[]", ptr %1, align 8, !dbg !2229
  %9 = extractvalue %"char[]" %8, 0, !dbg !2229
  %10 = extractvalue %"char[]" %8, 1, !dbg !2229
  %gt = icmp ugt i64 0, %10, !dbg !2229
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2229
  br i1 %11, label %panic, label %checkok, !dbg !2229

checkok:                                          ; preds = %noerr_block
  %ptradd7 = getelementptr inbounds i8, ptr %data, i64 16, !dbg !2229
  %12 = load i64, ptr %ptradd7, align 8, !dbg !2229
  %add = add i64 0, %12, !dbg !2229
  %lt = icmp ult i64 %10, %add, !dbg !2229
  %sub = sub i64 %add, 1, !dbg !2229
  %13 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2229
  br i1 %13, label %panic8, label %checkok18, !dbg !2229

checkok18:                                        ; preds = %checkok
  %size19 = sub i64 %add, 0, !dbg !2229
  %14 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2229
  %15 = insertvalue %"char[]" %14, i64 %size19, 1, !dbg !2229
  store %"char[]" %15, ptr %0, align 8, !dbg !2229
  ret i64 0, !dbg !2229

panic:                                            ; preds = %noerr_block
  store i64 %10, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %18 = insertvalue %any undef, ptr %taddr2, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.194, i64 5 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.199, i64 7 }, ptr %indirectarg5, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg6, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 319, ptr align 8 %indirectarg6), !dbg !2229
  unreachable, !dbg !2229

panic8:                                           ; preds = %checkok
  store i64 %sub, ptr %taddr9, align 8
  %21 = insertvalue %any undef, ptr %taddr9, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr10, align 8
  %23 = insertvalue %any undef, ptr %taddr10, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.194, i64 5 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.199, i64 7 }, ptr %indirectarg13, align 8
  store %any %22, ptr %varargslots14, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %24, ptr %ptradd15, align 16
  %25 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp16", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 319, ptr align 8 %indirectarg17), !dbg !2229
  unreachable, !dbg !2229
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.out_buffer_fn(ptr %0, i8 %1) #0 !dbg !2230 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %buffer_data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  store ptr %0, ptr %data, align 8
    #dbg_declare(ptr %data, !2231, !DIExpression(), !2232)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2233, !DIExpression(), !2232)
    #dbg_declare(ptr %buffer_data, !2234, !DIExpression(), !2236)
  %2 = load ptr, ptr %data, align 8, !dbg !2236
  store ptr %2, ptr %buffer_data, align 8, !dbg !2236
  %3 = load ptr, ptr %buffer_data, align 8, !dbg !2237
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2237
  %4 = load i64, ptr %ptradd, align 8, !dbg !2237
  %5 = load ptr, ptr %buffer_data, align 8, !dbg !2237
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2237
  %6 = load i64, ptr %ptradd1, align 8, !dbg !2237
  %ge = icmp uge i64 %4, %6, !dbg !2237
  br i1 %ge, label %if.then, label %if.exit, !dbg !2237

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), !dbg !2237

if.exit:                                          ; preds = %entry
  %7 = load ptr, ptr %buffer_data, align 8, !dbg !2238
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2238
  %8 = load i64, ptr %ptradd2, align 8, !dbg !2238
  %9 = load ptr, ptr %7, align 8, !dbg !2238
  %10 = load ptr, ptr %buffer_data, align 8, !dbg !2238
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !2238
  %11 = load i64, ptr %ptradd3, align 8, !dbg !2238
  %add = add i64 %11, 1, !dbg !2238
  store i64 %add, ptr %ptradd3, align 8, !dbg !2238
  %ge4 = icmp uge i64 %11, %8, !dbg !2238
  %12 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !2238
  br i1 %12, label %panic, label %checkok, !dbg !2238

checkok:                                          ; preds = %if.exit
  %ptradd10 = getelementptr inbounds i8, ptr %9, i64 %11, !dbg !2238
  %13 = load i8, ptr %c, align 1, !dbg !2238
  store i8 %13, ptr %ptradd10, align 1, !dbg !2238
  ret i64 0, !dbg !2238

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %16 = insertvalue %any undef, ptr %taddr5, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.194, i64 5 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.200, i64 13 }, ptr %indirectarg7, align 8
  store %any %15, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd8, align 16
  %18 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %18, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 327, ptr align 8 %indirectarg9), !dbg !2238
  unreachable, !dbg !2238
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.putchar(i8 %0) #0 comdat !dbg !2239 {
entry:
  %c = alloca i8, align 1
  store i8 %0, ptr %c, align 1
    #dbg_declare(ptr %c, !2242, !DIExpression(), !2243)
  %1 = load i8, ptr %c, align 1, !dbg !2244
  %zext = zext i8 %1 to i32, !dbg !2244
  %2 = call i32 @putchar(i32 %zext), !dbg !2244
  ret void, !dbg !2244
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.stdout() #0 comdat !dbg !2245 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdout.file, align 8, !dbg !2249
  %i2nb = icmp eq ptr %0, null, !dbg !2249
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2249

if.then:                                          ; preds = %entry
  %1 = call ptr @__acrt_iob_func(i32 1), !dbg !2250
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !2249
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdout.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdout.file, !dbg !2253
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.stderr() #0 comdat !dbg !2254 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stderr.file, align 8, !dbg !2255
  %i2nb = icmp eq ptr %0, null, !dbg !2255
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2255

if.then:                                          ; preds = %entry
  %1 = call ptr @__acrt_iob_func(i32 2), !dbg !2256
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !2255
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stderr.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stderr.file, !dbg !2258
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.stdin() #0 comdat !dbg !2259 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdin.file, align 8, !dbg !2260
  %i2nb = icmp eq ptr %0, null, !dbg !2260
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2260

if.then:                                          ; preds = %entry
  %1 = call ptr @__acrt_iob_func(i32 0), !dbg !2261
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !2260
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdin.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdin.file, !dbg !2263
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ReadBuffer.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2264 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %.assign_list = alloca %ReadBuffer, align 8
  %3 = icmp eq ptr %0, null, !dbg !2275
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2275
  br i1 %4, label %panic, label %checkok, !dbg !2275

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2276, !DIExpression(), !2277)
    #dbg_declare(ptr %1, !2278, !DIExpression(), !2277)
    #dbg_declare(ptr %2, !2279, !DIExpression(), !2277)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2280
  %5 = load i64, ptr %ptradd, align 8, !dbg !2280
  %lt = icmp ult i64 0, %5, !dbg !2280
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2280

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.202, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 14), !dbg !2280
  unreachable, !dbg !2280

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2282
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !2282
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !2282
  %8 = load i64, ptr %ptradd7, align 8, !dbg !2282
  %eq = icmp eq i64 0, %8, !dbg !2282
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !2282

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.203, i64 88 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 15), !dbg !2282
  unreachable, !dbg !2282

assert_ok12:                                      ; preds = %assert_ok
  %10 = load ptr, ptr %self, align 8, !dbg !2283
  %checknull = icmp eq ptr %10, null, !dbg !2283
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2283
  br i1 %11, label %panic13, label %checkok17, !dbg !2283

checkok17:                                        ; preds = %assert_ok12
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2283
  %ptradd18 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2283
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd18, ptr align 8 %2, i32 16, i1 false), !dbg !2283
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !2283
  %12 = load ptr, ptr %self, align 8, !dbg !2284
  ret ptr %12, !dbg !2284

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 17), !dbg !2277
  unreachable, !dbg !2277

panic13:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 19), !dbg !2283
  unreachable, !dbg !2283
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.ReadBuffer.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !2285 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 16
  %indirectarg24 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2288
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2288
  br i1 %3, label %panic, label %checkok, !dbg !2288

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2289, !DIExpression(), !2290)
  %4 = load ptr, ptr %self, align 8, !dbg !2291
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2291
  %5 = load %"char[]", ptr %ptradd, align 8, !dbg !2291
  %6 = extractvalue %"char[]" %5, 0, !dbg !2291
  %7 = load ptr, ptr %self, align 8, !dbg !2291
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 32, !dbg !2291
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2291
  %9 = extractvalue %"char[]" %5, 1, !dbg !2291
  %gt = icmp ugt i64 %8, %9, !dbg !2291
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2291
  br i1 %10, label %panic4, label %checkok11, !dbg !2291

checkok11:                                        ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !2291
  %ptradd12 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !2291
  %12 = load i64, ptr %ptradd12, align 8, !dbg !2291
  %13 = load ptr, ptr %self, align 8, !dbg !2291
  %ptradd13 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !2291
  %14 = load i64, ptr %ptradd13, align 8, !dbg !2291
  %sub = sub i64 %12, %14, !dbg !2291
  %add = add i64 %8, %sub, !dbg !2291
  %lt = icmp ult i64 %9, %add, !dbg !2291
  %sub14 = sub i64 %add, 1, !dbg !2291
  %15 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2291
  br i1 %15, label %panic15, label %checkok25, !dbg !2291

checkok25:                                        ; preds = %checkok11
  %size = sub i64 %add, %8, !dbg !2291
  %ptradd26 = getelementptr inbounds i8, ptr %6, i64 %8, !dbg !2291
  %16 = insertvalue %"char[]" undef, ptr %ptradd26, 0, !dbg !2291
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2291
  store %"char[]" %17, ptr %0, align 8, !dbg !2291
  ret void, !dbg !2291

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 22), !dbg !2290
  unreachable, !dbg !2290

panic4:                                           ; preds = %checkok
  store i64 %9, ptr %taddr, align 8
  %19 = insertvalue %any undef, ptr %taddr, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr5, align 8
  %21 = insertvalue %any undef, ptr %taddr5, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg8, align 8
  store %any %20, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd9, align 16
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 24, ptr align 8 %indirectarg10), !dbg !2291
  unreachable, !dbg !2291

panic15:                                          ; preds = %checkok11
  store i64 %sub14, ptr %taddr16, align 8
  %24 = insertvalue %any undef, ptr %taddr16, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr17, align 8
  %26 = insertvalue %any undef, ptr %taddr17, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg20, align 8
  store %any %25, ptr %varargslots21, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %27, ptr %ptradd22, align 16
  %28 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp23", ptr %indirectarg24, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 24, ptr align 8 %indirectarg24), !dbg !2291
  unreachable, !dbg !2291
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ReadBuffer.close(ptr %0) #0 comdat !dbg !2292 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !2295
  store ptr null, ptr %.cachedtype, align 8, !dbg !2295
  %1 = icmp eq ptr %0, null, !dbg !2295
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2295
  br i1 %2, label %panic, label %checkok, !dbg !2295

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2296, !DIExpression(), !2297)
  %3 = load ptr, ptr %self, align 8, !dbg !2298
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2298
  %4 = load i64, ptr %ptradd, align 8, !dbg !2298
  %5 = inttoptr i64 %4 to ptr, !dbg !2298
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2295
  %6 = icmp eq ptr %5, %type, !dbg !2295
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !2295

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2295
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !2295
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !2295
  store ptr %8, ptr %.inlinecache, align 8, !dbg !2295
  store ptr %5, ptr %.cachedtype, align 8, !dbg !2295
  br label %9, !dbg !2295

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2295
  br label %9, !dbg !2295

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !2295
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2295
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2295

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !2298
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2298
  %11 = load i64, ptr %ptradd4, align 8, !dbg !2298
  %12 = inttoptr i64 %11 to ptr, !dbg !2298
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !2295
  %13 = icmp eq ptr %12, %type7, !dbg !2295
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !2295

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2295
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !2295
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !2295
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !2295
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !2295
  br label %16, !dbg !2295

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !2295
  br label %16, !dbg !2295

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !2295
  %17 = icmp eq ptr %fn_phi12, null, !dbg !2295
  br i1 %17, label %missing_function, label %match, !dbg !2295

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.206, i64 42 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg15, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 29), !dbg !2298
  unreachable, !dbg !2298

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !2298
  %20 = call i64 %fn_phi12(ptr %19), !dbg !2298
  %not_err = icmp eq i64 %20, 0, !dbg !2298
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2298
  br i1 %21, label %after_check, label %assign_optional, !dbg !2298

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !2298
  br label %guard_block, !dbg !2298

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2298

guard_block:                                      ; preds = %assign_optional
  %22 = load i64, ptr %error_var, align 8, !dbg !2298
  ret i64 %22, !dbg !2298

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2298

if.exit:                                          ; preds = %noerr_block, %9
  ret i64 0, !dbg !2298

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 27), !dbg !2297
  unreachable, !dbg !2297
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ReadBuffer.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2299 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %error_var16 = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %indirectarg55 = alloca %"char[]", align 8
  %indirectarg56 = alloca %"char[]", align 8
  %indirectarg57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 16
  %indirectarg61 = alloca %"any[]", align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %varargslots72 = alloca [2 x %any], align 16
  %indirectarg75 = alloca %"any[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr80 = alloca %"char[]", align 8
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %varargslots88 = alloca [2 x %any], align 16
  %indirectarg91 = alloca %"any[]", align 8
  %reterr95 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2302
  %3 = icmp eq ptr %1, null, !dbg !2302
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2302
  br i1 %4, label %panic, label %checkok, !dbg !2302

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2303, !DIExpression(), !2304)
    #dbg_declare(ptr %2, !2305, !DIExpression(), !2304)
  %5 = load ptr, ptr %self, align 8, !dbg !2306
  %ptradd = getelementptr inbounds i8, ptr %5, i64 32, !dbg !2306
  %6 = load i64, ptr %ptradd, align 8, !dbg !2306
  %7 = load ptr, ptr %self, align 8, !dbg !2306
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !2306
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2306
  %eq = icmp eq i64 %6, %8, !dbg !2306
  br i1 %eq, label %if.then, label %if.exit22, !dbg !2306

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2307
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 32, !dbg !2307
  %10 = load i64, ptr %ptradd4, align 8, !dbg !2307
  %eq5 = icmp eq i64 0, %10, !dbg !2307
  br i1 %eq5, label %and.rhs, label %and.phi, !dbg !2307

and.rhs:                                          ; preds = %if.then
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2307
  %11 = load i64, ptr %ptradd6, align 8, !dbg !2307
  %12 = load ptr, ptr %self, align 8, !dbg !2307
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2307
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !2307
  %13 = load i64, ptr %ptradd8, align 8, !dbg !2307
  %ge = icmp uge i64 %11, %13, !dbg !2307
  br label %and.phi, !dbg !2307

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %ge, %and.rhs ], !dbg !2307
  br i1 %val, label %if.then9, label %if.exit, !dbg !2307

if.then9:                                         ; preds = %and.phi
  %14 = load ptr, ptr %self, align 8, !dbg !2309
  %ptradd10 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !2309
  %15 = load i64, ptr %ptradd10, align 8, !dbg !2309
  %16 = inttoptr i64 %15 to ptr, !dbg !2309
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2302
  %17 = icmp eq ptr %16, %type, !dbg !2302
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !2302

cache_miss:                                       ; preds = %if.then9
  %ptradd11 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2302
  %18 = load ptr, ptr %ptradd11, align 8, !dbg !2302
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.read"), !dbg !2302
  store ptr %19, ptr %.inlinecache, align 8, !dbg !2302
  store ptr %16, ptr %.cachedtype, align 8, !dbg !2302
  br label %20, !dbg !2302

cache_hit:                                        ; preds = %if.then9
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2302
  br label %20, !dbg !2302

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !2302
  %21 = icmp eq ptr %fn_phi, null, !dbg !2302
  br i1 %21, label %missing_function, label %match, !dbg !2302

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg14, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 39), !dbg !2309
  unreachable, !dbg !2309

match:                                            ; preds = %20
  %23 = load ptr, ptr %14, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg15, ptr align 8 %2, i32 16, i1 false)
  %24 = call i64 %fn_phi(ptr %retparam, ptr %23, ptr align 8 %indirectarg15), !dbg !2309
  %not_err = icmp eq i64 %24, 0, !dbg !2309
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2309
  br i1 %25, label %after_check, label %assign_optional, !dbg !2309

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !2309
  br label %guard_block, !dbg !2309

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2309

guard_block:                                      ; preds = %assign_optional
  %26 = load i64, ptr %error_var, align 8, !dbg !2309
  ret i64 %26, !dbg !2309

noerr_block:                                      ; preds = %after_check
  %27 = load i64, ptr %retparam, align 8, !dbg !2309
  store i64 %27, ptr %0, align 8, !dbg !2309
  ret i64 0, !dbg !2309

if.exit:                                          ; preds = %and.phi
  %28 = load ptr, ptr %self, align 8, !dbg !2311
  %29 = call i64 @std.io.ReadBuffer.refill(ptr %28) #5, !dbg !2311
  %not_err17 = icmp eq i64 %29, 0, !dbg !2311
  %30 = call i1 @llvm.expect.i1(i1 %not_err17, i1 true), !dbg !2311
  br i1 %30, label %after_check19, label %assign_optional18, !dbg !2311

assign_optional18:                                ; preds = %if.exit
  store i64 %29, ptr %error_var16, align 8, !dbg !2311
  br label %guard_block20, !dbg !2311

after_check19:                                    ; preds = %if.exit
  br label %noerr_block21, !dbg !2311

guard_block20:                                    ; preds = %assign_optional18
  %31 = load i64, ptr %error_var16, align 8, !dbg !2311
  ret i64 %31, !dbg !2311

noerr_block21:                                    ; preds = %after_check19
  br label %if.exit22, !dbg !2311

if.exit22:                                        ; preds = %noerr_block21, %checkok
    #dbg_declare(ptr %n, !2312, !DIExpression(), !2313)
  %32 = load ptr, ptr %self, align 8, !dbg !2313
  %ptradd23 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !2313
  %33 = load i64, ptr %ptradd23, align 8, !dbg !2313
  %34 = load ptr, ptr %self, align 8, !dbg !2313
  %ptradd24 = getelementptr inbounds i8, ptr %34, i64 32, !dbg !2313
  %35 = load i64, ptr %ptradd24, align 8, !dbg !2313
  %sub = sub i64 %33, %35, !dbg !2313
  store i64 %sub, ptr %x, align 8
  %ptradd25 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2313
  %36 = load i64, ptr %ptradd25, align 8
  store i64 %36, ptr %.anon, align 8
  %37 = load i64, ptr %x, align 8
  store i64 %37, ptr %a, align 8
  %38 = load i64, ptr %.anon, align 8
  store i64 %38, ptr %b, align 8
  %39 = load i64, ptr %a, align 8, !dbg !2314
  %40 = load i64, ptr %b, align 8, !dbg !2314
  %lt = icmp ult i64 %39, %40, !dbg !2314
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2314

cond.lhs:                                         ; preds = %if.exit22
  %41 = load i64, ptr %x, align 8, !dbg !2316
  br label %cond.phi, !dbg !2316

cond.rhs:                                         ; preds = %if.exit22
  %42 = load i64, ptr %.anon, align 8, !dbg !2316
  br label %cond.phi, !dbg !2316

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val26 = phi i64 [ %41, %cond.lhs ], [ %42, %cond.rhs ], !dbg !2316
  store i64 %val26, ptr %n, align 8, !dbg !2316
  %43 = load ptr, ptr %self, align 8, !dbg !2318
  %ptradd27 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !2318
  %44 = load %"char[]", ptr %ptradd27, align 8, !dbg !2318
  %45 = extractvalue %"char[]" %44, 0, !dbg !2318
  %46 = load ptr, ptr %self, align 8, !dbg !2318
  %ptradd28 = getelementptr inbounds i8, ptr %46, i64 32, !dbg !2318
  %47 = load i64, ptr %ptradd28, align 8, !dbg !2318
  %48 = extractvalue %"char[]" %44, 1, !dbg !2318
  %gt = icmp ugt i64 %47, %48, !dbg !2318
  %49 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2318
  br i1 %49, label %panic29, label %checkok36, !dbg !2318

checkok36:                                        ; preds = %cond.phi
  %50 = load i64, ptr %n, align 8, !dbg !2318
  %add = add i64 %47, %50, !dbg !2318
  %lt37 = icmp ult i64 %48, %add, !dbg !2318
  %sub38 = sub i64 %add, 1, !dbg !2318
  %51 = call i1 @llvm.expect.i1(i1 %lt37, i1 false), !dbg !2318
  br i1 %51, label %panic39, label %checkok49, !dbg !2318

checkok49:                                        ; preds = %checkok36
  %size = sub i64 %add, %47, !dbg !2318
  %ptradd50 = getelementptr inbounds i8, ptr %45, i64 %47, !dbg !2318
  %52 = insertvalue %"char[]" undef, ptr %ptradd50, 0, !dbg !2318
  %53 = insertvalue %"char[]" %52, i64 %size, 1, !dbg !2318
  %54 = load %"char[]", ptr %2, align 8, !dbg !2318
  %55 = extractvalue %"char[]" %54, 0, !dbg !2318
  %56 = extractvalue %"char[]" %54, 1, !dbg !2318
  %gt51 = icmp ugt i64 0, %56, !dbg !2318
  %57 = call i1 @llvm.expect.i1(i1 %gt51, i1 false), !dbg !2318
  br i1 %57, label %panic52, label %checkok62, !dbg !2318

checkok62:                                        ; preds = %checkok49
  %58 = load i64, ptr %n, align 8, !dbg !2318
  %add63 = add i64 0, %58, !dbg !2318
  %lt64 = icmp ult i64 %56, %add63, !dbg !2318
  %sub65 = sub i64 %add63, 1, !dbg !2318
  %59 = call i1 @llvm.expect.i1(i1 %lt64, i1 false), !dbg !2318
  br i1 %59, label %panic66, label %checkok76, !dbg !2318

checkok76:                                        ; preds = %checkok62
  %size77 = sub i64 %add63, 0, !dbg !2318
  %60 = insertvalue %"char[]" undef, ptr %55, 0, !dbg !2318
  %61 = insertvalue %"char[]" %60, i64 %size77, 1, !dbg !2318
  %62 = extractvalue %"char[]" %61, 0, !dbg !2318
  %63 = extractvalue %"char[]" %53, 0, !dbg !2318
  store %"char[]" %53, ptr %taddr78, align 8
  %ptradd79 = getelementptr inbounds i8, ptr %taddr78, i64 8
  %64 = load i64, ptr %ptradd79, align 8
  store %"char[]" %61, ptr %taddr80, align 8
  %ptradd81 = getelementptr inbounds i8, ptr %taddr80, i64 8
  %65 = load i64, ptr %ptradd81, align 8
  %neq = icmp ne i64 %65, %64
  %66 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %66, label %panic82, label %checkok92

checkok92:                                        ; preds = %checkok76
  %67 = mul i64 %64, 1, !dbg !2318
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %62, ptr align 1 %63, i64 %67, i1 false), !dbg !2318
  %68 = load ptr, ptr %self, align 8, !dbg !2319
  %ptradd93 = getelementptr inbounds i8, ptr %68, i64 32, !dbg !2319
  %69 = load i64, ptr %ptradd93, align 8, !dbg !2319
  %70 = load i64, ptr %n, align 8, !dbg !2319
  %add94 = add i64 %69, %70, !dbg !2319
  store i64 %add94, ptr %ptradd93, align 8, !dbg !2319
  %71 = load i64, ptr %n, align 8, !dbg !2320
  store i64 %71, ptr %0, align 8, !dbg !2320
  ret i64 0, !dbg !2320

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg2, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 32), !dbg !2304
  unreachable, !dbg !2304

panic29:                                          ; preds = %cond.phi
  store i64 %48, ptr %taddr, align 8
  %73 = insertvalue %any undef, ptr %taddr, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr30, align 8
  %75 = insertvalue %any undef, ptr %taddr30, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg33, align 8
  store %any %74, ptr %varargslots, align 16
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %76, ptr %ptradd34, align 16
  %77 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 44, ptr align 8 %indirectarg35), !dbg !2318
  unreachable, !dbg !2318

panic39:                                          ; preds = %checkok36
  store i64 %sub38, ptr %taddr40, align 8
  %78 = insertvalue %any undef, ptr %taddr40, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr41, align 8
  %80 = insertvalue %any undef, ptr %taddr41, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg44, align 8
  store %any %79, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %81, ptr %ptradd46, align 16
  %82 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %82, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 44, ptr align 8 %indirectarg48), !dbg !2318
  unreachable, !dbg !2318

panic52:                                          ; preds = %checkok49
  store i64 %56, ptr %taddr53, align 8
  %83 = insertvalue %any undef, ptr %taddr53, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr54, align 8
  %85 = insertvalue %any undef, ptr %taddr54, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg55, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg56, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg57, align 8
  store %any %84, ptr %varargslots58, align 16
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %86, ptr %ptradd59, align 16
  %87 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp60", ptr %indirectarg61, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg55, ptr align 8 %indirectarg56, ptr align 8 %indirectarg57, i32 44, ptr align 8 %indirectarg61), !dbg !2318
  unreachable, !dbg !2318

panic66:                                          ; preds = %checkok62
  store i64 %sub65, ptr %taddr67, align 8
  %88 = insertvalue %any undef, ptr %taddr67, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %56, ptr %taddr68, align 8
  %90 = insertvalue %any undef, ptr %taddr68, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg71, align 8
  store %any %89, ptr %varargslots72, align 16
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %91, ptr %ptradd73, align 16
  %92 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %92, i64 2, 1
  store %"any[]" %"$$temp74", ptr %indirectarg75, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 44, ptr align 8 %indirectarg75), !dbg !2318
  unreachable, !dbg !2318

panic82:                                          ; preds = %checkok76
  store i64 %65, ptr %taddr83, align 8
  %93 = insertvalue %any undef, ptr %taddr83, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %64, ptr %taddr84, align 8
  %95 = insertvalue %any undef, ptr %taddr84, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg87, align 8
  store %any %94, ptr %varargslots88, align 16
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %any %96, ptr %ptradd89, align 16
  %97 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp90" = insertvalue %"any[]" %97, i64 2, 1
  store %"any[]" %"$$temp90", ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, i32 44, ptr align 8 %indirectarg91), !dbg !2318
  unreachable, !dbg !2318
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ReadBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2321 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2324
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2324
  br i1 %3, label %panic, label %checkok, !dbg !2324

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2325, !DIExpression(), !2326)
  %4 = load ptr, ptr %self, align 8, !dbg !2327
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !2327
  %5 = load i64, ptr %ptradd, align 8, !dbg !2327
  %6 = load ptr, ptr %self, align 8, !dbg !2327
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2327
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2327
  %eq = icmp eq i64 %5, %7, !dbg !2327
  br i1 %eq, label %if.then, label %if.exit, !dbg !2327

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2327
  %9 = call i64 @std.io.ReadBuffer.refill(ptr %8) #5, !dbg !2327
  %not_err = icmp eq i64 %9, 0, !dbg !2327
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2327
  br i1 %10, label %after_check, label %assign_optional, !dbg !2327

assign_optional:                                  ; preds = %if.then
  store i64 %9, ptr %error_var, align 8, !dbg !2327
  br label %guard_block, !dbg !2327

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !2327

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !2327
  ret i64 %11, !dbg !2327

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2327

if.exit:                                          ; preds = %noerr_block, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !2328
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !2328
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2328
  %14 = load ptr, ptr %self, align 8, !dbg !2328
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !2328
  %15 = load i64, ptr %ptradd5, align 8, !dbg !2328
  %eq6 = icmp eq i64 %13, %15, !dbg !2328
  br i1 %eq6, label %if.then7, label %if.exit8, !dbg !2328

if.then7:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2328

if.exit8:                                         ; preds = %if.exit
    #dbg_declare(ptr %c, !2329, !DIExpression(), !2330)
  %16 = load ptr, ptr %self, align 8, !dbg !2330
  %ptradd9 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2330
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 8, !dbg !2330
  %17 = load i64, ptr %ptradd10, align 8, !dbg !2330
  %18 = load ptr, ptr %ptradd9, align 8, !dbg !2330
  %19 = load ptr, ptr %self, align 8, !dbg !2330
  %ptradd11 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !2330
  %20 = load i64, ptr %ptradd11, align 8, !dbg !2330
  %ge = icmp uge i64 %20, %17, !dbg !2330
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2330
  br i1 %21, label %panic12, label %checkok19, !dbg !2330

checkok19:                                        ; preds = %if.exit8
  %ptradd20 = getelementptr inbounds i8, ptr %18, i64 %20, !dbg !2330
  %22 = load i8, ptr %ptradd20, align 1, !dbg !2330
  store i8 %22, ptr %c, align 1, !dbg !2330
  %23 = load ptr, ptr %self, align 8, !dbg !2331
  %ptradd21 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !2331
  %24 = load i64, ptr %ptradd21, align 8, !dbg !2331
  %add = add i64 %24, 1, !dbg !2331
  store i64 %add, ptr %ptradd21, align 8, !dbg !2331
  %25 = load i8, ptr %c, align 1, !dbg !2332
  store i8 %25, ptr %0, align 1, !dbg !2332
  ret i64 0, !dbg !2332

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 49), !dbg !2326
  unreachable, !dbg !2326

panic12:                                          ; preds = %if.exit8
  store i64 %17, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr13, align 8
  %29 = insertvalue %any undef, ptr %taddr13, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg16, align 8
  store %any %28, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd17, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 53, ptr align 8 %indirectarg18), !dbg !2330
  unreachable, !dbg !2330
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.ReadBuffer.refill(ptr %0) #0 !dbg !2333 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2334
  %1 = icmp eq ptr %0, null, !dbg !2334
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2334
  br i1 %2, label %panic, label %checkok, !dbg !2334

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2335, !DIExpression(), !2336)
  %3 = load ptr, ptr %self, align 8, !dbg !2337
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2337
  store i64 0, ptr %ptradd, align 8, !dbg !2337
  %4 = load ptr, ptr %self, align 8, !dbg !2338
  %ptradd3 = getelementptr inbounds i8, ptr %4, i64 40, !dbg !2338
  %5 = load ptr, ptr %self, align 8, !dbg !2338
  %6 = load ptr, ptr %self, align 8, !dbg !2338
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2338
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2338
  %7 = load i64, ptr %ptradd5, align 8, !dbg !2338
  %8 = inttoptr i64 %7 to ptr, !dbg !2338
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2334
  %9 = icmp eq ptr %8, %type, !dbg !2334
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !2334

cache_miss:                                       ; preds = %checkok
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2334
  %10 = load ptr, ptr %ptradd6, align 8, !dbg !2334
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read"), !dbg !2334
  store ptr %11, ptr %.inlinecache, align 8, !dbg !2334
  store ptr %8, ptr %.cachedtype, align 8, !dbg !2334
  br label %12, !dbg !2334

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2334
  br label %12, !dbg !2334

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !2334
  %13 = icmp eq ptr %fn_phi, null, !dbg !2334
  br i1 %13, label %missing_function, label %match, !dbg !2334

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.211, i64 6 }, ptr %indirectarg9, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 61), !dbg !2338
  unreachable, !dbg !2338

match:                                            ; preds = %12
  %15 = load ptr, ptr %5, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %ptradd4, i32 16, i1 false)
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15, ptr align 8 %indirectarg10), !dbg !2338
  %not_err = icmp eq i64 %16, 0, !dbg !2338
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2338
  br i1 %17, label %after_check, label %assign_optional, !dbg !2338

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %error_var, align 8, !dbg !2338
  br label %guard_block, !dbg !2338

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2338

guard_block:                                      ; preds = %assign_optional
  %18 = load i64, ptr %error_var, align 8, !dbg !2338
  ret i64 %18, !dbg !2338

noerr_block:                                      ; preds = %after_check
  %19 = load i64, ptr %retparam, align 8, !dbg !2338
  store i64 %19, ptr %ptradd3, align 8, !dbg !2338
  ret i64 0, !dbg !2338

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.211, i64 6 }, ptr %indirectarg2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 58), !dbg !2336
  unreachable, !dbg !2336
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.WriteBuffer.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2339 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %.assign_list = alloca %WriteBuffer, align 8
  %3 = icmp eq ptr %0, null, !dbg !2348
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2348
  br i1 %4, label %panic, label %checkok, !dbg !2348

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2349, !DIExpression(), !2350)
    #dbg_declare(ptr %1, !2351, !DIExpression(), !2350)
    #dbg_declare(ptr %2, !2352, !DIExpression(), !2350)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2353
  %5 = load i64, ptr %ptradd, align 8, !dbg !2353
  %lt = icmp ult i64 0, %5, !dbg !2353
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2353

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.212, i64 63 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 74), !dbg !2353
  unreachable, !dbg !2353

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2355
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !2355
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !2355
  %8 = load i64, ptr %ptradd7, align 8, !dbg !2355
  %eq = icmp eq i64 0, %8, !dbg !2355
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !2355

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.203, i64 88 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 75), !dbg !2355
  unreachable, !dbg !2355

assert_ok12:                                      ; preds = %assert_ok
  %10 = load ptr, ptr %self, align 8, !dbg !2356
  %checknull = icmp eq ptr %10, null, !dbg !2356
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2356
  br i1 %11, label %panic13, label %checkok17, !dbg !2356

checkok17:                                        ; preds = %assert_ok12
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2356
  %ptradd18 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2356
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd18, ptr align 8 %2, i32 16, i1 false), !dbg !2356
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2356
  %12 = load ptr, ptr %self, align 8, !dbg !2357
  ret ptr %12, !dbg !2357

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 77), !dbg !2350
  unreachable, !dbg !2350

panic13:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 79), !dbg !2356
  unreachable, !dbg !2356
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.WriteBuffer.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !2358 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg9 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 16
  %indirectarg21 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2361
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2361
  br i1 %3, label %panic, label %checkok, !dbg !2361

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2362, !DIExpression(), !2363)
  %4 = load ptr, ptr %self, align 8, !dbg !2364
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2364
  %5 = load %"char[]", ptr %ptradd, align 8, !dbg !2364
  %6 = extractvalue %"char[]" %5, 0, !dbg !2364
  %7 = extractvalue %"char[]" %5, 1, !dbg !2364
  %gt = icmp ugt i64 0, %7, !dbg !2364
  %8 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2364
  br i1 %8, label %panic3, label %checkok10, !dbg !2364

checkok10:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2364
  %ptradd11 = getelementptr inbounds i8, ptr %9, i64 32, !dbg !2364
  %10 = load i64, ptr %ptradd11, align 8, !dbg !2364
  %add = add i64 0, %10, !dbg !2364
  %lt = icmp ult i64 %7, %add, !dbg !2364
  %sub = sub i64 %add, 1, !dbg !2364
  %11 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2364
  br i1 %11, label %panic12, label %checkok22, !dbg !2364

checkok22:                                        ; preds = %checkok10
  %size = sub i64 %add, 0, !dbg !2364
  %12 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !2364
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2364
  store %"char[]" %13, ptr %0, align 8, !dbg !2364
  ret void, !dbg !2364

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 83), !dbg !2363
  unreachable, !dbg !2363

panic3:                                           ; preds = %checkok
  store i64 %7, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr4, align 8
  %17 = insertvalue %any undef, ptr %taddr4, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg7, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd8, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg9, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 85, ptr align 8 %indirectarg9), !dbg !2364
  unreachable, !dbg !2364

panic12:                                          ; preds = %checkok10
  store i64 %sub, ptr %taddr13, align 8
  %20 = insertvalue %any undef, ptr %taddr13, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr14, align 8
  %22 = insertvalue %any undef, ptr %taddr14, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg17, align 8
  store %any %21, ptr %varargslots18, align 16
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %23, ptr %ptradd19, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp20", ptr %indirectarg21, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 85, ptr align 8 %indirectarg21), !dbg !2364
  unreachable, !dbg !2364
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.close(ptr %0) #0 comdat !dbg !2365 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !2368
  store ptr null, ptr %.cachedtype, align 8, !dbg !2368
  %1 = icmp eq ptr %0, null, !dbg !2368
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2368
  br i1 %2, label %panic, label %checkok, !dbg !2368

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2369, !DIExpression(), !2370)
  %3 = load ptr, ptr %self, align 8, !dbg !2371
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2371
  %4 = load i64, ptr %ptradd, align 8, !dbg !2371
  %5 = inttoptr i64 %4 to ptr, !dbg !2371
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2368
  %6 = icmp eq ptr %5, %type, !dbg !2368
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !2368

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2368
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !2368
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !2368
  store ptr %8, ptr %.inlinecache, align 8, !dbg !2368
  store ptr %5, ptr %.cachedtype, align 8, !dbg !2368
  br label %9, !dbg !2368

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2368
  br label %9, !dbg !2368

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !2368
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2368
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2368

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !2371
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2371
  %11 = load i64, ptr %ptradd4, align 8, !dbg !2371
  %12 = inttoptr i64 %11 to ptr, !dbg !2371
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !2368
  %13 = icmp eq ptr %12, %type7, !dbg !2368
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !2368

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2368
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !2368
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !2368
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !2368
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !2368
  br label %16, !dbg !2368

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !2368
  br label %16, !dbg !2368

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !2368
  %17 = icmp eq ptr %fn_phi12, null, !dbg !2368
  br i1 %17, label %missing_function, label %match, !dbg !2368

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.206, i64 42 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg15, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 90), !dbg !2371
  unreachable, !dbg !2371

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !2371
  %20 = call i64 %fn_phi12(ptr %19), !dbg !2371
  %not_err = icmp eq i64 %20, 0, !dbg !2371
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2371
  br i1 %21, label %after_check, label %assign_optional, !dbg !2371

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !2371
  br label %err_retblock, !dbg !2371

after_check:                                      ; preds = %match
  ret i64 0, !dbg !2371

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !2371
  ret i64 %22, !dbg !2371

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !2371

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88), !dbg !2370
  unreachable, !dbg !2370
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.flush(ptr %0) #0 comdat !dbg !2372 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var4 = alloca i64, align 8
  %.inlinecache6 = alloca ptr, align 8
  %.cachedtype7 = alloca ptr, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype7, align 8, !dbg !2373
  store ptr null, ptr %.cachedtype, align 8, !dbg !2373
  %1 = icmp eq ptr %0, null, !dbg !2373
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2373
  br i1 %2, label %panic, label %checkok, !dbg !2373

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2374, !DIExpression(), !2375)
  %3 = load ptr, ptr %self, align 8, !dbg !2376
  %4 = call i64 @std.io.WriteBuffer.write_pending(ptr %3), !dbg !2376
  %not_err = icmp eq i64 %4, 0, !dbg !2376
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2376
  br i1 %5, label %after_check, label %assign_optional, !dbg !2376

assign_optional:                                  ; preds = %checkok
  store i64 %4, ptr %error_var, align 8, !dbg !2376
  br label %guard_block, !dbg !2376

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2376

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !2376
  ret i64 %6, !dbg !2376

noerr_block:                                      ; preds = %after_check
  %7 = load ptr, ptr %self, align 8, !dbg !2377
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2377
  %8 = load i64, ptr %ptradd, align 8, !dbg !2377
  %9 = inttoptr i64 %8 to ptr, !dbg !2377
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2373
  %10 = icmp eq ptr %9, %type, !dbg !2373
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !2373

cache_miss:                                       ; preds = %noerr_block
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2373
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !2373
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.flush"), !dbg !2373
  store ptr %12, ptr %.inlinecache, align 8, !dbg !2373
  store ptr %9, ptr %.cachedtype, align 8, !dbg !2373
  br label %13, !dbg !2373

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2373
  br label %13, !dbg !2373

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !2373
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2373
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2373

if.then:                                          ; preds = %13
  %14 = load ptr, ptr %self, align 8, !dbg !2377
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !2377
  %15 = load i64, ptr %ptradd5, align 8, !dbg !2377
  %16 = inttoptr i64 %15 to ptr, !dbg !2377
  %type8 = load ptr, ptr %.cachedtype7, align 8, !dbg !2373
  %17 = icmp eq ptr %16, %type8, !dbg !2373
  br i1 %17, label %cache_hit11, label %cache_miss9, !dbg !2373

cache_miss9:                                      ; preds = %if.then
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2373
  %18 = load ptr, ptr %ptradd10, align 8, !dbg !2373
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.flush"), !dbg !2373
  store ptr %19, ptr %.inlinecache6, align 8, !dbg !2373
  store ptr %16, ptr %.cachedtype7, align 8, !dbg !2373
  br label %20, !dbg !2373

cache_hit11:                                      ; preds = %if.then
  %cache_hit_fn12 = load ptr, ptr %.inlinecache6, align 8, !dbg !2373
  br label %20, !dbg !2373

20:                                               ; preds = %cache_hit11, %cache_miss9
  %fn_phi13 = phi ptr [ %cache_hit_fn12, %cache_hit11 ], [ %19, %cache_miss9 ], !dbg !2373
  %21 = icmp eq ptr %fn_phi13, null, !dbg !2373
  br i1 %21, label %missing_function, label %match, !dbg !2373

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.196, i64 42 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg16, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 96), !dbg !2377
  unreachable, !dbg !2377

match:                                            ; preds = %20
  %23 = load ptr, ptr %14, align 8, !dbg !2377
  %24 = call i64 %fn_phi13(ptr %23), !dbg !2377
  %not_err17 = icmp eq i64 %24, 0, !dbg !2377
  %25 = call i1 @llvm.expect.i1(i1 %not_err17, i1 true), !dbg !2377
  br i1 %25, label %after_check19, label %assign_optional18, !dbg !2377

assign_optional18:                                ; preds = %match
  store i64 %24, ptr %error_var4, align 8, !dbg !2377
  br label %guard_block20, !dbg !2377

after_check19:                                    ; preds = %match
  br label %noerr_block21, !dbg !2377

guard_block20:                                    ; preds = %assign_optional18
  %26 = load i64, ptr %error_var4, align 8, !dbg !2377
  ret i64 %26, !dbg !2377

noerr_block21:                                    ; preds = %after_check19
  br label %if.exit, !dbg !2377

if.exit:                                          ; preds = %noerr_block21, %13
  ret i64 0, !dbg !2377

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93), !dbg !2375
  unreachable, !dbg !2375
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2378 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr46 = alloca %"char[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 16
  %indirectarg57 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr67 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %indirectarg82 = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 16
  %indirectarg88 = alloca %"any[]", align 8
  %taddr94 = alloca i64, align 8
  %taddr95 = alloca i64, align 8
  %indirectarg96 = alloca %"char[]", align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %varargslots99 = alloca [2 x %any], align 16
  %indirectarg102 = alloca %"any[]", align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %indirectarg111 = alloca %"char[]", align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %varargslots114 = alloca [2 x %any], align 16
  %indirectarg117 = alloca %"any[]", align 8
  %taddr120 = alloca %"char[]", align 8
  %taddr122 = alloca %"char[]", align 8
  %taddr126 = alloca i64, align 8
  %taddr127 = alloca i64, align 8
  %indirectarg128 = alloca %"char[]", align 8
  %indirectarg129 = alloca %"char[]", align 8
  %indirectarg130 = alloca %"char[]", align 8
  %varargslots131 = alloca [2 x %any], align 16
  %indirectarg134 = alloca %"any[]", align 8
  %reterr138 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2381
  %3 = icmp eq ptr %1, null, !dbg !2381
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2381
  br i1 %4, label %panic, label %checkok, !dbg !2381

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2382, !DIExpression(), !2383)
    #dbg_declare(ptr %2, !2384, !DIExpression(), !2383)
    #dbg_declare(ptr %n, !2385, !DIExpression(), !2386)
  %5 = load ptr, ptr %self, align 8, !dbg !2386
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2386
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2386
  %6 = load i64, ptr %ptradd3, align 8, !dbg !2386
  %7 = load ptr, ptr %self, align 8, !dbg !2386
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 32, !dbg !2386
  %8 = load i64, ptr %ptradd4, align 8, !dbg !2386
  %sub = sub i64 %6, %8, !dbg !2386
  store i64 %sub, ptr %n, align 8, !dbg !2386
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2387
  %9 = load i64, ptr %ptradd5, align 8, !dbg !2387
  %10 = load i64, ptr %n, align 8, !dbg !2387
  %lt = icmp ult i64 %9, %10, !dbg !2387
  br i1 %lt, label %if.then, label %if.exit, !dbg !2387

if.then:                                          ; preds = %checkok
  %11 = load %"char[]", ptr %2, align 8, !dbg !2388
  %12 = extractvalue %"char[]" %11, 0, !dbg !2388
  %13 = extractvalue %"char[]" %11, 1, !dbg !2388
  %gt = icmp ugt i64 0, %13, !dbg !2388
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2388
  br i1 %14, label %panic6, label %checkok13, !dbg !2388

checkok13:                                        ; preds = %if.then
  %size = sub i64 %13, 0, !dbg !2388
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !2388
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !2388
  %17 = load ptr, ptr %self, align 8, !dbg !2388
  %ptradd14 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2388
  %18 = load %"char[]", ptr %ptradd14, align 8, !dbg !2388
  %19 = extractvalue %"char[]" %18, 0, !dbg !2388
  %20 = load ptr, ptr %self, align 8, !dbg !2388
  %ptradd15 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !2388
  %21 = load i64, ptr %ptradd15, align 8, !dbg !2388
  %22 = extractvalue %"char[]" %18, 1, !dbg !2388
  %gt16 = icmp ugt i64 %21, %22, !dbg !2388
  %23 = call i1 @llvm.expect.i1(i1 %gt16, i1 false), !dbg !2388
  br i1 %23, label %panic17, label %checkok27, !dbg !2388

checkok27:                                        ; preds = %checkok13
  %ptradd28 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2388
  %24 = load i64, ptr %ptradd28, align 8, !dbg !2388
  %add = add i64 %21, %24, !dbg !2388
  %lt29 = icmp ult i64 %22, %add, !dbg !2388
  %sub30 = sub i64 %add, 1, !dbg !2388
  %25 = call i1 @llvm.expect.i1(i1 %lt29, i1 false), !dbg !2388
  br i1 %25, label %panic31, label %checkok41, !dbg !2388

checkok41:                                        ; preds = %checkok27
  %size42 = sub i64 %add, %21, !dbg !2388
  %ptradd43 = getelementptr inbounds i8, ptr %19, i64 %21, !dbg !2388
  %26 = insertvalue %"char[]" undef, ptr %ptradd43, 0, !dbg !2388
  %27 = insertvalue %"char[]" %26, i64 %size42, 1, !dbg !2388
  %28 = extractvalue %"char[]" %27, 0, !dbg !2388
  %29 = extractvalue %"char[]" %16, 0, !dbg !2388
  store %"char[]" %16, ptr %taddr44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %taddr44, i64 8
  %30 = load i64, ptr %ptradd45, align 8
  store %"char[]" %27, ptr %taddr46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %taddr46, i64 8
  %31 = load i64, ptr %ptradd47, align 8
  %neq = icmp ne i64 %31, %30
  %32 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %32, label %panic48, label %checkok58

checkok58:                                        ; preds = %checkok41
  %33 = mul i64 %30, 1, !dbg !2388
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %28, ptr align 1 %29, i64 %33, i1 false), !dbg !2388
  %34 = load ptr, ptr %self, align 8, !dbg !2390
  %ptradd59 = getelementptr inbounds i8, ptr %34, i64 32, !dbg !2390
  %35 = load i64, ptr %ptradd59, align 8, !dbg !2390
  %ptradd60 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2390
  %36 = load i64, ptr %ptradd60, align 8, !dbg !2390
  %add61 = add i64 %35, %36, !dbg !2390
  store i64 %add61, ptr %ptradd59, align 8, !dbg !2390
  %ptradd62 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2391
  %37 = load i64, ptr %ptradd62, align 8, !dbg !2391
  store i64 %37, ptr %0, align 8, !dbg !2391
  ret i64 0, !dbg !2391

if.exit:                                          ; preds = %checkok
  %38 = load ptr, ptr %self, align 8, !dbg !2392
  %39 = call i64 @std.io.WriteBuffer.write_pending(ptr %38), !dbg !2392
  %not_err = icmp eq i64 %39, 0, !dbg !2392
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2392
  br i1 %40, label %after_check, label %assign_optional, !dbg !2392

assign_optional:                                  ; preds = %if.exit
  store i64 %39, ptr %error_var, align 8, !dbg !2392
  br label %guard_block, !dbg !2392

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !2392

guard_block:                                      ; preds = %assign_optional
  %41 = load i64, ptr %error_var, align 8, !dbg !2392
  ret i64 %41, !dbg !2392

noerr_block:                                      ; preds = %after_check
  %ptradd63 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2393
  %42 = load i64, ptr %ptradd63, align 8, !dbg !2393
  %43 = load ptr, ptr %self, align 8, !dbg !2393
  %ptradd64 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !2393
  %ptradd65 = getelementptr inbounds i8, ptr %ptradd64, i64 8, !dbg !2393
  %44 = load i64, ptr %ptradd65, align 8, !dbg !2393
  %ge = icmp uge i64 %42, %44, !dbg !2393
  br i1 %ge, label %if.then66, label %if.exit77, !dbg !2393

if.then66:                                        ; preds = %noerr_block
  %45 = load ptr, ptr %self, align 8, !dbg !2394
  %ptradd68 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !2394
  %46 = load i64, ptr %ptradd68, align 8, !dbg !2394
  %47 = inttoptr i64 %46 to ptr, !dbg !2394
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2381
  %48 = icmp eq ptr %47, %type, !dbg !2381
  br i1 %48, label %cache_hit, label %cache_miss, !dbg !2381

cache_miss:                                       ; preds = %if.then66
  %ptradd69 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !2381
  %49 = load ptr, ptr %ptradd69, align 8, !dbg !2381
  %50 = call ptr @.dyn_search(ptr %49, ptr @"$sel.write"), !dbg !2381
  store ptr %50, ptr %.inlinecache, align 8, !dbg !2381
  store ptr %47, ptr %.cachedtype, align 8, !dbg !2381
  br label %51, !dbg !2381

cache_hit:                                        ; preds = %if.then66
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2381
  br label %51, !dbg !2381

51:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %50, %cache_miss ], !dbg !2381
  %52 = icmp eq ptr %fn_phi, null, !dbg !2381
  br i1 %52, label %missing_function, label %match, !dbg !2381

missing_function:                                 ; preds = %51
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg72, align 8
  %53 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %53(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 113), !dbg !2394
  unreachable, !dbg !2394

match:                                            ; preds = %51
  %54 = load ptr, ptr %45, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg73, ptr align 8 %2, i32 16, i1 false)
  %55 = call i64 %fn_phi(ptr %retparam, ptr %54, ptr align 8 %indirectarg73), !dbg !2394
  %not_err74 = icmp eq i64 %55, 0, !dbg !2394
  %56 = call i1 @llvm.expect.i1(i1 %not_err74, i1 true), !dbg !2394
  br i1 %56, label %after_check76, label %assign_optional75, !dbg !2394

assign_optional75:                                ; preds = %match
  store i64 %55, ptr %reterr67, align 8, !dbg !2394
  br label %err_retblock, !dbg !2394

after_check76:                                    ; preds = %match
  %57 = load i64, ptr %retparam, align 8, !dbg !2394
  store i64 %57, ptr %0, align 8, !dbg !2394
  ret i64 0, !dbg !2394

err_retblock:                                     ; preds = %assign_optional75
  %58 = load i64, ptr %reterr67, align 8, !dbg !2394
  ret i64 %58, !dbg !2394

if.exit77:                                        ; preds = %noerr_block
  %59 = load %"char[]", ptr %2, align 8, !dbg !2396
  %60 = extractvalue %"char[]" %59, 0, !dbg !2396
  %61 = extractvalue %"char[]" %59, 1, !dbg !2396
  %gt78 = icmp ugt i64 0, %61, !dbg !2396
  %62 = call i1 @llvm.expect.i1(i1 %gt78, i1 false), !dbg !2396
  br i1 %62, label %panic79, label %checkok89, !dbg !2396

checkok89:                                        ; preds = %if.exit77
  %size90 = sub i64 %61, 0, !dbg !2396
  %63 = insertvalue %"char[]" undef, ptr %60, 0, !dbg !2396
  %64 = insertvalue %"char[]" %63, i64 %size90, 1, !dbg !2396
  %65 = load ptr, ptr %self, align 8, !dbg !2396
  %ptradd91 = getelementptr inbounds i8, ptr %65, i64 16, !dbg !2396
  %66 = load %"char[]", ptr %ptradd91, align 8, !dbg !2396
  %67 = extractvalue %"char[]" %66, 0, !dbg !2396
  %68 = extractvalue %"char[]" %66, 1, !dbg !2396
  %gt92 = icmp ugt i64 0, %68, !dbg !2396
  %69 = call i1 @llvm.expect.i1(i1 %gt92, i1 false), !dbg !2396
  br i1 %69, label %panic93, label %checkok103, !dbg !2396

checkok103:                                       ; preds = %checkok89
  %ptradd104 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2396
  %70 = load i64, ptr %ptradd104, align 8, !dbg !2396
  %add105 = add i64 0, %70, !dbg !2396
  %lt106 = icmp ult i64 %68, %add105, !dbg !2396
  %sub107 = sub i64 %add105, 1, !dbg !2396
  %71 = call i1 @llvm.expect.i1(i1 %lt106, i1 false), !dbg !2396
  br i1 %71, label %panic108, label %checkok118, !dbg !2396

checkok118:                                       ; preds = %checkok103
  %size119 = sub i64 %add105, 0, !dbg !2396
  %72 = insertvalue %"char[]" undef, ptr %67, 0, !dbg !2396
  %73 = insertvalue %"char[]" %72, i64 %size119, 1, !dbg !2396
  %74 = extractvalue %"char[]" %73, 0, !dbg !2396
  %75 = extractvalue %"char[]" %64, 0, !dbg !2396
  store %"char[]" %64, ptr %taddr120, align 8
  %ptradd121 = getelementptr inbounds i8, ptr %taddr120, i64 8
  %76 = load i64, ptr %ptradd121, align 8
  store %"char[]" %73, ptr %taddr122, align 8
  %ptradd123 = getelementptr inbounds i8, ptr %taddr122, i64 8
  %77 = load i64, ptr %ptradd123, align 8
  %neq124 = icmp ne i64 %77, %76
  %78 = call i1 @llvm.expect.i1(i1 %neq124, i1 false)
  br i1 %78, label %panic125, label %checkok135

checkok135:                                       ; preds = %checkok118
  %79 = mul i64 %76, 1, !dbg !2396
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %74, ptr align 1 %75, i64 %79, i1 false), !dbg !2396
  %80 = load ptr, ptr %self, align 8, !dbg !2397
  %ptradd136 = getelementptr inbounds i8, ptr %80, i64 32, !dbg !2397
  %ptradd137 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2397
  %81 = load i64, ptr %ptradd137, align 8, !dbg !2397
  store i64 %81, ptr %ptradd136, align 8, !dbg !2397
  %ptradd139 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2398
  %82 = load i64, ptr %ptradd139, align 8, !dbg !2398
  store i64 %82, ptr %0, align 8, !dbg !2398
  ret i64 0, !dbg !2398

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg2, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 99), !dbg !2383
  unreachable, !dbg !2383

panic6:                                           ; preds = %if.then
  store i64 %13, ptr %taddr, align 8
  %84 = insertvalue %any undef, ptr %taddr, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %86 = insertvalue %any undef, ptr %taddr7, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg10, align 8
  store %any %85, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %87, ptr %ptradd11, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 105, ptr align 8 %indirectarg12), !dbg !2388
  unreachable, !dbg !2388

panic17:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr18, align 8
  %89 = insertvalue %any undef, ptr %taddr18, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %91 = insertvalue %any undef, ptr %taddr19, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg22, align 8
  store %any %90, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %92, ptr %ptradd24, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 105, ptr align 8 %indirectarg26), !dbg !2388
  unreachable, !dbg !2388

panic31:                                          ; preds = %checkok27
  store i64 %sub30, ptr %taddr32, align 8
  %94 = insertvalue %any undef, ptr %taddr32, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr33, align 8
  %96 = insertvalue %any undef, ptr %taddr33, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg36, align 8
  store %any %95, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %97, ptr %ptradd38, align 16
  %98 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 105, ptr align 8 %indirectarg40), !dbg !2388
  unreachable, !dbg !2388

panic48:                                          ; preds = %checkok41
  store i64 %31, ptr %taddr49, align 8
  %99 = insertvalue %any undef, ptr %taddr49, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr50, align 8
  %101 = insertvalue %any undef, ptr %taddr50, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg53, align 8
  store %any %100, ptr %varargslots54, align 16
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %102, ptr %ptradd55, align 16
  %103 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %103, i64 2, 1
  store %"any[]" %"$$temp56", ptr %indirectarg57, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, i32 105, ptr align 8 %indirectarg57), !dbg !2388
  unreachable, !dbg !2388

panic79:                                          ; preds = %if.exit77
  store i64 %61, ptr %taddr80, align 8
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr81, align 8
  %106 = insertvalue %any undef, ptr %taddr81, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg82, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg84, align 8
  store %any %105, ptr %varargslots85, align 16
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %107, ptr %ptradd86, align 16
  %108 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp87", ptr %indirectarg88, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg82, ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, i32 116, ptr align 8 %indirectarg88), !dbg !2396
  unreachable, !dbg !2396

panic93:                                          ; preds = %checkok89
  store i64 %68, ptr %taddr94, align 8
  %109 = insertvalue %any undef, ptr %taddr94, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr95, align 8
  %111 = insertvalue %any undef, ptr %taddr95, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg96, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg98, align 8
  store %any %110, ptr %varargslots99, align 16
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %112, ptr %ptradd100, align 16
  %113 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp101", ptr %indirectarg102, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg96, ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, i32 116, ptr align 8 %indirectarg102), !dbg !2396
  unreachable, !dbg !2396

panic108:                                         ; preds = %checkok103
  store i64 %sub107, ptr %taddr109, align 8
  %114 = insertvalue %any undef, ptr %taddr109, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %68, ptr %taddr110, align 8
  %116 = insertvalue %any undef, ptr %taddr110, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg111, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg113, align 8
  store %any %115, ptr %varargslots114, align 16
  %ptradd115 = getelementptr inbounds i8, ptr %varargslots114, i64 16
  store %any %117, ptr %ptradd115, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots114, 0
  %"$$temp116" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp116", ptr %indirectarg117, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg111, ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, i32 116, ptr align 8 %indirectarg117), !dbg !2396
  unreachable, !dbg !2396

panic125:                                         ; preds = %checkok118
  store i64 %77, ptr %taddr126, align 8
  %119 = insertvalue %any undef, ptr %taddr126, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %76, ptr %taddr127, align 8
  %121 = insertvalue %any undef, ptr %taddr127, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg128, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg129, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg130, align 8
  store %any %120, ptr %varargslots131, align 16
  %ptradd132 = getelementptr inbounds i8, ptr %varargslots131, i64 16
  store %any %122, ptr %ptradd132, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots131, 0
  %"$$temp133" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp133", ptr %indirectarg134, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg128, ptr align 8 %indirectarg129, ptr align 8 %indirectarg130, i32 116, ptr align 8 %indirectarg134), !dbg !2396
  unreachable, !dbg !2396
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.WriteBuffer.write_byte(ptr %0, i8 %1) #0 comdat !dbg !2399 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2402
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2402
  br i1 %3, label %panic, label %checkok, !dbg !2402

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2403, !DIExpression(), !2404)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2405, !DIExpression(), !2404)
    #dbg_declare(ptr %n, !2406, !DIExpression(), !2407)
  %4 = load ptr, ptr %self, align 8, !dbg !2407
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2407
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2407
  %5 = load i64, ptr %ptradd3, align 8, !dbg !2407
  %6 = load ptr, ptr %self, align 8, !dbg !2407
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !2407
  %7 = load i64, ptr %ptradd4, align 8, !dbg !2407
  %sub = sub i64 %5, %7, !dbg !2407
  store i64 %sub, ptr %n, align 8, !dbg !2407
  %8 = load i64, ptr %n, align 8, !dbg !2408
  %eq = icmp eq i64 0, %8, !dbg !2408
  br i1 %eq, label %if.then, label %if.exit, !dbg !2408

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2409
  %10 = call i64 @std.io.WriteBuffer.write_pending(ptr %9), !dbg !2409
  %not_err = icmp eq i64 %10, 0, !dbg !2409
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2409
  br i1 %11, label %after_check, label %assign_optional, !dbg !2409

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !2409
  br label %guard_block, !dbg !2409

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !2409

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !2409
  ret i64 %12, !dbg !2409

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2409

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !2411
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2411
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !2411
  %14 = load i64, ptr %ptradd6, align 8, !dbg !2411
  %15 = load ptr, ptr %ptradd5, align 8, !dbg !2411
  %16 = load ptr, ptr %self, align 8, !dbg !2411
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !2411
  %17 = load i64, ptr %ptradd7, align 8, !dbg !2411
  %ge = icmp uge i64 %17, %14, !dbg !2411
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2411
  br i1 %18, label %panic8, label %checkok15, !dbg !2411

checkok15:                                        ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !2411
  %19 = load i8, ptr %c, align 1, !dbg !2411
  store i8 %19, ptr %ptradd16, align 1, !dbg !2411
  %20 = load ptr, ptr %self, align 8, !dbg !2412
  %ptradd17 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !2412
  %21 = load i64, ptr %ptradd17, align 8, !dbg !2412
  %add = add i64 %21, 1, !dbg !2412
  store i64 %add, ptr %ptradd17, align 8, !dbg !2412
  ret i64 0, !dbg !2412

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.214, i64 10 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 121), !dbg !2404
  unreachable, !dbg !2404

panic8:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr9, align 8
  %25 = insertvalue %any undef, ptr %taddr9, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.214, i64 10 }, ptr %indirectarg12, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd13, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 128, ptr align 8 %indirectarg14), !dbg !2411
  unreachable, !dbg !2411
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @std.io.WriteBuffer.write_pending(ptr %0) #0 !dbg !2413 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 16
  %indirectarg22 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2414
  %1 = icmp eq ptr %0, null, !dbg !2414
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2414
  br i1 %2, label %panic, label %checkok, !dbg !2414

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2415, !DIExpression(), !2416)
  %3 = load ptr, ptr %self, align 8, !dbg !2417
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !2417
  %4 = load i64, ptr %ptradd, align 8, !dbg !2417
  %5 = load ptr, ptr %self, align 8, !dbg !2417
  %6 = load ptr, ptr %self, align 8, !dbg !2417
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2417
  %7 = load %"char[]", ptr %ptradd3, align 8, !dbg !2417
  %8 = extractvalue %"char[]" %7, 0, !dbg !2417
  %9 = extractvalue %"char[]" %7, 1, !dbg !2417
  %gt = icmp ugt i64 0, %9, !dbg !2417
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2417
  br i1 %10, label %panic4, label %checkok11, !dbg !2417

checkok11:                                        ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !2417
  %ptradd12 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !2417
  %12 = load i64, ptr %ptradd12, align 8, !dbg !2417
  %add = add i64 0, %12, !dbg !2417
  %lt = icmp ult i64 %9, %add, !dbg !2417
  %sub = sub i64 %add, 1, !dbg !2417
  %13 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2417
  br i1 %13, label %panic13, label %checkok23, !dbg !2417

checkok23:                                        ; preds = %checkok11
  %size = sub i64 %add, 0, !dbg !2417
  %14 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !2417
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !2417
  %ptradd24 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2417
  %16 = load i64, ptr %ptradd24, align 8, !dbg !2417
  %17 = inttoptr i64 %16 to ptr, !dbg !2417
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2414
  %18 = icmp eq ptr %17, %type, !dbg !2414
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !2414

cache_miss:                                       ; preds = %checkok23
  %ptradd25 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2414
  %19 = load ptr, ptr %ptradd25, align 8, !dbg !2414
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.write"), !dbg !2414
  store ptr %20, ptr %.inlinecache, align 8, !dbg !2414
  store ptr %17, ptr %.cachedtype, align 8, !dbg !2414
  br label %21, !dbg !2414

cache_hit:                                        ; preds = %checkok23
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2414
  br label %21, !dbg !2414

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !2414
  %22 = icmp eq ptr %fn_phi, null, !dbg !2414
  br i1 %22, label %missing_function, label %match, !dbg !2414

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.func.215, i64 13 }, ptr %indirectarg28, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, i32 134), !dbg !2417
  unreachable, !dbg !2417

match:                                            ; preds = %21
  %24 = load ptr, ptr %5, align 8
  store %"char[]" %15, ptr %indirectarg29, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24, ptr align 8 %indirectarg29), !dbg !2417
  %not_err = icmp eq i64 %25, 0, !dbg !2417
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2417
  br i1 %26, label %after_check, label %assign_optional, !dbg !2417

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !2417
  br label %guard_block, !dbg !2417

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2417

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !2417
  ret i64 %27, !dbg !2417

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !2417
  %sub30 = sub i64 %4, %28, !dbg !2417
  store i64 %sub30, ptr %ptradd, align 8, !dbg !2417
  %29 = load ptr, ptr %self, align 8, !dbg !2418
  %ptradd31 = getelementptr inbounds i8, ptr %29, i64 32, !dbg !2418
  %30 = load i64, ptr %ptradd31, align 8, !dbg !2418
  %neq = icmp ne i64 0, %30, !dbg !2418
  br i1 %neq, label %if.then, label %if.exit, !dbg !2418

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), !dbg !2418

if.exit:                                          ; preds = %noerr_block
  ret i64 0, !dbg !2418

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.215, i64 13 }, ptr %indirectarg2, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 132), !dbg !2416
  unreachable, !dbg !2416

panic4:                                           ; preds = %checkok
  store i64 %9, ptr %taddr, align 8
  %32 = insertvalue %any undef, ptr %taddr, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %34 = insertvalue %any undef, ptr %taddr5, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.215, i64 13 }, ptr %indirectarg8, align 8
  store %any %33, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %35, ptr %ptradd9, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 134, ptr align 8 %indirectarg10), !dbg !2417
  unreachable, !dbg !2417

panic13:                                          ; preds = %checkok11
  store i64 %sub, ptr %taddr14, align 8
  %37 = insertvalue %any undef, ptr %taddr14, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr15, align 8
  %39 = insertvalue %any undef, ptr %taddr15, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.201, i64 9 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.215, i64 13 }, ptr %indirectarg18, align 8
  store %any %38, ptr %varargslots19, align 16
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %40, ptr %ptradd20, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp21", ptr %indirectarg22, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 134, ptr align 8 %indirectarg22), !dbg !2417
  unreachable, !dbg !2417
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.new_init(ptr %0, ptr %1, i64 %2, i64 %3, ptr align 8 %4) #0 comdat !dbg !2419 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %x = alloca i64, align 8
  %.anon = alloca i32, align 4
  %a = alloca i64, align 8
  %b = alloca i32, align 4
  %error_var = alloca i64, align 8
  %reterr = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !2432
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2432
  br i1 %6, label %panic, label %checkok, !dbg !2432

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2433, !DIExpression(), !2434)
  store i64 %2, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !2435, !DIExpression(), !2434)
  store i64 %3, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !2436, !DIExpression(), !2434)
    #dbg_declare(ptr %4, !2437, !DIExpression(), !2434)
  %7 = load ptr, ptr %self, align 8, !dbg !2438
  %ptradd = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2438
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2438
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2438
  %eq = icmp eq i64 0, %8, !dbg !2438
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2438

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.218, i64 71 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg6, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 17), !dbg !2438
  unreachable, !dbg !2438

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !2440
  %checknull = icmp eq ptr %10, null, !dbg !2440
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2440
  br i1 %11, label %panic7, label %checkok11, !dbg !2440

checkok11:                                        ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %4, i32 16, i1 false), !dbg !2440
  %ptradd12 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2440
  %12 = load i64, ptr %max_read, align 8, !dbg !2440
  store i64 %12, ptr %ptradd12, align 8, !dbg !2440
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !2440
  %13 = load i64, ptr %initial_capacity, align 8
  store i64 %13, ptr %x, align 8
  store i32 16, ptr %.anon, align 4
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i32, ptr %.anon, align 4
  store i32 %15, ptr %b, align 4
  %16 = load i64, ptr %a, align 8, !dbg !2441
  %17 = load i32, ptr %b, align 4, !dbg !2441
  %sext = sext i32 %17 to i64, !dbg !2441
  %lt = icmp slt i64 %sext, %16, !dbg !2441
  %check = icmp slt i64 %16, 0, !dbg !2441
  %siui-lt = or i1 %check, %lt, !dbg !2441
  br i1 %siui-lt, label %cond.lhs, label %cond.rhs, !dbg !2441

cond.lhs:                                         ; preds = %checkok11
  %18 = load i64, ptr %x, align 8, !dbg !2443
  br label %cond.phi, !dbg !2443

cond.rhs:                                         ; preds = %checkok11
  %19 = load i32, ptr %.anon, align 4, !dbg !2443
  %sext13 = sext i32 %19 to i64, !dbg !2443
  br label %cond.phi, !dbg !2443

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %sext13, %cond.rhs ], !dbg !2443
  store i64 %val, ptr %initial_capacity, align 8, !dbg !2443
  %20 = load ptr, ptr %self, align 8, !dbg !2446
  %21 = load i64, ptr %initial_capacity, align 8, !dbg !2446
  %22 = call i64 @std.io.ByteBuffer.grow(ptr %20, i64 %21), !dbg !2446
  %not_err = icmp eq i64 %22, 0, !dbg !2446
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2446
  br i1 %23, label %after_check, label %assign_optional, !dbg !2446

assign_optional:                                  ; preds = %cond.phi
  store i64 %22, ptr %error_var, align 8, !dbg !2446
  br label %guard_block, !dbg !2446

after_check:                                      ; preds = %cond.phi
  br label %noerr_block, !dbg !2446

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !2446
  ret i64 %24, !dbg !2446

noerr_block:                                      ; preds = %after_check
  %25 = load ptr, ptr %self, align 8, !dbg !2447
  store ptr %25, ptr %0, align 8, !dbg !2447
  ret i64 0, !dbg !2447

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 19), !dbg !2434
  unreachable, !dbg !2434

panic7:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg10, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 21), !dbg !2440
  unreachable, !dbg !2440
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.temp_init(ptr %0, ptr %1, i64 %2, i64 %3) #0 comdat !dbg !2448 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %indirectarg3 = alloca %any, align 8
  %4 = icmp eq ptr %1, null, !dbg !2451
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2451
  br i1 %5, label %panic, label %checkok, !dbg !2451

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2452, !DIExpression(), !2453)
  store i64 %2, ptr %max_read, align 8
    #dbg_declare(ptr %max_read, !2454, !DIExpression(), !2453)
  store i64 %3, ptr %initial_capacity, align 8
    #dbg_declare(ptr %initial_capacity, !2455, !DIExpression(), !2453)
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2456
  %i2nb = icmp eq ptr %6, null, !dbg !2456
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2456

if.then:                                          ; preds = %checkok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2460
  br label %if.exit, !dbg !2460

if.exit:                                          ; preds = %if.then, %checkok
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2462
  %8 = insertvalue %any undef, ptr %7, 0, !dbg !2459
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !2459
  %10 = load ptr, ptr %self, align 8
  %11 = load i64, ptr %max_read, align 8
  %12 = load i64, ptr %initial_capacity, align 8
  store %any %9, ptr %indirectarg3, align 8
  %13 = call i64 @std.io.ByteBuffer.new_init(ptr %retparam, ptr %10, i64 %11, i64 %12, ptr align 8 %indirectarg3), !dbg !2459
  %not_err = icmp eq i64 %13, 0, !dbg !2459
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2459
  br i1 %14, label %after_check, label %assign_optional, !dbg !2459

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr, align 8, !dbg !2459
  br label %err_retblock, !dbg !2459

after_check:                                      ; preds = %if.exit
  %15 = load ptr, ptr %retparam, align 8, !dbg !2459
  store ptr %15, ptr %0, align 8, !dbg !2459
  ret i64 0, !dbg !2459

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr, align 8, !dbg !2459
  ret i64 %16, !dbg !2459

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 27), !dbg !2453
  unreachable, !dbg !2453
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.init_with_buffer(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2463 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2466
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2466
  br i1 %4, label %panic, label %checkok, !dbg !2466

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2467, !DIExpression(), !2468)
    #dbg_declare(ptr %2, !2469, !DIExpression(), !2468)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2470
  %5 = load i64, ptr %ptradd, align 8, !dbg !2470
  %lt = icmp ult i64 0, %5, !dbg !2470
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2470

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.221, i64 32 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.220, i64 16 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 33), !dbg !2470
  unreachable, !dbg !2470

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2472
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2472
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !2472
  %8 = load i64, ptr %ptradd7, align 8, !dbg !2472
  %eq = icmp eq i64 0, %8, !dbg !2472
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !2472

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.218, i64 71 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.220, i64 16 }, ptr %indirectarg11, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 34), !dbg !2472
  unreachable, !dbg !2472

assert_ok12:                                      ; preds = %assert_ok
  %10 = load ptr, ptr %self, align 8, !dbg !2473
  %checknull = icmp eq ptr %10, null, !dbg !2473
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2473
  br i1 %11, label %panic13, label %checkok17, !dbg !2473

checkok17:                                        ; preds = %assert_ok12
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  %ptradd18 = getelementptr inbounds i8, ptr %.assign_list, i64 16
  %ptradd19 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2473
  %12 = load i64, ptr %ptradd19, align 8, !dbg !2473
  store i64 %12, ptr %ptradd18, align 8, !dbg !2473
  %ptradd20 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2473
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd20, ptr align 8 %2, i32 16, i1 false), !dbg !2473
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !2473
  %13 = load ptr, ptr %self, align 8, !dbg !2474
  store ptr %13, ptr %0, align 8, !dbg !2474
  ret i64 0, !dbg !2474

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.220, i64 16 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !2468
  unreachable, !dbg !2468

panic13:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.220, i64 16 }, ptr %indirectarg16, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 38), !dbg !2473
  unreachable, !dbg !2473
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.ByteBuffer.free(ptr %0) #0 comdat !dbg !2475 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2478
  %1 = icmp eq ptr %0, null, !dbg !2478
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2478
  br i1 %2, label %panic, label %checkok, !dbg !2478

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2479, !DIExpression(), !2480)
  %3 = load ptr, ptr %self, align 8, !dbg !2481
  %4 = load ptr, ptr %3, align 8, !dbg !2481
  %i2b = icmp ne ptr %4, null, !dbg !2481
  br i1 %i2b, label %if.then, label %if.exit9, !dbg !2481

if.then:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2481
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !2481
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !2481
  %7 = load ptr, ptr %ptradd, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !2482
  %i2nb = icmp eq ptr %8, null, !dbg !2482
  br i1 %i2nb, label %if.then3, label %if.exit, !dbg !2482

if.then3:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !2482

if.exit:                                          ; preds = %if.then
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2484
  %9 = load i64, ptr %ptradd4, align 8, !dbg !2484
  %10 = inttoptr i64 %9 to ptr, !dbg !2484
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2478
  %11 = icmp eq ptr %10, %type, !dbg !2478
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !2478

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !2478
  %12 = load ptr, ptr %ptradd5, align 8, !dbg !2478
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !2478
  store ptr %13, ptr %.inlinecache, align 8, !dbg !2478
  store ptr %10, ptr %.cachedtype, align 8, !dbg !2478
  br label %14, !dbg !2478

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2478
  br label %14, !dbg !2478

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !2478
  %15 = icmp eq ptr %fn_phi, null, !dbg !2478
  br i1 %15, label %missing_function, label %match, !dbg !2478

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg8, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 105), !dbg !2484
  unreachable, !dbg !2484

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator, align 8, !dbg !2484
  %18 = load ptr, ptr %ptr, align 8, !dbg !2484
  call void %fn_phi(ptr %17, ptr %18, i8 zeroext 0), !dbg !2484
  br label %expr_block.exit, !dbg !2484

expr_block.exit:                                  ; preds = %match, %if.then3
  br label %if.exit9, !dbg !2484

if.exit9:                                         ; preds = %expr_block.exit, %checkok
  %19 = load ptr, ptr %self, align 8, !dbg !2485
  %checknull = icmp eq ptr %19, null, !dbg !2485
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2485
  br i1 %20, label %panic10, label %checkok14, !dbg !2485

checkok14:                                        ; preds = %if.exit9
  call void @llvm.memset.p0.i64(ptr align 8 %19, i8 0, i64 64, i1 false), !dbg !2485
  ret void, !dbg !2485

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42), !dbg !2480
  unreachable, !dbg !2480

panic10:                                          ; preds = %if.exit9
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg13, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 45), !dbg !2485
  unreachable, !dbg !2485
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2486 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %cap = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %taddr47 = alloca %"char[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2489
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2489
  br i1 %4, label %panic, label %checkok, !dbg !2489

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2490, !DIExpression(), !2491)
    #dbg_declare(ptr %2, !2492, !DIExpression(), !2491)
    #dbg_declare(ptr %cap, !2493, !DIExpression(), !2494)
  %5 = load ptr, ptr %self, align 8, !dbg !2494
  %ptradd = getelementptr inbounds i8, ptr %5, i64 24, !dbg !2494
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2494
  %6 = load i64, ptr %ptradd3, align 8, !dbg !2494
  %7 = load ptr, ptr %self, align 8, !dbg !2494
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 48, !dbg !2494
  %8 = load i64, ptr %ptradd4, align 8, !dbg !2494
  %sub = sub i64 %6, %8, !dbg !2494
  store i64 %sub, ptr %cap, align 8, !dbg !2494
  %9 = load i64, ptr %cap, align 8, !dbg !2495
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2495
  %10 = load i64, ptr %ptradd5, align 8, !dbg !2495
  %lt = icmp ult i64 %9, %10, !dbg !2495
  br i1 %lt, label %if.then, label %if.exit, !dbg !2495

if.then:                                          ; preds = %checkok
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2495
  %11 = load ptr, ptr %self, align 8, !dbg !2495
  %12 = load i64, ptr %ptradd6, align 8, !dbg !2495
  %13 = call i64 @std.io.ByteBuffer.grow(ptr %11, i64 %12), !dbg !2495
  %not_err = icmp eq i64 %13, 0, !dbg !2495
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2495
  br i1 %14, label %after_check, label %assign_optional, !dbg !2495

assign_optional:                                  ; preds = %if.then
  store i64 %13, ptr %error_var, align 8, !dbg !2495
  br label %guard_block, !dbg !2495

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !2495

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !2495
  ret i64 %15, !dbg !2495

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2495

if.exit:                                          ; preds = %noerr_block, %checkok
  %16 = load %"char[]", ptr %2, align 8, !dbg !2496
  %17 = extractvalue %"char[]" %16, 0, !dbg !2496
  %18 = extractvalue %"char[]" %16, 1, !dbg !2496
  %gt = icmp ugt i64 0, %18, !dbg !2496
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2496
  br i1 %19, label %panic7, label %checkok14, !dbg !2496

checkok14:                                        ; preds = %if.exit
  %size = sub i64 %18, 0, !dbg !2496
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !2496
  %21 = insertvalue %"char[]" %20, i64 %size, 1, !dbg !2496
  %22 = load ptr, ptr %self, align 8, !dbg !2496
  %ptradd15 = getelementptr inbounds i8, ptr %22, i64 24, !dbg !2496
  %23 = load %"char[]", ptr %ptradd15, align 8, !dbg !2496
  %24 = extractvalue %"char[]" %23, 0, !dbg !2496
  %25 = load ptr, ptr %self, align 8, !dbg !2496
  %ptradd16 = getelementptr inbounds i8, ptr %25, i64 48, !dbg !2496
  %26 = load i64, ptr %ptradd16, align 8, !dbg !2496
  %27 = extractvalue %"char[]" %23, 1, !dbg !2496
  %gt17 = icmp ugt i64 %26, %27, !dbg !2496
  %28 = call i1 @llvm.expect.i1(i1 %gt17, i1 false), !dbg !2496
  br i1 %28, label %panic18, label %checkok28, !dbg !2496

checkok28:                                        ; preds = %checkok14
  %ptradd29 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2496
  %29 = load i64, ptr %ptradd29, align 8, !dbg !2496
  %add = add i64 %26, %29, !dbg !2496
  %lt30 = icmp ult i64 %27, %add, !dbg !2496
  %sub31 = sub i64 %add, 1, !dbg !2496
  %30 = call i1 @llvm.expect.i1(i1 %lt30, i1 false), !dbg !2496
  br i1 %30, label %panic32, label %checkok42, !dbg !2496

checkok42:                                        ; preds = %checkok28
  %size43 = sub i64 %add, %26, !dbg !2496
  %ptradd44 = getelementptr inbounds i8, ptr %24, i64 %26, !dbg !2496
  %31 = insertvalue %"char[]" undef, ptr %ptradd44, 0, !dbg !2496
  %32 = insertvalue %"char[]" %31, i64 %size43, 1, !dbg !2496
  %33 = extractvalue %"char[]" %32, 0, !dbg !2496
  %34 = extractvalue %"char[]" %21, 0, !dbg !2496
  store %"char[]" %21, ptr %taddr45, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %taddr45, i64 8
  %35 = load i64, ptr %ptradd46, align 8
  store %"char[]" %32, ptr %taddr47, align 8
  %ptradd48 = getelementptr inbounds i8, ptr %taddr47, i64 8
  %36 = load i64, ptr %ptradd48, align 8
  %neq = icmp ne i64 %36, %35
  %37 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %37, label %panic49, label %checkok59

checkok59:                                        ; preds = %checkok42
  %38 = mul i64 %35, 1, !dbg !2496
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %33, ptr align 1 %34, i64 %38, i1 false), !dbg !2496
  %39 = load ptr, ptr %self, align 8, !dbg !2497
  %ptradd60 = getelementptr inbounds i8, ptr %39, i64 48, !dbg !2497
  %40 = load i64, ptr %ptradd60, align 8, !dbg !2497
  %ptradd61 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2497
  %41 = load i64, ptr %ptradd61, align 8, !dbg !2497
  %add62 = add i64 %40, %41, !dbg !2497
  store i64 %add62, ptr %ptradd60, align 8, !dbg !2497
  %ptradd63 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2498
  %42 = load i64, ptr %ptradd63, align 8, !dbg !2498
  store i64 %42, ptr %0, align 8, !dbg !2498
  ret i64 0, !dbg !2498

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg2, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 48), !dbg !2491
  unreachable, !dbg !2491

panic7:                                           ; preds = %if.exit
  store i64 %18, ptr %taddr, align 8
  %44 = insertvalue %any undef, ptr %taddr, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %46 = insertvalue %any undef, ptr %taddr8, 0
  %47 = insertvalue %any %46, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg11, align 8
  store %any %45, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %47, ptr %ptradd12, align 16
  %48 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 52, ptr align 8 %indirectarg13), !dbg !2496
  unreachable, !dbg !2496

panic18:                                          ; preds = %checkok14
  store i64 %27, ptr %taddr19, align 8
  %49 = insertvalue %any undef, ptr %taddr19, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr20, align 8
  %51 = insertvalue %any undef, ptr %taddr20, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg23, align 8
  store %any %50, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %52, ptr %ptradd25, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 52, ptr align 8 %indirectarg27), !dbg !2496
  unreachable, !dbg !2496

panic32:                                          ; preds = %checkok28
  store i64 %sub31, ptr %taddr33, align 8
  %54 = insertvalue %any undef, ptr %taddr33, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr34, align 8
  %56 = insertvalue %any undef, ptr %taddr34, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg37, align 8
  store %any %55, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %57, ptr %ptradd39, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 52, ptr align 8 %indirectarg41), !dbg !2496
  unreachable, !dbg !2496

panic49:                                          ; preds = %checkok42
  store i64 %36, ptr %taddr50, align 8
  %59 = insertvalue %any undef, ptr %taddr50, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr51, align 8
  %61 = insertvalue %any undef, ptr %taddr51, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg54, align 8
  store %any %60, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %62, ptr %ptradd56, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 52, ptr align 8 %indirectarg58), !dbg !2496
  unreachable, !dbg !2496
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.write_byte(ptr %0, i8 %1) #0 comdat !dbg !2499 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %cap = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2502
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2502
  br i1 %3, label %panic, label %checkok, !dbg !2502

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2503, !DIExpression(), !2504)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2505, !DIExpression(), !2504)
    #dbg_declare(ptr %cap, !2506, !DIExpression(), !2507)
  %4 = load ptr, ptr %self, align 8, !dbg !2507
  %ptradd = getelementptr inbounds i8, ptr %4, i64 24, !dbg !2507
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !2507
  %5 = load i64, ptr %ptradd3, align 8, !dbg !2507
  %6 = load ptr, ptr %self, align 8, !dbg !2507
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !2507
  %7 = load i64, ptr %ptradd4, align 8, !dbg !2507
  %sub = sub i64 %5, %7, !dbg !2507
  store i64 %sub, ptr %cap, align 8, !dbg !2507
  %8 = load i64, ptr %cap, align 8, !dbg !2508
  %eq = icmp eq i64 0, %8, !dbg !2508
  br i1 %eq, label %if.then, label %if.exit, !dbg !2508

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2508
  %10 = call i64 @std.io.ByteBuffer.grow(ptr %9, i64 1), !dbg !2508
  %not_err = icmp eq i64 %10, 0, !dbg !2508
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2508
  br i1 %11, label %after_check, label %assign_optional, !dbg !2508

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !2508
  br label %guard_block, !dbg !2508

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !2508

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !2508
  ret i64 %12, !dbg !2508

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !2508

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !2509
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 24, !dbg !2509
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !2509
  %14 = load i64, ptr %ptradd6, align 8, !dbg !2509
  %15 = load ptr, ptr %ptradd5, align 8, !dbg !2509
  %16 = load ptr, ptr %self, align 8, !dbg !2509
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 48, !dbg !2509
  %17 = load i64, ptr %ptradd7, align 8, !dbg !2509
  %ge = icmp uge i64 %17, %14, !dbg !2509
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2509
  br i1 %18, label %panic8, label %checkok15, !dbg !2509

checkok15:                                        ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !2509
  %19 = load i8, ptr %c, align 1, !dbg !2509
  store i8 %19, ptr %ptradd16, align 1, !dbg !2509
  %20 = load ptr, ptr %self, align 8, !dbg !2510
  %ptradd17 = getelementptr inbounds i8, ptr %20, i64 48, !dbg !2510
  %21 = load i64, ptr %ptradd17, align 8, !dbg !2510
  %add = add i64 %21, 1, !dbg !2510
  store i64 %add, ptr %ptradd17, align 8, !dbg !2510
  ret i64 0, !dbg !2510

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.214, i64 10 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 57), !dbg !2504
  unreachable, !dbg !2504

panic8:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr9, align 8
  %25 = insertvalue %any undef, ptr %taddr9, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.214, i64 10 }, ptr %indirectarg12, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd13, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 61, ptr align 8 %indirectarg14), !dbg !2509
  unreachable, !dbg !2509
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2511 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 16
  %indirectarg54 = alloca %"any[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %taddr59 = alloca %"char[]", align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca i64, align 8
  %indirectarg64 = alloca %"char[]", align 8
  %indirectarg65 = alloca %"char[]", align 8
  %indirectarg66 = alloca %"char[]", align 8
  %varargslots67 = alloca [2 x %any], align 16
  %indirectarg70 = alloca %"any[]", align 8
  %self76 = alloca ptr, align 8
  %readable80 = alloca i64, align 8
  %taddr89 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %indirectarg91 = alloca %"char[]", align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %varargslots94 = alloca [2 x %any], align 16
  %indirectarg97 = alloca %"any[]", align 8
  %taddr100 = alloca i64, align 8
  %indirectarg101 = alloca %"char[]", align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %varargslots104 = alloca [1 x %any], align 16
  %indirectarg106 = alloca %"any[]", align 8
  %taddr113 = alloca i64, align 8
  %taddr114 = alloca i64, align 8
  %indirectarg115 = alloca %"char[]", align 8
  %indirectarg116 = alloca %"char[]", align 8
  %indirectarg117 = alloca %"char[]", align 8
  %varargslots118 = alloca [2 x %any], align 16
  %indirectarg121 = alloca %"any[]", align 8
  %taddr128 = alloca i64, align 8
  %taddr129 = alloca i64, align 8
  %indirectarg130 = alloca %"char[]", align 8
  %indirectarg131 = alloca %"char[]", align 8
  %indirectarg132 = alloca %"char[]", align 8
  %varargslots133 = alloca [2 x %any], align 16
  %indirectarg136 = alloca %"any[]", align 8
  %taddr143 = alloca i64, align 8
  %taddr144 = alloca i64, align 8
  %indirectarg145 = alloca %"char[]", align 8
  %indirectarg146 = alloca %"char[]", align 8
  %indirectarg147 = alloca %"char[]", align 8
  %varargslots148 = alloca [2 x %any], align 16
  %indirectarg151 = alloca %"any[]", align 8
  %taddr154 = alloca %"char[]", align 8
  %taddr156 = alloca %"char[]", align 8
  %taddr160 = alloca i64, align 8
  %taddr161 = alloca i64, align 8
  %indirectarg162 = alloca %"char[]", align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %varargslots165 = alloca [2 x %any], align 16
  %indirectarg168 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2512
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2512
  br i1 %4, label %panic, label %checkok, !dbg !2512

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2513, !DIExpression(), !2514)
    #dbg_declare(ptr %2, !2515, !DIExpression(), !2514)
    #dbg_declare(ptr %readable, !2516, !DIExpression(), !2517)
  %5 = load ptr, ptr %self, align 8, !dbg !2517
  %ptradd = getelementptr inbounds i8, ptr %5, i64 48, !dbg !2517
  %6 = load i64, ptr %ptradd, align 8, !dbg !2517
  %7 = load ptr, ptr %self, align 8, !dbg !2517
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !2517
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2517
  %sub = sub i64 %6, %8, !dbg !2517
  store i64 %sub, ptr %readable, align 8, !dbg !2517
  %9 = load i64, ptr %readable, align 8, !dbg !2518
  %eq = icmp eq i64 0, %9, !dbg !2518
  br i1 %eq, label %if.then, label %if.exit, !dbg !2518

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !2519
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 56, !dbg !2519
  store i8 0, ptr %ptradd4, align 8, !dbg !2519
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2521

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %n, !2522, !DIExpression(), !2523)
  %11 = load i64, ptr %readable, align 8
  store i64 %11, ptr %x, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2523
  %12 = load i64, ptr %ptradd5, align 8
  store i64 %12, ptr %.anon, align 8
  %13 = load i64, ptr %x, align 8
  store i64 %13, ptr %a, align 8
  %14 = load i64, ptr %.anon, align 8
  store i64 %14, ptr %b, align 8
  %15 = load i64, ptr %a, align 8, !dbg !2524
  %16 = load i64, ptr %b, align 8, !dbg !2524
  %lt = icmp ult i64 %15, %16, !dbg !2524
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2524

cond.lhs:                                         ; preds = %if.exit
  %17 = load i64, ptr %x, align 8, !dbg !2526
  br label %cond.phi, !dbg !2526

cond.rhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %.anon, align 8, !dbg !2526
  br label %cond.phi, !dbg !2526

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %17, %cond.lhs ], [ %18, %cond.rhs ], !dbg !2526
  store i64 %val, ptr %n, align 8, !dbg !2526
  %19 = load ptr, ptr %self, align 8, !dbg !2528
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 24, !dbg !2528
  %20 = load %"char[]", ptr %ptradd6, align 8, !dbg !2528
  %21 = extractvalue %"char[]" %20, 0, !dbg !2528
  %22 = load ptr, ptr %self, align 8, !dbg !2528
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 40, !dbg !2528
  %23 = load i64, ptr %ptradd7, align 8, !dbg !2528
  %24 = extractvalue %"char[]" %20, 1, !dbg !2528
  %gt = icmp ugt i64 %23, %24, !dbg !2528
  %25 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2528
  br i1 %25, label %panic8, label %checkok15, !dbg !2528

checkok15:                                        ; preds = %cond.phi
  %26 = load i64, ptr %n, align 8, !dbg !2528
  %add = add i64 %23, %26, !dbg !2528
  %lt16 = icmp ult i64 %24, %add, !dbg !2528
  %sub17 = sub i64 %add, 1, !dbg !2528
  %27 = call i1 @llvm.expect.i1(i1 %lt16, i1 false), !dbg !2528
  br i1 %27, label %panic18, label %checkok28, !dbg !2528

checkok28:                                        ; preds = %checkok15
  %size = sub i64 %add, %23, !dbg !2528
  %ptradd29 = getelementptr inbounds i8, ptr %21, i64 %23, !dbg !2528
  %28 = insertvalue %"char[]" undef, ptr %ptradd29, 0, !dbg !2528
  %29 = insertvalue %"char[]" %28, i64 %size, 1, !dbg !2528
  %30 = load %"char[]", ptr %2, align 8, !dbg !2528
  %31 = extractvalue %"char[]" %30, 0, !dbg !2528
  %32 = extractvalue %"char[]" %30, 1, !dbg !2528
  %gt30 = icmp ugt i64 0, %32, !dbg !2528
  %33 = call i1 @llvm.expect.i1(i1 %gt30, i1 false), !dbg !2528
  br i1 %33, label %panic31, label %checkok41, !dbg !2528

checkok41:                                        ; preds = %checkok28
  %34 = load i64, ptr %n, align 8, !dbg !2528
  %add42 = add i64 0, %34, !dbg !2528
  %lt43 = icmp ult i64 %32, %add42, !dbg !2528
  %sub44 = sub i64 %add42, 1, !dbg !2528
  %35 = call i1 @llvm.expect.i1(i1 %lt43, i1 false), !dbg !2528
  br i1 %35, label %panic45, label %checkok55, !dbg !2528

checkok55:                                        ; preds = %checkok41
  %size56 = sub i64 %add42, 0, !dbg !2528
  %36 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2528
  %37 = insertvalue %"char[]" %36, i64 %size56, 1, !dbg !2528
  %38 = extractvalue %"char[]" %37, 0, !dbg !2528
  %39 = extractvalue %"char[]" %29, 0, !dbg !2528
  store %"char[]" %29, ptr %taddr57, align 8
  %ptradd58 = getelementptr inbounds i8, ptr %taddr57, i64 8
  %40 = load i64, ptr %ptradd58, align 8
  store %"char[]" %37, ptr %taddr59, align 8
  %ptradd60 = getelementptr inbounds i8, ptr %taddr59, i64 8
  %41 = load i64, ptr %ptradd60, align 8
  %neq = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %42, label %panic61, label %checkok71

checkok71:                                        ; preds = %checkok55
  %43 = mul i64 %40, 1, !dbg !2528
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !2528
  %44 = load ptr, ptr %self, align 8, !dbg !2529
  %ptradd72 = getelementptr inbounds i8, ptr %44, i64 40, !dbg !2529
  %45 = load i64, ptr %ptradd72, align 8, !dbg !2529
  %46 = load i64, ptr %n, align 8, !dbg !2529
  %add73 = add i64 %45, %46, !dbg !2529
  store i64 %add73, ptr %ptradd72, align 8, !dbg !2529
  %47 = load ptr, ptr %self, align 8, !dbg !2530
  %ptradd74 = getelementptr inbounds i8, ptr %47, i64 56, !dbg !2530
  %48 = load i64, ptr %n, align 8, !dbg !2530
  %lt75 = icmp ult i64 0, %48, !dbg !2530
  %49 = zext i1 %lt75 to i8, !dbg !2530
  store i8 %49, ptr %ptradd74, align 8, !dbg !2530
  %50 = load ptr, ptr %self, align 8
  store ptr %50, ptr %self76, align 8
  %51 = load ptr, ptr %self76, align 8, !dbg !2531
  %ptradd77 = getelementptr inbounds i8, ptr %51, i64 40, !dbg !2531
  %52 = load i64, ptr %ptradd77, align 8, !dbg !2531
  %53 = load ptr, ptr %self76, align 8, !dbg !2531
  %ptradd78 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !2531
  %54 = load i64, ptr %ptradd78, align 8, !dbg !2531
  %ge = icmp uge i64 %52, %54, !dbg !2531
  br i1 %ge, label %if.then79, label %if.exit173, !dbg !2531

if.then79:                                        ; preds = %checkok71
    #dbg_declare(ptr %readable80, !2534, !DIExpression(), !2536)
  %55 = load ptr, ptr %self76, align 8, !dbg !2536
  %ptradd81 = getelementptr inbounds i8, ptr %55, i64 48, !dbg !2536
  %56 = load i64, ptr %ptradd81, align 8, !dbg !2536
  %57 = load ptr, ptr %self76, align 8, !dbg !2536
  %ptradd82 = getelementptr inbounds i8, ptr %57, i64 40, !dbg !2536
  %58 = load i64, ptr %ptradd82, align 8, !dbg !2536
  %sub83 = sub i64 %56, %58, !dbg !2536
  store i64 %sub83, ptr %readable80, align 8, !dbg !2536
  %59 = load ptr, ptr %self76, align 8, !dbg !2537
  %ptradd84 = getelementptr inbounds i8, ptr %59, i64 24, !dbg !2537
  %60 = load %"char[]", ptr %ptradd84, align 8, !dbg !2537
  %61 = extractvalue %"char[]" %60, 0, !dbg !2537
  %62 = load ptr, ptr %self76, align 8, !dbg !2537
  %ptradd85 = getelementptr inbounds i8, ptr %62, i64 40, !dbg !2537
  %63 = load i64, ptr %ptradd85, align 8, !dbg !2537
  %sub86 = sub i64 %63, 1, !dbg !2537
  %64 = extractvalue %"char[]" %60, 1, !dbg !2537
  %gt87 = icmp sgt i64 %sub86, %64, !dbg !2537
  %65 = call i1 @llvm.expect.i1(i1 %gt87, i1 false), !dbg !2537
  br i1 %65, label %panic88, label %checkok98, !dbg !2537

checkok98:                                        ; preds = %if.then79
  %underflow = icmp slt i64 %sub86, 0, !dbg !2537
  %66 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2537
  br i1 %66, label %panic99, label %checkok107, !dbg !2537

checkok107:                                       ; preds = %checkok98
  %67 = load i64, ptr %readable80, align 8, !dbg !2537
  %add108 = add i64 1, %67, !dbg !2537
  %add109 = add i64 %sub86, %add108, !dbg !2537
  %lt110 = icmp slt i64 %64, %add109, !dbg !2537
  %sub111 = sub i64 %add109, 1, !dbg !2537
  %68 = call i1 @llvm.expect.i1(i1 %lt110, i1 false), !dbg !2537
  br i1 %68, label %panic112, label %checkok122, !dbg !2537

checkok122:                                       ; preds = %checkok107
  %size123 = sub i64 %add109, %sub86, !dbg !2537
  %ptradd124 = getelementptr inbounds i8, ptr %61, i64 %sub86, !dbg !2537
  %69 = insertvalue %"char[]" undef, ptr %ptradd124, 0, !dbg !2537
  %70 = insertvalue %"char[]" %69, i64 %size123, 1, !dbg !2537
  %71 = load ptr, ptr %self76, align 8, !dbg !2537
  %ptradd125 = getelementptr inbounds i8, ptr %71, i64 24, !dbg !2537
  %72 = load %"char[]", ptr %ptradd125, align 8, !dbg !2537
  %73 = extractvalue %"char[]" %72, 0, !dbg !2537
  %74 = extractvalue %"char[]" %72, 1, !dbg !2537
  %gt126 = icmp sgt i64 0, %74, !dbg !2537
  %75 = call i1 @llvm.expect.i1(i1 %gt126, i1 false), !dbg !2537
  br i1 %75, label %panic127, label %checkok137, !dbg !2537

checkok137:                                       ; preds = %checkok122
  %76 = load i64, ptr %readable80, align 8, !dbg !2537
  %add138 = add i64 1, %76, !dbg !2537
  %add139 = add i64 0, %add138, !dbg !2537
  %lt140 = icmp slt i64 %74, %add139, !dbg !2537
  %sub141 = sub i64 %add139, 1, !dbg !2537
  %77 = call i1 @llvm.expect.i1(i1 %lt140, i1 false), !dbg !2537
  br i1 %77, label %panic142, label %checkok152, !dbg !2537

checkok152:                                       ; preds = %checkok137
  %size153 = sub i64 %add139, 0, !dbg !2537
  %78 = insertvalue %"char[]" undef, ptr %73, 0, !dbg !2537
  %79 = insertvalue %"char[]" %78, i64 %size153, 1, !dbg !2537
  %80 = extractvalue %"char[]" %79, 0, !dbg !2537
  %81 = extractvalue %"char[]" %70, 0, !dbg !2537
  store %"char[]" %70, ptr %taddr154, align 8
  %ptradd155 = getelementptr inbounds i8, ptr %taddr154, i64 8
  %82 = load i64, ptr %ptradd155, align 8
  store %"char[]" %79, ptr %taddr156, align 8
  %ptradd157 = getelementptr inbounds i8, ptr %taddr156, i64 8
  %83 = load i64, ptr %ptradd157, align 8
  %neq158 = icmp ne i64 %83, %82
  %84 = call i1 @llvm.expect.i1(i1 %neq158, i1 false)
  br i1 %84, label %panic159, label %checkok169

checkok169:                                       ; preds = %checkok152
  %85 = mul i64 %82, 1, !dbg !2537
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %80, ptr align 1 %81, i64 %85, i1 false), !dbg !2537
  %86 = load ptr, ptr %self76, align 8, !dbg !2538
  %ptradd170 = getelementptr inbounds i8, ptr %86, i64 48, !dbg !2538
  %87 = load i64, ptr %readable80, align 8, !dbg !2538
  %add171 = add i64 1, %87, !dbg !2538
  store i64 %add171, ptr %ptradd170, align 8, !dbg !2538
  %88 = load ptr, ptr %self76, align 8, !dbg !2539
  %ptradd172 = getelementptr inbounds i8, ptr %88, i64 40, !dbg !2539
  store i64 1, ptr %ptradd172, align 8, !dbg !2539
  br label %if.exit173, !dbg !2539

if.exit173:                                       ; preds = %checkok169, %checkok71
  %89 = load i64, ptr %n, align 8, !dbg !2540
  store i64 %89, ptr %0, align 8, !dbg !2540
  ret i64 0, !dbg !2540

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg2, align 8
  %90 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %90(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65), !dbg !2514
  unreachable, !dbg !2514

panic8:                                           ; preds = %cond.phi
  store i64 %24, ptr %taddr, align 8
  %91 = insertvalue %any undef, ptr %taddr, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr9, align 8
  %93 = insertvalue %any undef, ptr %taddr9, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg12, align 8
  store %any %92, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd13, align 16
  %95 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 74, ptr align 8 %indirectarg14), !dbg !2528
  unreachable, !dbg !2528

panic18:                                          ; preds = %checkok15
  store i64 %sub17, ptr %taddr19, align 8
  %96 = insertvalue %any undef, ptr %taddr19, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr20, align 8
  %98 = insertvalue %any undef, ptr %taddr20, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg23, align 8
  store %any %97, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %99, ptr %ptradd25, align 16
  %100 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %100, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 74, ptr align 8 %indirectarg27), !dbg !2528
  unreachable, !dbg !2528

panic31:                                          ; preds = %checkok28
  store i64 %32, ptr %taddr32, align 8
  %101 = insertvalue %any undef, ptr %taddr32, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr33, align 8
  %103 = insertvalue %any undef, ptr %taddr33, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg36, align 8
  store %any %102, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %104, ptr %ptradd38, align 16
  %105 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 74, ptr align 8 %indirectarg40), !dbg !2528
  unreachable, !dbg !2528

panic45:                                          ; preds = %checkok41
  store i64 %sub44, ptr %taddr46, align 8
  %106 = insertvalue %any undef, ptr %taddr46, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr47, align 8
  %108 = insertvalue %any undef, ptr %taddr47, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg50, align 8
  store %any %107, ptr %varargslots51, align 16
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %109, ptr %ptradd52, align 16
  %110 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp53", ptr %indirectarg54, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, i32 74, ptr align 8 %indirectarg54), !dbg !2528
  unreachable, !dbg !2528

panic61:                                          ; preds = %checkok55
  store i64 %41, ptr %taddr62, align 8
  %111 = insertvalue %any undef, ptr %taddr62, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr63, align 8
  %113 = insertvalue %any undef, ptr %taddr63, 0
  %114 = insertvalue %any %113, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg64, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg65, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg66, align 8
  store %any %112, ptr %varargslots67, align 16
  %ptradd68 = getelementptr inbounds i8, ptr %varargslots67, i64 16
  store %any %114, ptr %ptradd68, align 16
  %115 = insertvalue %"any[]" undef, ptr %varargslots67, 0
  %"$$temp69" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp69", ptr %indirectarg70, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg64, ptr align 8 %indirectarg65, ptr align 8 %indirectarg66, i32 74, ptr align 8 %indirectarg70), !dbg !2528
  unreachable, !dbg !2528

panic88:                                          ; preds = %if.then79
  store i64 %64, ptr %taddr89, align 8
  %116 = insertvalue %any undef, ptr %taddr89, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub86, ptr %taddr90, align 8
  %118 = insertvalue %any undef, ptr %taddr90, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg91, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg93, align 8
  store %any %117, ptr %varargslots94, align 16
  %ptradd95 = getelementptr inbounds i8, ptr %varargslots94, i64 16
  store %any %119, ptr %ptradd95, align 16
  %120 = insertvalue %"any[]" undef, ptr %varargslots94, 0
  %"$$temp96" = insertvalue %"any[]" %120, i64 2, 1
  store %"any[]" %"$$temp96", ptr %indirectarg97, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg91, ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, i32 144, ptr align 8 %indirectarg97), !dbg !2537
  unreachable, !dbg !2537

panic99:                                          ; preds = %checkok98
  store i64 %sub86, ptr %taddr100, align 8
  %121 = insertvalue %any undef, ptr %taddr100, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.225, i64 22 }, ptr %indirectarg101, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg103, align 8
  store %any %122, ptr %varargslots104, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots104, 0
  %"$$temp105" = insertvalue %"any[]" %123, i64 1, 1
  store %"any[]" %"$$temp105", ptr %indirectarg106, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg101, ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, i32 144, ptr align 8 %indirectarg106), !dbg !2537
  unreachable, !dbg !2537

panic112:                                         ; preds = %checkok107
  store i64 %sub111, ptr %taddr113, align 8
  %124 = insertvalue %any undef, ptr %taddr113, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %64, ptr %taddr114, align 8
  %126 = insertvalue %any undef, ptr %taddr114, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg115, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg116, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg117, align 8
  store %any %125, ptr %varargslots118, align 16
  %ptradd119 = getelementptr inbounds i8, ptr %varargslots118, i64 16
  store %any %127, ptr %ptradd119, align 16
  %128 = insertvalue %"any[]" undef, ptr %varargslots118, 0
  %"$$temp120" = insertvalue %"any[]" %128, i64 2, 1
  store %"any[]" %"$$temp120", ptr %indirectarg121, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg115, ptr align 8 %indirectarg116, ptr align 8 %indirectarg117, i32 144, ptr align 8 %indirectarg121), !dbg !2537
  unreachable, !dbg !2537

panic127:                                         ; preds = %checkok122
  store i64 %74, ptr %taddr128, align 8
  %129 = insertvalue %any undef, ptr %taddr128, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr129, align 8
  %131 = insertvalue %any undef, ptr %taddr129, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg130, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg131, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg132, align 8
  store %any %130, ptr %varargslots133, align 16
  %ptradd134 = getelementptr inbounds i8, ptr %varargslots133, i64 16
  store %any %132, ptr %ptradd134, align 16
  %133 = insertvalue %"any[]" undef, ptr %varargslots133, 0
  %"$$temp135" = insertvalue %"any[]" %133, i64 2, 1
  store %"any[]" %"$$temp135", ptr %indirectarg136, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg130, ptr align 8 %indirectarg131, ptr align 8 %indirectarg132, i32 144, ptr align 8 %indirectarg136), !dbg !2537
  unreachable, !dbg !2537

panic142:                                         ; preds = %checkok137
  store i64 %sub141, ptr %taddr143, align 8
  %134 = insertvalue %any undef, ptr %taddr143, 0
  %135 = insertvalue %any %134, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %74, ptr %taddr144, align 8
  %136 = insertvalue %any undef, ptr %taddr144, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg145, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg146, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg147, align 8
  store %any %135, ptr %varargslots148, align 16
  %ptradd149 = getelementptr inbounds i8, ptr %varargslots148, i64 16
  store %any %137, ptr %ptradd149, align 16
  %138 = insertvalue %"any[]" undef, ptr %varargslots148, 0
  %"$$temp150" = insertvalue %"any[]" %138, i64 2, 1
  store %"any[]" %"$$temp150", ptr %indirectarg151, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg145, ptr align 8 %indirectarg146, ptr align 8 %indirectarg147, i32 144, ptr align 8 %indirectarg151), !dbg !2537
  unreachable, !dbg !2537

panic159:                                         ; preds = %checkok152
  store i64 %83, ptr %taddr160, align 8
  %139 = insertvalue %any undef, ptr %taddr160, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %82, ptr %taddr161, align 8
  %141 = insertvalue %any undef, ptr %taddr161, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg162, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg164, align 8
  store %any %140, ptr %varargslots165, align 16
  %ptradd166 = getelementptr inbounds i8, ptr %varargslots165, i64 16
  store %any %142, ptr %ptradd166, align 16
  %143 = insertvalue %"any[]" undef, ptr %varargslots165, 0
  %"$$temp167" = insertvalue %"any[]" %143, i64 2, 1
  store %"any[]" %"$$temp167", ptr %indirectarg168, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg162, ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, i32 144, ptr align 8 %indirectarg168), !dbg !2537
  unreachable, !dbg !2537
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2541 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg14 = alloca %"any[]", align 8
  %self19 = alloca ptr, align 8
  %readable24 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %varargslots37 = alloca [2 x %any], align 16
  %indirectarg40 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %varargslots47 = alloca [1 x %any], align 16
  %indirectarg49 = alloca %"any[]", align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca i64, align 8
  %indirectarg57 = alloca %"char[]", align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %varargslots60 = alloca [2 x %any], align 16
  %indirectarg63 = alloca %"any[]", align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %indirectarg73 = alloca %"char[]", align 8
  %varargslots74 = alloca [2 x %any], align 16
  %indirectarg77 = alloca %"any[]", align 8
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca i64, align 8
  %indirectarg86 = alloca %"char[]", align 8
  %indirectarg87 = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %varargslots89 = alloca [2 x %any], align 16
  %indirectarg92 = alloca %"any[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr97 = alloca %"char[]", align 8
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %indirectarg102 = alloca %"char[]", align 8
  %indirectarg103 = alloca %"char[]", align 8
  %indirectarg104 = alloca %"char[]", align 8
  %varargslots105 = alloca [2 x %any], align 16
  %indirectarg108 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2544
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2544
  br i1 %3, label %panic, label %checkok, !dbg !2544

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2545, !DIExpression(), !2546)
    #dbg_declare(ptr %readable, !2547, !DIExpression(), !2548)
  %4 = load ptr, ptr %self, align 8, !dbg !2548
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !2548
  %5 = load i64, ptr %ptradd, align 8, !dbg !2548
  %6 = load ptr, ptr %self, align 8, !dbg !2548
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2548
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2548
  %sub = sub i64 %5, %7, !dbg !2548
  store i64 %sub, ptr %readable, align 8, !dbg !2548
  %8 = load i64, ptr %readable, align 8, !dbg !2549
  %eq = icmp eq i64 0, %8, !dbg !2549
  br i1 %eq, label %if.then, label %if.exit, !dbg !2549

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2550
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 56, !dbg !2550
  store i8 0, ptr %ptradd4, align 8, !dbg !2550
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2552

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %c, !2553, !DIExpression(), !2554)
  %10 = load ptr, ptr %self, align 8, !dbg !2554
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !2554
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !2554
  %11 = load i64, ptr %ptradd6, align 8, !dbg !2554
  %12 = load ptr, ptr %ptradd5, align 8, !dbg !2554
  %13 = load ptr, ptr %self, align 8, !dbg !2554
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !2554
  %14 = load i64, ptr %ptradd7, align 8, !dbg !2554
  %ge = icmp uge i64 %14, %11, !dbg !2554
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2554
  br i1 %15, label %panic8, label %checkok15, !dbg !2554

checkok15:                                        ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !2554
  %16 = load i8, ptr %ptradd16, align 1, !dbg !2554
  store i8 %16, ptr %c, align 1, !dbg !2554
  %17 = load ptr, ptr %self, align 8, !dbg !2555
  %ptradd17 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !2555
  %18 = load i64, ptr %ptradd17, align 8, !dbg !2555
  %add = add i64 %18, 1, !dbg !2555
  store i64 %add, ptr %ptradd17, align 8, !dbg !2555
  %19 = load ptr, ptr %self, align 8, !dbg !2556
  %ptradd18 = getelementptr inbounds i8, ptr %19, i64 56, !dbg !2556
  store i8 1, ptr %ptradd18, align 8, !dbg !2556
  %20 = load ptr, ptr %self, align 8
  store ptr %20, ptr %self19, align 8
  %21 = load ptr, ptr %self19, align 8, !dbg !2557
  %ptradd20 = getelementptr inbounds i8, ptr %21, i64 40, !dbg !2557
  %22 = load i64, ptr %ptradd20, align 8, !dbg !2557
  %23 = load ptr, ptr %self19, align 8, !dbg !2557
  %ptradd21 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !2557
  %24 = load i64, ptr %ptradd21, align 8, !dbg !2557
  %ge22 = icmp uge i64 %22, %24, !dbg !2557
  br i1 %ge22, label %if.then23, label %if.exit113, !dbg !2557

if.then23:                                        ; preds = %checkok15
    #dbg_declare(ptr %readable24, !2560, !DIExpression(), !2562)
  %25 = load ptr, ptr %self19, align 8, !dbg !2562
  %ptradd25 = getelementptr inbounds i8, ptr %25, i64 48, !dbg !2562
  %26 = load i64, ptr %ptradd25, align 8, !dbg !2562
  %27 = load ptr, ptr %self19, align 8, !dbg !2562
  %ptradd26 = getelementptr inbounds i8, ptr %27, i64 40, !dbg !2562
  %28 = load i64, ptr %ptradd26, align 8, !dbg !2562
  %sub27 = sub i64 %26, %28, !dbg !2562
  store i64 %sub27, ptr %readable24, align 8, !dbg !2562
  %29 = load ptr, ptr %self19, align 8, !dbg !2563
  %ptradd28 = getelementptr inbounds i8, ptr %29, i64 24, !dbg !2563
  %30 = load %"char[]", ptr %ptradd28, align 8, !dbg !2563
  %31 = extractvalue %"char[]" %30, 0, !dbg !2563
  %32 = load ptr, ptr %self19, align 8, !dbg !2563
  %ptradd29 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !2563
  %33 = load i64, ptr %ptradd29, align 8, !dbg !2563
  %sub30 = sub i64 %33, 1, !dbg !2563
  %34 = extractvalue %"char[]" %30, 1, !dbg !2563
  %gt = icmp sgt i64 %sub30, %34, !dbg !2563
  %35 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2563
  br i1 %35, label %panic31, label %checkok41, !dbg !2563

checkok41:                                        ; preds = %if.then23
  %underflow = icmp slt i64 %sub30, 0, !dbg !2563
  %36 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2563
  br i1 %36, label %panic42, label %checkok50, !dbg !2563

checkok50:                                        ; preds = %checkok41
  %37 = load i64, ptr %readable24, align 8, !dbg !2563
  %add51 = add i64 1, %37, !dbg !2563
  %add52 = add i64 %sub30, %add51, !dbg !2563
  %lt = icmp slt i64 %34, %add52, !dbg !2563
  %sub53 = sub i64 %add52, 1, !dbg !2563
  %38 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2563
  br i1 %38, label %panic54, label %checkok64, !dbg !2563

checkok64:                                        ; preds = %checkok50
  %size = sub i64 %add52, %sub30, !dbg !2563
  %ptradd65 = getelementptr inbounds i8, ptr %31, i64 %sub30, !dbg !2563
  %39 = insertvalue %"char[]" undef, ptr %ptradd65, 0, !dbg !2563
  %40 = insertvalue %"char[]" %39, i64 %size, 1, !dbg !2563
  %41 = load ptr, ptr %self19, align 8, !dbg !2563
  %ptradd66 = getelementptr inbounds i8, ptr %41, i64 24, !dbg !2563
  %42 = load %"char[]", ptr %ptradd66, align 8, !dbg !2563
  %43 = extractvalue %"char[]" %42, 0, !dbg !2563
  %44 = extractvalue %"char[]" %42, 1, !dbg !2563
  %gt67 = icmp sgt i64 0, %44, !dbg !2563
  %45 = call i1 @llvm.expect.i1(i1 %gt67, i1 false), !dbg !2563
  br i1 %45, label %panic68, label %checkok78, !dbg !2563

checkok78:                                        ; preds = %checkok64
  %46 = load i64, ptr %readable24, align 8, !dbg !2563
  %add79 = add i64 1, %46, !dbg !2563
  %add80 = add i64 0, %add79, !dbg !2563
  %lt81 = icmp slt i64 %44, %add80, !dbg !2563
  %sub82 = sub i64 %add80, 1, !dbg !2563
  %47 = call i1 @llvm.expect.i1(i1 %lt81, i1 false), !dbg !2563
  br i1 %47, label %panic83, label %checkok93, !dbg !2563

checkok93:                                        ; preds = %checkok78
  %size94 = sub i64 %add80, 0, !dbg !2563
  %48 = insertvalue %"char[]" undef, ptr %43, 0, !dbg !2563
  %49 = insertvalue %"char[]" %48, i64 %size94, 1, !dbg !2563
  %50 = extractvalue %"char[]" %49, 0, !dbg !2563
  %51 = extractvalue %"char[]" %40, 0, !dbg !2563
  store %"char[]" %40, ptr %taddr95, align 8
  %ptradd96 = getelementptr inbounds i8, ptr %taddr95, i64 8
  %52 = load i64, ptr %ptradd96, align 8
  store %"char[]" %49, ptr %taddr97, align 8
  %ptradd98 = getelementptr inbounds i8, ptr %taddr97, i64 8
  %53 = load i64, ptr %ptradd98, align 8
  %neq = icmp ne i64 %53, %52
  %54 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %54, label %panic99, label %checkok109

checkok109:                                       ; preds = %checkok93
  %55 = mul i64 %52, 1, !dbg !2563
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %50, ptr align 1 %51, i64 %55, i1 false), !dbg !2563
  %56 = load ptr, ptr %self19, align 8, !dbg !2564
  %ptradd110 = getelementptr inbounds i8, ptr %56, i64 48, !dbg !2564
  %57 = load i64, ptr %readable24, align 8, !dbg !2564
  %add111 = add i64 1, %57, !dbg !2564
  store i64 %add111, ptr %ptradd110, align 8, !dbg !2564
  %58 = load ptr, ptr %self19, align 8, !dbg !2565
  %ptradd112 = getelementptr inbounds i8, ptr %58, i64 40, !dbg !2565
  store i64 1, ptr %ptradd112, align 8, !dbg !2565
  br label %if.exit113, !dbg !2565

if.exit113:                                       ; preds = %checkok109, %checkok15
  %59 = load i8, ptr %c, align 1, !dbg !2566
  store i8 %59, ptr %0, align 1, !dbg !2566
  ret i64 0, !dbg !2566

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81), !dbg !2546
  unreachable, !dbg !2546

panic8:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %61 = insertvalue %any undef, ptr %taddr, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr9, align 8
  %63 = insertvalue %any undef, ptr %taddr9, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg12, align 8
  store %any %62, ptr %varargslots, align 16
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd13, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg14, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 89, ptr align 8 %indirectarg14), !dbg !2554
  unreachable, !dbg !2554

panic31:                                          ; preds = %if.then23
  store i64 %34, ptr %taddr32, align 8
  %66 = insertvalue %any undef, ptr %taddr32, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub30, ptr %taddr33, align 8
  %68 = insertvalue %any undef, ptr %taddr33, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg36, align 8
  store %any %67, ptr %varargslots37, align 16
  %ptradd38 = getelementptr inbounds i8, ptr %varargslots37, i64 16
  store %any %69, ptr %ptradd38, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots37, 0
  %"$$temp39" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp39", ptr %indirectarg40, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 144, ptr align 8 %indirectarg40), !dbg !2563
  unreachable, !dbg !2563

panic42:                                          ; preds = %checkok41
  store i64 %sub30, ptr %taddr43, align 8
  %71 = insertvalue %any undef, ptr %taddr43, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.225, i64 22 }, ptr %indirectarg44, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg46, align 8
  store %any %72, ptr %varargslots47, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp48" = insertvalue %"any[]" %73, i64 1, 1
  store %"any[]" %"$$temp48", ptr %indirectarg49, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg44, ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, i32 144, ptr align 8 %indirectarg49), !dbg !2563
  unreachable, !dbg !2563

panic54:                                          ; preds = %checkok50
  store i64 %sub53, ptr %taddr55, align 8
  %74 = insertvalue %any undef, ptr %taddr55, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr56, align 8
  %76 = insertvalue %any undef, ptr %taddr56, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg57, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg59, align 8
  store %any %75, ptr %varargslots60, align 16
  %ptradd61 = getelementptr inbounds i8, ptr %varargslots60, i64 16
  store %any %77, ptr %ptradd61, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots60, 0
  %"$$temp62" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp62", ptr %indirectarg63, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg57, ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, i32 144, ptr align 8 %indirectarg63), !dbg !2563
  unreachable, !dbg !2563

panic68:                                          ; preds = %checkok64
  store i64 %44, ptr %taddr69, align 8
  %79 = insertvalue %any undef, ptr %taddr69, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr70, align 8
  %81 = insertvalue %any undef, ptr %taddr70, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg72, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg73, align 8
  store %any %80, ptr %varargslots74, align 16
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %82, ptr %ptradd75, align 16
  %83 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %83, i64 2, 1
  store %"any[]" %"$$temp76", ptr %indirectarg77, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, ptr align 8 %indirectarg73, i32 144, ptr align 8 %indirectarg77), !dbg !2563
  unreachable, !dbg !2563

panic83:                                          ; preds = %checkok78
  store i64 %sub82, ptr %taddr84, align 8
  %84 = insertvalue %any undef, ptr %taddr84, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %44, ptr %taddr85, align 8
  %86 = insertvalue %any undef, ptr %taddr85, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg86, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg87, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg88, align 8
  store %any %85, ptr %varargslots89, align 16
  %ptradd90 = getelementptr inbounds i8, ptr %varargslots89, i64 16
  store %any %87, ptr %ptradd90, align 16
  %88 = insertvalue %"any[]" undef, ptr %varargslots89, 0
  %"$$temp91" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp91", ptr %indirectarg92, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg86, ptr align 8 %indirectarg87, ptr align 8 %indirectarg88, i32 144, ptr align 8 %indirectarg92), !dbg !2563
  unreachable, !dbg !2563

panic99:                                          ; preds = %checkok93
  store i64 %53, ptr %taddr100, align 8
  %89 = insertvalue %any undef, ptr %taddr100, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr101, align 8
  %91 = insertvalue %any undef, ptr %taddr101, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg102, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg103, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg104, align 8
  store %any %90, ptr %varargslots105, align 16
  %ptradd106 = getelementptr inbounds i8, ptr %varargslots105, i64 16
  store %any %92, ptr %ptradd106, align 16
  %93 = insertvalue %"any[]" undef, ptr %varargslots105, 0
  %"$$temp107" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp107", ptr %indirectarg108, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg102, ptr align 8 %indirectarg103, ptr align 8 %indirectarg104, i32 144, ptr align 8 %indirectarg108), !dbg !2563
  unreachable, !dbg !2563
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.pushback_byte(ptr %0) #0 comdat !dbg !2567 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2570
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2570
  br i1 %2, label %panic, label %checkok, !dbg !2570

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2571, !DIExpression(), !2572)
  %3 = load ptr, ptr %self, align 8, !dbg !2573
  %ptradd = getelementptr inbounds i8, ptr %3, i64 56, !dbg !2573
  %4 = load i8, ptr %ptradd, align 8, !dbg !2573
  %5 = trunc i8 %4 to i1, !dbg !2573
  %not = xor i1 %5, true, !dbg !2573
  br i1 %not, label %if.then, label %if.exit, !dbg !2573

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2573

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !2574
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2574
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2574
  %lt = icmp ult i64 0, %7, !dbg !2574
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2574

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.227, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.226, i64 13 }, ptr %indirectarg6, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 102), !dbg !2574
  unreachable, !dbg !2574

assert_ok:                                        ; preds = %if.exit
  %9 = load ptr, ptr %self, align 8, !dbg !2575
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !2575
  %10 = load i64, ptr %ptradd7, align 8, !dbg !2575
  %sub = sub i64 %10, 1, !dbg !2575
  store i64 %sub, ptr %ptradd7, align 8, !dbg !2575
  %11 = load ptr, ptr %self, align 8, !dbg !2576
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 56, !dbg !2576
  store i8 0, ptr %ptradd8, align 8, !dbg !2576
  ret i64 0, !dbg !2576

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.226, i64 13 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 99), !dbg !2572
  unreachable, !dbg !2572
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2577 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %reterr40 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2580
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2580
  br i1 %5, label %panic, label %checkok, !dbg !2580

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2581, !DIExpression(), !2582)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !2583, !DIExpression(), !2582)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !2584, !DIExpression(), !2582)
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case4
    i32 2, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !2585
  %lt = icmp slt i64 %8, 0, !dbg !2585
  br i1 %lt, label %or.phi, label %or.rhs, !dbg !2585

or.rhs:                                           ; preds = %switch.case
  %9 = load i64, ptr %offset, align 8, !dbg !2585
  %10 = load ptr, ptr %self, align 8, !dbg !2585
  %ptradd = getelementptr inbounds i8, ptr %10, i64 48, !dbg !2585
  %11 = load i64, ptr %ptradd, align 8, !dbg !2585
  %gt = icmp sgt i64 %9, %11, !dbg !2585
  %check = icmp sge i64 %11, 0, !dbg !2585
  %siui-gt = and i1 %check, %gt, !dbg !2585
  br label %or.phi, !dbg !2585

or.phi:                                           ; preds = %or.rhs, %switch.case
  %val = phi i1 [ true, %switch.case ], [ %siui-gt, %or.rhs ], !dbg !2585
  br i1 %val, label %if.then, label %if.exit, !dbg !2585

if.then:                                          ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !2585

if.exit:                                          ; preds = %or.phi
  %12 = load ptr, ptr %self, align 8, !dbg !2588
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !2588
  %13 = load i64, ptr %offset, align 8, !dbg !2588
  store i64 %13, ptr %ptradd3, align 8, !dbg !2588
  %14 = load i64, ptr %offset, align 8, !dbg !2589
  store i64 %14, ptr %0, align 8, !dbg !2589
  ret i64 0, !dbg !2589

switch.case4:                                     ; preds = %switch.entry
  %15 = load i64, ptr %offset, align 8, !dbg !2590
  %lt5 = icmp slt i64 %15, 0, !dbg !2590
  br i1 %lt5, label %and.rhs, label %and.phi, !dbg !2590

and.rhs:                                          ; preds = %switch.case4
  %16 = load ptr, ptr %self, align 8, !dbg !2590
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 40, !dbg !2590
  %17 = load i64, ptr %ptradd6, align 8, !dbg !2590
  %18 = load i64, ptr %offset, align 8, !dbg !2590
  %neg = sub i64 0, %18, !dbg !2590
  %gt7 = icmp sgt i64 %neg, %17, !dbg !2590
  %check8 = icmp sge i64 %17, 0, !dbg !2590
  %siui-gt9 = and i1 %check8, %gt7, !dbg !2590
  br label %and.phi, !dbg !2590

and.phi:                                          ; preds = %and.rhs, %switch.case4
  %val10 = phi i1 [ false, %switch.case4 ], [ %siui-gt9, %and.rhs ], !dbg !2590
  br i1 %val10, label %or.phi21, label %or.rhs11, !dbg !2590

or.rhs11:                                         ; preds = %and.phi
  %19 = load i64, ptr %offset, align 8, !dbg !2592
  %gt12 = icmp sgt i64 %19, 0, !dbg !2592
  br i1 %gt12, label %and.rhs13, label %and.phi19, !dbg !2592

and.rhs13:                                        ; preds = %or.rhs11
  %20 = load ptr, ptr %self, align 8, !dbg !2592
  %ptradd14 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !2592
  %21 = load i64, ptr %ptradd14, align 8, !dbg !2592
  %22 = load i64, ptr %offset, align 8, !dbg !2592
  %add = add i64 %21, %22, !dbg !2592
  %23 = load ptr, ptr %self, align 8, !dbg !2592
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !2592
  %24 = load i64, ptr %ptradd15, align 8, !dbg !2592
  %gt16 = icmp sgt i64 %add, %24, !dbg !2592
  %check17 = icmp sge i64 %24, 0, !dbg !2592
  %siui-gt18 = and i1 %check17, %gt16, !dbg !2592
  br label %and.phi19, !dbg !2592

and.phi19:                                        ; preds = %and.rhs13, %or.rhs11
  %val20 = phi i1 [ false, %or.rhs11 ], [ %siui-gt18, %and.rhs13 ], !dbg !2592
  br label %or.phi21, !dbg !2592

or.phi21:                                         ; preds = %and.phi19, %and.phi
  %val22 = phi i1 [ true, %and.phi ], [ %val20, %and.phi19 ], !dbg !2592
  br i1 %val22, label %if.then23, label %if.exit24, !dbg !2592

if.then23:                                        ; preds = %or.phi21
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !2592

if.exit24:                                        ; preds = %or.phi21
  %25 = load ptr, ptr %self, align 8, !dbg !2593
  %ptradd25 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !2593
  %26 = load i64, ptr %ptradd25, align 8, !dbg !2593
  %27 = load i64, ptr %offset, align 8, !dbg !2593
  %add26 = add i64 %26, %27, !dbg !2593
  store i64 %add26, ptr %ptradd25, align 8, !dbg !2593
  br label %switch.exit, !dbg !2593

switch.case27:                                    ; preds = %switch.entry
  %28 = load i64, ptr %offset, align 8, !dbg !2594
  %lt28 = icmp slt i64 %28, 0, !dbg !2594
  br i1 %lt28, label %or.phi34, label %or.rhs29, !dbg !2594

or.rhs29:                                         ; preds = %switch.case27
  %29 = load i64, ptr %offset, align 8, !dbg !2594
  %30 = load ptr, ptr %self, align 8, !dbg !2594
  %ptradd30 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !2594
  %31 = load i64, ptr %ptradd30, align 8, !dbg !2594
  %gt31 = icmp sgt i64 %29, %31, !dbg !2594
  %check32 = icmp sge i64 %31, 0, !dbg !2594
  %siui-gt33 = and i1 %check32, %gt31, !dbg !2594
  br label %or.phi34, !dbg !2594

or.phi34:                                         ; preds = %or.rhs29, %switch.case27
  %val35 = phi i1 [ true, %switch.case27 ], [ %siui-gt33, %or.rhs29 ], !dbg !2594
  br i1 %val35, label %if.then36, label %if.exit37, !dbg !2594

if.then36:                                        ; preds = %or.phi34
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !2594

if.exit37:                                        ; preds = %or.phi34
  %32 = load ptr, ptr %self, align 8, !dbg !2596
  %ptradd38 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !2596
  %33 = load ptr, ptr %self, align 8, !dbg !2596
  %ptradd39 = getelementptr inbounds i8, ptr %33, i64 48, !dbg !2596
  %34 = load i64, ptr %ptradd39, align 8, !dbg !2596
  %35 = load i64, ptr %offset, align 8, !dbg !2596
  %sub = sub i64 %34, %35, !dbg !2596
  store i64 %sub, ptr %ptradd38, align 8, !dbg !2596
  br label %switch.exit, !dbg !2596

switch.exit:                                      ; preds = %if.exit37, %if.exit24, %switch.entry
  %36 = load ptr, ptr %self, align 8, !dbg !2597
  %ptradd41 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !2597
  %37 = load i64, ptr %ptradd41, align 8, !dbg !2597
  store i64 %37, ptr %0, align 8, !dbg !2597
  ret i64 0, !dbg !2597

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.228, i64 4 }, ptr %indirectarg2, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 107), !dbg !2582
  unreachable, !dbg !2582
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.available(ptr %0, ptr %1) #0 comdat !dbg !2598 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2601
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2601
  br i1 %3, label %panic, label %checkok, !dbg !2601

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2602, !DIExpression(), !2603)
  %4 = load ptr, ptr %self, align 8, !dbg !2604
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !2604
  %5 = load i64, ptr %ptradd, align 8, !dbg !2604
  %6 = load ptr, ptr %self, align 8, !dbg !2604
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !2604
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2604
  %sub = sub i64 %5, %7, !dbg !2604
  store i64 %sub, ptr %0, align 8, !dbg !2604
  ret i64 0, !dbg !2604

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.229, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 126), !dbg !2603
  unreachable, !dbg !2603
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteBuffer.grow(ptr %0, i64 %1) #0 comdat !dbg !2605 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %p = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %ptr4 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %allocator15 = alloca %any, align 8
  %size = alloca i64, align 8
  %alignment16 = alloca i64, align 8
  %blockret17 = alloca ptr, align 8
  %.inlinecache22 = alloca ptr, align 8
  %.cachedtype23 = alloca ptr, align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %.inlinecache38 = alloca ptr, align 8
  %.cachedtype39 = alloca ptr, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %retparam51 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype39, align 8, !dbg !2608
  store ptr null, ptr %.cachedtype23, align 8, !dbg !2608
  store ptr null, ptr %.cachedtype, align 8, !dbg !2608
  %2 = icmp eq ptr %0, null, !dbg !2608
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2608
  br i1 %3, label %panic, label %checkok, !dbg !2608

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2609, !DIExpression(), !2610)
  store i64 %1, ptr %n, align 8
    #dbg_declare(ptr %n, !2611, !DIExpression(), !2610)
  %4 = load i64, ptr %n, align 8
  store i64 %4, ptr %x, align 8
    #dbg_declare(ptr %y, !2612, !DIExpression(), !2614)
  store i64 1, ptr %y, align 8, !dbg !2614
  br label %loop.cond, !dbg !2616

loop.cond:                                        ; preds = %loop.body, %checkok
  %5 = load i64, ptr %y, align 8, !dbg !2617
  %6 = load i64, ptr %x, align 8, !dbg !2617
  %lt = icmp ult i64 %5, %6, !dbg !2617
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2617

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %y, align 8, !dbg !2617
  %8 = load i64, ptr %y, align 8, !dbg !2617
  %add = add i64 %7, %8, !dbg !2617
  store i64 %add, ptr %y, align 8, !dbg !2617
  br label %loop.cond, !dbg !2617

loop.exit:                                        ; preds = %loop.cond
  %9 = load i64, ptr %y, align 8, !dbg !2619
  store i64 %9, ptr %n, align 8, !dbg !2619
    #dbg_declare(ptr %p, !2620, !DIExpression(), !2621)
  %10 = load ptr, ptr %self, align 8, !dbg !2621
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !2621
  %ptradd = getelementptr inbounds i8, ptr %11, i64 24, !dbg !2621
  %12 = load ptr, ptr %ptradd, align 8
  store ptr %12, ptr %ptr, align 8
  %13 = load i64, ptr %n, align 8
  store i64 %13, ptr %new_size, align 8
  store i64 1, ptr %alignment, align 8
  %14 = load i64, ptr %new_size, align 8, !dbg !2622
  %i2nb = icmp eq i64 %14, 0, !dbg !2622
  br i1 %i2nb, label %if.then, label %if.exit12, !dbg !2622

if.then:                                          ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %15 = load ptr, ptr %ptr, align 8
  store ptr %15, ptr %ptr4, align 8
  %16 = load ptr, ptr %ptr4, align 8, !dbg !2624
  %i2nb5 = icmp eq ptr %16, null, !dbg !2624
  br i1 %i2nb5, label %if.then6, label %if.exit, !dbg !2624

if.then6:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !2624

if.exit:                                          ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !2628
  %17 = load i64, ptr %ptradd7, align 8, !dbg !2628
  %18 = inttoptr i64 %17 to ptr, !dbg !2628
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2608
  %19 = icmp eq ptr %18, %type, !dbg !2608
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !2608

cache_miss:                                       ; preds = %if.exit
  %ptradd8 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !2608
  %20 = load ptr, ptr %ptradd8, align 8, !dbg !2608
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.release"), !dbg !2608
  store ptr %21, ptr %.inlinecache, align 8, !dbg !2608
  store ptr %18, ptr %.cachedtype, align 8, !dbg !2608
  br label %22, !dbg !2608

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2608
  br label %22, !dbg !2608

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !2608
  %23 = icmp eq ptr %fn_phi, null, !dbg !2608
  br i1 %23, label %missing_function, label %match, !dbg !2608

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.230, i64 4 }, ptr %indirectarg11, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 146), !dbg !2628
  unreachable, !dbg !2628

match:                                            ; preds = %22
  %25 = load ptr, ptr %allocator3, align 8, !dbg !2628
  %26 = load ptr, ptr %ptr4, align 8, !dbg !2628
  call void %fn_phi(ptr %25, ptr %26, i8 zeroext 1), !dbg !2628
  br label %expr_block.exit, !dbg !2628

expr_block.exit:                                  ; preds = %match, %if.then6
  store ptr null, ptr %blockret, align 8, !dbg !2629
  br label %expr_block.exit55, !dbg !2629

if.exit12:                                        ; preds = %loop.exit
  %27 = load ptr, ptr %ptr, align 8, !dbg !2630
  %i2nb13 = icmp eq ptr %27, null, !dbg !2630
  br i1 %i2nb13, label %if.then14, label %if.exit36, !dbg !2630

if.then14:                                        ; preds = %if.exit12
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator15, ptr align 8 %allocator, i32 16, i1 false)
  %28 = load i64, ptr %new_size, align 8
  store i64 %28, ptr %size, align 8
  %29 = load i64, ptr %alignment, align 8
  store i64 %29, ptr %alignment16, align 8
  %30 = load i64, ptr %size, align 8, !dbg !2631
  %i2nb18 = icmp eq i64 %30, 0, !dbg !2631
  br i1 %i2nb18, label %if.then19, label %if.exit20, !dbg !2631

if.then19:                                        ; preds = %if.then14
  store ptr null, ptr %blockret17, align 8, !dbg !2631
  br label %expr_block.exit35, !dbg !2631

if.exit20:                                        ; preds = %if.then14
  %ptradd21 = getelementptr inbounds i8, ptr %allocator15, i64 8, !dbg !2635
  %31 = load i64, ptr %ptradd21, align 8, !dbg !2635
  %32 = inttoptr i64 %31 to ptr, !dbg !2635
  %type24 = load ptr, ptr %.cachedtype23, align 8, !dbg !2608
  %33 = icmp eq ptr %32, %type24, !dbg !2608
  br i1 %33, label %cache_hit27, label %cache_miss25, !dbg !2608

cache_miss25:                                     ; preds = %if.exit20
  %ptradd26 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !2608
  %34 = load ptr, ptr %ptradd26, align 8, !dbg !2608
  %35 = call ptr @.dyn_search(ptr %34, ptr @"$sel.acquire"), !dbg !2608
  store ptr %35, ptr %.inlinecache22, align 8, !dbg !2608
  store ptr %32, ptr %.cachedtype23, align 8, !dbg !2608
  br label %36, !dbg !2608

cache_hit27:                                      ; preds = %if.exit20
  %cache_hit_fn28 = load ptr, ptr %.inlinecache22, align 8, !dbg !2608
  br label %36, !dbg !2608

36:                                               ; preds = %cache_hit27, %cache_miss25
  %fn_phi29 = phi ptr [ %cache_hit_fn28, %cache_hit27 ], [ %35, %cache_miss25 ], !dbg !2608
  %37 = icmp eq ptr %fn_phi29, null, !dbg !2608
  br i1 %37, label %missing_function30, label %match34, !dbg !2608

missing_function30:                               ; preds = %36
  store %"char[]" { ptr @.panic_msg.231, i64 44 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg32, align 8
  store %"char[]" { ptr @.func.230, i64 4 }, ptr %indirectarg33, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, ptr align 8 %indirectarg33, i32 116), !dbg !2635
  unreachable, !dbg !2635

match34:                                          ; preds = %36
  %39 = load ptr, ptr %allocator15, align 8
  %40 = load i64, ptr %size, align 8
  %41 = load i64, ptr %alignment16, align 8
  %42 = call i64 %fn_phi29(ptr %retparam, ptr %39, i64 %40, i32 0, i64 %41), !dbg !2635
  %not_err = icmp eq i64 %42, 0, !dbg !2635
  %43 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2635
  br i1 %43, label %after_check, label %assign_optional, !dbg !2635

assign_optional:                                  ; preds = %match34
  store i64 %42, ptr %error_var, align 8, !dbg !2635
  br label %guard_block, !dbg !2635

after_check:                                      ; preds = %match34
  %44 = load ptr, ptr %retparam, align 8, !dbg !2635
  store ptr %44, ptr %blockret17, align 8, !dbg !2635
  br label %expr_block.exit35, !dbg !2635

expr_block.exit35:                                ; preds = %after_check, %if.then19
  %45 = load ptr, ptr %blockret17, align 8, !dbg !2635
  store ptr %45, ptr %blockret, align 8, !dbg !2635
  br label %expr_block.exit55, !dbg !2635

if.exit36:                                        ; preds = %if.exit12
  %ptradd37 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2636
  %46 = load i64, ptr %ptradd37, align 8, !dbg !2636
  %47 = inttoptr i64 %46 to ptr, !dbg !2636
  %type40 = load ptr, ptr %.cachedtype39, align 8, !dbg !2608
  %48 = icmp eq ptr %47, %type40, !dbg !2608
  br i1 %48, label %cache_hit43, label %cache_miss41, !dbg !2608

cache_miss41:                                     ; preds = %if.exit36
  %ptradd42 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !2608
  %49 = load ptr, ptr %ptradd42, align 8, !dbg !2608
  %50 = call ptr @.dyn_search(ptr %49, ptr @"$sel.resize"), !dbg !2608
  store ptr %50, ptr %.inlinecache38, align 8, !dbg !2608
  store ptr %47, ptr %.cachedtype39, align 8, !dbg !2608
  br label %51, !dbg !2608

cache_hit43:                                      ; preds = %if.exit36
  %cache_hit_fn44 = load ptr, ptr %.inlinecache38, align 8, !dbg !2608
  br label %51, !dbg !2608

51:                                               ; preds = %cache_hit43, %cache_miss41
  %fn_phi45 = phi ptr [ %cache_hit_fn44, %cache_hit43 ], [ %50, %cache_miss41 ], !dbg !2608
  %52 = icmp eq ptr %fn_phi45, null, !dbg !2608
  br i1 %52, label %missing_function46, label %match50, !dbg !2608

missing_function46:                               ; preds = %51
  store %"char[]" { ptr @.panic_msg.232, i64 43 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.230, i64 4 }, ptr %indirectarg49, align 8
  %53 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %53(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 137), !dbg !2636
  unreachable, !dbg !2636

match50:                                          ; preds = %51
  %54 = load ptr, ptr %allocator, align 8
  %55 = load ptr, ptr %ptr, align 8
  %56 = load i64, ptr %new_size, align 8
  %57 = load i64, ptr %alignment, align 8
  %58 = call i64 %fn_phi45(ptr %retparam51, ptr %54, ptr %55, i64 %56, i64 %57), !dbg !2636
  %not_err52 = icmp eq i64 %58, 0, !dbg !2636
  %59 = call i1 @llvm.expect.i1(i1 %not_err52, i1 true), !dbg !2636
  br i1 %59, label %after_check54, label %assign_optional53, !dbg !2636

assign_optional53:                                ; preds = %match50
  store i64 %58, ptr %error_var, align 8, !dbg !2636
  br label %guard_block, !dbg !2636

after_check54:                                    ; preds = %match50
  %60 = load ptr, ptr %retparam51, align 8, !dbg !2636
  store ptr %60, ptr %blockret, align 8, !dbg !2636
  br label %expr_block.exit55, !dbg !2636

expr_block.exit55:                                ; preds = %after_check54, %expr_block.exit35, %expr_block.exit
  br label %noerr_block, !dbg !2636

guard_block:                                      ; preds = %assign_optional53, %assign_optional
  %61 = load i64, ptr %error_var, align 8, !dbg !2636
  ret i64 %61, !dbg !2636

noerr_block:                                      ; preds = %expr_block.exit55
  %62 = load ptr, ptr %blockret, align 8, !dbg !2636
  store ptr %62, ptr %p, align 8, !dbg !2636
  %63 = load ptr, ptr %self, align 8, !dbg !2637
  %ptradd56 = getelementptr inbounds i8, ptr %63, i64 24, !dbg !2637
  %64 = load ptr, ptr %p, align 8, !dbg !2637
  %65 = load i64, ptr %n, align 8, !dbg !2637
  %add57 = add i64 0, %65, !dbg !2637
  %size58 = sub i64 %add57, 0, !dbg !2637
  %66 = insertvalue %"char[]" undef, ptr %64, 0, !dbg !2637
  %67 = insertvalue %"char[]" %66, i64 %size58, 1, !dbg !2637
  store %"char[]" %67, ptr %ptradd56, align 8, !dbg !2637
  ret i64 0, !dbg !2637

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.216, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.230, i64 4 }, ptr %indirectarg2, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 131), !dbg !2610
  unreachable, !dbg !2610
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.len(ptr %0) #0 comdat !dbg !2638 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2647
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2647
  br i1 %2, label %panic, label %checkok, !dbg !2647

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2648, !DIExpression(), !2649)
  %3 = load ptr, ptr %self, align 8, !dbg !2650
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2650
  %4 = load i64, ptr %ptradd, align 8, !dbg !2650
  ret i64 %4, !dbg !2650

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.234, i64 3 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 9), !dbg !2649
  unreachable, !dbg !2649
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteReader.init(ptr %0, ptr align 8 %1) #0 comdat !dbg !2651 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteReader, align 8
  %2 = icmp eq ptr %0, null, !dbg !2654
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2654
  br i1 %3, label %panic, label %checkok, !dbg !2654

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2655, !DIExpression(), !2656)
    #dbg_declare(ptr %1, !2657, !DIExpression(), !2656)
  %4 = load ptr, ptr %self, align 8, !dbg !2658
  %checknull = icmp eq ptr %4, null, !dbg !2658
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2658
  br i1 %5, label %panic3, label %checkok7, !dbg !2658

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2658
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !2658
  %6 = load ptr, ptr %self, align 8, !dbg !2659
  ret ptr %6, !dbg !2659

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 14), !dbg !2656
  unreachable, !dbg !2656

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 16), !dbg !2658
  unreachable, !dbg !2658
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2660 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %reterr = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len21 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %reterr33 = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2663
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2663
  br i1 %4, label %panic, label %checkok, !dbg !2663

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2664, !DIExpression(), !2665)
    #dbg_declare(ptr %2, !2666, !DIExpression(), !2665)
  %5 = load ptr, ptr %self, align 8, !dbg !2667
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2667
  %6 = load i64, ptr %ptradd, align 8, !dbg !2667
  %7 = load ptr, ptr %self, align 8, !dbg !2667
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2667
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2667
  %ge = icmp uge i64 %6, %8, !dbg !2667
  br i1 %ge, label %if.then, label %if.exit, !dbg !2667

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2667

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %len, !2668, !DIExpression(), !2669)
  %9 = load ptr, ptr %self, align 8, !dbg !2669
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !2669
  %10 = load i64, ptr %ptradd4, align 8, !dbg !2669
  %11 = load ptr, ptr %self, align 8, !dbg !2669
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2669
  %12 = load i64, ptr %ptradd5, align 8, !dbg !2669
  %sub = sub i64 %10, %12, !dbg !2669
  store i64 %sub, ptr %x, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2669
  %13 = load i64, ptr %ptradd6, align 8
  store i64 %13, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !2670
  %17 = load i64, ptr %b, align 8, !dbg !2670
  %lt = icmp ult i64 %16, %17, !dbg !2670
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2670

cond.lhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %x, align 8, !dbg !2672
  br label %cond.phi, !dbg !2672

cond.rhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %.anon, align 8, !dbg !2672
  br label %cond.phi, !dbg !2672

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !2672
  store i64 %val, ptr %len, align 8, !dbg !2672
  %20 = load i64, ptr %len, align 8, !dbg !2674
  %eq = icmp eq i64 0, %20, !dbg !2674
  br i1 %eq, label %if.then7, label %if.exit8, !dbg !2674

if.then7:                                         ; preds = %cond.phi
  store i64 0, ptr %0, align 8, !dbg !2674
  ret i64 0, !dbg !2674

if.exit8:                                         ; preds = %cond.phi
  %21 = load ptr, ptr %2, align 8, !dbg !2675
  store ptr %21, ptr %dst, align 8
  %22 = load ptr, ptr %self, align 8, !dbg !2675
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !2675
  %23 = load i64, ptr %ptradd9, align 8, !dbg !2675
  %24 = load ptr, ptr %22, align 8, !dbg !2675
  %25 = load ptr, ptr %self, align 8, !dbg !2675
  %ptradd10 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !2675
  %26 = load i64, ptr %ptradd10, align 8, !dbg !2675
  %ge11 = icmp uge i64 %26, %23, !dbg !2675
  %27 = call i1 @llvm.expect.i1(i1 %ge11, i1 false), !dbg !2675
  br i1 %27, label %panic12, label %checkok19, !dbg !2675

checkok19:                                        ; preds = %if.exit8
  %ptradd20 = getelementptr inbounds i8, ptr %24, i64 %26, !dbg !2675
  store ptr %ptradd20, ptr %src, align 8
  %28 = load i64, ptr %len, align 8
  store i64 %28, ptr %len21, align 8
  %29 = load i64, ptr %len21, align 8, !dbg !2676
  %eq22 = icmp eq i64 0, %29, !dbg !2676
  br i1 %eq22, label %or.phi, label %or.rhs, !dbg !2676

or.rhs:                                           ; preds = %checkok19
  %30 = load ptr, ptr %dst, align 8, !dbg !2676
  %31 = load i64, ptr %len21, align 8, !dbg !2676
  %ptradd_any = getelementptr i8, ptr %30, i64 %31, !dbg !2676
  %32 = load ptr, ptr %src, align 8, !dbg !2676
  %le = icmp ule ptr %ptradd_any, %32, !dbg !2676
  br label %or.phi, !dbg !2676

or.phi:                                           ; preds = %or.rhs, %checkok19
  %val23 = phi i1 [ true, %checkok19 ], [ %le, %or.rhs ], !dbg !2676
  br i1 %val23, label %or.phi27, label %or.rhs24, !dbg !2676

or.rhs24:                                         ; preds = %or.phi
  %33 = load ptr, ptr %src, align 8, !dbg !2676
  %34 = load i64, ptr %len21, align 8, !dbg !2676
  %ptradd_any25 = getelementptr i8, ptr %33, i64 %34, !dbg !2676
  %35 = load ptr, ptr %dst, align 8, !dbg !2676
  %le26 = icmp ule ptr %ptradd_any25, %35, !dbg !2676
  br label %or.phi27, !dbg !2676

or.phi27:                                         ; preds = %or.rhs24, %or.phi
  %val28 = phi i1 [ true, %or.phi ], [ %le26, %or.rhs24 ], !dbg !2676
  br i1 %val28, label %assert_ok, label %assert_fail, !dbg !2676

assert_fail:                                      ; preds = %or.phi27
  store %"char[]" { ptr @.panic_msg.235, i64 95 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.236, i64 6 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg31, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 309), !dbg !2676
  unreachable, !dbg !2676

assert_ok:                                        ; preds = %or.phi27
  %37 = load ptr, ptr %dst, align 8, !dbg !2679
  %38 = load ptr, ptr %src, align 8, !dbg !2679
  %39 = load i64, ptr %len21, align 8, !dbg !2679
  call void @llvm.memcpy.p0.p0.i64(ptr %37, ptr %38, i64 %39, i1 false), !dbg !2679
  %40 = load ptr, ptr %self, align 8, !dbg !2680
  %ptradd32 = getelementptr inbounds i8, ptr %40, i64 16, !dbg !2680
  %41 = load i64, ptr %ptradd32, align 8, !dbg !2680
  %42 = load i64, ptr %len, align 8, !dbg !2680
  %add = add i64 %41, %42, !dbg !2680
  store i64 %add, ptr %ptradd32, align 8, !dbg !2680
  %43 = load i64, ptr %len, align 8, !dbg !2681
  store i64 %43, ptr %0, align 8, !dbg !2681
  ret i64 0, !dbg !2681

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20), !dbg !2665
  unreachable, !dbg !2665

panic12:                                          ; preds = %if.exit8
  store i64 %23, ptr %taddr, align 8
  %45 = insertvalue %any undef, ptr %taddr, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr13, align 8
  %47 = insertvalue %any undef, ptr %taddr13, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg16, align 8
  store %any %46, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %48, ptr %ptradd17, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 25, ptr align 8 %indirectarg18), !dbg !2675
  unreachable, !dbg !2675
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2682 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2685
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2685
  br i1 %3, label %panic, label %checkok, !dbg !2685

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2686, !DIExpression(), !2687)
  %4 = load ptr, ptr %self, align 8, !dbg !2688
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2688
  %5 = load i64, ptr %ptradd, align 8, !dbg !2688
  %6 = load ptr, ptr %self, align 8, !dbg !2688
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2688
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2688
  %ge = icmp uge i64 %5, %7, !dbg !2688
  br i1 %ge, label %if.then, label %if.exit, !dbg !2688

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2688

if.exit:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2689
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !2689
  %9 = load i64, ptr %ptradd4, align 8, !dbg !2689
  %10 = load ptr, ptr %8, align 8, !dbg !2689
  %11 = load ptr, ptr %self, align 8, !dbg !2689
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2689
  %12 = load i64, ptr %ptradd5, align 8, !dbg !2689
  %add = add i64 %12, 1, !dbg !2689
  store i64 %add, ptr %ptradd5, align 8, !dbg !2689
  %ge6 = icmp uge i64 %12, %9, !dbg !2689
  %13 = call i1 @llvm.expect.i1(i1 %ge6, i1 false), !dbg !2689
  br i1 %13, label %panic7, label %checkok14, !dbg !2689

checkok14:                                        ; preds = %if.exit
  %ptradd15 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !2689
  %14 = load i8, ptr %ptradd15, align 1, !dbg !2689
  store i8 %14, ptr %0, align 1, !dbg !2689
  ret i64 0, !dbg !2689

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 30), !dbg !2687
  unreachable, !dbg !2687

panic7:                                           ; preds = %if.exit
  store i64 %9, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr8, align 8
  %18 = insertvalue %any undef, ptr %taddr8, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg11, align 8
  store %any %17, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd12, align 16
  %20 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %20, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 33, ptr align 8 %indirectarg13), !dbg !2689
  unreachable, !dbg !2689
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.pushback_byte(ptr %0) #0 comdat !dbg !2690 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2693
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2693
  br i1 %2, label %panic, label %checkok, !dbg !2693

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2694, !DIExpression(), !2695)
  %3 = load ptr, ptr %self, align 8, !dbg !2696
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !2696
  %4 = load i64, ptr %ptradd, align 8, !dbg !2696
  %i2nb = icmp eq i64 %4, 0, !dbg !2696
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2696

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_PUSHBACK" to i64), !dbg !2696

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !2697
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2697
  %6 = load i64, ptr %ptradd3, align 8, !dbg !2697
  %sub = sub i64 %6, 1, !dbg !2697
  store i64 %sub, ptr %ptradd3, align 8, !dbg !2697
  ret i64 0, !dbg !2697

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.226, i64 13 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !2695
  unreachable, !dbg !2695
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 comdat !dbg !2698 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %new_index = alloca i64, align 8
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2701
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2701
  br i1 %5, label %panic, label %checkok, !dbg !2701

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2702, !DIExpression(), !2703)
  store i64 %2, ptr %offset, align 8
    #dbg_declare(ptr %offset, !2704, !DIExpression(), !2703)
  store i32 %3, ptr %seek, align 4
    #dbg_declare(ptr %seek, !2705, !DIExpression(), !2703)
    #dbg_declare(ptr %new_index, !2706, !DIExpression(), !2707)
  store i64 0, ptr %new_index, align 8, !dbg !2707
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case3
    i32 2, label %switch.case4
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !2708
  store i64 %8, ptr %new_index, align 8, !dbg !2708
  br label %switch.exit, !dbg !2708

switch.case3:                                     ; preds = %switch.entry
  %9 = load ptr, ptr %self, align 8, !dbg !2711
  %ptradd = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2711
  %10 = load i64, ptr %ptradd, align 8, !dbg !2711
  %11 = load i64, ptr %offset, align 8, !dbg !2711
  %add = add i64 %10, %11, !dbg !2711
  store i64 %add, ptr %new_index, align 8, !dbg !2711
  br label %switch.exit, !dbg !2711

switch.case4:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8, !dbg !2713
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !2713
  %13 = load i64, ptr %ptradd5, align 8, !dbg !2713
  %14 = load i64, ptr %offset, align 8, !dbg !2713
  %add6 = add i64 %13, %14, !dbg !2713
  store i64 %add6, ptr %new_index, align 8, !dbg !2713
  br label %switch.exit, !dbg !2713

switch.exit:                                      ; preds = %switch.case4, %switch.case3, %switch.case, %switch.entry
  %15 = load i64, ptr %new_index, align 8, !dbg !2715
  %lt = icmp slt i64 %15, 0, !dbg !2715
  br i1 %lt, label %if.then, label %if.exit, !dbg !2715

if.then:                                          ; preds = %switch.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !2715

if.exit:                                          ; preds = %switch.exit
  %16 = load ptr, ptr %self, align 8, !dbg !2716
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2716
  %17 = load i64, ptr %new_index, align 8, !dbg !2716
  store i64 %17, ptr %ptradd7, align 8, !dbg !2716
  %18 = load i64, ptr %new_index, align 8, !dbg !2717
  store i64 %18, ptr %0, align 8, !dbg !2717
  ret i64 0, !dbg !2717

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.228, i64 4 }, ptr %indirectarg2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42), !dbg !2703
  unreachable, !dbg !2703
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.write_to(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2718 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %reterr26 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2721
  %3 = icmp eq ptr %1, null, !dbg !2721
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2721
  br i1 %4, label %panic, label %checkok, !dbg !2721

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2722, !DIExpression(), !2723)
    #dbg_declare(ptr %2, !2724, !DIExpression(), !2723)
  %5 = load ptr, ptr %self, align 8, !dbg !2725
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2725
  %6 = load i64, ptr %ptradd, align 8, !dbg !2725
  %7 = load ptr, ptr %self, align 8, !dbg !2725
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !2725
  %8 = load i64, ptr %ptradd3, align 8, !dbg !2725
  %ge = icmp uge i64 %6, %8, !dbg !2725
  br i1 %ge, label %if.then, label %if.exit, !dbg !2725

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !2725
  ret i64 0, !dbg !2725

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %written, !2726, !DIExpression(), !2727)
  %9 = load ptr, ptr %self, align 8, !dbg !2727
  %10 = load %"char[]", ptr %9, align 8, !dbg !2727
  %11 = extractvalue %"char[]" %10, 0, !dbg !2727
  %12 = load ptr, ptr %self, align 8, !dbg !2727
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2727
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2727
  %14 = extractvalue %"char[]" %10, 1, !dbg !2727
  %gt = icmp ugt i64 %13, %14, !dbg !2727
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2727
  br i1 %15, label %panic5, label %checkok12, !dbg !2727

checkok12:                                        ; preds = %if.exit
  %size = sub i64 %14, %13, !dbg !2727
  %ptradd13 = getelementptr inbounds i8, ptr %11, i64 %13, !dbg !2727
  %16 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !2727
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2727
  %ptradd14 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2727
  %18 = load i64, ptr %ptradd14, align 8, !dbg !2727
  %19 = inttoptr i64 %18 to ptr, !dbg !2727
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2721
  %20 = icmp eq ptr %19, %type, !dbg !2721
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !2721

cache_miss:                                       ; preds = %checkok12
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2721
  %21 = load ptr, ptr %ptradd15, align 8, !dbg !2721
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.write"), !dbg !2721
  store ptr %22, ptr %.inlinecache, align 8, !dbg !2721
  store ptr %19, ptr %.cachedtype, align 8, !dbg !2721
  br label %23, !dbg !2721

cache_hit:                                        ; preds = %checkok12
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2721
  br label %23, !dbg !2721

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !2721
  %24 = icmp eq ptr %fn_phi, null, !dbg !2721
  br i1 %24, label %missing_function, label %match, !dbg !2721

missing_function:                                 ; preds = %23
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.237, i64 8 }, ptr %indirectarg18, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 59), !dbg !2727
  unreachable, !dbg !2727

match:                                            ; preds = %23
  %26 = load ptr, ptr %2, align 8
  store %"char[]" %17, ptr %indirectarg19, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %26, ptr align 8 %indirectarg19), !dbg !2727
  %not_err = icmp eq i64 %27, 0, !dbg !2727
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2727
  br i1 %28, label %after_check, label %assign_optional, !dbg !2727

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !2727
  br label %guard_block, !dbg !2727

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2727

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !2727
  ret i64 %29, !dbg !2727

noerr_block:                                      ; preds = %after_check
  %30 = load i64, ptr %retparam, align 8, !dbg !2727
  store i64 %30, ptr %written, align 8, !dbg !2727
  %31 = load ptr, ptr %self, align 8, !dbg !2728
  %ptradd20 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !2728
  %32 = load i64, ptr %ptradd20, align 8, !dbg !2728
  %33 = load i64, ptr %written, align 8, !dbg !2728
  %add = add i64 %32, %33, !dbg !2728
  store i64 %add, ptr %ptradd20, align 8, !dbg !2728
  %34 = load ptr, ptr %self, align 8, !dbg !2729
  %ptradd21 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !2729
  %35 = load i64, ptr %ptradd21, align 8, !dbg !2729
  %36 = load ptr, ptr %self, align 8, !dbg !2729
  %ptradd22 = getelementptr inbounds i8, ptr %36, i64 8, !dbg !2729
  %37 = load i64, ptr %ptradd22, align 8, !dbg !2729
  %le = icmp ule i64 %35, %37, !dbg !2729
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !2729

assert_fail:                                      ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.227, i64 16 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.237, i64 8 }, ptr %indirectarg25, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 61), !dbg !2729
  unreachable, !dbg !2729

assert_ok:                                        ; preds = %noerr_block
  %39 = load i64, ptr %written, align 8, !dbg !2730
  store i64 %39, ptr %0, align 8, !dbg !2730
  ret i64 0, !dbg !2730

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.237, i64 8 }, ptr %indirectarg2, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 56), !dbg !2723
  unreachable, !dbg !2723

panic5:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr6, align 8
  %43 = insertvalue %any undef, ptr %taddr6, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.237, i64 8 }, ptr %indirectarg9, align 8
  store %any %42, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %44, ptr %ptradd10, align 16
  %45 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %45, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 59, ptr align 8 %indirectarg11), !dbg !2727
  unreachable, !dbg !2727
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteReader.available(ptr %0, ptr %1) #0 comdat !dbg !2731 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2734
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2734
  br i1 %3, label %panic, label %checkok, !dbg !2734

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2735, !DIExpression(), !2736)
  store i32 0, ptr %x, align 4
  %4 = load ptr, ptr %self, align 8, !dbg !2737
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2737
  %5 = load i64, ptr %ptradd, align 8, !dbg !2737
  %6 = load ptr, ptr %self, align 8, !dbg !2737
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !2737
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2737
  %sub = sub i64 %5, %7, !dbg !2737
  store i64 %sub, ptr %.anon, align 8
  %8 = load i32, ptr %x, align 4
  store i32 %8, ptr %a, align 4
  %9 = load i64, ptr %.anon, align 8
  store i64 %9, ptr %b, align 8
  %10 = load i32, ptr %a, align 4, !dbg !2738
  %sext = sext i32 %10 to i64, !dbg !2738
  %11 = load i64, ptr %b, align 8, !dbg !2738
  %gt = icmp sgt i64 %sext, %11, !dbg !2738
  %check = icmp sge i64 %11, 0, !dbg !2738
  %siui-gt = and i1 %check, %gt, !dbg !2738
  br i1 %siui-gt, label %cond.lhs, label %cond.rhs, !dbg !2738

cond.lhs:                                         ; preds = %checkok
  %12 = load i32, ptr %x, align 4, !dbg !2740
  %sext4 = sext i32 %12 to i64, !dbg !2740
  br label %cond.phi, !dbg !2740

cond.rhs:                                         ; preds = %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !2740
  br label %cond.phi, !dbg !2740

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext4, %cond.lhs ], [ %13, %cond.rhs ], !dbg !2740
  store i64 %val, ptr %0, align 8, !dbg !2740
  ret i64 0, !dbg !2740

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.233, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.229, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65), !dbg !2736
  unreachable, !dbg !2736
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteWriter.new_init(ptr %0, ptr align 8 %1) #0 comdat !dbg !2742 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2752
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2752
  br i1 %3, label %panic, label %checkok, !dbg !2752

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2753, !DIExpression(), !2754)
    #dbg_declare(ptr %1, !2755, !DIExpression(), !2754)
  %4 = load ptr, ptr %self, align 8, !dbg !2756
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2756
  %5 = load i64, ptr %ptradd, align 8, !dbg !2756
  %eq = icmp eq i64 0, %5, !dbg !2756
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2756

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.203, i64 88 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 14), !dbg !2756
  unreachable, !dbg !2756

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2758
  %checknull = icmp eq ptr %7, null, !dbg !2758
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2758
  br i1 %8, label %panic6, label %checkok10, !dbg !2758

checkok10:                                        ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  store %"char[]" zeroinitializer, ptr %.assign_list, align 8, !dbg !2758
  %ptradd11 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2758
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd11, ptr align 8 %1, i32 16, i1 false), !dbg !2758
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2758
  %9 = load ptr, ptr %self, align 8, !dbg !2759
  %10 = load ptr, ptr %1, align 8, !dbg !2760
  %i2b = icmp ne ptr %10, null, !dbg !2760
  br i1 %i2b, label %assert_ok16, label %assert_fail12, !dbg !2760

assert_fail12:                                    ; preds = %checkok10
  store %"char[]" { ptr @.panic_msg.239, i64 52 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg15, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 15), !dbg !2760
  unreachable, !dbg !2760

assert_ok16:                                      ; preds = %checkok10
  %12 = load ptr, ptr %self, align 8, !dbg !2760
  %ptradd17 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2760
  %13 = load i64, ptr %ptradd17, align 8, !dbg !2760
  %eq18 = icmp eq i64 0, %13, !dbg !2760
  br i1 %eq18, label %assert_ok23, label %assert_fail19, !dbg !2760

assert_fail19:                                    ; preds = %assert_ok16
  store %"char[]" { ptr @.panic_msg.239, i64 52 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg22, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 15), !dbg !2760
  unreachable, !dbg !2760

assert_ok23:                                      ; preds = %assert_ok16
  ret ptr %9, !dbg !2760

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 17), !dbg !2754
  unreachable, !dbg !2754

panic6:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg9, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 19), !dbg !2758
  unreachable, !dbg !2758
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteWriter.temp_init(ptr %0) #0 comdat !dbg !2761 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %any, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2764
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2764
  br i1 %2, label %panic, label %checkok, !dbg !2764

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2765, !DIExpression(), !2766)
  %3 = load ptr, ptr %self, align 8, !dbg !2767
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2767
  %4 = load i64, ptr %ptradd, align 8, !dbg !2767
  %eq = icmp eq i64 0, %4, !dbg !2767
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2767

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.203, i64 88 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 25), !dbg !2767
  unreachable, !dbg !2767

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2769
  %i2nb = icmp eq ptr %6, null, !dbg !2769
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2769

if.then:                                          ; preds = %assert_ok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !2772
  br label %if.exit, !dbg !2772

if.exit:                                          ; preds = %if.then, %assert_ok
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !2774
  %8 = insertvalue %any undef, ptr %7, 0, !dbg !2771
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !2771
  %10 = load ptr, ptr %self, align 8, !dbg !2771
  store %any %9, ptr %indirectarg6, align 8
  %11 = call ptr @std.io.ByteWriter.new_init(ptr %10, ptr align 8 %indirectarg6) #5, !dbg !2771
  %12 = load ptr, ptr %self, align 8, !dbg !2775
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2775
  %13 = load i64, ptr %ptradd7, align 8, !dbg !2775
  %eq8 = icmp eq i64 0, %13, !dbg !2775
  br i1 %eq8, label %assert_ok13, label %assert_fail9, !dbg !2775

assert_fail9:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.240, i64 35 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 26), !dbg !2775
  unreachable, !dbg !2775

assert_ok13:                                      ; preds = %if.exit
  ret ptr %11, !dbg !2775

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28), !dbg !2766
  unreachable, !dbg !2766
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.ByteWriter.init_with_buffer(ptr %0, ptr align 8 %1) #0 comdat !dbg !2776 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %2 = icmp eq ptr %0, null, !dbg !2779
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2779
  br i1 %3, label %panic, label %checkok, !dbg !2779

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2780, !DIExpression(), !2781)
    #dbg_declare(ptr %1, !2782, !DIExpression(), !2781)
  %4 = load ptr, ptr %self, align 8, !dbg !2783
  %checknull = icmp eq ptr %4, null, !dbg !2783
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2783
  br i1 %5, label %panic3, label %checkok7, !dbg !2783

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2783
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2783
  store %any { ptr null, i64 ptrtoint (ptr @"$ct.void" to i64) }, ptr %ptradd, align 8, !dbg !2783
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2783
  %6 = load ptr, ptr %self, align 8, !dbg !2784
  ret ptr %6, !dbg !2784

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.220, i64 16 }, ptr %indirectarg2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 33), !dbg !2781
  unreachable, !dbg !2781

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.220, i64 16 }, ptr %indirectarg6, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 35), !dbg !2783
  unreachable, !dbg !2783
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.destroy(ptr %0) #0 comdat !dbg !2785 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr5 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2788
  %1 = icmp eq ptr %0, null, !dbg !2788
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2788
  br i1 %2, label %panic, label %checkok, !dbg !2788

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2789, !DIExpression(), !2790)
  %3 = load ptr, ptr %self, align 8, !dbg !2791
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !2791
  %4 = load ptr, ptr %ptradd, align 8, !dbg !2791
  %i2nb = icmp eq ptr %4, null, !dbg !2791
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2791

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %ptr, !2792, !DIExpression(), !2793)
  %5 = load ptr, ptr %self, align 8, !dbg !2793
  %6 = load ptr, ptr %5, align 8, !dbg !2793
  store ptr %6, ptr %ptr, align 8, !dbg !2793
  %7 = load ptr, ptr %ptr, align 8, !dbg !2793
  %ptrbool = icmp ne ptr %7, null, !dbg !2793
  br i1 %ptrbool, label %if.then3, label %if.exit14, !dbg !2793

if.then3:                                         ; preds = %if.exit
  %8 = load ptr, ptr %self, align 8, !dbg !2793
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !2793
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd4, i32 16, i1 false)
  %9 = load ptr, ptr %ptr, align 8
  store ptr %9, ptr %ptr5, align 8
  %10 = load ptr, ptr %ptr5, align 8, !dbg !2794
  %i2nb6 = icmp eq ptr %10, null, !dbg !2794
  br i1 %i2nb6, label %if.then7, label %if.exit8, !dbg !2794

if.then7:                                         ; preds = %if.then3
  br label %expr_block.exit, !dbg !2794

if.exit8:                                         ; preds = %if.then3
  %ptradd9 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2796
  %11 = load i64, ptr %ptradd9, align 8, !dbg !2796
  %12 = inttoptr i64 %11 to ptr, !dbg !2796
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2788
  %13 = icmp eq ptr %12, %type, !dbg !2788
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !2788

cache_miss:                                       ; preds = %if.exit8
  %ptradd10 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2788
  %14 = load ptr, ptr %ptradd10, align 8, !dbg !2788
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !2788
  store ptr %15, ptr %.inlinecache, align 8, !dbg !2788
  store ptr %12, ptr %.cachedtype, align 8, !dbg !2788
  br label %16, !dbg !2788

cache_hit:                                        ; preds = %if.exit8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2788
  br label %16, !dbg !2788

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !2788
  %17 = icmp eq ptr %fn_phi, null, !dbg !2788
  br i1 %17, label %missing_function, label %match, !dbg !2788

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.241, i64 7 }, ptr %indirectarg13, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 105), !dbg !2796
  unreachable, !dbg !2796

match:                                            ; preds = %16
  %19 = load ptr, ptr %allocator, align 8, !dbg !2796
  %20 = load ptr, ptr %ptr5, align 8, !dbg !2796
  call void %fn_phi(ptr %19, ptr %20, i8 zeroext 0), !dbg !2796
  br label %expr_block.exit, !dbg !2796

expr_block.exit:                                  ; preds = %match, %if.then7
  br label %if.exit14, !dbg !2796

if.exit14:                                        ; preds = %expr_block.exit, %if.exit
  %21 = load ptr, ptr %self, align 8, !dbg !2797
  %checknull = icmp eq ptr %21, null, !dbg !2797
  %22 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2797
  br i1 %22, label %panic15, label %checkok19, !dbg !2797

checkok19:                                        ; preds = %if.exit14
  call void @llvm.memset.p0.i64(ptr align 8 %21, i8 0, i64 40, i1 false), !dbg !2797
  ret i64 0, !dbg !2797

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.241, i64 7 }, ptr %indirectarg2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39), !dbg !2790
  unreachable, !dbg !2790

panic15:                                          ; preds = %if.exit14
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.241, i64 7 }, ptr %indirectarg18, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 43), !dbg !2797
  unreachable, !dbg !2797
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.ByteWriter.str_view(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !2798 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots17 = alloca [2 x %any], align 16
  %indirectarg20 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !2801
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2801
  br i1 %3, label %panic, label %checkok, !dbg !2801

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2802, !DIExpression(), !2803)
  %4 = load ptr, ptr %self, align 8, !dbg !2804
  %5 = load %"char[]", ptr %4, align 8, !dbg !2804
  %6 = extractvalue %"char[]" %5, 0, !dbg !2804
  %7 = extractvalue %"char[]" %5, 1, !dbg !2804
  %gt = icmp ugt i64 0, %7, !dbg !2804
  %8 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2804
  br i1 %8, label %panic3, label %checkok9, !dbg !2804

checkok9:                                         ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !2804
  %ptradd10 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !2804
  %10 = load i64, ptr %ptradd10, align 8, !dbg !2804
  %add = add i64 0, %10, !dbg !2804
  %lt = icmp ult i64 %7, %add, !dbg !2804
  %sub = sub i64 %add, 1, !dbg !2804
  %11 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !2804
  br i1 %11, label %panic11, label %checkok21, !dbg !2804

checkok21:                                        ; preds = %checkok9
  %size = sub i64 %add, 0, !dbg !2804
  %12 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !2804
  %13 = insertvalue %"char[]" %12, i64 %size, 1, !dbg !2804
  store %"char[]" %13, ptr %0, align 8, !dbg !2804
  ret void, !dbg !2804

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 46), !dbg !2803
  unreachable, !dbg !2803

panic3:                                           ; preds = %checkok
  store i64 %7, ptr %taddr, align 8
  %15 = insertvalue %any undef, ptr %taddr, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr4, align 8
  %17 = insertvalue %any undef, ptr %taddr4, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg7, align 8
  store %any %16, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %18, ptr %ptradd, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 48, ptr align 8 %indirectarg8), !dbg !2804
  unreachable, !dbg !2804

panic11:                                          ; preds = %checkok9
  store i64 %sub, ptr %taddr12, align 8
  %20 = insertvalue %any undef, ptr %taddr12, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr13, align 8
  %22 = insertvalue %any undef, ptr %taddr13, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.204, i64 8 }, ptr %indirectarg16, align 8
  store %any %21, ptr %varargslots17, align 16
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots17, i64 16
  store %any %23, ptr %ptradd18, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots17, 0
  %"$$temp19" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp19", ptr %indirectarg20, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 48, ptr align 8 %indirectarg20), !dbg !2804
  unreachable, !dbg !2804
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.ensure_capacity(ptr %0, i64 %1) #0 comdat !dbg !2805 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %new_ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator12 = alloca %any, align 8
  %ptr13 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %.inlinecache26 = alloca ptr, align 8
  %.cachedtype27 = alloca ptr, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %.inlinecache41 = alloca ptr, align 8
  %.cachedtype42 = alloca ptr, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %retparam54 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype42, align 8, !dbg !2808
  store ptr null, ptr %.cachedtype27, align 8, !dbg !2808
  store ptr null, ptr %.cachedtype, align 8, !dbg !2808
  %2 = icmp eq ptr %0, null, !dbg !2808
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2808
  br i1 %3, label %panic, label %checkok, !dbg !2808

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2809, !DIExpression(), !2810)
  store i64 %1, ptr %len, align 8
    #dbg_declare(ptr %len, !2811, !DIExpression(), !2810)
  %4 = load ptr, ptr %self, align 8, !dbg !2812
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !2812
  %5 = load i64, ptr %ptradd, align 8, !dbg !2812
  %6 = load i64, ptr %len, align 8, !dbg !2812
  %gt = icmp ugt i64 %5, %6, !dbg !2812
  br i1 %gt, label %if.then, label %if.exit, !dbg !2812

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !2813
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !2813
  %8 = load ptr, ptr %ptradd3, align 8, !dbg !2813
  %i2nb = icmp eq ptr %8, null, !dbg !2813
  br i1 %i2nb, label %if.then4, label %if.exit5, !dbg !2813

if.then4:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$OUT_OF_SPACE" to i64), !dbg !2813

if.exit5:                                         ; preds = %if.exit
  %9 = load i64, ptr %len, align 8, !dbg !2814
  %gt6 = icmp ugt i64 16, %9, !dbg !2814
  br i1 %gt6, label %if.then7, label %if.exit8, !dbg !2814

if.then7:                                         ; preds = %if.exit5
  store i64 16, ptr %len, align 8, !dbg !2814
  br label %if.exit8, !dbg !2814

if.exit8:                                         ; preds = %if.then7, %if.exit5
    #dbg_declare(ptr %new_capacity, !2815, !DIExpression(), !2816)
  %10 = load i64, ptr %len, align 8
  store i64 %10, ptr %x, align 8
    #dbg_declare(ptr %y, !2817, !DIExpression(), !2819)
  store i64 1, ptr %y, align 8, !dbg !2819
  br label %loop.cond, !dbg !2820

loop.cond:                                        ; preds = %loop.body, %if.exit8
  %11 = load i64, ptr %y, align 8, !dbg !2821
  %12 = load i64, ptr %x, align 8, !dbg !2821
  %lt = icmp ult i64 %11, %12, !dbg !2821
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2821

loop.body:                                        ; preds = %loop.cond
  %13 = load i64, ptr %y, align 8, !dbg !2821
  %14 = load i64, ptr %y, align 8, !dbg !2821
  %add = add i64 %13, %14, !dbg !2821
  store i64 %add, ptr %y, align 8, !dbg !2821
  br label %loop.cond, !dbg !2821

loop.exit:                                        ; preds = %loop.cond
  %15 = load i64, ptr %y, align 8, !dbg !2823
  store i64 %15, ptr %new_capacity, align 8, !dbg !2823
    #dbg_declare(ptr %new_ptr, !2824, !DIExpression(), !2825)
  %16 = load ptr, ptr %self, align 8, !dbg !2825
  %ptradd9 = getelementptr inbounds i8, ptr %16, i64 24, !dbg !2825
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd9, i32 16, i1 false)
  %17 = load ptr, ptr %self, align 8, !dbg !2825
  %18 = load ptr, ptr %17, align 8, !dbg !2825
  store ptr %18, ptr %ptr, align 8
  %19 = load i64, ptr %new_capacity, align 8
  store i64 %19, ptr %new_size, align 8
  %20 = load i64, ptr %new_size, align 8, !dbg !2826
  %i2nb10 = icmp eq i64 %20, 0, !dbg !2826
  br i1 %i2nb10, label %if.then11, label %if.exit22, !dbg !2826

if.then11:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator12, ptr align 8 %allocator, i32 16, i1 false)
  %21 = load ptr, ptr %ptr, align 8
  store ptr %21, ptr %ptr13, align 8
  %22 = load ptr, ptr %ptr13, align 8, !dbg !2828
  %i2nb14 = icmp eq ptr %22, null, !dbg !2828
  br i1 %i2nb14, label %if.then15, label %if.exit16, !dbg !2828

if.then15:                                        ; preds = %if.then11
  br label %expr_block.exit, !dbg !2828

if.exit16:                                        ; preds = %if.then11
  %ptradd17 = getelementptr inbounds i8, ptr %allocator12, i64 8, !dbg !2832
  %23 = load i64, ptr %ptradd17, align 8, !dbg !2832
  %24 = inttoptr i64 %23 to ptr, !dbg !2832
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2808
  %25 = icmp eq ptr %24, %type, !dbg !2808
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !2808

cache_miss:                                       ; preds = %if.exit16
  %ptradd18 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !2808
  %26 = load ptr, ptr %ptradd18, align 8, !dbg !2808
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.release"), !dbg !2808
  store ptr %27, ptr %.inlinecache, align 8, !dbg !2808
  store ptr %24, ptr %.cachedtype, align 8, !dbg !2808
  br label %28, !dbg !2808

cache_hit:                                        ; preds = %if.exit16
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2808
  br label %28, !dbg !2808

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !2808
  %29 = icmp eq ptr %fn_phi, null, !dbg !2808
  br i1 %29, label %missing_function, label %match, !dbg !2808

missing_function:                                 ; preds = %28
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.242, i64 15 }, ptr %indirectarg21, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 105), !dbg !2832
  unreachable, !dbg !2832

match:                                            ; preds = %28
  %31 = load ptr, ptr %allocator12, align 8, !dbg !2832
  %32 = load ptr, ptr %ptr13, align 8, !dbg !2832
  call void %fn_phi(ptr %31, ptr %32, i8 zeroext 0), !dbg !2832
  br label %expr_block.exit, !dbg !2832

expr_block.exit:                                  ; preds = %match, %if.then15
  store ptr null, ptr %blockret, align 8, !dbg !2833
  br label %expr_block.exit58, !dbg !2833

if.exit22:                                        ; preds = %loop.exit
  %33 = load ptr, ptr %ptr, align 8, !dbg !2834
  %i2nb23 = icmp eq ptr %33, null, !dbg !2834
  br i1 %i2nb23, label %if.then24, label %if.exit39, !dbg !2834

if.then24:                                        ; preds = %if.exit22
  %ptradd25 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2835
  %34 = load i64, ptr %ptradd25, align 8, !dbg !2835
  %35 = inttoptr i64 %34 to ptr, !dbg !2835
  %type28 = load ptr, ptr %.cachedtype27, align 8, !dbg !2808
  %36 = icmp eq ptr %35, %type28, !dbg !2808
  br i1 %36, label %cache_hit31, label %cache_miss29, !dbg !2808

cache_miss29:                                     ; preds = %if.then24
  %ptradd30 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !2808
  %37 = load ptr, ptr %ptradd30, align 8, !dbg !2808
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.acquire"), !dbg !2808
  store ptr %38, ptr %.inlinecache26, align 8, !dbg !2808
  store ptr %35, ptr %.cachedtype27, align 8, !dbg !2808
  br label %39, !dbg !2808

cache_hit31:                                      ; preds = %if.then24
  %cache_hit_fn32 = load ptr, ptr %.inlinecache26, align 8, !dbg !2808
  br label %39, !dbg !2808

39:                                               ; preds = %cache_hit31, %cache_miss29
  %fn_phi33 = phi ptr [ %cache_hit_fn32, %cache_hit31 ], [ %38, %cache_miss29 ], !dbg !2808
  %40 = icmp eq ptr %fn_phi33, null, !dbg !2808
  br i1 %40, label %missing_function34, label %match38, !dbg !2808

missing_function34:                               ; preds = %39
  store %"char[]" { ptr @.panic_msg.231, i64 44 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.242, i64 15 }, ptr %indirectarg37, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 95), !dbg !2834
  unreachable, !dbg !2834

match38:                                          ; preds = %39
  %42 = load ptr, ptr %allocator, align 8
  %43 = load i64, ptr %new_size, align 8
  %44 = call i64 %fn_phi33(ptr %retparam, ptr %42, i64 %43, i32 0, i64 0), !dbg !2834
  %not_err = icmp eq i64 %44, 0, !dbg !2834
  %45 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2834
  br i1 %45, label %after_check, label %assign_optional, !dbg !2834

assign_optional:                                  ; preds = %match38
  store i64 %44, ptr %error_var, align 8, !dbg !2834
  br label %guard_block, !dbg !2834

after_check:                                      ; preds = %match38
  %46 = load ptr, ptr %retparam, align 8, !dbg !2834
  store ptr %46, ptr %blockret, align 8, !dbg !2834
  br label %expr_block.exit58, !dbg !2834

if.exit39:                                        ; preds = %if.exit22
  %ptradd40 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !2837
  %47 = load i64, ptr %ptradd40, align 8, !dbg !2837
  %48 = inttoptr i64 %47 to ptr, !dbg !2837
  %type43 = load ptr, ptr %.cachedtype42, align 8, !dbg !2808
  %49 = icmp eq ptr %48, %type43, !dbg !2808
  br i1 %49, label %cache_hit46, label %cache_miss44, !dbg !2808

cache_miss44:                                     ; preds = %if.exit39
  %ptradd45 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !2808
  %50 = load ptr, ptr %ptradd45, align 8, !dbg !2808
  %51 = call ptr @.dyn_search(ptr %50, ptr @"$sel.resize"), !dbg !2808
  store ptr %51, ptr %.inlinecache41, align 8, !dbg !2808
  store ptr %48, ptr %.cachedtype42, align 8, !dbg !2808
  br label %52, !dbg !2808

cache_hit46:                                      ; preds = %if.exit39
  %cache_hit_fn47 = load ptr, ptr %.inlinecache41, align 8, !dbg !2808
  br label %52, !dbg !2808

52:                                               ; preds = %cache_hit46, %cache_miss44
  %fn_phi48 = phi ptr [ %cache_hit_fn47, %cache_hit46 ], [ %51, %cache_miss44 ], !dbg !2808
  %53 = icmp eq ptr %fn_phi48, null, !dbg !2808
  br i1 %53, label %missing_function49, label %match53, !dbg !2808

missing_function49:                               ; preds = %52
  store %"char[]" { ptr @.panic_msg.232, i64 43 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.242, i64 15 }, ptr %indirectarg52, align 8
  %54 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %54(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 96), !dbg !2839
  unreachable, !dbg !2839

match53:                                          ; preds = %52
  %55 = load ptr, ptr %allocator, align 8
  %56 = load ptr, ptr %ptr, align 8
  %57 = load i64, ptr %new_size, align 8
  %58 = call i64 %fn_phi48(ptr %retparam54, ptr %55, ptr %56, i64 %57, i64 0), !dbg !2839
  %not_err55 = icmp eq i64 %58, 0, !dbg !2839
  %59 = call i1 @llvm.expect.i1(i1 %not_err55, i1 true), !dbg !2839
  br i1 %59, label %after_check57, label %assign_optional56, !dbg !2839

assign_optional56:                                ; preds = %match53
  store i64 %58, ptr %error_var, align 8, !dbg !2839
  br label %guard_block, !dbg !2839

after_check57:                                    ; preds = %match53
  %60 = load ptr, ptr %retparam54, align 8, !dbg !2839
  store ptr %60, ptr %blockret, align 8, !dbg !2839
  br label %expr_block.exit58, !dbg !2839

expr_block.exit58:                                ; preds = %after_check57, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !2839

guard_block:                                      ; preds = %assign_optional56, %assign_optional
  %61 = load i64, ptr %error_var, align 8, !dbg !2839
  ret i64 %61, !dbg !2839

noerr_block:                                      ; preds = %expr_block.exit58
  %62 = load ptr, ptr %blockret, align 8, !dbg !2839
  store ptr %62, ptr %new_ptr, align 8, !dbg !2839
  %63 = load ptr, ptr %self, align 8, !dbg !2840
  %64 = load ptr, ptr %new_ptr, align 8, !dbg !2840
  %65 = load i64, ptr %new_capacity, align 8, !dbg !2840
  %add59 = add i64 0, %65, !dbg !2840
  %size = sub i64 %add59, 0, !dbg !2840
  %66 = insertvalue %"char[]" undef, ptr %64, 0, !dbg !2840
  %67 = insertvalue %"char[]" %66, i64 %size, 1, !dbg !2840
  store %"char[]" %67, ptr %63, align 8, !dbg !2840
  ret i64 0, !dbg !2840

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.242, i64 15 }, ptr %indirectarg2, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 51), !dbg !2810
  unreachable, !dbg !2810
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2841 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2844
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2844
  br i1 %4, label %panic, label %checkok, !dbg !2844

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2845, !DIExpression(), !2846)
    #dbg_declare(ptr %2, !2847, !DIExpression(), !2846)
  %5 = load ptr, ptr %self, align 8, !dbg !2848
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2848
  %6 = load i64, ptr %ptradd, align 8, !dbg !2848
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2848
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2848
  %add = add i64 %6, %7, !dbg !2848
  %8 = load ptr, ptr %self, align 8, !dbg !2848
  %9 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %8, i64 %add) #5, !dbg !2848
  %not_err = icmp eq i64 %9, 0, !dbg !2848
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2848
  br i1 %10, label %after_check, label %assign_optional, !dbg !2848

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %error_var, align 8, !dbg !2848
  br label %guard_block, !dbg !2848

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2848

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !2848
  ret i64 %11, !dbg !2848

noerr_block:                                      ; preds = %after_check
  %12 = load ptr, ptr %self, align 8, !dbg !2849
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !2849
  %13 = load i64, ptr %ptradd4, align 8, !dbg !2849
  %14 = load ptr, ptr %12, align 8, !dbg !2849
  %15 = load ptr, ptr %self, align 8, !dbg !2849
  %ptradd5 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !2849
  %16 = load i64, ptr %ptradd5, align 8, !dbg !2849
  %ge = icmp uge i64 %16, %13, !dbg !2849
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2849
  br i1 %17, label %panic6, label %checkok13, !dbg !2849

checkok13:                                        ; preds = %noerr_block
  %ptradd14 = getelementptr inbounds i8, ptr %14, i64 %16, !dbg !2849
  store ptr %ptradd14, ptr %dst, align 8
  %18 = load ptr, ptr %2, align 8, !dbg !2849
  store ptr %18, ptr %src, align 8
  %ptradd15 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2849
  %19 = load i64, ptr %ptradd15, align 8
  store i64 %19, ptr %len, align 8
  %20 = load i64, ptr %len, align 8, !dbg !2850
  %eq = icmp eq i64 0, %20, !dbg !2850
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !2850

or.rhs:                                           ; preds = %checkok13
  %21 = load ptr, ptr %dst, align 8, !dbg !2850
  %22 = load i64, ptr %len, align 8, !dbg !2850
  %ptradd_any = getelementptr i8, ptr %21, i64 %22, !dbg !2850
  %23 = load ptr, ptr %src, align 8, !dbg !2850
  %le = icmp ule ptr %ptradd_any, %23, !dbg !2850
  br label %or.phi, !dbg !2850

or.phi:                                           ; preds = %or.rhs, %checkok13
  %val = phi i1 [ true, %checkok13 ], [ %le, %or.rhs ], !dbg !2850
  br i1 %val, label %or.phi19, label %or.rhs16, !dbg !2850

or.rhs16:                                         ; preds = %or.phi
  %24 = load ptr, ptr %src, align 8, !dbg !2850
  %25 = load i64, ptr %len, align 8, !dbg !2850
  %ptradd_any17 = getelementptr i8, ptr %24, i64 %25, !dbg !2850
  %26 = load ptr, ptr %dst, align 8, !dbg !2850
  %le18 = icmp ule ptr %ptradd_any17, %26, !dbg !2850
  br label %or.phi19, !dbg !2850

or.phi19:                                         ; preds = %or.rhs16, %or.phi
  %val20 = phi i1 [ true, %or.phi ], [ %le18, %or.rhs16 ], !dbg !2850
  br i1 %val20, label %assert_ok, label %assert_fail, !dbg !2850

assert_fail:                                      ; preds = %or.phi19
  store %"char[]" { ptr @.panic_msg.235, i64 95 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.236, i64 6 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg23, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 309), !dbg !2850
  unreachable, !dbg !2850

assert_ok:                                        ; preds = %or.phi19
  %28 = load ptr, ptr %dst, align 8, !dbg !2853
  %29 = load ptr, ptr %src, align 8, !dbg !2853
  %30 = load i64, ptr %len, align 8, !dbg !2853
  call void @llvm.memcpy.p0.p0.i64(ptr %28, ptr %29, i64 %30, i1 false), !dbg !2853
  %31 = load ptr, ptr %self, align 8, !dbg !2854
  %ptradd24 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !2854
  %32 = load i64, ptr %ptradd24, align 8, !dbg !2854
  %ptradd25 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2854
  %33 = load i64, ptr %ptradd25, align 8, !dbg !2854
  %add26 = add i64 %32, %33, !dbg !2854
  store i64 %add26, ptr %ptradd24, align 8, !dbg !2854
  %ptradd27 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2855
  %34 = load i64, ptr %ptradd27, align 8, !dbg !2855
  store i64 %34, ptr %0, align 8, !dbg !2855
  ret i64 0, !dbg !2855

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg2, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 61), !dbg !2846
  unreachable, !dbg !2846

panic6:                                           ; preds = %noerr_block
  store i64 %13, ptr %taddr, align 8
  %36 = insertvalue %any undef, ptr %taddr, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr7, align 8
  %38 = insertvalue %any undef, ptr %taddr7, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg10, align 8
  store %any %37, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %39, ptr %ptradd11, align 16
  %40 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %40, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 64, ptr align 8 %indirectarg12), !dbg !2849
  unreachable, !dbg !2849
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.write_byte(ptr %0, i8 %1) #0 comdat !dbg !2856 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg12 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2859
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2859
  br i1 %3, label %panic, label %checkok, !dbg !2859

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2860, !DIExpression(), !2861)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !2862, !DIExpression(), !2861)
  %4 = load ptr, ptr %self, align 8, !dbg !2863
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2863
  %5 = load i64, ptr %ptradd, align 8, !dbg !2863
  %add = add i64 %5, 1, !dbg !2863
  %6 = load ptr, ptr %self, align 8, !dbg !2863
  %7 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %6, i64 %add) #5, !dbg !2863
  %not_err = icmp eq i64 %7, 0, !dbg !2863
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2863
  br i1 %8, label %after_check, label %assign_optional, !dbg !2863

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !2863
  br label %guard_block, !dbg !2863

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2863

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !2863
  ret i64 %9, !dbg !2863

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %self, align 8, !dbg !2864
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2864
  %11 = load i64, ptr %ptradd3, align 8, !dbg !2864
  %12 = load ptr, ptr %10, align 8, !dbg !2864
  %13 = load ptr, ptr %self, align 8, !dbg !2864
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2864
  %14 = load i64, ptr %ptradd4, align 8, !dbg !2864
  %add5 = add i64 %14, 1, !dbg !2864
  store i64 %add5, ptr %ptradd4, align 8, !dbg !2864
  %ge = icmp uge i64 %14, %11, !dbg !2864
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2864
  br i1 %15, label %panic6, label %checkok13, !dbg !2864

checkok13:                                        ; preds = %noerr_block
  %ptradd14 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !2864
  %16 = load i8, ptr %c, align 1, !dbg !2864
  store i8 %16, ptr %ptradd14, align 1, !dbg !2864
  ret i64 0, !dbg !2864

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.214, i64 10 }, ptr %indirectarg2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69), !dbg !2861
  unreachable, !dbg !2861

panic6:                                           ; preds = %noerr_block
  store i64 %11, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr7, align 8
  %20 = insertvalue %any undef, ptr %taddr7, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.214, i64 10 }, ptr %indirectarg10, align 8
  store %any %19, ptr %varargslots, align 16
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd11, align 16
  %22 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %22, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg12, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 72, ptr align 8 %indirectarg12), !dbg !2864
  unreachable, !dbg !2864
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.ByteWriter.read_from(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2865 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %start_index = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %available = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache6 = alloca ptr, align 8
  %.cachedtype7 = alloca ptr, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %error_var17 = alloca i64, align 8
  %read = alloca i64, align 8
  %error_var24 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr27 = alloca i64, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg32 = alloca %"any[]", align 8
  %.inlinecache36 = alloca ptr, align 8
  %.cachedtype37 = alloca ptr, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %retparam49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var61 = alloca i64, align 8
  %len_to_read = alloca i64, align 8
  %error_var74 = alloca i64, align 8
  %read85 = alloca i64, align 8
  %error_var86 = alloca i64, align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 16
  %indirectarg98 = alloca %"any[]", align 8
  %.inlinecache103 = alloca ptr, align 8
  %.cachedtype104 = alloca ptr, align 8
  %indirectarg112 = alloca %"char[]", align 8
  %indirectarg113 = alloca %"char[]", align 8
  %indirectarg114 = alloca %"char[]", align 8
  %retparam116 = alloca i64, align 8
  %indirectarg117 = alloca %"char[]", align 8
  %reterr126 = alloca i64, align 8
  store ptr null, ptr %.cachedtype104, align 8, !dbg !2868
  store ptr null, ptr %.cachedtype37, align 8, !dbg !2868
  store ptr null, ptr %.cachedtype7, align 8, !dbg !2868
  store ptr null, ptr %.cachedtype, align 8, !dbg !2868
  %3 = icmp eq ptr %1, null, !dbg !2868
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2868
  br i1 %4, label %panic, label %checkok, !dbg !2868

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2869, !DIExpression(), !2870)
    #dbg_declare(ptr %2, !2871, !DIExpression(), !2870)
    #dbg_declare(ptr %start_index, !2872, !DIExpression(), !2873)
  %5 = load ptr, ptr %self, align 8, !dbg !2873
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2873
  %6 = load i64, ptr %ptradd, align 8, !dbg !2873
  store i64 %6, ptr %start_index, align 8, !dbg !2873
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2874
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2874
  %8 = inttoptr i64 %7 to ptr, !dbg !2874
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2868
  %9 = icmp eq ptr %8, %type, !dbg !2868
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !2868

cache_miss:                                       ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2868
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !2868
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.available"), !dbg !2868
  store ptr %11, ptr %.inlinecache, align 8, !dbg !2868
  store ptr %8, ptr %.cachedtype, align 8, !dbg !2868
  br label %12, !dbg !2868

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2868
  br label %12, !dbg !2868

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !2868
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2868
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2868

if.then:                                          ; preds = %12
  br label %loop.cond, !dbg !2875

loop.cond:                                        ; preds = %noerr_block55, %if.then
    #dbg_declare(ptr %available, !2877, !DIExpression(), !2879)
  %ptradd5 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2879
  %13 = load i64, ptr %ptradd5, align 8, !dbg !2879
  %14 = inttoptr i64 %13 to ptr, !dbg !2879
  %type8 = load ptr, ptr %.cachedtype7, align 8, !dbg !2868
  %15 = icmp eq ptr %14, %type8, !dbg !2868
  br i1 %15, label %cache_hit11, label %cache_miss9, !dbg !2868

cache_miss9:                                      ; preds = %loop.cond
  %ptradd10 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !2868
  %16 = load ptr, ptr %ptradd10, align 8, !dbg !2868
  %17 = call ptr @.dyn_search(ptr %16, ptr @"$sel.available"), !dbg !2868
  store ptr %17, ptr %.inlinecache6, align 8, !dbg !2868
  store ptr %14, ptr %.cachedtype7, align 8, !dbg !2868
  br label %18, !dbg !2868

cache_hit11:                                      ; preds = %loop.cond
  %cache_hit_fn12 = load ptr, ptr %.inlinecache6, align 8, !dbg !2868
  br label %18, !dbg !2868

18:                                               ; preds = %cache_hit11, %cache_miss9
  %fn_phi13 = phi ptr [ %cache_hit_fn12, %cache_hit11 ], [ %17, %cache_miss9 ], !dbg !2868
  %19 = icmp eq ptr %fn_phi13, null, !dbg !2868
  br i1 %19, label %missing_function, label %match, !dbg !2868

missing_function:                                 ; preds = %18
  store %"char[]" { ptr @.panic_msg.244, i64 46 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.243, i64 9 }, ptr %indirectarg16, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 84), !dbg !2879
  unreachable, !dbg !2879

match:                                            ; preds = %18
  %21 = load ptr, ptr %2, align 8
  %22 = call i64 %fn_phi13(ptr %retparam, ptr %21), !dbg !2879
  %not_err = icmp eq i64 %22, 0, !dbg !2879
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2879
  br i1 %23, label %after_check, label %assign_optional, !dbg !2879

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var, align 8, !dbg !2879
  br label %guard_block, !dbg !2879

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2879

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !2879
  ret i64 %24, !dbg !2879

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !2879
  store i64 %25, ptr %available, align 8, !dbg !2879
  %26 = load i64, ptr %available, align 8, !dbg !2879
  %intbool = icmp ne i64 %26, 0, !dbg !2879
  br i1 %intbool, label %loop.body, label %loop.exit, !dbg !2879

loop.body:                                        ; preds = %noerr_block
  %27 = load ptr, ptr %self, align 8, !dbg !2880
  %ptradd18 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !2880
  %28 = load i64, ptr %ptradd18, align 8, !dbg !2880
  %29 = load i64, ptr %available, align 8, !dbg !2880
  %add = add i64 %28, %29, !dbg !2880
  %30 = load ptr, ptr %self, align 8, !dbg !2880
  %31 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %30, i64 %add) #5, !dbg !2880
  %not_err19 = icmp eq i64 %31, 0, !dbg !2880
  %32 = call i1 @llvm.expect.i1(i1 %not_err19, i1 true), !dbg !2880
  br i1 %32, label %after_check21, label %assign_optional20, !dbg !2880

assign_optional20:                                ; preds = %loop.body
  store i64 %31, ptr %error_var17, align 8, !dbg !2880
  br label %guard_block22, !dbg !2880

after_check21:                                    ; preds = %loop.body
  br label %noerr_block23, !dbg !2880

guard_block22:                                    ; preds = %assign_optional20
  %33 = load i64, ptr %error_var17, align 8, !dbg !2880
  ret i64 %33, !dbg !2880

noerr_block23:                                    ; preds = %after_check21
    #dbg_declare(ptr %read, !2882, !DIExpression(), !2883)
  %34 = load ptr, ptr %self, align 8, !dbg !2883
  %35 = load %"char[]", ptr %34, align 8, !dbg !2883
  %36 = extractvalue %"char[]" %35, 0, !dbg !2883
  %37 = load ptr, ptr %self, align 8, !dbg !2883
  %ptradd25 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !2883
  %38 = load i64, ptr %ptradd25, align 8, !dbg !2883
  %39 = extractvalue %"char[]" %35, 1, !dbg !2883
  %gt = icmp ugt i64 %38, %39, !dbg !2883
  %40 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2883
  br i1 %40, label %panic26, label %checkok33, !dbg !2883

checkok33:                                        ; preds = %noerr_block23
  %size = sub i64 %39, %38, !dbg !2883
  %ptradd34 = getelementptr inbounds i8, ptr %36, i64 %38, !dbg !2883
  %41 = insertvalue %"char[]" undef, ptr %ptradd34, 0, !dbg !2883
  %42 = insertvalue %"char[]" %41, i64 %size, 1, !dbg !2883
  %ptradd35 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2883
  %43 = load i64, ptr %ptradd35, align 8, !dbg !2883
  %44 = inttoptr i64 %43 to ptr, !dbg !2883
  %type38 = load ptr, ptr %.cachedtype37, align 8, !dbg !2868
  %45 = icmp eq ptr %44, %type38, !dbg !2868
  br i1 %45, label %cache_hit41, label %cache_miss39, !dbg !2868

cache_miss39:                                     ; preds = %checkok33
  %ptradd40 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !2868
  %46 = load ptr, ptr %ptradd40, align 8, !dbg !2868
  %47 = call ptr @.dyn_search(ptr %46, ptr @"$sel.read"), !dbg !2868
  store ptr %47, ptr %.inlinecache36, align 8, !dbg !2868
  store ptr %44, ptr %.cachedtype37, align 8, !dbg !2868
  br label %48, !dbg !2868

cache_hit41:                                      ; preds = %checkok33
  %cache_hit_fn42 = load ptr, ptr %.inlinecache36, align 8, !dbg !2868
  br label %48, !dbg !2868

48:                                               ; preds = %cache_hit41, %cache_miss39
  %fn_phi43 = phi ptr [ %cache_hit_fn42, %cache_hit41 ], [ %47, %cache_miss39 ], !dbg !2868
  %49 = icmp eq ptr %fn_phi43, null, !dbg !2868
  br i1 %49, label %missing_function44, label %match48, !dbg !2868

missing_function44:                               ; preds = %48
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.243, i64 9 }, ptr %indirectarg47, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 87), !dbg !2883
  unreachable, !dbg !2883

match48:                                          ; preds = %48
  %51 = load ptr, ptr %2, align 8
  store %"char[]" %42, ptr %indirectarg50, align 8
  %52 = call i64 %fn_phi43(ptr %retparam49, ptr %51, ptr align 8 %indirectarg50), !dbg !2883
  %not_err51 = icmp eq i64 %52, 0, !dbg !2883
  %53 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !2883
  br i1 %53, label %after_check53, label %assign_optional52, !dbg !2883

assign_optional52:                                ; preds = %match48
  store i64 %52, ptr %error_var24, align 8, !dbg !2883
  br label %guard_block54, !dbg !2883

after_check53:                                    ; preds = %match48
  br label %noerr_block55, !dbg !2883

guard_block54:                                    ; preds = %assign_optional52
  %54 = load i64, ptr %error_var24, align 8, !dbg !2883
  ret i64 %54, !dbg !2883

noerr_block55:                                    ; preds = %after_check53
  %55 = load i64, ptr %retparam49, align 8, !dbg !2883
  store i64 %55, ptr %read, align 8, !dbg !2883
  %56 = load ptr, ptr %self, align 8, !dbg !2884
  %ptradd56 = getelementptr inbounds i8, ptr %56, i64 16, !dbg !2884
  %57 = load i64, ptr %ptradd56, align 8, !dbg !2884
  %58 = load i64, ptr %read, align 8, !dbg !2884
  %add57 = add i64 %57, %58, !dbg !2884
  store i64 %add57, ptr %ptradd56, align 8, !dbg !2884
  br label %loop.cond, !dbg !2884

loop.exit:                                        ; preds = %noerr_block
  %59 = load ptr, ptr %self, align 8, !dbg !2885
  %ptradd58 = getelementptr inbounds i8, ptr %59, i64 16, !dbg !2885
  %60 = load i64, ptr %ptradd58, align 8, !dbg !2885
  %61 = load i64, ptr %start_index, align 8, !dbg !2885
  %sub = sub i64 %60, %61, !dbg !2885
  store i64 %sub, ptr %0, align 8, !dbg !2885
  ret i64 0, !dbg !2885

if.exit:                                          ; preds = %12
  %62 = load ptr, ptr %self, align 8, !dbg !2886
  %ptradd59 = getelementptr inbounds i8, ptr %62, i64 8, !dbg !2886
  %63 = load i64, ptr %ptradd59, align 8, !dbg !2886
  %eq = icmp eq i64 0, %63, !dbg !2886
  br i1 %eq, label %if.then60, label %if.exit67, !dbg !2886

if.then60:                                        ; preds = %if.exit
  %64 = load ptr, ptr %self, align 8, !dbg !2887
  %65 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %64, i64 16) #5, !dbg !2887
  %not_err62 = icmp eq i64 %65, 0, !dbg !2887
  %66 = call i1 @llvm.expect.i1(i1 %not_err62, i1 true), !dbg !2887
  br i1 %66, label %after_check64, label %assign_optional63, !dbg !2887

assign_optional63:                                ; preds = %if.then60
  store i64 %65, ptr %error_var61, align 8, !dbg !2887
  br label %guard_block65, !dbg !2887

after_check64:                                    ; preds = %if.then60
  br label %noerr_block66, !dbg !2887

guard_block65:                                    ; preds = %assign_optional63
  %67 = load i64, ptr %error_var61, align 8, !dbg !2887
  ret i64 %67, !dbg !2887

noerr_block66:                                    ; preds = %after_check64
  br label %if.exit67, !dbg !2887

if.exit67:                                        ; preds = %noerr_block66, %if.exit
  br label %loop.body68, !dbg !2889

loop.body68:                                      ; preds = %if.exit129, %if.exit67
    #dbg_declare(ptr %len_to_read, !2890, !DIExpression(), !2893)
  %68 = load ptr, ptr %self, align 8, !dbg !2893
  %ptradd69 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !2893
  %69 = load i64, ptr %ptradd69, align 8, !dbg !2893
  %70 = load ptr, ptr %self, align 8, !dbg !2893
  %ptradd70 = getelementptr inbounds i8, ptr %70, i64 16, !dbg !2893
  %71 = load i64, ptr %ptradd70, align 8, !dbg !2893
  %sub71 = sub i64 %69, %71, !dbg !2893
  store i64 %sub71, ptr %len_to_read, align 8, !dbg !2893
  %72 = load i64, ptr %len_to_read, align 8, !dbg !2894
  %gt72 = icmp ugt i64 16, %72, !dbg !2894
  br i1 %gt72, label %if.then73, label %if.exit84, !dbg !2894

if.then73:                                        ; preds = %loop.body68
  %73 = load ptr, ptr %self, align 8, !dbg !2895
  %ptradd75 = getelementptr inbounds i8, ptr %73, i64 8, !dbg !2895
  %74 = load i64, ptr %ptradd75, align 8, !dbg !2895
  %mul = mul i64 %74, 2, !dbg !2895
  %75 = load ptr, ptr %self, align 8, !dbg !2895
  %76 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %75, i64 %mul) #5, !dbg !2895
  %not_err76 = icmp eq i64 %76, 0, !dbg !2895
  %77 = call i1 @llvm.expect.i1(i1 %not_err76, i1 true), !dbg !2895
  br i1 %77, label %after_check78, label %assign_optional77, !dbg !2895

assign_optional77:                                ; preds = %if.then73
  store i64 %76, ptr %error_var74, align 8, !dbg !2895
  br label %guard_block79, !dbg !2895

after_check78:                                    ; preds = %if.then73
  br label %noerr_block80, !dbg !2895

guard_block79:                                    ; preds = %assign_optional77
  %78 = load i64, ptr %error_var74, align 8, !dbg !2895
  ret i64 %78, !dbg !2895

noerr_block80:                                    ; preds = %after_check78
  %79 = load ptr, ptr %self, align 8, !dbg !2897
  %ptradd81 = getelementptr inbounds i8, ptr %79, i64 8, !dbg !2897
  %80 = load i64, ptr %ptradd81, align 8, !dbg !2897
  %81 = load ptr, ptr %self, align 8, !dbg !2897
  %ptradd82 = getelementptr inbounds i8, ptr %81, i64 16, !dbg !2897
  %82 = load i64, ptr %ptradd82, align 8, !dbg !2897
  %sub83 = sub i64 %80, %82, !dbg !2897
  store i64 %sub83, ptr %len_to_read, align 8, !dbg !2897
  br label %if.exit84, !dbg !2897

if.exit84:                                        ; preds = %noerr_block80, %loop.body68
    #dbg_declare(ptr %read85, !2898, !DIExpression(), !2899)
  %83 = load ptr, ptr %self, align 8, !dbg !2899
  %84 = load %"char[]", ptr %83, align 8, !dbg !2899
  %85 = extractvalue %"char[]" %84, 0, !dbg !2899
  %86 = load ptr, ptr %self, align 8, !dbg !2899
  %ptradd87 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !2899
  %87 = load i64, ptr %ptradd87, align 8, !dbg !2899
  %88 = extractvalue %"char[]" %84, 1, !dbg !2899
  %gt88 = icmp ugt i64 %87, %88, !dbg !2899
  %89 = call i1 @llvm.expect.i1(i1 %gt88, i1 false), !dbg !2899
  br i1 %89, label %panic89, label %checkok99, !dbg !2899

checkok99:                                        ; preds = %if.exit84
  %size100 = sub i64 %88, %87, !dbg !2899
  %ptradd101 = getelementptr inbounds i8, ptr %85, i64 %87, !dbg !2899
  %90 = insertvalue %"char[]" undef, ptr %ptradd101, 0, !dbg !2899
  %91 = insertvalue %"char[]" %90, i64 %size100, 1, !dbg !2899
  %ptradd102 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2899
  %92 = load i64, ptr %ptradd102, align 8, !dbg !2899
  %93 = inttoptr i64 %92 to ptr, !dbg !2899
  %type105 = load ptr, ptr %.cachedtype104, align 8, !dbg !2868
  %94 = icmp eq ptr %93, %type105, !dbg !2868
  br i1 %94, label %cache_hit108, label %cache_miss106, !dbg !2868

cache_miss106:                                    ; preds = %checkok99
  %ptradd107 = getelementptr inbounds i8, ptr %93, i64 16, !dbg !2868
  %95 = load ptr, ptr %ptradd107, align 8, !dbg !2868
  %96 = call ptr @.dyn_search(ptr %95, ptr @"$sel.read"), !dbg !2868
  store ptr %96, ptr %.inlinecache103, align 8, !dbg !2868
  store ptr %93, ptr %.cachedtype104, align 8, !dbg !2868
  br label %97, !dbg !2868

cache_hit108:                                     ; preds = %checkok99
  %cache_hit_fn109 = load ptr, ptr %.inlinecache103, align 8, !dbg !2868
  br label %97, !dbg !2868

97:                                               ; preds = %cache_hit108, %cache_miss106
  %fn_phi110 = phi ptr [ %cache_hit_fn109, %cache_hit108 ], [ %96, %cache_miss106 ], !dbg !2868
  %98 = icmp eq ptr %fn_phi110, null, !dbg !2868
  br i1 %98, label %missing_function111, label %match115, !dbg !2868

missing_function111:                              ; preds = %97
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg112, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg113, align 8
  store %"char[]" { ptr @.func.243, i64 9 }, ptr %indirectarg114, align 8
  %99 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %99(ptr align 8 %indirectarg112, ptr align 8 %indirectarg113, ptr align 8 %indirectarg114, i32 107), !dbg !2899
  unreachable, !dbg !2899

match115:                                         ; preds = %97
  %100 = load ptr, ptr %2, align 8
  store %"char[]" %91, ptr %indirectarg117, align 8
  %101 = call i64 %fn_phi110(ptr %retparam116, ptr %100, ptr align 8 %indirectarg117), !dbg !2899
  %not_err118 = icmp eq i64 %101, 0, !dbg !2899
  %102 = call i1 @llvm.expect.i1(i1 %not_err118, i1 true), !dbg !2899
  br i1 %102, label %after_check120, label %assign_optional119, !dbg !2899

assign_optional119:                               ; preds = %match115
  store i64 %101, ptr %error_var86, align 8, !dbg !2899
  br label %guard_block121, !dbg !2899

after_check120:                                   ; preds = %match115
  br label %noerr_block122, !dbg !2899

guard_block121:                                   ; preds = %assign_optional119
  %103 = load i64, ptr %error_var86, align 8, !dbg !2899
  ret i64 %103, !dbg !2899

noerr_block122:                                   ; preds = %after_check120
  %104 = load i64, ptr %retparam116, align 8, !dbg !2899
  store i64 %104, ptr %read85, align 8, !dbg !2899
  %105 = load ptr, ptr %self, align 8, !dbg !2900
  %ptradd123 = getelementptr inbounds i8, ptr %105, i64 16, !dbg !2900
  %106 = load i64, ptr %ptradd123, align 8, !dbg !2900
  %107 = load i64, ptr %read85, align 8, !dbg !2900
  %add124 = add i64 %106, %107, !dbg !2900
  store i64 %add124, ptr %ptradd123, align 8, !dbg !2900
  %108 = load i64, ptr %read85, align 8, !dbg !2901
  %109 = load i64, ptr %len_to_read, align 8, !dbg !2901
  %lt = icmp ult i64 %108, %109, !dbg !2901
  br i1 %lt, label %if.then125, label %if.exit129, !dbg !2901

if.then125:                                       ; preds = %noerr_block122
  %110 = load ptr, ptr %self, align 8, !dbg !2901
  %ptradd127 = getelementptr inbounds i8, ptr %110, i64 16, !dbg !2901
  %111 = load i64, ptr %ptradd127, align 8, !dbg !2901
  %112 = load i64, ptr %start_index, align 8, !dbg !2901
  %sub128 = sub i64 %111, %112, !dbg !2901
  store i64 %sub128, ptr %0, align 8, !dbg !2901
  ret i64 0, !dbg !2901

if.exit129:                                       ; preds = %noerr_block122
  br label %loop.body68, !dbg !2901

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.243, i64 9 }, ptr %indirectarg2, align 8
  %113 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %113(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79), !dbg !2870
  unreachable, !dbg !2870

panic26:                                          ; preds = %noerr_block23
  store i64 %39, ptr %taddr, align 8
  %114 = insertvalue %any undef, ptr %taddr, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %38, ptr %taddr27, align 8
  %116 = insertvalue %any undef, ptr %taddr27, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.243, i64 9 }, ptr %indirectarg30, align 8
  store %any %115, ptr %varargslots, align 16
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %117, ptr %ptradd31, align 16
  %118 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %118, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg32, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 87, ptr align 8 %indirectarg32), !dbg !2883
  unreachable, !dbg !2883

panic89:                                          ; preds = %if.exit84
  store i64 %88, ptr %taddr90, align 8
  %119 = insertvalue %any undef, ptr %taddr90, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr91, align 8
  %121 = insertvalue %any undef, ptr %taddr91, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.238, i64 13 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.243, i64 9 }, ptr %indirectarg94, align 8
  store %any %120, ptr %varargslots95, align 16
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %122, ptr %ptradd96, align 16
  %123 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp97", ptr %indirectarg98, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 107, ptr align 8 %indirectarg98), !dbg !2899
  unreachable, !dbg !2899
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.LimitReader.init(ptr %0, ptr align 8 %1, i64 %2) #0 comdat !dbg !2902 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %limit = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %.assign_list = alloca %LimitReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !2911
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2911
  br i1 %4, label %panic, label %checkok, !dbg !2911

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2912, !DIExpression(), !2913)
    #dbg_declare(ptr %1, !2914, !DIExpression(), !2913)
  store i64 %2, ptr %limit, align 8
    #dbg_declare(ptr %limit, !2915, !DIExpression(), !2913)
  %5 = load ptr, ptr %self, align 8, !dbg !2916
  %checknull = icmp eq ptr %5, null, !dbg !2916
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2916
  br i1 %6, label %panic3, label %checkok7, !dbg !2916

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !2916
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !2916
  %7 = load i64, ptr %limit, align 8, !dbg !2916
  store i64 %7, ptr %ptradd, align 8, !dbg !2916
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !2916
  %8 = load ptr, ptr %self, align 8, !dbg !2917
  ret ptr %8, !dbg !2917

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 13), !dbg !2913
  unreachable, !dbg !2913

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 15), !dbg !2916
  unreachable, !dbg !2916
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.close(ptr %0) #0 comdat !dbg !2918 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !2921
  store ptr null, ptr %.cachedtype, align 8, !dbg !2921
  %1 = icmp eq ptr %0, null, !dbg !2921
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2921
  br i1 %2, label %panic, label %checkok, !dbg !2921

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2922, !DIExpression(), !2923)
  %3 = load ptr, ptr %self, align 8, !dbg !2924
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !2924
  %4 = load i64, ptr %ptradd, align 8, !dbg !2924
  %5 = inttoptr i64 %4 to ptr, !dbg !2924
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2921
  %6 = icmp eq ptr %5, %type, !dbg !2921
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !2921

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2921
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !2921
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !2921
  store ptr %8, ptr %.inlinecache, align 8, !dbg !2921
  store ptr %5, ptr %.cachedtype, align 8, !dbg !2921
  br label %9, !dbg !2921

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2921
  br label %9, !dbg !2921

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !2921
  %i2b = icmp ne ptr %fn_phi, null, !dbg !2921
  br i1 %i2b, label %if.then, label %if.exit, !dbg !2921

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !2924
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2924
  %11 = load i64, ptr %ptradd4, align 8, !dbg !2924
  %12 = inttoptr i64 %11 to ptr, !dbg !2924
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !2921
  %13 = icmp eq ptr %12, %type7, !dbg !2921
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !2921

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2921
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !2921
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !2921
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !2921
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !2921
  br label %16, !dbg !2921

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !2921
  br label %16, !dbg !2921

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !2921
  %17 = icmp eq ptr %fn_phi12, null, !dbg !2921
  br i1 %17, label %missing_function, label %match, !dbg !2921

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.206, i64 42 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg15, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 21), !dbg !2924
  unreachable, !dbg !2924

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !2924
  %20 = call i64 %fn_phi12(ptr %19), !dbg !2924
  %not_err = icmp eq i64 %20, 0, !dbg !2924
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2924
  br i1 %21, label %after_check, label %assign_optional, !dbg !2924

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !2924
  br label %err_retblock, !dbg !2924

after_check:                                      ; preds = %match
  ret i64 0, !dbg !2924

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !2924
  ret i64 %22, !dbg !2924

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !2924

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 19), !dbg !2923
  unreachable, !dbg !2923
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !2925 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg11 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2928
  %3 = icmp eq ptr %1, null, !dbg !2928
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2928
  br i1 %4, label %panic, label %checkok, !dbg !2928

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2929, !DIExpression(), !2930)
    #dbg_declare(ptr %2, !2931, !DIExpression(), !2930)
  %5 = load ptr, ptr %self, align 8, !dbg !2932
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !2932
  %6 = load i64, ptr %ptradd, align 8, !dbg !2932
  %eq = icmp eq i64 0, %6, !dbg !2932
  br i1 %eq, label %if.then, label %if.exit, !dbg !2932

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2932

if.exit:                                          ; preds = %checkok
    #dbg_declare(ptr %m, !2933, !DIExpression(), !2934)
  %ptradd3 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !2934
  %7 = load i64, ptr %ptradd3, align 8
  store i64 %7, ptr %x, align 8
  %8 = load ptr, ptr %self, align 8, !dbg !2934
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2934
  %9 = load i64, ptr %ptradd4, align 8
  store i64 %9, ptr %.anon, align 8
  %10 = load i64, ptr %x, align 8
  store i64 %10, ptr %a, align 8
  %11 = load i64, ptr %.anon, align 8
  store i64 %11, ptr %b, align 8
  %12 = load i64, ptr %a, align 8, !dbg !2935
  %13 = load i64, ptr %b, align 8, !dbg !2935
  %lt = icmp ult i64 %12, %13, !dbg !2935
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !2935

cond.lhs:                                         ; preds = %if.exit
  %14 = load i64, ptr %x, align 8, !dbg !2937
  br label %cond.phi, !dbg !2937

cond.rhs:                                         ; preds = %if.exit
  %15 = load i64, ptr %.anon, align 8, !dbg !2937
  br label %cond.phi, !dbg !2937

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %14, %cond.lhs ], [ %15, %cond.rhs ], !dbg !2937
  store i64 %val, ptr %m, align 8, !dbg !2937
    #dbg_declare(ptr %n, !2939, !DIExpression(), !2940)
  %16 = load ptr, ptr %self, align 8, !dbg !2940
  %17 = load %"char[]", ptr %2, align 8, !dbg !2940
  %18 = extractvalue %"char[]" %17, 0, !dbg !2940
  %19 = extractvalue %"char[]" %17, 1, !dbg !2940
  %gt = icmp ugt i64 0, %19, !dbg !2940
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2940
  br i1 %20, label %panic5, label %checkok12, !dbg !2940

checkok12:                                        ; preds = %cond.phi
  %21 = load i64, ptr %m, align 8, !dbg !2940
  %add = add i64 0, %21, !dbg !2940
  %lt13 = icmp ult i64 %19, %add, !dbg !2940
  %sub = sub i64 %add, 1, !dbg !2940
  %22 = call i1 @llvm.expect.i1(i1 %lt13, i1 false), !dbg !2940
  br i1 %22, label %panic14, label %checkok24, !dbg !2940

checkok24:                                        ; preds = %checkok12
  %size = sub i64 %add, 0, !dbg !2940
  %23 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !2940
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !2940
  %ptradd25 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !2940
  %25 = load i64, ptr %ptradd25, align 8, !dbg !2940
  %26 = inttoptr i64 %25 to ptr, !dbg !2940
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2928
  %27 = icmp eq ptr %26, %type, !dbg !2928
  br i1 %27, label %cache_hit, label %cache_miss, !dbg !2928

cache_miss:                                       ; preds = %checkok24
  %ptradd26 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !2928
  %28 = load ptr, ptr %ptradd26, align 8, !dbg !2928
  %29 = call ptr @.dyn_search(ptr %28, ptr @"$sel.read"), !dbg !2928
  store ptr %29, ptr %.inlinecache, align 8, !dbg !2928
  store ptr %26, ptr %.cachedtype, align 8, !dbg !2928
  br label %30, !dbg !2928

cache_hit:                                        ; preds = %checkok24
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2928
  br label %30, !dbg !2928

30:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %29, %cache_miss ], !dbg !2928
  %31 = icmp eq ptr %fn_phi, null, !dbg !2928
  br i1 %31, label %missing_function, label %match, !dbg !2928

missing_function:                                 ; preds = %30
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg29, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 29), !dbg !2940
  unreachable, !dbg !2940

match:                                            ; preds = %30
  %33 = load ptr, ptr %16, align 8
  store %"char[]" %24, ptr %indirectarg30, align 8
  %34 = call i64 %fn_phi(ptr %retparam, ptr %33, ptr align 8 %indirectarg30), !dbg !2940
  %not_err = icmp eq i64 %34, 0, !dbg !2940
  %35 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2940
  br i1 %35, label %after_check, label %assign_optional, !dbg !2940

assign_optional:                                  ; preds = %match
  store i64 %34, ptr %error_var, align 8, !dbg !2940
  br label %guard_block, !dbg !2940

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !2940

guard_block:                                      ; preds = %assign_optional
  %36 = load i64, ptr %error_var, align 8, !dbg !2940
  ret i64 %36, !dbg !2940

noerr_block:                                      ; preds = %after_check
  %37 = load i64, ptr %retparam, align 8, !dbg !2940
  store i64 %37, ptr %n, align 8, !dbg !2940
  %38 = load ptr, ptr %self, align 8, !dbg !2941
  %ptradd31 = getelementptr inbounds i8, ptr %38, i64 16, !dbg !2941
  %39 = load i64, ptr %ptradd31, align 8, !dbg !2941
  %40 = load i64, ptr %n, align 8, !dbg !2941
  %sub32 = sub i64 %39, %40, !dbg !2941
  store i64 %sub32, ptr %ptradd31, align 8, !dbg !2941
  %41 = load i64, ptr %n, align 8, !dbg !2942
  store i64 %41, ptr %0, align 8, !dbg !2942
  ret i64 0, !dbg !2942

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg2, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 25), !dbg !2930
  unreachable, !dbg !2930

panic5:                                           ; preds = %cond.phi
  store i64 %19, ptr %taddr, align 8
  %43 = insertvalue %any undef, ptr %taddr, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %45 = insertvalue %any undef, ptr %taddr6, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg9, align 8
  store %any %44, ptr %varargslots, align 16
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %46, ptr %ptradd10, align 16
  %47 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %47, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg11, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 29, ptr align 8 %indirectarg11), !dbg !2940
  unreachable, !dbg !2940

panic14:                                          ; preds = %checkok12
  store i64 %sub, ptr %taddr15, align 8
  %48 = insertvalue %any undef, ptr %taddr15, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr16, align 8
  %50 = insertvalue %any undef, ptr %taddr16, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg19, align 8
  store %any %49, ptr %varargslots20, align 16
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %51, ptr %ptradd21, align 16
  %52 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %52, i64 2, 1
  store %"any[]" %"$$temp22", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 29, ptr align 8 %indirectarg23), !dbg !2940
  unreachable, !dbg !2940
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !2943 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !2946
  %2 = icmp eq ptr %1, null, !dbg !2946
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2946
  br i1 %3, label %panic, label %checkok, !dbg !2946

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2947, !DIExpression(), !2948)
  %4 = load ptr, ptr %self, align 8, !dbg !2949
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2949
  %5 = load i64, ptr %ptradd, align 8, !dbg !2949
  %eq = icmp eq i64 0, %5, !dbg !2949
  br i1 %eq, label %if.then, label %if.exit, !dbg !2949

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !2949

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !2950
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2950
  %7 = load i64, ptr %ptradd3, align 8, !dbg !2950
  %8 = inttoptr i64 %7 to ptr, !dbg !2950
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2946
  %9 = icmp eq ptr %8, %type, !dbg !2946
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !2946

cache_miss:                                       ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2946
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !2946
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read_byte"), !dbg !2946
  store ptr %11, ptr %.inlinecache, align 8, !dbg !2946
  store ptr %8, ptr %.cachedtype, align 8, !dbg !2946
  br label %12, !dbg !2946

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2946
  br label %12, !dbg !2946

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !2946
  %13 = icmp eq ptr %fn_phi, null, !dbg !2946
  br i1 %13, label %missing_function, label %match, !dbg !2946

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.41, i64 46 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg7, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 38), !dbg !2950
  unreachable, !dbg !2950

match:                                            ; preds = %12
  %15 = load ptr, ptr %6, align 8
  %16 = call i64 %fn_phi(ptr %retparam, ptr %15), !dbg !2950
  %not_err = icmp eq i64 %16, 0, !dbg !2950
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2950
  br i1 %17, label %after_check, label %assign_optional, !dbg !2950

assign_optional:                                  ; preds = %match
  store i64 %16, ptr %reterr, align 8, !dbg !2950
  br label %err_retblock, !dbg !2950

after_check:                                      ; preds = %match
  %18 = load i8, ptr %retparam, align 1, !dbg !2950
  %19 = load ptr, ptr %self, align 8, !dbg !2951
  %ptradd8 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2951
  %20 = load i64, ptr %ptradd8, align 8, !dbg !2951
  %sub = sub i64 %20, 1, !dbg !2951
  store i64 %sub, ptr %ptradd8, align 8, !dbg !2951
  store i8 %18, ptr %0, align 1, !dbg !2951
  ret i64 0, !dbg !2951

err_retblock:                                     ; preds = %assign_optional
  %21 = load i64, ptr %reterr, align 8, !dbg !2951
  ret i64 %21, !dbg !2951

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34), !dbg !2948
  unreachable, !dbg !2948
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.LimitReader.available(ptr %0, ptr %1) #0 comdat !dbg !2953 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !2956
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2956
  br i1 %3, label %panic, label %checkok, !dbg !2956

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !2957, !DIExpression(), !2958)
  %4 = load ptr, ptr %self, align 8, !dbg !2959
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !2959
  %5 = load i64, ptr %ptradd, align 8, !dbg !2959
  store i64 %5, ptr %0, align 8, !dbg !2959
  ret i64 0, !dbg !2959

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.245, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.229, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41), !dbg !2958
  unreachable, !dbg !2958
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiReader.new_init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !2960 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator7 = alloca %any, align 8
  %elements8 = alloca i64, align 8
  %allocator9 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg19 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr45 = alloca %"any[]", align 8
  %taddr47 = alloca %"any[]", align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca i64, align 8
  %indirectarg52 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %varargslots55 = alloca [2 x %any], align 16
  %indirectarg58 = alloca %"any[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %.assign_list = alloca %MultiReader, align 8
  %indirectarg69 = alloca %"char[]", align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !2975
  %3 = icmp eq ptr %0, null, !dbg !2975
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2975
  br i1 %4, label %panic, label %checkok, !dbg !2975

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2976, !DIExpression(), !2977)
    #dbg_declare(ptr %1, !2978, !DIExpression(), !2977)
    #dbg_declare(ptr %2, !2979, !DIExpression(), !2977)
  %5 = load ptr, ptr %self, align 8, !dbg !2980
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !2980
  %6 = load i64, ptr %ptradd, align 8, !dbg !2980
  %eq = icmp eq i64 0, %6, !dbg !2980
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !2980

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.247, i64 90 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg5, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 18), !dbg !2980
  unreachable, !dbg !2980

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %copy, !2982, !DIExpression(), !2983)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %ptradd6 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2983
  %8 = load i64, ptr %ptradd6, align 8
  store i64 %8, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator7, ptr align 8 %allocator, i32 16, i1 false)
  %9 = load i64, ptr %elements, align 8
  store i64 %9, ptr %elements8, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator9, ptr align 8 %allocator7, i32 16, i1 false)
  %10 = load i64, ptr %elements8, align 8, !dbg !2984
  %mul = mul i64 16, %10, !dbg !2984
  store i64 %mul, ptr %size, align 8
  %11 = load i64, ptr %size, align 8, !dbg !2988
  %i2nb = icmp eq i64 %11, 0, !dbg !2988
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2988

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !2988
  br label %expr_block.exit, !dbg !2988

if.exit:                                          ; preds = %assert_ok
  %ptradd10 = getelementptr inbounds i8, ptr %allocator9, i64 8, !dbg !2990
  %12 = load i64, ptr %ptradd10, align 8, !dbg !2990
  %13 = inttoptr i64 %12 to ptr, !dbg !2990
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !2975
  %14 = icmp eq ptr %13, %type, !dbg !2975
  br i1 %14, label %cache_hit, label %cache_miss, !dbg !2975

cache_miss:                                       ; preds = %if.exit
  %ptradd11 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !2975
  %15 = load ptr, ptr %ptradd11, align 8, !dbg !2975
  %16 = call ptr @.dyn_search(ptr %15, ptr @"$sel.acquire"), !dbg !2975
  store ptr %16, ptr %.inlinecache, align 8, !dbg !2975
  store ptr %13, ptr %.cachedtype, align 8, !dbg !2975
  br label %17, !dbg !2975

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !2975
  br label %17, !dbg !2975

17:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %16, %cache_miss ], !dbg !2975
  %18 = icmp eq ptr %fn_phi, null, !dbg !2975
  br i1 %18, label %missing_function, label %match, !dbg !2975

missing_function:                                 ; preds = %17
  store %"char[]" { ptr @.panic_msg.231, i64 44 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg14, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 80), !dbg !2992
  unreachable, !dbg !2992

match:                                            ; preds = %17
  %20 = load ptr, ptr %allocator9, align 8
  %21 = load i64, ptr %size, align 8
  %22 = call i64 %fn_phi(ptr %retparam, ptr %20, i64 %21, i32 1, i64 0), !dbg !2992
  %not_err = icmp eq i64 %22, 0, !dbg !2992
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2992
  br i1 %23, label %after_check, label %assign_optional, !dbg !2992

assign_optional:                                  ; preds = %match
  store i64 %22, ptr %error_var, align 8, !dbg !2992
  br label %panic_block, !dbg !2992

after_check:                                      ; preds = %match
  %24 = load ptr, ptr %retparam, align 8, !dbg !2992
  store ptr %24, ptr %blockret, align 8, !dbg !2992
  br label %expr_block.exit, !dbg !2992

expr_block.exit:                                  ; preds = %after_check, %if.then
  %25 = load ptr, ptr %blockret, align 8, !dbg !2992
  store ptr %25, ptr %taddr, align 8
  %26 = load ptr, ptr %taddr, align 8
  %27 = load i64, ptr %elements8, align 8, !dbg !2984
  %add = add i64 0, %27, !dbg !2984
  %size15 = sub i64 %add, 0, !dbg !2984
  %28 = insertvalue %"any[]" undef, ptr %26, 0, !dbg !2984
  %29 = insertvalue %"any[]" %28, i64 %size15, 1, !dbg !2984
  br label %noerr_block, !dbg !2984

panic_block:                                      ; preds = %assign_optional
  %30 = insertvalue %any undef, ptr %error_var, 0, !dbg !2984
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !2984
  store %"char[]" { ptr @.panic_msg.98, i64 36 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg18, align 8
  store %any %31, ptr %varargslots, align 16
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg19, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 244, ptr align 8 %indirectarg19), !dbg !2986
  unreachable, !dbg !2986

noerr_block:                                      ; preds = %expr_block.exit
  store %"any[]" %29, ptr %copy, align 8, !dbg !2986
  %33 = load %"any[]", ptr %1, align 8, !dbg !2993
  %34 = extractvalue %"any[]" %33, 0, !dbg !2993
  %35 = extractvalue %"any[]" %33, 1, !dbg !2993
  %gt = icmp ugt i64 0, %35, !dbg !2993
  %36 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2993
  br i1 %36, label %panic20, label %checkok30, !dbg !2993

checkok30:                                        ; preds = %noerr_block
  %size31 = sub i64 %35, 0, !dbg !2993
  %37 = insertvalue %"any[]" undef, ptr %34, 0, !dbg !2993
  %38 = insertvalue %"any[]" %37, i64 %size31, 1, !dbg !2993
  %39 = load %"any[]", ptr %copy, align 8, !dbg !2993
  %40 = extractvalue %"any[]" %39, 0, !dbg !2993
  %41 = extractvalue %"any[]" %39, 1, !dbg !2993
  %gt32 = icmp ugt i64 0, %41, !dbg !2993
  %42 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !2993
  br i1 %42, label %panic33, label %checkok43, !dbg !2993

checkok43:                                        ; preds = %checkok30
  %size44 = sub i64 %41, 0, !dbg !2993
  %43 = insertvalue %"any[]" undef, ptr %40, 0, !dbg !2993
  %44 = insertvalue %"any[]" %43, i64 %size44, 1, !dbg !2993
  %45 = extractvalue %"any[]" %44, 0, !dbg !2993
  %46 = extractvalue %"any[]" %38, 0, !dbg !2993
  store %"any[]" %38, ptr %taddr45, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %taddr45, i64 8
  %47 = load i64, ptr %ptradd46, align 8
  store %"any[]" %44, ptr %taddr47, align 8
  %ptradd48 = getelementptr inbounds i8, ptr %taddr47, i64 8
  %48 = load i64, ptr %ptradd48, align 8
  %neq = icmp ne i64 %48, %47
  %49 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %49, label %panic49, label %checkok59

checkok59:                                        ; preds = %checkok43
  %50 = mul i64 %47, 16, !dbg !2993
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %45, ptr align 8 %46, i64 %50, i1 false), !dbg !2993
  %51 = load ptr, ptr %self, align 8, !dbg !2994
  %checknull = icmp eq ptr %51, null, !dbg !2994
  %52 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2994
  br i1 %52, label %panic60, label %checkok64, !dbg !2994

checkok64:                                        ; preds = %checkok59
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !2994
  %ptradd65 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !2994
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd65, ptr align 8 %2, i32 16, i1 false), !dbg !2994
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %51, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !2994
  %53 = load ptr, ptr %self, align 8, !dbg !2995
  %54 = load ptr, ptr %self, align 8, !dbg !2996
  %ptradd66 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !2996
  %55 = load i64, ptr %ptradd66, align 8, !dbg !2996
  %eq67 = icmp eq i64 0, %55, !dbg !2996
  br i1 %eq67, label %assert_ok72, label %assert_fail68, !dbg !2996

assert_fail68:                                    ; preds = %checkok64
  store %"char[]" { ptr @.panic_msg.240, i64 35 }, ptr %indirectarg69, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg71, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56(ptr align 8 %indirectarg69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, i32 19), !dbg !2996
  unreachable, !dbg !2996

assert_ok72:                                      ; preds = %checkok64
  ret ptr %53, !dbg !2996

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg2, align 8
  %57 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %57(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 21), !dbg !2977
  unreachable, !dbg !2977

panic20:                                          ; preds = %noerr_block
  store i64 %35, ptr %taddr21, align 8
  %58 = insertvalue %any undef, ptr %taddr21, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr22, align 8
  %60 = insertvalue %any undef, ptr %taddr22, 0
  %61 = insertvalue %any %60, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg25, align 8
  store %any %59, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %61, ptr %ptradd27, align 16
  %62 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %62, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 24, ptr align 8 %indirectarg29), !dbg !2993
  unreachable, !dbg !2993

panic33:                                          ; preds = %checkok30
  store i64 %41, ptr %taddr34, align 8
  %63 = insertvalue %any undef, ptr %taddr34, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %65 = insertvalue %any undef, ptr %taddr35, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg38, align 8
  store %any %64, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %66, ptr %ptradd40, align 16
  %67 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %67, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 24, ptr align 8 %indirectarg42), !dbg !2993
  unreachable, !dbg !2993

panic49:                                          ; preds = %checkok43
  store i64 %48, ptr %taddr50, align 8
  %68 = insertvalue %any undef, ptr %taddr50, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %47, ptr %taddr51, align 8
  %70 = insertvalue %any undef, ptr %taddr51, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg52, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg54, align 8
  store %any %69, ptr %varargslots55, align 16
  %ptradd56 = getelementptr inbounds i8, ptr %varargslots55, i64 16
  store %any %71, ptr %ptradd56, align 16
  %72 = insertvalue %"any[]" undef, ptr %varargslots55, 0
  %"$$temp57" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp57", ptr %indirectarg58, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg52, ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, i32 24, ptr align 8 %indirectarg58), !dbg !2993
  unreachable, !dbg !2993

panic60:                                          ; preds = %checkok59
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg63, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 25), !dbg !2994
  unreachable, !dbg !2994
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiReader.temp_init(ptr %0, ptr align 8 %1) #0 comdat !dbg !2997 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"any[]", align 8
  %indirectarg7 = alloca %any, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3000
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3000
  br i1 %3, label %panic, label %checkok, !dbg !3000

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3001, !DIExpression(), !3002)
    #dbg_declare(ptr %1, !3003, !DIExpression(), !3002)
  %4 = load ptr, ptr %self, align 8, !dbg !3004
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !3004
  %5 = load i64, ptr %ptradd, align 8, !dbg !3004
  %eq = icmp eq i64 0, %5, !dbg !3004
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !3004

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.247, i64 90 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 31), !dbg !3004
  unreachable, !dbg !3004

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3006
  %i2nb = icmp eq ptr %7, null, !dbg !3006
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3006

if.then:                                          ; preds = %assert_ok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !3009
  br label %if.exit, !dbg !3009

if.exit:                                          ; preds = %if.then, %assert_ok
  %8 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3011
  %9 = insertvalue %any undef, ptr %8, 0, !dbg !3008
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !3008
  %11 = load ptr, ptr %self, align 8, !dbg !3008
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg6, ptr align 8 %1, i32 16, i1 false)
  store %any %10, ptr %indirectarg7, align 8
  %12 = call ptr @std.io.MultiReader.new_init(ptr %11, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7), !dbg !3008
  %13 = load ptr, ptr %self, align 8, !dbg !3012
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3012
  %14 = load i64, ptr %ptradd8, align 8, !dbg !3012
  %eq9 = icmp eq i64 0, %14, !dbg !3012
  br i1 %eq9, label %assert_ok14, label %assert_fail10, !dbg !3012

assert_fail10:                                    ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.240, i64 35 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg13, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 32), !dbg !3012
  unreachable, !dbg !3012

assert_ok14:                                      ; preds = %if.exit
  ret ptr %12, !dbg !3012

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg2, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34), !dbg !3002
  unreachable, !dbg !3002
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.MultiReader.free(ptr %0) #0 comdat !dbg !3013 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3016
  %1 = icmp eq ptr %0, null, !dbg !3016
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3016
  br i1 %2, label %panic, label %checkok, !dbg !3016

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3017, !DIExpression(), !3018)
  %3 = load ptr, ptr %self, align 8, !dbg !3019
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !3019
  %4 = load ptr, ptr %ptradd, align 8, !dbg !3019
  %i2nb = icmp eq ptr %4, null, !dbg !3019
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3019

if.then:                                          ; preds = %checkok
  ret void, !dbg !3019

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !3020
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !3020
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd3, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !3020
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !3021
  %i2nb4 = icmp eq ptr %8, null, !dbg !3021
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !3021

if.then5:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !3021

if.exit6:                                         ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3023
  %9 = load i64, ptr %ptradd7, align 8, !dbg !3023
  %10 = inttoptr i64 %9 to ptr, !dbg !3023
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3016
  %11 = icmp eq ptr %10, %type, !dbg !3016
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !3016

cache_miss:                                       ; preds = %if.exit6
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !3016
  %12 = load ptr, ptr %ptradd8, align 8, !dbg !3016
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !3016
  store ptr %13, ptr %.inlinecache, align 8, !dbg !3016
  store ptr %10, ptr %.cachedtype, align 8, !dbg !3016
  br label %14, !dbg !3016

cache_hit:                                        ; preds = %if.exit6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3016
  br label %14, !dbg !3016

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !3016
  %15 = icmp eq ptr %fn_phi, null, !dbg !3016
  br i1 %15, label %missing_function, label %match, !dbg !3016

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg11, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 105), !dbg !3023
  unreachable, !dbg !3023

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator, align 8, !dbg !3023
  %18 = load ptr, ptr %ptr, align 8, !dbg !3023
  call void %fn_phi(ptr %17, ptr %18, i8 zeroext 0), !dbg !3023
  br label %expr_block.exit, !dbg !3023

expr_block.exit:                                  ; preds = %match, %if.then5
  %19 = load ptr, ptr %self, align 8, !dbg !3024
  %checknull = icmp eq ptr %19, null, !dbg !3024
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3024
  br i1 %20, label %panic12, label %checkok16, !dbg !3024

checkok16:                                        ; preds = %expr_block.exit
  call void @llvm.memset.p0.i64(ptr align 8 %19, i8 0, i64 40, i1 false), !dbg !3024
  ret void, !dbg !3024

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39), !dbg !3018
  unreachable, !dbg !3018

panic12:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg15, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 43), !dbg !3024
  unreachable, !dbg !3024
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3025 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %r = alloca %any, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam26 = alloca i64, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %reterr32 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3028
  %3 = icmp eq ptr %1, null, !dbg !3028
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3028
  br i1 %4, label %panic, label %checkok, !dbg !3028

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3029, !DIExpression(), !3030)
    #dbg_declare(ptr %2, !3031, !DIExpression(), !3030)
    #dbg_declare(ptr %r, !3032, !DIExpression(), !3033)
  %5 = load ptr, ptr %self, align 8, !dbg !3033
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3033
  %6 = load i64, ptr %ptradd, align 8, !dbg !3033
  %7 = load ptr, ptr %5, align 8, !dbg !3033
  %8 = load ptr, ptr %self, align 8, !dbg !3033
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3033
  %9 = load i64, ptr %ptradd3, align 8, !dbg !3033
  %ge = icmp uge i64 %9, %6, !dbg !3033
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3033
  br i1 %10, label %panic4, label %checkok11, !dbg !3033

checkok11:                                        ; preds = %checkok
  %ptroffset = getelementptr inbounds [16 x i8], ptr %7, i64 %9, !dbg !3033
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !3033
    #dbg_declare(ptr %n, !3034, !DIExpression(), !3035)
  %ptradd12 = getelementptr inbounds i8, ptr %r, i64 8, !dbg !3035
  %11 = load i64, ptr %ptradd12, align 8, !dbg !3035
  %12 = inttoptr i64 %11 to ptr, !dbg !3035
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3028
  %13 = icmp eq ptr %12, %type, !dbg !3028
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !3028

cache_miss:                                       ; preds = %checkok11
  %ptradd13 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3028
  %14 = load ptr, ptr %ptradd13, align 8, !dbg !3028
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.read"), !dbg !3028
  store ptr %15, ptr %.inlinecache, align 8, !dbg !3028
  store ptr %12, ptr %.cachedtype, align 8, !dbg !3028
  br label %16, !dbg !3028

cache_hit:                                        ; preds = %checkok11
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3028
  br label %16, !dbg !3028

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !3028
  %17 = icmp eq ptr %fn_phi, null, !dbg !3028
  br i1 %17, label %missing_function, label %match, !dbg !3028

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg16, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 49), !dbg !3035
  unreachable, !dbg !3035

match:                                            ; preds = %16
  %19 = load ptr, ptr %r, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg17, ptr align 8 %2, i32 16, i1 false)
  %20 = call i64 %fn_phi(ptr %retparam, ptr %19, ptr align 8 %indirectarg17), !dbg !3035
  %not_err = icmp eq i64 %20, 0, !dbg !3035
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3035
  br i1 %21, label %after_check, label %assign_optional, !dbg !3035

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %n.f, align 8, !dbg !3035
  br label %after_assign, !dbg !3035

after_check:                                      ; preds = %match
  %22 = load i64, ptr %retparam, align 8, !dbg !3035
  store i64 %22, ptr %n, align 8, !dbg !3035
  store i64 0, ptr %n.f, align 8, !dbg !3035
  br label %after_assign, !dbg !3035

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3036, !DIExpression(), !3037)
  br label %testblock, !dbg !3037

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !3037
  %not_err18 = icmp eq i64 %optval, 0, !dbg !3037
  %23 = call i1 @llvm.expect.i1(i1 %not_err18, i1 true), !dbg !3037
  br i1 %23, label %after_check20, label %assign_optional19, !dbg !3037

assign_optional19:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3037
  br label %end_block, !dbg !3037

after_check20:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3037
  br label %end_block, !dbg !3037

end_block:                                        ; preds = %after_check20, %assign_optional19
  %24 = load i64, ptr %err, align 8, !dbg !3037
  %neq = icmp ne i64 %24, 0, !dbg !3037
  br i1 %neq, label %if.then, label %if.exit31, !dbg !3037

if.then:                                          ; preds = %end_block
  store i64 %24, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then
  %25 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %25, !dbg !3038
  br i1 %eq, label %switch.case, label %next_if, !dbg !3038

switch.case:                                      ; preds = %switch.entry
  %26 = load ptr, ptr %self, align 8, !dbg !3039
  %ptradd21 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !3039
  %27 = load i64, ptr %ptradd21, align 8, !dbg !3039
  %add = add i64 %27, 1, !dbg !3039
  store i64 %add, ptr %ptradd21, align 8, !dbg !3039
  %28 = load ptr, ptr %self, align 8, !dbg !3041
  %ptradd22 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !3041
  %29 = load i64, ptr %ptradd22, align 8, !dbg !3041
  %30 = load ptr, ptr %self, align 8, !dbg !3041
  %ptradd23 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !3041
  %31 = load i64, ptr %ptradd23, align 8, !dbg !3041
  %ge24 = icmp uge i64 %29, %31, !dbg !3041
  br i1 %ge24, label %if.then25, label %if.exit, !dbg !3041

if.then25:                                        ; preds = %switch.case
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !3042

if.exit:                                          ; preds = %switch.case
  %32 = load ptr, ptr %self, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg27, ptr align 8 %2, i32 16, i1 false)
  %33 = call i64 @std.io.MultiReader.read(ptr %retparam26, ptr %32, ptr align 8 %indirectarg27), !dbg !3044
  %not_err28 = icmp eq i64 %33, 0, !dbg !3044
  %34 = call i1 @llvm.expect.i1(i1 %not_err28, i1 true), !dbg !3044
  br i1 %34, label %after_check30, label %assign_optional29, !dbg !3044

assign_optional29:                                ; preds = %if.exit
  store i64 %33, ptr %reterr, align 8, !dbg !3044
  br label %err_retblock, !dbg !3044

after_check30:                                    ; preds = %if.exit
  %35 = load i64, ptr %retparam26, align 8, !dbg !3044
  store i64 %35, ptr %0, align 8, !dbg !3044
  ret i64 0, !dbg !3044

err_retblock:                                     ; preds = %assign_optional29
  %36 = load i64, ptr %reterr, align 8, !dbg !3044
  ret i64 %36, !dbg !3044

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !3044

switch.default:                                   ; preds = %next_if
  %37 = load i64, ptr %err, align 8, !dbg !3045
  ret i64 %37, !dbg !3045

if.exit31:                                        ; preds = %end_block
  %38 = load i64, ptr %n, align 8, !dbg !3047
  store i64 %38, ptr %0, align 8, !dbg !3047
  ret i64 0, !dbg !3047

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg2, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 46), !dbg !3030
  unreachable, !dbg !3030

panic4:                                           ; preds = %checkok
  store i64 %6, ptr %taddr, align 8
  %40 = insertvalue %any undef, ptr %taddr, 0
  %41 = insertvalue %any %40, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr5, align 8
  %42 = insertvalue %any undef, ptr %taddr5, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg8, align 8
  store %any %41, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %43, ptr %ptradd9, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 48, ptr align 8 %indirectarg10), !dbg !3033
  unreachable, !dbg !3033
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3048 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3051
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3051
  br i1 %3, label %panic, label %checkok, !dbg !3051

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3052, !DIExpression(), !3053)
    #dbg_declare(ptr %data, !3054, !DIExpression(), !3058)
  store i8 0, ptr %data, align 1, !dbg !3058
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !3059
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !3059
  %6 = load ptr, ptr %self, align 8
  store %"char[]" %5, ptr %indirectarg3, align 8
  %7 = call i64 @std.io.MultiReader.read(ptr %retparam, ptr %6, ptr align 8 %indirectarg3), !dbg !3059
  %not_err = icmp eq i64 %7, 0, !dbg !3059
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3059
  br i1 %8, label %after_check, label %assign_optional, !dbg !3059

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !3059
  br label %guard_block, !dbg !3059

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3059

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !3059
  ret i64 %9, !dbg !3059

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !3060
  store i8 %10, ptr %0, align 1, !dbg !3060
  ret i64 0, !dbg !3060

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.246, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65), !dbg !3053
  unreachable, !dbg !3053
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiWriter.new_init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3061 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator13 = alloca %any, align 8
  %elements14 = alloca i64, align 8
  %allocator15 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg25 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 16
  %indirectarg35 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %indirectarg42 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %indirectarg44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 16
  %indirectarg48 = alloca %"any[]", align 8
  %taddr51 = alloca %"any[]", align 8
  %taddr53 = alloca %"any[]", align 8
  %taddr56 = alloca i64, align 8
  %taddr57 = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
  %.assign_list = alloca %MultiWriter, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3074
  %3 = icmp eq ptr %0, null, !dbg !3074
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3074
  br i1 %4, label %panic, label %checkok, !dbg !3074

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3075, !DIExpression(), !3076)
    #dbg_declare(ptr %1, !3077, !DIExpression(), !3076)
    #dbg_declare(ptr %2, !3078, !DIExpression(), !3076)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3079
  %5 = load i64, ptr %ptradd, align 8, !dbg !3079
  %lt = icmp ult i64 0, %5, !dbg !3079
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3079

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.249, i64 36 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 15), !dbg !3079
  unreachable, !dbg !3079

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3081
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3081
  %8 = load i64, ptr %ptradd6, align 8, !dbg !3081
  %eq = icmp eq i64 0, %8, !dbg !3081
  br i1 %eq, label %assert_ok11, label %assert_fail7, !dbg !3081

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.250, i64 90 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg10, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 16), !dbg !3081
  unreachable, !dbg !3081

assert_ok11:                                      ; preds = %assert_ok
    #dbg_declare(ptr %copy, !3082, !DIExpression(), !3083)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %2, i32 16, i1 false)
  %ptradd12 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3083
  %10 = load i64, ptr %ptradd12, align 8
  store i64 %10, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator13, ptr align 8 %allocator, i32 16, i1 false)
  %11 = load i64, ptr %elements, align 8
  store i64 %11, ptr %elements14, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator15, ptr align 8 %allocator13, i32 16, i1 false)
  %12 = load i64, ptr %elements14, align 8, !dbg !3084
  %mul = mul i64 16, %12, !dbg !3084
  store i64 %mul, ptr %size, align 8
  %13 = load i64, ptr %size, align 8, !dbg !3088
  %i2nb = icmp eq i64 %13, 0, !dbg !3088
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3088

if.then:                                          ; preds = %assert_ok11
  store ptr null, ptr %blockret, align 8, !dbg !3088
  br label %expr_block.exit, !dbg !3088

if.exit:                                          ; preds = %assert_ok11
  %ptradd16 = getelementptr inbounds i8, ptr %allocator15, i64 8, !dbg !3090
  %14 = load i64, ptr %ptradd16, align 8, !dbg !3090
  %15 = inttoptr i64 %14 to ptr, !dbg !3090
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3074
  %16 = icmp eq ptr %15, %type, !dbg !3074
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !3074

cache_miss:                                       ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !3074
  %17 = load ptr, ptr %ptradd17, align 8, !dbg !3074
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire"), !dbg !3074
  store ptr %18, ptr %.inlinecache, align 8, !dbg !3074
  store ptr %15, ptr %.cachedtype, align 8, !dbg !3074
  br label %19, !dbg !3074

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3074
  br label %19, !dbg !3074

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !3074
  %20 = icmp eq ptr %fn_phi, null, !dbg !3074
  br i1 %20, label %missing_function, label %match, !dbg !3074

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.231, i64 44 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg20, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 80), !dbg !3092
  unreachable, !dbg !3092

match:                                            ; preds = %19
  %22 = load ptr, ptr %allocator15, align 8
  %23 = load i64, ptr %size, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %22, i64 %23, i32 1, i64 0), !dbg !3092
  %not_err = icmp eq i64 %24, 0, !dbg !3092
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3092
  br i1 %25, label %after_check, label %assign_optional, !dbg !3092

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %error_var, align 8, !dbg !3092
  br label %panic_block, !dbg !3092

after_check:                                      ; preds = %match
  %26 = load ptr, ptr %retparam, align 8, !dbg !3092
  store ptr %26, ptr %blockret, align 8, !dbg !3092
  br label %expr_block.exit, !dbg !3092

expr_block.exit:                                  ; preds = %after_check, %if.then
  %27 = load ptr, ptr %blockret, align 8, !dbg !3092
  store ptr %27, ptr %taddr, align 8
  %28 = load ptr, ptr %taddr, align 8
  %29 = load i64, ptr %elements14, align 8, !dbg !3084
  %add = add i64 0, %29, !dbg !3084
  %size21 = sub i64 %add, 0, !dbg !3084
  %30 = insertvalue %"any[]" undef, ptr %28, 0, !dbg !3084
  %31 = insertvalue %"any[]" %30, i64 %size21, 1, !dbg !3084
  br label %noerr_block, !dbg !3084

panic_block:                                      ; preds = %assign_optional
  %32 = insertvalue %any undef, ptr %error_var, 0, !dbg !3084
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !3084
  store %"char[]" { ptr @.panic_msg.98, i64 36 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg24, align 8
  store %any %33, ptr %varargslots, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg25, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, i32 244, ptr align 8 %indirectarg25), !dbg !3086
  unreachable, !dbg !3086

noerr_block:                                      ; preds = %expr_block.exit
  store %"any[]" %31, ptr %copy, align 8, !dbg !3086
  %35 = load %"any[]", ptr %1, align 8, !dbg !3093
  %36 = extractvalue %"any[]" %35, 0, !dbg !3093
  %37 = extractvalue %"any[]" %35, 1, !dbg !3093
  %gt = icmp ugt i64 0, %37, !dbg !3093
  %38 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3093
  br i1 %38, label %panic26, label %checkok36, !dbg !3093

checkok36:                                        ; preds = %noerr_block
  %size37 = sub i64 %37, 0, !dbg !3093
  %39 = insertvalue %"any[]" undef, ptr %36, 0, !dbg !3093
  %40 = insertvalue %"any[]" %39, i64 %size37, 1, !dbg !3093
  %41 = load %"any[]", ptr %copy, align 8, !dbg !3093
  %42 = extractvalue %"any[]" %41, 0, !dbg !3093
  %43 = extractvalue %"any[]" %41, 1, !dbg !3093
  %gt38 = icmp ugt i64 0, %43, !dbg !3093
  %44 = call i1 @llvm.expect.i1(i1 %gt38, i1 false), !dbg !3093
  br i1 %44, label %panic39, label %checkok49, !dbg !3093

checkok49:                                        ; preds = %checkok36
  %size50 = sub i64 %43, 0, !dbg !3093
  %45 = insertvalue %"any[]" undef, ptr %42, 0, !dbg !3093
  %46 = insertvalue %"any[]" %45, i64 %size50, 1, !dbg !3093
  %47 = extractvalue %"any[]" %46, 0, !dbg !3093
  %48 = extractvalue %"any[]" %40, 0, !dbg !3093
  store %"any[]" %40, ptr %taddr51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %taddr51, i64 8
  %49 = load i64, ptr %ptradd52, align 8
  store %"any[]" %46, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %50 = load i64, ptr %ptradd54, align 8
  %neq = icmp ne i64 %50, %49
  %51 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %51, label %panic55, label %checkok65

checkok65:                                        ; preds = %checkok49
  %52 = mul i64 %49, 16, !dbg !3093
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %47, ptr align 8 %48, i64 %52, i1 false), !dbg !3093
  %53 = load ptr, ptr %self, align 8, !dbg !3094
  %checknull = icmp eq ptr %53, null, !dbg !3094
  %54 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3094
  br i1 %54, label %panic66, label %checkok70, !dbg !3094

checkok70:                                        ; preds = %checkok65
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 32, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !3094
  %ptradd71 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3094
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd71, ptr align 8 %2, i32 16, i1 false), !dbg !3094
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %53, ptr align 8 %.assign_list, i32 32, i1 false), !dbg !3094
  %55 = load ptr, ptr %self, align 8, !dbg !3095
  ret ptr %55, !dbg !3095

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg2, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 18), !dbg !3076
  unreachable, !dbg !3076

panic26:                                          ; preds = %noerr_block
  store i64 %37, ptr %taddr27, align 8
  %57 = insertvalue %any undef, ptr %taddr27, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr28, align 8
  %59 = insertvalue %any undef, ptr %taddr28, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg31, align 8
  store %any %58, ptr %varargslots32, align 16
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %60, ptr %ptradd33, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp34", ptr %indirectarg35, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, i32 21, ptr align 8 %indirectarg35), !dbg !3093
  unreachable, !dbg !3093

panic39:                                          ; preds = %checkok36
  store i64 %43, ptr %taddr40, align 8
  %62 = insertvalue %any undef, ptr %taddr40, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr41, align 8
  %64 = insertvalue %any undef, ptr %taddr41, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg42, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg43, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg44, align 8
  store %any %63, ptr %varargslots45, align 16
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %65, ptr %ptradd46, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp47", ptr %indirectarg48, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg42, ptr align 8 %indirectarg43, ptr align 8 %indirectarg44, i32 21, ptr align 8 %indirectarg48), !dbg !3093
  unreachable, !dbg !3093

panic55:                                          ; preds = %checkok49
  store i64 %50, ptr %taddr56, align 8
  %67 = insertvalue %any undef, ptr %taddr56, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr57, align 8
  %69 = insertvalue %any undef, ptr %taddr57, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg60, align 8
  store %any %68, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %70, ptr %ptradd62, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 21, ptr align 8 %indirectarg64), !dbg !3093
  unreachable, !dbg !3093

panic66:                                          ; preds = %checkok65
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.217, i64 8 }, ptr %indirectarg69, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 22), !dbg !3094
  unreachable, !dbg !3094
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.MultiWriter.temp_init(ptr %0, ptr align 8 %1) #0 comdat !dbg !3096 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"any[]", align 8
  %indirectarg13 = alloca %any, align 8
  %2 = icmp eq ptr %0, null, !dbg !3099
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3099
  br i1 %3, label %panic, label %checkok, !dbg !3099

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3100, !DIExpression(), !3101)
    #dbg_declare(ptr %1, !3102, !DIExpression(), !3101)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3103
  %4 = load i64, ptr %ptradd, align 8, !dbg !3103
  %lt = icmp ult i64 0, %4, !dbg !3103
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3103

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.249, i64 36 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 28), !dbg !3103
  unreachable, !dbg !3103

assert_ok:                                        ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !3105
  %ptradd6 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3105
  %7 = load i64, ptr %ptradd6, align 8, !dbg !3105
  %eq = icmp eq i64 0, %7, !dbg !3105
  br i1 %eq, label %assert_ok11, label %assert_fail7, !dbg !3105

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.250, i64 90 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg10, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 29), !dbg !3105
  unreachable, !dbg !3105

assert_ok11:                                      ; preds = %assert_ok
  %9 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3106
  %i2nb = icmp eq ptr %9, null, !dbg !3106
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3106

if.then:                                          ; preds = %assert_ok11
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !3109
  br label %if.exit, !dbg !3109

if.exit:                                          ; preds = %if.then, %assert_ok11
  %10 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !3111
  %11 = insertvalue %any undef, ptr %10, 0, !dbg !3108
  %12 = insertvalue %any %11, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !3108
  %13 = load ptr, ptr %self, align 8, !dbg !3108
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg12, ptr align 8 %1, i32 16, i1 false)
  store %any %12, ptr %indirectarg13, align 8
  %14 = call ptr @std.io.MultiWriter.new_init(ptr %13, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13), !dbg !3108
  ret ptr %14, !dbg !3108

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.219, i64 9 }, ptr %indirectarg2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 31), !dbg !3101
  unreachable, !dbg !3101
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.MultiWriter.free(ptr %0) #0 comdat !dbg !3112 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3115
  %1 = icmp eq ptr %0, null, !dbg !3115
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3115
  br i1 %2, label %panic, label %checkok, !dbg !3115

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3116, !DIExpression(), !3117)
  %3 = load ptr, ptr %self, align 8, !dbg !3118
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3118
  %4 = load ptr, ptr %ptradd, align 8, !dbg !3118
  %i2nb = icmp eq ptr %4, null, !dbg !3118
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3118

if.then:                                          ; preds = %checkok
  ret void, !dbg !3118

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !3119
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3119
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd3, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !3119
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !3120
  %i2nb4 = icmp eq ptr %8, null, !dbg !3120
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !3120

if.then5:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !3120

if.exit6:                                         ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !3122
  %9 = load i64, ptr %ptradd7, align 8, !dbg !3122
  %10 = inttoptr i64 %9 to ptr, !dbg !3122
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3115
  %11 = icmp eq ptr %10, %type, !dbg !3115
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !3115

cache_miss:                                       ; preds = %if.exit6
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !3115
  %12 = load ptr, ptr %ptradd8, align 8, !dbg !3115
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !3115
  store ptr %13, ptr %.inlinecache, align 8, !dbg !3115
  store ptr %10, ptr %.cachedtype, align 8, !dbg !3115
  br label %14, !dbg !3115

cache_hit:                                        ; preds = %if.exit6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3115
  br label %14, !dbg !3115

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !3115
  %15 = icmp eq ptr %fn_phi, null, !dbg !3115
  br i1 %15, label %missing_function, label %match, !dbg !3115

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.223, i64 44 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.224, i64 16 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg11, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 105), !dbg !3122
  unreachable, !dbg !3122

match:                                            ; preds = %14
  %17 = load ptr, ptr %allocator, align 8, !dbg !3122
  %18 = load ptr, ptr %ptr, align 8, !dbg !3122
  call void %fn_phi(ptr %17, ptr %18, i8 zeroext 0), !dbg !3122
  br label %expr_block.exit, !dbg !3122

expr_block.exit:                                  ; preds = %match, %if.then5
  %19 = load ptr, ptr %self, align 8, !dbg !3123
  %checknull = icmp eq ptr %19, null, !dbg !3123
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3123
  br i1 %20, label %panic12, label %checkok16, !dbg !3123

checkok16:                                        ; preds = %expr_block.exit
  call void @llvm.memset.p0.i64(ptr align 8 %19, i8 0, i64 32, i1 false), !dbg !3123
  ret void, !dbg !3123

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !3117
  unreachable, !dbg !3117

panic12:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.222, i64 4 }, ptr %indirectarg15, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 40), !dbg !3123
  unreachable, !dbg !3123
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiWriter.write(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3124 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %.anon = alloca ptr, align 8
  %.anon3 = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %.anon9 = alloca i64, align 8
  %w = alloca %any, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg30 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3127
  %3 = icmp eq ptr %1, null, !dbg !3127
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3127
  br i1 %4, label %panic, label %checkok, !dbg !3127

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3128, !DIExpression(), !3129)
    #dbg_declare(ptr %2, !3130, !DIExpression(), !3129)
    #dbg_declare(ptr %n, !3131, !DIExpression(), !3132)
  store i64 0, ptr %n, align 8, !dbg !3132
    #dbg_declare(ptr %.anon, !3133, !DIExpression(), !3136)
  %5 = load ptr, ptr %self, align 8, !dbg !3136
  store ptr %5, ptr %.anon, align 8, !dbg !3136
    #dbg_declare(ptr %.anon3, !3137, !DIExpression(), !3136)
  %6 = load ptr, ptr %.anon, align 8, !dbg !3136
  %checknull = icmp eq ptr %6, null, !dbg !3136
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3136
  br i1 %7, label %panic4, label %checkok8, !dbg !3136

checkok8:                                         ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3136
  %8 = load i64, ptr %ptradd, align 8, !dbg !3136
  store i64 %8, ptr %.anon3, align 8, !dbg !3136
    #dbg_declare(ptr %.anon9, !3137, !DIExpression(), !3136)
  store i64 0, ptr %.anon9, align 8, !dbg !3136
  br label %loop.cond, !dbg !3136

loop.cond:                                        ; preds = %if.exit, %checkok8
  %9 = load i64, ptr %.anon9, align 8, !dbg !3136
  %10 = load i64, ptr %.anon3, align 8, !dbg !3136
  %lt = icmp ult i64 %9, %10, !dbg !3136
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3136

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %w, !3138, !DIExpression(), !3140)
  %11 = load ptr, ptr %.anon, align 8, !dbg !3140
  %checknull10 = icmp eq ptr %11, null, !dbg !3140
  %12 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !3140
  br i1 %12, label %panic11, label %checkok15, !dbg !3140

checkok15:                                        ; preds = %loop.body
  %ptradd16 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !3140
  %13 = load i64, ptr %ptradd16, align 8, !dbg !3140
  %14 = load ptr, ptr %11, align 8, !dbg !3140
  %15 = load i64, ptr %.anon9, align 8, !dbg !3140
  %ge = icmp uge i64 %15, %13, !dbg !3140
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3140
  br i1 %16, label %panic17, label %checkok24, !dbg !3140

checkok24:                                        ; preds = %checkok15
  %ptroffset = getelementptr inbounds [16 x i8], ptr %14, i64 %15, !dbg !3140
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !3140
  %ptradd25 = getelementptr inbounds i8, ptr %w, i64 8, !dbg !3141
  %17 = load i64, ptr %ptradd25, align 8, !dbg !3141
  %18 = inttoptr i64 %17 to ptr, !dbg !3141
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3127
  %19 = icmp eq ptr %18, %type, !dbg !3127
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !3127

cache_miss:                                       ; preds = %checkok24
  %ptradd26 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3127
  %20 = load ptr, ptr %ptradd26, align 8, !dbg !3127
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.write"), !dbg !3127
  store ptr %21, ptr %.inlinecache, align 8, !dbg !3127
  store ptr %18, ptr %.cachedtype, align 8, !dbg !3127
  br label %22, !dbg !3127

cache_hit:                                        ; preds = %checkok24
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3127
  br label %22, !dbg !3127

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !3127
  %23 = icmp eq ptr %fn_phi, null, !dbg !3127
  br i1 %23, label %missing_function, label %match, !dbg !3127

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg29, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 48), !dbg !3141
  unreachable, !dbg !3141

match:                                            ; preds = %22
  %25 = load ptr, ptr %w, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg30, ptr align 8 %2, i32 16, i1 false)
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25, ptr align 8 %indirectarg30), !dbg !3141
  %not_err = icmp eq i64 %26, 0, !dbg !3141
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3141
  br i1 %27, label %after_check, label %assign_optional, !dbg !3141

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %error_var, align 8, !dbg !3141
  br label %guard_block, !dbg !3141

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3141

guard_block:                                      ; preds = %assign_optional
  %28 = load i64, ptr %error_var, align 8, !dbg !3141
  ret i64 %28, !dbg !3141

noerr_block:                                      ; preds = %after_check
  %29 = load i64, ptr %retparam, align 8, !dbg !3141
  store i64 %29, ptr %n, align 8, !dbg !3141
  %30 = load i64, ptr %n, align 8, !dbg !3143
  %ptradd31 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3143
  %31 = load i64, ptr %ptradd31, align 8, !dbg !3143
  %neq = icmp ne i64 %30, %31, !dbg !3143
  br i1 %neq, label %if.then, label %if.exit, !dbg !3143

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), !dbg !3143

if.exit:                                          ; preds = %noerr_block
  %32 = load i64, ptr %.anon9, align 8, !dbg !3136
  %addnuw = add nuw i64 %32, 1, !dbg !3136
  store i64 %addnuw, ptr %.anon9, align 8, !dbg !3136
  br label %loop.cond, !dbg !3136

loop.exit:                                        ; preds = %loop.cond
  %ptradd32 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3144
  %33 = load i64, ptr %ptradd32, align 8, !dbg !3144
  store i64 %33, ptr %0, align 8, !dbg !3144
  ret i64 0, !dbg !3144

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg2, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43), !dbg !3129
  unreachable, !dbg !3129

panic4:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.251, i64 53 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg7, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 46), !dbg !3136
  unreachable, !dbg !3136

panic11:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.251, i64 53 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg14, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 46), !dbg !3140
  unreachable, !dbg !3140

panic17:                                          ; preds = %checkok15
  store i64 %13, ptr %taddr, align 8
  %37 = insertvalue %any undef, ptr %taddr, 0
  %38 = insertvalue %any %37, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr18, align 8
  %39 = insertvalue %any undef, ptr %taddr18, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.213, i64 5 }, ptr %indirectarg21, align 8
  store %any %38, ptr %varargslots, align 16
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %40, ptr %ptradd22, align 16
  %41 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 46, ptr align 8 %indirectarg23), !dbg !3140
  unreachable, !dbg !3140
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.MultiWriter.write_byte(ptr %0, i8 %1) #0 comdat !dbg !3145 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3148
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3148
  br i1 %3, label %panic, label %checkok, !dbg !3148

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3149, !DIExpression(), !3150)
  store i8 %1, ptr %c, align 1
    #dbg_declare(ptr %c, !3151, !DIExpression(), !3150)
    #dbg_declare(ptr %data, !3152, !DIExpression(), !3153)
  store i8 0, ptr %data, align 1, !dbg !3153
  %4 = load i8, ptr %c, align 1, !dbg !3154
  store i8 %4, ptr %data, align 1, !dbg !3154
  %5 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !3155
  %6 = insertvalue %"char[]" %5, i64 1, 1, !dbg !3155
  %7 = load ptr, ptr %self, align 8
  store %"char[]" %6, ptr %indirectarg3, align 8
  %8 = call i64 @std.io.MultiWriter.write(ptr %retparam, ptr %7, ptr align 8 %indirectarg3), !dbg !3155
  %not_err = icmp eq i64 %8, 0, !dbg !3155
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3155
  br i1 %9, label %after_check, label %assign_optional, !dbg !3155

assign_optional:                                  ; preds = %checkok
  store i64 %8, ptr %error_var, align 8, !dbg !3155
  br label %guard_block, !dbg !3155

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3155

guard_block:                                      ; preds = %assign_optional
  %10 = load i64, ptr %error_var, align 8, !dbg !3155
  ret i64 %10, !dbg !3155

noerr_block:                                      ; preds = %after_check
  ret i64 0, !dbg !3155

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.248, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.214, i64 10 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 54), !dbg !3150
  unreachable, !dbg !3150
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.Scanner.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3156 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %.assign_list = alloca %Scanner, align 8
  %3 = icmp eq ptr %0, null, !dbg !3167
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3167
  br i1 %4, label %panic, label %checkok, !dbg !3167

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3168, !DIExpression(), !3169)
    #dbg_declare(ptr %1, !3170, !DIExpression(), !3169)
    #dbg_declare(ptr %2, !3171, !DIExpression(), !3169)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3172
  %5 = load i64, ptr %ptradd, align 8, !dbg !3172
  %lt = icmp ult i64 0, %5, !dbg !3172
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3172

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.253, i64 65 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 17), !dbg !3172
  unreachable, !dbg !3172

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3174
  %checknull = icmp eq ptr %7, null, !dbg !3174
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3174
  br i1 %8, label %panic6, label %checkok10, !dbg !3174

checkok10:                                        ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %1, i32 16, i1 false), !dbg !3174
  %ptradd11 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !3174
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd11, ptr align 8 %2, i32 16, i1 false), !dbg !3174
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %7, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !3174
  ret void, !dbg !3174

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 19), !dbg !3169
  unreachable, !dbg !3169

panic6:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg9, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, i32 21), !dbg !3174
  unreachable, !dbg !3174
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.Scanner.flush(ptr noalias sret(%"char[]") align 8 %0, ptr %1) #0 comdat !dbg !3175 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %buf = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !3178
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3178
  br i1 %3, label %panic, label %checkok, !dbg !3178

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3179, !DIExpression(), !3180)
  %4 = load ptr, ptr %self, align 8, !dbg !3181
  %ptradd = getelementptr inbounds i8, ptr %4, i64 40, !dbg !3181
  %5 = load i64, ptr %ptradd, align 8, !dbg !3181
  %6 = load ptr, ptr %self, align 8, !dbg !3181
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !3181
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3181
  %ge = icmp uge i64 %5, %7, !dbg !3181
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !3181

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.227, i64 16 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg6, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 30), !dbg !3181
  unreachable, !dbg !3181

assert_ok:                                        ; preds = %checkok
    #dbg_declare(ptr %n, !3182, !DIExpression(), !3183)
  %9 = load ptr, ptr %self, align 8, !dbg !3183
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 40, !dbg !3183
  %10 = load i64, ptr %ptradd7, align 8, !dbg !3183
  %11 = load ptr, ptr %self, align 8, !dbg !3183
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !3183
  %12 = load i64, ptr %ptradd8, align 8, !dbg !3183
  %sub = sub i64 %10, %12, !dbg !3183
  store i64 %sub, ptr %n, align 8, !dbg !3183
    #dbg_declare(ptr %buf, !3184, !DIExpression(), !3185)
  %13 = load ptr, ptr %self, align 8, !dbg !3185
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3185
  %14 = load %"char[]", ptr %ptradd9, align 8, !dbg !3185
  %15 = extractvalue %"char[]" %14, 0, !dbg !3185
  %16 = load ptr, ptr %self, align 8, !dbg !3185
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !3185
  %17 = load i64, ptr %ptradd10, align 8, !dbg !3185
  %18 = extractvalue %"char[]" %14, 1, !dbg !3185
  %gt = icmp ugt i64 %17, %18, !dbg !3185
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3185
  br i1 %19, label %panic11, label %checkok18, !dbg !3185

checkok18:                                        ; preds = %assert_ok
  %20 = load i64, ptr %n, align 8, !dbg !3185
  %add = add i64 %17, %20, !dbg !3185
  %lt = icmp ult i64 %18, %add, !dbg !3185
  %sub19 = sub i64 %add, 1, !dbg !3185
  %21 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3185
  br i1 %21, label %panic20, label %checkok30, !dbg !3185

checkok30:                                        ; preds = %checkok18
  %size = sub i64 %add, %17, !dbg !3185
  %ptradd31 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !3185
  %22 = insertvalue %"char[]" undef, ptr %ptradd31, 0, !dbg !3185
  %23 = insertvalue %"char[]" %22, i64 %size, 1, !dbg !3185
  store %"char[]" %23, ptr %buf, align 8, !dbg !3185
  %24 = load ptr, ptr %self, align 8, !dbg !3186
  %ptradd32 = getelementptr inbounds i8, ptr %24, i64 32, !dbg !3186
  store i64 0, ptr %ptradd32, align 8, !dbg !3186
  %25 = load ptr, ptr %self, align 8, !dbg !3187
  %ptradd33 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !3187
  store i64 0, ptr %ptradd33, align 8, !dbg !3187
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %buf, i32 16, i1 false), !dbg !3188
  ret void, !dbg !3188

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28), !dbg !3180
  unreachable, !dbg !3180

panic11:                                          ; preds = %assert_ok
  store i64 %18, ptr %taddr, align 8
  %27 = insertvalue %any undef, ptr %taddr, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr12, align 8
  %29 = insertvalue %any undef, ptr %taddr12, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg15, align 8
  store %any %28, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd16, align 16
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 32, ptr align 8 %indirectarg17), !dbg !3185
  unreachable, !dbg !3185

panic20:                                          ; preds = %checkok18
  store i64 %sub19, ptr %taddr21, align 8
  %32 = insertvalue %any undef, ptr %taddr21, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr22, align 8
  %34 = insertvalue %any undef, ptr %taddr22, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.43, i64 5 }, ptr %indirectarg25, align 8
  store %any %33, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %35, ptr %ptradd27, align 16
  %36 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %36, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 32, ptr align 8 %indirectarg29), !dbg !3185
  unreachable, !dbg !3185
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.close(ptr %0) #0 comdat !dbg !3189 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !3192
  store ptr null, ptr %.cachedtype, align 8, !dbg !3192
  %1 = icmp eq ptr %0, null, !dbg !3192
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3192
  br i1 %2, label %panic, label %checkok, !dbg !3192

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3193, !DIExpression(), !3194)
  %3 = load ptr, ptr %self, align 8, !dbg !3195
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3195
  %4 = load i64, ptr %ptradd, align 8, !dbg !3195
  %5 = inttoptr i64 %4 to ptr, !dbg !3195
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3192
  %6 = icmp eq ptr %5, %type, !dbg !3192
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !3192

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3192
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !3192
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !3192
  store ptr %8, ptr %.inlinecache, align 8, !dbg !3192
  store ptr %5, ptr %.cachedtype, align 8, !dbg !3192
  br label %9, !dbg !3192

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3192
  br label %9, !dbg !3192

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !3192
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3192
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3192

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !3195
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !3195
  %11 = load i64, ptr %ptradd4, align 8, !dbg !3195
  %12 = inttoptr i64 %11 to ptr, !dbg !3195
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !3192
  %13 = icmp eq ptr %12, %type7, !dbg !3192
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !3192

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3192
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !3192
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !3192
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !3192
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !3192
  br label %16, !dbg !3192

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !3192
  br label %16, !dbg !3192

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !3192
  %17 = icmp eq ptr %fn_phi12, null, !dbg !3192
  br i1 %17, label %missing_function, label %match, !dbg !3192

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.206, i64 42 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg15, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 40), !dbg !3195
  unreachable, !dbg !3195

match:                                            ; preds = %16
  %19 = load ptr, ptr %10, align 8, !dbg !3195
  %20 = call i64 %fn_phi12(ptr %19), !dbg !3195
  %not_err = icmp eq i64 %20, 0, !dbg !3195
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3195
  br i1 %21, label %after_check, label %assign_optional, !dbg !3195

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !3195
  br label %err_retblock, !dbg !3195

after_check:                                      ; preds = %match
  ret i64 0, !dbg !3195

err_retblock:                                     ; preds = %assign_optional
  %22 = load i64, ptr %reterr, align 8, !dbg !3195
  ret i64 %22, !dbg !3195

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !3195

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.205, i64 5 }, ptr %indirectarg2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38), !dbg !3194
  unreachable, !dbg !3194
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.scan(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3196 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %self16 = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %n38 = alloca i64, align 8
  %buf41 = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %indirectarg47 = alloca %"char[]", align 8
  %indirectarg48 = alloca %"char[]", align 8
  %indirectarg49 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr56 = alloca i64, align 8
  %taddr57 = alloca i64, align 8
  %indirectarg58 = alloca %"char[]", align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %varargslots61 = alloca [2 x %any], align 16
  %indirectarg64 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %self67 = alloca ptr, align 8
  %buf68 = alloca %"char[]", align 8
  %pattern = alloca %"char[]", align 8
  %retparam69 = alloca i64, align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca i64, align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %varargslots86 = alloca [2 x %any], align 16
  %indirectarg89 = alloca %"any[]", align 8
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca i64, align 8
  %indirectarg97 = alloca %"char[]", align 8
  %indirectarg98 = alloca %"char[]", align 8
  %indirectarg99 = alloca %"char[]", align 8
  %varargslots100 = alloca [2 x %any], align 16
  %indirectarg103 = alloca %"any[]", align 8
  %taddr118 = alloca i64, align 8
  %taddr119 = alloca i64, align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %indirectarg122 = alloca %"char[]", align 8
  %varargslots123 = alloca [2 x %any], align 16
  %indirectarg126 = alloca %"any[]", align 8
  %taddr132 = alloca i64, align 8
  %taddr133 = alloca i64, align 8
  %indirectarg134 = alloca %"char[]", align 8
  %indirectarg135 = alloca %"char[]", align 8
  %indirectarg136 = alloca %"char[]", align 8
  %varargslots137 = alloca [2 x %any], align 16
  %indirectarg140 = alloca %"any[]", align 8
  %taddr146 = alloca i64, align 8
  %taddr147 = alloca i64, align 8
  %indirectarg148 = alloca %"char[]", align 8
  %indirectarg149 = alloca %"char[]", align 8
  %indirectarg150 = alloca %"char[]", align 8
  %varargslots151 = alloca [2 x %any], align 16
  %indirectarg154 = alloca %"any[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %taddr159 = alloca %"char[]", align 8
  %taddr163 = alloca i64, align 8
  %taddr164 = alloca i64, align 8
  %indirectarg165 = alloca %"char[]", align 8
  %indirectarg166 = alloca %"char[]", align 8
  %indirectarg167 = alloca %"char[]", align 8
  %varargslots168 = alloca [2 x %any], align 16
  %indirectarg171 = alloca %"any[]", align 8
  %taddr177 = alloca i64, align 8
  %taddr178 = alloca i64, align 8
  %indirectarg179 = alloca %"char[]", align 8
  %indirectarg180 = alloca %"char[]", align 8
  %indirectarg181 = alloca %"char[]", align 8
  %varargslots182 = alloca [2 x %any], align 16
  %indirectarg185 = alloca %"any[]", align 8
  %p = alloca i64, align 8
  %error_var189 = alloca i64, align 8
  %self190 = alloca ptr, align 8
  %buf191 = alloca %"char[]", align 8
  %n192 = alloca i64, align 8
  %n.f193 = alloca i64, align 8
  %.inlinecache195 = alloca ptr, align 8
  %.cachedtype196 = alloca ptr, align 8
  %indirectarg204 = alloca %"char[]", align 8
  %indirectarg205 = alloca %"char[]", align 8
  %indirectarg206 = alloca %"char[]", align 8
  %retparam208 = alloca i64, align 8
  %indirectarg209 = alloca %"char[]", align 8
  %err214 = alloca i64, align 8
  %switch223 = alloca i64, align 8
  %taddr236 = alloca i64, align 8
  %taddr237 = alloca i64, align 8
  %indirectarg238 = alloca %"char[]", align 8
  %indirectarg239 = alloca %"char[]", align 8
  %indirectarg240 = alloca %"char[]", align 8
  %varargslots241 = alloca [2 x %any], align 16
  %indirectarg244 = alloca %"any[]", align 8
  %taddr250 = alloca i64, align 8
  %taddr251 = alloca i64, align 8
  %indirectarg252 = alloca %"char[]", align 8
  %indirectarg253 = alloca %"char[]", align 8
  %indirectarg254 = alloca %"char[]", align 8
  %varargslots255 = alloca [2 x %any], align 16
  %indirectarg258 = alloca %"any[]", align 8
  %i261 = alloca i64, align 8
  %error_var262 = alloca i64, align 8
  %self263 = alloca ptr, align 8
  %buf264 = alloca %"char[]", align 8
  %pattern265 = alloca %"char[]", align 8
  %retparam266 = alloca i64, align 8
  %indirectarg267 = alloca %"char[]", align 8
  %indirectarg268 = alloca %"char[]", align 8
  %reterr278 = alloca i64, align 8
  %taddr282 = alloca i64, align 8
  %taddr283 = alloca i64, align 8
  %indirectarg284 = alloca %"char[]", align 8
  %indirectarg285 = alloca %"char[]", align 8
  %indirectarg286 = alloca %"char[]", align 8
  %varargslots287 = alloca [2 x %any], align 16
  %indirectarg290 = alloca %"any[]", align 8
  %taddr297 = alloca i64, align 8
  %taddr298 = alloca i64, align 8
  %indirectarg299 = alloca %"char[]", align 8
  %indirectarg300 = alloca %"char[]", align 8
  %indirectarg301 = alloca %"char[]", align 8
  %varargslots302 = alloca [2 x %any], align 16
  %indirectarg305 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype196, align 8, !dbg !3199
  store ptr null, ptr %.cachedtype, align 8, !dbg !3199
  %3 = icmp eq ptr %1, null, !dbg !3199
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3199
  br i1 %4, label %panic, label %checkok, !dbg !3199

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3200, !DIExpression(), !3201)
    #dbg_declare(ptr %2, !3202, !DIExpression(), !3201)
  %ptradd = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3203
  %5 = load i64, ptr %ptradd, align 8, !dbg !3203
  %lt = icmp ult i64 0, %5, !dbg !3203
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3203

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.255, i64 67 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg5, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 45), !dbg !3203
  unreachable, !dbg !3203

assert_ok:                                        ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !3205
  %ptradd6 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !3205
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !3205
  %8 = load i64, ptr %ptradd7, align 8, !dbg !3205
  %ptradd8 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3205
  %9 = load i64, ptr %ptradd8, align 8, !dbg !3205
  %gt = icmp ugt i64 %8, %9, !dbg !3205
  br i1 %gt, label %assert_ok13, label %assert_fail9, !dbg !3205

assert_fail9:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.256, i64 69 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg12, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 46), !dbg !3205
  unreachable, !dbg !3205

assert_ok13:                                      ; preds = %assert_ok
  %11 = load ptr, ptr %self, align 8, !dbg !3206
  %ptradd14 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !3206
  %12 = load i64, ptr %ptradd14, align 8, !dbg !3206
  %eq = icmp eq i64 0, %12, !dbg !3206
  br i1 %eq, label %if.then, label %if.exit30, !dbg !3206

if.then:                                          ; preds = %assert_ok13
  %13 = load ptr, ptr %self, align 8, !dbg !3207
  %ptradd15 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !3207
  %14 = load ptr, ptr %self, align 8
  store ptr %14, ptr %self16, align 8
  %15 = load ptr, ptr %self, align 8, !dbg !3207
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !3207
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf, ptr align 8 %ptradd17, i32 16, i1 false)
    #dbg_declare(ptr %n, !3209, !DIExpression(), !3211)
  %16 = load ptr, ptr %self16, align 8, !dbg !3211
  %ptradd18 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !3211
  %17 = load i64, ptr %ptradd18, align 8, !dbg !3211
  %18 = inttoptr i64 %17 to ptr, !dbg !3211
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3199
  %19 = icmp eq ptr %18, %type, !dbg !3199
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !3199

cache_miss:                                       ; preds = %if.then
  %ptradd19 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3199
  %20 = load ptr, ptr %ptradd19, align 8, !dbg !3199
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.read"), !dbg !3199
  store ptr %21, ptr %.inlinecache, align 8, !dbg !3199
  store ptr %18, ptr %.cachedtype, align 8, !dbg !3199
  br label %22, !dbg !3199

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3199
  br label %22, !dbg !3199

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !3199
  %23 = icmp eq ptr %fn_phi, null, !dbg !3199
  br i1 %23, label %missing_function, label %match, !dbg !3199

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg22, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 92), !dbg !3211
  unreachable, !dbg !3211

match:                                            ; preds = %22
  %25 = load ptr, ptr %16, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg23, ptr align 8 %buf, i32 16, i1 false)
  %26 = call i64 %fn_phi(ptr %retparam, ptr %25, ptr align 8 %indirectarg23), !dbg !3211
  %not_err = icmp eq i64 %26, 0, !dbg !3211
  %27 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3211
  br i1 %27, label %after_check, label %assign_optional, !dbg !3211

assign_optional:                                  ; preds = %match
  store i64 %26, ptr %n.f, align 8, !dbg !3211
  br label %after_assign, !dbg !3211

after_check:                                      ; preds = %match
  %28 = load i64, ptr %retparam, align 8, !dbg !3211
  store i64 %28, ptr %n, align 8, !dbg !3211
  store i64 0, ptr %n.f, align 8, !dbg !3211
  br label %after_assign, !dbg !3211

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3212, !DIExpression(), !3213)
  br label %testblock, !dbg !3213

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !3213
  %not_err24 = icmp eq i64 %optval, 0, !dbg !3213
  %29 = call i1 @llvm.expect.i1(i1 %not_err24, i1 true), !dbg !3213
  br i1 %29, label %after_check26, label %assign_optional25, !dbg !3213

assign_optional25:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3213
  br label %end_block, !dbg !3213

after_check26:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3213
  br label %end_block, !dbg !3213

end_block:                                        ; preds = %after_check26, %assign_optional25
  %30 = load i64, ptr %err, align 8, !dbg !3213
  %neq = icmp ne i64 %30, 0, !dbg !3213
  br i1 %neq, label %if.then27, label %if.exit, !dbg !3213

if.then27:                                        ; preds = %end_block
  store i64 %30, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then27
  %31 = load i64, ptr %switch, align 8
  %eq28 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %31, !dbg !3214
  br i1 %eq28, label %switch.case, label %next_if, !dbg !3214

switch.case:                                      ; preds = %switch.entry
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var, align 8, !dbg !3215
  br label %guard_block, !dbg !3215

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !3215

switch.default:                                   ; preds = %next_if
  %32 = load i64, ptr %err, align 8, !dbg !3217
  store i64 %32, ptr %error_var, align 8, !dbg !3217
  br label %guard_block, !dbg !3217

if.exit:                                          ; preds = %end_block
  br label %noerr_block, !dbg !3219

guard_block:                                      ; preds = %switch.default, %switch.case
  %33 = load i64, ptr %error_var, align 8, !dbg !3219
  ret i64 %33, !dbg !3219

noerr_block:                                      ; preds = %if.exit
  %34 = load i64, ptr %n, align 8, !dbg !3219
  store i64 %34, ptr %ptradd15, align 8, !dbg !3219
  %35 = load ptr, ptr %self, align 8, !dbg !3220
  %ptradd29 = getelementptr inbounds i8, ptr %35, i64 32, !dbg !3220
  store i64 0, ptr %ptradd29, align 8, !dbg !3220
  br label %if.exit30, !dbg !3220

if.exit30:                                        ; preds = %noerr_block, %assert_ok13
  %36 = load ptr, ptr %self, align 8, !dbg !3221
  %ptradd31 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !3221
  %37 = load i64, ptr %ptradd31, align 8, !dbg !3221
  %38 = load ptr, ptr %self, align 8, !dbg !3221
  %ptradd32 = getelementptr inbounds i8, ptr %38, i64 32, !dbg !3221
  %39 = load i64, ptr %ptradd32, align 8, !dbg !3221
  %ge = icmp uge i64 %37, %39, !dbg !3221
  br i1 %ge, label %assert_ok37, label %assert_fail33, !dbg !3221

assert_fail33:                                    ; preds = %if.exit30
  store %"char[]" { ptr @.panic_msg.227, i64 16 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg36, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 56), !dbg !3221
  unreachable, !dbg !3221

assert_ok37:                                      ; preds = %if.exit30
    #dbg_declare(ptr %n38, !3222, !DIExpression(), !3223)
  %41 = load ptr, ptr %self, align 8, !dbg !3223
  %ptradd39 = getelementptr inbounds i8, ptr %41, i64 40, !dbg !3223
  %42 = load i64, ptr %ptradd39, align 8, !dbg !3223
  %43 = load ptr, ptr %self, align 8, !dbg !3223
  %ptradd40 = getelementptr inbounds i8, ptr %43, i64 32, !dbg !3223
  %44 = load i64, ptr %ptradd40, align 8, !dbg !3223
  %sub = sub i64 %42, %44, !dbg !3223
  store i64 %sub, ptr %n38, align 8, !dbg !3223
    #dbg_declare(ptr %buf41, !3224, !DIExpression(), !3225)
  %45 = load ptr, ptr %self, align 8, !dbg !3225
  %ptradd42 = getelementptr inbounds i8, ptr %45, i64 16, !dbg !3225
  %46 = load %"char[]", ptr %ptradd42, align 8, !dbg !3225
  %47 = extractvalue %"char[]" %46, 0, !dbg !3225
  %48 = load ptr, ptr %self, align 8, !dbg !3225
  %ptradd43 = getelementptr inbounds i8, ptr %48, i64 32, !dbg !3225
  %49 = load i64, ptr %ptradd43, align 8, !dbg !3225
  %50 = extractvalue %"char[]" %46, 1, !dbg !3225
  %gt44 = icmp ugt i64 %49, %50, !dbg !3225
  %51 = call i1 @llvm.expect.i1(i1 %gt44, i1 false), !dbg !3225
  br i1 %51, label %panic45, label %checkok52, !dbg !3225

checkok52:                                        ; preds = %assert_ok37
  %52 = load i64, ptr %n38, align 8, !dbg !3225
  %add = add i64 %49, %52, !dbg !3225
  %lt53 = icmp ult i64 %50, %add, !dbg !3225
  %sub54 = sub i64 %add, 1, !dbg !3225
  %53 = call i1 @llvm.expect.i1(i1 %lt53, i1 false), !dbg !3225
  br i1 %53, label %panic55, label %checkok65, !dbg !3225

checkok65:                                        ; preds = %checkok52
  %size = sub i64 %add, %49, !dbg !3225
  %ptradd66 = getelementptr inbounds i8, ptr %47, i64 %49, !dbg !3225
  %54 = insertvalue %"char[]" undef, ptr %ptradd66, 0, !dbg !3225
  %55 = insertvalue %"char[]" %54, i64 %size, 1, !dbg !3225
  store %"char[]" %55, ptr %buf41, align 8, !dbg !3225
    #dbg_declare(ptr %i, !3226, !DIExpression(), !3227)
  store i64 0, ptr %i, align 8, !dbg !3227
  %56 = load ptr, ptr %self, align 8
  store ptr %56, ptr %self67, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf68, ptr align 8 %buf41, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg70, ptr align 8 %buf68, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg71, ptr align 8 %pattern, i32 16, i1 false)
  %57 = call i64 @std.core.String.index_of(ptr %retparam69, ptr align 8 %indirectarg70, ptr align 8 %indirectarg71), !dbg !3228
  %not_err72 = icmp eq i64 %57, 0, !dbg !3228
  %58 = call i1 @llvm.expect.i1(i1 %not_err72, i1 true), !dbg !3228
  br i1 %58, label %after_check73, label %catch_landing, !dbg !3228

after_check73:                                    ; preds = %checkok65
  %59 = load i64, ptr %retparam69, align 8, !dbg !3228
  store i64 %59, ptr %i, align 8, !dbg !3228
  br label %phi_try_catch, !dbg !3228

catch_landing:                                    ; preds = %checkok65
  br label %phi_try_catch, !dbg !3228

phi_try_catch:                                    ; preds = %catch_landing, %after_check73
  %val = phi i1 [ true, %after_check73 ], [ false, %catch_landing ], !dbg !3228
  br i1 %val, label %if.then74, label %if.exit106, !dbg !3228

if.then74:                                        ; preds = %phi_try_catch
  %60 = load ptr, ptr %self, align 8, !dbg !3230
  %ptradd75 = getelementptr inbounds i8, ptr %60, i64 32, !dbg !3230
  %61 = load i64, ptr %ptradd75, align 8, !dbg !3230
  %62 = load i64, ptr %i, align 8, !dbg !3230
  %ptradd76 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3230
  %63 = load i64, ptr %ptradd76, align 8, !dbg !3230
  %add77 = add i64 %62, %63, !dbg !3230
  %add78 = add i64 %61, %add77, !dbg !3230
  store i64 %add78, ptr %ptradd75, align 8, !dbg !3230
  %64 = load %"char[]", ptr %buf41, align 8, !dbg !3232
  %65 = extractvalue %"char[]" %64, 0, !dbg !3232
  %66 = extractvalue %"char[]" %64, 1, !dbg !3232
  %gt79 = icmp ugt i64 0, %66, !dbg !3232
  %67 = call i1 @llvm.expect.i1(i1 %gt79, i1 false), !dbg !3232
  br i1 %67, label %panic80, label %checkok90, !dbg !3232

checkok90:                                        ; preds = %if.then74
  %68 = load i64, ptr %i, align 8, !dbg !3232
  %add91 = add i64 0, %68, !dbg !3232
  %lt92 = icmp ult i64 %66, %add91, !dbg !3232
  %sub93 = sub i64 %add91, 1, !dbg !3232
  %69 = call i1 @llvm.expect.i1(i1 %lt92, i1 false), !dbg !3232
  br i1 %69, label %panic94, label %checkok104, !dbg !3232

checkok104:                                       ; preds = %checkok90
  %size105 = sub i64 %add91, 0, !dbg !3232
  %70 = insertvalue %"char[]" undef, ptr %65, 0, !dbg !3232
  %71 = insertvalue %"char[]" %70, i64 %size105, 1, !dbg !3232
  store %"char[]" %71, ptr %0, align 8, !dbg !3232
  ret i64 0, !dbg !3232

if.exit106:                                       ; preds = %phi_try_catch
  %72 = load ptr, ptr %self, align 8, !dbg !3233
  %ptradd107 = getelementptr inbounds i8, ptr %72, i64 32, !dbg !3233
  %73 = load i64, ptr %ptradd107, align 8, !dbg !3233
  %eq108 = icmp eq i64 0, %73, !dbg !3233
  br i1 %eq108, label %or.phi, label %or.rhs, !dbg !3233

or.rhs:                                           ; preds = %if.exit106
  %74 = load ptr, ptr %self, align 8, !dbg !3233
  %ptradd109 = getelementptr inbounds i8, ptr %74, i64 40, !dbg !3233
  %75 = load i64, ptr %ptradd109, align 8, !dbg !3233
  %76 = load ptr, ptr %self, align 8, !dbg !3233
  %ptradd110 = getelementptr inbounds i8, ptr %76, i64 16, !dbg !3233
  %ptradd111 = getelementptr inbounds i8, ptr %ptradd110, i64 8, !dbg !3233
  %77 = load i64, ptr %ptradd111, align 8, !dbg !3233
  %lt112 = icmp ult i64 %75, %77, !dbg !3233
  br label %or.phi, !dbg !3233

or.phi:                                           ; preds = %or.rhs, %if.exit106
  %val113 = phi i1 [ true, %if.exit106 ], [ %lt112, %or.rhs ], !dbg !3233
  br i1 %val113, label %if.then114, label %if.exit115, !dbg !3233

if.then114:                                       ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !3234

if.exit115:                                       ; preds = %or.phi
  %78 = load %"char[]", ptr %buf41, align 8, !dbg !3236
  %79 = extractvalue %"char[]" %78, 0, !dbg !3236
  %80 = extractvalue %"char[]" %78, 1, !dbg !3236
  %gt116 = icmp ugt i64 0, %80, !dbg !3236
  %81 = call i1 @llvm.expect.i1(i1 %gt116, i1 false), !dbg !3236
  br i1 %81, label %panic117, label %checkok127, !dbg !3236

checkok127:                                       ; preds = %if.exit115
  %size128 = sub i64 %80, 0, !dbg !3236
  %82 = insertvalue %"char[]" undef, ptr %79, 0, !dbg !3236
  %83 = insertvalue %"char[]" %82, i64 %size128, 1, !dbg !3236
  %84 = load ptr, ptr %self, align 8, !dbg !3236
  %ptradd129 = getelementptr inbounds i8, ptr %84, i64 16, !dbg !3236
  %85 = load %"char[]", ptr %ptradd129, align 8, !dbg !3236
  %86 = extractvalue %"char[]" %85, 0, !dbg !3236
  %87 = extractvalue %"char[]" %85, 1, !dbg !3236
  %gt130 = icmp ugt i64 0, %87, !dbg !3236
  %88 = call i1 @llvm.expect.i1(i1 %gt130, i1 false), !dbg !3236
  br i1 %88, label %panic131, label %checkok141, !dbg !3236

checkok141:                                       ; preds = %checkok127
  %89 = load i64, ptr %n38, align 8, !dbg !3236
  %add142 = add i64 0, %89, !dbg !3236
  %lt143 = icmp ult i64 %87, %add142, !dbg !3236
  %sub144 = sub i64 %add142, 1, !dbg !3236
  %90 = call i1 @llvm.expect.i1(i1 %lt143, i1 false), !dbg !3236
  br i1 %90, label %panic145, label %checkok155, !dbg !3236

checkok155:                                       ; preds = %checkok141
  %size156 = sub i64 %add142, 0, !dbg !3236
  %91 = insertvalue %"char[]" undef, ptr %86, 0, !dbg !3236
  %92 = insertvalue %"char[]" %91, i64 %size156, 1, !dbg !3236
  %93 = extractvalue %"char[]" %92, 0, !dbg !3236
  %94 = extractvalue %"char[]" %83, 0, !dbg !3236
  store %"char[]" %83, ptr %taddr157, align 8
  %ptradd158 = getelementptr inbounds i8, ptr %taddr157, i64 8
  %95 = load i64, ptr %ptradd158, align 8
  store %"char[]" %92, ptr %taddr159, align 8
  %ptradd160 = getelementptr inbounds i8, ptr %taddr159, i64 8
  %96 = load i64, ptr %ptradd160, align 8
  %neq161 = icmp ne i64 %96, %95
  %97 = call i1 @llvm.expect.i1(i1 %neq161, i1 false)
  br i1 %97, label %panic162, label %checkok172

checkok172:                                       ; preds = %checkok155
  %98 = mul i64 %95, 1, !dbg !3236
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %93, ptr align 1 %94, i64 %98, i1 false), !dbg !3236
  %99 = load ptr, ptr %self, align 8, !dbg !3237
  %ptradd173 = getelementptr inbounds i8, ptr %99, i64 32, !dbg !3237
  store i64 0, ptr %ptradd173, align 8, !dbg !3237
  %100 = load ptr, ptr %self, align 8, !dbg !3238
  %ptradd174 = getelementptr inbounds i8, ptr %100, i64 16, !dbg !3238
  %101 = load %"char[]", ptr %ptradd174, align 8, !dbg !3238
  %102 = extractvalue %"char[]" %101, 0, !dbg !3238
  %103 = load i64, ptr %n38, align 8, !dbg !3238
  %104 = extractvalue %"char[]" %101, 1, !dbg !3238
  %gt175 = icmp ugt i64 %103, %104, !dbg !3238
  %105 = call i1 @llvm.expect.i1(i1 %gt175, i1 false), !dbg !3238
  br i1 %105, label %panic176, label %checkok186, !dbg !3238

checkok186:                                       ; preds = %checkok172
  %size187 = sub i64 %104, %103, !dbg !3238
  %ptradd188 = getelementptr inbounds i8, ptr %102, i64 %103, !dbg !3238
  %106 = insertvalue %"char[]" undef, ptr %ptradd188, 0, !dbg !3238
  %107 = insertvalue %"char[]" %106, i64 %size187, 1, !dbg !3238
  store %"char[]" %107, ptr %buf41, align 8, !dbg !3238
    #dbg_declare(ptr %p, !3239, !DIExpression(), !3240)
  %108 = load ptr, ptr %self, align 8
  store ptr %108, ptr %self190, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf191, ptr align 8 %buf41, i32 16, i1 false)
    #dbg_declare(ptr %n192, !3241, !DIExpression(), !3243)
  %109 = load ptr, ptr %self190, align 8, !dbg !3243
  %ptradd194 = getelementptr inbounds i8, ptr %109, i64 8, !dbg !3243
  %110 = load i64, ptr %ptradd194, align 8, !dbg !3243
  %111 = inttoptr i64 %110 to ptr, !dbg !3243
  %type197 = load ptr, ptr %.cachedtype196, align 8, !dbg !3199
  %112 = icmp eq ptr %111, %type197, !dbg !3199
  br i1 %112, label %cache_hit200, label %cache_miss198, !dbg !3199

cache_miss198:                                    ; preds = %checkok186
  %ptradd199 = getelementptr inbounds i8, ptr %111, i64 16, !dbg !3199
  %113 = load ptr, ptr %ptradd199, align 8, !dbg !3199
  %114 = call ptr @.dyn_search(ptr %113, ptr @"$sel.read"), !dbg !3199
  store ptr %114, ptr %.inlinecache195, align 8, !dbg !3199
  store ptr %111, ptr %.cachedtype196, align 8, !dbg !3199
  br label %115, !dbg !3199

cache_hit200:                                     ; preds = %checkok186
  %cache_hit_fn201 = load ptr, ptr %.inlinecache195, align 8, !dbg !3199
  br label %115, !dbg !3199

115:                                              ; preds = %cache_hit200, %cache_miss198
  %fn_phi202 = phi ptr [ %cache_hit_fn201, %cache_hit200 ], [ %114, %cache_miss198 ], !dbg !3199
  %116 = icmp eq ptr %fn_phi202, null, !dbg !3199
  br i1 %116, label %missing_function203, label %match207, !dbg !3199

missing_function203:                              ; preds = %115
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg204, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg205, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg206, align 8
  %117 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %117(ptr align 8 %indirectarg204, ptr align 8 %indirectarg205, ptr align 8 %indirectarg206, i32 92), !dbg !3243
  unreachable, !dbg !3243

match207:                                         ; preds = %115
  %118 = load ptr, ptr %109, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg209, ptr align 8 %buf191, i32 16, i1 false)
  %119 = call i64 %fn_phi202(ptr %retparam208, ptr %118, ptr align 8 %indirectarg209), !dbg !3243
  %not_err210 = icmp eq i64 %119, 0, !dbg !3243
  %120 = call i1 @llvm.expect.i1(i1 %not_err210, i1 true), !dbg !3243
  br i1 %120, label %after_check212, label %assign_optional211, !dbg !3243

assign_optional211:                               ; preds = %match207
  store i64 %119, ptr %n.f193, align 8, !dbg !3243
  br label %after_assign213, !dbg !3243

after_check212:                                   ; preds = %match207
  %121 = load i64, ptr %retparam208, align 8, !dbg !3243
  store i64 %121, ptr %n192, align 8, !dbg !3243
  store i64 0, ptr %n.f193, align 8, !dbg !3243
  br label %after_assign213, !dbg !3243

after_assign213:                                  ; preds = %after_check212, %assign_optional211
    #dbg_declare(ptr %err214, !3244, !DIExpression(), !3245)
  br label %testblock215, !dbg !3245

testblock215:                                     ; preds = %after_assign213
  %optval216 = load i64, ptr %n.f193, align 8, !dbg !3245
  %not_err217 = icmp eq i64 %optval216, 0, !dbg !3245
  %122 = call i1 @llvm.expect.i1(i1 %not_err217, i1 true), !dbg !3245
  br i1 %122, label %after_check219, label %assign_optional218, !dbg !3245

assign_optional218:                               ; preds = %testblock215
  store i64 %optval216, ptr %err214, align 8, !dbg !3245
  br label %end_block220, !dbg !3245

after_check219:                                   ; preds = %testblock215
  store i64 0, ptr %err214, align 8, !dbg !3245
  br label %end_block220, !dbg !3245

end_block220:                                     ; preds = %after_check219, %assign_optional218
  %123 = load i64, ptr %err214, align 8, !dbg !3245
  %neq221 = icmp ne i64 %123, 0, !dbg !3245
  br i1 %neq221, label %if.then222, label %if.exit229, !dbg !3245

if.then222:                                       ; preds = %end_block220
  store i64 %123, ptr %switch223, align 8
  br label %switch.entry224

switch.entry224:                                  ; preds = %if.then222
  %124 = load i64, ptr %switch223, align 8
  %eq225 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %124, !dbg !3246
  br i1 %eq225, label %switch.case226, label %next_if227, !dbg !3246

switch.case226:                                   ; preds = %switch.entry224
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var189, align 8, !dbg !3247
  br label %guard_block230, !dbg !3247

next_if227:                                       ; preds = %switch.entry224
  br label %switch.default228, !dbg !3247

switch.default228:                                ; preds = %next_if227
  %125 = load i64, ptr %err214, align 8, !dbg !3249
  store i64 %125, ptr %error_var189, align 8, !dbg !3249
  br label %guard_block230, !dbg !3249

if.exit229:                                       ; preds = %end_block220
  br label %noerr_block231, !dbg !3251

guard_block230:                                   ; preds = %switch.default228, %switch.case226
  %126 = load i64, ptr %error_var189, align 8, !dbg !3251
  ret i64 %126, !dbg !3251

noerr_block231:                                   ; preds = %if.exit229
  %127 = load i64, ptr %n192, align 8, !dbg !3251
  store i64 %127, ptr %p, align 8, !dbg !3251
  %128 = load ptr, ptr %self, align 8, !dbg !3252
  %ptradd232 = getelementptr inbounds i8, ptr %128, i64 40, !dbg !3252
  %129 = load i64, ptr %n38, align 8, !dbg !3252
  %130 = load i64, ptr %p, align 8, !dbg !3252
  %add233 = add i64 %129, %130, !dbg !3252
  store i64 %add233, ptr %ptradd232, align 8, !dbg !3252
  %131 = load %"char[]", ptr %buf41, align 8, !dbg !3253
  %132 = extractvalue %"char[]" %131, 0, !dbg !3253
  %133 = extractvalue %"char[]" %131, 1, !dbg !3253
  %gt234 = icmp ugt i64 0, %133, !dbg !3253
  %134 = call i1 @llvm.expect.i1(i1 %gt234, i1 false), !dbg !3253
  br i1 %134, label %panic235, label %checkok245, !dbg !3253

checkok245:                                       ; preds = %noerr_block231
  %135 = load i64, ptr %p, align 8, !dbg !3253
  %add246 = add i64 0, %135, !dbg !3253
  %lt247 = icmp ult i64 %133, %add246, !dbg !3253
  %sub248 = sub i64 %add246, 1, !dbg !3253
  %136 = call i1 @llvm.expect.i1(i1 %lt247, i1 false), !dbg !3253
  br i1 %136, label %panic249, label %checkok259, !dbg !3253

checkok259:                                       ; preds = %checkok245
  %size260 = sub i64 %add246, 0, !dbg !3253
  %137 = insertvalue %"char[]" undef, ptr %132, 0, !dbg !3253
  %138 = insertvalue %"char[]" %137, i64 %size260, 1, !dbg !3253
  store %"char[]" %138, ptr %buf41, align 8, !dbg !3253
    #dbg_declare(ptr %i261, !3254, !DIExpression(), !3255)
  %139 = load ptr, ptr %self, align 8
  store ptr %139, ptr %self263, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf264, ptr align 8 %buf41, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern265, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg267, ptr align 8 %buf264, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg268, ptr align 8 %pattern265, i32 16, i1 false)
  %140 = call i64 @std.core.String.index_of(ptr %retparam266, ptr align 8 %indirectarg267, ptr align 8 %indirectarg268), !dbg !3256
  %not_err269 = icmp eq i64 %140, 0, !dbg !3256
  %141 = call i1 @llvm.expect.i1(i1 %not_err269, i1 true), !dbg !3256
  br i1 %141, label %after_check271, label %assign_optional270, !dbg !3256

assign_optional270:                               ; preds = %checkok259
  store i64 %140, ptr %error_var262, align 8, !dbg !3256
  br label %guard_block272, !dbg !3256

after_check271:                                   ; preds = %checkok259
  br label %noerr_block273, !dbg !3256

guard_block272:                                   ; preds = %assign_optional270
  %142 = load i64, ptr %error_var262, align 8, !dbg !3256
  ret i64 %142, !dbg !3256

noerr_block273:                                   ; preds = %after_check271
  %143 = load i64, ptr %retparam266, align 8, !dbg !3256
  store i64 %143, ptr %i261, align 8, !dbg !3256
  %144 = load ptr, ptr %self, align 8, !dbg !3258
  %ptradd274 = getelementptr inbounds i8, ptr %144, i64 32, !dbg !3258
  %145 = load i64, ptr %n38, align 8, !dbg !3258
  %146 = load i64, ptr %i261, align 8, !dbg !3258
  %add275 = add i64 %145, %146, !dbg !3258
  %ptradd276 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3258
  %147 = load i64, ptr %ptradd276, align 8, !dbg !3258
  %add277 = add i64 %add275, %147, !dbg !3258
  store i64 %add277, ptr %ptradd274, align 8, !dbg !3258
  %148 = load ptr, ptr %self, align 8, !dbg !3259
  %ptradd279 = getelementptr inbounds i8, ptr %148, i64 16, !dbg !3259
  %149 = load %"char[]", ptr %ptradd279, align 8, !dbg !3259
  %150 = extractvalue %"char[]" %149, 0, !dbg !3259
  %151 = extractvalue %"char[]" %149, 1, !dbg !3259
  %gt280 = icmp ugt i64 0, %151, !dbg !3259
  %152 = call i1 @llvm.expect.i1(i1 %gt280, i1 false), !dbg !3259
  br i1 %152, label %panic281, label %checkok291, !dbg !3259

checkok291:                                       ; preds = %noerr_block273
  %153 = load i64, ptr %n38, align 8, !dbg !3259
  %154 = load i64, ptr %i261, align 8, !dbg !3259
  %add292 = add i64 %153, %154, !dbg !3259
  %add293 = add i64 0, %add292, !dbg !3259
  %lt294 = icmp ult i64 %151, %add293, !dbg !3259
  %sub295 = sub i64 %add293, 1, !dbg !3259
  %155 = call i1 @llvm.expect.i1(i1 %lt294, i1 false), !dbg !3259
  br i1 %155, label %panic296, label %checkok306, !dbg !3259

checkok306:                                       ; preds = %checkok291
  %size307 = sub i64 %add293, 0, !dbg !3259
  %156 = insertvalue %"char[]" undef, ptr %150, 0, !dbg !3259
  %157 = insertvalue %"char[]" %156, i64 %size307, 1, !dbg !3259
  store %"char[]" %157, ptr %0, align 8, !dbg !3259
  ret i64 0, !dbg !3259

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg2, align 8
  %158 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %158(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 48), !dbg !3201
  unreachable, !dbg !3201

panic45:                                          ; preds = %assert_ok37
  store i64 %50, ptr %taddr, align 8
  %159 = insertvalue %any undef, ptr %taddr, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr46, align 8
  %161 = insertvalue %any undef, ptr %taddr46, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg47, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg48, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg49, align 8
  store %any %160, ptr %varargslots, align 16
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %162, ptr %ptradd50, align 16
  %163 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %163, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg47, ptr align 8 %indirectarg48, ptr align 8 %indirectarg49, i32 58, ptr align 8 %indirectarg51), !dbg !3225
  unreachable, !dbg !3225

panic55:                                          ; preds = %checkok52
  store i64 %sub54, ptr %taddr56, align 8
  %164 = insertvalue %any undef, ptr %taddr56, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr57, align 8
  %166 = insertvalue %any undef, ptr %taddr57, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg58, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg60, align 8
  store %any %165, ptr %varargslots61, align 16
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %167, ptr %ptradd62, align 16
  %168 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %168, i64 2, 1
  store %"any[]" %"$$temp63", ptr %indirectarg64, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg58, ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, i32 58, ptr align 8 %indirectarg64), !dbg !3225
  unreachable, !dbg !3225

panic80:                                          ; preds = %if.then74
  store i64 %66, ptr %taddr81, align 8
  %169 = insertvalue %any undef, ptr %taddr81, 0
  %170 = insertvalue %any %169, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr82, align 8
  %171 = insertvalue %any undef, ptr %taddr82, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg83, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg85, align 8
  store %any %170, ptr %varargslots86, align 16
  %ptradd87 = getelementptr inbounds i8, ptr %varargslots86, i64 16
  store %any %172, ptr %ptradd87, align 16
  %173 = insertvalue %"any[]" undef, ptr %varargslots86, 0
  %"$$temp88" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp88", ptr %indirectarg89, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 62, ptr align 8 %indirectarg89), !dbg !3232
  unreachable, !dbg !3232

panic94:                                          ; preds = %checkok90
  store i64 %sub93, ptr %taddr95, align 8
  %174 = insertvalue %any undef, ptr %taddr95, 0
  %175 = insertvalue %any %174, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %66, ptr %taddr96, align 8
  %176 = insertvalue %any undef, ptr %taddr96, 0
  %177 = insertvalue %any %176, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg97, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg98, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg99, align 8
  store %any %175, ptr %varargslots100, align 16
  %ptradd101 = getelementptr inbounds i8, ptr %varargslots100, i64 16
  store %any %177, ptr %ptradd101, align 16
  %178 = insertvalue %"any[]" undef, ptr %varargslots100, 0
  %"$$temp102" = insertvalue %"any[]" %178, i64 2, 1
  store %"any[]" %"$$temp102", ptr %indirectarg103, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg97, ptr align 8 %indirectarg98, ptr align 8 %indirectarg99, i32 62, ptr align 8 %indirectarg103), !dbg !3232
  unreachable, !dbg !3232

panic117:                                         ; preds = %if.exit115
  store i64 %80, ptr %taddr118, align 8
  %179 = insertvalue %any undef, ptr %taddr118, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr119, align 8
  %181 = insertvalue %any undef, ptr %taddr119, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg121, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg122, align 8
  store %any %180, ptr %varargslots123, align 16
  %ptradd124 = getelementptr inbounds i8, ptr %varargslots123, i64 16
  store %any %182, ptr %ptradd124, align 16
  %183 = insertvalue %"any[]" undef, ptr %varargslots123, 0
  %"$$temp125" = insertvalue %"any[]" %183, i64 2, 1
  store %"any[]" %"$$temp125", ptr %indirectarg126, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, ptr align 8 %indirectarg122, i32 71, ptr align 8 %indirectarg126), !dbg !3236
  unreachable, !dbg !3236

panic131:                                         ; preds = %checkok127
  store i64 %87, ptr %taddr132, align 8
  %184 = insertvalue %any undef, ptr %taddr132, 0
  %185 = insertvalue %any %184, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr133, align 8
  %186 = insertvalue %any undef, ptr %taddr133, 0
  %187 = insertvalue %any %186, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg134, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg135, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg136, align 8
  store %any %185, ptr %varargslots137, align 16
  %ptradd138 = getelementptr inbounds i8, ptr %varargslots137, i64 16
  store %any %187, ptr %ptradd138, align 16
  %188 = insertvalue %"any[]" undef, ptr %varargslots137, 0
  %"$$temp139" = insertvalue %"any[]" %188, i64 2, 1
  store %"any[]" %"$$temp139", ptr %indirectarg140, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg134, ptr align 8 %indirectarg135, ptr align 8 %indirectarg136, i32 71, ptr align 8 %indirectarg140), !dbg !3236
  unreachable, !dbg !3236

panic145:                                         ; preds = %checkok141
  store i64 %sub144, ptr %taddr146, align 8
  %189 = insertvalue %any undef, ptr %taddr146, 0
  %190 = insertvalue %any %189, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %87, ptr %taddr147, align 8
  %191 = insertvalue %any undef, ptr %taddr147, 0
  %192 = insertvalue %any %191, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg148, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg149, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg150, align 8
  store %any %190, ptr %varargslots151, align 16
  %ptradd152 = getelementptr inbounds i8, ptr %varargslots151, i64 16
  store %any %192, ptr %ptradd152, align 16
  %193 = insertvalue %"any[]" undef, ptr %varargslots151, 0
  %"$$temp153" = insertvalue %"any[]" %193, i64 2, 1
  store %"any[]" %"$$temp153", ptr %indirectarg154, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg148, ptr align 8 %indirectarg149, ptr align 8 %indirectarg150, i32 71, ptr align 8 %indirectarg154), !dbg !3236
  unreachable, !dbg !3236

panic162:                                         ; preds = %checkok155
  store i64 %96, ptr %taddr163, align 8
  %194 = insertvalue %any undef, ptr %taddr163, 0
  %195 = insertvalue %any %194, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %95, ptr %taddr164, align 8
  %196 = insertvalue %any undef, ptr %taddr164, 0
  %197 = insertvalue %any %196, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg165, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg166, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg167, align 8
  store %any %195, ptr %varargslots168, align 16
  %ptradd169 = getelementptr inbounds i8, ptr %varargslots168, i64 16
  store %any %197, ptr %ptradd169, align 16
  %198 = insertvalue %"any[]" undef, ptr %varargslots168, 0
  %"$$temp170" = insertvalue %"any[]" %198, i64 2, 1
  store %"any[]" %"$$temp170", ptr %indirectarg171, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg165, ptr align 8 %indirectarg166, ptr align 8 %indirectarg167, i32 71, ptr align 8 %indirectarg171), !dbg !3236
  unreachable, !dbg !3236

panic176:                                         ; preds = %checkok172
  store i64 %104, ptr %taddr177, align 8
  %199 = insertvalue %any undef, ptr %taddr177, 0
  %200 = insertvalue %any %199, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %103, ptr %taddr178, align 8
  %201 = insertvalue %any undef, ptr %taddr178, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg179, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg180, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg181, align 8
  store %any %200, ptr %varargslots182, align 16
  %ptradd183 = getelementptr inbounds i8, ptr %varargslots182, i64 16
  store %any %202, ptr %ptradd183, align 16
  %203 = insertvalue %"any[]" undef, ptr %varargslots182, 0
  %"$$temp184" = insertvalue %"any[]" %203, i64 2, 1
  store %"any[]" %"$$temp184", ptr %indirectarg185, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg179, ptr align 8 %indirectarg180, ptr align 8 %indirectarg181, i32 74, ptr align 8 %indirectarg185), !dbg !3238
  unreachable, !dbg !3238

panic235:                                         ; preds = %noerr_block231
  store i64 %133, ptr %taddr236, align 8
  %204 = insertvalue %any undef, ptr %taddr236, 0
  %205 = insertvalue %any %204, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr237, align 8
  %206 = insertvalue %any undef, ptr %taddr237, 0
  %207 = insertvalue %any %206, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg238, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg239, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg240, align 8
  store %any %205, ptr %varargslots241, align 16
  %ptradd242 = getelementptr inbounds i8, ptr %varargslots241, i64 16
  store %any %207, ptr %ptradd242, align 16
  %208 = insertvalue %"any[]" undef, ptr %varargslots241, 0
  %"$$temp243" = insertvalue %"any[]" %208, i64 2, 1
  store %"any[]" %"$$temp243", ptr %indirectarg244, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg238, ptr align 8 %indirectarg239, ptr align 8 %indirectarg240, i32 78, ptr align 8 %indirectarg244), !dbg !3253
  unreachable, !dbg !3253

panic249:                                         ; preds = %checkok245
  store i64 %sub248, ptr %taddr250, align 8
  %209 = insertvalue %any undef, ptr %taddr250, 0
  %210 = insertvalue %any %209, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %133, ptr %taddr251, align 8
  %211 = insertvalue %any undef, ptr %taddr251, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg252, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg253, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg254, align 8
  store %any %210, ptr %varargslots255, align 16
  %ptradd256 = getelementptr inbounds i8, ptr %varargslots255, i64 16
  store %any %212, ptr %ptradd256, align 16
  %213 = insertvalue %"any[]" undef, ptr %varargslots255, 0
  %"$$temp257" = insertvalue %"any[]" %213, i64 2, 1
  store %"any[]" %"$$temp257", ptr %indirectarg258, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg252, ptr align 8 %indirectarg253, ptr align 8 %indirectarg254, i32 78, ptr align 8 %indirectarg258), !dbg !3253
  unreachable, !dbg !3253

panic281:                                         ; preds = %noerr_block273
  store i64 %151, ptr %taddr282, align 8
  %214 = insertvalue %any undef, ptr %taddr282, 0
  %215 = insertvalue %any %214, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr283, align 8
  %216 = insertvalue %any undef, ptr %taddr283, 0
  %217 = insertvalue %any %216, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg284, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg285, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg286, align 8
  store %any %215, ptr %varargslots287, align 16
  %ptradd288 = getelementptr inbounds i8, ptr %varargslots287, i64 16
  store %any %217, ptr %ptradd288, align 16
  %218 = insertvalue %"any[]" undef, ptr %varargslots287, 0
  %"$$temp289" = insertvalue %"any[]" %218, i64 2, 1
  store %"any[]" %"$$temp289", ptr %indirectarg290, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg284, ptr align 8 %indirectarg285, ptr align 8 %indirectarg286, i32 82, ptr align 8 %indirectarg290), !dbg !3259
  unreachable, !dbg !3259

panic296:                                         ; preds = %checkok291
  store i64 %sub295, ptr %taddr297, align 8
  %219 = insertvalue %any undef, ptr %taddr297, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %151, ptr %taddr298, align 8
  %221 = insertvalue %any undef, ptr %taddr298, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg299, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg300, align 8
  store %"char[]" { ptr @.func.254, i64 4 }, ptr %indirectarg301, align 8
  store %any %220, ptr %varargslots302, align 16
  %ptradd303 = getelementptr inbounds i8, ptr %varargslots302, i64 16
  store %any %222, ptr %ptradd303, align 16
  %223 = insertvalue %"any[]" undef, ptr %varargslots302, 0
  %"$$temp304" = insertvalue %"any[]" %223, i64 2, 1
  store %"any[]" %"$$temp304", ptr %indirectarg305, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg299, ptr align 8 %indirectarg300, ptr align 8 %indirectarg301, i32 82, ptr align 8 %indirectarg305), !dbg !3259
  unreachable, !dbg !3259
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3260 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %indirectarg23 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %indirectarg38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 16
  %indirectarg42 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr59 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca i64, align 8
  %indirectarg80 = alloca %"char[]", align 8
  %indirectarg81 = alloca %"char[]", align 8
  %indirectarg82 = alloca %"char[]", align 8
  %varargslots83 = alloca [2 x %any], align 16
  %indirectarg86 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg92 = alloca %"char[]", align 8
  %indirectarg93 = alloca %"char[]", align 8
  %indirectarg94 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg95 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !3263
  %3 = icmp eq ptr %1, null, !dbg !3263
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3263
  br i1 %4, label %panic, label %checkok, !dbg !3263

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3264, !DIExpression(), !3265)
    #dbg_declare(ptr %2, !3266, !DIExpression(), !3265)
    #dbg_declare(ptr %n, !3267, !DIExpression(), !3268)
  store i64 0, ptr %n, align 8, !dbg !3268
  %5 = load ptr, ptr %self, align 8, !dbg !3269
  %ptradd = getelementptr inbounds i8, ptr %5, i64 32, !dbg !3269
  %6 = load i64, ptr %ptradd, align 8, !dbg !3269
  %7 = load ptr, ptr %self, align 8, !dbg !3269
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !3269
  %8 = load i64, ptr %ptradd3, align 8, !dbg !3269
  %lt = icmp ult i64 %6, %8, !dbg !3269
  br i1 %lt, label %if.then, label %if.exit, !dbg !3269

if.then:                                          ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3270
  %9 = load i64, ptr %ptradd4, align 8
  store i64 %9, ptr %x, align 8
  %10 = load ptr, ptr %self, align 8, !dbg !3270
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 40, !dbg !3270
  %11 = load i64, ptr %ptradd5, align 8, !dbg !3270
  %12 = load ptr, ptr %self, align 8, !dbg !3270
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !3270
  %13 = load i64, ptr %ptradd6, align 8, !dbg !3270
  %sub = sub i64 %11, %13, !dbg !3270
  store i64 %sub, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !3272
  %17 = load i64, ptr %b, align 8, !dbg !3272
  %lt7 = icmp ult i64 %16, %17, !dbg !3272
  br i1 %lt7, label %cond.lhs, label %cond.rhs, !dbg !3272

cond.lhs:                                         ; preds = %if.then
  %18 = load i64, ptr %x, align 8, !dbg !3274
  br label %cond.phi, !dbg !3274

cond.rhs:                                         ; preds = %if.then
  %19 = load i64, ptr %.anon, align 8, !dbg !3274
  br label %cond.phi, !dbg !3274

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !3274
  store i64 %val, ptr %n, align 8, !dbg !3274
  %20 = load ptr, ptr %self, align 8, !dbg !3276
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !3276
  %21 = load %"char[]", ptr %ptradd8, align 8, !dbg !3276
  %22 = extractvalue %"char[]" %21, 0, !dbg !3276
  %23 = load ptr, ptr %self, align 8, !dbg !3276
  %ptradd9 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !3276
  %24 = load i64, ptr %ptradd9, align 8, !dbg !3276
  %25 = extractvalue %"char[]" %21, 1, !dbg !3276
  %gt = icmp ugt i64 %24, %25, !dbg !3276
  %26 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3276
  br i1 %26, label %panic10, label %checkok17, !dbg !3276

checkok17:                                        ; preds = %cond.phi
  %27 = load i64, ptr %n, align 8, !dbg !3276
  %add = add i64 %24, %27, !dbg !3276
  %lt18 = icmp ult i64 %25, %add, !dbg !3276
  %sub19 = sub i64 %add, 1, !dbg !3276
  %28 = call i1 @llvm.expect.i1(i1 %lt18, i1 false), !dbg !3276
  br i1 %28, label %panic20, label %checkok30, !dbg !3276

checkok30:                                        ; preds = %checkok17
  %size = sub i64 %add, %24, !dbg !3276
  %ptradd31 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !3276
  %29 = insertvalue %"char[]" undef, ptr %ptradd31, 0, !dbg !3276
  %30 = insertvalue %"char[]" %29, i64 %size, 1, !dbg !3276
  %31 = load %"char[]", ptr %2, align 8, !dbg !3276
  %32 = extractvalue %"char[]" %31, 0, !dbg !3276
  %33 = extractvalue %"char[]" %31, 1, !dbg !3276
  %gt32 = icmp ugt i64 0, %33, !dbg !3276
  %34 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !3276
  br i1 %34, label %panic33, label %checkok43, !dbg !3276

checkok43:                                        ; preds = %checkok30
  %35 = load i64, ptr %n, align 8, !dbg !3276
  %add44 = add i64 0, %35, !dbg !3276
  %lt45 = icmp ult i64 %33, %add44, !dbg !3276
  %sub46 = sub i64 %add44, 1, !dbg !3276
  %36 = call i1 @llvm.expect.i1(i1 %lt45, i1 false), !dbg !3276
  br i1 %36, label %panic47, label %checkok57, !dbg !3276

checkok57:                                        ; preds = %checkok43
  %size58 = sub i64 %add44, 0, !dbg !3276
  %37 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !3276
  %38 = insertvalue %"char[]" %37, i64 %size58, 1, !dbg !3276
  %39 = extractvalue %"char[]" %38, 0, !dbg !3276
  %40 = extractvalue %"char[]" %30, 0, !dbg !3276
  store %"char[]" %30, ptr %taddr59, align 8
  %ptradd60 = getelementptr inbounds i8, ptr %taddr59, i64 8
  %41 = load i64, ptr %ptradd60, align 8
  store %"char[]" %38, ptr %taddr61, align 8
  %ptradd62 = getelementptr inbounds i8, ptr %taddr61, i64 8
  %42 = load i64, ptr %ptradd62, align 8
  %neq = icmp ne i64 %42, %41
  %43 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %43, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %44 = mul i64 %41, 1, !dbg !3276
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !3276
  %45 = load ptr, ptr %self, align 8, !dbg !3277
  %ptradd74 = getelementptr inbounds i8, ptr %45, i64 32, !dbg !3277
  %46 = load i64, ptr %ptradd74, align 8, !dbg !3277
  %47 = load i64, ptr %n, align 8, !dbg !3277
  %add75 = add i64 %46, %47, !dbg !3277
  store i64 %add75, ptr %ptradd74, align 8, !dbg !3277
  %48 = load %"char[]", ptr %2, align 8, !dbg !3278
  %49 = extractvalue %"char[]" %48, 0, !dbg !3278
  %50 = load i64, ptr %n, align 8, !dbg !3278
  %51 = extractvalue %"char[]" %48, 1, !dbg !3278
  %gt76 = icmp ugt i64 %50, %51, !dbg !3278
  %52 = call i1 @llvm.expect.i1(i1 %gt76, i1 false), !dbg !3278
  br i1 %52, label %panic77, label %checkok87, !dbg !3278

checkok87:                                        ; preds = %checkok73
  %size88 = sub i64 %51, %50, !dbg !3278
  %ptradd89 = getelementptr inbounds i8, ptr %49, i64 %50, !dbg !3278
  %53 = insertvalue %"char[]" undef, ptr %ptradd89, 0, !dbg !3278
  %54 = insertvalue %"char[]" %53, i64 %size88, 1, !dbg !3278
  store %"char[]" %54, ptr %2, align 8, !dbg !3278
  br label %if.exit, !dbg !3278

if.exit:                                          ; preds = %checkok87, %checkok
  %55 = load i64, ptr %n, align 8, !dbg !3279
  %56 = load ptr, ptr %self, align 8, !dbg !3279
  %ptradd90 = getelementptr inbounds i8, ptr %56, i64 8, !dbg !3279
  %57 = load i64, ptr %ptradd90, align 8, !dbg !3279
  %58 = inttoptr i64 %57 to ptr, !dbg !3279
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3263
  %59 = icmp eq ptr %58, %type, !dbg !3263
  br i1 %59, label %cache_hit, label %cache_miss, !dbg !3263

cache_miss:                                       ; preds = %if.exit
  %ptradd91 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !3263
  %60 = load ptr, ptr %ptradd91, align 8, !dbg !3263
  %61 = call ptr @.dyn_search(ptr %60, ptr @"$sel.read"), !dbg !3263
  store ptr %61, ptr %.inlinecache, align 8, !dbg !3263
  store ptr %58, ptr %.cachedtype, align 8, !dbg !3263
  br label %62, !dbg !3263

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3263
  br label %62, !dbg !3263

62:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %61, %cache_miss ], !dbg !3263
  %63 = icmp eq ptr %fn_phi, null, !dbg !3263
  br i1 %63, label %missing_function, label %match, !dbg !3263

missing_function:                                 ; preds = %62
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg92, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg93, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg94, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg92, ptr align 8 %indirectarg93, ptr align 8 %indirectarg94, i32 113), !dbg !3279
  unreachable, !dbg !3279

match:                                            ; preds = %62
  %65 = load ptr, ptr %56, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg95, ptr align 8 %2, i32 16, i1 false)
  %66 = call i64 %fn_phi(ptr %retparam, ptr %65, ptr align 8 %indirectarg95), !dbg !3279
  %not_err = icmp eq i64 %66, 0, !dbg !3279
  %67 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3279
  br i1 %67, label %after_check, label %assign_optional, !dbg !3279

assign_optional:                                  ; preds = %match
  store i64 %66, ptr %error_var, align 8, !dbg !3279
  br label %guard_block, !dbg !3279

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3279

guard_block:                                      ; preds = %assign_optional
  %68 = load i64, ptr %error_var, align 8, !dbg !3279
  ret i64 %68, !dbg !3279

noerr_block:                                      ; preds = %after_check
  %69 = load i64, ptr %retparam, align 8, !dbg !3279
  %add96 = add i64 %55, %69, !dbg !3279
  store i64 %add96, ptr %n, align 8, !dbg !3279
  %70 = load i64, ptr %n, align 8, !dbg !3280
  store i64 %70, ptr %0, align 8, !dbg !3280
  ret i64 0, !dbg !3280

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg2, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 103), !dbg !3265
  unreachable, !dbg !3265

panic10:                                          ; preds = %cond.phi
  store i64 %25, ptr %taddr, align 8
  %72 = insertvalue %any undef, ptr %taddr, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr11, align 8
  %74 = insertvalue %any undef, ptr %taddr11, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg14, align 8
  store %any %73, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %75, ptr %ptradd15, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 109, ptr align 8 %indirectarg16), !dbg !3276
  unreachable, !dbg !3276

panic20:                                          ; preds = %checkok17
  store i64 %sub19, ptr %taddr21, align 8
  %77 = insertvalue %any undef, ptr %taddr21, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr22, align 8
  %79 = insertvalue %any undef, ptr %taddr22, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg23, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg25, align 8
  store %any %78, ptr %varargslots26, align 16
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %80, ptr %ptradd27, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg23, ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, i32 109, ptr align 8 %indirectarg29), !dbg !3276
  unreachable, !dbg !3276

panic33:                                          ; preds = %checkok30
  store i64 %33, ptr %taddr34, align 8
  %82 = insertvalue %any undef, ptr %taddr34, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %84 = insertvalue %any undef, ptr %taddr35, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg37, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg38, align 8
  store %any %83, ptr %varargslots39, align 16
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %85, ptr %ptradd40, align 16
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %indirectarg42, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, ptr align 8 %indirectarg38, i32 109, ptr align 8 %indirectarg42), !dbg !3276
  unreachable, !dbg !3276

panic47:                                          ; preds = %checkok43
  store i64 %sub46, ptr %taddr48, align 8
  %87 = insertvalue %any undef, ptr %taddr48, 0
  %88 = insertvalue %any %87, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr49, align 8
  %89 = insertvalue %any undef, ptr %taddr49, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg52, align 8
  store %any %88, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %90, ptr %ptradd54, align 16
  %91 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %91, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 109, ptr align 8 %indirectarg56), !dbg !3276
  unreachable, !dbg !3276

panic63:                                          ; preds = %checkok57
  store i64 %42, ptr %taddr64, align 8
  %92 = insertvalue %any undef, ptr %taddr64, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr65, align 8
  %94 = insertvalue %any undef, ptr %taddr65, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.209, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg68, align 8
  store %any %93, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %95, ptr %ptradd70, align 16
  %96 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 109, ptr align 8 %indirectarg72), !dbg !3276
  unreachable, !dbg !3276

panic77:                                          ; preds = %checkok73
  store i64 %51, ptr %taddr78, align 8
  %97 = insertvalue %any undef, ptr %taddr78, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr79, align 8
  %99 = insertvalue %any undef, ptr %taddr79, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg80, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg81, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg82, align 8
  store %any %98, ptr %varargslots83, align 16
  %ptradd84 = getelementptr inbounds i8, ptr %varargslots83, i64 16
  store %any %100, ptr %ptradd84, align 16
  %101 = insertvalue %"any[]" undef, ptr %varargslots83, 0
  %"$$temp85" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp85", ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg80, ptr align 8 %indirectarg81, ptr align 8 %indirectarg82, i32 111, ptr align 8 %indirectarg86), !dbg !3278
  unreachable, !dbg !3278
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.Scanner.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3281 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg13 = alloca %"any[]", align 8
  %reterr16 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !3284
  %2 = icmp eq ptr %1, null, !dbg !3284
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3284
  br i1 %3, label %panic, label %checkok, !dbg !3284

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3285, !DIExpression(), !3286)
  %4 = load ptr, ptr %self, align 8, !dbg !3287
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !3287
  %5 = load i64, ptr %ptradd, align 8, !dbg !3287
  %6 = load ptr, ptr %self, align 8, !dbg !3287
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !3287
  %7 = load i64, ptr %ptradd3, align 8, !dbg !3287
  %lt = icmp ult i64 %5, %7, !dbg !3287
  br i1 %lt, label %if.then, label %if.exit, !dbg !3287

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !3288
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3288
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 8, !dbg !3288
  %9 = load i64, ptr %ptradd5, align 8, !dbg !3288
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !3288
  %11 = load ptr, ptr %self, align 8, !dbg !3288
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !3288
  %12 = load i64, ptr %ptradd6, align 8, !dbg !3288
  %add = add i64 %12, 1, !dbg !3288
  store i64 %add, ptr %ptradd6, align 8, !dbg !3288
  %ge = icmp uge i64 %12, %9, !dbg !3288
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3288
  br i1 %13, label %panic7, label %checkok14, !dbg !3288

checkok14:                                        ; preds = %if.then
  %ptradd15 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !3288
  %14 = load i8, ptr %ptradd15, align 1, !dbg !3288
  store i8 %14, ptr %0, align 1, !dbg !3288
  ret i64 0, !dbg !3288

if.exit:                                          ; preds = %checkok
  %15 = load ptr, ptr %self, align 8, !dbg !3290
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !3290
  %16 = load i64, ptr %ptradd17, align 8, !dbg !3290
  %17 = inttoptr i64 %16 to ptr, !dbg !3290
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3284
  %18 = icmp eq ptr %17, %type, !dbg !3284
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !3284

cache_miss:                                       ; preds = %if.exit
  %ptradd18 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !3284
  %19 = load ptr, ptr %ptradd18, align 8, !dbg !3284
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read_byte"), !dbg !3284
  store ptr %20, ptr %.inlinecache, align 8, !dbg !3284
  store ptr %17, ptr %.cachedtype, align 8, !dbg !3284
  br label %21, !dbg !3284

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3284
  br label %21, !dbg !3284

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !3284
  %22 = icmp eq ptr %fn_phi, null, !dbg !3284
  br i1 %22, label %missing_function, label %match, !dbg !3284

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.41, i64 46 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg21, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, i32 123), !dbg !3290
  unreachable, !dbg !3290

match:                                            ; preds = %21
  %24 = load ptr, ptr %15, align 8
  %25 = call i64 %fn_phi(ptr %retparam, ptr %24), !dbg !3290
  %not_err = icmp eq i64 %25, 0, !dbg !3290
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3290
  br i1 %26, label %after_check, label %assign_optional, !dbg !3290

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %reterr16, align 8, !dbg !3290
  br label %err_retblock, !dbg !3290

after_check:                                      ; preds = %match
  %27 = load i8, ptr %retparam, align 1, !dbg !3290
  store i8 %27, ptr %0, align 1, !dbg !3290
  ret i64 0, !dbg !3290

err_retblock:                                     ; preds = %assign_optional
  %28 = load i64, ptr %reterr16, align 8, !dbg !3290
  ret i64 %28, !dbg !3290

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117), !dbg !3286
  unreachable, !dbg !3286

panic7:                                           ; preds = %if.then
  store i64 %9, ptr %taddr, align 8
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr8, align 8
  %32 = insertvalue %any undef, ptr %taddr8, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.101, i64 59 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file.252, i64 10 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg11, align 8
  store %any %31, ptr %varargslots, align 16
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd12, align 16
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg13, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 121, ptr align 8 %indirectarg13), !dbg !3288
  unreachable, !dbg !3288
}

; Function Attrs: nounwind ssp uwtable
define weak_odr ptr @std.io.TeeReader.init(ptr %0, ptr align 8 %1, ptr align 8 %2) #0 comdat !dbg !3291 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %r = alloca %any, align 8
  %w = alloca %any, align 8
  %literal = alloca %TeeReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !3300
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3300
  br i1 %4, label %panic, label %checkok, !dbg !3300

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !3301, !DIExpression(), !3302)
    #dbg_declare(ptr %1, !3303, !DIExpression(), !3302)
    #dbg_declare(ptr %2, !3304, !DIExpression(), !3302)
  %5 = load ptr, ptr %self, align 8, !dbg !3305
  %checknull = icmp eq ptr %5, null, !dbg !3305
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3305
  br i1 %6, label %panic3, label %checkok7, !dbg !3305

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %r, i32 16, i1 false), !dbg !3306
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3306
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %w, i32 16, i1 false), !dbg !3306
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %literal, i32 32, i1 false), !dbg !3306
  %7 = load ptr, ptr %self, align 8, !dbg !3308
  ret ptr %7, !dbg !3308

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 22), !dbg !3302
  unreachable, !dbg !3302

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg6, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 24), !dbg !3305
  unreachable, !dbg !3305
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.TeeReader.read(ptr %0, ptr %1, ptr align 8 %2) #0 comdat !dbg !3309 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nr = alloca i64, align 8
  %nw = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg7 = alloca %"char[]", align 8
  %error_var8 = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %.inlinecache30 = alloca ptr, align 8
  %.cachedtype31 = alloca ptr, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %retparam43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype31, align 8, !dbg !3312
  store ptr null, ptr %.cachedtype, align 8, !dbg !3312
  %3 = icmp eq ptr %1, null, !dbg !3312
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3312
  br i1 %4, label %panic, label %checkok, !dbg !3312

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3313, !DIExpression(), !3314)
    #dbg_declare(ptr %2, !3315, !DIExpression(), !3314)
    #dbg_declare(ptr %nr, !3316, !DIExpression(), !3317)
  store i64 0, ptr %nr, align 8, !dbg !3317
    #dbg_declare(ptr %nw, !3318, !DIExpression(), !3317)
  store i64 0, ptr %nw, align 8, !dbg !3317
  %5 = load ptr, ptr %self, align 8, !dbg !3319
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3319
  %6 = load i64, ptr %ptradd, align 8, !dbg !3319
  %7 = inttoptr i64 %6 to ptr, !dbg !3319
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3312
  %8 = icmp eq ptr %7, %type, !dbg !3312
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !3312

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !3312
  %9 = load ptr, ptr %ptradd3, align 8, !dbg !3312
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.read"), !dbg !3312
  store ptr %10, ptr %.inlinecache, align 8, !dbg !3312
  store ptr %7, ptr %.cachedtype, align 8, !dbg !3312
  br label %11, !dbg !3312

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3312
  br label %11, !dbg !3312

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !3312
  %12 = icmp eq ptr %fn_phi, null, !dbg !3312
  br i1 %12, label %missing_function, label %match, !dbg !3312

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 31), !dbg !3319
  unreachable, !dbg !3319

match:                                            ; preds = %11
  %14 = load ptr, ptr %5, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg7, ptr align 8 %2, i32 16, i1 false)
  %15 = call i64 %fn_phi(ptr %retparam, ptr %14, ptr align 8 %indirectarg7), !dbg !3319
  %not_err = icmp eq i64 %15, 0, !dbg !3319
  %16 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3319
  br i1 %16, label %after_check, label %assign_optional, !dbg !3319

assign_optional:                                  ; preds = %match
  store i64 %15, ptr %error_var, align 8, !dbg !3319
  br label %guard_block, !dbg !3319

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !3319

guard_block:                                      ; preds = %assign_optional
  %17 = load i64, ptr %error_var, align 8, !dbg !3319
  ret i64 %17, !dbg !3319

noerr_block:                                      ; preds = %after_check
  %18 = load i64, ptr %retparam, align 8, !dbg !3319
  store i64 %18, ptr %nr, align 8, !dbg !3319
  %19 = load ptr, ptr %self, align 8, !dbg !3320
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !3320
  %20 = load %"char[]", ptr %2, align 8, !dbg !3320
  %21 = extractvalue %"char[]" %20, 0, !dbg !3320
  %22 = extractvalue %"char[]" %20, 1, !dbg !3320
  %gt = icmp ugt i64 0, %22, !dbg !3320
  %23 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3320
  br i1 %23, label %panic10, label %checkok17, !dbg !3320

checkok17:                                        ; preds = %noerr_block
  %24 = load i64, ptr %nr, align 8, !dbg !3320
  %add = add i64 0, %24, !dbg !3320
  %lt = icmp ult i64 %22, %add, !dbg !3320
  %sub = sub i64 %add, 1, !dbg !3320
  %25 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3320
  br i1 %25, label %panic18, label %checkok28, !dbg !3320

checkok28:                                        ; preds = %checkok17
  %size = sub i64 %add, 0, !dbg !3320
  %26 = insertvalue %"char[]" undef, ptr %21, 0, !dbg !3320
  %27 = insertvalue %"char[]" %26, i64 %size, 1, !dbg !3320
  %ptradd29 = getelementptr inbounds i8, ptr %ptradd9, i64 8, !dbg !3320
  %28 = load i64, ptr %ptradd29, align 8, !dbg !3320
  %29 = inttoptr i64 %28 to ptr, !dbg !3320
  %type32 = load ptr, ptr %.cachedtype31, align 8, !dbg !3312
  %30 = icmp eq ptr %29, %type32, !dbg !3312
  br i1 %30, label %cache_hit35, label %cache_miss33, !dbg !3312

cache_miss33:                                     ; preds = %checkok28
  %ptradd34 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !3312
  %31 = load ptr, ptr %ptradd34, align 8, !dbg !3312
  %32 = call ptr @.dyn_search(ptr %31, ptr @"$sel.write"), !dbg !3312
  store ptr %32, ptr %.inlinecache30, align 8, !dbg !3312
  store ptr %29, ptr %.cachedtype31, align 8, !dbg !3312
  br label %33, !dbg !3312

cache_hit35:                                      ; preds = %checkok28
  %cache_hit_fn36 = load ptr, ptr %.inlinecache30, align 8, !dbg !3312
  br label %33, !dbg !3312

33:                                               ; preds = %cache_hit35, %cache_miss33
  %fn_phi37 = phi ptr [ %cache_hit_fn36, %cache_hit35 ], [ %32, %cache_miss33 ], !dbg !3312
  %34 = icmp eq ptr %fn_phi37, null, !dbg !3312
  br i1 %34, label %missing_function38, label %match42, !dbg !3312

missing_function38:                               ; preds = %33
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg41, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 32), !dbg !3320
  unreachable, !dbg !3320

match42:                                          ; preds = %33
  %36 = load ptr, ptr %ptradd9, align 8
  store %"char[]" %27, ptr %indirectarg44, align 8
  %37 = call i64 %fn_phi37(ptr %retparam43, ptr %36, ptr align 8 %indirectarg44), !dbg !3320
  %not_err45 = icmp eq i64 %37, 0, !dbg !3320
  %38 = call i1 @llvm.expect.i1(i1 %not_err45, i1 true), !dbg !3320
  br i1 %38, label %after_check47, label %assign_optional46, !dbg !3320

assign_optional46:                                ; preds = %match42
  store i64 %37, ptr %error_var8, align 8, !dbg !3320
  br label %guard_block48, !dbg !3320

after_check47:                                    ; preds = %match42
  br label %noerr_block49, !dbg !3320

guard_block48:                                    ; preds = %assign_optional46
  %39 = load i64, ptr %error_var8, align 8, !dbg !3320
  ret i64 %39, !dbg !3320

noerr_block49:                                    ; preds = %after_check47
  %40 = load i64, ptr %retparam43, align 8, !dbg !3320
  store i64 %40, ptr %nw, align 8, !dbg !3320
  %41 = load i64, ptr %nr, align 8, !dbg !3321
  %42 = load i64, ptr %nw, align 8, !dbg !3321
  %neq = icmp ne i64 %41, %42, !dbg !3321
  br i1 %neq, label %if.then, label %if.exit, !dbg !3321

if.then:                                          ; preds = %noerr_block49
  ret i64 ptrtoint (ptr @"std.io.IoError$GENERAL_ERROR" to i64), !dbg !3321

if.exit:                                          ; preds = %noerr_block49
  %43 = load i64, ptr %nr, align 8, !dbg !3322
  store i64 %43, ptr %0, align 8, !dbg !3322
  ret i64 0, !dbg !3322

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28), !dbg !3314
  unreachable, !dbg !3314

panic10:                                          ; preds = %noerr_block
  store i64 %22, ptr %taddr, align 8
  %45 = insertvalue %any undef, ptr %taddr, 0
  %46 = insertvalue %any %45, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %47 = insertvalue %any undef, ptr %taddr11, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg14, align 8
  store %any %46, ptr %varargslots, align 16
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %48, ptr %ptradd15, align 16
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 32, ptr align 8 %indirectarg16), !dbg !3320
  unreachable, !dbg !3320

panic18:                                          ; preds = %checkok17
  store i64 %sub, ptr %taddr19, align 8
  %50 = insertvalue %any undef, ptr %taddr19, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr20, align 8
  %52 = insertvalue %any undef, ptr %taddr20, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.207, i64 4 }, ptr %indirectarg23, align 8
  store %any %51, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %53, ptr %ptradd25, align 16
  %54 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 32, ptr align 8 %indirectarg27), !dbg !3320
  unreachable, !dbg !3320
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.TeeReader.read_byte(ptr %0, ptr %1) #0 comdat !dbg !3323 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !3326
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3326
  br i1 %3, label %panic, label %checkok, !dbg !3326

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
    #dbg_declare(ptr %self, !3327, !DIExpression(), !3328)
    #dbg_declare(ptr %data, !3329, !DIExpression(), !3330)
  store i8 0, ptr %data, align 1, !dbg !3330
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !3331
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !3331
  %6 = load ptr, ptr %self, align 8
  store %"char[]" %5, ptr %indirectarg3, align 8
  %7 = call i64 @std.io.TeeReader.read(ptr %retparam, ptr %6, ptr align 8 %indirectarg3), !dbg !3331
  %not_err = icmp eq i64 %7, 0, !dbg !3331
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3331
  br i1 %8, label %after_check, label %assign_optional, !dbg !3331

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !3331
  br label %guard_block, !dbg !3331

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !3331

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !3331
  ret i64 %9, !dbg !3331

noerr_block:                                      ; preds = %after_check
  %10 = load i8, ptr %data, align 1, !dbg !3332
  store i8 %10, ptr %0, align 1, !dbg !3332
  ret i64 0, !dbg !3332

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.257, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.210, i64 9 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37), !dbg !3328
  unreachable, !dbg !3328
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.available(ptr %0, ptr align 8 %1) #0 comdat !dbg !3333 {
entry:
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %.inlinecache14 = alloca ptr, align 8
  %.cachedtype15 = alloca ptr, align 8
  %curr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache25 = alloca ptr, align 8
  %.cachedtype26 = alloca ptr, align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %retparam38 = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var42 = alloca i64, align 8
  %.inlinecache44 = alloca ptr, align 8
  %.cachedtype45 = alloca ptr, align 8
  %indirectarg53 = alloca %"char[]", align 8
  %indirectarg54 = alloca %"char[]", align 8
  %indirectarg55 = alloca %"char[]", align 8
  %retparam57 = alloca i64, align 8
  %error_var63 = alloca i64, align 8
  %.inlinecache65 = alloca ptr, align 8
  %.cachedtype66 = alloca ptr, align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %retparam78 = alloca i64, align 8
  %reterr84 = alloca i64, align 8
  %reterr86 = alloca i64, align 8
    #dbg_declare(ptr %1, !3336, !DIExpression(), !3337)
  store ptr null, ptr %.cachedtype66, align 8, !dbg !3338
  store ptr null, ptr %.cachedtype45, align 8, !dbg !3338
  store ptr null, ptr %.cachedtype26, align 8, !dbg !3338
  store ptr null, ptr %.cachedtype15, align 8, !dbg !3338
  store ptr null, ptr %.cachedtype4, align 8, !dbg !3338
  store ptr null, ptr %.cachedtype, align 8, !dbg !3338
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3338
  %2 = load i64, ptr %ptradd, align 8, !dbg !3338
  %3 = inttoptr i64 %2 to ptr, !dbg !3338
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3338
  %4 = icmp eq ptr %3, %type, !dbg !3338
  br i1 %4, label %cache_hit, label %cache_miss, !dbg !3338

cache_miss:                                       ; preds = %entry
  %ptradd1 = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3338
  %5 = load ptr, ptr %ptradd1, align 8, !dbg !3338
  %6 = call ptr @.dyn_search(ptr %5, ptr @"$sel.available"), !dbg !3338
  store ptr %6, ptr %.inlinecache, align 8, !dbg !3338
  store ptr %3, ptr %.cachedtype, align 8, !dbg !3338
  br label %7, !dbg !3338

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3338
  br label %7, !dbg !3338

7:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %6, %cache_miss ], !dbg !3338
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3338
  br i1 %i2b, label %if.then, label %if.exit, !dbg !3338

if.then:                                          ; preds = %7
  %ptradd2 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3338
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3338
  %9 = inttoptr i64 %8 to ptr, !dbg !3338
  %type5 = load ptr, ptr %.cachedtype4, align 8, !dbg !3338
  %10 = icmp eq ptr %9, %type5, !dbg !3338
  br i1 %10, label %cache_hit8, label %cache_miss6, !dbg !3338

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !3338
  %11 = load ptr, ptr %ptradd7, align 8, !dbg !3338
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.available"), !dbg !3338
  store ptr %12, ptr %.inlinecache3, align 8, !dbg !3338
  store ptr %9, ptr %.cachedtype4, align 8, !dbg !3338
  br label %13, !dbg !3338

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8, !dbg !3338
  br label %13, !dbg !3338

13:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %12, %cache_miss6 ], !dbg !3338
  %14 = icmp eq ptr %fn_phi10, null, !dbg !3338
  br i1 %14, label %missing_function, label %match, !dbg !3338

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg.244, i64 46 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.229, i64 9 }, ptr %indirectarg12, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 29), !dbg !3338
  unreachable, !dbg !3338

match:                                            ; preds = %13
  %16 = load ptr, ptr %1, align 8
  %17 = call i64 %fn_phi10(ptr %retparam, ptr %16), !dbg !3338
  %not_err = icmp eq i64 %17, 0, !dbg !3338
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3338
  br i1 %18, label %after_check, label %assign_optional, !dbg !3338

assign_optional:                                  ; preds = %match
  store i64 %17, ptr %reterr, align 8, !dbg !3338
  br label %err_retblock, !dbg !3338

after_check:                                      ; preds = %match
  %19 = load i64, ptr %retparam, align 8, !dbg !3338
  store i64 %19, ptr %0, align 8, !dbg !3338
  ret i64 0, !dbg !3338

err_retblock:                                     ; preds = %assign_optional
  %20 = load i64, ptr %reterr, align 8, !dbg !3338
  ret i64 %20, !dbg !3338

if.exit:                                          ; preds = %7
  %ptradd13 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3339
  %21 = load i64, ptr %ptradd13, align 8, !dbg !3339
  %22 = inttoptr i64 %21 to ptr, !dbg !3339
  %type16 = load ptr, ptr %.cachedtype15, align 8, !dbg !3338
  %23 = icmp eq ptr %22, %type16, !dbg !3338
  br i1 %23, label %cache_hit19, label %cache_miss17, !dbg !3338

cache_miss17:                                     ; preds = %if.exit
  %ptradd18 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !3338
  %24 = load ptr, ptr %ptradd18, align 8, !dbg !3338
  %25 = call ptr @.dyn_search(ptr %24, ptr @"$sel.seek"), !dbg !3338
  store ptr %25, ptr %.inlinecache14, align 8, !dbg !3338
  store ptr %22, ptr %.cachedtype15, align 8, !dbg !3338
  br label %26, !dbg !3338

cache_hit19:                                      ; preds = %if.exit
  %cache_hit_fn20 = load ptr, ptr %.inlinecache14, align 8, !dbg !3338
  br label %26, !dbg !3338

26:                                               ; preds = %cache_hit19, %cache_miss17
  %fn_phi21 = phi ptr [ %cache_hit_fn20, %cache_hit19 ], [ %25, %cache_miss17 ], !dbg !3338
  %i2b22 = icmp ne ptr %fn_phi21, null, !dbg !3338
  br i1 %i2b22, label %if.then23, label %if.exit85, !dbg !3338

if.then23:                                        ; preds = %26
    #dbg_declare(ptr %curr, !3340, !DIExpression(), !3342)
  %ptradd24 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3342
  %27 = load i64, ptr %ptradd24, align 8, !dbg !3342
  %28 = inttoptr i64 %27 to ptr, !dbg !3342
  %type27 = load ptr, ptr %.cachedtype26, align 8, !dbg !3338
  %29 = icmp eq ptr %28, %type27, !dbg !3338
  br i1 %29, label %cache_hit30, label %cache_miss28, !dbg !3338

cache_miss28:                                     ; preds = %if.then23
  %ptradd29 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !3338
  %30 = load ptr, ptr %ptradd29, align 8, !dbg !3338
  %31 = call ptr @.dyn_search(ptr %30, ptr @"$sel.seek"), !dbg !3338
  store ptr %31, ptr %.inlinecache25, align 8, !dbg !3338
  store ptr %28, ptr %.cachedtype26, align 8, !dbg !3338
  br label %32, !dbg !3338

cache_hit30:                                      ; preds = %if.then23
  %cache_hit_fn31 = load ptr, ptr %.inlinecache25, align 8, !dbg !3338
  br label %32, !dbg !3338

32:                                               ; preds = %cache_hit30, %cache_miss28
  %fn_phi32 = phi ptr [ %cache_hit_fn31, %cache_hit30 ], [ %31, %cache_miss28 ], !dbg !3338
  %33 = icmp eq ptr %fn_phi32, null, !dbg !3338
  br i1 %33, label %missing_function33, label %match37, !dbg !3338

missing_function33:                               ; preds = %32
  store %"char[]" { ptr @.panic_msg.258, i64 41 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.func.229, i64 9 }, ptr %indirectarg36, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34(ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, i32 32), !dbg !3342
  unreachable, !dbg !3342

match37:                                          ; preds = %32
  %35 = load ptr, ptr %1, align 8
  %36 = call i64 %fn_phi32(ptr %retparam38, ptr %35, i64 0, i32 1), !dbg !3342
  %not_err39 = icmp eq i64 %36, 0, !dbg !3342
  %37 = call i1 @llvm.expect.i1(i1 %not_err39, i1 true), !dbg !3342
  br i1 %37, label %after_check41, label %assign_optional40, !dbg !3342

assign_optional40:                                ; preds = %match37
  store i64 %36, ptr %error_var, align 8, !dbg !3342
  br label %guard_block, !dbg !3342

after_check41:                                    ; preds = %match37
  br label %noerr_block, !dbg !3342

guard_block:                                      ; preds = %assign_optional40
  %38 = load i64, ptr %error_var, align 8, !dbg !3342
  ret i64 %38, !dbg !3342

noerr_block:                                      ; preds = %after_check41
  %39 = load i64, ptr %retparam38, align 8, !dbg !3342
  store i64 %39, ptr %curr, align 8, !dbg !3342
    #dbg_declare(ptr %len, !3343, !DIExpression(), !3344)
  %ptradd43 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3344
  %40 = load i64, ptr %ptradd43, align 8, !dbg !3344
  %41 = inttoptr i64 %40 to ptr, !dbg !3344
  %type46 = load ptr, ptr %.cachedtype45, align 8, !dbg !3338
  %42 = icmp eq ptr %41, %type46, !dbg !3338
  br i1 %42, label %cache_hit49, label %cache_miss47, !dbg !3338

cache_miss47:                                     ; preds = %noerr_block
  %ptradd48 = getelementptr inbounds i8, ptr %41, i64 16, !dbg !3338
  %43 = load ptr, ptr %ptradd48, align 8, !dbg !3338
  %44 = call ptr @.dyn_search(ptr %43, ptr @"$sel.seek"), !dbg !3338
  store ptr %44, ptr %.inlinecache44, align 8, !dbg !3338
  store ptr %41, ptr %.cachedtype45, align 8, !dbg !3338
  br label %45, !dbg !3338

cache_hit49:                                      ; preds = %noerr_block
  %cache_hit_fn50 = load ptr, ptr %.inlinecache44, align 8, !dbg !3338
  br label %45, !dbg !3338

45:                                               ; preds = %cache_hit49, %cache_miss47
  %fn_phi51 = phi ptr [ %cache_hit_fn50, %cache_hit49 ], [ %44, %cache_miss47 ], !dbg !3338
  %46 = icmp eq ptr %fn_phi51, null, !dbg !3338
  br i1 %46, label %missing_function52, label %match56, !dbg !3338

missing_function52:                               ; preds = %45
  store %"char[]" { ptr @.panic_msg.258, i64 41 }, ptr %indirectarg53, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg54, align 8
  store %"char[]" { ptr @.func.229, i64 9 }, ptr %indirectarg55, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg53, ptr align 8 %indirectarg54, ptr align 8 %indirectarg55, i32 33), !dbg !3344
  unreachable, !dbg !3344

match56:                                          ; preds = %45
  %48 = load ptr, ptr %1, align 8
  %49 = call i64 %fn_phi51(ptr %retparam57, ptr %48, i64 0, i32 2), !dbg !3344
  %not_err58 = icmp eq i64 %49, 0, !dbg !3344
  %50 = call i1 @llvm.expect.i1(i1 %not_err58, i1 true), !dbg !3344
  br i1 %50, label %after_check60, label %assign_optional59, !dbg !3344

assign_optional59:                                ; preds = %match56
  store i64 %49, ptr %error_var42, align 8, !dbg !3344
  br label %guard_block61, !dbg !3344

after_check60:                                    ; preds = %match56
  br label %noerr_block62, !dbg !3344

guard_block61:                                    ; preds = %assign_optional59
  %51 = load i64, ptr %error_var42, align 8, !dbg !3344
  ret i64 %51, !dbg !3344

noerr_block62:                                    ; preds = %after_check60
  %52 = load i64, ptr %retparam57, align 8, !dbg !3344
  store i64 %52, ptr %len, align 8, !dbg !3344
  %53 = load i64, ptr %curr, align 8, !dbg !3345
  %ptradd64 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3345
  %54 = load i64, ptr %ptradd64, align 8, !dbg !3345
  %55 = inttoptr i64 %54 to ptr, !dbg !3345
  %type67 = load ptr, ptr %.cachedtype66, align 8, !dbg !3338
  %56 = icmp eq ptr %55, %type67, !dbg !3338
  br i1 %56, label %cache_hit70, label %cache_miss68, !dbg !3338

cache_miss68:                                     ; preds = %noerr_block62
  %ptradd69 = getelementptr inbounds i8, ptr %55, i64 16, !dbg !3338
  %57 = load ptr, ptr %ptradd69, align 8, !dbg !3338
  %58 = call ptr @.dyn_search(ptr %57, ptr @"$sel.seek"), !dbg !3338
  store ptr %58, ptr %.inlinecache65, align 8, !dbg !3338
  store ptr %55, ptr %.cachedtype66, align 8, !dbg !3338
  br label %59, !dbg !3338

cache_hit70:                                      ; preds = %noerr_block62
  %cache_hit_fn71 = load ptr, ptr %.inlinecache65, align 8, !dbg !3338
  br label %59, !dbg !3338

59:                                               ; preds = %cache_hit70, %cache_miss68
  %fn_phi72 = phi ptr [ %cache_hit_fn71, %cache_hit70 ], [ %58, %cache_miss68 ], !dbg !3338
  %60 = icmp eq ptr %fn_phi72, null, !dbg !3338
  br i1 %60, label %missing_function73, label %match77, !dbg !3338

missing_function73:                               ; preds = %59
  store %"char[]" { ptr @.panic_msg.258, i64 41 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.func.229, i64 9 }, ptr %indirectarg76, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61(ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, i32 34), !dbg !3345
  unreachable, !dbg !3345

match77:                                          ; preds = %59
  %62 = load ptr, ptr %1, align 8
  %63 = call i64 %fn_phi72(ptr %retparam78, ptr %62, i64 %53, i32 0), !dbg !3345
  %not_err79 = icmp eq i64 %63, 0, !dbg !3345
  %64 = call i1 @llvm.expect.i1(i1 %not_err79, i1 true), !dbg !3345
  br i1 %64, label %after_check81, label %assign_optional80, !dbg !3345

assign_optional80:                                ; preds = %match77
  store i64 %63, ptr %error_var63, align 8, !dbg !3345
  br label %guard_block82, !dbg !3345

after_check81:                                    ; preds = %match77
  br label %noerr_block83, !dbg !3345

guard_block82:                                    ; preds = %assign_optional80
  %65 = load i64, ptr %error_var63, align 8, !dbg !3345
  ret i64 %65, !dbg !3345

noerr_block83:                                    ; preds = %after_check81
  %66 = load i64, ptr %len, align 8, !dbg !3346
  %67 = load i64, ptr %curr, align 8, !dbg !3346
  %sub = sub i64 %66, %67, !dbg !3346
  store i64 %sub, ptr %0, align 8, !dbg !3346
  ret i64 0, !dbg !3346

if.exit85:                                        ; preds = %26
  store i64 0, ptr %0, align 8, !dbg !3347
  ret i64 0, !dbg !3347
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.io.copy_to(ptr %0, ptr align 8 %1, ptr align 8 %2, ptr align 8 %3) #0 comdat !dbg !3348 {
entry:
  %reterr = alloca i64, align 8
  %in = alloca %any, align 8
  %dst = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %total_copied = alloca i64, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg17 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %varargslots24 = alloca [2 x %any], align 16
  %indirectarg27 = alloca %"any[]", align 8
  %.inlinecache30 = alloca ptr, align 8
  %.cachedtype31 = alloca ptr, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %retparam43 = alloca i64, align 8
  %indirectarg44 = alloca %"char[]", align 8
  %.inlinecache54 = alloca ptr, align 8
  %.cachedtype55 = alloca ptr, align 8
  %reterr64 = alloca i64, align 8
  %.inlinecache66 = alloca ptr, align 8
  %.cachedtype67 = alloca ptr, align 8
  %indirectarg75 = alloca %"char[]", align 8
  %indirectarg76 = alloca %"char[]", align 8
  %indirectarg77 = alloca %"char[]", align 8
  %retparam79 = alloca i64, align 8
  %indirectarg80 = alloca %any, align 8
  %.inlinecache87 = alloca ptr, align 8
  %.cachedtype88 = alloca ptr, align 8
  %reterr97 = alloca i64, align 8
  %.inlinecache99 = alloca ptr, align 8
  %.cachedtype100 = alloca ptr, align 8
  %indirectarg108 = alloca %"char[]", align 8
  %indirectarg109 = alloca %"char[]", align 8
  %indirectarg110 = alloca %"char[]", align 8
  %retparam112 = alloca i64, align 8
  %indirectarg113 = alloca %any, align 8
  %reterr119 = alloca i64, align 8
  %in120 = alloca %any, align 8
  %dst121 = alloca %any, align 8
  %literal = alloca [4096 x i8], align 16
  %buffer122 = alloca %"char[]", align 8
  %blockret123 = alloca i64, align 8
  %total_copied124 = alloca i64, align 8
  %len126 = alloca i64, align 8
  %len.f127 = alloca i64, align 8
  %.inlinecache129 = alloca ptr, align 8
  %.cachedtype130 = alloca ptr, align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %indirectarg140 = alloca %"char[]", align 8
  %retparam142 = alloca i64, align 8
  %indirectarg143 = alloca %"char[]", align 8
  %err148 = alloca i64, align 8
  %switch157 = alloca i64, align 8
  %written167 = alloca i64, align 8
  %error_var168 = alloca i64, align 8
  %taddr171 = alloca i64, align 8
  %taddr172 = alloca i64, align 8
  %indirectarg173 = alloca %"char[]", align 8
  %indirectarg174 = alloca %"char[]", align 8
  %indirectarg175 = alloca %"char[]", align 8
  %varargslots176 = alloca [2 x %any], align 16
  %indirectarg179 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %.inlinecache197 = alloca ptr, align 8
  %.cachedtype198 = alloca ptr, align 8
  %indirectarg206 = alloca %"char[]", align 8
  %indirectarg207 = alloca %"char[]", align 8
  %indirectarg208 = alloca %"char[]", align 8
  %retparam210 = alloca i64, align 8
  %indirectarg211 = alloca %"char[]", align 8
    #dbg_declare(ptr %1, !3351, !DIExpression(), !3352)
    #dbg_declare(ptr %2, !3353, !DIExpression(), !3352)
    #dbg_declare(ptr %3, !3354, !DIExpression(), !3352)
  store ptr null, ptr %.cachedtype198, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype130, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype100, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype88, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype67, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype55, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype31, align 8, !dbg !3355
  store ptr null, ptr %.cachedtype, align 8, !dbg !3355
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3355
  %4 = load i64, ptr %ptradd, align 8, !dbg !3355
  %i2b = icmp ne i64 %4, 0, !dbg !3355
  br i1 %i2b, label %if.then, label %if.exit52, !dbg !3355

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buffer, ptr align 8 %3, i32 16, i1 false)
    #dbg_declare(ptr %total_copied, !3356, !DIExpression(), !3358)
  store i64 0, ptr %total_copied, align 8, !dbg !3358
  br label %loop.body, !dbg !3359

loop.body:                                        ; preds = %if.exit51, %if.then
    #dbg_declare(ptr %len, !3360, !DIExpression(), !3363)
  %ptradd1 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3363
  %5 = load i64, ptr %ptradd1, align 8, !dbg !3363
  %6 = inttoptr i64 %5 to ptr, !dbg !3363
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3355
  %7 = icmp eq ptr %6, %type, !dbg !3355
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !3355

cache_miss:                                       ; preds = %loop.body
  %ptradd2 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3355
  %8 = load ptr, ptr %ptradd2, align 8, !dbg !3355
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.read"), !dbg !3355
  store ptr %9, ptr %.inlinecache, align 8, !dbg !3355
  store ptr %6, ptr %.cachedtype, align 8, !dbg !3355
  br label %10, !dbg !3355

cache_hit:                                        ; preds = %loop.body
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3355
  br label %10, !dbg !3355

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !3355
  %11 = icmp eq ptr %fn_phi, null, !dbg !3355
  br i1 %11, label %missing_function, label %match, !dbg !3355

missing_function:                                 ; preds = %10
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg4, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, i32 174), !dbg !3363
  unreachable, !dbg !3363

match:                                            ; preds = %10
  %13 = load ptr, ptr %in, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg5, ptr align 8 %buffer, i32 16, i1 false)
  %14 = call i64 %fn_phi(ptr %retparam, ptr %13, ptr align 8 %indirectarg5), !dbg !3363
  %not_err = icmp eq i64 %14, 0, !dbg !3363
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3363
  br i1 %15, label %after_check, label %assign_optional, !dbg !3363

assign_optional:                                  ; preds = %match
  store i64 %14, ptr %len.f, align 8, !dbg !3363
  br label %after_assign, !dbg !3363

after_check:                                      ; preds = %match
  %16 = load i64, ptr %retparam, align 8, !dbg !3363
  store i64 %16, ptr %len, align 8, !dbg !3363
  store i64 0, ptr %len.f, align 8, !dbg !3363
  br label %after_assign, !dbg !3363

after_assign:                                     ; preds = %after_check, %assign_optional
    #dbg_declare(ptr %err, !3364, !DIExpression(), !3365)
  br label %testblock, !dbg !3365

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %len.f, align 8, !dbg !3365
  %not_err6 = icmp eq i64 %optval, 0, !dbg !3365
  %17 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !3365
  br i1 %17, label %after_check8, label %assign_optional7, !dbg !3365

assign_optional7:                                 ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3365
  br label %end_block, !dbg !3365

after_check8:                                     ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3365
  br label %end_block, !dbg !3365

end_block:                                        ; preds = %after_check8, %assign_optional7
  %18 = load i64, ptr %err, align 8, !dbg !3365
  %neq = icmp ne i64 %18, 0, !dbg !3365
  br i1 %neq, label %if.then9, label %if.exit, !dbg !3365

if.then9:                                         ; preds = %end_block
  store i64 %18, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then9
  %19 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %19, !dbg !3366
  br i1 %eq, label %switch.case, label %next_if, !dbg !3366

switch.case:                                      ; preds = %switch.entry
  %20 = load i64, ptr %total_copied, align 8, !dbg !3367
  store i64 %20, ptr %blockret, align 8, !dbg !3367
  br label %expr_block.exit, !dbg !3367

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !3367

switch.default:                                   ; preds = %next_if
  %21 = load i64, ptr %err, align 8, !dbg !3369
  store i64 %21, ptr %reterr, align 8, !dbg !3369
  br label %err_retblock, !dbg !3369

if.exit:                                          ; preds = %end_block
  %22 = load i64, ptr %len, align 8, !dbg !3371
  %i2nb = icmp eq i64 %22, 0, !dbg !3371
  br i1 %i2nb, label %if.then10, label %if.exit11, !dbg !3371

if.then10:                                        ; preds = %if.exit
  %23 = load i64, ptr %total_copied, align 8, !dbg !3371
  store i64 %23, ptr %blockret, align 8, !dbg !3371
  br label %expr_block.exit, !dbg !3371

if.exit11:                                        ; preds = %if.exit
    #dbg_declare(ptr %written, !3372, !DIExpression(), !3373)
  %24 = load %"char[]", ptr %buffer, align 8, !dbg !3373
  %25 = extractvalue %"char[]" %24, 0, !dbg !3373
  %26 = extractvalue %"char[]" %24, 1, !dbg !3373
  %gt = icmp ugt i64 0, %26, !dbg !3373
  %27 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3373
  br i1 %27, label %panic, label %checkok, !dbg !3373

checkok:                                          ; preds = %if.exit11
  %28 = load i64, ptr %len, align 8, !dbg !3373
  %add = add i64 0, %28, !dbg !3373
  %lt = icmp ult i64 %26, %add, !dbg !3373
  %sub = sub i64 %add, 1, !dbg !3373
  %29 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3373
  br i1 %29, label %panic18, label %checkok28, !dbg !3373

checkok28:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !3373
  %30 = insertvalue %"char[]" undef, ptr %25, 0, !dbg !3373
  %31 = insertvalue %"char[]" %30, i64 %size, 1, !dbg !3373
  %ptradd29 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3373
  %32 = load i64, ptr %ptradd29, align 8, !dbg !3373
  %33 = inttoptr i64 %32 to ptr, !dbg !3373
  %type32 = load ptr, ptr %.cachedtype31, align 8, !dbg !3355
  %34 = icmp eq ptr %33, %type32, !dbg !3355
  br i1 %34, label %cache_hit35, label %cache_miss33, !dbg !3355

cache_miss33:                                     ; preds = %checkok28
  %ptradd34 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !3355
  %35 = load ptr, ptr %ptradd34, align 8, !dbg !3355
  %36 = call ptr @.dyn_search(ptr %35, ptr @"$sel.write"), !dbg !3355
  store ptr %36, ptr %.inlinecache30, align 8, !dbg !3355
  store ptr %33, ptr %.cachedtype31, align 8, !dbg !3355
  br label %37, !dbg !3355

cache_hit35:                                      ; preds = %checkok28
  %cache_hit_fn36 = load ptr, ptr %.inlinecache30, align 8, !dbg !3355
  br label %37, !dbg !3355

37:                                               ; preds = %cache_hit35, %cache_miss33
  %fn_phi37 = phi ptr [ %cache_hit_fn36, %cache_hit35 ], [ %36, %cache_miss33 ], !dbg !3355
  %38 = icmp eq ptr %fn_phi37, null, !dbg !3355
  br i1 %38, label %missing_function38, label %match42, !dbg !3355

missing_function38:                               ; preds = %37
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg41, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 181), !dbg !3373
  unreachable, !dbg !3373

match42:                                          ; preds = %37
  %40 = load ptr, ptr %dst, align 8
  store %"char[]" %31, ptr %indirectarg44, align 8
  %41 = call i64 %fn_phi37(ptr %retparam43, ptr %40, ptr align 8 %indirectarg44), !dbg !3373
  %not_err45 = icmp eq i64 %41, 0, !dbg !3373
  %42 = call i1 @llvm.expect.i1(i1 %not_err45, i1 true), !dbg !3373
  br i1 %42, label %after_check47, label %assign_optional46, !dbg !3373

assign_optional46:                                ; preds = %match42
  store i64 %41, ptr %error_var, align 8, !dbg !3373
  br label %guard_block, !dbg !3373

after_check47:                                    ; preds = %match42
  br label %noerr_block, !dbg !3373

guard_block:                                      ; preds = %assign_optional46
  %43 = load i64, ptr %error_var, align 8, !dbg !3373
  store i64 %43, ptr %reterr, align 8, !dbg !3373
  br label %err_retblock, !dbg !3373

noerr_block:                                      ; preds = %after_check47
  %44 = load i64, ptr %retparam43, align 8, !dbg !3373
  store i64 %44, ptr %written, align 8, !dbg !3373
  %45 = load i64, ptr %total_copied, align 8, !dbg !3374
  %46 = load i64, ptr %len, align 8, !dbg !3374
  %add48 = add i64 %45, %46, !dbg !3374
  store i64 %add48, ptr %total_copied, align 8, !dbg !3374
  %47 = load i64, ptr %written, align 8, !dbg !3375
  %48 = load i64, ptr %len, align 8, !dbg !3375
  %neq49 = icmp ne i64 %47, %48, !dbg !3375
  br i1 %neq49, label %if.then50, label %if.exit51, !dbg !3375

if.then50:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr, align 8, !dbg !3375
  br label %err_retblock, !dbg !3375

if.exit51:                                        ; preds = %noerr_block
  br label %loop.body, !dbg !3375

expr_block.exit:                                  ; preds = %if.then10, %switch.case
  %49 = load i64, ptr %blockret, align 8, !dbg !3375
  store i64 %49, ptr %0, align 8, !dbg !3375
  ret i64 0, !dbg !3375

err_retblock:                                     ; preds = %if.then50, %guard_block, %switch.default
  %50 = load i64, ptr %reterr, align 8, !dbg !3375
  ret i64 %50, !dbg !3375

if.exit52:                                        ; preds = %entry
  %ptradd53 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3376
  %51 = load i64, ptr %ptradd53, align 8, !dbg !3376
  %52 = inttoptr i64 %51 to ptr, !dbg !3376
  %type56 = load ptr, ptr %.cachedtype55, align 8, !dbg !3355
  %53 = icmp eq ptr %52, %type56, !dbg !3355
  br i1 %53, label %cache_hit59, label %cache_miss57, !dbg !3355

cache_miss57:                                     ; preds = %if.exit52
  %ptradd58 = getelementptr inbounds i8, ptr %52, i64 16, !dbg !3355
  %54 = load ptr, ptr %ptradd58, align 8, !dbg !3355
  %55 = call ptr @.dyn_search(ptr %54, ptr @"$sel.write_to"), !dbg !3355
  store ptr %55, ptr %.inlinecache54, align 8, !dbg !3355
  store ptr %52, ptr %.cachedtype55, align 8, !dbg !3355
  br label %56, !dbg !3355

cache_hit59:                                      ; preds = %if.exit52
  %cache_hit_fn60 = load ptr, ptr %.inlinecache54, align 8, !dbg !3355
  br label %56, !dbg !3355

56:                                               ; preds = %cache_hit59, %cache_miss57
  %fn_phi61 = phi ptr [ %cache_hit_fn60, %cache_hit59 ], [ %55, %cache_miss57 ], !dbg !3355
  %i2b62 = icmp ne ptr %fn_phi61, null, !dbg !3355
  br i1 %i2b62, label %if.then63, label %if.exit85, !dbg !3355

if.then63:                                        ; preds = %56
  %ptradd65 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !3376
  %57 = load i64, ptr %ptradd65, align 8, !dbg !3376
  %58 = inttoptr i64 %57 to ptr, !dbg !3376
  %type68 = load ptr, ptr %.cachedtype67, align 8, !dbg !3355
  %59 = icmp eq ptr %58, %type68, !dbg !3355
  br i1 %59, label %cache_hit71, label %cache_miss69, !dbg !3355

cache_miss69:                                     ; preds = %if.then63
  %ptradd70 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !3355
  %60 = load ptr, ptr %ptradd70, align 8, !dbg !3355
  %61 = call ptr @.dyn_search(ptr %60, ptr @"$sel.write_to"), !dbg !3355
  store ptr %61, ptr %.inlinecache66, align 8, !dbg !3355
  store ptr %58, ptr %.cachedtype67, align 8, !dbg !3355
  br label %62, !dbg !3355

cache_hit71:                                      ; preds = %if.then63
  %cache_hit_fn72 = load ptr, ptr %.inlinecache66, align 8, !dbg !3355
  br label %62, !dbg !3355

62:                                               ; preds = %cache_hit71, %cache_miss69
  %fn_phi73 = phi ptr [ %cache_hit_fn72, %cache_hit71 ], [ %61, %cache_miss69 ], !dbg !3355
  %63 = icmp eq ptr %fn_phi73, null, !dbg !3355
  br i1 %63, label %missing_function74, label %match78, !dbg !3355

missing_function74:                               ; preds = %62
  store %"char[]" { ptr @.panic_msg.260, i64 45 }, ptr %indirectarg75, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg76, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg77, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64(ptr align 8 %indirectarg75, ptr align 8 %indirectarg76, ptr align 8 %indirectarg77, i32 156), !dbg !3376
  unreachable, !dbg !3376

match78:                                          ; preds = %62
  %65 = load ptr, ptr %1, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg80, ptr align 8 %2, i32 16, i1 false)
  %66 = call i64 %fn_phi73(ptr %retparam79, ptr %65, ptr align 8 %indirectarg80), !dbg !3376
  %not_err81 = icmp eq i64 %66, 0, !dbg !3376
  %67 = call i1 @llvm.expect.i1(i1 %not_err81, i1 true), !dbg !3376
  br i1 %67, label %after_check83, label %assign_optional82, !dbg !3376

assign_optional82:                                ; preds = %match78
  store i64 %66, ptr %reterr64, align 8, !dbg !3376
  br label %err_retblock84, !dbg !3376

after_check83:                                    ; preds = %match78
  %68 = load i64, ptr %retparam79, align 8, !dbg !3376
  store i64 %68, ptr %0, align 8, !dbg !3376
  ret i64 0, !dbg !3376

err_retblock84:                                   ; preds = %assign_optional82
  %69 = load i64, ptr %reterr64, align 8, !dbg !3376
  ret i64 %69, !dbg !3376

if.exit85:                                        ; preds = %56
  %ptradd86 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3377
  %70 = load i64, ptr %ptradd86, align 8, !dbg !3377
  %71 = inttoptr i64 %70 to ptr, !dbg !3377
  %type89 = load ptr, ptr %.cachedtype88, align 8, !dbg !3355
  %72 = icmp eq ptr %71, %type89, !dbg !3355
  br i1 %72, label %cache_hit92, label %cache_miss90, !dbg !3355

cache_miss90:                                     ; preds = %if.exit85
  %ptradd91 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !3355
  %73 = load ptr, ptr %ptradd91, align 8, !dbg !3355
  %74 = call ptr @.dyn_search(ptr %73, ptr @"$sel.read_to"), !dbg !3355
  store ptr %74, ptr %.inlinecache87, align 8, !dbg !3355
  store ptr %71, ptr %.cachedtype88, align 8, !dbg !3355
  br label %75, !dbg !3355

cache_hit92:                                      ; preds = %if.exit85
  %cache_hit_fn93 = load ptr, ptr %.inlinecache87, align 8, !dbg !3355
  br label %75, !dbg !3355

75:                                               ; preds = %cache_hit92, %cache_miss90
  %fn_phi94 = phi ptr [ %cache_hit_fn93, %cache_hit92 ], [ %74, %cache_miss90 ], !dbg !3355
  %i2b95 = icmp ne ptr %fn_phi94, null, !dbg !3355
  br i1 %i2b95, label %if.then96, label %if.exit118, !dbg !3355

if.then96:                                        ; preds = %75
  %ptradd98 = getelementptr inbounds i8, ptr %2, i64 8, !dbg !3377
  %76 = load i64, ptr %ptradd98, align 8, !dbg !3377
  %77 = inttoptr i64 %76 to ptr, !dbg !3377
  %type101 = load ptr, ptr %.cachedtype100, align 8, !dbg !3355
  %78 = icmp eq ptr %77, %type101, !dbg !3355
  br i1 %78, label %cache_hit104, label %cache_miss102, !dbg !3355

cache_miss102:                                    ; preds = %if.then96
  %ptradd103 = getelementptr inbounds i8, ptr %77, i64 16, !dbg !3355
  %79 = load ptr, ptr %ptradd103, align 8, !dbg !3355
  %80 = call ptr @.dyn_search(ptr %79, ptr @"$sel.read_to"), !dbg !3355
  store ptr %80, ptr %.inlinecache99, align 8, !dbg !3355
  store ptr %77, ptr %.cachedtype100, align 8, !dbg !3355
  br label %81, !dbg !3355

cache_hit104:                                     ; preds = %if.then96
  %cache_hit_fn105 = load ptr, ptr %.inlinecache99, align 8, !dbg !3355
  br label %81, !dbg !3355

81:                                               ; preds = %cache_hit104, %cache_miss102
  %fn_phi106 = phi ptr [ %cache_hit_fn105, %cache_hit104 ], [ %80, %cache_miss102 ], !dbg !3355
  %82 = icmp eq ptr %fn_phi106, null, !dbg !3355
  br i1 %82, label %missing_function107, label %match111, !dbg !3355

missing_function107:                              ; preds = %81
  store %"char[]" { ptr @.panic_msg.261, i64 44 }, ptr %indirectarg108, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg109, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg110, align 8
  %83 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %83(ptr align 8 %indirectarg108, ptr align 8 %indirectarg109, ptr align 8 %indirectarg110, i32 157), !dbg !3377
  unreachable, !dbg !3377

match111:                                         ; preds = %81
  %84 = load ptr, ptr %2, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg113, ptr align 8 %1, i32 16, i1 false)
  %85 = call i64 %fn_phi106(ptr %retparam112, ptr %84, ptr align 8 %indirectarg113), !dbg !3377
  %not_err114 = icmp eq i64 %85, 0, !dbg !3377
  %86 = call i1 @llvm.expect.i1(i1 %not_err114, i1 true), !dbg !3377
  br i1 %86, label %after_check116, label %assign_optional115, !dbg !3377

assign_optional115:                               ; preds = %match111
  store i64 %85, ptr %reterr97, align 8, !dbg !3377
  br label %err_retblock117, !dbg !3377

after_check116:                                   ; preds = %match111
  %87 = load i64, ptr %retparam112, align 8, !dbg !3377
  store i64 %87, ptr %0, align 8, !dbg !3377
  ret i64 0, !dbg !3377

err_retblock117:                                  ; preds = %assign_optional115
  %88 = load i64, ptr %reterr97, align 8, !dbg !3377
  ret i64 %88, !dbg !3377

if.exit118:                                       ; preds = %75
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in120, ptr align 8 %1, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst121, ptr align 8 %2, i32 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %literal, i8 0, i64 4096, i1 false)
  %89 = insertvalue %"char[]" undef, ptr %literal, 0
  %90 = insertvalue %"char[]" %89, i64 4096, 1
  store %"char[]" %90, ptr %buffer122, align 8
    #dbg_declare(ptr %total_copied124, !3378, !DIExpression(), !3380)
  store i64 0, ptr %total_copied124, align 8, !dbg !3380
  br label %loop.body125, !dbg !3382

loop.body125:                                     ; preds = %if.exit220, %if.exit118
    #dbg_declare(ptr %len126, !3383, !DIExpression(), !3386)
  %ptradd128 = getelementptr inbounds i8, ptr %in120, i64 8, !dbg !3386
  %91 = load i64, ptr %ptradd128, align 8, !dbg !3386
  %92 = inttoptr i64 %91 to ptr, !dbg !3386
  %type131 = load ptr, ptr %.cachedtype130, align 8, !dbg !3355
  %93 = icmp eq ptr %92, %type131, !dbg !3355
  br i1 %93, label %cache_hit134, label %cache_miss132, !dbg !3355

cache_miss132:                                    ; preds = %loop.body125
  %ptradd133 = getelementptr inbounds i8, ptr %92, i64 16, !dbg !3355
  %94 = load ptr, ptr %ptradd133, align 8, !dbg !3355
  %95 = call ptr @.dyn_search(ptr %94, ptr @"$sel.read"), !dbg !3355
  store ptr %95, ptr %.inlinecache129, align 8, !dbg !3355
  store ptr %92, ptr %.cachedtype130, align 8, !dbg !3355
  br label %96, !dbg !3355

cache_hit134:                                     ; preds = %loop.body125
  %cache_hit_fn135 = load ptr, ptr %.inlinecache129, align 8, !dbg !3355
  br label %96, !dbg !3355

96:                                               ; preds = %cache_hit134, %cache_miss132
  %fn_phi136 = phi ptr [ %cache_hit_fn135, %cache_hit134 ], [ %95, %cache_miss132 ], !dbg !3355
  %97 = icmp eq ptr %fn_phi136, null, !dbg !3355
  br i1 %97, label %missing_function137, label %match141, !dbg !3355

missing_function137:                              ; preds = %96
  store %"char[]" { ptr @.panic_msg.208, i64 41 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg139, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg140, align 8
  %98 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %98(ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, ptr align 8 %indirectarg140, i32 174), !dbg !3386
  unreachable, !dbg !3386

match141:                                         ; preds = %96
  %99 = load ptr, ptr %in120, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg143, ptr align 8 %buffer122, i32 16, i1 false)
  %100 = call i64 %fn_phi136(ptr %retparam142, ptr %99, ptr align 8 %indirectarg143), !dbg !3386
  %not_err144 = icmp eq i64 %100, 0, !dbg !3386
  %101 = call i1 @llvm.expect.i1(i1 %not_err144, i1 true), !dbg !3386
  br i1 %101, label %after_check146, label %assign_optional145, !dbg !3386

assign_optional145:                               ; preds = %match141
  store i64 %100, ptr %len.f127, align 8, !dbg !3386
  br label %after_assign147, !dbg !3386

after_check146:                                   ; preds = %match141
  %102 = load i64, ptr %retparam142, align 8, !dbg !3386
  store i64 %102, ptr %len126, align 8, !dbg !3386
  store i64 0, ptr %len.f127, align 8, !dbg !3386
  br label %after_assign147, !dbg !3386

after_assign147:                                  ; preds = %after_check146, %assign_optional145
    #dbg_declare(ptr %err148, !3387, !DIExpression(), !3388)
  br label %testblock149, !dbg !3388

testblock149:                                     ; preds = %after_assign147
  %optval150 = load i64, ptr %len.f127, align 8, !dbg !3388
  %not_err151 = icmp eq i64 %optval150, 0, !dbg !3388
  %103 = call i1 @llvm.expect.i1(i1 %not_err151, i1 true), !dbg !3388
  br i1 %103, label %after_check153, label %assign_optional152, !dbg !3388

assign_optional152:                               ; preds = %testblock149
  store i64 %optval150, ptr %err148, align 8, !dbg !3388
  br label %end_block154, !dbg !3388

after_check153:                                   ; preds = %testblock149
  store i64 0, ptr %err148, align 8, !dbg !3388
  br label %end_block154, !dbg !3388

end_block154:                                     ; preds = %after_check153, %assign_optional152
  %104 = load i64, ptr %err148, align 8, !dbg !3388
  %neq155 = icmp ne i64 %104, 0, !dbg !3388
  br i1 %neq155, label %if.then156, label %if.exit163, !dbg !3388

if.then156:                                       ; preds = %end_block154
  store i64 %104, ptr %switch157, align 8
  br label %switch.entry158

switch.entry158:                                  ; preds = %if.then156
  %105 = load i64, ptr %switch157, align 8
  %eq159 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %105, !dbg !3389
  br i1 %eq159, label %switch.case160, label %next_if161, !dbg !3389

switch.case160:                                   ; preds = %switch.entry158
  %106 = load i64, ptr %total_copied124, align 8, !dbg !3390
  store i64 %106, ptr %blockret123, align 8, !dbg !3390
  br label %expr_block.exit221, !dbg !3390

next_if161:                                       ; preds = %switch.entry158
  br label %switch.default162, !dbg !3390

switch.default162:                                ; preds = %next_if161
  %107 = load i64, ptr %err148, align 8, !dbg !3392
  store i64 %107, ptr %reterr119, align 8, !dbg !3392
  br label %err_retblock222, !dbg !3392

if.exit163:                                       ; preds = %end_block154
  %108 = load i64, ptr %len126, align 8, !dbg !3394
  %i2nb164 = icmp eq i64 %108, 0, !dbg !3394
  br i1 %i2nb164, label %if.then165, label %if.exit166, !dbg !3394

if.then165:                                       ; preds = %if.exit163
  %109 = load i64, ptr %total_copied124, align 8, !dbg !3394
  store i64 %109, ptr %blockret123, align 8, !dbg !3394
  br label %expr_block.exit221, !dbg !3394

if.exit166:                                       ; preds = %if.exit163
    #dbg_declare(ptr %written167, !3395, !DIExpression(), !3396)
  %110 = load %"char[]", ptr %buffer122, align 8, !dbg !3396
  %111 = extractvalue %"char[]" %110, 0, !dbg !3396
  %112 = extractvalue %"char[]" %110, 1, !dbg !3396
  %gt169 = icmp ugt i64 0, %112, !dbg !3396
  %113 = call i1 @llvm.expect.i1(i1 %gt169, i1 false), !dbg !3396
  br i1 %113, label %panic170, label %checkok180, !dbg !3396

checkok180:                                       ; preds = %if.exit166
  %114 = load i64, ptr %len126, align 8, !dbg !3396
  %add181 = add i64 0, %114, !dbg !3396
  %lt182 = icmp ult i64 %112, %add181, !dbg !3396
  %sub183 = sub i64 %add181, 1, !dbg !3396
  %115 = call i1 @llvm.expect.i1(i1 %lt182, i1 false), !dbg !3396
  br i1 %115, label %panic184, label %checkok194, !dbg !3396

checkok194:                                       ; preds = %checkok180
  %size195 = sub i64 %add181, 0, !dbg !3396
  %116 = insertvalue %"char[]" undef, ptr %111, 0, !dbg !3396
  %117 = insertvalue %"char[]" %116, i64 %size195, 1, !dbg !3396
  %ptradd196 = getelementptr inbounds i8, ptr %dst121, i64 8, !dbg !3396
  %118 = load i64, ptr %ptradd196, align 8, !dbg !3396
  %119 = inttoptr i64 %118 to ptr, !dbg !3396
  %type199 = load ptr, ptr %.cachedtype198, align 8, !dbg !3355
  %120 = icmp eq ptr %119, %type199, !dbg !3355
  br i1 %120, label %cache_hit202, label %cache_miss200, !dbg !3355

cache_miss200:                                    ; preds = %checkok194
  %ptradd201 = getelementptr inbounds i8, ptr %119, i64 16, !dbg !3355
  %121 = load ptr, ptr %ptradd201, align 8, !dbg !3355
  %122 = call ptr @.dyn_search(ptr %121, ptr @"$sel.write"), !dbg !3355
  store ptr %122, ptr %.inlinecache197, align 8, !dbg !3355
  store ptr %119, ptr %.cachedtype198, align 8, !dbg !3355
  br label %123, !dbg !3355

cache_hit202:                                     ; preds = %checkok194
  %cache_hit_fn203 = load ptr, ptr %.inlinecache197, align 8, !dbg !3355
  br label %123, !dbg !3355

123:                                              ; preds = %cache_hit202, %cache_miss200
  %fn_phi204 = phi ptr [ %cache_hit_fn203, %cache_hit202 ], [ %122, %cache_miss200 ], !dbg !3355
  %124 = icmp eq ptr %fn_phi204, null, !dbg !3355
  br i1 %124, label %missing_function205, label %match209, !dbg !3355

missing_function205:                              ; preds = %123
  store %"char[]" { ptr @.panic_msg.51, i64 42 }, ptr %indirectarg206, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg207, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg208, align 8
  %125 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %125(ptr align 8 %indirectarg206, ptr align 8 %indirectarg207, ptr align 8 %indirectarg208, i32 181), !dbg !3396
  unreachable, !dbg !3396

match209:                                         ; preds = %123
  %126 = load ptr, ptr %dst121, align 8
  store %"char[]" %117, ptr %indirectarg211, align 8
  %127 = call i64 %fn_phi204(ptr %retparam210, ptr %126, ptr align 8 %indirectarg211), !dbg !3396
  %not_err212 = icmp eq i64 %127, 0, !dbg !3396
  %128 = call i1 @llvm.expect.i1(i1 %not_err212, i1 true), !dbg !3396
  br i1 %128, label %after_check214, label %assign_optional213, !dbg !3396

assign_optional213:                               ; preds = %match209
  store i64 %127, ptr %error_var168, align 8, !dbg !3396
  br label %guard_block215, !dbg !3396

after_check214:                                   ; preds = %match209
  br label %noerr_block216, !dbg !3396

guard_block215:                                   ; preds = %assign_optional213
  %129 = load i64, ptr %error_var168, align 8, !dbg !3396
  store i64 %129, ptr %reterr119, align 8, !dbg !3396
  br label %err_retblock222, !dbg !3396

noerr_block216:                                   ; preds = %after_check214
  %130 = load i64, ptr %retparam210, align 8, !dbg !3396
  store i64 %130, ptr %written167, align 8, !dbg !3396
  %131 = load i64, ptr %total_copied124, align 8, !dbg !3397
  %132 = load i64, ptr %len126, align 8, !dbg !3397
  %add217 = add i64 %131, %132, !dbg !3397
  store i64 %add217, ptr %total_copied124, align 8, !dbg !3397
  %133 = load i64, ptr %written167, align 8, !dbg !3398
  %134 = load i64, ptr %len126, align 8, !dbg !3398
  %neq218 = icmp ne i64 %133, %134, !dbg !3398
  br i1 %neq218, label %if.then219, label %if.exit220, !dbg !3398

if.then219:                                       ; preds = %noerr_block216
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr119, align 8, !dbg !3398
  br label %err_retblock222, !dbg !3398

if.exit220:                                       ; preds = %noerr_block216
  br label %loop.body125, !dbg !3398

expr_block.exit221:                               ; preds = %if.then165, %switch.case160
  %135 = load i64, ptr %blockret123, align 8, !dbg !3398
  store i64 %135, ptr %0, align 8, !dbg !3398
  ret i64 0, !dbg !3398

err_retblock222:                                  ; preds = %if.then219, %guard_block215, %switch.default162
  %136 = load i64, ptr %reterr119, align 8, !dbg !3398
  ret i64 %136, !dbg !3398

panic:                                            ; preds = %if.exit11
  store i64 %26, ptr %taddr, align 8
  %137 = insertvalue %any undef, ptr %taddr, 0
  %138 = insertvalue %any %137, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %139 = insertvalue %any undef, ptr %taddr12, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg15, align 8
  store %any %138, ptr %varargslots, align 16
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %140, ptr %ptradd16, align 16
  %141 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %141, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg17, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, i32 181, ptr align 8 %indirectarg17), !dbg !3373
  unreachable, !dbg !3373

panic18:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr19, align 8
  %142 = insertvalue %any undef, ptr %taddr19, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr20, align 8
  %144 = insertvalue %any undef, ptr %taddr20, 0
  %145 = insertvalue %any %144, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg23, align 8
  store %any %143, ptr %varargslots24, align 16
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %145, ptr %ptradd25, align 16
  %146 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %146, i64 2, 1
  store %"any[]" %"$$temp26", ptr %indirectarg27, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 181, ptr align 8 %indirectarg27), !dbg !3373
  unreachable, !dbg !3373

panic170:                                         ; preds = %if.exit166
  store i64 %112, ptr %taddr171, align 8
  %147 = insertvalue %any undef, ptr %taddr171, 0
  %148 = insertvalue %any %147, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr172, align 8
  %149 = insertvalue %any undef, ptr %taddr172, 0
  %150 = insertvalue %any %149, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.185, i64 61 }, ptr %indirectarg173, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg174, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg175, align 8
  store %any %148, ptr %varargslots176, align 16
  %ptradd177 = getelementptr inbounds i8, ptr %varargslots176, i64 16
  store %any %150, ptr %ptradd177, align 16
  %151 = insertvalue %"any[]" undef, ptr %varargslots176, 0
  %"$$temp178" = insertvalue %"any[]" %151, i64 2, 1
  store %"any[]" %"$$temp178", ptr %indirectarg179, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg173, ptr align 8 %indirectarg174, ptr align 8 %indirectarg175, i32 181, ptr align 8 %indirectarg179), !dbg !3396
  unreachable, !dbg !3396

panic184:                                         ; preds = %checkok180
  store i64 %sub183, ptr %taddr185, align 8
  %152 = insertvalue %any undef, ptr %taddr185, 0
  %153 = insertvalue %any %152, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %112, ptr %taddr186, align 8
  %154 = insertvalue %any undef, ptr %taddr186, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.50, i64 60 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.52, i64 9 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.259, i64 7 }, ptr %indirectarg189, align 8
  store %any %153, ptr %varargslots190, align 16
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %155, ptr %ptradd191, align 16
  %156 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %156, i64 2, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 181, ptr align 8 %indirectarg193), !dbg !3396
  unreachable, !dbg !3396
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.io.wrap_bytes(ptr noalias sret(%ByteReader) align 8 %0, ptr align 8 %1) #0 comdat !dbg !3399 {
entry:
  %literal = alloca %ByteReader, align 8
    #dbg_declare(ptr %1, !3402, !DIExpression(), !3403)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %1, i32 16, i1 false), !dbg !3404
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3404
  store i64 0, ptr %ptradd, align 8, !dbg !3404
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !3404
  ret void, !dbg !3404
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr comdat {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bswap.i32(i32) #4

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.OnStackAllocator.init(ptr, ptr align 8, ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.OnStackAllocator.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.core.types.TypeKind.is_int(i8) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.string.ZString.str_view(ptr noalias sret(%"char[]") align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.dstring.DString.str_view(ptr noalias sret(%"char[]") align 8, ptr) #0

; Function Attrs: nounwind ssp uwtable
declare zeroext i8 @std.ascii.char.is_digit(i8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.string.conv.utf8_codepoints(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare double @std.math._frexp(double, ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #4

; Function Attrs: nounwind ssp uwtable
declare i32 @putchar(i32) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.io.File.flush(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.io.File.write_byte(ptr, i8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.io.file.from_handle(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @__acrt_iob_func(i32) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare i64 @std.core.String.index_of(ptr, ptr align 8, ptr align 8) #0

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.ReflectedParam", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.core.ReflectedParam.to_format", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.core.ReflectedParam.to_format", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.io.ReadBuffer.close", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.io.ReadBuffer.read", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ReadBuffer", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ReadBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.io.WriteBuffer.close", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.close", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.io.WriteBuffer.flush", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.flush", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.io.WriteBuffer.write", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.WriteBuffer", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.WriteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.io.ByteBuffer.write", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.io.ByteBuffer.read", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.io.ByteBuffer.seek", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.seek", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteBuffer", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.io.ByteBuffer.available", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteBuffer.available", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.io.ByteReader.len", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.len", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.io.ByteReader.read", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.io.ByteReader.read_byte", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.pushback_byte", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.io.ByteReader.seek", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.seek", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.io.ByteReader.write_to", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.write_to", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteReader", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.io.ByteReader.available", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteReader.available", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.io.ByteWriter.destroy", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.destroy", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.io.ByteWriter.write", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.io.ByteWriter.write_byte", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.ByteWriter", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.io.ByteWriter.read_from", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.ByteWriter.read_from", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.io.LimitReader.close", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.close", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.io.LimitReader.read", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.io.LimitReader.read_byte", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.LimitReader", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.io.LimitReader.available", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.LimitReader.available", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.io.MultiReader.read", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiReader", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.io.MultiReader.read_byte", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.io.MultiWriter.write", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.MultiWriter", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.io.MultiWriter.write_byte", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.MultiWriter.write_byte", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.io.Scanner.flush", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.flush", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.io.Scanner.close", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.close", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.io.Scanner.read", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.Scanner", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.io.Scanner.read_byte", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.Scanner.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.io.TeeReader.read", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.io.TeeReader", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.io.TeeReader.read_byte", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.io.TeeReader.read_byte", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!36, !37, !38, !39, !40, !41}
!llvm.dbg.cu = !{!42}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "WRITER_BITS", linkageName: "std.io.WRITER_BITS", scope: !2, file: !2, line: 50, type: !3, isLocal: false, isDefinition: true, align: 4)
!2 = !DIFile(filename: "bits.c3", directory: "C:/Program Files/c3c/lib/std/io")
!3 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "PRINTF_NTOA_BUFFER_SIZE", linkageName: "std.io.PRINTF_NTOA_BUFFER_SIZE", scope: !6, file: !6, line: 5, type: !3, isLocal: false, isDefinition: true, align: 4)
!6 = !DIFile(filename: "formatter.c3", directory: "C:/Program Files/c3c/lib/std/io")
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(name: "XDIGITS_H", linkageName: "std.io.XDIGITS_H", scope: !9, file: !9, line: 4, type: !10, isLocal: false, isDefinition: true, align: 16)
!9 = !DIFile(filename: "formatter_private.c3", directory: "C:/Program Files/c3c/lib/std/io")
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 128, align: 8, elements: !12)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!12 = !{!13}
!13 = !DISubrange(count: 16, lowerBound: 0)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "XDIGITS_L", linkageName: "std.io.XDIGITS_L", scope: !9, file: !9, line: 5, type: !10, isLocal: false, isDefinition: true, align: 16)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BUF_SIZE", linkageName: "floatformat.BUF_SIZE", scope: !9, file: !9, line: 200, type: !3, isLocal: true, isDefinition: true, align: 4)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "file", linkageName: "stdout.file", scope: !20, file: !20, line: 356, type: !21, isLocal: true, isDefinition: true, align: 8)
!20 = !DIFile(filename: "io.c3", directory: "C:/Program Files/c3c/lib/std/io")
!21 = !DICompositeType(tag: DW_TAG_structure_type, name: "File", scope: !20, file: !20, line: 4, size: 64, align: 64, elements: !22, identifier: "std.io.File")
!22 = !{!23}
!23 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !21, file: !20, line: 6, baseType: !24, size: 64, align: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "CFile", scope: !20, file: !20, line: 354, baseType: !25, align: 8)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "file", linkageName: "stderr.file", scope: !20, file: !20, line: 368, type: !21, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "file", linkageName: "stdin.file", scope: !20, file: !20, line: 380, type: !21, isLocal: true, isDefinition: true, align: 8)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "MAX_VARS", linkageName: "std.io.MAX_VARS", scope: !32, file: !32, line: 187, type: !33, isLocal: true, isDefinition: true, align: 1)
!32 = !DIFile(filename: "stream.c3", directory: "C:/Program Files/c3c/lib/std/io")
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 72, align: 8, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 9, lowerBound: 0)
!36 = !{i32 1, !"CodeView", i32 1}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{i32 2, !"wchar_size", i32 2}
!39 = !{i32 4, !"PIC Level", i32 2}
!40 = !{i32 1, !"uwtable", i32 2}
!41 = !{i32 1, !"MaxTLSAlign", i32 65536}
!42 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !43, globals: !79, splitDebugInlining: false)
!43 = !{!44, !50, !56}
!44 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "FloatFormatting", scope: !9, file: !9, line: 184, baseType: !3, size: 32, align: 32, elements: !45)
!45 = !{!46, !47, !48, !49}
!46 = !DIEnumerator(name: "FLOAT", value: 0)
!47 = !DIEnumerator(name: "EXPONENTIAL", value: 1)
!48 = !DIEnumerator(name: "ADAPTIVE", value: 2)
!49 = !DIEnumerator(name: "HEX", value: 3)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Seek", scope: !51, file: !51, line: 7, baseType: !3, size: 32, align: 32, elements: !52)
!51 = !DIFile(filename: "bytebuffer.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!52 = !{!53, !54, !55}
!53 = !DIEnumerator(name: "SET", value: 0)
!54 = !DIEnumerator(name: "CURSOR", value: 1)
!55 = !DIEnumerator(name: "END", value: 2)
!56 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TypeKind", scope: !6, file: !6, line: 349, baseType: !11, size: 8, align: 8, elements: !57)
!57 = !{!58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78}
!58 = !DIEnumerator(name: "VOID", value: 0, isUnsigned: true)
!59 = !DIEnumerator(name: "BOOL", value: 1, isUnsigned: true)
!60 = !DIEnumerator(name: "SIGNED_INT", value: 2, isUnsigned: true)
!61 = !DIEnumerator(name: "UNSIGNED_INT", value: 3, isUnsigned: true)
!62 = !DIEnumerator(name: "FLOAT", value: 4, isUnsigned: true)
!63 = !DIEnumerator(name: "TYPEID", value: 5, isUnsigned: true)
!64 = !DIEnumerator(name: "ANYFAULT", value: 6, isUnsigned: true)
!65 = !DIEnumerator(name: "ANY", value: 7, isUnsigned: true)
!66 = !DIEnumerator(name: "ENUM", value: 8, isUnsigned: true)
!67 = !DIEnumerator(name: "FAULT", value: 9, isUnsigned: true)
!68 = !DIEnumerator(name: "STRUCT", value: 10, isUnsigned: true)
!69 = !DIEnumerator(name: "UNION", value: 11, isUnsigned: true)
!70 = !DIEnumerator(name: "BITSTRUCT", value: 12, isUnsigned: true)
!71 = !DIEnumerator(name: "FUNC", value: 13, isUnsigned: true)
!72 = !DIEnumerator(name: "OPTIONAL", value: 14, isUnsigned: true)
!73 = !DIEnumerator(name: "ARRAY", value: 15, isUnsigned: true)
!74 = !DIEnumerator(name: "SLICE", value: 16, isUnsigned: true)
!75 = !DIEnumerator(name: "VECTOR", value: 17, isUnsigned: true)
!76 = !DIEnumerator(name: "DISTINCT", value: 18, isUnsigned: true)
!77 = !DIEnumerator(name: "POINTER", value: 19, isUnsigned: true)
!78 = !DIEnumerator(name: "INTERFACE", value: 20, isUnsigned: true)
!79 = !{!0, !4, !7, !14, !16, !18, !26, !28, !30}
!80 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitReader.init", scope: !2, file: !2, line: 10, type: !81, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!81 = !DISubroutineType(types: !82)
!82 = !{null, !83, !87}
!83 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitReader*", baseType: !84, size: 64, align: 64, dwarfAddressSpace: 0)
!84 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitReader", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !85, identifier: "std.io.BitReader")
!85 = !{!86, !92, !94}
!86 = !DIDerivedType(tag: DW_TAG_member, name: "reader", scope: !84, file: !2, line: 5, baseType: !87, size: 128, align: 64)
!87 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream", size: 128, align: 64, elements: !88, identifier: "InStream")
!88 = !{!89, !90}
!89 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !87, baseType: !25, size: 64, align: 64)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !87, baseType: !91, size: 64, align: 64, offset: 64)
!91 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !84, file: !2, line: 6, baseType: !93, size: 32, align: 32, offset: 128)
!93 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !84, file: !2, line: 7, baseType: !93, size: 32, align: 32, offset: 160)
!95 = !{}
!96 = !DILocation(line: 11, scope: !80)
!97 = !DILocalVariable(name: "self", arg: 1, scope: !80, file: !2, line: 10, type: !83)
!98 = !DILocation(line: 10, scope: !80)
!99 = !DILocalVariable(name: "byte_reader", arg: 2, scope: !80, file: !2, line: 10, type: !87)
!100 = !DILocation(line: 12, scope: !80)
!101 = distinct !DISubprogram(name: "clear", linkageName: "std.io.BitReader.clear", scope: !2, file: !2, line: 15, type: !102, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!102 = !DISubroutineType(types: !103)
!103 = !{null, !83}
!104 = !DILocation(line: 16, scope: !101)
!105 = !DILocalVariable(name: "self", arg: 1, scope: !101, file: !2, line: 15, type: !83)
!106 = !DILocation(line: 15, scope: !101)
!107 = !DILocation(line: 17, scope: !101)
!108 = distinct !DISubprogram(name: "read_bits", linkageName: "std.io.BitReader.read_bits", scope: !2, file: !2, line: 24, type: !109, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !113, !83, !93}
!111 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !112)
!112 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !11, size: 64, align: 64, dwarfAddressSpace: 0)
!114 = !DILocation(line: 25, scope: !108)
!115 = !DILocalVariable(name: "self", arg: 1, scope: !108, file: !2, line: 24, type: !83)
!116 = !DILocation(line: 24, scope: !108)
!117 = !DILocalVariable(name: "nbits", arg: 2, scope: !108, file: !2, line: 24, type: !93)
!118 = !DILocation(line: 21, scope: !119)
!119 = distinct !DILexicalBlock(scope: !108, file: !2, line: 25, column: 1)
!120 = !DILocation(line: 22, scope: !119)
!121 = !DILocalVariable(name: "bits", scope: !108, file: !2, line: 26, type: !93, align: 4)
!122 = !DILocation(line: 26, scope: !108)
!123 = !DILocation(line: 27, scope: !108)
!124 = !DILocalVariable(name: "c", scope: !125, file: !2, line: 30, type: !11, align: 1)
!125 = distinct !DILexicalBlock(scope: !108, file: !2, line: 28, column: 2)
!126 = !DILocation(line: 30, scope: !125)
!127 = !DILocation(line: 31, scope: !125)
!128 = !DILocation(line: 32, scope: !125)
!129 = !DILocation(line: 33, scope: !125)
!130 = !DILocation(line: 34, scope: !125)
!131 = !DILocation(line: 36, scope: !108)
!132 = !DILocalVariable(name: "mask", scope: !108, file: !2, line: 37, type: !93, align: 4)
!133 = !DILocation(line: 37, scope: !108)
!134 = !DILocation(line: 38, scope: !108)
!135 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitWriter.init", scope: !2, file: !2, line: 52, type: !136, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !138, !142}
!138 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitWriter*", baseType: !139, size: 64, align: 64, dwarfAddressSpace: 0)
!139 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitWriter", scope: !2, file: !2, line: 41, size: 192, align: 64, elements: !140, identifier: "std.io.BitWriter")
!140 = !{!141, !146, !147}
!141 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !139, file: !2, line: 43, baseType: !142, size: 128, align: 64)
!142 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !143, identifier: "OutStream")
!143 = !{!144, !145}
!144 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !142, baseType: !25, size: 64, align: 64)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !142, baseType: !91, size: 64, align: 64, offset: 64)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !139, file: !2, line: 44, baseType: !93, size: 32, align: 32, offset: 128)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !139, file: !2, line: 45, baseType: !93, size: 32, align: 32, offset: 160)
!148 = !DILocation(line: 53, scope: !135)
!149 = !DILocalVariable(name: "self", arg: 1, scope: !135, file: !2, line: 52, type: !138)
!150 = !DILocation(line: 52, scope: !135)
!151 = !DILocalVariable(name: "byte_writer", arg: 2, scope: !135, file: !2, line: 52, type: !142)
!152 = !DILocation(line: 54, scope: !135)
!153 = distinct !DISubprogram(name: "flush", linkageName: "std.io.BitWriter.flush", scope: !2, file: !2, line: 57, type: !154, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!154 = !DISubroutineType(types: !155)
!155 = !{!111, !25, !138}
!156 = !DILocation(line: 58, scope: !153)
!157 = !DILocalVariable(name: "self", arg: 1, scope: !153, file: !2, line: 57, type: !138)
!158 = !DILocation(line: 57, scope: !153)
!159 = !DILocation(line: 59, scope: !153)
!160 = !DILocalVariable(name: "padding", scope: !153, file: !2, line: 61, type: !3, align: 4)
!161 = !DILocation(line: 61, scope: !153)
!162 = !DILocalVariable(name: "bits", scope: !153, file: !2, line: 62, type: !93, align: 4)
!163 = !DILocation(line: 62, scope: !153)
!164 = !DILocalVariable(name: "n", scope: !153, file: !2, line: 63, type: !93, align: 4)
!165 = !DILocation(line: 63, scope: !153)
!166 = !DILocalVariable(name: "buffer", scope: !153, file: !2, line: 64, type: !167, align: 1)
!167 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 32, align: 8, elements: !168)
!168 = !{!169}
!169 = !DISubrange(count: 4, lowerBound: 0)
!170 = !DILocation(line: 64, scope: !153)
!171 = !DILocation(line: 172, scope: !172, inlinedAt: !174)
!172 = distinct !DISubprogram(name: "is_arrayptr_or_slice_of_char", linkageName: "is_arrayptr_or_slice_of_char", scope: !173, file: !173, line: 165, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!173 = !DIFile(filename: "bitorder.c3", directory: "C:/Program Files/c3c/lib/std/core")
!174 = !DILocation(line: 107, scope: !175, inlinedAt: !177)
!175 = distinct !DILexicalBlock(scope: !176, file: !173, line: 111, column: 1)
!176 = distinct !DISubprogram(name: "write", linkageName: "write", scope: !173, file: !173, line: 110, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!177 = !DILocation(line: 65, scope: !153)
!178 = !DILocalVariable(name: "s", scope: !176, file: !2, line: 112, type: !179, align: 8)
!179 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !180, identifier: "char[]")
!180 = !{!181, !182}
!181 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !179, baseType: !113, size: 64, align: 64)
!182 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !179, baseType: !183, size: 64, align: 64, offset: 64)
!183 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !184)
!184 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!185 = !DILocation(line: 112, scope: !176, inlinedAt: !177)
!186 = !DILocation(line: 115, scope: !176, inlinedAt: !177)
!187 = !DILocation(line: 119, scope: !176, inlinedAt: !177)
!188 = !DILocation(line: 212, scope: !189, inlinedAt: !187)
!189 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !190, file: !190, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!190 = !DIFile(filename: "builtin.c3", directory: "C:/Program Files/c3c/lib/std/core")
!191 = !DILocation(line: 66, scope: !153)
!192 = !DILocation(line: 101, scope: !193, inlinedAt: !191)
!193 = distinct !DISubprogram(name: "write_all", linkageName: "write_all", scope: !32, file: !32, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!194 = !DILocalVariable(name: "n", scope: !193, file: !2, line: 102, type: !183, align: 8)
!195 = !DILocation(line: 102, scope: !193, inlinedAt: !191)
!196 = !DILocation(line: 103, scope: !193, inlinedAt: !191)
!197 = !DILocation(line: 104, scope: !193, inlinedAt: !191)
!198 = !DILocation(line: 67, scope: !153)
!199 = distinct !DISubprogram(name: "write_bits", linkageName: "std.io.BitWriter.write_bits", scope: !2, file: !2, line: 73, type: !200, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!200 = !DISubroutineType(types: !201)
!201 = !{!111, !25, !138, !93, !93}
!202 = !DILocation(line: 74, scope: !199)
!203 = !DILocalVariable(name: "self", arg: 1, scope: !199, file: !2, line: 73, type: !138)
!204 = !DILocation(line: 73, scope: !199)
!205 = !DILocalVariable(name: "bits", arg: 2, scope: !199, file: !2, line: 73, type: !93)
!206 = !DILocalVariable(name: "nbits", arg: 3, scope: !199, file: !2, line: 73, type: !93)
!207 = !DILocation(line: 71, scope: !208)
!208 = distinct !DILexicalBlock(scope: !199, file: !2, line: 74, column: 1)
!209 = !DILocation(line: 75, scope: !199)
!210 = !DILocation(line: 76, scope: !199)
!211 = !DILocation(line: 76, scope: !212)
!212 = distinct !DILexicalBlock(scope: !199, file: !2, line: 76, column: 2)
!213 = !DILocalVariable(name: "to_push", scope: !214, file: !2, line: 78, type: !93, align: 4)
!214 = distinct !DILexicalBlock(scope: !212, file: !2, line: 77, column: 2)
!215 = !DILocation(line: 78, scope: !214)
!216 = !DILocalVariable(name: "bits_to_push", scope: !214, file: !2, line: 79, type: !93, align: 4)
!217 = !DILocation(line: 79, scope: !214)
!218 = !DILocation(line: 81, scope: !214)
!219 = !DILocation(line: 82, scope: !214)
!220 = !DILocation(line: 83, scope: !214)
!221 = !DILocation(line: 84, scope: !214)
!222 = !DILocation(line: 86, scope: !214)
!223 = !DILocation(line: 89, scope: !199)
!224 = !DILocation(line: 91, scope: !199)
!225 = !DILocation(line: 92, scope: !199)
!226 = !DILocation(line: 93, scope: !199)
!227 = distinct !DISubprogram(name: "to_format", linkageName: "std.core.ReflectedParam.to_format", scope: !6, file: !6, line: 61, type: !228, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!228 = !DISubroutineType(types: !229)
!229 = !{!111, !230, !231, !237}
!230 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !183, size: 64, align: 64, dwarfAddressSpace: 0)
!231 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReflectedParam*", baseType: !232, size: 64, align: 64, dwarfAddressSpace: 0)
!232 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReflectedParam", scope: !6, file: !6, line: 1, size: 192, align: 64, elements: !233, identifier: "ReflectedParam")
!233 = !{!234, !236}
!234 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !232, file: !6, baseType: !235, size: 128, align: 64)
!235 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !179)
!236 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !232, file: !6, baseType: !91, size: 64, align: 64, offset: 128)
!237 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Formatter*", baseType: !238, size: 64, align: 64, dwarfAddressSpace: 0)
!238 = !DICompositeType(tag: DW_TAG_structure_type, name: "Formatter", scope: !6, file: !6, line: 71, size: 384, align: 64, elements: !239, identifier: "std.io.Formatter")
!239 = !{!240, !241, !246}
!240 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !238, file: !6, line: 73, baseType: !25, size: 64, align: 64)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "out_fn", scope: !238, file: !6, line: 74, baseType: !242, size: 64, align: 64, offset: 64)
!242 = !DIDerivedType(tag: DW_TAG_typedef, name: "OutputFn", scope: !6, file: !6, line: 23, baseType: !243, align: 8)
!243 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutputFn", baseType: !244, size: 64, align: 64, dwarfAddressSpace: 0)
!244 = !DISubroutineType(types: !245)
!245 = !{!111, !25, !25, !11}
!246 = !DIDerivedType(tag: DW_TAG_member, scope: !238, file: !6, line: 75, baseType: !247, size: 256, align: 64, offset: 128)
!247 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !238, file: !6, line: 75, size: 256, align: 64, elements: !248)
!248 = !{!249, !250, !251, !252, !253}
!249 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !247, file: !6, line: 77, baseType: !93, size: 32, align: 32)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !247, file: !6, line: 78, baseType: !93, size: 32, align: 32, offset: 32)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !247, file: !6, line: 79, baseType: !93, size: 32, align: 32, offset: 64)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !247, file: !6, line: 80, baseType: !183, size: 64, align: 64, offset: 128)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "first_fault", scope: !247, file: !6, line: 81, baseType: !111, size: 64, align: 64, offset: 192)
!254 = !DILocation(line: 62, scope: !227)
!255 = !DILocalVariable(name: "self", arg: 1, scope: !227, file: !6, line: 61, type: !231)
!256 = !DILocation(line: 61, scope: !227)
!257 = !DILocalVariable(name: "f", arg: 2, scope: !227, file: !6, line: 61, type: !237)
!258 = !DILocation(line: 63, scope: !227)
!259 = distinct !DISubprogram(name: "printf", linkageName: "std.io.Formatter.printf", scope: !6, file: !6, line: 66, type: !260, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!260 = !DISubroutineType(types: !261)
!261 = !{!111, !230, !237, !235, !262}
!262 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !263, identifier: "any[]")
!263 = !{!264, !270}
!264 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !262, baseType: !265, size: 64, align: 64)
!265 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !266, size: 64, align: 64, dwarfAddressSpace: 0)
!266 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !267, identifier: "any")
!267 = !{!268, !269}
!268 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !266, baseType: !25, size: 64, align: 64)
!269 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !266, baseType: !91, size: 64, align: 64, offset: 64)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !262, baseType: !183, size: 64, align: 64, offset: 64)
!271 = !DILocation(line: 67, scope: !259)
!272 = !DILocalVariable(name: "self", arg: 1, scope: !259, file: !6, line: 66, type: !237)
!273 = !DILocation(line: 66, scope: !259)
!274 = !DILocalVariable(name: "format", arg: 2, scope: !259, file: !6, line: 66, type: !235)
!275 = !DILocalVariable(name: "args", arg: 3, scope: !259, file: !6, line: 66, type: !262)
!276 = !DILocation(line: 68, scope: !259)
!277 = distinct !DISubprogram(name: "init", linkageName: "std.io.Formatter.init", scope: !6, file: !6, line: 96, type: !278, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!278 = !DISubroutineType(types: !279)
!279 = !{null, !237, !243, !25}
!280 = !DILocation(line: 97, scope: !277)
!281 = !DILocalVariable(name: "self", arg: 1, scope: !277, file: !6, line: 96, type: !237)
!282 = !DILocation(line: 96, scope: !277)
!283 = !DILocalVariable(name: "out_fn", arg: 2, scope: !277, file: !6, line: 96, type: !242)
!284 = !DILocalVariable(name: "data", arg: 3, scope: !277, file: !6, line: 96, type: !25)
!285 = !DILocation(line: 98, scope: !277)
!286 = distinct !DISubprogram(name: "out", linkageName: "std.io.Formatter.out", scope: !6, file: !6, line: 101, type: !287, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!287 = !DISubroutineType(types: !288)
!288 = !{!111, !230, !237, !11}
!289 = !DILocation(line: 102, scope: !286)
!290 = !DILocalVariable(name: "self", arg: 1, scope: !286, file: !6, line: 101, type: !237)
!291 = !DILocation(line: 101, scope: !286)
!292 = !DILocalVariable(name: "c", arg: 2, scope: !286, file: !6, line: 101, type: !11)
!293 = !DILocalVariable(name: "err", scope: !286, file: !6, line: 103, type: !111, align: 8)
!294 = !DILocation(line: 103, scope: !286)
!295 = !DILocation(line: 105, scope: !296)
!296 = distinct !DILexicalBlock(scope: !286, file: !6, line: 104, column: 2)
!297 = !DILocation(line: 106, scope: !296)
!298 = !DILocation(line: 107, scope: !296)
!299 = !DILocation(line: 109, scope: !286)
!300 = distinct !DISubprogram(name: "print_with_function", linkageName: "std.io.Formatter.print_with_function", scope: !6, file: !6, line: 112, type: !301, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!301 = !DISubroutineType(types: !302)
!302 = !{!111, !230, !237, !303}
!303 = !DICompositeType(tag: DW_TAG_structure_type, name: "Printable", size: 128, align: 64, elements: !304, identifier: "Printable")
!304 = !{!305, !306}
!305 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !303, baseType: !25, size: 64, align: 64)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !303, baseType: !91, size: 64, align: 64, offset: 64)
!307 = !DILocation(line: 113, scope: !300)
!308 = !DILocalVariable(name: "self", arg: 1, scope: !300, file: !6, line: 112, type: !237)
!309 = !DILocation(line: 112, scope: !300)
!310 = !DILocalVariable(name: "arg", arg: 2, scope: !300, file: !6, line: 112, type: !303)
!311 = !DILocation(line: 114, scope: !300)
!312 = !DILocalVariable(name: "old", scope: !313, file: !6, line: 116, type: !93, align: 4)
!313 = distinct !DILexicalBlock(scope: !300, file: !6, line: 115, column: 2)
!314 = !DILocation(line: 116, scope: !313)
!315 = !DILocalVariable(name: "old_width", scope: !313, file: !6, line: 117, type: !93, align: 4)
!316 = !DILocation(line: 117, scope: !313)
!317 = !DILocalVariable(name: "old_prec", scope: !313, file: !6, line: 118, type: !93, align: 4)
!318 = !DILocation(line: 118, scope: !313)
!319 = !DILocation(line: 125, scope: !313)
!320 = !DILocation(line: 121, scope: !321)
!321 = distinct !DILexicalBlock(scope: !313, file: !6, line: 120, column: 3)
!322 = !DILocation(line: 122, scope: !321)
!323 = !DILocation(line: 123, scope: !321)
!324 = !DILocation(line: 121, scope: !325)
!325 = distinct !DILexicalBlock(scope: !313, file: !6, line: 120, column: 3)
!326 = !DILocation(line: 122, scope: !325)
!327 = !DILocation(line: 123, scope: !325)
!328 = !DILocation(line: 126, scope: !313)
!329 = !DILocation(line: 121, scope: !330)
!330 = distinct !DILexicalBlock(scope: !313, file: !6, line: 120, column: 3)
!331 = !DILocation(line: 122, scope: !330)
!332 = !DILocation(line: 123, scope: !330)
!333 = !DILocation(line: 121, scope: !334)
!334 = distinct !DILexicalBlock(scope: !313, file: !6, line: 120, column: 3)
!335 = !DILocation(line: 122, scope: !334)
!336 = !DILocation(line: 123, scope: !334)
!337 = !DILocation(line: 128, scope: !300)
!338 = !DILocalVariable(name: "old", scope: !339, file: !6, line: 130, type: !93, align: 4)
!339 = distinct !DILexicalBlock(scope: !300, file: !6, line: 129, column: 2)
!340 = !DILocation(line: 130, scope: !339)
!341 = !DILocalVariable(name: "old_width", scope: !339, file: !6, line: 131, type: !93, align: 4)
!342 = !DILocation(line: 131, scope: !339)
!343 = !DILocalVariable(name: "old_prec", scope: !339, file: !6, line: 132, type: !93, align: 4)
!344 = !DILocation(line: 132, scope: !339)
!345 = !DILocation(line: 139, scope: !339)
!346 = !DILocation(line: 135, scope: !347)
!347 = distinct !DILexicalBlock(scope: !339, file: !6, line: 134, column: 3)
!348 = !DILocation(line: 136, scope: !347)
!349 = !DILocation(line: 137, scope: !347)
!350 = !DILocation(line: 135, scope: !351)
!351 = distinct !DILexicalBlock(scope: !339, file: !6, line: 134, column: 3)
!352 = !DILocation(line: 136, scope: !351)
!353 = !DILocation(line: 137, scope: !351)
!354 = !DILocalVariable(name: "buffer", scope: !355, file: !6, line: 488, type: !357, align: 16)
!355 = distinct !DISubprogram(name: "@stack_mem", linkageName: "@stack_mem", scope: !356, file: !356, line: 486, scopeLine: 486, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!356 = !DIFile(filename: "mem.c3", directory: "C:/Program Files/c3c/lib/std/core")
!357 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 8192, align: 8, elements: !358)
!358 = !{!359}
!359 = !DISubrange(count: 1024, lowerBound: 0)
!360 = !DILocation(line: 488, scope: !355, inlinedAt: !361)
!361 = !DILocation(line: 140, scope: !339)
!362 = !DILocalVariable(name: "allocator", scope: !355, file: !6, line: 489, type: !363, align: 8)
!363 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocator", scope: !6, file: !6, line: 3, size: 384, align: 64, elements: !364, identifier: "std.core.mem.allocator.OnStackAllocator")
!364 = !{!365, !370, !371, !372}
!365 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !363, file: !6, line: 5, baseType: !366, size: 128, align: 64)
!366 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !367, identifier: "Allocator")
!367 = !{!368, !369}
!368 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !366, baseType: !25, size: 64, align: 64)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !366, baseType: !91, size: 64, align: 64, offset: 64)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !363, file: !6, line: 6, baseType: !179, size: 128, align: 64, offset: 128)
!371 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !363, file: !6, line: 7, baseType: !183, size: 64, align: 64, offset: 256)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !363, file: !6, line: 8, baseType: !373, size: 64, align: 64, offset: 320)
!373 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk*", baseType: !374, size: 64, align: 64, dwarfAddressSpace: 0)
!374 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorExtraChunk", scope: !6, file: !6, line: 12, size: 192, align: 64, elements: !375, identifier: "std.core.mem.allocator.OnStackAllocatorExtraChunk")
!375 = !{!376, !378, !379}
!376 = !DIDerivedType(tag: DW_TAG_member, name: "is_aligned", scope: !374, file: !6, line: 14, baseType: !377, size: 8, align: 8)
!377 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!378 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !374, file: !6, line: 15, baseType: !373, size: 64, align: 64, offset: 64)
!379 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !374, file: !6, line: 16, baseType: !25, size: 64, align: 64, offset: 128)
!380 = !DILocation(line: 489, scope: !355, inlinedAt: !361)
!381 = !DILocation(line: 490, scope: !355, inlinedAt: !361)
!382 = !DILocalVariable(name: "mem", scope: !339, file: !6, line: 140, type: !366, align: 8)
!383 = !DILocation(line: 492, scope: !384, inlinedAt: !361)
!384 = distinct !DILexicalBlock(scope: !355, file: !356, line: 492, column: 2)
!385 = !DILocation(line: 142, scope: !386)
!386 = distinct !DILexicalBlock(scope: !339, file: !6, line: 141, column: 3)
!387 = !DILocation(line: 491, scope: !388, inlinedAt: !361)
!388 = distinct !DILexicalBlock(scope: !355, file: !356, line: 491, column: 8)
!389 = !DILocation(line: 135, scope: !390)
!390 = distinct !DILexicalBlock(scope: !339, file: !6, line: 134, column: 3)
!391 = !DILocation(line: 136, scope: !390)
!392 = !DILocation(line: 137, scope: !390)
!393 = !DILocation(line: 491, scope: !394, inlinedAt: !361)
!394 = distinct !DILexicalBlock(scope: !355, file: !356, line: 491, column: 8)
!395 = !DILocation(line: 135, scope: !396)
!396 = distinct !DILexicalBlock(scope: !339, file: !6, line: 134, column: 3)
!397 = !DILocation(line: 136, scope: !396)
!398 = !DILocation(line: 137, scope: !396)
!399 = !DILocation(line: 145, scope: !300)
!400 = distinct !DISubprogram(name: "out_str", linkageName: "std.io.Formatter.out_str", scope: !6, file: !6, line: 149, type: !401, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!401 = !DISubroutineType(types: !402)
!402 = !{!111, !230, !237, !266}
!403 = !DILocation(line: 150, scope: !400)
!404 = !DILocalVariable(name: "self", arg: 1, scope: !400, file: !6, line: 149, type: !237)
!405 = !DILocation(line: 149, scope: !400)
!406 = !DILocalVariable(name: "arg", arg: 2, scope: !400, file: !6, line: 149, type: !266)
!407 = !DILocation(line: 151, scope: !408)
!408 = distinct !DILexicalBlock(scope: !400, file: !6, line: 151, column: 2)
!409 = !DILocation(line: 154, scope: !410)
!410 = distinct !DILexicalBlock(scope: !408, file: !6, line: 154, column: 4)
!411 = !DILocation(line: 156, scope: !412)
!412 = distinct !DILexicalBlock(scope: !408, file: !6, line: 156, column: 4)
!413 = !DILocation(line: 159, scope: !414)
!414 = distinct !DILexicalBlock(scope: !408, file: !6, line: 159, column: 4)
!415 = !DILocation(line: 162, scope: !416)
!416 = distinct !DILexicalBlock(scope: !408, file: !6, line: 162, column: 4)
!417 = !DILocation(line: 164, scope: !418, inlinedAt: !419)
!418 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !190, file: !190, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!419 = !DILocation(line: 164, scope: !420)
!420 = distinct !DILexicalBlock(scope: !408, file: !6, line: 164, column: 4)
!421 = !DILocation(line: 166, scope: !418, inlinedAt: !419)
!422 = !DILocalVariable(name: "flags", scope: !423, file: !6, line: 167, type: !93, align: 4)
!423 = distinct !DILexicalBlock(scope: !408, file: !6, line: 167, column: 4)
!424 = !DILocation(line: 167, scope: !423)
!425 = !DILocalVariable(name: "width", scope: !423, file: !6, line: 168, type: !93, align: 4)
!426 = !DILocation(line: 168, scope: !423)
!427 = !DILocation(line: 174, scope: !423)
!428 = !DILocation(line: 175, scope: !423)
!429 = !DILocation(line: 176, scope: !423)
!430 = !DILocation(line: 171, scope: !431)
!431 = distinct !DILexicalBlock(scope: !423, file: !6, line: 170, column: 4)
!432 = !DILocation(line: 172, scope: !431)
!433 = !DILocation(line: 171, scope: !434)
!434 = distinct !DILexicalBlock(scope: !423, file: !6, line: 170, column: 4)
!435 = !DILocation(line: 172, scope: !434)
!436 = !DILocalVariable(name: "flags", scope: !437, file: !6, line: 178, type: !93, align: 4)
!437 = distinct !DILexicalBlock(scope: !408, file: !6, line: 178, column: 4)
!438 = !DILocation(line: 178, scope: !437)
!439 = !DILocalVariable(name: "width", scope: !437, file: !6, line: 179, type: !93, align: 4)
!440 = !DILocation(line: 179, scope: !437)
!441 = !DILocation(line: 185, scope: !437)
!442 = !DILocation(line: 186, scope: !437)
!443 = !DILocation(line: 187, scope: !437)
!444 = !DILocation(line: 182, scope: !445)
!445 = distinct !DILexicalBlock(scope: !437, file: !6, line: 181, column: 4)
!446 = !DILocation(line: 183, scope: !445)
!447 = !DILocation(line: 182, scope: !448)
!448 = distinct !DILexicalBlock(scope: !437, file: !6, line: 181, column: 4)
!449 = !DILocation(line: 183, scope: !448)
!450 = !DILocation(line: 189, scope: !451)
!451 = distinct !DILexicalBlock(scope: !408, file: !6, line: 189, column: 4)
!452 = !DILocalVariable(name: "n", scope: !400, file: !6, line: 192, type: !184, align: 8)
!453 = !DILocation(line: 192, scope: !400)
!454 = !DILocation(line: 193, scope: !400)
!455 = !DILocalVariable(name: "f", scope: !456, file: !6, line: 353, type: !111, align: 8)
!456 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !190, file: !190, line: 351, scopeLine: 351, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!457 = !DILocation(line: 353, scope: !456, inlinedAt: !458)
!458 = !DILocation(line: 194, scope: !400)
!459 = !DILocation(line: 354, scope: !456, inlinedAt: !458)
!460 = !DILocation(line: 195, scope: !461)
!461 = distinct !DILexicalBlock(scope: !400, file: !6, line: 195, column: 2)
!462 = !DILocalVariable(name: "i", scope: !463, file: !6, line: 198, type: !183, align: 8)
!463 = distinct !DILexicalBlock(scope: !461, file: !6, line: 198, column: 4)
!464 = !DILocation(line: 198, scope: !463)
!465 = !DILocation(line: 13, scope: !466, inlinedAt: !464)
!466 = distinct !DILexicalBlock(scope: !468, file: !467, line: 17, column: 1)
!467 = !DIFile(filename: "types.c3", directory: "C:/Program Files/c3c/lib/std/core")
!468 = distinct !DISubprogram(name: "any_to_enum_ordinal", linkageName: "any_to_enum_ordinal", scope: !467, file: !467, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!469 = !DILocation(line: 14, scope: !466, inlinedAt: !464)
!470 = !DILocation(line: 199, scope: !471, inlinedAt: !472)
!471 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !190, file: !190, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!472 = !DILocation(line: 18, scope: !468, inlinedAt: !464)
!473 = !DILocation(line: 22, scope: !474, inlinedAt: !472)
!474 = distinct !DILexicalBlock(scope: !475, file: !467, line: 26, column: 1)
!475 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !467, file: !467, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!476 = !DILocation(line: 23, scope: !474, inlinedAt: !472)
!477 = !DILocalVariable(name: "any_type", scope: !475, file: !6, line: 27, type: !91, align: 8)
!478 = !DILocation(line: 27, scope: !475, inlinedAt: !472)
!479 = !DILocalVariable(name: "kind", scope: !475, file: !6, line: 28, type: !56, align: 1)
!480 = !DILocation(line: 28, scope: !475, inlinedAt: !472)
!481 = !DILocalVariable(name: "is_mixed_signed", scope: !475, file: !6, line: 29, type: !377, align: 1)
!482 = !DILocation(line: 29, scope: !475, inlinedAt: !472)
!483 = !DILocalVariable(name: "max", scope: !475, file: !6, line: 30, type: !183, align: 8)
!484 = !DILocation(line: 30, scope: !475, inlinedAt: !472)
!485 = !DILocalVariable(name: "min", scope: !475, file: !6, line: 31, type: !183, align: 8)
!486 = !DILocation(line: 31, scope: !475, inlinedAt: !472)
!487 = !DILocation(line: 34, scope: !488, inlinedAt: !472)
!488 = distinct !DILexicalBlock(scope: !475, file: !467, line: 32, column: 2)
!489 = !DILocalVariable(name: "c", scope: !490, file: !6, line: 35, type: !491, align: 1)
!490 = distinct !DILexicalBlock(scope: !488, file: !467, line: 35, column: 4)
!491 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!492 = !DILocation(line: 35, scope: !490, inlinedAt: !472)
!493 = !DILocation(line: 36, scope: !490, inlinedAt: !472)
!494 = !DILocation(line: 37, scope: !490, inlinedAt: !472)
!495 = !DILocation(line: 38, scope: !488, inlinedAt: !472)
!496 = !DILocalVariable(name: "s", scope: !497, file: !6, line: 39, type: !498, align: 2)
!497 = distinct !DILexicalBlock(scope: !488, file: !467, line: 39, column: 4)
!498 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!499 = !DILocation(line: 39, scope: !497, inlinedAt: !472)
!500 = !DILocation(line: 40, scope: !497, inlinedAt: !472)
!501 = !DILocation(line: 41, scope: !497, inlinedAt: !472)
!502 = !DILocation(line: 42, scope: !497, inlinedAt: !472)
!503 = !DILocation(line: 43, scope: !488, inlinedAt: !472)
!504 = !DILocalVariable(name: "i", scope: !505, file: !6, line: 44, type: !3, align: 4)
!505 = distinct !DILexicalBlock(scope: !488, file: !467, line: 44, column: 4)
!506 = !DILocation(line: 44, scope: !505, inlinedAt: !472)
!507 = !DILocation(line: 45, scope: !505, inlinedAt: !472)
!508 = !DILocation(line: 46, scope: !505, inlinedAt: !472)
!509 = !DILocation(line: 47, scope: !505, inlinedAt: !472)
!510 = !DILocation(line: 48, scope: !488, inlinedAt: !472)
!511 = !DILocalVariable(name: "l", scope: !512, file: !6, line: 49, type: !112, align: 8)
!512 = distinct !DILexicalBlock(scope: !488, file: !467, line: 49, column: 4)
!513 = !DILocation(line: 49, scope: !512, inlinedAt: !472)
!514 = !DILocation(line: 50, scope: !512, inlinedAt: !472)
!515 = !DILocation(line: 51, scope: !512, inlinedAt: !472)
!516 = !DILocation(line: 52, scope: !512, inlinedAt: !472)
!517 = !DILocation(line: 53, scope: !488, inlinedAt: !472)
!518 = !DILocalVariable(name: "i", scope: !519, file: !6, line: 54, type: !520, align: 16)
!519 = distinct !DILexicalBlock(scope: !488, file: !467, line: 54, column: 4)
!520 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!521 = !DILocation(line: 54, scope: !519, inlinedAt: !472)
!522 = !DILocation(line: 55, scope: !519, inlinedAt: !472)
!523 = !DILocation(line: 56, scope: !519, inlinedAt: !472)
!524 = !DILocation(line: 57, scope: !519, inlinedAt: !472)
!525 = !DILocation(line: 58, scope: !488, inlinedAt: !472)
!526 = !DILocalVariable(name: "c", scope: !527, file: !6, line: 59, type: !11, align: 1)
!527 = distinct !DILexicalBlock(scope: !488, file: !467, line: 59, column: 4)
!528 = !DILocation(line: 59, scope: !527, inlinedAt: !472)
!529 = !DILocation(line: 60, scope: !527, inlinedAt: !472)
!530 = !DILocation(line: 61, scope: !527, inlinedAt: !472)
!531 = !DILocation(line: 62, scope: !488, inlinedAt: !472)
!532 = !DILocalVariable(name: "s", scope: !533, file: !6, line: 63, type: !534, align: 2)
!533 = distinct !DILexicalBlock(scope: !488, file: !467, line: 63, column: 4)
!534 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!535 = !DILocation(line: 63, scope: !533, inlinedAt: !472)
!536 = !DILocation(line: 64, scope: !533, inlinedAt: !472)
!537 = !DILocation(line: 65, scope: !533, inlinedAt: !472)
!538 = !DILocation(line: 66, scope: !488, inlinedAt: !472)
!539 = !DILocalVariable(name: "i", scope: !540, file: !6, line: 67, type: !93, align: 4)
!540 = distinct !DILexicalBlock(scope: !488, file: !467, line: 67, column: 4)
!541 = !DILocation(line: 67, scope: !540, inlinedAt: !472)
!542 = !DILocation(line: 68, scope: !540, inlinedAt: !472)
!543 = !DILocation(line: 69, scope: !540, inlinedAt: !472)
!544 = !DILocation(line: 70, scope: !488, inlinedAt: !472)
!545 = !DILocalVariable(name: "l", scope: !546, file: !6, line: 71, type: !184, align: 8)
!546 = distinct !DILexicalBlock(scope: !488, file: !467, line: 71, column: 4)
!547 = !DILocation(line: 71, scope: !546, inlinedAt: !472)
!548 = !DILocation(line: 72, scope: !546, inlinedAt: !472)
!549 = !DILocation(line: 73, scope: !546, inlinedAt: !472)
!550 = !DILocation(line: 74, scope: !488, inlinedAt: !472)
!551 = !DILocalVariable(name: "i", scope: !552, file: !6, line: 75, type: !553, align: 16)
!552 = distinct !DILexicalBlock(scope: !488, file: !467, line: 75, column: 4)
!553 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!554 = !DILocation(line: 75, scope: !552, inlinedAt: !472)
!555 = !DILocation(line: 76, scope: !552, inlinedAt: !472)
!556 = !DILocation(line: 77, scope: !552, inlinedAt: !472)
!557 = !DILocation(line: 164, scope: !558, inlinedAt: !559)
!558 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !190, file: !190, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!559 = !DILocation(line: 79, scope: !560, inlinedAt: !472)
!560 = distinct !DILexicalBlock(scope: !488, file: !467, line: 79, column: 4)
!561 = !DILocation(line: 166, scope: !558, inlinedAt: !559)
!562 = !DILocation(line: 199, scope: !463)
!563 = !DILocation(line: 200, scope: !463)
!564 = !DILocation(line: 202, scope: !565)
!565 = distinct !DILexicalBlock(scope: !461, file: !6, line: 202, column: 4)
!566 = !DILocation(line: 204, scope: !567)
!567 = distinct !DILexicalBlock(scope: !461, file: !6, line: 204, column: 4)
!568 = !DILocation(line: 206, scope: !569)
!569 = distinct !DILexicalBlock(scope: !461, file: !6, line: 206, column: 4)
!570 = !DILocation(line: 208, scope: !571)
!571 = distinct !DILexicalBlock(scope: !461, file: !6, line: 208, column: 4)
!572 = !DILocation(line: 210, scope: !573)
!573 = distinct !DILexicalBlock(scope: !461, file: !6, line: 210, column: 4)
!574 = !DILocation(line: 212, scope: !575)
!575 = distinct !DILexicalBlock(scope: !573, file: !6, line: 211, column: 4)
!576 = !DILocation(line: 214, scope: !573)
!577 = !DILocation(line: 216, scope: !578)
!578 = distinct !DILexicalBlock(scope: !573, file: !6, line: 215, column: 4)
!579 = !DILocation(line: 218, scope: !573)
!580 = !DILocation(line: 220, scope: !581)
!581 = distinct !DILexicalBlock(scope: !573, file: !6, line: 219, column: 4)
!582 = !DILocation(line: 199, scope: !583, inlinedAt: !584)
!583 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !190, file: !190, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!584 = !DILocation(line: 222, scope: !573)
!585 = !DILocalVariable(name: "inner", scope: !586, file: !6, line: 224, type: !91, align: 8)
!586 = distinct !DILexicalBlock(scope: !461, file: !6, line: 224, column: 4)
!587 = !DILocation(line: 224, scope: !586)
!588 = !DILocalVariable(name: "pointer", scope: !586, file: !6, line: 225, type: !589, align: 8)
!589 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !25, size: 64, align: 64, dwarfAddressSpace: 0)
!590 = !DILocation(line: 225, scope: !586)
!591 = !DILocation(line: 226, scope: !586)
!592 = !DILocalVariable(name: "deref", scope: !593, file: !6, line: 228, type: !266, align: 8)
!593 = distinct !DILexicalBlock(scope: !586, file: !6, line: 227, column: 4)
!594 = !DILocation(line: 228, scope: !593)
!595 = !DILocation(line: 189, scope: !596, inlinedAt: !594)
!596 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !190, file: !190, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!597 = !DILocation(line: 229, scope: !593)
!598 = !DILocation(line: 230, scope: !593)
!599 = !DILocalVariable(name: "f", scope: !600, file: !6, line: 353, type: !111, align: 8)
!600 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !190, file: !190, line: 351, scopeLine: 351, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!601 = !DILocation(line: 353, scope: !600, inlinedAt: !602)
!602 = !DILocation(line: 231, scope: !593)
!603 = !DILocation(line: 354, scope: !600, inlinedAt: !602)
!604 = !DILocalVariable(name: "flags", scope: !586, file: !6, line: 233, type: !93, align: 4)
!605 = !DILocation(line: 233, scope: !586)
!606 = !DILocalVariable(name: "width", scope: !586, file: !6, line: 234, type: !93, align: 4)
!607 = !DILocation(line: 234, scope: !586)
!608 = !DILocation(line: 240, scope: !586)
!609 = !DILocation(line: 241, scope: !586)
!610 = !DILocation(line: 237, scope: !611)
!611 = distinct !DILexicalBlock(scope: !586, file: !6, line: 236, column: 4)
!612 = !DILocation(line: 238, scope: !611)
!613 = !DILocation(line: 242, scope: !586)
!614 = !DILocation(line: 237, scope: !615)
!615 = distinct !DILexicalBlock(scope: !586, file: !6, line: 236, column: 4)
!616 = !DILocation(line: 238, scope: !615)
!617 = !DILocation(line: 237, scope: !618)
!618 = distinct !DILexicalBlock(scope: !586, file: !6, line: 236, column: 4)
!619 = !DILocation(line: 238, scope: !618)
!620 = !DILocalVariable(name: "flags", scope: !621, file: !6, line: 245, type: !93, align: 4)
!621 = distinct !DILexicalBlock(scope: !461, file: !6, line: 245, column: 4)
!622 = !DILocation(line: 245, scope: !621)
!623 = !DILocalVariable(name: "width", scope: !621, file: !6, line: 246, type: !93, align: 4)
!624 = !DILocation(line: 246, scope: !621)
!625 = !DILocation(line: 252, scope: !621)
!626 = !DILocation(line: 253, scope: !621)
!627 = !DILocalVariable(name: "inner", scope: !621, file: !6, line: 254, type: !91, align: 8)
!628 = !DILocation(line: 254, scope: !621)
!629 = !DILocalVariable(name: "size", scope: !621, file: !6, line: 255, type: !183, align: 8)
!630 = !DILocation(line: 255, scope: !621)
!631 = !DILocalVariable(name: "alen", scope: !621, file: !6, line: 256, type: !183, align: 8)
!632 = !DILocation(line: 256, scope: !621)
!633 = !DILocalVariable(name: "ptr", scope: !621, file: !6, line: 258, type: !25, align: 8)
!634 = !DILocation(line: 258, scope: !621)
!635 = !DILocalVariable(name: "len", scope: !621, file: !6, line: 259, type: !183, align: 8)
!636 = !DILocation(line: 259, scope: !621)
!637 = !DILocation(line: 249, scope: !638)
!638 = distinct !DILexicalBlock(scope: !621, file: !6, line: 248, column: 4)
!639 = !DILocation(line: 250, scope: !638)
!640 = !DILocalVariable(name: "i", scope: !641, file: !6, line: 260, type: !183, align: 8)
!641 = distinct !DILexicalBlock(scope: !621, file: !6, line: 260, column: 4)
!642 = !DILocation(line: 260, scope: !641)
!643 = !DILocation(line: 262, scope: !644)
!644 = distinct !DILexicalBlock(scope: !641, file: !6, line: 261, column: 4)
!645 = !DILocation(line: 249, scope: !646)
!646 = distinct !DILexicalBlock(scope: !621, file: !6, line: 248, column: 4)
!647 = !DILocation(line: 250, scope: !646)
!648 = !DILocation(line: 263, scope: !644)
!649 = !DILocation(line: 189, scope: !650, inlinedAt: !648)
!650 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !190, file: !190, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!651 = !DILocation(line: 249, scope: !652)
!652 = distinct !DILexicalBlock(scope: !621, file: !6, line: 248, column: 4)
!653 = !DILocation(line: 250, scope: !652)
!654 = !DILocation(line: 264, scope: !644)
!655 = !DILocation(line: 266, scope: !621)
!656 = !DILocation(line: 249, scope: !657)
!657 = distinct !DILexicalBlock(scope: !621, file: !6, line: 248, column: 4)
!658 = !DILocation(line: 250, scope: !657)
!659 = !DILocation(line: 267, scope: !621)
!660 = !DILocation(line: 249, scope: !661)
!661 = distinct !DILexicalBlock(scope: !621, file: !6, line: 248, column: 4)
!662 = !DILocation(line: 250, scope: !661)
!663 = !DILocalVariable(name: "flags", scope: !664, file: !6, line: 269, type: !93, align: 4)
!664 = distinct !DILexicalBlock(scope: !461, file: !6, line: 269, column: 4)
!665 = !DILocation(line: 269, scope: !664)
!666 = !DILocalVariable(name: "width", scope: !664, file: !6, line: 270, type: !93, align: 4)
!667 = !DILocation(line: 270, scope: !664)
!668 = !DILocation(line: 276, scope: !664)
!669 = !DILocation(line: 277, scope: !664)
!670 = !DILocalVariable(name: "inner", scope: !664, file: !6, line: 279, type: !91, align: 8)
!671 = !DILocation(line: 279, scope: !664)
!672 = !DILocalVariable(name: "size", scope: !664, file: !6, line: 280, type: !183, align: 8)
!673 = !DILocation(line: 280, scope: !664)
!674 = !DILocalVariable(name: "vlen", scope: !664, file: !6, line: 281, type: !183, align: 8)
!675 = !DILocation(line: 281, scope: !664)
!676 = !DILocalVariable(name: "ptr", scope: !664, file: !6, line: 283, type: !25, align: 8)
!677 = !DILocation(line: 283, scope: !664)
!678 = !DILocalVariable(name: "len", scope: !664, file: !6, line: 284, type: !183, align: 8)
!679 = !DILocation(line: 284, scope: !664)
!680 = !DILocation(line: 273, scope: !681)
!681 = distinct !DILexicalBlock(scope: !664, file: !6, line: 272, column: 4)
!682 = !DILocation(line: 274, scope: !681)
!683 = !DILocalVariable(name: "i", scope: !684, file: !6, line: 285, type: !183, align: 8)
!684 = distinct !DILexicalBlock(scope: !664, file: !6, line: 285, column: 4)
!685 = !DILocation(line: 285, scope: !684)
!686 = !DILocation(line: 287, scope: !687)
!687 = distinct !DILexicalBlock(scope: !684, file: !6, line: 286, column: 4)
!688 = !DILocation(line: 273, scope: !689)
!689 = distinct !DILexicalBlock(scope: !664, file: !6, line: 272, column: 4)
!690 = !DILocation(line: 274, scope: !689)
!691 = !DILocation(line: 288, scope: !687)
!692 = !DILocation(line: 189, scope: !693, inlinedAt: !691)
!693 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !190, file: !190, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!694 = !DILocation(line: 273, scope: !695)
!695 = distinct !DILexicalBlock(scope: !664, file: !6, line: 272, column: 4)
!696 = !DILocation(line: 274, scope: !695)
!697 = !DILocation(line: 289, scope: !687)
!698 = !DILocation(line: 291, scope: !664)
!699 = !DILocation(line: 273, scope: !700)
!700 = distinct !DILexicalBlock(scope: !664, file: !6, line: 272, column: 4)
!701 = !DILocation(line: 274, scope: !700)
!702 = !DILocation(line: 292, scope: !664)
!703 = !DILocation(line: 273, scope: !704)
!704 = distinct !DILexicalBlock(scope: !664, file: !6, line: 272, column: 4)
!705 = !DILocation(line: 274, scope: !704)
!706 = !DILocalVariable(name: "inner", scope: !707, file: !6, line: 295, type: !91, align: 8)
!707 = distinct !DILexicalBlock(scope: !461, file: !6, line: 295, column: 4)
!708 = !DILocation(line: 295, scope: !707)
!709 = !DILocation(line: 296, scope: !707)
!710 = !DILocalVariable(name: "flags", scope: !707, file: !6, line: 297, type: !93, align: 4)
!711 = !DILocation(line: 297, scope: !707)
!712 = !DILocalVariable(name: "width", scope: !707, file: !6, line: 298, type: !93, align: 4)
!713 = !DILocation(line: 298, scope: !707)
!714 = !DILocation(line: 304, scope: !707)
!715 = !DILocation(line: 305, scope: !707)
!716 = !DILocalVariable(name: "size", scope: !707, file: !6, line: 306, type: !183, align: 8)
!717 = !DILocation(line: 306, scope: !707)
!718 = !DILocalVariable(name: "temp", scope: !707, file: !6, line: 308, type: !719, align: 8)
!719 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !235, size: 64, align: 64, dwarfAddressSpace: 0)
!720 = !DILocation(line: 308, scope: !707)
!721 = !DILocalVariable(name: "ptr", scope: !707, file: !6, line: 309, type: !25, align: 8)
!722 = !DILocation(line: 309, scope: !707)
!723 = !DILocalVariable(name: "slen", scope: !707, file: !6, line: 310, type: !183, align: 8)
!724 = !DILocation(line: 310, scope: !707)
!725 = !DILocalVariable(name: "len", scope: !707, file: !6, line: 311, type: !183, align: 8)
!726 = !DILocation(line: 311, scope: !707)
!727 = !DILocation(line: 301, scope: !728)
!728 = distinct !DILexicalBlock(scope: !707, file: !6, line: 300, column: 4)
!729 = !DILocation(line: 302, scope: !728)
!730 = !DILocalVariable(name: "i", scope: !731, file: !6, line: 312, type: !183, align: 8)
!731 = distinct !DILexicalBlock(scope: !707, file: !6, line: 312, column: 4)
!732 = !DILocation(line: 312, scope: !731)
!733 = !DILocation(line: 314, scope: !734)
!734 = distinct !DILexicalBlock(scope: !731, file: !6, line: 313, column: 4)
!735 = !DILocation(line: 301, scope: !736)
!736 = distinct !DILexicalBlock(scope: !707, file: !6, line: 300, column: 4)
!737 = !DILocation(line: 302, scope: !736)
!738 = !DILocation(line: 315, scope: !734)
!739 = !DILocation(line: 189, scope: !740, inlinedAt: !738)
!740 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !190, file: !190, line: 187, scopeLine: 187, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!741 = !DILocation(line: 301, scope: !742)
!742 = distinct !DILexicalBlock(scope: !707, file: !6, line: 300, column: 4)
!743 = !DILocation(line: 302, scope: !742)
!744 = !DILocation(line: 316, scope: !734)
!745 = !DILocation(line: 318, scope: !707)
!746 = !DILocation(line: 301, scope: !747)
!747 = distinct !DILexicalBlock(scope: !707, file: !6, line: 300, column: 4)
!748 = !DILocation(line: 302, scope: !747)
!749 = !DILocation(line: 319, scope: !707)
!750 = !DILocation(line: 301, scope: !751)
!751 = distinct !DILexicalBlock(scope: !707, file: !6, line: 300, column: 4)
!752 = !DILocation(line: 302, scope: !751)
!753 = !DILocation(line: 164, scope: !754, inlinedAt: !755)
!754 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !190, file: !190, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!755 = !DILocation(line: 322, scope: !756)
!756 = distinct !DILexicalBlock(scope: !461, file: !6, line: 322, column: 4)
!757 = !DILocation(line: 166, scope: !754, inlinedAt: !755)
!758 = !DILocation(line: 325, scope: !400)
!759 = distinct !DISubprogram(name: "vprintf", linkageName: "std.io.Formatter.vprintf", scope: !6, file: !6, line: 357, type: !260, scopeLine: 357, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!760 = !DILocation(line: 358, scope: !759)
!761 = !DILocalVariable(name: "self", arg: 1, scope: !759, file: !6, line: 357, type: !237)
!762 = !DILocation(line: 357, scope: !759)
!763 = !DILocalVariable(name: "format", arg: 2, scope: !759, file: !6, line: 357, type: !235)
!764 = !DILocalVariable(name: "anys", arg: 3, scope: !759, file: !6, line: 357, type: !262)
!765 = !DILocation(line: 359, scope: !759)
!766 = !DILocation(line: 360, scope: !759)
!767 = !DILocation(line: 363, scope: !768)
!768 = distinct !DILexicalBlock(scope: !759, file: !6, line: 361, column: 2)
!769 = !DILocalVariable(name: "total_len", scope: !759, file: !6, line: 365, type: !183, align: 8)
!770 = !DILocation(line: 365, scope: !759)
!771 = !DILocalVariable(name: "format_len", scope: !759, file: !6, line: 366, type: !183, align: 8)
!772 = !DILocation(line: 366, scope: !759)
!773 = !DILocalVariable(name: "variant_index", scope: !759, file: !6, line: 367, type: !183, align: 8)
!774 = !DILocation(line: 367, scope: !759)
!775 = !DILocalVariable(name: "i", scope: !776, file: !6, line: 368, type: !183, align: 8)
!776 = distinct !DILexicalBlock(scope: !759, file: !6, line: 368, column: 2)
!777 = !DILocation(line: 368, scope: !776)
!778 = !DILocalVariable(name: "c", scope: !779, file: !6, line: 371, type: !11, align: 1)
!779 = distinct !DILexicalBlock(scope: !776, file: !6, line: 369, column: 2)
!780 = !DILocation(line: 371, scope: !779)
!781 = !DILocation(line: 372, scope: !779)
!782 = !DILocation(line: 375, scope: !783)
!783 = distinct !DILexicalBlock(scope: !779, file: !6, line: 373, column: 3)
!784 = !DILocation(line: 376, scope: !783)
!785 = !DILocation(line: 378, scope: !779)
!786 = !DILocation(line: 379, scope: !779)
!787 = !DILocation(line: 337, scope: !788, inlinedAt: !786)
!788 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 335, scopeLine: 335, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!789 = !DILocation(line: 338, scope: !788, inlinedAt: !786)
!790 = !DILocation(line: 380, scope: !779)
!791 = !DILocation(line: 381, scope: !779)
!792 = !DILocation(line: 383, scope: !793)
!793 = distinct !DILexicalBlock(scope: !779, file: !6, line: 382, column: 3)
!794 = !DILocation(line: 384, scope: !793)
!795 = !DILocation(line: 387, scope: !779)
!796 = !DILocation(line: 388, scope: !779)
!797 = !DILocation(line: 392, scope: !798)
!798 = distinct !DILexicalBlock(scope: !799, file: !6, line: 392, column: 15)
!799 = distinct !DILexicalBlock(scope: !800, file: !6, line: 390, column: 4)
!800 = distinct !DILexicalBlock(scope: !801, file: !6, line: 389, column: 3)
!801 = distinct !DILexicalBlock(scope: !779, file: !6, line: 388, column: 3)
!802 = !DILocation(line: 393, scope: !803)
!803 = distinct !DILexicalBlock(scope: !799, file: !6, line: 393, column: 15)
!804 = !DILocation(line: 394, scope: !805)
!805 = distinct !DILexicalBlock(scope: !799, file: !6, line: 394, column: 15)
!806 = !DILocation(line: 395, scope: !807)
!807 = distinct !DILexicalBlock(scope: !799, file: !6, line: 395, column: 15)
!808 = !DILocation(line: 396, scope: !809)
!809 = distinct !DILexicalBlock(scope: !799, file: !6, line: 396, column: 15)
!810 = !DILocation(line: 397, scope: !811)
!811 = distinct !DILexicalBlock(scope: !799, file: !6, line: 397, column: 14)
!812 = !DILocation(line: 399, scope: !800)
!813 = !DILocation(line: 337, scope: !814, inlinedAt: !812)
!814 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 335, scopeLine: 335, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!815 = !DILocation(line: 338, scope: !814, inlinedAt: !812)
!816 = !DILocation(line: 400, scope: !800)
!817 = !DILocalVariable(name: "w", scope: !779, file: !6, line: 403, type: !3, align: 4)
!818 = !DILocation(line: 403, scope: !779)
!819 = !DILocation(line: 404, scope: !779)
!820 = !DILocation(line: 337, scope: !821, inlinedAt: !819)
!821 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 335, scopeLine: 335, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!822 = !DILocation(line: 338, scope: !821, inlinedAt: !819)
!823 = !DILocation(line: 405, scope: !779)
!824 = !DILocation(line: 406, scope: !779)
!825 = !DILocation(line: 408, scope: !826)
!826 = distinct !DILexicalBlock(scope: !779, file: !6, line: 407, column: 3)
!827 = !DILocation(line: 409, scope: !826)
!828 = !DILocation(line: 411, scope: !779)
!829 = !DILocation(line: 413, scope: !779)
!830 = !DILocation(line: 414, scope: !779)
!831 = !DILocation(line: 416, scope: !832)
!832 = distinct !DILexicalBlock(scope: !779, file: !6, line: 415, column: 3)
!833 = !DILocation(line: 417, scope: !832)
!834 = !DILocation(line: 337, scope: !835, inlinedAt: !833)
!835 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 335, scopeLine: 335, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!836 = !DILocation(line: 338, scope: !835, inlinedAt: !833)
!837 = !DILocalVariable(name: "prec", scope: !832, file: !6, line: 418, type: !3, align: 4)
!838 = !DILocation(line: 418, scope: !832)
!839 = !DILocation(line: 419, scope: !832)
!840 = !DILocation(line: 337, scope: !841, inlinedAt: !839)
!841 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !6, file: !6, line: 335, scopeLine: 335, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!842 = !DILocation(line: 338, scope: !841, inlinedAt: !839)
!843 = !DILocation(line: 420, scope: !832)
!844 = !DILocation(line: 421, scope: !832)
!845 = !DILocalVariable(name: "base", scope: !779, file: !6, line: 425, type: !93, align: 4)
!846 = !DILocation(line: 425, scope: !779)
!847 = !DILocation(line: 426, scope: !779)
!848 = !DILocation(line: 14, scope: !849, inlinedAt: !850)
!849 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!850 = !DILocation(line: 428, scope: !851)
!851 = distinct !DILexicalBlock(scope: !779, file: !6, line: 427, column: 3)
!852 = !DILocation(line: 15, scope: !849, inlinedAt: !850)
!853 = !DILocation(line: 16, scope: !849, inlinedAt: !850)
!854 = !DILocation(line: 429, scope: !851)
!855 = !DILocation(line: 430, scope: !851)
!856 = !DILocalVariable(name: "current", scope: !779, file: !6, line: 432, type: !266, align: 8)
!857 = !DILocation(line: 432, scope: !779)
!858 = !DILocation(line: 436, scope: !859)
!859 = distinct !DILexicalBlock(scope: !860, file: !6, line: 436, column: 5)
!860 = distinct !DILexicalBlock(scope: !779, file: !6, line: 433, column: 3)
!861 = !DILocation(line: 437, scope: !859)
!862 = !DILocation(line: 439, scope: !863)
!863 = distinct !DILexicalBlock(scope: !860, file: !6, line: 439, column: 5)
!864 = !DILocation(line: 440, scope: !863)
!865 = !DILocation(line: 442, scope: !866)
!866 = distinct !DILexicalBlock(scope: !860, file: !6, line: 442, column: 5)
!867 = !DILocation(line: 444, scope: !868)
!868 = distinct !DILexicalBlock(scope: !860, file: !6, line: 444, column: 5)
!869 = !DILocation(line: 445, scope: !868)
!870 = !DILocation(line: 447, scope: !871)
!871 = distinct !DILexicalBlock(scope: !860, file: !6, line: 447, column: 5)
!872 = !DILocation(line: 449, scope: !873)
!873 = distinct !DILexicalBlock(scope: !860, file: !6, line: 449, column: 5)
!874 = !DILocation(line: 450, scope: !873)
!875 = !DILocation(line: 452, scope: !876)
!876 = distinct !DILexicalBlock(scope: !860, file: !6, line: 452, column: 5)
!877 = !DILocation(line: 454, scope: !878)
!878 = distinct !DILexicalBlock(scope: !860, file: !6, line: 454, column: 5)
!879 = !DILocation(line: 455, scope: !878)
!880 = !DILocation(line: 457, scope: !881)
!881 = distinct !DILexicalBlock(scope: !860, file: !6, line: 457, column: 5)
!882 = !DILocalVariable(name: "len", scope: !883, file: !6, line: 343, type: !184, align: 8)
!883 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 341, scopeLine: 341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!884 = !DILocation(line: 343, scope: !883, inlinedAt: !880)
!885 = !DILocation(line: 457, scope: !883, inlinedAt: !880)
!886 = !DILocalVariable(name: "err", scope: !883, file: !6, line: 344, type: !111, align: 8)
!887 = !DILocation(line: 344, scope: !883, inlinedAt: !880)
!888 = !DILocation(line: 346, scope: !883, inlinedAt: !880)
!889 = !DILocation(line: 347, scope: !883, inlinedAt: !880)
!890 = !DILocation(line: 14, scope: !891, inlinedAt: !892)
!891 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!892 = !DILocation(line: 348, scope: !893, inlinedAt: !880)
!893 = distinct !DILexicalBlock(scope: !883, file: !6, line: 348, column: 4)
!894 = !DILocation(line: 15, scope: !891, inlinedAt: !892)
!895 = !DILocation(line: 16, scope: !891, inlinedAt: !892)
!896 = !DILocation(line: 14, scope: !897, inlinedAt: !898)
!897 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!898 = !DILocation(line: 350, scope: !899, inlinedAt: !880)
!899 = distinct !DILexicalBlock(scope: !883, file: !6, line: 350, column: 4)
!900 = !DILocation(line: 15, scope: !897, inlinedAt: !898)
!901 = !DILocation(line: 16, scope: !897, inlinedAt: !898)
!902 = !DILocation(line: 351, scope: !899, inlinedAt: !880)
!903 = !DILocation(line: 352, scope: !899, inlinedAt: !880)
!904 = !DILocation(line: 354, scope: !883, inlinedAt: !880)
!905 = !DILocation(line: 458, scope: !881)
!906 = !DILocation(line: 460, scope: !907)
!907 = distinct !DILexicalBlock(scope: !860, file: !6, line: 460, column: 5)
!908 = !DILocation(line: 461, scope: !907)
!909 = !DILocation(line: 463, scope: !910)
!910 = distinct !DILexicalBlock(scope: !860, file: !6, line: 463, column: 5)
!911 = !DILocalVariable(name: "len", scope: !912, file: !6, line: 343, type: !184, align: 8)
!912 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 341, scopeLine: 341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!913 = !DILocation(line: 343, scope: !912, inlinedAt: !909)
!914 = !DILocation(line: 463, scope: !912, inlinedAt: !909)
!915 = !DILocalVariable(name: "err", scope: !912, file: !6, line: 344, type: !111, align: 8)
!916 = !DILocation(line: 344, scope: !912, inlinedAt: !909)
!917 = !DILocation(line: 346, scope: !912, inlinedAt: !909)
!918 = !DILocation(line: 347, scope: !912, inlinedAt: !909)
!919 = !DILocation(line: 14, scope: !920, inlinedAt: !921)
!920 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!921 = !DILocation(line: 348, scope: !922, inlinedAt: !909)
!922 = distinct !DILexicalBlock(scope: !912, file: !6, line: 348, column: 4)
!923 = !DILocation(line: 15, scope: !920, inlinedAt: !921)
!924 = !DILocation(line: 16, scope: !920, inlinedAt: !921)
!925 = !DILocation(line: 14, scope: !926, inlinedAt: !927)
!926 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!927 = !DILocation(line: 350, scope: !928, inlinedAt: !909)
!928 = distinct !DILexicalBlock(scope: !912, file: !6, line: 350, column: 4)
!929 = !DILocation(line: 15, scope: !926, inlinedAt: !927)
!930 = !DILocation(line: 16, scope: !926, inlinedAt: !927)
!931 = !DILocation(line: 351, scope: !928, inlinedAt: !909)
!932 = !DILocation(line: 352, scope: !928, inlinedAt: !909)
!933 = !DILocation(line: 354, scope: !912, inlinedAt: !909)
!934 = !DILocation(line: 464, scope: !910)
!935 = !DILocation(line: 466, scope: !936)
!936 = distinct !DILexicalBlock(scope: !860, file: !6, line: 466, column: 5)
!937 = !DILocation(line: 467, scope: !936)
!938 = !DILocation(line: 469, scope: !939)
!939 = distinct !DILexicalBlock(scope: !860, file: !6, line: 469, column: 5)
!940 = !DILocalVariable(name: "len", scope: !941, file: !6, line: 343, type: !184, align: 8)
!941 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 341, scopeLine: 341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!942 = !DILocation(line: 343, scope: !941, inlinedAt: !938)
!943 = !DILocation(line: 469, scope: !941, inlinedAt: !938)
!944 = !DILocalVariable(name: "err", scope: !941, file: !6, line: 344, type: !111, align: 8)
!945 = !DILocation(line: 344, scope: !941, inlinedAt: !938)
!946 = !DILocation(line: 346, scope: !941, inlinedAt: !938)
!947 = !DILocation(line: 347, scope: !941, inlinedAt: !938)
!948 = !DILocation(line: 14, scope: !949, inlinedAt: !950)
!949 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!950 = !DILocation(line: 348, scope: !951, inlinedAt: !938)
!951 = distinct !DILexicalBlock(scope: !941, file: !6, line: 348, column: 4)
!952 = !DILocation(line: 15, scope: !949, inlinedAt: !950)
!953 = !DILocation(line: 16, scope: !949, inlinedAt: !950)
!954 = !DILocation(line: 14, scope: !955, inlinedAt: !956)
!955 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!956 = !DILocation(line: 350, scope: !957, inlinedAt: !938)
!957 = distinct !DILexicalBlock(scope: !941, file: !6, line: 350, column: 4)
!958 = !DILocation(line: 15, scope: !955, inlinedAt: !956)
!959 = !DILocation(line: 16, scope: !955, inlinedAt: !956)
!960 = !DILocation(line: 351, scope: !957, inlinedAt: !938)
!961 = !DILocation(line: 352, scope: !957, inlinedAt: !938)
!962 = !DILocation(line: 354, scope: !941, inlinedAt: !938)
!963 = !DILocation(line: 470, scope: !939)
!964 = !DILocation(line: 472, scope: !965)
!965 = distinct !DILexicalBlock(scope: !860, file: !6, line: 472, column: 5)
!966 = !DILocation(line: 473, scope: !965)
!967 = !DILocation(line: 475, scope: !968)
!968 = distinct !DILexicalBlock(scope: !860, file: !6, line: 475, column: 5)
!969 = !DILocalVariable(name: "len", scope: !970, file: !6, line: 343, type: !184, align: 8)
!970 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 341, scopeLine: 341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!971 = !DILocation(line: 343, scope: !970, inlinedAt: !967)
!972 = !DILocation(line: 475, scope: !970, inlinedAt: !967)
!973 = !DILocalVariable(name: "err", scope: !970, file: !6, line: 344, type: !111, align: 8)
!974 = !DILocation(line: 344, scope: !970, inlinedAt: !967)
!975 = !DILocation(line: 346, scope: !970, inlinedAt: !967)
!976 = !DILocation(line: 347, scope: !970, inlinedAt: !967)
!977 = !DILocation(line: 14, scope: !978, inlinedAt: !979)
!978 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!979 = !DILocation(line: 348, scope: !980, inlinedAt: !967)
!980 = distinct !DILexicalBlock(scope: !970, file: !6, line: 348, column: 4)
!981 = !DILocation(line: 15, scope: !978, inlinedAt: !979)
!982 = !DILocation(line: 16, scope: !978, inlinedAt: !979)
!983 = !DILocation(line: 14, scope: !984, inlinedAt: !985)
!984 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!985 = !DILocation(line: 350, scope: !986, inlinedAt: !967)
!986 = distinct !DILexicalBlock(scope: !970, file: !6, line: 350, column: 4)
!987 = !DILocation(line: 15, scope: !984, inlinedAt: !985)
!988 = !DILocation(line: 16, scope: !984, inlinedAt: !985)
!989 = !DILocation(line: 351, scope: !986, inlinedAt: !967)
!990 = !DILocation(line: 352, scope: !986, inlinedAt: !967)
!991 = !DILocation(line: 354, scope: !970, inlinedAt: !967)
!992 = !DILocation(line: 476, scope: !968)
!993 = !DILocation(line: 478, scope: !994)
!994 = distinct !DILexicalBlock(scope: !860, file: !6, line: 478, column: 5)
!995 = !DILocation(line: 479, scope: !994)
!996 = !DILocation(line: 481, scope: !997)
!997 = distinct !DILexicalBlock(scope: !860, file: !6, line: 481, column: 5)
!998 = !DILocalVariable(name: "len", scope: !999, file: !6, line: 483, type: !183, align: 8)
!999 = distinct !DILexicalBlock(scope: !997, file: !6, line: 482, column: 5)
!1000 = !DILocation(line: 483, scope: !999)
!1001 = !DILocation(line: 484, scope: !999)
!1002 = !DILocation(line: 485, scope: !999)
!1003 = !DILocation(line: 486, scope: !999)
!1004 = !DILocalVariable(name: "out_fn", scope: !997, file: !6, line: 488, type: !242, align: 8)
!1005 = !DILocation(line: 488, scope: !997)
!1006 = !DILocation(line: 489, scope: !997)
!1007 = !DILocalVariable(name: "len", scope: !997, file: !6, line: 490, type: !183, align: 8)
!1008 = !DILocation(line: 490, scope: !997)
!1009 = !DILocation(line: 491, scope: !997)
!1010 = !DILocation(line: 492, scope: !997)
!1011 = !DILocation(line: 493, scope: !997)
!1012 = !DILocation(line: 494, scope: !997)
!1013 = !DILocation(line: 496, scope: !1014)
!1014 = distinct !DILexicalBlock(scope: !860, file: !6, line: 496, column: 5)
!1015 = !DILocation(line: 497, scope: !1014)
!1016 = !DILocation(line: 498, scope: !1014)
!1017 = !DILocation(line: 14, scope: !1018, inlinedAt: !1019)
!1018 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1019 = !DILocation(line: 500, scope: !1020)
!1020 = distinct !DILexicalBlock(scope: !860, file: !6, line: 500, column: 5)
!1021 = !DILocation(line: 15, scope: !1018, inlinedAt: !1019)
!1022 = !DILocation(line: 16, scope: !1018, inlinedAt: !1019)
!1023 = !DILocation(line: 501, scope: !1020)
!1024 = !DILocation(line: 502, scope: !1020)
!1025 = !DILocation(line: 504, scope: !779)
!1026 = !DILocation(line: 506, scope: !1027)
!1027 = distinct !DILexicalBlock(scope: !779, file: !6, line: 505, column: 3)
!1028 = !DILocation(line: 507, scope: !1027)
!1029 = !DILocation(line: 510, scope: !779)
!1030 = !DILocalVariable(name: "is_neg", scope: !779, file: !6, line: 512, type: !377, align: 1)
!1031 = !DILocation(line: 512, scope: !779)
!1032 = !DILocation(line: 513, scope: !779)
!1033 = !DILocalVariable(name: "len", scope: !1034, file: !6, line: 343, type: !184, align: 8)
!1034 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !6, file: !6, line: 341, scopeLine: 341, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1035 = !DILocation(line: 343, scope: !1034, inlinedAt: !1032)
!1036 = !DILocation(line: 513, scope: !1034, inlinedAt: !1032)
!1037 = !DILocalVariable(name: "err", scope: !1034, file: !6, line: 344, type: !111, align: 8)
!1038 = !DILocation(line: 344, scope: !1034, inlinedAt: !1032)
!1039 = !DILocation(line: 346, scope: !1034, inlinedAt: !1032)
!1040 = !DILocation(line: 347, scope: !1034, inlinedAt: !1032)
!1041 = !DILocation(line: 14, scope: !1042, inlinedAt: !1043)
!1042 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1043 = !DILocation(line: 348, scope: !1044, inlinedAt: !1032)
!1044 = distinct !DILexicalBlock(scope: !1034, file: !6, line: 348, column: 4)
!1045 = !DILocation(line: 15, scope: !1042, inlinedAt: !1043)
!1046 = !DILocation(line: 16, scope: !1042, inlinedAt: !1043)
!1047 = !DILocation(line: 14, scope: !1048, inlinedAt: !1049)
!1048 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !9, file: !9, line: 12, scopeLine: 12, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1049 = !DILocation(line: 350, scope: !1050, inlinedAt: !1032)
!1050 = distinct !DILexicalBlock(scope: !1034, file: !6, line: 350, column: 4)
!1051 = !DILocation(line: 15, scope: !1048, inlinedAt: !1049)
!1052 = !DILocation(line: 16, scope: !1048, inlinedAt: !1049)
!1053 = !DILocation(line: 351, scope: !1050, inlinedAt: !1032)
!1054 = !DILocation(line: 352, scope: !1050, inlinedAt: !1032)
!1055 = !DILocation(line: 354, scope: !1034, inlinedAt: !1032)
!1056 = !DILocation(line: 519, scope: !759)
!1057 = !DILocation(line: 520, scope: !759)
!1058 = distinct !DISubprogram(name: "print", linkageName: "std.io.Formatter.print", scope: !6, file: !6, line: 524, type: !1059, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!111, !230, !237, !235}
!1061 = !DILocation(line: 525, scope: !1058)
!1062 = !DILocalVariable(name: "self", arg: 1, scope: !1058, file: !6, line: 524, type: !237)
!1063 = !DILocation(line: 524, scope: !1058)
!1064 = !DILocalVariable(name: "str", arg: 2, scope: !1058, file: !6, line: 524, type: !235)
!1065 = !DILocation(line: 526, scope: !1058)
!1066 = !DILocation(line: 529, scope: !1067)
!1067 = distinct !DILexicalBlock(scope: !1058, file: !6, line: 527, column: 2)
!1068 = !DILocalVariable(name: ".temp", scope: !1069, file: !6, line: 531, type: !183, align: 8)
!1069 = distinct !DILexicalBlock(scope: !1058, file: !6, line: 531, column: 2)
!1070 = !DILocation(line: 531, scope: !1069)
!1071 = !DILocalVariable(name: "c", scope: !1072, file: !6, line: 531, type: !11, align: 1)
!1072 = distinct !DILexicalBlock(scope: !1069, file: !6, line: 531, column: 20)
!1073 = !DILocation(line: 531, scope: !1072)
!1074 = !DILocation(line: 532, scope: !1058)
!1075 = distinct !DISubprogram(name: "out_null_fn", linkageName: "std.io.out_null_fn", scope: !6, file: !6, line: 331, type: !244, scopeLine: 331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1076 = !DILocalVariable(name: "data", arg: 1, scope: !1075, file: !6, line: 331, type: !25)
!1077 = !DILocation(line: 331, scope: !1075)
!1078 = !DILocalVariable(name: "c", arg: 2, scope: !1075, file: !6, line: 331, type: !11)
!1079 = distinct !DISubprogram(name: "adjust", linkageName: "std.io.Formatter.adjust", scope: !9, file: !9, line: 19, type: !1080, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1080 = !DISubroutineType(types: !1081)
!1081 = !{!111, !230, !237, !184}
!1082 = !DILocation(line: 20, scope: !1079)
!1083 = !DILocalVariable(name: "self", arg: 1, scope: !1079, file: !9, line: 19, type: !237)
!1084 = !DILocation(line: 19, scope: !1079)
!1085 = !DILocalVariable(name: "len", arg: 2, scope: !1079, file: !9, line: 19, type: !183)
!1086 = !DILocation(line: 21, scope: !1079)
!1087 = !DILocation(line: 22, scope: !1079)
!1088 = distinct !DISubprogram(name: "out_substr", linkageName: "std.io.Formatter.out_substr", scope: !9, file: !9, line: 145, type: !1059, scopeLine: 145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1089 = !DILocation(line: 146, scope: !1088)
!1090 = !DILocalVariable(name: "self", arg: 1, scope: !1088, file: !9, line: 145, type: !237)
!1091 = !DILocation(line: 145, scope: !1088)
!1092 = !DILocalVariable(name: "str", arg: 2, scope: !1088, file: !9, line: 145, type: !235)
!1093 = !DILocalVariable(name: "l", scope: !1088, file: !9, line: 147, type: !183, align: 8)
!1094 = !DILocation(line: 147, scope: !1088)
!1095 = !DILocalVariable(name: "prec", scope: !1088, file: !9, line: 148, type: !93, align: 4)
!1096 = !DILocation(line: 148, scope: !1088)
!1097 = !DILocation(line: 149, scope: !1088)
!1098 = !DILocalVariable(name: "index", scope: !1088, file: !9, line: 150, type: !183, align: 8)
!1099 = !DILocation(line: 150, scope: !1088)
!1100 = !DILocalVariable(name: "chars", scope: !1088, file: !9, line: 151, type: !183, align: 8)
!1101 = !DILocation(line: 151, scope: !1088)
!1102 = !DILocalVariable(name: "ptr", scope: !1088, file: !9, line: 152, type: !113, align: 8)
!1103 = !DILocation(line: 152, scope: !1088)
!1104 = !DILocation(line: 153, scope: !1088)
!1105 = !DILocation(line: 153, scope: !1106)
!1106 = distinct !DILexicalBlock(scope: !1088, file: !9, line: 153, column: 2)
!1107 = !DILocalVariable(name: "c", scope: !1108, file: !9, line: 155, type: !11, align: 1)
!1108 = distinct !DILexicalBlock(scope: !1106, file: !9, line: 154, column: 2)
!1109 = !DILocation(line: 155, scope: !1108)
!1110 = !DILocation(line: 157, scope: !1108)
!1111 = !DILocation(line: 158, scope: !1108)
!1112 = !DILocation(line: 159, scope: !1108)
!1113 = !DILocation(line: 161, scope: !1088)
!1114 = distinct !DISubprogram(name: "pad", linkageName: "std.io.Formatter.pad", scope: !9, file: !9, line: 164, type: !1115, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!111, !230, !237, !11, !112, !112}
!1117 = !DILocation(line: 165, scope: !1114)
!1118 = !DILocalVariable(name: "self", arg: 1, scope: !1114, file: !9, line: 164, type: !237)
!1119 = !DILocation(line: 164, scope: !1114)
!1120 = !DILocalVariable(name: "c", arg: 2, scope: !1114, file: !9, line: 164, type: !11)
!1121 = !DILocalVariable(name: "width", arg: 3, scope: !1114, file: !9, line: 164, type: !1122)
!1122 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !112)
!1123 = !DILocalVariable(name: "len", arg: 4, scope: !1114, file: !9, line: 164, type: !1122)
!1124 = !DILocalVariable(name: "delta", scope: !1114, file: !9, line: 166, type: !1122, align: 8)
!1125 = !DILocation(line: 166, scope: !1114)
!1126 = !DILocalVariable(name: "i", scope: !1127, file: !9, line: 167, type: !1122, align: 8)
!1127 = distinct !DILexicalBlock(scope: !1114, file: !9, line: 167, column: 2)
!1128 = !DILocation(line: 167, scope: !1127)
!1129 = !DILocation(line: 47, scope: !1130, inlinedAt: !1132)
!1130 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !1131, file: !1131, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1131 = !DIFile(filename: "builtin_comparison.c3", directory: "C:/Program Files/c3c/lib/std/core")
!1132 = !DILocation(line: 116, scope: !1133, inlinedAt: !1134)
!1133 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1131, file: !1131, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1134 = !DILocation(line: 168, scope: !1114)
!1135 = distinct !DISubprogram(name: "out_chars", linkageName: "std.io.Formatter.out_chars", scope: !9, file: !9, line: 178, type: !1136, scopeLine: 178, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1136 = !DISubroutineType(types: !1137)
!1137 = !{!111, !230, !237, !179}
!1138 = !DILocation(line: 179, scope: !1135)
!1139 = !DILocalVariable(name: "self", arg: 1, scope: !1135, file: !9, line: 178, type: !237)
!1140 = !DILocation(line: 178, scope: !1135)
!1141 = !DILocalVariable(name: "s", arg: 2, scope: !1135, file: !9, line: 178, type: !179)
!1142 = !DILocalVariable(name: ".temp", scope: !1143, file: !9, line: 180, type: !183, align: 8)
!1143 = distinct !DILexicalBlock(scope: !1135, file: !9, line: 180, column: 2)
!1144 = !DILocation(line: 180, scope: !1143)
!1145 = !DILocalVariable(name: "c", scope: !1146, file: !9, line: 180, type: !11, align: 1)
!1146 = distinct !DILexicalBlock(scope: !1143, file: !9, line: 180, column: 18)
!1147 = !DILocation(line: 180, scope: !1146)
!1148 = !DILocation(line: 181, scope: !1135)
!1149 = distinct !DISubprogram(name: "etoa", linkageName: "std.io.Formatter.etoa", scope: !9, file: !9, line: 192, type: !1150, scopeLine: 192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1150 = !DISubroutineType(types: !1151)
!1151 = !{!111, !230, !237, !1152}
!1152 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1153 = !DILocation(line: 192, scope: !1149)
!1154 = !DILocalVariable(name: "self", arg: 1, scope: !1149, file: !9, line: 192, type: !237)
!1155 = !DILocalVariable(name: "y", arg: 2, scope: !1149, file: !9, line: 192, type: !1152)
!1156 = distinct !DISubprogram(name: "ftoa", linkageName: "std.io.Formatter.ftoa", scope: !9, file: !9, line: 193, type: !1150, scopeLine: 193, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1157 = !DILocation(line: 193, scope: !1156)
!1158 = !DILocalVariable(name: "self", arg: 1, scope: !1156, file: !9, line: 193, type: !237)
!1159 = !DILocalVariable(name: "y", arg: 2, scope: !1156, file: !9, line: 193, type: !1152)
!1160 = distinct !DISubprogram(name: "gtoa", linkageName: "std.io.Formatter.gtoa", scope: !9, file: !9, line: 194, type: !1150, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1161 = !DILocation(line: 194, scope: !1160)
!1162 = !DILocalVariable(name: "self", arg: 1, scope: !1160, file: !9, line: 194, type: !237)
!1163 = !DILocalVariable(name: "y", arg: 2, scope: !1160, file: !9, line: 194, type: !1152)
!1164 = distinct !DISubprogram(name: "atoa", linkageName: "std.io.Formatter.atoa", scope: !9, file: !9, line: 195, type: !1150, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1165 = !DILocation(line: 195, scope: !1164)
!1166 = !DILocalVariable(name: "self", arg: 1, scope: !1164, file: !9, line: 195, type: !237)
!1167 = !DILocalVariable(name: "y", arg: 2, scope: !1164, file: !9, line: 195, type: !1152)
!1168 = distinct !DISubprogram(name: "floatformat", linkageName: "std.io.Formatter.floatformat", scope: !9, file: !9, line: 197, type: !1169, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1169 = !DISubroutineType(types: !1170)
!1170 = !{!111, !230, !237, !44, !1152}
!1171 = !DILocation(line: 198, scope: !1168)
!1172 = !DILocalVariable(name: "self", arg: 1, scope: !1168, file: !9, line: 197, type: !237)
!1173 = !DILocation(line: 197, scope: !1168)
!1174 = !DILocalVariable(name: "formatting", arg: 2, scope: !1168, file: !9, line: 197, type: !44)
!1175 = !DILocalVariable(name: "y", arg: 3, scope: !1168, file: !9, line: 197, type: !1152)
!1176 = !DILocalVariable(name: "big", scope: !1168, file: !9, line: 202, type: !1177, align: 16)
!1177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !93, size: 4032, align: 32, elements: !1178)
!1178 = !{!1179}
!1179 = !DISubrange(count: 126, lowerBound: 0)
!1180 = !DILocation(line: 202, scope: !1168)
!1181 = !DILocalVariable(name: "is_neg", scope: !1168, file: !9, line: 203, type: !377, align: 1)
!1182 = !DILocation(line: 203, scope: !1168)
!1183 = !DILocation(line: 212, scope: !1184, inlinedAt: !1185)
!1184 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !190, file: !190, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1185 = !DILocation(line: 480, scope: !1186, inlinedAt: !1188)
!1186 = distinct !DISubprogram(name: "signbit", linkageName: "signbit", scope: !1187, file: !1187, line: 473, scopeLine: 473, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1187 = !DIFile(filename: "math.c3", directory: "C:/Program Files/c3c/lib/std/math")
!1188 = !DILocation(line: 204, scope: !1168)
!1189 = !DILocation(line: 206, scope: !1190)
!1190 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 205, column: 2)
!1191 = !DILocation(line: 207, scope: !1190)
!1192 = !DILocalVariable(name: "pl", scope: !1168, file: !9, line: 209, type: !1122, align: 8)
!1193 = !DILocation(line: 209, scope: !1168)
!1194 = !DILocation(line: 212, scope: !1195, inlinedAt: !1196)
!1195 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !190, file: !190, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1196 = !DILocation(line: 565, scope: !1197, inlinedAt: !1198)
!1197 = distinct !DISubprogram(name: "is_finite", linkageName: "is_finite", scope: !1187, file: !1187, line: 558, scopeLine: 558, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1198 = !DILocation(line: 211, scope: !1168)
!1199 = !DILocalVariable(name: "len", scope: !1200, file: !9, line: 213, type: !183, align: 8)
!1200 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 212, column: 2)
!1201 = !DILocation(line: 213, scope: !1200)
!1202 = !DILocation(line: 215, scope: !1200)
!1203 = !DILocalVariable(name: "s", scope: !1200, file: !9, line: 216, type: !235, align: 8)
!1204 = !DILocation(line: 216, scope: !1200)
!1205 = !DILocation(line: 212, scope: !1206, inlinedAt: !1207)
!1206 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !190, file: !190, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1207 = !DILocation(line: 579, scope: !1208, inlinedAt: !1209)
!1208 = distinct !DISubprogram(name: "is_nan", linkageName: "is_nan", scope: !1187, file: !1187, line: 572, scopeLine: 572, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1209 = !DILocation(line: 217, scope: !1200)
!1210 = !DILocation(line: 218, scope: !1200)
!1211 = !DILocation(line: 219, scope: !1200)
!1212 = !DILocation(line: 220, scope: !1200)
!1213 = !DILocation(line: 221, scope: !1200)
!1214 = !DILocation(line: 222, scope: !1200)
!1215 = !DILocalVariable(name: "e2", scope: !1168, file: !9, line: 225, type: !3, align: 4)
!1216 = !DILocation(line: 225, scope: !1168)
!1217 = !DILocation(line: 466, scope: !1218, inlinedAt: !1219)
!1218 = distinct !DISubprogram(name: "frexp", linkageName: "frexp", scope: !1187, file: !1187, line: 459, scopeLine: 459, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1219 = !DILocation(line: 227, scope: !1168)
!1220 = !DILocation(line: 228, scope: !1168)
!1221 = !DILocalVariable(name: "ebuf0", scope: !1168, file: !9, line: 229, type: !1222, align: 1)
!1222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 96, align: 8, elements: !1223)
!1223 = !{!1224}
!1224 = !DISubrange(count: 12, lowerBound: 0)
!1225 = !DILocation(line: 229, scope: !1168)
!1226 = !DILocalVariable(name: "ebuf", scope: !1168, file: !9, line: 230, type: !113, align: 8)
!1227 = !DILocation(line: 230, scope: !1168)
!1228 = !DILocalVariable(name: "buf_array", scope: !1168, file: !9, line: 231, type: !1229, align: 16)
!1229 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 176, align: 8, elements: !1230)
!1230 = !{!1231}
!1231 = !DISubrange(count: 22, lowerBound: 0)
!1232 = !DILocation(line: 231, scope: !1168)
!1233 = !DILocalVariable(name: "buf", scope: !1168, file: !9, line: 232, type: !113, align: 8)
!1234 = !DILocation(line: 232, scope: !1168)
!1235 = !DILocalVariable(name: "p", scope: !1168, file: !9, line: 233, type: !1122, align: 8)
!1236 = !DILocation(line: 233, scope: !1168)
!1237 = !DILocation(line: 234, scope: !1168)
!1238 = !DILocalVariable(name: "round", scope: !1239, file: !9, line: 236, type: !1152, align: 8)
!1239 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 235, column: 2)
!1240 = !DILocation(line: 236, scope: !1239)
!1241 = !DILocation(line: 238, scope: !1239)
!1242 = !DILocation(line: 239, scope: !1239)
!1243 = !DILocalVariable(name: "re", scope: !1244, file: !9, line: 241, type: !3, align: 4)
!1244 = distinct !DILexicalBlock(scope: !1239, file: !9, line: 240, column: 3)
!1245 = !DILocation(line: 241, scope: !1244)
!1246 = !DILocation(line: 242, scope: !1244)
!1247 = !DILocation(line: 243, scope: !1244)
!1248 = !DILocation(line: 243, scope: !1249)
!1249 = distinct !DILexicalBlock(scope: !1244, file: !9, line: 243, column: 4)
!1250 = !DILocation(line: 244, scope: !1244)
!1251 = !DILocation(line: 246, scope: !1252)
!1252 = distinct !DILexicalBlock(scope: !1244, file: !9, line: 245, column: 4)
!1253 = !DILocation(line: 247, scope: !1252)
!1254 = !DILocation(line: 248, scope: !1252)
!1255 = !DILocation(line: 249, scope: !1252)
!1256 = !DILocation(line: 253, scope: !1257)
!1257 = distinct !DILexicalBlock(scope: !1244, file: !9, line: 252, column: 4)
!1258 = !DILocation(line: 254, scope: !1257)
!1259 = !DILocalVariable(name: "estr", scope: !1239, file: !9, line: 258, type: !113, align: 8)
!1260 = !DILocation(line: 258, scope: !1239)
!1261 = !DILocation(line: 259, scope: !1239)
!1262 = !DILocation(line: 260, scope: !1239)
!1263 = !DILocation(line: 261, scope: !1239)
!1264 = !DILocalVariable(name: "s", scope: !1239, file: !9, line: 262, type: !113, align: 8)
!1265 = !DILocation(line: 262, scope: !1239)
!1266 = !DILocalVariable(name: "xdigits", scope: !1239, file: !9, line: 263, type: !113, align: 8)
!1267 = !DILocation(line: 263, scope: !1239)
!1268 = !DILocation(line: 264, scope: !1239)
!1269 = !DILocation(line: 270, scope: !1270)
!1270 = distinct !DILexicalBlock(scope: !1239, file: !9, line: 264, column: 3)
!1271 = !DILocalVariable(name: "x", scope: !1272, file: !9, line: 266, type: !3, align: 4)
!1272 = distinct !DILexicalBlock(scope: !1270, file: !9, line: 265, column: 3)
!1273 = !DILocation(line: 266, scope: !1272)
!1274 = !DILocation(line: 267, scope: !1272)
!1275 = !DILocation(line: 268, scope: !1272)
!1276 = !DILocation(line: 269, scope: !1272)
!1277 = !DILocalVariable(name: "outlen", scope: !1239, file: !9, line: 271, type: !1122, align: 8)
!1278 = !DILocation(line: 271, scope: !1239)
!1279 = !DILocalVariable(name: "explen", scope: !1239, file: !9, line: 272, type: !1122, align: 8)
!1280 = !DILocation(line: 272, scope: !1239)
!1281 = !DILocation(line: 273, scope: !1239)
!1282 = !DILocalVariable(name: "len", scope: !1239, file: !9, line: 274, type: !183, align: 8)
!1283 = !DILocation(line: 274, scope: !1239)
!1284 = !DILocalVariable(name: "l", scope: !1239, file: !9, line: 275, type: !183, align: 8)
!1285 = !DILocation(line: 275, scope: !1239)
!1286 = !DILocation(line: 276, scope: !1239)
!1287 = !DILocation(line: 277, scope: !1239)
!1288 = !DILocation(line: 278, scope: !1239)
!1289 = !DILocation(line: 279, scope: !1239)
!1290 = !DILocation(line: 280, scope: !1239)
!1291 = !DILocation(line: 281, scope: !1239)
!1292 = !DILocation(line: 282, scope: !1239)
!1293 = !DILocation(line: 283, scope: !1239)
!1294 = !DILocation(line: 284, scope: !1239)
!1295 = !DILocation(line: 285, scope: !1239)
!1296 = !DILocation(line: 286, scope: !1239)
!1297 = !DILocation(line: 288, scope: !1168)
!1298 = !DILocation(line: 289, scope: !1168)
!1299 = !DILocation(line: 291, scope: !1300)
!1300 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 290, column: 2)
!1301 = !DILocation(line: 292, scope: !1300)
!1302 = !DILocalVariable(name: "a", scope: !1168, file: !9, line: 295, type: !1303, align: 8)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !93, size: 64, align: 64, dwarfAddressSpace: 0)
!1304 = !DILocation(line: 295, scope: !1168)
!1305 = !DILocalVariable(name: "z", scope: !1168, file: !9, line: 295, type: !1303, align: 8)
!1306 = !DILocalVariable(name: "r", scope: !1168, file: !9, line: 295, type: !1303, align: 8)
!1307 = !DILocation(line: 296, scope: !1168)
!1308 = !DILocation(line: 298, scope: !1309)
!1309 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 297, column: 2)
!1310 = !DILocation(line: 302, scope: !1311)
!1311 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 301, column: 2)
!1312 = !DILocation(line: 305, scope: !1168)
!1313 = !DILocation(line: 309, scope: !1314)
!1314 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 305, column: 2)
!1315 = !DILocalVariable(name: "v", scope: !1316, file: !9, line: 307, type: !93, align: 4)
!1316 = distinct !DILexicalBlock(scope: !1314, file: !9, line: 306, column: 2)
!1317 = !DILocation(line: 307, scope: !1316)
!1318 = !DILocation(line: 308, scope: !1316)
!1319 = !DILocation(line: 311, scope: !1168)
!1320 = !DILocation(line: 311, scope: !1321)
!1321 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 311, column: 2)
!1322 = !DILocalVariable(name: "carry", scope: !1323, file: !9, line: 313, type: !93, align: 4)
!1323 = distinct !DILexicalBlock(scope: !1321, file: !9, line: 312, column: 2)
!1324 = !DILocation(line: 313, scope: !1323)
!1325 = !DILocalVariable(name: "sh", scope: !1323, file: !9, line: 314, type: !3, align: 4)
!1326 = !DILocation(line: 314, scope: !1323)
!1327 = !DILocation(line: 422, scope: !1328, inlinedAt: !1326)
!1328 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1187, file: !1187, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1329 = !DILocalVariable(name: "d", scope: !1330, file: !9, line: 315, type: !1303, align: 8)
!1330 = distinct !DILexicalBlock(scope: !1323, file: !9, line: 315, column: 3)
!1331 = !DILocation(line: 315, scope: !1330)
!1332 = !DILocalVariable(name: "x", scope: !1333, file: !9, line: 317, type: !184, align: 8)
!1333 = distinct !DILexicalBlock(scope: !1330, file: !9, line: 316, column: 3)
!1334 = !DILocation(line: 317, scope: !1333)
!1335 = !DILocation(line: 318, scope: !1333)
!1336 = !DILocation(line: 319, scope: !1333)
!1337 = !DILocation(line: 321, scope: !1323)
!1338 = !DILocation(line: 322, scope: !1323)
!1339 = !DILocation(line: 322, scope: !1340)
!1340 = distinct !DILexicalBlock(scope: !1323, file: !9, line: 322, column: 3)
!1341 = !DILocation(line: 323, scope: !1323)
!1342 = !DILocation(line: 326, scope: !1168)
!1343 = !DILocation(line: 326, scope: !1344)
!1344 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 326, column: 2)
!1345 = !DILocalVariable(name: "carry", scope: !1346, file: !9, line: 328, type: !93, align: 4)
!1346 = distinct !DILexicalBlock(scope: !1344, file: !9, line: 327, column: 2)
!1347 = !DILocation(line: 328, scope: !1346)
!1348 = !DILocalVariable(name: "b", scope: !1346, file: !9, line: 329, type: !1303, align: 8)
!1349 = !DILocation(line: 329, scope: !1346)
!1350 = !DILocalVariable(name: "sh", scope: !1346, file: !9, line: 330, type: !3, align: 4)
!1351 = !DILocation(line: 330, scope: !1346)
!1352 = !DILocation(line: 422, scope: !1353, inlinedAt: !1351)
!1353 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1187, file: !1187, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1354 = !DILocalVariable(name: "need", scope: !1346, file: !9, line: 331, type: !3, align: 4)
!1355 = !DILocation(line: 331, scope: !1346)
!1356 = !DILocalVariable(name: "d", scope: !1357, file: !9, line: 332, type: !1303, align: 8)
!1357 = distinct !DILexicalBlock(scope: !1346, file: !9, line: 332, column: 3)
!1358 = !DILocation(line: 332, scope: !1357)
!1359 = !DILocalVariable(name: "rm", scope: !1360, file: !9, line: 335, type: !93, align: 4)
!1360 = distinct !DILexicalBlock(scope: !1357, file: !9, line: 333, column: 3)
!1361 = !DILocation(line: 335, scope: !1360)
!1362 = !DILocation(line: 336, scope: !1360)
!1363 = !DILocation(line: 337, scope: !1360)
!1364 = !DILocation(line: 339, scope: !1346)
!1365 = !DILocation(line: 340, scope: !1346)
!1366 = !DILocation(line: 342, scope: !1346)
!1367 = !DILocation(line: 343, scope: !1346)
!1368 = !DILocation(line: 344, scope: !1346)
!1369 = !DILocalVariable(name: "e", scope: !1168, file: !9, line: 347, type: !3, align: 4)
!1370 = !DILocation(line: 347, scope: !1168)
!1371 = !DILocation(line: 348, scope: !1168)
!1372 = !DILocalVariable(name: "i", scope: !1373, file: !9, line: 350, type: !3, align: 4)
!1373 = distinct !DILexicalBlock(scope: !1374, file: !9, line: 350, column: 3)
!1374 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 349, column: 2)
!1375 = !DILocation(line: 350, scope: !1373)
!1376 = !DILocalVariable(name: "j", scope: !1168, file: !9, line: 354, type: !3, align: 4)
!1377 = !DILocation(line: 354, scope: !1168)
!1378 = !DILocation(line: 355, scope: !1168)
!1379 = !DILocalVariable(name: "x", scope: !1380, file: !9, line: 357, type: !93, align: 4)
!1380 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 356, column: 2)
!1381 = !DILocation(line: 357, scope: !1380)
!1382 = !DILocalVariable(name: "d", scope: !1380, file: !9, line: 359, type: !1303, align: 8)
!1383 = !DILocation(line: 359, scope: !1380)
!1384 = !DILocation(line: 360, scope: !1380)
!1385 = !DILocation(line: 361, scope: !1380)
!1386 = !DILocalVariable(name: "i", scope: !1380, file: !9, line: 362, type: !3, align: 4)
!1387 = !DILocation(line: 362, scope: !1380)
!1388 = !DILocation(line: 363, scope: !1389)
!1389 = distinct !DILexicalBlock(scope: !1380, file: !9, line: 363, column: 3)
!1390 = !DILocation(line: 364, scope: !1380)
!1391 = !DILocation(line: 366, scope: !1380)
!1392 = !DILocalVariable(name: "round", scope: !1393, file: !9, line: 368, type: !1152, align: 8)
!1393 = distinct !DILexicalBlock(scope: !1380, file: !9, line: 367, column: 3)
!1394 = !DILocation(line: 368, scope: !1393)
!1395 = !DILocalVariable(name: "small", scope: !1393, file: !9, line: 369, type: !1152, align: 8)
!1396 = !DILocation(line: 369, scope: !1393)
!1397 = !DILocation(line: 370, scope: !1393)
!1398 = !DILocation(line: 372, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1393, file: !9, line: 371, column: 4)
!1400 = !DILocation(line: 376, scope: !1401)
!1401 = distinct !DILexicalBlock(scope: !1393, file: !9, line: 374, column: 4)
!1402 = !DILocation(line: 377, scope: !1403)
!1403 = distinct !DILexicalBlock(scope: !1401, file: !9, line: 377, column: 6)
!1404 = !DILocation(line: 378, scope: !1401)
!1405 = !DILocation(line: 379, scope: !1406)
!1406 = distinct !DILexicalBlock(scope: !1401, file: !9, line: 379, column: 6)
!1407 = !DILocation(line: 381, scope: !1408)
!1408 = distinct !DILexicalBlock(scope: !1401, file: !9, line: 381, column: 6)
!1409 = !DILocation(line: 383, scope: !1393)
!1410 = !DILocation(line: 385, scope: !1411)
!1411 = distinct !DILexicalBlock(scope: !1393, file: !9, line: 384, column: 4)
!1412 = !DILocation(line: 386, scope: !1411)
!1413 = !DILocation(line: 388, scope: !1393)
!1414 = !DILocation(line: 390, scope: !1393)
!1415 = !DILocation(line: 392, scope: !1416)
!1416 = distinct !DILexicalBlock(scope: !1393, file: !9, line: 391, column: 4)
!1417 = !DILocation(line: 393, scope: !1416)
!1418 = !DILocation(line: 393, scope: !1419)
!1419 = distinct !DILexicalBlock(scope: !1416, file: !9, line: 393, column: 5)
!1420 = !DILocation(line: 395, scope: !1421)
!1421 = distinct !DILexicalBlock(scope: !1419, file: !9, line: 394, column: 5)
!1422 = !DILocation(line: 396, scope: !1421)
!1423 = !DILocation(line: 397, scope: !1421)
!1424 = !DILocation(line: 399, scope: !1425)
!1425 = distinct !DILexicalBlock(scope: !1416, file: !9, line: 399, column: 5)
!1426 = !DILocation(line: 402, scope: !1380)
!1427 = !DILocation(line: 404, scope: !1168)
!1428 = !DILocation(line: 404, scope: !1429)
!1429 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 404, column: 2)
!1430 = !DILocation(line: 406, scope: !1168)
!1431 = !DILocation(line: 408, scope: !1432)
!1432 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 407, column: 2)
!1433 = !DILocation(line: 409, scope: !1432)
!1434 = !DILocation(line: 411, scope: !1435)
!1435 = distinct !DILexicalBlock(scope: !1432, file: !9, line: 410, column: 3)
!1436 = !DILocation(line: 412, scope: !1435)
!1437 = !DILocation(line: 416, scope: !1438)
!1438 = distinct !DILexicalBlock(scope: !1432, file: !9, line: 415, column: 3)
!1439 = !DILocation(line: 417, scope: !1438)
!1440 = !DILocation(line: 419, scope: !1432)
!1441 = !DILocation(line: 422, scope: !1442)
!1442 = distinct !DILexicalBlock(scope: !1432, file: !9, line: 420, column: 3)
!1443 = !DILocalVariable(name: "i", scope: !1444, file: !9, line: 424, type: !3, align: 4)
!1444 = distinct !DILexicalBlock(scope: !1445, file: !9, line: 424, column: 5)
!1445 = distinct !DILexicalBlock(scope: !1442, file: !9, line: 423, column: 4)
!1446 = !DILocation(line: 424, scope: !1444)
!1447 = !DILocation(line: 428, scope: !1448)
!1448 = distinct !DILexicalBlock(scope: !1442, file: !9, line: 427, column: 4)
!1449 = !DILocation(line: 430, scope: !1442)
!1450 = !DILocation(line: 432, scope: !1451)
!1451 = distinct !DILexicalBlock(scope: !1442, file: !9, line: 431, column: 4)
!1452 = !DILocation(line: 405, scope: !1453, inlinedAt: !1450)
!1453 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1187, file: !1187, line: 402, scopeLine: 402, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1454 = !DILocation(line: 422, scope: !1455, inlinedAt: !1450)
!1455 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1187, file: !1187, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1456 = !DILocation(line: 436, scope: !1457)
!1457 = distinct !DILexicalBlock(scope: !1442, file: !9, line: 435, column: 4)
!1458 = !DILocation(line: 405, scope: !1459, inlinedAt: !1456)
!1459 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1187, file: !1187, line: 402, scopeLine: 402, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1460 = !DILocation(line: 422, scope: !1461, inlinedAt: !1456)
!1461 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1187, file: !1187, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1462 = !DILocation(line: 441, scope: !1168)
!1463 = !DILocalVariable(name: "l", scope: !1168, file: !9, line: 442, type: !3, align: 4)
!1464 = !DILocation(line: 442, scope: !1168)
!1465 = !DILocalVariable(name: "estr", scope: !1168, file: !9, line: 443, type: !113, align: 8)
!1466 = !DILocation(line: 443, scope: !1168)
!1467 = !DILocation(line: 444, scope: !1168)
!1468 = !DILocation(line: 446, scope: !1469)
!1469 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 445, column: 2)
!1470 = !DILocation(line: 447, scope: !1469)
!1471 = !DILocation(line: 451, scope: !1472)
!1472 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 450, column: 2)
!1473 = !DILocation(line: 452, scope: !1472)
!1474 = !DILocation(line: 452, scope: !1475)
!1475 = distinct !DILexicalBlock(scope: !1472, file: !9, line: 452, column: 3)
!1476 = !DILocation(line: 453, scope: !1472)
!1477 = !DILocation(line: 454, scope: !1472)
!1478 = !DILocation(line: 455, scope: !1472)
!1479 = !DILocation(line: 456, scope: !1472)
!1480 = !DILocation(line: 458, scope: !1168)
!1481 = !DILocalVariable(name: "len", scope: !1168, file: !9, line: 459, type: !183, align: 8)
!1482 = !DILocation(line: 459, scope: !1168)
!1483 = !DILocation(line: 460, scope: !1168)
!1484 = !DILocation(line: 461, scope: !1168)
!1485 = !DILocation(line: 462, scope: !1168)
!1486 = !DILocation(line: 463, scope: !1168)
!1487 = !DILocation(line: 465, scope: !1488)
!1488 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 464, column: 2)
!1489 = !DILocalVariable(name: "d", scope: !1488, file: !9, line: 466, type: !1303, align: 8)
!1490 = !DILocation(line: 466, scope: !1488)
!1491 = !DILocation(line: 467, scope: !1488)
!1492 = !DILocation(line: 467, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1488, file: !9, line: 467, column: 3)
!1494 = !DILocalVariable(name: "s", scope: !1495, file: !9, line: 469, type: !113, align: 8)
!1495 = distinct !DILexicalBlock(scope: !1493, file: !9, line: 468, column: 3)
!1496 = !DILocation(line: 469, scope: !1495)
!1497 = !DILocation(line: 472, scope: !1498)
!1498 = distinct !DILexicalBlock(scope: !1495, file: !9, line: 470, column: 4)
!1499 = !DILocation(line: 473, scope: !1500)
!1500 = distinct !DILexicalBlock(scope: !1498, file: !9, line: 473, column: 6)
!1501 = !DILocation(line: 473, scope: !1502)
!1502 = distinct !DILexicalBlock(scope: !1500, file: !9, line: 473, column: 6)
!1503 = !DILocation(line: 474, scope: !1498)
!1504 = !DILocation(line: 475, scope: !1505)
!1505 = distinct !DILexicalBlock(scope: !1498, file: !9, line: 475, column: 6)
!1506 = !DILocation(line: 477, scope: !1495)
!1507 = !DILocation(line: 479, scope: !1488)
!1508 = !DILocation(line: 480, scope: !1488)
!1509 = !DILocation(line: 480, scope: !1510)
!1510 = distinct !DILexicalBlock(scope: !1488, file: !9, line: 480, column: 3)
!1511 = !DILocalVariable(name: "s", scope: !1512, file: !9, line: 482, type: !113, align: 8)
!1512 = distinct !DILexicalBlock(scope: !1510, file: !9, line: 481, column: 3)
!1513 = !DILocation(line: 482, scope: !1512)
!1514 = !DILocation(line: 483, scope: !1512)
!1515 = !DILocation(line: 483, scope: !1516)
!1516 = distinct !DILexicalBlock(scope: !1512, file: !9, line: 483, column: 4)
!1517 = !DILocation(line: 484, scope: !1512)
!1518 = !DILocation(line: 422, scope: !1519, inlinedAt: !1517)
!1519 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1187, file: !1187, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1520 = !DILocation(line: 486, scope: !1488)
!1521 = !DILocation(line: 490, scope: !1522)
!1522 = distinct !DILexicalBlock(scope: !1168, file: !9, line: 489, column: 2)
!1523 = !DILocalVariable(name: "d", scope: !1524, file: !9, line: 491, type: !1303, align: 8)
!1524 = distinct !DILexicalBlock(scope: !1522, file: !9, line: 491, column: 3)
!1525 = !DILocation(line: 491, scope: !1524)
!1526 = !DILocalVariable(name: "s", scope: !1527, file: !9, line: 493, type: !113, align: 8)
!1527 = distinct !DILexicalBlock(scope: !1524, file: !9, line: 492, column: 3)
!1528 = !DILocation(line: 493, scope: !1527)
!1529 = !DILocation(line: 494, scope: !1527)
!1530 = !DILocation(line: 495, scope: !1527)
!1531 = !DILocation(line: 497, scope: !1532)
!1532 = distinct !DILexicalBlock(scope: !1527, file: !9, line: 496, column: 4)
!1533 = !DILocation(line: 497, scope: !1534)
!1534 = distinct !DILexicalBlock(scope: !1532, file: !9, line: 497, column: 5)
!1535 = !DILocation(line: 501, scope: !1536)
!1536 = distinct !DILexicalBlock(scope: !1527, file: !9, line: 500, column: 4)
!1537 = !DILocation(line: 502, scope: !1536)
!1538 = !DILocation(line: 504, scope: !1527)
!1539 = !DILocation(line: 422, scope: !1540, inlinedAt: !1538)
!1540 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1187, file: !1187, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1541 = !DILocation(line: 505, scope: !1527)
!1542 = !DILocation(line: 507, scope: !1522)
!1543 = !DILocation(line: 508, scope: !1522)
!1544 = !DILocation(line: 511, scope: !1168)
!1545 = !DILocation(line: 513, scope: !1168)
!1546 = distinct !DISubprogram(name: "ntoa", linkageName: "std.io.Formatter.ntoa", scope: !9, file: !9, line: 516, type: !1547, scopeLine: 516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1547 = !DISubroutineType(types: !1548)
!1548 = !{!111, !230, !237, !553, !377, !93}
!1549 = !DILocation(line: 517, scope: !1546)
!1550 = !DILocalVariable(name: "self", arg: 1, scope: !1546, file: !9, line: 516, type: !237)
!1551 = !DILocation(line: 516, scope: !1546)
!1552 = !DILocalVariable(name: "value", arg: 2, scope: !1546, file: !9, line: 516, type: !553)
!1553 = !DILocalVariable(name: "negative", arg: 3, scope: !1546, file: !9, line: 516, type: !377)
!1554 = !DILocalVariable(name: "base", arg: 4, scope: !1546, file: !9, line: 516, type: !93)
!1555 = !DILocalVariable(name: "buf", scope: !1546, file: !9, line: 518, type: !1556, align: 16)
!1556 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 2048, align: 8, elements: !1557)
!1557 = !{!1558}
!1558 = !DISubrange(count: 256, lowerBound: 0)
!1559 = !DILocation(line: 518, scope: !1546)
!1560 = !DILocalVariable(name: "len", scope: !1546, file: !9, line: 519, type: !183, align: 8)
!1561 = !DILocation(line: 519, scope: !1546)
!1562 = !DILocation(line: 522, scope: !1546)
!1563 = !DILocation(line: 525, scope: !1546)
!1564 = !DILocalVariable(name: "past_10", scope: !1565, file: !9, line: 527, type: !11, align: 1)
!1565 = distinct !DILexicalBlock(scope: !1546, file: !9, line: 526, column: 2)
!1566 = !DILocation(line: 527, scope: !1565)
!1567 = !DILocation(line: 528, scope: !1565)
!1568 = !DILocation(line: 535, scope: !1569)
!1569 = distinct !DILexicalBlock(scope: !1565, file: !9, line: 528, column: 3)
!1570 = !DILocation(line: 530, scope: !1571)
!1571 = distinct !DILexicalBlock(scope: !1569, file: !9, line: 529, column: 3)
!1572 = !DILocalVariable(name: "digit", scope: !1571, file: !9, line: 531, type: !11, align: 1)
!1573 = !DILocation(line: 531, scope: !1571)
!1574 = !DILocation(line: 532, scope: !1571)
!1575 = !DILocation(line: 533, scope: !1571)
!1576 = !DILocation(line: 537, scope: !1546)
!1577 = distinct !DISubprogram(name: "ntoa_format", linkageName: "std.io.Formatter.ntoa_format", scope: !9, file: !9, line: 540, type: !1578, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1578 = !DISubroutineType(types: !1579)
!1579 = !{!111, !230, !237, !235, !184, !377, !93}
!1580 = !DILocation(line: 541, scope: !1577)
!1581 = !DILocalVariable(name: "self", arg: 1, scope: !1577, file: !9, line: 540, type: !237)
!1582 = !DILocation(line: 540, scope: !1577)
!1583 = !DILocalVariable(name: "buf", arg: 2, scope: !1577, file: !9, line: 540, type: !235)
!1584 = !DILocalVariable(name: "len", arg: 3, scope: !1577, file: !9, line: 540, type: !183)
!1585 = !DILocalVariable(name: "negative", arg: 4, scope: !1577, file: !9, line: 540, type: !377)
!1586 = !DILocalVariable(name: "base", arg: 5, scope: !1577, file: !9, line: 540, type: !93)
!1587 = !DILocation(line: 543, scope: !1577)
!1588 = !DILocation(line: 545, scope: !1589)
!1589 = distinct !DILexicalBlock(scope: !1577, file: !9, line: 544, column: 2)
!1590 = !DILocation(line: 546, scope: !1589)
!1591 = !DILocation(line: 546, scope: !1592)
!1592 = distinct !DILexicalBlock(scope: !1589, file: !9, line: 546, column: 3)
!1593 = !DILocation(line: 548, scope: !1594)
!1594 = distinct !DILexicalBlock(scope: !1592, file: !9, line: 547, column: 3)
!1595 = !DILocation(line: 549, scope: !1594)
!1596 = !DILocation(line: 551, scope: !1589)
!1597 = !DILocation(line: 551, scope: !1598)
!1598 = distinct !DILexicalBlock(scope: !1589, file: !9, line: 551, column: 3)
!1599 = !DILocation(line: 553, scope: !1600)
!1600 = distinct !DILexicalBlock(scope: !1598, file: !9, line: 552, column: 3)
!1601 = !DILocation(line: 554, scope: !1600)
!1602 = !DILocation(line: 559, scope: !1577)
!1603 = !DILocation(line: 561, scope: !1604)
!1604 = distinct !DILexicalBlock(scope: !1577, file: !9, line: 560, column: 2)
!1605 = !DILocation(line: 563, scope: !1606)
!1606 = distinct !DILexicalBlock(scope: !1604, file: !9, line: 562, column: 3)
!1607 = !DILocation(line: 564, scope: !1606)
!1608 = !DILocation(line: 566, scope: !1604)
!1609 = !DILocation(line: 568, scope: !1610)
!1610 = distinct !DILexicalBlock(scope: !1604, file: !9, line: 567, column: 3)
!1611 = !DILocation(line: 572, scope: !1612)
!1612 = distinct !DILexicalBlock(scope: !1613, file: !9, line: 572, column: 6)
!1613 = distinct !DILexicalBlock(scope: !1610, file: !9, line: 569, column: 4)
!1614 = !DILocation(line: 574, scope: !1615)
!1615 = distinct !DILexicalBlock(scope: !1613, file: !9, line: 574, column: 6)
!1616 = !DILocation(line: 576, scope: !1617)
!1617 = distinct !DILexicalBlock(scope: !1613, file: !9, line: 576, column: 6)
!1618 = !DILocation(line: 164, scope: !1619, inlinedAt: !1620)
!1619 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !190, file: !190, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1620 = !DILocation(line: 578, scope: !1621)
!1621 = distinct !DILexicalBlock(scope: !1613, file: !9, line: 578, column: 6)
!1622 = !DILocation(line: 166, scope: !1619, inlinedAt: !1620)
!1623 = !DILocation(line: 580, scope: !1610)
!1624 = !DILocation(line: 586, scope: !1625)
!1625 = distinct !DILexicalBlock(scope: !1577, file: !9, line: 584, column: 2)
!1626 = !DILocation(line: 587, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1625, file: !9, line: 587, column: 4)
!1628 = !DILocation(line: 588, scope: !1627)
!1629 = !DILocation(line: 589, scope: !1625)
!1630 = !DILocation(line: 590, scope: !1631)
!1631 = distinct !DILexicalBlock(scope: !1625, file: !9, line: 590, column: 4)
!1632 = !DILocation(line: 591, scope: !1631)
!1633 = !DILocation(line: 592, scope: !1625)
!1634 = !DILocation(line: 593, scope: !1635)
!1635 = distinct !DILexicalBlock(scope: !1625, file: !9, line: 593, column: 4)
!1636 = !DILocation(line: 594, scope: !1635)
!1637 = !DILocation(line: 596, scope: !1577)
!1638 = !DILocation(line: 597, scope: !1577)
!1639 = distinct !DISubprogram(name: "ntoa_any", linkageName: "std.io.Formatter.ntoa_any", scope: !9, file: !9, line: 601, type: !1640, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1640 = !DISubroutineType(types: !1641)
!1641 = !{!111, !230, !237, !266, !93}
!1642 = !DILocation(line: 602, scope: !1639)
!1643 = !DILocalVariable(name: "self", arg: 1, scope: !1639, file: !9, line: 601, type: !237)
!1644 = !DILocation(line: 601, scope: !1639)
!1645 = !DILocalVariable(name: "arg", arg: 2, scope: !1639, file: !9, line: 601, type: !266)
!1646 = !DILocalVariable(name: "base", arg: 3, scope: !1639, file: !9, line: 601, type: !93)
!1647 = !DILocalVariable(name: "is_neg", scope: !1639, file: !9, line: 603, type: !377, align: 1)
!1648 = !DILocation(line: 603, scope: !1639)
!1649 = !DILocation(line: 604, scope: !1639)
!1650 = distinct !DISubprogram(name: "out_char", linkageName: "std.io.Formatter.out_char", scope: !9, file: !9, line: 607, type: !401, scopeLine: 607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1651 = !DILocation(line: 608, scope: !1650)
!1652 = !DILocalVariable(name: "self", arg: 1, scope: !1650, file: !9, line: 607, type: !237)
!1653 = !DILocation(line: 607, scope: !1650)
!1654 = !DILocalVariable(name: "arg", arg: 2, scope: !1650, file: !9, line: 607, type: !266)
!1655 = !DILocation(line: 609, scope: !1650)
!1656 = !DILocation(line: 611, scope: !1657)
!1657 = distinct !DILexicalBlock(scope: !1650, file: !9, line: 610, column: 2)
!1658 = !DILocalVariable(name: "len", scope: !1650, file: !9, line: 613, type: !183, align: 8)
!1659 = !DILocation(line: 613, scope: !1650)
!1660 = !DILocalVariable(name: "l", scope: !1650, file: !9, line: 614, type: !93, align: 4)
!1661 = !DILocation(line: 614, scope: !1650)
!1662 = !DILocation(line: 616, scope: !1650)
!1663 = !DILocalVariable(name: "c", scope: !1650, file: !9, line: 618, type: !1664, align: 4)
!1664 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !9, file: !9, line: 8, baseType: !93, align: 4)
!1665 = !DILocation(line: 618, scope: !1650)
!1666 = !DILocation(line: 22, scope: !1667, inlinedAt: !1665)
!1667 = distinct !DILexicalBlock(scope: !1668, file: !467, line: 26, column: 1)
!1668 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !467, file: !467, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1669 = !DILocation(line: 23, scope: !1667, inlinedAt: !1665)
!1670 = !DILocalVariable(name: "any_type", scope: !1668, file: !9, line: 27, type: !91, align: 8)
!1671 = !DILocation(line: 27, scope: !1668, inlinedAt: !1665)
!1672 = !DILocalVariable(name: "kind", scope: !1668, file: !9, line: 28, type: !56, align: 1)
!1673 = !DILocation(line: 28, scope: !1668, inlinedAt: !1665)
!1674 = !DILocalVariable(name: "is_mixed_signed", scope: !1668, file: !9, line: 29, type: !377, align: 1)
!1675 = !DILocation(line: 29, scope: !1668, inlinedAt: !1665)
!1676 = !DILocalVariable(name: "max", scope: !1668, file: !9, line: 30, type: !93, align: 4)
!1677 = !DILocation(line: 30, scope: !1668, inlinedAt: !1665)
!1678 = !DILocalVariable(name: "min", scope: !1668, file: !9, line: 31, type: !93, align: 4)
!1679 = !DILocation(line: 31, scope: !1668, inlinedAt: !1665)
!1680 = !DILocation(line: 34, scope: !1681, inlinedAt: !1665)
!1681 = distinct !DILexicalBlock(scope: !1668, file: !467, line: 32, column: 2)
!1682 = !DILocalVariable(name: "c", scope: !1683, file: !9, line: 35, type: !491, align: 1)
!1683 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 35, column: 4)
!1684 = !DILocation(line: 35, scope: !1683, inlinedAt: !1665)
!1685 = !DILocation(line: 36, scope: !1683, inlinedAt: !1665)
!1686 = !DILocation(line: 37, scope: !1683, inlinedAt: !1665)
!1687 = !DILocation(line: 38, scope: !1681, inlinedAt: !1665)
!1688 = !DILocalVariable(name: "s", scope: !1689, file: !9, line: 39, type: !498, align: 2)
!1689 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 39, column: 4)
!1690 = !DILocation(line: 39, scope: !1689, inlinedAt: !1665)
!1691 = !DILocation(line: 40, scope: !1689, inlinedAt: !1665)
!1692 = !DILocation(line: 41, scope: !1689, inlinedAt: !1665)
!1693 = !DILocation(line: 42, scope: !1689, inlinedAt: !1665)
!1694 = !DILocation(line: 43, scope: !1681, inlinedAt: !1665)
!1695 = !DILocalVariable(name: "i", scope: !1696, file: !9, line: 44, type: !3, align: 4)
!1696 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 44, column: 4)
!1697 = !DILocation(line: 44, scope: !1696, inlinedAt: !1665)
!1698 = !DILocation(line: 45, scope: !1696, inlinedAt: !1665)
!1699 = !DILocation(line: 46, scope: !1696, inlinedAt: !1665)
!1700 = !DILocation(line: 47, scope: !1696, inlinedAt: !1665)
!1701 = !DILocation(line: 48, scope: !1681, inlinedAt: !1665)
!1702 = !DILocalVariable(name: "l", scope: !1703, file: !9, line: 49, type: !112, align: 8)
!1703 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 49, column: 4)
!1704 = !DILocation(line: 49, scope: !1703, inlinedAt: !1665)
!1705 = !DILocation(line: 50, scope: !1703, inlinedAt: !1665)
!1706 = !DILocation(line: 51, scope: !1703, inlinedAt: !1665)
!1707 = !DILocation(line: 52, scope: !1703, inlinedAt: !1665)
!1708 = !DILocation(line: 53, scope: !1681, inlinedAt: !1665)
!1709 = !DILocalVariable(name: "i", scope: !1710, file: !9, line: 54, type: !520, align: 16)
!1710 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 54, column: 4)
!1711 = !DILocation(line: 54, scope: !1710, inlinedAt: !1665)
!1712 = !DILocation(line: 55, scope: !1710, inlinedAt: !1665)
!1713 = !DILocation(line: 56, scope: !1710, inlinedAt: !1665)
!1714 = !DILocation(line: 57, scope: !1710, inlinedAt: !1665)
!1715 = !DILocation(line: 58, scope: !1681, inlinedAt: !1665)
!1716 = !DILocalVariable(name: "c", scope: !1717, file: !9, line: 59, type: !11, align: 1)
!1717 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 59, column: 4)
!1718 = !DILocation(line: 59, scope: !1717, inlinedAt: !1665)
!1719 = !DILocation(line: 60, scope: !1717, inlinedAt: !1665)
!1720 = !DILocation(line: 61, scope: !1717, inlinedAt: !1665)
!1721 = !DILocation(line: 62, scope: !1681, inlinedAt: !1665)
!1722 = !DILocalVariable(name: "s", scope: !1723, file: !9, line: 63, type: !534, align: 2)
!1723 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 63, column: 4)
!1724 = !DILocation(line: 63, scope: !1723, inlinedAt: !1665)
!1725 = !DILocation(line: 64, scope: !1723, inlinedAt: !1665)
!1726 = !DILocation(line: 65, scope: !1723, inlinedAt: !1665)
!1727 = !DILocation(line: 66, scope: !1681, inlinedAt: !1665)
!1728 = !DILocalVariable(name: "i", scope: !1729, file: !9, line: 67, type: !93, align: 4)
!1729 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 67, column: 4)
!1730 = !DILocation(line: 67, scope: !1729, inlinedAt: !1665)
!1731 = !DILocation(line: 68, scope: !1729, inlinedAt: !1665)
!1732 = !DILocation(line: 69, scope: !1729, inlinedAt: !1665)
!1733 = !DILocation(line: 70, scope: !1681, inlinedAt: !1665)
!1734 = !DILocalVariable(name: "l", scope: !1735, file: !9, line: 71, type: !184, align: 8)
!1735 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 71, column: 4)
!1736 = !DILocation(line: 71, scope: !1735, inlinedAt: !1665)
!1737 = !DILocation(line: 72, scope: !1735, inlinedAt: !1665)
!1738 = !DILocation(line: 73, scope: !1735, inlinedAt: !1665)
!1739 = !DILocation(line: 74, scope: !1681, inlinedAt: !1665)
!1740 = !DILocalVariable(name: "i", scope: !1741, file: !9, line: 75, type: !553, align: 16)
!1741 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 75, column: 4)
!1742 = !DILocation(line: 75, scope: !1741, inlinedAt: !1665)
!1743 = !DILocation(line: 76, scope: !1741, inlinedAt: !1665)
!1744 = !DILocation(line: 77, scope: !1741, inlinedAt: !1665)
!1745 = !DILocation(line: 164, scope: !1746, inlinedAt: !1747)
!1746 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !190, file: !190, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1747 = !DILocation(line: 79, scope: !1748, inlinedAt: !1665)
!1748 = distinct !DILexicalBlock(scope: !1681, file: !467, line: 79, column: 4)
!1749 = !DILocation(line: 166, scope: !1746, inlinedAt: !1747)
!1750 = !DILocation(line: 621, scope: !1751)
!1751 = distinct !DILexicalBlock(scope: !1650, file: !9, line: 619, column: 2)
!1752 = !DILocation(line: 622, scope: !1753)
!1753 = distinct !DILexicalBlock(scope: !1751, file: !9, line: 622, column: 4)
!1754 = !DILocation(line: 623, scope: !1751)
!1755 = !DILocation(line: 624, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1751, file: !9, line: 624, column: 4)
!1757 = !DILocation(line: 625, scope: !1756)
!1758 = !DILocation(line: 626, scope: !1751)
!1759 = !DILocation(line: 627, scope: !1760)
!1760 = distinct !DILexicalBlock(scope: !1751, file: !9, line: 627, column: 4)
!1761 = !DILocation(line: 628, scope: !1760)
!1762 = !DILocation(line: 629, scope: !1760)
!1763 = !DILocation(line: 631, scope: !1764)
!1764 = distinct !DILexicalBlock(scope: !1751, file: !9, line: 631, column: 4)
!1765 = !DILocation(line: 632, scope: !1764)
!1766 = !DILocation(line: 633, scope: !1764)
!1767 = !DILocation(line: 634, scope: !1764)
!1768 = !DILocation(line: 636, scope: !1650)
!1769 = !DILocation(line: 637, scope: !1650)
!1770 = distinct !DISubprogram(name: "out_reverse", linkageName: "std.io.Formatter.out_reverse", scope: !9, file: !9, line: 641, type: !1136, scopeLine: 641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1771 = !DILocation(line: 642, scope: !1770)
!1772 = !DILocalVariable(name: "self", arg: 1, scope: !1770, file: !9, line: 641, type: !237)
!1773 = !DILocation(line: 641, scope: !1770)
!1774 = !DILocalVariable(name: "buf", arg: 2, scope: !1770, file: !9, line: 641, type: !179)
!1775 = !DILocalVariable(name: "n", scope: !1770, file: !9, line: 643, type: !183, align: 8)
!1776 = !DILocation(line: 643, scope: !1770)
!1777 = !DILocalVariable(name: "buffer_start_idx", scope: !1770, file: !9, line: 644, type: !183, align: 8)
!1778 = !DILocation(line: 644, scope: !1770)
!1779 = !DILocalVariable(name: "len", scope: !1770, file: !9, line: 645, type: !183, align: 8)
!1780 = !DILocation(line: 645, scope: !1770)
!1781 = !DILocation(line: 647, scope: !1770)
!1782 = !DILocation(line: 649, scope: !1783)
!1783 = distinct !DILexicalBlock(scope: !1770, file: !9, line: 648, column: 2)
!1784 = !DILocation(line: 652, scope: !1770)
!1785 = !DILocation(line: 652, scope: !1786)
!1786 = distinct !DILexicalBlock(scope: !1770, file: !9, line: 652, column: 2)
!1787 = !DILocation(line: 655, scope: !1770)
!1788 = !DILocation(line: 656, scope: !1770)
!1789 = distinct !DISubprogram(name: "int_from_any", linkageName: "std.io.int_from_any", scope: !9, file: !9, line: 25, type: !1790, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1790 = !DISubroutineType(types: !1791)
!1791 = !{!111, !1792, !266, !1793}
!1792 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !553, size: 64, align: 64, dwarfAddressSpace: 0)
!1793 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "bool*", baseType: !377, size: 64, align: 64, dwarfAddressSpace: 0)
!1794 = !DILocalVariable(name: "arg", arg: 1, scope: !1789, file: !9, line: 25, type: !266)
!1795 = !DILocation(line: 25, scope: !1789)
!1796 = !DILocalVariable(name: "is_neg", arg: 2, scope: !1789, file: !9, line: 25, type: !1793)
!1797 = !DILocation(line: 27, scope: !1798)
!1798 = distinct !DILexicalBlock(scope: !1789, file: !9, line: 27, column: 2)
!1799 = !DILocation(line: 30, scope: !1800)
!1800 = distinct !DILexicalBlock(scope: !1798, file: !9, line: 30, column: 4)
!1801 = !DILocation(line: 31, scope: !1800)
!1802 = !DILocation(line: 199, scope: !1803, inlinedAt: !1804)
!1803 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !190, file: !190, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1804 = !DILocation(line: 34, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1798, file: !9, line: 34, column: 4)
!1806 = !DILocation(line: 36, scope: !1807)
!1807 = distinct !DILexicalBlock(scope: !1798, file: !9, line: 36, column: 4)
!1808 = !DILocation(line: 38, scope: !1789)
!1809 = !DILocation(line: 39, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1789, file: !9, line: 39, column: 2)
!1811 = !DILocation(line: 41, scope: !1810)
!1812 = !DILocalVariable(name: "arg", scope: !1813, file: !9, line: 25, type: !1793, align: 8)
!1813 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 42, column: 4)
!1814 = !DILocation(line: 25, scope: !1813)
!1815 = !DILocation(line: 42, scope: !1813)
!1816 = !DILocation(line: 43, scope: !1810)
!1817 = !DILocalVariable(name: "arg", scope: !1818, file: !9, line: 25, type: !1819, align: 8)
!1818 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 44, column: 4)
!1819 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !491, size: 64, align: 64, dwarfAddressSpace: 0)
!1820 = !DILocation(line: 25, scope: !1818)
!1821 = !DILocalVariable(name: "val", scope: !1818, file: !9, line: 44, type: !3, align: 4)
!1822 = !DILocation(line: 44, scope: !1818)
!1823 = !DILocation(line: 45, scope: !1818)
!1824 = !DILocation(line: 46, scope: !1810)
!1825 = !DILocalVariable(name: "arg", scope: !1826, file: !9, line: 25, type: !1827, align: 8)
!1826 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 47, column: 4)
!1827 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !498, size: 64, align: 64, dwarfAddressSpace: 0)
!1828 = !DILocation(line: 25, scope: !1826)
!1829 = !DILocalVariable(name: "val", scope: !1826, file: !9, line: 47, type: !3, align: 4)
!1830 = !DILocation(line: 47, scope: !1826)
!1831 = !DILocation(line: 48, scope: !1826)
!1832 = !DILocation(line: 49, scope: !1810)
!1833 = !DILocalVariable(name: "arg", scope: !1834, file: !9, line: 25, type: !1835, align: 8)
!1834 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 50, column: 4)
!1835 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1836 = !DILocation(line: 25, scope: !1834)
!1837 = !DILocalVariable(name: "val", scope: !1834, file: !9, line: 50, type: !3, align: 4)
!1838 = !DILocation(line: 50, scope: !1834)
!1839 = !DILocation(line: 51, scope: !1834)
!1840 = !DILocation(line: 52, scope: !1810)
!1841 = !DILocalVariable(name: "arg", scope: !1842, file: !9, line: 25, type: !1843, align: 8)
!1842 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 53, column: 4)
!1843 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !112, size: 64, align: 64, dwarfAddressSpace: 0)
!1844 = !DILocation(line: 25, scope: !1842)
!1845 = !DILocalVariable(name: "val", scope: !1842, file: !9, line: 53, type: !112, align: 8)
!1846 = !DILocation(line: 53, scope: !1842)
!1847 = !DILocation(line: 54, scope: !1842)
!1848 = !DILocation(line: 55, scope: !1810)
!1849 = !DILocalVariable(name: "arg", scope: !1850, file: !9, line: 25, type: !1851, align: 8)
!1850 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 56, column: 4)
!1851 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !520, size: 64, align: 64, dwarfAddressSpace: 0)
!1852 = !DILocation(line: 25, scope: !1850)
!1853 = !DILocalVariable(name: "val", scope: !1850, file: !9, line: 56, type: !520, align: 16)
!1854 = !DILocation(line: 56, scope: !1850)
!1855 = !DILocation(line: 57, scope: !1850)
!1856 = !DILocation(line: 58, scope: !1810)
!1857 = !DILocalVariable(name: "arg", scope: !1858, file: !9, line: 25, type: !113, align: 8)
!1858 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 59, column: 4)
!1859 = !DILocation(line: 25, scope: !1858)
!1860 = !DILocation(line: 59, scope: !1858)
!1861 = !DILocation(line: 60, scope: !1810)
!1862 = !DILocalVariable(name: "arg", scope: !1863, file: !9, line: 25, type: !1864, align: 8)
!1863 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 61, column: 4)
!1864 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !534, size: 64, align: 64, dwarfAddressSpace: 0)
!1865 = !DILocation(line: 25, scope: !1863)
!1866 = !DILocation(line: 61, scope: !1863)
!1867 = !DILocation(line: 62, scope: !1810)
!1868 = !DILocalVariable(name: "arg", scope: !1869, file: !9, line: 25, type: !1303, align: 8)
!1869 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 63, column: 4)
!1870 = !DILocation(line: 25, scope: !1869)
!1871 = !DILocation(line: 63, scope: !1869)
!1872 = !DILocation(line: 64, scope: !1810)
!1873 = !DILocalVariable(name: "arg", scope: !1874, file: !9, line: 25, type: !1875, align: 8)
!1874 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 65, column: 4)
!1875 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !184, size: 64, align: 64, dwarfAddressSpace: 0)
!1876 = !DILocation(line: 25, scope: !1874)
!1877 = !DILocation(line: 65, scope: !1874)
!1878 = !DILocation(line: 66, scope: !1810)
!1879 = !DILocalVariable(name: "arg", scope: !1880, file: !9, line: 25, type: !1792, align: 8)
!1880 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 67, column: 4)
!1881 = !DILocation(line: 25, scope: !1880)
!1882 = !DILocation(line: 67, scope: !1880)
!1883 = !DILocation(line: 68, scope: !1810)
!1884 = !DILocalVariable(name: "arg", scope: !1885, file: !9, line: 25, type: !1886, align: 8)
!1885 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 69, column: 4)
!1886 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !1887, size: 64, align: 64, dwarfAddressSpace: 0)
!1887 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!1888 = !DILocation(line: 25, scope: !1885)
!1889 = !DILocalVariable(name: "f", scope: !1885, file: !9, line: 69, type: !1887, align: 4)
!1890 = !DILocation(line: 69, scope: !1885)
!1891 = !DILocation(line: 70, scope: !1885)
!1892 = !DILocation(line: 71, scope: !1810)
!1893 = !DILocalVariable(name: "arg", scope: !1894, file: !9, line: 25, type: !1895, align: 8)
!1894 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 72, column: 4)
!1895 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !1152, size: 64, align: 64, dwarfAddressSpace: 0)
!1896 = !DILocation(line: 25, scope: !1894)
!1897 = !DILocalVariable(name: "d", scope: !1894, file: !9, line: 72, type: !1152, align: 8)
!1898 = !DILocation(line: 72, scope: !1894)
!1899 = !DILocation(line: 73, scope: !1894)
!1900 = !DILocation(line: 75, scope: !1901)
!1901 = distinct !DILexicalBlock(scope: !1810, file: !9, line: 75, column: 4)
!1902 = distinct !DISubprogram(name: "float_from_any", linkageName: "std.io.float_from_any", scope: !9, file: !9, line: 79, type: !1903, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1903 = !DISubroutineType(types: !1904)
!1904 = !{!111, !1905, !266}
!1905 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "FloatType*", baseType: !1906, size: 64, align: 64, dwarfAddressSpace: 0)
!1906 = !DIDerivedType(tag: DW_TAG_typedef, name: "FloatType", scope: !9, file: !9, line: 24, baseType: !1152, align: 8)
!1907 = !DILocalVariable(name: "arg", arg: 1, scope: !1902, file: !9, line: 79, type: !266)
!1908 = !DILocation(line: 79, scope: !1902)
!1909 = !DILocation(line: 84, scope: !1902)
!1910 = !DILocation(line: 199, scope: !1911, inlinedAt: !1912)
!1911 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !190, file: !190, line: 197, scopeLine: 197, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1912 = !DILocation(line: 86, scope: !1913)
!1913 = distinct !DILexicalBlock(scope: !1902, file: !9, line: 85, column: 2)
!1914 = !DILocation(line: 88, scope: !1915)
!1915 = distinct !DILexicalBlock(scope: !1902, file: !9, line: 88, column: 2)
!1916 = !DILocation(line: 90, scope: !1915)
!1917 = !DILocalVariable(name: "arg", scope: !1918, file: !9, line: 79, type: !1793, align: 8)
!1918 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 91, column: 4)
!1919 = !DILocation(line: 79, scope: !1918)
!1920 = !DILocation(line: 91, scope: !1918)
!1921 = !DILocation(line: 92, scope: !1915)
!1922 = !DILocalVariable(name: "arg", scope: !1923, file: !9, line: 79, type: !1819, align: 8)
!1923 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 93, column: 4)
!1924 = !DILocation(line: 79, scope: !1923)
!1925 = !DILocation(line: 93, scope: !1923)
!1926 = !DILocation(line: 94, scope: !1915)
!1927 = !DILocalVariable(name: "arg", scope: !1928, file: !9, line: 79, type: !1827, align: 8)
!1928 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 95, column: 4)
!1929 = !DILocation(line: 79, scope: !1928)
!1930 = !DILocation(line: 95, scope: !1928)
!1931 = !DILocation(line: 96, scope: !1915)
!1932 = !DILocalVariable(name: "arg", scope: !1933, file: !9, line: 79, type: !1835, align: 8)
!1933 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 97, column: 4)
!1934 = !DILocation(line: 79, scope: !1933)
!1935 = !DILocation(line: 97, scope: !1933)
!1936 = !DILocation(line: 98, scope: !1915)
!1937 = !DILocalVariable(name: "arg", scope: !1938, file: !9, line: 79, type: !1843, align: 8)
!1938 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 99, column: 4)
!1939 = !DILocation(line: 79, scope: !1938)
!1940 = !DILocation(line: 99, scope: !1938)
!1941 = !DILocation(line: 100, scope: !1915)
!1942 = !DILocalVariable(name: "arg", scope: !1943, file: !9, line: 79, type: !1851, align: 8)
!1943 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 101, column: 4)
!1944 = !DILocation(line: 79, scope: !1943)
!1945 = !DILocation(line: 101, scope: !1943)
!1946 = !DILocation(line: 102, scope: !1915)
!1947 = !DILocalVariable(name: "arg", scope: !1948, file: !9, line: 79, type: !113, align: 8)
!1948 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 103, column: 4)
!1949 = !DILocation(line: 79, scope: !1948)
!1950 = !DILocation(line: 103, scope: !1948)
!1951 = !DILocation(line: 104, scope: !1915)
!1952 = !DILocalVariable(name: "arg", scope: !1953, file: !9, line: 79, type: !1864, align: 8)
!1953 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 105, column: 4)
!1954 = !DILocation(line: 79, scope: !1953)
!1955 = !DILocation(line: 105, scope: !1953)
!1956 = !DILocation(line: 106, scope: !1915)
!1957 = !DILocalVariable(name: "arg", scope: !1958, file: !9, line: 79, type: !1303, align: 8)
!1958 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 107, column: 4)
!1959 = !DILocation(line: 79, scope: !1958)
!1960 = !DILocation(line: 107, scope: !1958)
!1961 = !DILocation(line: 108, scope: !1915)
!1962 = !DILocalVariable(name: "arg", scope: !1963, file: !9, line: 79, type: !1875, align: 8)
!1963 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 109, column: 4)
!1964 = !DILocation(line: 79, scope: !1963)
!1965 = !DILocation(line: 109, scope: !1963)
!1966 = !DILocation(line: 110, scope: !1915)
!1967 = !DILocalVariable(name: "arg", scope: !1968, file: !9, line: 79, type: !1792, align: 8)
!1968 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 111, column: 4)
!1969 = !DILocation(line: 79, scope: !1968)
!1970 = !DILocation(line: 111, scope: !1968)
!1971 = !DILocation(line: 112, scope: !1915)
!1972 = !DILocalVariable(name: "arg", scope: !1973, file: !9, line: 79, type: !1886, align: 8)
!1973 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 113, column: 4)
!1974 = !DILocation(line: 79, scope: !1973)
!1975 = !DILocation(line: 113, scope: !1973)
!1976 = !DILocation(line: 114, scope: !1915)
!1977 = !DILocalVariable(name: "arg", scope: !1978, file: !9, line: 79, type: !1895, align: 8)
!1978 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 115, column: 4)
!1979 = !DILocation(line: 79, scope: !1978)
!1980 = !DILocation(line: 115, scope: !1978)
!1981 = !DILocation(line: 117, scope: !1982)
!1982 = distinct !DILexicalBlock(scope: !1915, file: !9, line: 117, column: 4)
!1983 = distinct !DISubprogram(name: "simple_atoi", linkageName: "std.io.simple_atoi", scope: !9, file: !9, line: 130, type: !1984, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!1984 = !DISubroutineType(types: !1985)
!1985 = !{!93, !113, !184, !1875}
!1986 = !DILocalVariable(name: "buf", arg: 1, scope: !1983, file: !9, line: 130, type: !113)
!1987 = !DILocation(line: 130, scope: !1983)
!1988 = !DILocalVariable(name: "maxlen", arg: 2, scope: !1983, file: !9, line: 130, type: !183)
!1989 = !DILocalVariable(name: "len_ptr", arg: 3, scope: !1983, file: !9, line: 130, type: !230)
!1990 = !DILocalVariable(name: "i", scope: !1983, file: !9, line: 132, type: !93, align: 4)
!1991 = !DILocation(line: 132, scope: !1983)
!1992 = !DILocalVariable(name: "len", scope: !1983, file: !9, line: 133, type: !183, align: 8)
!1993 = !DILocation(line: 133, scope: !1983)
!1994 = !DILocation(line: 134, scope: !1983)
!1995 = !DILocation(line: 134, scope: !1996)
!1996 = distinct !DILexicalBlock(scope: !1983, file: !9, line: 134, column: 2)
!1997 = !DILocalVariable(name: "c", scope: !1998, file: !9, line: 136, type: !11, align: 1)
!1998 = distinct !DILexicalBlock(scope: !1996, file: !9, line: 135, column: 2)
!1999 = !DILocation(line: 136, scope: !1998)
!2000 = !DILocation(line: 137, scope: !1998)
!2001 = !DILocation(line: 138, scope: !1998)
!2002 = !DILocation(line: 139, scope: !1998)
!2003 = !DILocation(line: 141, scope: !1983)
!2004 = !DILocation(line: 142, scope: !1983)
!2005 = distinct !DISubprogram(name: "fmt_u", linkageName: "std.io.fmt_u", scope: !9, file: !9, line: 171, type: !2006, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2006 = !DISubroutineType(types: !2007)
!2007 = !{!113, !553, !113}
!2008 = !DILocalVariable(name: "x", arg: 1, scope: !2005, file: !9, line: 171, type: !553)
!2009 = !DILocation(line: 171, scope: !2005)
!2010 = !DILocalVariable(name: "s", arg: 2, scope: !2005, file: !9, line: 171, type: !113)
!2011 = !DILocation(line: 173, scope: !2005)
!2012 = !DILocation(line: 173, scope: !2013)
!2013 = distinct !DILexicalBlock(scope: !2005, file: !9, line: 173, column: 2)
!2014 = !DILocalVariable(name: "y", scope: !2015, file: !9, line: 174, type: !184, align: 8)
!2015 = distinct !DILexicalBlock(scope: !2005, file: !9, line: 174, column: 2)
!2016 = !DILocation(line: 174, scope: !2015)
!2017 = !DILocation(line: 175, scope: !2005)
!2018 = distinct !DISubprogram(name: "printf_parse_format_field", linkageName: "std.io.printf_parse_format_field", scope: !9, file: !9, line: 660, type: !2019, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2019 = !DISubroutineType(types: !2020)
!2020 = !{!111, !1835, !265, !184, !1875, !113, !184, !1875}
!2021 = !DILocalVariable(name: "args_ptr", arg: 1, scope: !2018, file: !9, line: 661, type: !265)
!2022 = !DILocation(line: 661, scope: !2018)
!2023 = !DILocalVariable(name: "args_len", arg: 2, scope: !2018, file: !9, line: 661, type: !183)
!2024 = !DILocalVariable(name: "args_index_ptr", arg: 3, scope: !2018, file: !9, line: 661, type: !230)
!2025 = !DILocalVariable(name: "format_ptr", arg: 4, scope: !2018, file: !9, line: 662, type: !113)
!2026 = !DILocation(line: 662, scope: !2018)
!2027 = !DILocalVariable(name: "format_len", arg: 5, scope: !2018, file: !9, line: 662, type: !183)
!2028 = !DILocalVariable(name: "index_ptr", arg: 6, scope: !2018, file: !9, line: 662, type: !230)
!2029 = !DILocalVariable(name: "c", scope: !2018, file: !9, line: 664, type: !11, align: 1)
!2030 = !DILocation(line: 664, scope: !2018)
!2031 = !DILocation(line: 665, scope: !2018)
!2032 = !DILocation(line: 666, scope: !2018)
!2033 = !DILocalVariable(name: "len", scope: !2018, file: !9, line: 667, type: !183, align: 8)
!2034 = !DILocation(line: 667, scope: !2018)
!2035 = !DILocation(line: 668, scope: !2018)
!2036 = !DILocation(line: 669, scope: !2018)
!2037 = !DILocalVariable(name: "val", scope: !2018, file: !9, line: 670, type: !266, align: 8)
!2038 = !DILocation(line: 670, scope: !2018)
!2039 = !DILocation(line: 671, scope: !2018)
!2040 = !DILocalVariable(name: "intval", scope: !2018, file: !9, line: 672, type: !93, align: 4)
!2041 = !DILocation(line: 672, scope: !2018)
!2042 = !DILocation(line: 22, scope: !2043, inlinedAt: !2041)
!2043 = distinct !DILexicalBlock(scope: !2044, file: !467, line: 26, column: 1)
!2044 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !467, file: !467, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2045 = !DILocation(line: 23, scope: !2043, inlinedAt: !2041)
!2046 = !DILocalVariable(name: "any_type", scope: !2044, file: !9, line: 27, type: !91, align: 8)
!2047 = !DILocation(line: 27, scope: !2044, inlinedAt: !2041)
!2048 = !DILocalVariable(name: "kind", scope: !2044, file: !9, line: 28, type: !56, align: 1)
!2049 = !DILocation(line: 28, scope: !2044, inlinedAt: !2041)
!2050 = !DILocalVariable(name: "is_mixed_signed", scope: !2044, file: !9, line: 29, type: !377, align: 1)
!2051 = !DILocation(line: 29, scope: !2044, inlinedAt: !2041)
!2052 = !DILocalVariable(name: "max", scope: !2044, file: !9, line: 30, type: !3, align: 4)
!2053 = !DILocation(line: 30, scope: !2044, inlinedAt: !2041)
!2054 = !DILocalVariable(name: "min", scope: !2044, file: !9, line: 31, type: !3, align: 4)
!2055 = !DILocation(line: 31, scope: !2044, inlinedAt: !2041)
!2056 = !DILocation(line: 34, scope: !2057, inlinedAt: !2041)
!2057 = distinct !DILexicalBlock(scope: !2044, file: !467, line: 32, column: 2)
!2058 = !DILocalVariable(name: "c", scope: !2059, file: !9, line: 35, type: !491, align: 1)
!2059 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 35, column: 4)
!2060 = !DILocation(line: 35, scope: !2059, inlinedAt: !2041)
!2061 = !DILocation(line: 36, scope: !2059, inlinedAt: !2041)
!2062 = !DILocation(line: 37, scope: !2059, inlinedAt: !2041)
!2063 = !DILocation(line: 38, scope: !2057, inlinedAt: !2041)
!2064 = !DILocalVariable(name: "s", scope: !2065, file: !9, line: 39, type: !498, align: 2)
!2065 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 39, column: 4)
!2066 = !DILocation(line: 39, scope: !2065, inlinedAt: !2041)
!2067 = !DILocation(line: 40, scope: !2065, inlinedAt: !2041)
!2068 = !DILocation(line: 41, scope: !2065, inlinedAt: !2041)
!2069 = !DILocation(line: 42, scope: !2065, inlinedAt: !2041)
!2070 = !DILocation(line: 43, scope: !2057, inlinedAt: !2041)
!2071 = !DILocalVariable(name: "i", scope: !2072, file: !9, line: 44, type: !3, align: 4)
!2072 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 44, column: 4)
!2073 = !DILocation(line: 44, scope: !2072, inlinedAt: !2041)
!2074 = !DILocation(line: 45, scope: !2072, inlinedAt: !2041)
!2075 = !DILocation(line: 46, scope: !2072, inlinedAt: !2041)
!2076 = !DILocation(line: 47, scope: !2072, inlinedAt: !2041)
!2077 = !DILocation(line: 48, scope: !2057, inlinedAt: !2041)
!2078 = !DILocalVariable(name: "l", scope: !2079, file: !9, line: 49, type: !112, align: 8)
!2079 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 49, column: 4)
!2080 = !DILocation(line: 49, scope: !2079, inlinedAt: !2041)
!2081 = !DILocation(line: 50, scope: !2079, inlinedAt: !2041)
!2082 = !DILocation(line: 51, scope: !2079, inlinedAt: !2041)
!2083 = !DILocation(line: 52, scope: !2079, inlinedAt: !2041)
!2084 = !DILocation(line: 53, scope: !2057, inlinedAt: !2041)
!2085 = !DILocalVariable(name: "i", scope: !2086, file: !9, line: 54, type: !520, align: 16)
!2086 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 54, column: 4)
!2087 = !DILocation(line: 54, scope: !2086, inlinedAt: !2041)
!2088 = !DILocation(line: 55, scope: !2086, inlinedAt: !2041)
!2089 = !DILocation(line: 56, scope: !2086, inlinedAt: !2041)
!2090 = !DILocation(line: 57, scope: !2086, inlinedAt: !2041)
!2091 = !DILocation(line: 58, scope: !2057, inlinedAt: !2041)
!2092 = !DILocalVariable(name: "c", scope: !2093, file: !9, line: 59, type: !11, align: 1)
!2093 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 59, column: 4)
!2094 = !DILocation(line: 59, scope: !2093, inlinedAt: !2041)
!2095 = !DILocation(line: 60, scope: !2093, inlinedAt: !2041)
!2096 = !DILocation(line: 61, scope: !2093, inlinedAt: !2041)
!2097 = !DILocation(line: 62, scope: !2057, inlinedAt: !2041)
!2098 = !DILocalVariable(name: "s", scope: !2099, file: !9, line: 63, type: !534, align: 2)
!2099 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 63, column: 4)
!2100 = !DILocation(line: 63, scope: !2099, inlinedAt: !2041)
!2101 = !DILocation(line: 64, scope: !2099, inlinedAt: !2041)
!2102 = !DILocation(line: 65, scope: !2099, inlinedAt: !2041)
!2103 = !DILocation(line: 66, scope: !2057, inlinedAt: !2041)
!2104 = !DILocalVariable(name: "i", scope: !2105, file: !9, line: 67, type: !93, align: 4)
!2105 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 67, column: 4)
!2106 = !DILocation(line: 67, scope: !2105, inlinedAt: !2041)
!2107 = !DILocation(line: 68, scope: !2105, inlinedAt: !2041)
!2108 = !DILocation(line: 69, scope: !2105, inlinedAt: !2041)
!2109 = !DILocation(line: 70, scope: !2057, inlinedAt: !2041)
!2110 = !DILocalVariable(name: "l", scope: !2111, file: !9, line: 71, type: !184, align: 8)
!2111 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 71, column: 4)
!2112 = !DILocation(line: 71, scope: !2111, inlinedAt: !2041)
!2113 = !DILocation(line: 72, scope: !2111, inlinedAt: !2041)
!2114 = !DILocation(line: 73, scope: !2111, inlinedAt: !2041)
!2115 = !DILocation(line: 74, scope: !2057, inlinedAt: !2041)
!2116 = !DILocalVariable(name: "i", scope: !2117, file: !9, line: 75, type: !553, align: 16)
!2117 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 75, column: 4)
!2118 = !DILocation(line: 75, scope: !2117, inlinedAt: !2041)
!2119 = !DILocation(line: 76, scope: !2117, inlinedAt: !2041)
!2120 = !DILocation(line: 77, scope: !2117, inlinedAt: !2041)
!2121 = !DILocation(line: 164, scope: !2122, inlinedAt: !2123)
!2122 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !190, file: !190, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2123 = !DILocation(line: 79, scope: !2124, inlinedAt: !2041)
!2124 = distinct !DILexicalBlock(scope: !2057, file: !467, line: 79, column: 4)
!2125 = !DILocation(line: 166, scope: !2122, inlinedAt: !2123)
!2126 = !DILocation(line: 673, scope: !2018)
!2127 = distinct !DISubprogram(name: "fprintf", linkageName: "std.io.fprintf", scope: !20, file: !20, line: 144, type: !2128, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2128 = !DISubroutineType(types: !2129)
!2129 = !{!111, !230, !142, !235, !262}
!2130 = !DILocalVariable(name: "out", arg: 1, scope: !2127, file: !20, line: 144, type: !142)
!2131 = !DILocation(line: 144, scope: !2127)
!2132 = !DILocalVariable(name: "format", arg: 2, scope: !2127, file: !20, line: 144, type: !235)
!2133 = !DILocalVariable(name: "args", arg: 3, scope: !2127, file: !20, line: 144, type: !262)
!2134 = !DILocalVariable(name: "formatter", scope: !2127, file: !20, line: 146, type: !238, align: 8)
!2135 = !DILocation(line: 146, scope: !2127)
!2136 = !DILocation(line: 147, scope: !2127)
!2137 = !DILocation(line: 148, scope: !2127)
!2138 = distinct !DISubprogram(name: "fprintfn", linkageName: "std.io.fprintfn", scope: !20, file: !20, line: 159, type: !2128, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2139 = !DILocalVariable(name: "out", arg: 1, scope: !2138, file: !20, line: 159, type: !142)
!2140 = !DILocation(line: 159, scope: !2138)
!2141 = !DILocalVariable(name: "format", arg: 2, scope: !2138, file: !20, line: 159, type: !235)
!2142 = !DILocalVariable(name: "args", arg: 3, scope: !2138, file: !20, line: 159, type: !262)
!2143 = !DILocalVariable(name: "formatter", scope: !2138, file: !20, line: 161, type: !238, align: 8)
!2144 = !DILocation(line: 161, scope: !2138)
!2145 = !DILocation(line: 162, scope: !2138)
!2146 = !DILocalVariable(name: "len", scope: !2138, file: !20, line: 163, type: !183, align: 8)
!2147 = !DILocation(line: 163, scope: !2138)
!2148 = !DILocation(line: 164, scope: !2138)
!2149 = !DILocation(line: 165, scope: !2138)
!2150 = !DILocation(line: 166, scope: !2138)
!2151 = distinct !DISubprogram(name: "out_putstream_fn", linkageName: "std.io.out_putstream_fn", scope: !20, file: !20, line: 222, type: !244, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2152 = !DILocalVariable(name: "data", arg: 1, scope: !2151, file: !20, line: 222, type: !25)
!2153 = !DILocation(line: 222, scope: !2151)
!2154 = !DILocalVariable(name: "c", arg: 2, scope: !2151, file: !20, line: 222, type: !11)
!2155 = !DILocalVariable(name: "stream", scope: !2151, file: !20, line: 224, type: !2156, align: 8)
!2156 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutStream*", baseType: !142, size: 64, align: 64, dwarfAddressSpace: 0)
!2157 = !DILocation(line: 224, scope: !2151)
!2158 = !DILocation(line: 225, scope: !2151)
!2159 = distinct !DISubprogram(name: "out_putchar_fn", linkageName: "std.io.out_putchar_fn", scope: !20, file: !20, line: 228, type: !244, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2160 = !DILocalVariable(name: "data", arg: 1, scope: !2159, file: !20, line: 228, type: !25)
!2161 = !DILocation(line: 228, scope: !2159)
!2162 = !DILocalVariable(name: "c", arg: 2, scope: !2159, file: !20, line: 228, type: !11)
!2163 = !DILocation(line: 230, scope: !2159)
!2164 = distinct !DISubprogram(name: "printf", linkageName: "std.io.printf", scope: !20, file: !20, line: 247, type: !2165, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2165 = !DISubroutineType(types: !2166)
!2166 = !{!111, !230, !235, !262}
!2167 = !DILocalVariable(name: "format", arg: 1, scope: !2164, file: !20, line: 247, type: !235)
!2168 = !DILocation(line: 247, scope: !2164)
!2169 = !DILocalVariable(name: "args", arg: 2, scope: !2164, file: !20, line: 247, type: !262)
!2170 = !DILocalVariable(name: "formatter", scope: !2164, file: !20, line: 249, type: !238, align: 8)
!2171 = !DILocation(line: 249, scope: !2164)
!2172 = !DILocation(line: 250, scope: !2164)
!2173 = !DILocation(line: 251, scope: !2164)
!2174 = distinct !DISubprogram(name: "printfn", linkageName: "std.io.printfn", scope: !20, file: !20, line: 261, type: !2165, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2175 = !DILocalVariable(name: "format", arg: 1, scope: !2174, file: !20, line: 261, type: !235)
!2176 = !DILocation(line: 261, scope: !2174)
!2177 = !DILocalVariable(name: "args", arg: 2, scope: !2174, file: !20, line: 261, type: !262)
!2178 = !DILocalVariable(name: "formatter", scope: !2174, file: !20, line: 263, type: !238, align: 8)
!2179 = !DILocation(line: 263, scope: !2174)
!2180 = !DILocation(line: 264, scope: !2174)
!2181 = !DILocalVariable(name: "len", scope: !2174, file: !20, line: 265, type: !184, align: 8)
!2182 = !DILocation(line: 265, scope: !2174)
!2183 = !DILocation(line: 266, scope: !2174)
!2184 = !DILocation(line: 267, scope: !2174)
!2185 = !DILocation(line: 268, scope: !2174)
!2186 = distinct !DISubprogram(name: "eprintf", linkageName: "std.io.eprintf", scope: !20, file: !20, line: 278, type: !2165, scopeLine: 278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2187 = !DILocalVariable(name: "format", arg: 1, scope: !2186, file: !20, line: 278, type: !235)
!2188 = !DILocation(line: 278, scope: !2186)
!2189 = !DILocalVariable(name: "args", arg: 2, scope: !2186, file: !20, line: 278, type: !262)
!2190 = !DILocalVariable(name: "formatter", scope: !2186, file: !20, line: 280, type: !238, align: 8)
!2191 = !DILocation(line: 280, scope: !2186)
!2192 = !DILocalVariable(name: "stream", scope: !2186, file: !20, line: 281, type: !142, align: 8)
!2193 = !DILocation(line: 281, scope: !2186)
!2194 = !DILocation(line: 282, scope: !2186)
!2195 = !DILocation(line: 283, scope: !2186)
!2196 = distinct !DISubprogram(name: "eprintfn", linkageName: "std.io.eprintfn", scope: !20, file: !20, line: 294, type: !2165, scopeLine: 294, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2197 = !DILocalVariable(name: "format", arg: 1, scope: !2196, file: !20, line: 294, type: !235)
!2198 = !DILocation(line: 294, scope: !2196)
!2199 = !DILocalVariable(name: "args", arg: 2, scope: !2196, file: !20, line: 294, type: !262)
!2200 = !DILocalVariable(name: "formatter", scope: !2196, file: !20, line: 296, type: !238, align: 8)
!2201 = !DILocation(line: 296, scope: !2196)
!2202 = !DILocalVariable(name: "stream", scope: !2196, file: !20, line: 297, type: !142, align: 8)
!2203 = !DILocation(line: 297, scope: !2196)
!2204 = !DILocation(line: 298, scope: !2196)
!2205 = !DILocalVariable(name: "len", scope: !2196, file: !20, line: 299, type: !184, align: 8)
!2206 = !DILocation(line: 299, scope: !2196)
!2207 = !DILocation(line: 300, scope: !2196)
!2208 = !DILocation(line: 301, scope: !2196)
!2209 = !DILocation(line: 302, scope: !2196)
!2210 = distinct !DISubprogram(name: "bprintf", linkageName: "std.io.bprintf", scope: !20, file: !20, line: 313, type: !2211, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2211 = !DISubroutineType(types: !2212)
!2212 = !{!111, !2213, !179, !235, !262}
!2213 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !179, size: 64, align: 64, dwarfAddressSpace: 0)
!2214 = !DILocalVariable(name: "buffer", arg: 1, scope: !2210, file: !20, line: 313, type: !179)
!2215 = !DILocation(line: 313, scope: !2210)
!2216 = !DILocalVariable(name: "format", arg: 2, scope: !2210, file: !20, line: 313, type: !235)
!2217 = !DILocalVariable(name: "args", arg: 3, scope: !2210, file: !20, line: 313, type: !262)
!2218 = !DILocalVariable(name: "formatter", scope: !2210, file: !20, line: 315, type: !238, align: 8)
!2219 = !DILocation(line: 315, scope: !2210)
!2220 = !DILocalVariable(name: "data", scope: !2210, file: !20, line: 316, type: !2221, align: 8)
!2221 = !DICompositeType(tag: DW_TAG_structure_type, name: "BufferData", scope: !20, file: !20, line: 331, size: 192, align: 64, elements: !2222, identifier: "std.io.BufferData")
!2222 = !{!2223, !2224}
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !2221, file: !20, line: 333, baseType: !179, size: 128, align: 64)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "written", scope: !2221, file: !20, line: 334, baseType: !183, size: 64, align: 64, offset: 128)
!2225 = !DILocation(line: 316, scope: !2210)
!2226 = !DILocation(line: 317, scope: !2210)
!2227 = !DILocalVariable(name: "size", scope: !2210, file: !20, line: 318, type: !183, align: 8)
!2228 = !DILocation(line: 318, scope: !2210)
!2229 = !DILocation(line: 319, scope: !2210)
!2230 = distinct !DISubprogram(name: "out_buffer_fn", linkageName: "std.io.out_buffer_fn", scope: !20, file: !20, line: 323, type: !244, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2231 = !DILocalVariable(name: "data", arg: 1, scope: !2230, file: !20, line: 323, type: !25)
!2232 = !DILocation(line: 323, scope: !2230)
!2233 = !DILocalVariable(name: "c", arg: 2, scope: !2230, file: !20, line: 323, type: !11)
!2234 = !DILocalVariable(name: "buffer_data", scope: !2230, file: !20, line: 325, type: !2235, align: 8)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BufferData*", baseType: !2221, size: 64, align: 64, dwarfAddressSpace: 0)
!2236 = !DILocation(line: 325, scope: !2230)
!2237 = !DILocation(line: 326, scope: !2230)
!2238 = !DILocation(line: 327, scope: !2230)
!2239 = distinct !DISubprogram(name: "putchar", linkageName: "std.io.putchar", scope: !20, file: !20, line: 344, type: !2240, scopeLine: 344, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2240 = !DISubroutineType(types: !2241)
!2241 = !{null, !11}
!2242 = !DILocalVariable(name: "c", arg: 1, scope: !2239, file: !20, line: 344, type: !11)
!2243 = !DILocation(line: 344, scope: !2239)
!2244 = !DILocation(line: 346, scope: !2239)
!2245 = distinct !DISubprogram(name: "stdout", linkageName: "std.io.stdout", scope: !20, file: !20, line: 354, type: !2246, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!2246 = !DISubroutineType(types: !2247)
!2247 = !{!2248}
!2248 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "File*", baseType: !21, size: 64, align: 64, dwarfAddressSpace: 0)
!2249 = !DILocation(line: 357, scope: !2245)
!2250 = !DILocation(line: 228, scope: !2251, inlinedAt: !2249)
!2251 = distinct !DISubprogram(name: "stdout", linkageName: "stdout", scope: !2252, file: !2252, line: 228, scopeLine: 228, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2252 = !DIFile(filename: "libc.c3", directory: "C:/Program Files/c3c/lib/std/libc")
!2253 = !DILocation(line: 358, scope: !2245)
!2254 = distinct !DISubprogram(name: "stderr", linkageName: "std.io.stderr", scope: !20, file: !20, line: 366, type: !2246, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!2255 = !DILocation(line: 369, scope: !2254)
!2256 = !DILocation(line: 229, scope: !2257, inlinedAt: !2255)
!2257 = distinct !DISubprogram(name: "stderr", linkageName: "stderr", scope: !2252, file: !2252, line: 229, scopeLine: 229, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2258 = !DILocation(line: 370, scope: !2254)
!2259 = distinct !DISubprogram(name: "stdin", linkageName: "std.io.stdin", scope: !20, file: !20, line: 378, type: !2246, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!2260 = !DILocation(line: 381, scope: !2259)
!2261 = !DILocation(line: 227, scope: !2262, inlinedAt: !2260)
!2262 = distinct !DISubprogram(name: "stdin", linkageName: "stdin", scope: !2252, file: !2252, line: 227, scopeLine: 227, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2263 = !DILocation(line: 382, scope: !2259)
!2264 = distinct !DISubprogram(name: "init", linkageName: "std.io.ReadBuffer.init", scope: !2265, file: !2265, line: 17, type: !2266, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2265 = !DIFile(filename: "buffer.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!2266 = !DISubroutineType(types: !2267)
!2267 = !{!2268, !2268, !87, !179}
!2268 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReadBuffer*", baseType: !2269, size: 64, align: 64, dwarfAddressSpace: 0)
!2269 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReadBuffer", scope: !2265, file: !2265, line: 3, size: 384, align: 64, elements: !2270, identifier: "std.io.ReadBuffer")
!2270 = !{!2271, !2272, !2273, !2274}
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !2269, file: !2265, line: 5, baseType: !87, size: 128, align: 64)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2269, file: !2265, line: 6, baseType: !179, size: 128, align: 64, offset: 128)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !2269, file: !2265, line: 7, baseType: !183, size: 64, align: 64, offset: 256)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !2269, file: !2265, line: 8, baseType: !183, size: 64, align: 64, offset: 320)
!2275 = !DILocation(line: 18, scope: !2264)
!2276 = !DILocalVariable(name: "self", arg: 1, scope: !2264, file: !2265, line: 17, type: !2268)
!2277 = !DILocation(line: 17, scope: !2264)
!2278 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !2264, file: !2265, line: 17, type: !87)
!2279 = !DILocalVariable(name: "bytes", arg: 3, scope: !2264, file: !2265, line: 17, type: !179)
!2280 = !DILocation(line: 14, scope: !2281)
!2281 = distinct !DILexicalBlock(scope: !2264, file: !2265, line: 18, column: 1)
!2282 = !DILocation(line: 15, scope: !2281)
!2283 = !DILocation(line: 19, scope: !2264)
!2284 = !DILocation(line: 20, scope: !2264)
!2285 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ReadBuffer.str_view", scope: !2265, file: !2265, line: 22, type: !2286, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2286 = !DISubroutineType(types: !2287)
!2287 = !{!235, !2268}
!2288 = !DILocation(line: 23, scope: !2285)
!2289 = !DILocalVariable(name: "self", arg: 1, scope: !2285, file: !2265, line: 22, type: !2268)
!2290 = !DILocation(line: 22, scope: !2285)
!2291 = !DILocation(line: 24, scope: !2285)
!2292 = distinct !DISubprogram(name: "close", linkageName: "std.io.ReadBuffer.close", scope: !2265, file: !2265, line: 27, type: !2293, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2293 = !DISubroutineType(types: !2294)
!2294 = !{!111, !25, !2268}
!2295 = !DILocation(line: 28, scope: !2292)
!2296 = !DILocalVariable(name: "self", arg: 1, scope: !2292, file: !2265, line: 27, type: !2268)
!2297 = !DILocation(line: 27, scope: !2292)
!2298 = !DILocation(line: 29, scope: !2292)
!2299 = distinct !DISubprogram(name: "read", linkageName: "std.io.ReadBuffer.read", scope: !2265, file: !2265, line: 32, type: !2300, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2300 = !DISubroutineType(types: !2301)
!2301 = !{!111, !230, !2268, !179}
!2302 = !DILocation(line: 33, scope: !2299)
!2303 = !DILocalVariable(name: "self", arg: 1, scope: !2299, file: !2265, line: 32, type: !2268)
!2304 = !DILocation(line: 32, scope: !2299)
!2305 = !DILocalVariable(name: "bytes", arg: 2, scope: !2299, file: !2265, line: 32, type: !179)
!2306 = !DILocation(line: 34, scope: !2299)
!2307 = !DILocation(line: 36, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2299, file: !2265, line: 35, column: 2)
!2309 = !DILocation(line: 39, scope: !2310)
!2310 = distinct !DILexicalBlock(scope: !2308, file: !2265, line: 37, column: 3)
!2311 = !DILocation(line: 41, scope: !2308)
!2312 = !DILocalVariable(name: "n", scope: !2299, file: !2265, line: 43, type: !183, align: 8)
!2313 = !DILocation(line: 43, scope: !2299)
!2314 = !DILocation(line: 17, scope: !2315, inlinedAt: !2316)
!2315 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1131, file: !1131, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2316 = !DILocation(line: 100, scope: !2317, inlinedAt: !2313)
!2317 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1131, file: !1131, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2318 = !DILocation(line: 44, scope: !2299)
!2319 = !DILocation(line: 45, scope: !2299)
!2320 = !DILocation(line: 46, scope: !2299)
!2321 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ReadBuffer.read_byte", scope: !2265, file: !2265, line: 49, type: !2322, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2322 = !DISubroutineType(types: !2323)
!2323 = !{!111, !113, !2268}
!2324 = !DILocation(line: 50, scope: !2321)
!2325 = !DILocalVariable(name: "self", arg: 1, scope: !2321, file: !2265, line: 49, type: !2268)
!2326 = !DILocation(line: 49, scope: !2321)
!2327 = !DILocation(line: 51, scope: !2321)
!2328 = !DILocation(line: 52, scope: !2321)
!2329 = !DILocalVariable(name: "c", scope: !2321, file: !2265, line: 53, type: !11, align: 1)
!2330 = !DILocation(line: 53, scope: !2321)
!2331 = !DILocation(line: 54, scope: !2321)
!2332 = !DILocation(line: 55, scope: !2321)
!2333 = distinct !DISubprogram(name: "refill", linkageName: "std.io.ReadBuffer.refill", scope: !2265, file: !2265, line: 58, type: !2293, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2334 = !DILocation(line: 59, scope: !2333)
!2335 = !DILocalVariable(name: "self", arg: 1, scope: !2333, file: !2265, line: 58, type: !2268)
!2336 = !DILocation(line: 58, scope: !2333)
!2337 = !DILocation(line: 60, scope: !2333)
!2338 = !DILocation(line: 61, scope: !2333)
!2339 = distinct !DISubprogram(name: "init", linkageName: "std.io.WriteBuffer.init", scope: !2265, file: !2265, line: 77, type: !2340, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2340 = !DISubroutineType(types: !2341)
!2341 = !{!2342, !2342, !142, !179}
!2342 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WriteBuffer*", baseType: !2343, size: 64, align: 64, dwarfAddressSpace: 0)
!2343 = !DICompositeType(tag: DW_TAG_structure_type, name: "WriteBuffer", scope: !2265, file: !2265, line: 64, size: 320, align: 64, elements: !2344, identifier: "std.io.WriteBuffer")
!2344 = !{!2345, !2346, !2347}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !2343, file: !2265, line: 66, baseType: !142, size: 128, align: 64)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2343, file: !2265, line: 67, baseType: !179, size: 128, align: 64, offset: 128)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2343, file: !2265, line: 68, baseType: !183, size: 64, align: 64, offset: 256)
!2348 = !DILocation(line: 78, scope: !2339)
!2349 = !DILocalVariable(name: "self", arg: 1, scope: !2339, file: !2265, line: 77, type: !2342)
!2350 = !DILocation(line: 77, scope: !2339)
!2351 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !2339, file: !2265, line: 77, type: !142)
!2352 = !DILocalVariable(name: "bytes", arg: 3, scope: !2339, file: !2265, line: 77, type: !179)
!2353 = !DILocation(line: 74, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2339, file: !2265, line: 78, column: 1)
!2355 = !DILocation(line: 75, scope: !2354)
!2356 = !DILocation(line: 79, scope: !2339)
!2357 = !DILocation(line: 80, scope: !2339)
!2358 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.WriteBuffer.str_view", scope: !2265, file: !2265, line: 83, type: !2359, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2359 = !DISubroutineType(types: !2360)
!2360 = !{!235, !2342}
!2361 = !DILocation(line: 84, scope: !2358)
!2362 = !DILocalVariable(name: "self", arg: 1, scope: !2358, file: !2265, line: 83, type: !2342)
!2363 = !DILocation(line: 83, scope: !2358)
!2364 = !DILocation(line: 85, scope: !2358)
!2365 = distinct !DISubprogram(name: "close", linkageName: "std.io.WriteBuffer.close", scope: !2265, file: !2265, line: 88, type: !2366, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2366 = !DISubroutineType(types: !2367)
!2367 = !{!111, !25, !2342}
!2368 = !DILocation(line: 89, scope: !2365)
!2369 = !DILocalVariable(name: "self", arg: 1, scope: !2365, file: !2265, line: 88, type: !2342)
!2370 = !DILocation(line: 88, scope: !2365)
!2371 = !DILocation(line: 90, scope: !2365)
!2372 = distinct !DISubprogram(name: "flush", linkageName: "std.io.WriteBuffer.flush", scope: !2265, file: !2265, line: 93, type: !2366, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2373 = !DILocation(line: 94, scope: !2372)
!2374 = !DILocalVariable(name: "self", arg: 1, scope: !2372, file: !2265, line: 93, type: !2342)
!2375 = !DILocation(line: 93, scope: !2372)
!2376 = !DILocation(line: 95, scope: !2372)
!2377 = !DILocation(line: 96, scope: !2372)
!2378 = distinct !DISubprogram(name: "write", linkageName: "std.io.WriteBuffer.write", scope: !2265, file: !2265, line: 99, type: !2379, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2379 = !DISubroutineType(types: !2380)
!2380 = !{!111, !230, !2342, !179}
!2381 = !DILocation(line: 100, scope: !2378)
!2382 = !DILocalVariable(name: "self", arg: 1, scope: !2378, file: !2265, line: 99, type: !2342)
!2383 = !DILocation(line: 99, scope: !2378)
!2384 = !DILocalVariable(name: "bytes", arg: 2, scope: !2378, file: !2265, line: 99, type: !179)
!2385 = !DILocalVariable(name: "n", scope: !2378, file: !2265, line: 101, type: !183, align: 8)
!2386 = !DILocation(line: 101, scope: !2378)
!2387 = !DILocation(line: 102, scope: !2378)
!2388 = !DILocation(line: 105, scope: !2389)
!2389 = distinct !DILexicalBlock(scope: !2378, file: !2265, line: 103, column: 2)
!2390 = !DILocation(line: 106, scope: !2389)
!2391 = !DILocation(line: 107, scope: !2389)
!2392 = !DILocation(line: 109, scope: !2378)
!2393 = !DILocation(line: 110, scope: !2378)
!2394 = !DILocation(line: 113, scope: !2395)
!2395 = distinct !DILexicalBlock(scope: !2378, file: !2265, line: 111, column: 2)
!2396 = !DILocation(line: 116, scope: !2378)
!2397 = !DILocation(line: 117, scope: !2378)
!2398 = !DILocation(line: 118, scope: !2378)
!2399 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.WriteBuffer.write_byte", scope: !2265, file: !2265, line: 121, type: !2400, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2400 = !DISubroutineType(types: !2401)
!2401 = !{!111, !25, !2342, !11}
!2402 = !DILocation(line: 122, scope: !2399)
!2403 = !DILocalVariable(name: "self", arg: 1, scope: !2399, file: !2265, line: 121, type: !2342)
!2404 = !DILocation(line: 121, scope: !2399)
!2405 = !DILocalVariable(name: "c", arg: 2, scope: !2399, file: !2265, line: 121, type: !11)
!2406 = !DILocalVariable(name: "n", scope: !2399, file: !2265, line: 123, type: !183, align: 8)
!2407 = !DILocation(line: 123, scope: !2399)
!2408 = !DILocation(line: 124, scope: !2399)
!2409 = !DILocation(line: 126, scope: !2410)
!2410 = distinct !DILexicalBlock(scope: !2399, file: !2265, line: 125, column: 2)
!2411 = !DILocation(line: 128, scope: !2399)
!2412 = !DILocation(line: 129, scope: !2399)
!2413 = distinct !DISubprogram(name: "write_pending", linkageName: "std.io.WriteBuffer.write_pending", scope: !2265, file: !2265, line: 132, type: !2366, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2414 = !DILocation(line: 133, scope: !2413)
!2415 = !DILocalVariable(name: "self", arg: 1, scope: !2413, file: !2265, line: 132, type: !2342)
!2416 = !DILocation(line: 132, scope: !2413)
!2417 = !DILocation(line: 134, scope: !2413)
!2418 = !DILocation(line: 135, scope: !2413)
!2419 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteBuffer.new_init", scope: !51, file: !51, line: 19, type: !2420, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2420 = !DISubroutineType(types: !2421)
!2421 = !{!111, !2422, !2423, !184, !184, !366}
!2422 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer**", baseType: !2423, size: 64, align: 64, dwarfAddressSpace: 0)
!2423 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer*", baseType: !2424, size: 64, align: 64, dwarfAddressSpace: 0)
!2424 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteBuffer", scope: !51, file: !51, line: 4, size: 512, align: 64, elements: !2425, identifier: "std.io.ByteBuffer")
!2425 = !{!2426, !2427, !2428, !2429, !2430, !2431}
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2424, file: !51, line: 6, baseType: !366, size: 128, align: 64)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "max_read", scope: !2424, file: !51, line: 7, baseType: !183, size: 64, align: 64, offset: 128)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2424, file: !51, line: 8, baseType: !179, size: 128, align: 64, offset: 192)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !2424, file: !51, line: 9, baseType: !183, size: 64, align: 64, offset: 320)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !2424, file: !51, line: 10, baseType: !183, size: 64, align: 64, offset: 384)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "has_last", scope: !2424, file: !51, line: 11, baseType: !377, size: 8, align: 8, offset: 448)
!2432 = !DILocation(line: 20, scope: !2419)
!2433 = !DILocalVariable(name: "self", arg: 1, scope: !2419, file: !51, line: 19, type: !2423)
!2434 = !DILocation(line: 19, scope: !2419)
!2435 = !DILocalVariable(name: "max_read", arg: 2, scope: !2419, file: !51, line: 19, type: !183)
!2436 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !2419, file: !51, line: 19, type: !183)
!2437 = !DILocalVariable(name: "allocator", arg: 4, scope: !2419, file: !51, line: 19, type: !366)
!2438 = !DILocation(line: 17, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2419, file: !51, line: 20, column: 1)
!2440 = !DILocation(line: 21, scope: !2419)
!2441 = !DILocation(line: 47, scope: !2442, inlinedAt: !2443)
!2442 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !1131, file: !1131, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2443 = !DILocation(line: 116, scope: !2444, inlinedAt: !2445)
!2444 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1131, file: !1131, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2445 = !DILocation(line: 22, scope: !2419)
!2446 = !DILocation(line: 23, scope: !2419)
!2447 = !DILocation(line: 24, scope: !2419)
!2448 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteBuffer.temp_init", scope: !51, file: !51, line: 27, type: !2449, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2449 = !DISubroutineType(types: !2450)
!2450 = !{!111, !2422, !2423, !184, !184}
!2451 = !DILocation(line: 28, scope: !2448)
!2452 = !DILocalVariable(name: "self", arg: 1, scope: !2448, file: !51, line: 27, type: !2423)
!2453 = !DILocation(line: 27, scope: !2448)
!2454 = !DILocalVariable(name: "max_read", arg: 2, scope: !2448, file: !51, line: 27, type: !183)
!2455 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !2448, file: !51, line: 27, type: !183)
!2456 = !DILocation(line: 396, scope: !2457, inlinedAt: !2459)
!2457 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !2458, file: !2458, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2458 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Program Files/c3c/lib/std/core")
!2459 = !DILocation(line: 29, scope: !2448)
!2460 = !DILocation(line: 398, scope: !2461, inlinedAt: !2459)
!2461 = distinct !DILexicalBlock(scope: !2457, file: !2458, line: 397, column: 2)
!2462 = !DILocation(line: 400, scope: !2457, inlinedAt: !2459)
!2463 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteBuffer.init_with_buffer", scope: !51, file: !51, line: 36, type: !2464, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2464 = !DISubroutineType(types: !2465)
!2465 = !{!111, !2422, !2423, !179}
!2466 = !DILocation(line: 37, scope: !2463)
!2467 = !DILocalVariable(name: "self", arg: 1, scope: !2463, file: !51, line: 36, type: !2423)
!2468 = !DILocation(line: 36, scope: !2463)
!2469 = !DILocalVariable(name: "buf", arg: 2, scope: !2463, file: !51, line: 36, type: !179)
!2470 = !DILocation(line: 33, scope: !2471)
!2471 = distinct !DILexicalBlock(scope: !2463, file: !51, line: 37, column: 1)
!2472 = !DILocation(line: 34, scope: !2471)
!2473 = !DILocation(line: 38, scope: !2463)
!2474 = !DILocation(line: 39, scope: !2463)
!2475 = distinct !DISubprogram(name: "free", linkageName: "std.io.ByteBuffer.free", scope: !51, file: !51, line: 42, type: !2476, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2476 = !DISubroutineType(types: !2477)
!2477 = !{null, !2423}
!2478 = !DILocation(line: 43, scope: !2475)
!2479 = !DILocalVariable(name: "self", arg: 1, scope: !2475, file: !51, line: 42, type: !2423)
!2480 = !DILocation(line: 42, scope: !2475)
!2481 = !DILocation(line: 44, scope: !2475)
!2482 = !DILocation(line: 101, scope: !2483, inlinedAt: !2481)
!2483 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2458, file: !2458, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2484 = !DILocation(line: 105, scope: !2483, inlinedAt: !2481)
!2485 = !DILocation(line: 45, scope: !2475)
!2486 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteBuffer.write", scope: !51, file: !51, line: 48, type: !2487, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2487 = !DISubroutineType(types: !2488)
!2488 = !{!111, !230, !2423, !179}
!2489 = !DILocation(line: 49, scope: !2486)
!2490 = !DILocalVariable(name: "self", arg: 1, scope: !2486, file: !51, line: 48, type: !2423)
!2491 = !DILocation(line: 48, scope: !2486)
!2492 = !DILocalVariable(name: "bytes", arg: 2, scope: !2486, file: !51, line: 48, type: !179)
!2493 = !DILocalVariable(name: "cap", scope: !2486, file: !51, line: 50, type: !183, align: 8)
!2494 = !DILocation(line: 50, scope: !2486)
!2495 = !DILocation(line: 51, scope: !2486)
!2496 = !DILocation(line: 52, scope: !2486)
!2497 = !DILocation(line: 53, scope: !2486)
!2498 = !DILocation(line: 54, scope: !2486)
!2499 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteBuffer.write_byte", scope: !51, file: !51, line: 57, type: !2500, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2500 = !DISubroutineType(types: !2501)
!2501 = !{!111, !25, !2423, !11}
!2502 = !DILocation(line: 58, scope: !2499)
!2503 = !DILocalVariable(name: "self", arg: 1, scope: !2499, file: !51, line: 57, type: !2423)
!2504 = !DILocation(line: 57, scope: !2499)
!2505 = !DILocalVariable(name: "c", arg: 2, scope: !2499, file: !51, line: 57, type: !11)
!2506 = !DILocalVariable(name: "cap", scope: !2499, file: !51, line: 59, type: !183, align: 8)
!2507 = !DILocation(line: 59, scope: !2499)
!2508 = !DILocation(line: 60, scope: !2499)
!2509 = !DILocation(line: 61, scope: !2499)
!2510 = !DILocation(line: 62, scope: !2499)
!2511 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteBuffer.read", scope: !51, file: !51, line: 65, type: !2487, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2512 = !DILocation(line: 66, scope: !2511)
!2513 = !DILocalVariable(name: "self", arg: 1, scope: !2511, file: !51, line: 65, type: !2423)
!2514 = !DILocation(line: 65, scope: !2511)
!2515 = !DILocalVariable(name: "bytes", arg: 2, scope: !2511, file: !51, line: 65, type: !179)
!2516 = !DILocalVariable(name: "readable", scope: !2511, file: !51, line: 67, type: !183, align: 8)
!2517 = !DILocation(line: 67, scope: !2511)
!2518 = !DILocation(line: 68, scope: !2511)
!2519 = !DILocation(line: 70, scope: !2520)
!2520 = distinct !DILexicalBlock(scope: !2511, file: !51, line: 69, column: 2)
!2521 = !DILocation(line: 71, scope: !2520)
!2522 = !DILocalVariable(name: "n", scope: !2511, file: !51, line: 73, type: !183, align: 8)
!2523 = !DILocation(line: 73, scope: !2511)
!2524 = !DILocation(line: 17, scope: !2525, inlinedAt: !2526)
!2525 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1131, file: !1131, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2526 = !DILocation(line: 100, scope: !2527, inlinedAt: !2523)
!2527 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1131, file: !1131, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2528 = !DILocation(line: 74, scope: !2511)
!2529 = !DILocation(line: 75, scope: !2511)
!2530 = !DILocation(line: 76, scope: !2511)
!2531 = !DILocation(line: 140, scope: !2532, inlinedAt: !2533)
!2532 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !51, file: !51, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2533 = !DILocation(line: 77, scope: !2511)
!2534 = !DILocalVariable(name: "readable", scope: !2535, file: !51, line: 143, type: !183, align: 8)
!2535 = distinct !DILexicalBlock(scope: !2532, file: !51, line: 141, column: 2)
!2536 = !DILocation(line: 143, scope: !2535, inlinedAt: !2533)
!2537 = !DILocation(line: 144, scope: !2535, inlinedAt: !2533)
!2538 = !DILocation(line: 145, scope: !2535, inlinedAt: !2533)
!2539 = !DILocation(line: 146, scope: !2535, inlinedAt: !2533)
!2540 = !DILocation(line: 78, scope: !2511)
!2541 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteBuffer.read_byte", scope: !51, file: !51, line: 81, type: !2542, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2542 = !DISubroutineType(types: !2543)
!2543 = !{!111, !113, !2423}
!2544 = !DILocation(line: 82, scope: !2541)
!2545 = !DILocalVariable(name: "self", arg: 1, scope: !2541, file: !51, line: 81, type: !2423)
!2546 = !DILocation(line: 81, scope: !2541)
!2547 = !DILocalVariable(name: "readable", scope: !2541, file: !51, line: 83, type: !183, align: 8)
!2548 = !DILocation(line: 83, scope: !2541)
!2549 = !DILocation(line: 84, scope: !2541)
!2550 = !DILocation(line: 86, scope: !2551)
!2551 = distinct !DILexicalBlock(scope: !2541, file: !51, line: 85, column: 2)
!2552 = !DILocation(line: 87, scope: !2551)
!2553 = !DILocalVariable(name: "c", scope: !2541, file: !51, line: 89, type: !11, align: 1)
!2554 = !DILocation(line: 89, scope: !2541)
!2555 = !DILocation(line: 90, scope: !2541)
!2556 = !DILocation(line: 91, scope: !2541)
!2557 = !DILocation(line: 140, scope: !2558, inlinedAt: !2559)
!2558 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !51, file: !51, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2559 = !DILocation(line: 92, scope: !2541)
!2560 = !DILocalVariable(name: "readable", scope: !2561, file: !51, line: 143, type: !183, align: 8)
!2561 = distinct !DILexicalBlock(scope: !2558, file: !51, line: 141, column: 2)
!2562 = !DILocation(line: 143, scope: !2561, inlinedAt: !2559)
!2563 = !DILocation(line: 144, scope: !2561, inlinedAt: !2559)
!2564 = !DILocation(line: 145, scope: !2561, inlinedAt: !2559)
!2565 = !DILocation(line: 146, scope: !2561, inlinedAt: !2559)
!2566 = !DILocation(line: 93, scope: !2541)
!2567 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteBuffer.pushback_byte", scope: !51, file: !51, line: 99, type: !2568, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2568 = !DISubroutineType(types: !2569)
!2569 = !{!111, !25, !2423}
!2570 = !DILocation(line: 100, scope: !2567)
!2571 = !DILocalVariable(name: "self", arg: 1, scope: !2567, file: !51, line: 99, type: !2423)
!2572 = !DILocation(line: 99, scope: !2567)
!2573 = !DILocation(line: 101, scope: !2567)
!2574 = !DILocation(line: 102, scope: !2567)
!2575 = !DILocation(line: 103, scope: !2567)
!2576 = !DILocation(line: 104, scope: !2567)
!2577 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteBuffer.seek", scope: !51, file: !51, line: 107, type: !2578, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2578 = !DISubroutineType(types: !2579)
!2579 = !{!111, !230, !2423, !112, !50}
!2580 = !DILocation(line: 108, scope: !2577)
!2581 = !DILocalVariable(name: "self", arg: 1, scope: !2577, file: !51, line: 107, type: !2423)
!2582 = !DILocation(line: 107, scope: !2577)
!2583 = !DILocalVariable(name: "offset", arg: 2, scope: !2577, file: !51, line: 107, type: !1122)
!2584 = !DILocalVariable(name: "seek", arg: 3, scope: !2577, file: !51, line: 107, type: !50)
!2585 = !DILocation(line: 112, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2587, file: !51, line: 112, column: 4)
!2587 = distinct !DILexicalBlock(scope: !2577, file: !51, line: 109, column: 2)
!2588 = !DILocation(line: 113, scope: !2586)
!2589 = !DILocation(line: 114, scope: !2586)
!2590 = !DILocation(line: 116, scope: !2591)
!2591 = distinct !DILexicalBlock(scope: !2587, file: !51, line: 116, column: 4)
!2592 = !DILocation(line: 117, scope: !2591)
!2593 = !DILocation(line: 118, scope: !2591)
!2594 = !DILocation(line: 120, scope: !2595)
!2595 = distinct !DILexicalBlock(scope: !2587, file: !51, line: 120, column: 4)
!2596 = !DILocation(line: 121, scope: !2595)
!2597 = !DILocation(line: 123, scope: !2577)
!2598 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteBuffer.available", scope: !51, file: !51, line: 126, type: !2599, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2599 = !DISubroutineType(types: !2600)
!2600 = !{!111, !230, !2423}
!2601 = !DILocation(line: 127, scope: !2598)
!2602 = !DILocalVariable(name: "self", arg: 1, scope: !2598, file: !51, line: 126, type: !2423)
!2603 = !DILocation(line: 126, scope: !2598)
!2604 = !DILocation(line: 128, scope: !2598)
!2605 = distinct !DISubprogram(name: "grow", linkageName: "std.io.ByteBuffer.grow", scope: !51, file: !51, line: 131, type: !2606, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2606 = !DISubroutineType(types: !2607)
!2607 = !{!111, !25, !2423, !184}
!2608 = !DILocation(line: 132, scope: !2605)
!2609 = !DILocalVariable(name: "self", arg: 1, scope: !2605, file: !51, line: 131, type: !2423)
!2610 = !DILocation(line: 131, scope: !2605)
!2611 = !DILocalVariable(name: "n", arg: 2, scope: !2605, file: !51, line: 131, type: !183)
!2612 = !DILocalVariable(name: "y", scope: !2613, file: !51, line: 1026, type: !183, align: 8)
!2613 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !1187, file: !1187, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2614 = !DILocation(line: 1026, scope: !2613, inlinedAt: !2615)
!2615 = !DILocation(line: 133, scope: !2605)
!2616 = !DILocation(line: 1027, scope: !2613, inlinedAt: !2615)
!2617 = !DILocation(line: 1027, scope: !2618, inlinedAt: !2615)
!2618 = distinct !DILexicalBlock(scope: !2613, file: !1187, line: 1027, column: 2)
!2619 = !DILocation(line: 1028, scope: !2613, inlinedAt: !2615)
!2620 = !DILocalVariable(name: "p", scope: !2605, file: !51, line: 134, type: !113, align: 8)
!2621 = !DILocation(line: 134, scope: !2605)
!2622 = !DILocation(line: 128, scope: !2623, inlinedAt: !2621)
!2623 = distinct !DISubprogram(name: "realloc_aligned", linkageName: "realloc_aligned", scope: !2458, file: !2458, line: 126, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2624 = !DILocation(line: 142, scope: !2625, inlinedAt: !2626)
!2625 = distinct !DISubprogram(name: "free_aligned", linkageName: "free_aligned", scope: !2458, file: !2458, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2626 = !DILocation(line: 130, scope: !2627, inlinedAt: !2621)
!2627 = distinct !DILexicalBlock(scope: !2623, file: !2458, line: 129, column: 2)
!2628 = !DILocation(line: 146, scope: !2625, inlinedAt: !2626)
!2629 = !DILocation(line: 131, scope: !2627, inlinedAt: !2621)
!2630 = !DILocation(line: 133, scope: !2623, inlinedAt: !2621)
!2631 = !DILocation(line: 110, scope: !2632, inlinedAt: !2633)
!2632 = distinct !DISubprogram(name: "malloc_aligned", linkageName: "malloc_aligned", scope: !2458, file: !2458, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2633 = !DILocation(line: 135, scope: !2634, inlinedAt: !2621)
!2634 = distinct !DILexicalBlock(scope: !2623, file: !2458, line: 134, column: 2)
!2635 = !DILocation(line: 116, scope: !2632, inlinedAt: !2633)
!2636 = !DILocation(line: 137, scope: !2623, inlinedAt: !2621)
!2637 = !DILocation(line: 135, scope: !2605)
!2638 = distinct !DISubprogram(name: "len", linkageName: "std.io.ByteReader.len", scope: !2639, file: !2639, line: 9, type: !2640, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2639 = !DIFile(filename: "bytereader.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!2640 = !DISubroutineType(types: !2641)
!2641 = !{!183, !2642}
!2642 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteReader*", baseType: !2643, size: 64, align: 64, dwarfAddressSpace: 0)
!2643 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteReader", scope: !2639, file: !2639, line: 3, size: 192, align: 64, elements: !2644, identifier: "std.io.ByteReader")
!2644 = !{!2645, !2646}
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2643, file: !2639, line: 5, baseType: !179, size: 128, align: 64)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2643, file: !2639, line: 6, baseType: !183, size: 64, align: 64, offset: 128)
!2647 = !DILocation(line: 10, scope: !2638)
!2648 = !DILocalVariable(name: "self", arg: 1, scope: !2638, file: !2639, line: 9, type: !2642)
!2649 = !DILocation(line: 9, scope: !2638)
!2650 = !DILocation(line: 11, scope: !2638)
!2651 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteReader.init", scope: !2639, file: !2639, line: 14, type: !2652, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2652 = !DISubroutineType(types: !2653)
!2653 = !{!2642, !2642, !179}
!2654 = !DILocation(line: 15, scope: !2651)
!2655 = !DILocalVariable(name: "self", arg: 1, scope: !2651, file: !2639, line: 14, type: !2642)
!2656 = !DILocation(line: 14, scope: !2651)
!2657 = !DILocalVariable(name: "bytes", arg: 2, scope: !2651, file: !2639, line: 14, type: !179)
!2658 = !DILocation(line: 16, scope: !2651)
!2659 = !DILocation(line: 17, scope: !2651)
!2660 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteReader.read", scope: !2639, file: !2639, line: 20, type: !2661, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2661 = !DISubroutineType(types: !2662)
!2662 = !{!111, !230, !2642, !179}
!2663 = !DILocation(line: 21, scope: !2660)
!2664 = !DILocalVariable(name: "self", arg: 1, scope: !2660, file: !2639, line: 20, type: !2642)
!2665 = !DILocation(line: 20, scope: !2660)
!2666 = !DILocalVariable(name: "bytes", arg: 2, scope: !2660, file: !2639, line: 20, type: !179)
!2667 = !DILocation(line: 22, scope: !2660)
!2668 = !DILocalVariable(name: "len", scope: !2660, file: !2639, line: 23, type: !183, align: 8)
!2669 = !DILocation(line: 23, scope: !2660)
!2670 = !DILocation(line: 17, scope: !2671, inlinedAt: !2672)
!2671 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1131, file: !1131, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2672 = !DILocation(line: 100, scope: !2673, inlinedAt: !2669)
!2673 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1131, file: !1131, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2674 = !DILocation(line: 24, scope: !2660)
!2675 = !DILocation(line: 25, scope: !2660)
!2676 = !DILocation(line: 309, scope: !2677, inlinedAt: !2675)
!2677 = distinct !DILexicalBlock(scope: !2678, file: !356, line: 312, column: 1)
!2678 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !356, file: !356, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2679 = !DILocation(line: 313, scope: !2678, inlinedAt: !2675)
!2680 = !DILocation(line: 26, scope: !2660)
!2681 = !DILocation(line: 27, scope: !2660)
!2682 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteReader.read_byte", scope: !2639, file: !2639, line: 30, type: !2683, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2683 = !DISubroutineType(types: !2684)
!2684 = !{!111, !113, !2642}
!2685 = !DILocation(line: 31, scope: !2682)
!2686 = !DILocalVariable(name: "self", arg: 1, scope: !2682, file: !2639, line: 30, type: !2642)
!2687 = !DILocation(line: 30, scope: !2682)
!2688 = !DILocation(line: 32, scope: !2682)
!2689 = !DILocation(line: 33, scope: !2682)
!2690 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteReader.pushback_byte", scope: !2639, file: !2639, line: 36, type: !2691, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2691 = !DISubroutineType(types: !2692)
!2692 = !{!111, !25, !2642}
!2693 = !DILocation(line: 37, scope: !2690)
!2694 = !DILocalVariable(name: "self", arg: 1, scope: !2690, file: !2639, line: 36, type: !2642)
!2695 = !DILocation(line: 36, scope: !2690)
!2696 = !DILocation(line: 38, scope: !2690)
!2697 = !DILocation(line: 39, scope: !2690)
!2698 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteReader.seek", scope: !2639, file: !2639, line: 42, type: !2699, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2699 = !DISubroutineType(types: !2700)
!2700 = !{!111, !230, !2642, !112, !50}
!2701 = !DILocation(line: 43, scope: !2698)
!2702 = !DILocalVariable(name: "self", arg: 1, scope: !2698, file: !2639, line: 42, type: !2642)
!2703 = !DILocation(line: 42, scope: !2698)
!2704 = !DILocalVariable(name: "offset", arg: 2, scope: !2698, file: !2639, line: 42, type: !1122)
!2705 = !DILocalVariable(name: "seek", arg: 3, scope: !2698, file: !2639, line: 42, type: !50)
!2706 = !DILocalVariable(name: "new_index", scope: !2698, file: !2639, line: 44, type: !1122, align: 8)
!2707 = !DILocation(line: 44, scope: !2698)
!2708 = !DILocation(line: 47, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2710, file: !2639, line: 47, column: 13)
!2710 = distinct !DILexicalBlock(scope: !2698, file: !2639, line: 45, column: 2)
!2711 = !DILocation(line: 48, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2710, file: !2639, line: 48, column: 16)
!2713 = !DILocation(line: 49, scope: !2714)
!2714 = distinct !DILexicalBlock(scope: !2710, file: !2639, line: 49, column: 13)
!2715 = !DILocation(line: 51, scope: !2698)
!2716 = !DILocation(line: 52, scope: !2698)
!2717 = !DILocation(line: 53, scope: !2698)
!2718 = distinct !DISubprogram(name: "write_to", linkageName: "std.io.ByteReader.write_to", scope: !2639, file: !2639, line: 56, type: !2719, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2719 = !DISubroutineType(types: !2720)
!2720 = !{!111, !230, !2642, !142}
!2721 = !DILocation(line: 57, scope: !2718)
!2722 = !DILocalVariable(name: "self", arg: 1, scope: !2718, file: !2639, line: 56, type: !2642)
!2723 = !DILocation(line: 56, scope: !2718)
!2724 = !DILocalVariable(name: "writer", arg: 2, scope: !2718, file: !2639, line: 56, type: !142)
!2725 = !DILocation(line: 58, scope: !2718)
!2726 = !DILocalVariable(name: "written", scope: !2718, file: !2639, line: 59, type: !183, align: 8)
!2727 = !DILocation(line: 59, scope: !2718)
!2728 = !DILocation(line: 60, scope: !2718)
!2729 = !DILocation(line: 61, scope: !2718)
!2730 = !DILocation(line: 62, scope: !2718)
!2731 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteReader.available", scope: !2639, file: !2639, line: 65, type: !2732, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2732 = !DISubroutineType(types: !2733)
!2733 = !{!111, !230, !2642}
!2734 = !DILocation(line: 66, scope: !2731)
!2735 = !DILocalVariable(name: "self", arg: 1, scope: !2731, file: !2639, line: 65, type: !2642)
!2736 = !DILocation(line: 65, scope: !2731)
!2737 = !DILocation(line: 67, scope: !2731)
!2738 = !DILocation(line: 47, scope: !2739, inlinedAt: !2740)
!2739 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !1131, file: !1131, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2740 = !DILocation(line: 116, scope: !2741, inlinedAt: !2737)
!2741 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !1131, file: !1131, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2742 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteWriter.new_init", scope: !2743, file: !2743, line: 17, type: !2744, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2743 = !DIFile(filename: "bytewriter.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!2744 = !DISubroutineType(types: !2745)
!2745 = !{!2746, !2746, !366}
!2746 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteWriter*", baseType: !2747, size: 64, align: 64, dwarfAddressSpace: 0)
!2747 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteWriter", scope: !2743, file: !2743, line: 4, size: 320, align: 64, elements: !2748, identifier: "std.io.ByteWriter")
!2748 = !{!2749, !2750, !2751}
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !2747, file: !2743, line: 6, baseType: !179, size: 128, align: 64)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2747, file: !2743, line: 7, baseType: !183, size: 64, align: 64, offset: 128)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2747, file: !2743, line: 8, baseType: !366, size: 128, align: 64, offset: 192)
!2752 = !DILocation(line: 18, scope: !2742)
!2753 = !DILocalVariable(name: "self", arg: 1, scope: !2742, file: !2743, line: 17, type: !2746)
!2754 = !DILocation(line: 17, scope: !2742)
!2755 = !DILocalVariable(name: "allocator", arg: 2, scope: !2742, file: !2743, line: 17, type: !366)
!2756 = !DILocation(line: 14, scope: !2757)
!2757 = distinct !DILexicalBlock(scope: !2742, file: !2743, line: 18, column: 1)
!2758 = !DILocation(line: 19, scope: !2742)
!2759 = !DILocation(line: 20, scope: !2742)
!2760 = !DILocation(line: 15, scope: !2742)
!2761 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteWriter.temp_init", scope: !2743, file: !2743, line: 28, type: !2762, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2762 = !DISubroutineType(types: !2763)
!2763 = !{!2746, !2746}
!2764 = !DILocation(line: 29, scope: !2761)
!2765 = !DILocalVariable(name: "self", arg: 1, scope: !2761, file: !2743, line: 28, type: !2746)
!2766 = !DILocation(line: 28, scope: !2761)
!2767 = !DILocation(line: 25, scope: !2768)
!2768 = distinct !DILexicalBlock(scope: !2761, file: !2743, line: 29, column: 1)
!2769 = !DILocation(line: 396, scope: !2770, inlinedAt: !2771)
!2770 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !2458, file: !2458, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2771 = !DILocation(line: 30, scope: !2761)
!2772 = !DILocation(line: 398, scope: !2773, inlinedAt: !2771)
!2773 = distinct !DILexicalBlock(scope: !2770, file: !2458, line: 397, column: 2)
!2774 = !DILocation(line: 400, scope: !2770, inlinedAt: !2771)
!2775 = !DILocation(line: 26, scope: !2761)
!2776 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteWriter.init_with_buffer", scope: !2743, file: !2743, line: 33, type: !2777, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2777 = !DISubroutineType(types: !2778)
!2778 = !{!2746, !2746, !179}
!2779 = !DILocation(line: 34, scope: !2776)
!2780 = !DILocalVariable(name: "self", arg: 1, scope: !2776, file: !2743, line: 33, type: !2746)
!2781 = !DILocation(line: 33, scope: !2776)
!2782 = !DILocalVariable(name: "data", arg: 2, scope: !2776, file: !2743, line: 33, type: !179)
!2783 = !DILocation(line: 35, scope: !2776)
!2784 = !DILocation(line: 36, scope: !2776)
!2785 = distinct !DISubprogram(name: "destroy", linkageName: "std.io.ByteWriter.destroy", scope: !2743, file: !2743, line: 39, type: !2786, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2786 = !DISubroutineType(types: !2787)
!2787 = !{!111, !25, !2746}
!2788 = !DILocation(line: 40, scope: !2785)
!2789 = !DILocalVariable(name: "self", arg: 1, scope: !2785, file: !2743, line: 39, type: !2746)
!2790 = !DILocation(line: 39, scope: !2785)
!2791 = !DILocation(line: 41, scope: !2785)
!2792 = !DILocalVariable(name: "ptr", scope: !2785, file: !2743, line: 42, type: !25, align: 8)
!2793 = !DILocation(line: 42, scope: !2785)
!2794 = !DILocation(line: 101, scope: !2795, inlinedAt: !2793)
!2795 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2458, file: !2458, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2796 = !DILocation(line: 105, scope: !2795, inlinedAt: !2793)
!2797 = !DILocation(line: 43, scope: !2785)
!2798 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ByteWriter.str_view", scope: !2743, file: !2743, line: 46, type: !2799, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2799 = !DISubroutineType(types: !2800)
!2800 = !{!235, !2746}
!2801 = !DILocation(line: 47, scope: !2798)
!2802 = !DILocalVariable(name: "self", arg: 1, scope: !2798, file: !2743, line: 46, type: !2746)
!2803 = !DILocation(line: 46, scope: !2798)
!2804 = !DILocation(line: 48, scope: !2798)
!2805 = distinct !DISubprogram(name: "ensure_capacity", linkageName: "std.io.ByteWriter.ensure_capacity", scope: !2743, file: !2743, line: 51, type: !2806, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2806 = !DISubroutineType(types: !2807)
!2807 = !{!111, !25, !2746, !184}
!2808 = !DILocation(line: 52, scope: !2805)
!2809 = !DILocalVariable(name: "self", arg: 1, scope: !2805, file: !2743, line: 51, type: !2746)
!2810 = !DILocation(line: 51, scope: !2805)
!2811 = !DILocalVariable(name: "len", arg: 2, scope: !2805, file: !2743, line: 51, type: !183)
!2812 = !DILocation(line: 53, scope: !2805)
!2813 = !DILocation(line: 54, scope: !2805)
!2814 = !DILocation(line: 55, scope: !2805)
!2815 = !DILocalVariable(name: "new_capacity", scope: !2805, file: !2743, line: 56, type: !183, align: 8)
!2816 = !DILocation(line: 56, scope: !2805)
!2817 = !DILocalVariable(name: "y", scope: !2818, file: !2743, line: 1026, type: !183, align: 8)
!2818 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !1187, file: !1187, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2819 = !DILocation(line: 1026, scope: !2818, inlinedAt: !2816)
!2820 = !DILocation(line: 1027, scope: !2818, inlinedAt: !2816)
!2821 = !DILocation(line: 1027, scope: !2822, inlinedAt: !2816)
!2822 = distinct !DILexicalBlock(scope: !2818, file: !1187, line: 1027, column: 2)
!2823 = !DILocation(line: 1028, scope: !2818, inlinedAt: !2816)
!2824 = !DILocalVariable(name: "new_ptr", scope: !2805, file: !2743, line: 57, type: !113, align: 8)
!2825 = !DILocation(line: 57, scope: !2805)
!2826 = !DILocation(line: 90, scope: !2827, inlinedAt: !2825)
!2827 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !2458, file: !2458, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2828 = !DILocation(line: 101, scope: !2829, inlinedAt: !2830)
!2829 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2458, file: !2458, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2830 = !DILocation(line: 92, scope: !2831, inlinedAt: !2825)
!2831 = distinct !DILexicalBlock(scope: !2827, file: !2458, line: 91, column: 2)
!2832 = !DILocation(line: 105, scope: !2829, inlinedAt: !2830)
!2833 = !DILocation(line: 93, scope: !2831, inlinedAt: !2825)
!2834 = !DILocation(line: 95, scope: !2827, inlinedAt: !2825)
!2835 = !DILocation(line: 28, scope: !2836, inlinedAt: !2834)
!2836 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !2458, file: !2458, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2837 = !DILocation(line: 35, scope: !2838, inlinedAt: !2839)
!2838 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !2458, file: !2458, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2839 = !DILocation(line: 96, scope: !2827, inlinedAt: !2825)
!2840 = !DILocation(line: 58, scope: !2805)
!2841 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteWriter.write", scope: !2743, file: !2743, line: 61, type: !2842, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2842 = !DISubroutineType(types: !2843)
!2843 = !{!111, !230, !2746, !179}
!2844 = !DILocation(line: 62, scope: !2841)
!2845 = !DILocalVariable(name: "self", arg: 1, scope: !2841, file: !2743, line: 61, type: !2746)
!2846 = !DILocation(line: 61, scope: !2841)
!2847 = !DILocalVariable(name: "bytes", arg: 2, scope: !2841, file: !2743, line: 61, type: !179)
!2848 = !DILocation(line: 63, scope: !2841)
!2849 = !DILocation(line: 64, scope: !2841)
!2850 = !DILocation(line: 309, scope: !2851, inlinedAt: !2849)
!2851 = distinct !DILexicalBlock(scope: !2852, file: !356, line: 312, column: 1)
!2852 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !356, file: !356, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2853 = !DILocation(line: 313, scope: !2852, inlinedAt: !2849)
!2854 = !DILocation(line: 65, scope: !2841)
!2855 = !DILocation(line: 66, scope: !2841)
!2856 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteWriter.write_byte", scope: !2743, file: !2743, line: 69, type: !2857, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2857 = !DISubroutineType(types: !2858)
!2858 = !{!111, !25, !2746, !11}
!2859 = !DILocation(line: 70, scope: !2856)
!2860 = !DILocalVariable(name: "self", arg: 1, scope: !2856, file: !2743, line: 69, type: !2746)
!2861 = !DILocation(line: 69, scope: !2856)
!2862 = !DILocalVariable(name: "c", arg: 2, scope: !2856, file: !2743, line: 69, type: !11)
!2863 = !DILocation(line: 71, scope: !2856)
!2864 = !DILocation(line: 72, scope: !2856)
!2865 = distinct !DISubprogram(name: "read_from", linkageName: "std.io.ByteWriter.read_from", scope: !2743, file: !2743, line: 79, type: !2866, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2866 = !DISubroutineType(types: !2867)
!2867 = !{!111, !230, !2746, !87}
!2868 = !DILocation(line: 80, scope: !2865)
!2869 = !DILocalVariable(name: "self", arg: 1, scope: !2865, file: !2743, line: 79, type: !2746)
!2870 = !DILocation(line: 79, scope: !2865)
!2871 = !DILocalVariable(name: "reader", arg: 2, scope: !2865, file: !2743, line: 79, type: !87)
!2872 = !DILocalVariable(name: "start_index", scope: !2865, file: !2743, line: 81, type: !183, align: 8)
!2873 = !DILocation(line: 81, scope: !2865)
!2874 = !DILocation(line: 82, scope: !2865)
!2875 = !DILocation(line: 84, scope: !2876)
!2876 = distinct !DILexicalBlock(scope: !2865, file: !2743, line: 83, column: 2)
!2877 = !DILocalVariable(name: "available", scope: !2878, file: !2743, line: 84, type: !183, align: 8)
!2878 = distinct !DILexicalBlock(scope: !2876, file: !2743, line: 84, column: 3)
!2879 = !DILocation(line: 84, scope: !2878)
!2880 = !DILocation(line: 86, scope: !2881)
!2881 = distinct !DILexicalBlock(scope: !2878, file: !2743, line: 85, column: 3)
!2882 = !DILocalVariable(name: "read", scope: !2881, file: !2743, line: 87, type: !183, align: 8)
!2883 = !DILocation(line: 87, scope: !2881)
!2884 = !DILocation(line: 88, scope: !2881)
!2885 = !DILocation(line: 90, scope: !2876)
!2886 = !DILocation(line: 92, scope: !2865)
!2887 = !DILocation(line: 94, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2865, file: !2743, line: 93, column: 2)
!2889 = !DILocation(line: 96, scope: !2865)
!2890 = !DILocalVariable(name: "len_to_read", scope: !2891, file: !2743, line: 99, type: !183, align: 8)
!2891 = distinct !DILexicalBlock(scope: !2892, file: !2743, line: 97, column: 2)
!2892 = distinct !DILexicalBlock(scope: !2865, file: !2743, line: 96, column: 2)
!2893 = !DILocation(line: 99, scope: !2891)
!2894 = !DILocation(line: 101, scope: !2891)
!2895 = !DILocation(line: 103, scope: !2896)
!2896 = distinct !DILexicalBlock(scope: !2891, file: !2743, line: 102, column: 3)
!2897 = !DILocation(line: 104, scope: !2896)
!2898 = !DILocalVariable(name: "read", scope: !2891, file: !2743, line: 107, type: !183, align: 8)
!2899 = !DILocation(line: 107, scope: !2891)
!2900 = !DILocation(line: 108, scope: !2891)
!2901 = !DILocation(line: 110, scope: !2891)
!2902 = distinct !DISubprogram(name: "init", linkageName: "std.io.LimitReader.init", scope: !2903, file: !2903, line: 13, type: !2904, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2903 = !DIFile(filename: "limitreader.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!2904 = !DISubroutineType(types: !2905)
!2905 = !{!2906, !2906, !87, !184}
!2906 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LimitReader*", baseType: !2907, size: 64, align: 64, dwarfAddressSpace: 0)
!2907 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitReader", scope: !2903, file: !2903, line: 3, size: 192, align: 64, elements: !2908, identifier: "std.io.LimitReader")
!2908 = !{!2909, !2910}
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !2907, file: !2903, line: 5, baseType: !87, size: 128, align: 64)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2907, file: !2903, line: 6, baseType: !183, size: 64, align: 64, offset: 128)
!2911 = !DILocation(line: 14, scope: !2902)
!2912 = !DILocalVariable(name: "self", arg: 1, scope: !2902, file: !2903, line: 13, type: !2906)
!2913 = !DILocation(line: 13, scope: !2902)
!2914 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !2902, file: !2903, line: 13, type: !87)
!2915 = !DILocalVariable(name: "limit", arg: 3, scope: !2902, file: !2903, line: 13, type: !183)
!2916 = !DILocation(line: 15, scope: !2902)
!2917 = !DILocation(line: 16, scope: !2902)
!2918 = distinct !DISubprogram(name: "close", linkageName: "std.io.LimitReader.close", scope: !2903, file: !2903, line: 19, type: !2919, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2919 = !DISubroutineType(types: !2920)
!2920 = !{!111, !25, !2906}
!2921 = !DILocation(line: 20, scope: !2918)
!2922 = !DILocalVariable(name: "self", arg: 1, scope: !2918, file: !2903, line: 19, type: !2906)
!2923 = !DILocation(line: 19, scope: !2918)
!2924 = !DILocation(line: 21, scope: !2918)
!2925 = distinct !DISubprogram(name: "read", linkageName: "std.io.LimitReader.read", scope: !2903, file: !2903, line: 25, type: !2926, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2926 = !DISubroutineType(types: !2927)
!2927 = !{!111, !230, !2906, !179}
!2928 = !DILocation(line: 26, scope: !2925)
!2929 = !DILocalVariable(name: "self", arg: 1, scope: !2925, file: !2903, line: 25, type: !2906)
!2930 = !DILocation(line: 25, scope: !2925)
!2931 = !DILocalVariable(name: "bytes", arg: 2, scope: !2925, file: !2903, line: 25, type: !179)
!2932 = !DILocation(line: 27, scope: !2925)
!2933 = !DILocalVariable(name: "m", scope: !2925, file: !2903, line: 28, type: !183, align: 8)
!2934 = !DILocation(line: 28, scope: !2925)
!2935 = !DILocation(line: 17, scope: !2936, inlinedAt: !2937)
!2936 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1131, file: !1131, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2937 = !DILocation(line: 100, scope: !2938, inlinedAt: !2934)
!2938 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1131, file: !1131, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2939 = !DILocalVariable(name: "n", scope: !2925, file: !2903, line: 29, type: !183, align: 8)
!2940 = !DILocation(line: 29, scope: !2925)
!2941 = !DILocation(line: 30, scope: !2925)
!2942 = !DILocation(line: 31, scope: !2925)
!2943 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.LimitReader.read_byte", scope: !2903, file: !2903, line: 34, type: !2944, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2944 = !DISubroutineType(types: !2945)
!2945 = !{!111, !113, !2906}
!2946 = !DILocation(line: 35, scope: !2943)
!2947 = !DILocalVariable(name: "self", arg: 1, scope: !2943, file: !2903, line: 34, type: !2906)
!2948 = !DILocation(line: 34, scope: !2943)
!2949 = !DILocation(line: 36, scope: !2943)
!2950 = !DILocation(line: 38, scope: !2943)
!2951 = !DILocation(line: 37, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2943, file: !2903, line: 37, column: 12)
!2953 = distinct !DISubprogram(name: "available", linkageName: "std.io.LimitReader.available", scope: !2903, file: !2903, line: 41, type: !2954, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2954 = !DISubroutineType(types: !2955)
!2955 = !{!111, !230, !2906}
!2956 = !DILocation(line: 42, scope: !2953)
!2957 = !DILocalVariable(name: "self", arg: 1, scope: !2953, file: !2903, line: 41, type: !2906)
!2958 = !DILocation(line: 41, scope: !2953)
!2959 = !DILocation(line: 43, scope: !2953)
!2960 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.MultiReader.new_init", scope: !2961, file: !2961, line: 21, type: !2962, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2961 = !DIFile(filename: "multireader.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!2962 = !DISubroutineType(types: !2963)
!2963 = !{!2964, !2964, !2968, !366}
!2964 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiReader*", baseType: !2965, size: 64, align: 64, dwarfAddressSpace: 0)
!2965 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiReader", scope: !2961, file: !2961, line: 7, size: 320, align: 64, elements: !2966, identifier: "std.io.MultiReader")
!2966 = !{!2967, !2973, !2974}
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "readers", scope: !2965, file: !2961, line: 9, baseType: !2968, size: 128, align: 64)
!2968 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream[]", size: 128, align: 64, elements: !2969, identifier: "InStream[]")
!2969 = !{!2970, !2972}
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2968, baseType: !2971, size: 64, align: 64)
!2971 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "InStream*", baseType: !87, size: 64, align: 64, dwarfAddressSpace: 0)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2968, baseType: !183, size: 64, align: 64, offset: 64)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2965, file: !2961, line: 10, baseType: !183, size: 64, align: 64, offset: 128)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !2965, file: !2961, line: 11, baseType: !366, size: 128, align: 64, offset: 192)
!2975 = !DILocation(line: 22, scope: !2960)
!2976 = !DILocalVariable(name: "self", arg: 1, scope: !2960, file: !2961, line: 21, type: !2964)
!2977 = !DILocation(line: 21, scope: !2960)
!2978 = !DILocalVariable(name: "readers", arg: 2, scope: !2960, file: !2961, line: 21, type: !2968)
!2979 = !DILocalVariable(name: "allocator", arg: 3, scope: !2960, file: !2961, line: 21, type: !366)
!2980 = !DILocation(line: 18, scope: !2981)
!2981 = distinct !DILexicalBlock(scope: !2960, file: !2961, line: 22, column: 1)
!2982 = !DILocalVariable(name: "copy", scope: !2960, file: !2961, line: 23, type: !2968, align: 8)
!2983 = !DILocation(line: 23, scope: !2960)
!2984 = !DILocation(line: 252, scope: !2985, inlinedAt: !2986)
!2985 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !2458, file: !2458, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2986 = !DILocation(line: 244, scope: !2987, inlinedAt: !2983)
!2987 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !2458, file: !2458, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2988 = !DILocation(line: 79, scope: !2989, inlinedAt: !2984)
!2989 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !2458, file: !2458, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2990 = !DILocation(line: 28, scope: !2991, inlinedAt: !2992)
!2991 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !2458, file: !2458, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2992 = !DILocation(line: 80, scope: !2989, inlinedAt: !2984)
!2993 = !DILocation(line: 24, scope: !2960)
!2994 = !DILocation(line: 25, scope: !2960)
!2995 = !DILocation(line: 26, scope: !2960)
!2996 = !DILocation(line: 19, scope: !2960)
!2997 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.MultiReader.temp_init", scope: !2961, file: !2961, line: 34, type: !2998, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!2998 = !DISubroutineType(types: !2999)
!2999 = !{!2964, !2964, !2968}
!3000 = !DILocation(line: 35, scope: !2997)
!3001 = !DILocalVariable(name: "self", arg: 1, scope: !2997, file: !2961, line: 34, type: !2964)
!3002 = !DILocation(line: 34, scope: !2997)
!3003 = !DILocalVariable(name: "readers", arg: 2, scope: !2997, file: !2961, line: 34, type: !2968)
!3004 = !DILocation(line: 31, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2997, file: !2961, line: 35, column: 1)
!3006 = !DILocation(line: 396, scope: !3007, inlinedAt: !3008)
!3007 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !2458, file: !2458, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3008 = !DILocation(line: 36, scope: !2997)
!3009 = !DILocation(line: 398, scope: !3010, inlinedAt: !3008)
!3010 = distinct !DILexicalBlock(scope: !3007, file: !2458, line: 397, column: 2)
!3011 = !DILocation(line: 400, scope: !3007, inlinedAt: !3008)
!3012 = !DILocation(line: 32, scope: !2997)
!3013 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiReader.free", scope: !2961, file: !2961, line: 39, type: !3014, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3014 = !DISubroutineType(types: !3015)
!3015 = !{null, !2964}
!3016 = !DILocation(line: 40, scope: !3013)
!3017 = !DILocalVariable(name: "self", arg: 1, scope: !3013, file: !2961, line: 39, type: !2964)
!3018 = !DILocation(line: 39, scope: !3013)
!3019 = !DILocation(line: 41, scope: !3013)
!3020 = !DILocation(line: 42, scope: !3013)
!3021 = !DILocation(line: 101, scope: !3022, inlinedAt: !3020)
!3022 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2458, file: !2458, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3023 = !DILocation(line: 105, scope: !3022, inlinedAt: !3020)
!3024 = !DILocation(line: 43, scope: !3013)
!3025 = distinct !DISubprogram(name: "read", linkageName: "std.io.MultiReader.read", scope: !2961, file: !2961, line: 46, type: !3026, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3026 = !DISubroutineType(types: !3027)
!3027 = !{!111, !230, !2964, !179}
!3028 = !DILocation(line: 47, scope: !3025)
!3029 = !DILocalVariable(name: "self", arg: 1, scope: !3025, file: !2961, line: 46, type: !2964)
!3030 = !DILocation(line: 46, scope: !3025)
!3031 = !DILocalVariable(name: "bytes", arg: 2, scope: !3025, file: !2961, line: 46, type: !179)
!3032 = !DILocalVariable(name: "r", scope: !3025, file: !2961, line: 48, type: !87, align: 8)
!3033 = !DILocation(line: 48, scope: !3025)
!3034 = !DILocalVariable(name: "n", scope: !3025, file: !2961, line: 49, type: !184, align: 8)
!3035 = !DILocation(line: 49, scope: !3025)
!3036 = !DILocalVariable(name: "err", scope: !3025, file: !2961, line: 50, type: !111, align: 8)
!3037 = !DILocation(line: 50, scope: !3025)
!3038 = !DILocation(line: 52, scope: !3025)
!3039 = !DILocation(line: 53, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3025, file: !2961, line: 53, column: 4)
!3041 = !DILocation(line: 54, scope: !3040)
!3042 = !DILocation(line: 56, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3040, file: !2961, line: 55, column: 4)
!3044 = !DILocation(line: 58, scope: !3040)
!3045 = !DILocation(line: 60, scope: !3046)
!3046 = distinct !DILexicalBlock(scope: !3025, file: !2961, line: 60, column: 4)
!3047 = !DILocation(line: 62, scope: !3025)
!3048 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.MultiReader.read_byte", scope: !2961, file: !2961, line: 65, type: !3049, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3049 = !DISubroutineType(types: !3050)
!3050 = !{!111, !113, !2964}
!3051 = !DILocation(line: 66, scope: !3048)
!3052 = !DILocalVariable(name: "self", arg: 1, scope: !3048, file: !2961, line: 65, type: !2964)
!3053 = !DILocation(line: 65, scope: !3048)
!3054 = !DILocalVariable(name: "data", scope: !3048, file: !2961, line: 67, type: !3055, align: 1)
!3055 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 8, align: 8, elements: !3056)
!3056 = !{!3057}
!3057 = !DISubrange(count: 1, lowerBound: 0)
!3058 = !DILocation(line: 67, scope: !3048)
!3059 = !DILocation(line: 68, scope: !3048)
!3060 = !DILocation(line: 69, scope: !3048)
!3061 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.MultiWriter.new_init", scope: !3062, file: !3062, line: 18, type: !3063, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3062 = !DIFile(filename: "multiwriter.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!3063 = !DISubroutineType(types: !3064)
!3064 = !{!3065, !3065, !3069, !366}
!3065 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiWriter*", baseType: !3066, size: 64, align: 64, dwarfAddressSpace: 0)
!3066 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiWriter", scope: !3062, file: !3062, line: 6, size: 256, align: 64, elements: !3067, identifier: "std.io.MultiWriter")
!3067 = !{!3068, !3073}
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "writers", scope: !3066, file: !3062, line: 8, baseType: !3069, size: 128, align: 64)
!3069 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream[]", size: 128, align: 64, elements: !3070, identifier: "OutStream[]")
!3070 = !{!3071, !3072}
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3069, baseType: !2156, size: 64, align: 64)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3069, baseType: !183, size: 64, align: 64, offset: 64)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !3066, file: !3062, line: 9, baseType: !366, size: 128, align: 64, offset: 128)
!3074 = !DILocation(line: 19, scope: !3061)
!3075 = !DILocalVariable(name: "self", arg: 1, scope: !3061, file: !3062, line: 18, type: !3065)
!3076 = !DILocation(line: 18, scope: !3061)
!3077 = !DILocalVariable(name: "writers", arg: 2, scope: !3061, file: !3062, line: 18, type: !3069)
!3078 = !DILocalVariable(name: "allocator", arg: 3, scope: !3061, file: !3062, line: 18, type: !366)
!3079 = !DILocation(line: 15, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3061, file: !3062, line: 19, column: 1)
!3081 = !DILocation(line: 16, scope: !3080)
!3082 = !DILocalVariable(name: "copy", scope: !3061, file: !3062, line: 20, type: !3069, align: 8)
!3083 = !DILocation(line: 20, scope: !3061)
!3084 = !DILocation(line: 252, scope: !3085, inlinedAt: !3086)
!3085 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !2458, file: !2458, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3086 = !DILocation(line: 244, scope: !3087, inlinedAt: !3083)
!3087 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !2458, file: !2458, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3088 = !DILocation(line: 79, scope: !3089, inlinedAt: !3084)
!3089 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !2458, file: !2458, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3090 = !DILocation(line: 28, scope: !3091, inlinedAt: !3092)
!3091 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !2458, file: !2458, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3092 = !DILocation(line: 80, scope: !3089, inlinedAt: !3084)
!3093 = !DILocation(line: 21, scope: !3061)
!3094 = !DILocation(line: 22, scope: !3061)
!3095 = !DILocation(line: 23, scope: !3061)
!3096 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.MultiWriter.temp_init", scope: !3062, file: !3062, line: 31, type: !3097, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3097 = !DISubroutineType(types: !3098)
!3098 = !{!3065, !3065, !3069}
!3099 = !DILocation(line: 32, scope: !3096)
!3100 = !DILocalVariable(name: "self", arg: 1, scope: !3096, file: !3062, line: 31, type: !3065)
!3101 = !DILocation(line: 31, scope: !3096)
!3102 = !DILocalVariable(name: "writers", arg: 2, scope: !3096, file: !3062, line: 31, type: !3069)
!3103 = !DILocation(line: 28, scope: !3104)
!3104 = distinct !DILexicalBlock(scope: !3096, file: !3062, line: 32, column: 1)
!3105 = !DILocation(line: 29, scope: !3104)
!3106 = !DILocation(line: 396, scope: !3107, inlinedAt: !3108)
!3107 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !2458, file: !2458, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3108 = !DILocation(line: 33, scope: !3096)
!3109 = !DILocation(line: 398, scope: !3110, inlinedAt: !3108)
!3110 = distinct !DILexicalBlock(scope: !3107, file: !2458, line: 397, column: 2)
!3111 = !DILocation(line: 400, scope: !3107, inlinedAt: !3108)
!3112 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiWriter.free", scope: !3062, file: !3062, line: 36, type: !3113, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3113 = !DISubroutineType(types: !3114)
!3114 = !{null, !3065}
!3115 = !DILocation(line: 37, scope: !3112)
!3116 = !DILocalVariable(name: "self", arg: 1, scope: !3112, file: !3062, line: 36, type: !3065)
!3117 = !DILocation(line: 36, scope: !3112)
!3118 = !DILocation(line: 38, scope: !3112)
!3119 = !DILocation(line: 39, scope: !3112)
!3120 = !DILocation(line: 101, scope: !3121, inlinedAt: !3119)
!3121 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !2458, file: !2458, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3122 = !DILocation(line: 105, scope: !3121, inlinedAt: !3119)
!3123 = !DILocation(line: 40, scope: !3112)
!3124 = distinct !DISubprogram(name: "write", linkageName: "std.io.MultiWriter.write", scope: !3062, file: !3062, line: 43, type: !3125, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3125 = !DISubroutineType(types: !3126)
!3126 = !{!111, !230, !3065, !179}
!3127 = !DILocation(line: 44, scope: !3124)
!3128 = !DILocalVariable(name: "self", arg: 1, scope: !3124, file: !3062, line: 43, type: !3065)
!3129 = !DILocation(line: 43, scope: !3124)
!3130 = !DILocalVariable(name: "bytes", arg: 2, scope: !3124, file: !3062, line: 43, type: !179)
!3131 = !DILocalVariable(name: "n", scope: !3124, file: !3062, line: 45, type: !183, align: 8)
!3132 = !DILocation(line: 45, scope: !3124)
!3133 = !DILocalVariable(name: ".temp", scope: !3134, file: !3062, line: 46, type: !3135, align: 8)
!3134 = distinct !DILexicalBlock(scope: !3124, file: !3062, line: 46, column: 2)
!3135 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutStream[]*", baseType: !3069, size: 64, align: 64, dwarfAddressSpace: 0)
!3136 = !DILocation(line: 46, scope: !3134)
!3137 = !DILocalVariable(name: ".temp", scope: !3134, file: !3062, line: 46, type: !183, align: 8)
!3138 = !DILocalVariable(name: "w", scope: !3139, file: !3062, line: 46, type: !142, align: 8)
!3139 = distinct !DILexicalBlock(scope: !3134, file: !3062, line: 47, column: 2)
!3140 = !DILocation(line: 46, scope: !3139)
!3141 = !DILocation(line: 48, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3139, file: !3062, line: 47, column: 2)
!3143 = !DILocation(line: 49, scope: !3142)
!3144 = !DILocation(line: 51, scope: !3124)
!3145 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.MultiWriter.write_byte", scope: !3062, file: !3062, line: 54, type: !3146, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3146 = !DISubroutineType(types: !3147)
!3147 = !{!111, !25, !3065, !11}
!3148 = !DILocation(line: 55, scope: !3145)
!3149 = !DILocalVariable(name: "self", arg: 1, scope: !3145, file: !3062, line: 54, type: !3065)
!3150 = !DILocation(line: 54, scope: !3145)
!3151 = !DILocalVariable(name: "c", arg: 2, scope: !3145, file: !3062, line: 54, type: !11)
!3152 = !DILocalVariable(name: "data", scope: !3145, file: !3062, line: 56, type: !3055, align: 1)
!3153 = !DILocation(line: 56, scope: !3145)
!3154 = !DILocation(line: 57, scope: !3145)
!3155 = !DILocation(line: 58, scope: !3145)
!3156 = distinct !DISubprogram(name: "init", linkageName: "std.io.Scanner.init", scope: !3157, file: !3157, line: 19, type: !3158, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3157 = !DIFile(filename: "scanner.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!3158 = !DISubroutineType(types: !3159)
!3159 = !{null, !3160, !87, !179}
!3160 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Scanner*", baseType: !3161, size: 64, align: 64, dwarfAddressSpace: 0)
!3161 = !DICompositeType(tag: DW_TAG_structure_type, name: "Scanner", scope: !3157, file: !3157, line: 3, size: 384, align: 64, elements: !3162, identifier: "std.io.Scanner")
!3162 = !{!3163, !3164, !3165, !3166}
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !3161, file: !3157, line: 5, baseType: !87, size: 128, align: 64)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !3161, file: !3157, line: 6, baseType: !179, size: 128, align: 64, offset: 128)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_idx", scope: !3161, file: !3157, line: 7, baseType: !183, size: 64, align: 64, offset: 256)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !3161, file: !3157, line: 8, baseType: !183, size: 64, align: 64, offset: 320)
!3167 = !DILocation(line: 20, scope: !3156)
!3168 = !DILocalVariable(name: "self", arg: 1, scope: !3156, file: !3157, line: 19, type: !3160)
!3169 = !DILocation(line: 19, scope: !3156)
!3170 = !DILocalVariable(name: "stream", arg: 2, scope: !3156, file: !3157, line: 19, type: !87)
!3171 = !DILocalVariable(name: "buffer", arg: 3, scope: !3156, file: !3157, line: 19, type: !179)
!3172 = !DILocation(line: 17, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !3156, file: !3157, line: 20, column: 1)
!3174 = !DILocation(line: 21, scope: !3156)
!3175 = distinct !DISubprogram(name: "flush", linkageName: "std.io.Scanner.flush", scope: !3157, file: !3157, line: 28, type: !3176, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3176 = !DISubroutineType(types: !3177)
!3177 = !{!179, !3160}
!3178 = !DILocation(line: 29, scope: !3175)
!3179 = !DILocalVariable(name: "self", arg: 1, scope: !3175, file: !3157, line: 28, type: !3160)
!3180 = !DILocation(line: 28, scope: !3175)
!3181 = !DILocation(line: 30, scope: !3175)
!3182 = !DILocalVariable(name: "n", scope: !3175, file: !3157, line: 31, type: !183, align: 8)
!3183 = !DILocation(line: 31, scope: !3175)
!3184 = !DILocalVariable(name: "buf", scope: !3175, file: !3157, line: 32, type: !179, align: 8)
!3185 = !DILocation(line: 32, scope: !3175)
!3186 = !DILocation(line: 33, scope: !3175)
!3187 = !DILocation(line: 34, scope: !3175)
!3188 = !DILocation(line: 35, scope: !3175)
!3189 = distinct !DISubprogram(name: "close", linkageName: "std.io.Scanner.close", scope: !3157, file: !3157, line: 38, type: !3190, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3190 = !DISubroutineType(types: !3191)
!3191 = !{!111, !25, !3160}
!3192 = !DILocation(line: 39, scope: !3189)
!3193 = !DILocalVariable(name: "self", arg: 1, scope: !3189, file: !3157, line: 38, type: !3160)
!3194 = !DILocation(line: 38, scope: !3189)
!3195 = !DILocation(line: 40, scope: !3189)
!3196 = distinct !DISubprogram(name: "scan", linkageName: "std.io.Scanner.scan", scope: !3157, file: !3157, line: 48, type: !3197, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3197 = !DISubroutineType(types: !3198)
!3198 = !{!111, !2213, !3160, !235}
!3199 = !DILocation(line: 49, scope: !3196)
!3200 = !DILocalVariable(name: "self", arg: 1, scope: !3196, file: !3157, line: 48, type: !3160)
!3201 = !DILocation(line: 48, scope: !3196)
!3202 = !DILocalVariable(name: "pattern", arg: 2, scope: !3196, file: !3157, line: 48, type: !235)
!3203 = !DILocation(line: 45, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3196, file: !3157, line: 49, column: 1)
!3205 = !DILocation(line: 46, scope: !3204)
!3206 = !DILocation(line: 50, scope: !3196)
!3207 = !DILocation(line: 53, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3196, file: !3157, line: 51, column: 2)
!3209 = !DILocalVariable(name: "n", scope: !3210, file: !3157, line: 92, type: !184, align: 8)
!3210 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !3157, file: !3157, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3211 = !DILocation(line: 92, scope: !3210, inlinedAt: !3207)
!3212 = !DILocalVariable(name: "err", scope: !3210, file: !3157, line: 93, type: !111, align: 8)
!3213 = !DILocation(line: 93, scope: !3210, inlinedAt: !3207)
!3214 = !DILocation(line: 95, scope: !3210, inlinedAt: !3207)
!3215 = !DILocation(line: 96, scope: !3216, inlinedAt: !3207)
!3216 = distinct !DILexicalBlock(scope: !3210, file: !3157, line: 96, column: 4)
!3217 = !DILocation(line: 98, scope: !3218, inlinedAt: !3207)
!3218 = distinct !DILexicalBlock(scope: !3210, file: !3157, line: 98, column: 4)
!3219 = !DILocation(line: 100, scope: !3210, inlinedAt: !3207)
!3220 = !DILocation(line: 54, scope: !3208)
!3221 = !DILocation(line: 56, scope: !3196)
!3222 = !DILocalVariable(name: "n", scope: !3196, file: !3157, line: 57, type: !183, align: 8)
!3223 = !DILocation(line: 57, scope: !3196)
!3224 = !DILocalVariable(name: "buf", scope: !3196, file: !3157, line: 58, type: !179, align: 8)
!3225 = !DILocation(line: 58, scope: !3196)
!3226 = !DILocalVariable(name: "i", scope: !3196, file: !3157, line: 59, type: !183, align: 8)
!3227 = !DILocation(line: 59, scope: !3196)
!3228 = !DILocation(line: 87, scope: !3229, inlinedAt: !3227)
!3229 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !3157, file: !3157, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3230 = !DILocation(line: 61, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3196, file: !3157, line: 60, column: 2)
!3232 = !DILocation(line: 62, scope: !3231)
!3233 = !DILocation(line: 64, scope: !3196)
!3234 = !DILocation(line: 68, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3196, file: !3157, line: 65, column: 2)
!3236 = !DILocation(line: 71, scope: !3196)
!3237 = !DILocation(line: 72, scope: !3196)
!3238 = !DILocation(line: 74, scope: !3196)
!3239 = !DILocalVariable(name: "p", scope: !3196, file: !3157, line: 75, type: !183, align: 8)
!3240 = !DILocation(line: 75, scope: !3196)
!3241 = !DILocalVariable(name: "n", scope: !3242, file: !3157, line: 92, type: !184, align: 8)
!3242 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !3157, file: !3157, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3243 = !DILocation(line: 92, scope: !3242, inlinedAt: !3240)
!3244 = !DILocalVariable(name: "err", scope: !3242, file: !3157, line: 93, type: !111, align: 8)
!3245 = !DILocation(line: 93, scope: !3242, inlinedAt: !3240)
!3246 = !DILocation(line: 95, scope: !3242, inlinedAt: !3240)
!3247 = !DILocation(line: 96, scope: !3248, inlinedAt: !3240)
!3248 = distinct !DILexicalBlock(scope: !3242, file: !3157, line: 96, column: 4)
!3249 = !DILocation(line: 98, scope: !3250, inlinedAt: !3240)
!3250 = distinct !DILexicalBlock(scope: !3242, file: !3157, line: 98, column: 4)
!3251 = !DILocation(line: 100, scope: !3242, inlinedAt: !3240)
!3252 = !DILocation(line: 76, scope: !3196)
!3253 = !DILocation(line: 78, scope: !3196)
!3254 = !DILocalVariable(name: "i", scope: !3196, file: !3157, line: 79, type: !183, align: 8)
!3255 = !DILocation(line: 79, scope: !3196)
!3256 = !DILocation(line: 87, scope: !3257, inlinedAt: !3255)
!3257 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !3157, file: !3157, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3258 = !DILocation(line: 80, scope: !3196)
!3259 = !DILocation(line: 82, scope: !3196)
!3260 = distinct !DISubprogram(name: "read", linkageName: "std.io.Scanner.read", scope: !3157, file: !3157, line: 103, type: !3261, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3261 = !DISubroutineType(types: !3262)
!3262 = !{!111, !230, !3160, !179}
!3263 = !DILocation(line: 104, scope: !3260)
!3264 = !DILocalVariable(name: "self", arg: 1, scope: !3260, file: !3157, line: 103, type: !3160)
!3265 = !DILocation(line: 103, scope: !3260)
!3266 = !DILocalVariable(name: "bytes", arg: 2, scope: !3260, file: !3157, line: 103, type: !179)
!3267 = !DILocalVariable(name: "n", scope: !3260, file: !3157, line: 105, type: !183, align: 8)
!3268 = !DILocation(line: 105, scope: !3260)
!3269 = !DILocation(line: 106, scope: !3260)
!3270 = !DILocation(line: 108, scope: !3271)
!3271 = distinct !DILexicalBlock(scope: !3260, file: !3157, line: 107, column: 2)
!3272 = !DILocation(line: 17, scope: !3273, inlinedAt: !3274)
!3273 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !1131, file: !1131, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3274 = !DILocation(line: 100, scope: !3275, inlinedAt: !3270)
!3275 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !1131, file: !1131, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3276 = !DILocation(line: 109, scope: !3271)
!3277 = !DILocation(line: 110, scope: !3271)
!3278 = !DILocation(line: 111, scope: !3271)
!3279 = !DILocation(line: 113, scope: !3260)
!3280 = !DILocation(line: 114, scope: !3260)
!3281 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.Scanner.read_byte", scope: !3157, file: !3157, line: 117, type: !3282, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3282 = !DISubroutineType(types: !3283)
!3283 = !{!111, !113, !3160}
!3284 = !DILocation(line: 118, scope: !3281)
!3285 = !DILocalVariable(name: "self", arg: 1, scope: !3281, file: !3157, line: 117, type: !3160)
!3286 = !DILocation(line: 117, scope: !3281)
!3287 = !DILocation(line: 119, scope: !3281)
!3288 = !DILocation(line: 121, scope: !3289)
!3289 = distinct !DILexicalBlock(scope: !3281, file: !3157, line: 120, column: 2)
!3290 = !DILocation(line: 123, scope: !3281)
!3291 = distinct !DISubprogram(name: "init", linkageName: "std.io.TeeReader.init", scope: !3292, file: !3292, line: 22, type: !3293, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3292 = !DIFile(filename: "teereader.c3", directory: "C:/Program Files/c3c/lib/std/io/stream")
!3293 = !DISubroutineType(types: !3294)
!3294 = !{!3295, !3295, !87, !142}
!3295 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TeeReader*", baseType: !3296, size: 64, align: 64, dwarfAddressSpace: 0)
!3296 = !DICompositeType(tag: DW_TAG_structure_type, name: "TeeReader", scope: !3292, file: !3292, line: 3, size: 256, align: 64, elements: !3297, identifier: "std.io.TeeReader")
!3297 = !{!3298, !3299}
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3296, file: !3292, line: 5, baseType: !87, size: 128, align: 64)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !3296, file: !3292, line: 6, baseType: !142, size: 128, align: 64, offset: 128)
!3300 = !DILocation(line: 23, scope: !3291)
!3301 = !DILocalVariable(name: "self", arg: 1, scope: !3291, file: !3292, line: 22, type: !3295)
!3302 = !DILocation(line: 22, scope: !3291)
!3303 = !DILocalVariable(name: "r", arg: 2, scope: !3291, file: !3292, line: 22, type: !87)
!3304 = !DILocalVariable(name: "w", arg: 3, scope: !3291, file: !3292, line: 22, type: !142)
!3305 = !DILocation(line: 24, scope: !3291)
!3306 = !DILocation(line: 15, scope: !3307, inlinedAt: !3305)
!3307 = distinct !DISubprogram(name: "tee_reader", linkageName: "tee_reader", scope: !3292, file: !3292, line: 15, scopeLine: 15, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3308 = !DILocation(line: 25, scope: !3291)
!3309 = distinct !DISubprogram(name: "read", linkageName: "std.io.TeeReader.read", scope: !3292, file: !3292, line: 28, type: !3310, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3310 = !DISubroutineType(types: !3311)
!3311 = !{!111, !230, !3295, !179}
!3312 = !DILocation(line: 29, scope: !3309)
!3313 = !DILocalVariable(name: "self", arg: 1, scope: !3309, file: !3292, line: 28, type: !3295)
!3314 = !DILocation(line: 28, scope: !3309)
!3315 = !DILocalVariable(name: "bytes", arg: 2, scope: !3309, file: !3292, line: 28, type: !179)
!3316 = !DILocalVariable(name: "nr", scope: !3309, file: !3292, line: 30, type: !183, align: 8)
!3317 = !DILocation(line: 30, scope: !3309)
!3318 = !DILocalVariable(name: "nw", scope: !3309, file: !3292, line: 30, type: !183, align: 8)
!3319 = !DILocation(line: 31, scope: !3309)
!3320 = !DILocation(line: 32, scope: !3309)
!3321 = !DILocation(line: 33, scope: !3309)
!3322 = !DILocation(line: 34, scope: !3309)
!3323 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.TeeReader.read_byte", scope: !3292, file: !3292, line: 37, type: !3324, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3324 = !DISubroutineType(types: !3325)
!3325 = !{!111, !113, !3295}
!3326 = !DILocation(line: 38, scope: !3323)
!3327 = !DILocalVariable(name: "self", arg: 1, scope: !3323, file: !3292, line: 37, type: !3295)
!3328 = !DILocation(line: 37, scope: !3323)
!3329 = !DILocalVariable(name: "data", scope: !3323, file: !3292, line: 39, type: !3055, align: 1)
!3330 = !DILocation(line: 39, scope: !3323)
!3331 = !DILocation(line: 40, scope: !3323)
!3332 = !DILocation(line: 41, scope: !3323)
!3333 = distinct !DISubprogram(name: "available", linkageName: "std.io.available", scope: !32, file: !32, line: 27, type: !3334, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3334 = !DISubroutineType(types: !3335)
!3335 = !{!111, !230, !87}
!3336 = !DILocalVariable(name: "s", arg: 1, scope: !3333, file: !32, line: 27, type: !87)
!3337 = !DILocation(line: 27, scope: !3333)
!3338 = !DILocation(line: 29, scope: !3333)
!3339 = !DILocation(line: 30, scope: !3333)
!3340 = !DILocalVariable(name: "curr", scope: !3341, file: !32, line: 32, type: !183, align: 8)
!3341 = distinct !DILexicalBlock(scope: !3333, file: !32, line: 31, column: 2)
!3342 = !DILocation(line: 32, scope: !3341)
!3343 = !DILocalVariable(name: "len", scope: !3341, file: !32, line: 33, type: !183, align: 8)
!3344 = !DILocation(line: 33, scope: !3341)
!3345 = !DILocation(line: 34, scope: !3341)
!3346 = !DILocation(line: 35, scope: !3341)
!3347 = !DILocation(line: 37, scope: !3333)
!3348 = distinct !DISubprogram(name: "copy_to", linkageName: "std.io.copy_to", scope: !32, file: !32, line: 153, type: !3349, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3349 = !DISubroutineType(types: !3350)
!3350 = !{!111, !230, !87, !142, !179}
!3351 = !DILocalVariable(name: "in", arg: 1, scope: !3348, file: !32, line: 153, type: !87)
!3352 = !DILocation(line: 153, scope: !3348)
!3353 = !DILocalVariable(name: "dst", arg: 2, scope: !3348, file: !32, line: 153, type: !142)
!3354 = !DILocalVariable(name: "buffer", arg: 3, scope: !3348, file: !32, line: 153, type: !179)
!3355 = !DILocation(line: 155, scope: !3348)
!3356 = !DILocalVariable(name: "total_copied", scope: !3357, file: !32, line: 171, type: !183, align: 8)
!3357 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !32, file: !32, line: 169, scopeLine: 169, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3358 = !DILocation(line: 171, scope: !3357, inlinedAt: !3355)
!3359 = !DILocation(line: 172, scope: !3357, inlinedAt: !3355)
!3360 = !DILocalVariable(name: "len", scope: !3361, file: !32, line: 174, type: !184, align: 8)
!3361 = distinct !DILexicalBlock(scope: !3362, file: !32, line: 173, column: 2)
!3362 = distinct !DILexicalBlock(scope: !3357, file: !32, line: 172, column: 2)
!3363 = !DILocation(line: 174, scope: !3361, inlinedAt: !3355)
!3364 = !DILocalVariable(name: "err", scope: !3361, file: !32, line: 175, type: !111, align: 8)
!3365 = !DILocation(line: 175, scope: !3361, inlinedAt: !3355)
!3366 = !DILocation(line: 177, scope: !3361, inlinedAt: !3355)
!3367 = !DILocation(line: 177, scope: !3368, inlinedAt: !3355)
!3368 = distinct !DILexicalBlock(scope: !3361, file: !32, line: 177, column: 22)
!3369 = !DILocation(line: 178, scope: !3370, inlinedAt: !3355)
!3370 = distinct !DILexicalBlock(scope: !3361, file: !32, line: 178, column: 13)
!3371 = !DILocation(line: 180, scope: !3361, inlinedAt: !3355)
!3372 = !DILocalVariable(name: "written", scope: !3361, file: !32, line: 181, type: !183, align: 8)
!3373 = !DILocation(line: 181, scope: !3361, inlinedAt: !3355)
!3374 = !DILocation(line: 182, scope: !3361, inlinedAt: !3355)
!3375 = !DILocation(line: 183, scope: !3361, inlinedAt: !3355)
!3376 = !DILocation(line: 156, scope: !3348)
!3377 = !DILocation(line: 157, scope: !3348)
!3378 = !DILocalVariable(name: "total_copied", scope: !3379, file: !32, line: 171, type: !183, align: 8)
!3379 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !32, file: !32, line: 169, scopeLine: 169, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3380 = !DILocation(line: 171, scope: !3379, inlinedAt: !3381)
!3381 = !DILocation(line: 160, scope: !3348)
!3382 = !DILocation(line: 172, scope: !3379, inlinedAt: !3381)
!3383 = !DILocalVariable(name: "len", scope: !3384, file: !32, line: 174, type: !184, align: 8)
!3384 = distinct !DILexicalBlock(scope: !3385, file: !32, line: 173, column: 2)
!3385 = distinct !DILexicalBlock(scope: !3379, file: !32, line: 172, column: 2)
!3386 = !DILocation(line: 174, scope: !3384, inlinedAt: !3381)
!3387 = !DILocalVariable(name: "err", scope: !3384, file: !32, line: 175, type: !111, align: 8)
!3388 = !DILocation(line: 175, scope: !3384, inlinedAt: !3381)
!3389 = !DILocation(line: 177, scope: !3384, inlinedAt: !3381)
!3390 = !DILocation(line: 177, scope: !3391, inlinedAt: !3381)
!3391 = distinct !DILexicalBlock(scope: !3384, file: !32, line: 177, column: 22)
!3392 = !DILocation(line: 178, scope: !3393, inlinedAt: !3381)
!3393 = distinct !DILexicalBlock(scope: !3384, file: !32, line: 178, column: 13)
!3394 = !DILocation(line: 180, scope: !3384, inlinedAt: !3381)
!3395 = !DILocalVariable(name: "written", scope: !3384, file: !32, line: 181, type: !183, align: 8)
!3396 = !DILocation(line: 181, scope: !3384, inlinedAt: !3381)
!3397 = !DILocation(line: 182, scope: !3384, inlinedAt: !3381)
!3398 = !DILocation(line: 183, scope: !3384, inlinedAt: !3381)
!3399 = distinct !DISubprogram(name: "wrap_bytes", linkageName: "std.io.wrap_bytes", scope: !32, file: !32, line: 442, type: !3400, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !95)
!3400 = !DISubroutineType(types: !3401)
!3401 = !{!2643, !179}
!3402 = !DILocalVariable(name: "bytes", arg: 1, scope: !3399, file: !32, line: 442, type: !179)
!3403 = !DILocation(line: 442, scope: !3399)
!3404 = !DILocation(line: 444, scope: !3399)
