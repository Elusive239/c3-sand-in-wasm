; ModuleID = 'std::math::random'
source_filename = "std::math::random"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%any = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ulong[]" = type { ptr, i64 }

$std.math.random.srand = comdat any

$std.math.random.rand = comdat any

$std.math.random.rand_in_range = comdat any

$std.math.random.rnd = comdat any

$std.math.random.Lcg128Random.set_seed = comdat any

$std.math.random.Lcg128Random.next_long = comdat any

$std.math.random.Lcg128Random.next_bytes = comdat any

$std.math.random.Lcg128Random.next_int128 = comdat any

$std.math.random.Lcg128Random.next_int = comdat any

$std.math.random.Lcg128Random.next_short = comdat any

$std.math.random.Lcg128Random.next_byte = comdat any

$std.math.random.Lcg64Random.set_seed = comdat any

$std.math.random.Lcg64Random.next_int = comdat any

$std.math.random.Lcg64Random.next_bytes = comdat any

$std.math.random.Lcg64Random.next_int128 = comdat any

$std.math.random.Lcg64Random.next_long = comdat any

$std.math.random.Lcg64Random.next_short = comdat any

$std.math.random.Lcg64Random.next_byte = comdat any

$std.math.random.Lcg32Random.set_seed = comdat any

$std.math.random.Lcg32Random.next_short = comdat any

$std.math.random.Lcg32Random.next_bytes = comdat any

$std.math.random.Lcg32Random.next_int128 = comdat any

$std.math.random.Lcg32Random.next_long = comdat any

$std.math.random.Lcg32Random.next_int = comdat any

$std.math.random.Lcg32Random.next_byte = comdat any

$std.math.random.Lcg16Random.set_seed = comdat any

$std.math.random.Lcg16Random.next_byte = comdat any

$std.math.random.Lcg16Random.next_bytes = comdat any

$std.math.random.Lcg16Random.next_int128 = comdat any

$std.math.random.Lcg16Random.next_long = comdat any

$std.math.random.Lcg16Random.next_int = comdat any

$std.math.random.Lcg16Random.next_short = comdat any

$std.math.random.Mcg128Random.set_seed = comdat any

$std.math.random.Mcg128Random.next_bytes = comdat any

$std.math.random.Mcg128Random.next_long = comdat any

$std.math.random.Mcg128Random.next_int128 = comdat any

$std.math.random.Mcg128Random.next_int = comdat any

$std.math.random.Mcg128Random.next_short = comdat any

$std.math.random.Mcg128Random.next_byte = comdat any

$std.math.random.Mcg64Random.set_seed = comdat any

$std.math.random.Mcg64Random.next_bytes = comdat any

$std.math.random.Mcg64Random.next_int = comdat any

$std.math.random.Mcg64Random.next_int128 = comdat any

$std.math.random.Mcg64Random.next_long = comdat any

$std.math.random.Mcg64Random.next_short = comdat any

$std.math.random.Mcg64Random.next_byte = comdat any

$std.math.random.Mcg32Random.set_seed = comdat any

$std.math.random.Mcg32Random.next_short = comdat any

$std.math.random.Mcg32Random.next_bytes = comdat any

$std.math.random.Mcg32Random.next_int128 = comdat any

$std.math.random.Mcg32Random.next_long = comdat any

$std.math.random.Mcg32Random.next_int = comdat any

$std.math.random.Mcg32Random.next_byte = comdat any

$std.math.random.Mcg16Random.set_seed = comdat any

$std.math.random.Mcg16Random.next_byte = comdat any

$std.math.random.Mcg16Random.next_bytes = comdat any

$std.math.random.Mcg16Random.next_int128 = comdat any

$std.math.random.Mcg16Random.next_long = comdat any

$std.math.random.Mcg16Random.next_int = comdat any

$std.math.random.Mcg16Random.next_short = comdat any

$std.math.random.Msws128Random.set_seed = comdat any

$std.math.random.Msws128Random.next_int128 = comdat any

$std.math.random.Msws128Random.next_bytes = comdat any

$std.math.random.Msws128Random.next_long = comdat any

$std.math.random.Msws128Random.next_int = comdat any

$std.math.random.Msws128Random.next_short = comdat any

$std.math.random.Msws128Random.next_byte = comdat any

$std.math.random.Msws64Random.set_seed = comdat any

$std.math.random.Msws64Random.next_long = comdat any

$std.math.random.Msws64Random.next_bytes = comdat any

$std.math.random.Msws64Random.next_int128 = comdat any

$std.math.random.Msws64Random.next_int = comdat any

$std.math.random.Msws64Random.next_short = comdat any

$std.math.random.Msws64Random.next_byte = comdat any

$std.math.random.Msws32Random.set_seed = comdat any

$std.math.random.Msws32Random.next_int = comdat any

$std.math.random.Msws32Random.next_bytes = comdat any

$std.math.random.Msws32Random.next_int128 = comdat any

$std.math.random.Msws32Random.next_long = comdat any

$std.math.random.Msws32Random.next_short = comdat any

$std.math.random.Msws32Random.next_byte = comdat any

$std.math.random.Msws16Random.set_seed = comdat any

$std.math.random.Msws16Random.next_short = comdat any

$std.math.random.Msws16Random.next_bytes = comdat any

$std.math.random.Msws16Random.next_int128 = comdat any

$std.math.random.Msws16Random.next_long = comdat any

$std.math.random.Msws16Random.next_int = comdat any

$std.math.random.Msws16Random.next_byte = comdat any

$std.math.random.Msws8Random.set_seed = comdat any

$std.math.random.Msws8Random.next_byte = comdat any

$std.math.random.Msws8Random.next_bytes = comdat any

$std.math.random.Msws8Random.next_int128 = comdat any

$std.math.random.Msws8Random.next_long = comdat any

$std.math.random.Msws8Random.next_int = comdat any

$std.math.random.Msws8Random.next_short = comdat any

$std.math.random.Pcg128Random.set_seed = comdat any

$std.math.random.Pcg128Random.next_long = comdat any

$std.math.random.Pcg128Random.next_bytes = comdat any

$std.math.random.Pcg128Random.next_int128 = comdat any

$std.math.random.Pcg128Random.next_int = comdat any

$std.math.random.Pcg128Random.next_short = comdat any

$std.math.random.Pcg128Random.next_byte = comdat any

$std.math.random.Pcg64Random.set_seed = comdat any

$std.math.random.Pcg64Random.next_int = comdat any

$std.math.random.Pcg64Random.next_bytes = comdat any

$std.math.random.Pcg64Random.next_int128 = comdat any

$std.math.random.Pcg64Random.next_long = comdat any

$std.math.random.Pcg64Random.next_short = comdat any

$std.math.random.Pcg64Random.next_byte = comdat any

$std.math.random.Pcg32Random.set_seed = comdat any

$std.math.random.Pcg32Random.next_short = comdat any

$std.math.random.Pcg32Random.next_bytes = comdat any

$std.math.random.Pcg32Random.next_int128 = comdat any

$std.math.random.Pcg32Random.next_long = comdat any

$std.math.random.Pcg32Random.next_int = comdat any

$std.math.random.Pcg32Random.next_byte = comdat any

$std.math.random.Pcg16Random.set_seed = comdat any

$std.math.random.Pcg16Random.next_byte = comdat any

$std.math.random.Pcg16Random.next_bytes = comdat any

$std.math.random.Pcg16Random.next_int128 = comdat any

$std.math.random.Pcg16Random.next_long = comdat any

$std.math.random.Pcg16Random.next_int = comdat any

$std.math.random.Pcg16Random.next_short = comdat any

$std.math.random.seeder = comdat any

$std.math.random.entropy = comdat any

$std.math.random.Sfc128Random.set_seed = comdat any

$std.math.random.Sfc128Random.next_int128 = comdat any

$std.math.random.Sfc128Random.next_bytes = comdat any

$std.math.random.Sfc128Random.next_long = comdat any

$std.math.random.Sfc128Random.next_int = comdat any

$std.math.random.Sfc128Random.next_short = comdat any

$std.math.random.Sfc128Random.next_byte = comdat any

$std.math.random.Sfc64Random.set_seed = comdat any

$std.math.random.Sfc64Random.next_long = comdat any

$std.math.random.Sfc64Random.next_bytes = comdat any

$std.math.random.Sfc64Random.next_int128 = comdat any

$std.math.random.Sfc64Random.next_int = comdat any

$std.math.random.Sfc64Random.next_short = comdat any

$std.math.random.Sfc64Random.next_byte = comdat any

$std.math.random.Sfc32Random.set_seed = comdat any

$std.math.random.Sfc32Random.next_int = comdat any

$std.math.random.Sfc32Random.next_bytes = comdat any

$std.math.random.Sfc32Random.next_int128 = comdat any

$std.math.random.Sfc32Random.next_long = comdat any

$std.math.random.Sfc32Random.next_short = comdat any

$std.math.random.Sfc32Random.next_byte = comdat any

$std.math.random.Sfc16Random.set_seed = comdat any

$std.math.random.Sfc16Random.next_short = comdat any

$std.math.random.Sfc16Random.next_bytes = comdat any

$std.math.random.Sfc16Random.next_int128 = comdat any

$std.math.random.Sfc16Random.next_long = comdat any

$std.math.random.Sfc16Random.next_int = comdat any

$std.math.random.Sfc16Random.next_byte = comdat any

$std.math.random.Sfc8Random.set_seed = comdat any

$std.math.random.Sfc8Random.next_byte = comdat any

$std.math.random.Sfc8Random.next_bytes = comdat any

$std.math.random.Sfc8Random.next_int128 = comdat any

$std.math.random.Sfc8Random.next_long = comdat any

$std.math.random.Sfc8Random.next_int = comdat any

$std.math.random.Sfc8Random.next_short = comdat any

$std.math.random.SimpleRandom.set_seed = comdat any

$std.math.random.SimpleRandom.next_int = comdat any

$std.math.random.SimpleRandom.next_bytes = comdat any

$std.math.random.SimpleRandom.next_int128 = comdat any

$std.math.random.SimpleRandom.next_long = comdat any

$std.math.random.SimpleRandom.next_short = comdat any

$std.math.random.SimpleRandom.next_byte = comdat any

$"$ct.std.math.random.Lcg128Random" = comdat any

$"$ct.uint128" = comdat any

$"$ct.std.math.random.Lcg64Random" = comdat any

$"$ct.ulong" = comdat any

$"$ct.std.math.random.Lcg32Random" = comdat any

$"$ct.uint" = comdat any

$"$ct.std.math.random.Lcg16Random" = comdat any

$"$ct.ushort" = comdat any

$"$ct.std.math.random.Mcg128Random" = comdat any

$"$ct.std.math.random.Mcg64Random" = comdat any

$"$ct.std.math.random.Mcg32Random" = comdat any

$"$ct.std.math.random.Mcg16Random" = comdat any

$"$ct.std.math.random.Msws128Random" = comdat any

$"$ct.std.math.random.Msws64Random" = comdat any

$"$ct.std.math.random.Msws32Random" = comdat any

$"$ct.std.math.random.Msws16Random" = comdat any

$"$ct.std.math.random.Msws8Random" = comdat any

$"$ct.std.math.random.Pcg128Random" = comdat any

$"$ct.std.math.random.Pcg64Random" = comdat any

$"$ct.std.math.random.Pcg32Random" = comdat any

$"$ct.std.math.random.Pcg16Random" = comdat any

$"$ct.std.math.random.Sfc128Random" = comdat any

$"$ct.a4$uint128" = comdat any

$"$ct.std.math.random.Sfc64Random" = comdat any

$"$ct.a4$ulong" = comdat any

$"$ct.std.math.random.Sfc32Random" = comdat any

$"$ct.a4$uint" = comdat any

$"$ct.std.math.random.Sfc16Random" = comdat any

$"$ct.a4$ushort" = comdat any

$"$ct.std.math.random.Sfc8Random" = comdat any

$"$ct.a4$char" = comdat any

$"$ct.char" = comdat any

$"$ct.std.math.random.SimpleRandom" = comdat any

$std.math.random.default_random = comdat any

$std.math.random.default_random_initialized = comdat any

$"$ct.long" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.set_seed" = comdat any

$"$sel.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_long" = comdat any

$"$sel.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = comdat any

$"$sel.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int128" = comdat any

$"$sel.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_int" = comdat any

$"$sel.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_short" = comdat any

$"$sel.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg128Random.next_byte" = comdat any

$"$sel.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Lcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Mcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Msws8Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Pcg16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc128Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc64Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc32Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_short" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc16Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.set_seed" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_byte" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int128" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_long" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_int" = comdat any

$"$ct.dyn.std.math.random.Sfc8Random.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.set_seed" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_int128" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_long" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_short" = comdat any

$"$ct.dyn.std.math.random.SimpleRandom.next_byte" = comdat any

@"$ct.std.math.random.Lcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Lcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Mcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws128Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws64Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws32Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws16Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Msws8Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 4, i64 0, i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Pcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.a4$uint128" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint128" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.a4$ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ulong" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.a4$uint" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$uint" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.a4$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$ushort" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.Sfc8Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.a4$char" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.a4$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.char" to i64), i64 4, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@"$ct.std.math.random.SimpleRandom" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@std.math.random.default_random = weak_odr thread_local global [4 x i64] zeroinitializer, comdat, align 16, !dbg !0
@std.math.random.default_random_initialized = weak_odr thread_local local_unnamed_addr global i8 0, comdat, align 1, !dbg !9
@.panic_msg = internal constant [39 x i8] c"@require \22is_random(random)\22 violated.\00", align 1
@.file = internal constant [15 x i8] c"math_random.c3\00", align 1
@.func = internal constant [5 x i8] c"rand\00", align 1
@std.core.builtin.panic = external global ptr, align 8
@.panic_msg.2 = internal constant [31 x i8] c"@require \22range > 0\22 violated.\00", align 1
@.panic_msg.3 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.4 = internal constant [32 x i8] c"@require \22max >= min\22 violated.\00", align 1
@.func.5 = internal constant [14 x i8] c"rand_in_range\00", align 1
@.func.6 = internal constant [4 x i8] c"rnd\00", align 1
@std.math.random.ODD_PHI128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !12
@std.math.random.ODD_PHI64 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !16
@std.math.random.ODD_PHI32 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !18
@std.math.random.ODD_PHI16 = internal unnamed_addr constant i16 -25033, align 2, !dbg !21
@std.math.random.MUL_LCG128 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !24
@std.math.random.MUL_LCG64 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !26
@std.math.random.MUL_LCG32 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !28
@std.math.random.MUL_LCG16 = internal unnamed_addr constant i16 -28323, align 2, !dbg !30
@.panic_msg.14 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file.15 = internal constant [12 x i8] c"math.lcg.c3\00", align 1
@.func.16 = internal constant [9 x i8] c"set_seed\00", align 1
@.panic_msg.17 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.18 = internal constant [10 x i8] c"next_long\00", align 1
@.panic_msg.19 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.20 = internal constant [11 x i8] c"next_bytes\00", align 1
@.panic_msg.21 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.22 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.23 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, comdat, align 8
@.panic_msg.24 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.26 = private unnamed_addr constant [24 x i8] c"Lcg128Random.next_bytes\00", align 1
@.func.27 = internal constant [12 x i8] c"next_int128\00", align 1
@.func.28 = internal constant [9 x i8] c"next_int\00", align 1
@.func.29 = internal constant [11 x i8] c"next_short\00", align 1
@.func.30 = internal constant [10 x i8] c"next_byte\00", align 1
@.str.31 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"Lcg64Random.next_bytes\00", align 1
@.str.34 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.36 = private unnamed_addr constant [23 x i8] c"Lcg32Random.next_bytes\00", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.38 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.39 = private unnamed_addr constant [23 x i8] c"Lcg16Random.next_bytes\00", align 1
@std.math.random.MUL_MCG128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !32
@std.math.random.MUL_MCG64 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !35
@std.math.random.MUL_MCG32 = internal unnamed_addr constant i32 -1814600227, align 4, !dbg !37
@std.math.random.MUL_MCG16 = internal unnamed_addr constant i16 -27691, align 2, !dbg !39
@.file.43 = internal constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.45 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.46 = private unnamed_addr constant [24 x i8] c"Mcg128Random.next_bytes\00", align 1
@.str.47 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.48 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.49 = private unnamed_addr constant [23 x i8] c"Mcg64Random.next_bytes\00", align 1
@.str.50 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.52 = private unnamed_addr constant [23 x i8] c"Mcg32Random.next_bytes\00", align 1
@.str.53 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.54 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.55 = private unnamed_addr constant [23 x i8] c"Mcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.60 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !41
@std.math.random.ODD_PHI64.61 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !44
@std.math.random.ODD_PHI32.62 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !46
@std.math.random.ODD_PHI16.63 = internal unnamed_addr constant i16 -25033, align 2, !dbg !48
@std.math.random.ODD_PHI8 = internal unnamed_addr constant i8 -97, align 1, !dbg !50
@.file.64 = internal constant [13 x i8] c"math.msws.c3\00", align 1
@.panic_msg.65 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.66 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.str.67 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.68 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.69 = private unnamed_addr constant [25 x i8] c"Msws128Random.next_bytes\00", align 1
@.str.70 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.71 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"Msws64Random.next_bytes\00", align 1
@.str.73 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.74 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.75 = private unnamed_addr constant [24 x i8] c"Msws32Random.next_bytes\00", align 1
@.str.76 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.77 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.78 = private unnamed_addr constant [24 x i8] c"Msws16Random.next_bytes\00", align 1
@.str.79 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.80 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.81 = private unnamed_addr constant [23 x i8] c"Msws8Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.89 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !53
@std.math.random.ODD_PHI64.90 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !56
@std.math.random.ODD_PHI32.91 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !58
@std.math.random.ODD_PHI16.92 = internal unnamed_addr constant i16 -25033, align 2, !dbg !60
@std.math.random.MUL_LCG128.93 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !62
@std.math.random.MUL_LCG64.94 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !64
@std.math.random.MUL_LCG32.95 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !66
@std.math.random.MUL_LCG16.96 = internal unnamed_addr constant i16 -28323, align 2, !dbg !68
@.file.97 = internal constant [12 x i8] c"math.pcg.c3\00", align 1
@next_long.ROT_SHIFT = internal unnamed_addr constant i32 58, align 4, !dbg !70
@.str.98 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.99 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.100 = private unnamed_addr constant [24 x i8] c"Pcg128Random.next_bytes\00", align 1
@next_int.ROT_SHIFT = internal unnamed_addr constant i32 27, align 4, !dbg !73
@.str.101 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.102 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.103 = private unnamed_addr constant [23 x i8] c"Pcg64Random.next_bytes\00", align 1
@next_short.ROT_SHIFT = internal unnamed_addr constant i32 12, align 4, !dbg !75
@.str.104 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.105 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.106 = private unnamed_addr constant [23 x i8] c"Pcg32Random.next_bytes\00", align 1
@next_byte.ROT_SHIFT = internal unnamed_addr constant i32 5, align 4, !dbg !77
@.str.107 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.108 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.109 = private unnamed_addr constant [23 x i8] c"Pcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI64.112 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !79
@std.math.random.MUL_MCG64.113 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !82
@std.math.random.MUL_LCG64.114 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !84
@std.core.mem.allocator.thread_temp_allocator = external thread_local global ptr, align 8
@.file.115 = internal constant [15 x i8] c"math.seeder.c3\00", align 1
@.func.116 = internal constant [7 x i8] c"seeder\00", align 1
@.panic_msg.117 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.118 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.119 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.120 = internal constant [64 x i8] c"Dereference of null pointer, 'char[8]*)&input[i * 8]' was null.\00", align 1
@.panic_msg.121 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.122 = internal constant [7 x i8] c"mem.c3\00", align 1
@entropy.random_int = internal unnamed_addr global i32 0, align 4, !dbg !86
@.str.123 = private unnamed_addr constant [9 x i8] c"18:26:49\00", align 1
@.func.124 = internal constant [8 x i8] c"entropy\00", align 1
@std.core.mem.allocator.thread_allocator = external thread_local global %any, align 8
@std.math.random.ODD_PHI128.129 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !88
@std.math.random.ODD_PHI64.130 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !90
@std.math.random.ODD_PHI32.131 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !92
@std.math.random.ODD_PHI16.132 = internal unnamed_addr constant i16 -25033, align 2, !dbg !94
@std.math.random.ODD_PHI8.133 = internal unnamed_addr constant i8 -97, align 1, !dbg !96
@.file.134 = internal constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.135 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.136 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.137 = private unnamed_addr constant [24 x i8] c"Sfc128Random.next_bytes\00", align 1
@.str.138 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.139 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.140 = private unnamed_addr constant [23 x i8] c"Sfc64Random.next_bytes\00", align 1
@.panic_msg.141 = internal constant [62 x i8] c"Reference parameter 'sfc' was passed a null pointer argument.\00", align 1
@.str.142 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.143 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.144 = private unnamed_addr constant [23 x i8] c"Sfc32Random.next_bytes\00", align 1
@.panic_msg.145 = internal constant [63 x i8] c"Reference parameter 'seed' was passed a null pointer argument.\00", align 1
@.str.146 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.147 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.148 = private unnamed_addr constant [23 x i8] c"Sfc16Random.next_bytes\00", align 1
@.str.149 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.150 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"Sfc8Random.next_bytes\00", align 1
@std.math.random.SIMPLE_RANDOM_MULTIPLIER = internal unnamed_addr constant i64 25214903917, align 8, !dbg !98
@std.math.random.SIMPLE_RANDOM_ADDEND = internal unnamed_addr constant i64 11, align 8, !dbg !102
@std.math.random.SIMPLE_RANDOM_MASK = internal unnamed_addr constant i64 281474976710655, align 8, !dbg !104
@.file.154 = internal constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.156 = private unnamed_addr constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.157 = private unnamed_addr constant [24 x i8] c"SimpleRandom.next_bytes\00", align 1
@"$ct.dyn.std.math.random.Lcg128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.set_seed" = linkonce_odr constant [9 x i8] c"set_seed\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_long" = linkonce_odr constant [10 x i8] c"next_long\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_bytes" = linkonce_odr constant [11 x i8] c"next_bytes\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int128" = linkonce_odr constant [12 x i8] c"next_int128\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_int" = linkonce_odr constant [9 x i8] c"next_int\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_short" = linkonce_odr constant [11 x i8] c"next_short\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$sel.next_byte" = linkonce_odr constant [10 x i8] c"next_byte\00", comdat, align 1
@"$ct.dyn.std.math.random.Lcg64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Lcg16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Lcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Mcg16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Mcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Msws8Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Msws8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Pcg16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Pcg16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc128Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc128Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc64Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc64Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc32Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc32Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc16Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc16Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.Sfc8Random.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.Sfc8Random.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.set_seed" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.set_seed, ptr @"$sel.set_seed", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int, ptr @"$sel.next_int", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_bytes" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_bytes, ptr @"$sel.next_bytes", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_int128" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_int128, ptr @"$sel.next_int128", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_long" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_long, ptr @"$sel.next_long", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_short" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_short, ptr @"$sel.next_short", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@"$ct.dyn.std.math.random.SimpleRandom.next_byte" = weak_odr global { ptr, ptr, ptr } { ptr @std.math.random.SimpleRandom.next_byte, ptr @"$sel.next_byte", ptr inttoptr (i64 -1 to ptr) }, comdat, align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_register, ptr null }]

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.srand(i64 %0) #0 comdat !dbg !114 {
entry:
  %seed = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  store i64 %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !118, !DIExpression(), !119)
  store ptr %seed, ptr %value, align 8
  %1 = load ptr, ptr %value, align 8, !dbg !120
  store ptr %1, ptr %taddr, align 8
  %2 = load ptr, ptr %taddr, align 8
  %3 = insertvalue %"char[]" undef, ptr %2, 0
  %4 = insertvalue %"char[]" %3, i64 8, 1
  store %"char[]" %4, ptr %indirectarg, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr @std.math.random.default_random, ptr align 8 %indirectarg), !dbg !123
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !124
  ret void, !dbg !124
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.rand(i32 %0) #0 comdat !dbg !125 {
entry:
  %range = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg4 = alloca %"char[]", align 8
  %random5 = alloca ptr, align 8
  %range6 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random7 = alloca ptr, align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg23 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %range, align 4
    #dbg_declare(ptr %range, !129, !DIExpression(), !130)
  %1 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !131
  %2 = trunc i8 %1 to i1, !dbg !131
  %not = xor i1 %2, true, !dbg !131
  br i1 %not, label %if.then, label %if.exit, !dbg !131

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %3 = load ptr, ptr %random, align 8
  store ptr %3, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !134

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg3, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 24), !dbg !136
  unreachable, !dbg !136

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !141
  %5 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !141
  %6 = insertvalue %"char[]" %5, i64 32, 1, !dbg !141
  %7 = load ptr, ptr %random, align 8, !dbg !141
  store %"char[]" %6, ptr %indirectarg4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %7, ptr align 8 %indirectarg4), !dbg !141
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !142
  br label %if.exit, !dbg !142

if.exit:                                          ; preds = %assert_ok, %entry
  store ptr @std.math.random.default_random, ptr %random5, align 8
  %8 = load i32, ptr %range, align 4, !dbg !143
  store i32 %8, ptr %range6, align 4
  %9 = load ptr, ptr %random5, align 8
  store ptr %9, ptr %random7, align 8
  br i1 true, label %assert_ok12, label %assert_fail8, !dbg !144

assert_fail8:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg11, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, i32 34), !dbg !146
  unreachable, !dbg !146

assert_ok12:                                      ; preds = %if.exit
  %11 = load i32, ptr %range6, align 4, !dbg !149
  %lt = icmp ult i32 0, %11, !dbg !149
  br i1 %lt, label %assert_ok17, label %assert_fail13, !dbg !149

assert_fail13:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.2, i64 30 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg16, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 35), !dbg !149
  unreachable, !dbg !149

assert_ok17:                                      ; preds = %assert_ok12
  %13 = load i32, ptr %range6, align 4, !dbg !150
  %eq = icmp eq i32 1, %13, !dbg !150
  br i1 %eq, label %if.then18, label %if.exit19, !dbg !150

if.then18:                                        ; preds = %assert_ok17
  store i32 0, ptr %blockret, align 4, !dbg !150
  br label %expr_block.exit, !dbg !150

if.exit19:                                        ; preds = %assert_ok17
    #dbg_declare(ptr %mask, !151, !DIExpression(), !152)
  store i32 -1, ptr %mask, align 4, !dbg !152
  %14 = load i32, ptr %range6, align 4, !dbg !153
  %sub = sub i32 %14, 1, !dbg !153
  store i32 %sub, ptr %range6, align 4, !dbg !153
  %15 = load i32, ptr %mask, align 4, !dbg !154
  %16 = load i32, ptr %range6, align 4
  store i32 %16, ptr %self, align 4
  %17 = load i32, ptr %self, align 4, !dbg !155
  %18 = call i32 @llvm.ctlz.i32(i32 %17, i1 false), !dbg !155
  %shift_exceeds = icmp uge i32 %18, 32, !dbg !154
  %19 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !154
  br i1 %19, label %panic, label %checkok, !dbg !154

checkok:                                          ; preds = %if.exit19
  %lshr = lshr i32 %15, %18, !dbg !154
  %20 = freeze i32 %lshr, !dbg !154
  store i32 %20, ptr %mask, align 4, !dbg !154
    #dbg_declare(ptr %x, !158, !DIExpression(), !159)
  br label %loop.body, !dbg !160

loop.cond:                                        ; preds = %loop.body
  %21 = load i32, ptr %x, align 4, !dbg !161
  %22 = load i32, ptr %range6, align 4, !dbg !161
  %gt = icmp ugt i32 %21, %22, !dbg !161
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !161

loop.body:                                        ; preds = %loop.cond, %checkok
  %23 = load ptr, ptr %random5, align 8, !dbg !163
  %24 = call i32 @std.math.random.Sfc64Random.next_int(ptr %23), !dbg !163
  %25 = load i32, ptr %mask, align 4, !dbg !163
  %and = and i32 %24, %25, !dbg !163
  store i32 %and, ptr %x, align 4, !dbg !163
  br label %loop.cond, !dbg !163

loop.exit:                                        ; preds = %loop.cond
  %26 = load i32, ptr %x, align 4, !dbg !165
  store i32 %26, ptr %blockret, align 4, !dbg !165
  br label %expr_block.exit, !dbg !165

expr_block.exit:                                  ; preds = %loop.exit, %if.then18
  %27 = load i32, ptr %blockret, align 4, !dbg !165
  ret i32 %27, !dbg !165

panic:                                            ; preds = %if.exit19
  store i32 %18, ptr %taddr, align 4
  %28 = insertvalue %any undef, ptr %taddr, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 35 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %indirectarg22, align 8
  store %any %29, ptr %varargslots, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg23, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 42, ptr align 8 %indirectarg23), !dbg !154
  unreachable, !dbg !154
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.rand_in_range(i32 %0, i32 %1) #0 comdat !dbg !166 {
entry:
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %random = alloca ptr, align 8
  %random3 = alloca ptr, align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg9 = alloca %"char[]", align 8
  %random10 = alloca ptr, align 8
  %min11 = alloca i32, align 4
  %max12 = alloca i32, align 4
  %random13 = alloca ptr, align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %indirectarg23 = alloca %"char[]", align 8
  %random25 = alloca ptr, align 8
  %range = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random26 = alloca ptr, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr = alloca i32, align 4
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg42 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 16
  %indirectarg43 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %min, align 4
    #dbg_declare(ptr %min, !169, !DIExpression(), !170)
  store i32 %1, ptr %max, align 4
    #dbg_declare(ptr %max, !171, !DIExpression(), !170)
  %2 = load i32, ptr %max, align 4, !dbg !172
  %3 = load i32, ptr %min, align 4, !dbg !172
  %ge = icmp sge i32 %2, %3, !dbg !172
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !172

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.4, i64 31 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg2, align 8
  %4 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %4(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88), !dbg !172
  unreachable, !dbg !172

assert_ok:                                        ; preds = %entry
  %5 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !174
  %6 = trunc i8 %5 to i1, !dbg !174
  %not = xor i1 %6, true, !dbg !174
  br i1 %not, label %if.then, label %if.exit, !dbg !174

if.then:                                          ; preds = %assert_ok
  store ptr @std.math.random.default_random, ptr %random, align 8
  %7 = load ptr, ptr %random, align 8
  store ptr %7, ptr %random3, align 8
  br i1 true, label %assert_ok8, label %assert_fail4, !dbg !177

assert_fail4:                                     ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg7, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, i32 24), !dbg !179
  unreachable, !dbg !179

assert_ok8:                                       ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !184
  %9 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !184
  %10 = insertvalue %"char[]" %9, i64 32, 1, !dbg !184
  %11 = load ptr, ptr %random, align 8, !dbg !184
  store %"char[]" %10, ptr %indirectarg9, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %11, ptr align 8 %indirectarg9), !dbg !184
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !185
  br label %if.exit, !dbg !185

if.exit:                                          ; preds = %assert_ok8, %assert_ok
  store ptr @std.math.random.default_random, ptr %random10, align 8
  %12 = load i32, ptr %min, align 4
  store i32 %12, ptr %min11, align 4
  %13 = load i32, ptr %max, align 4
  store i32 %13, ptr %max12, align 4
  %14 = load ptr, ptr %random10, align 8
  store ptr %14, ptr %random13, align 8
  br i1 true, label %assert_ok18, label %assert_fail14, !dbg !186

assert_fail14:                                    ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg17, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, i32 55), !dbg !188
  unreachable, !dbg !188

assert_ok18:                                      ; preds = %if.exit
  %16 = load i32, ptr %max12, align 4, !dbg !192
  %17 = load i32, ptr %min11, align 4, !dbg !192
  %ge19 = icmp sge i32 %16, %17, !dbg !192
  br i1 %ge19, label %assert_ok24, label %assert_fail20, !dbg !192

assert_fail20:                                    ; preds = %assert_ok18
  store %"char[]" { ptr @.panic_msg.4, i64 31 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg22, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg23, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18(ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, ptr align 8 %indirectarg23, i32 56), !dbg !192
  unreachable, !dbg !192

assert_ok24:                                      ; preds = %assert_ok18
  %19 = load ptr, ptr %random10, align 8
  store ptr %19, ptr %random25, align 8
  %20 = load i32, ptr %max12, align 4, !dbg !193
  %21 = load i32, ptr %min11, align 4, !dbg !193
  %sub = sub i32 %20, %21, !dbg !193
  %add = add i32 %sub, 1, !dbg !193
  store i32 %add, ptr %range, align 4
  %22 = load ptr, ptr %random25, align 8
  store ptr %22, ptr %random26, align 8
  br i1 true, label %assert_ok31, label %assert_fail27, !dbg !194

assert_fail27:                                    ; preds = %assert_ok24
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg30, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 34), !dbg !196
  unreachable, !dbg !196

assert_ok31:                                      ; preds = %assert_ok24
  %24 = load i32, ptr %range, align 4, !dbg !199
  %lt = icmp ult i32 0, %24, !dbg !199
  br i1 %lt, label %assert_ok36, label %assert_fail32, !dbg !199

assert_fail32:                                    ; preds = %assert_ok31
  store %"char[]" { ptr @.panic_msg.2, i64 30 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg35, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 35), !dbg !199
  unreachable, !dbg !199

assert_ok36:                                      ; preds = %assert_ok31
  %26 = load i32, ptr %range, align 4, !dbg !200
  %eq = icmp eq i32 1, %26, !dbg !200
  br i1 %eq, label %if.then37, label %if.exit38, !dbg !200

if.then37:                                        ; preds = %assert_ok36
  store i32 0, ptr %blockret, align 4, !dbg !200
  br label %expr_block.exit, !dbg !200

if.exit38:                                        ; preds = %assert_ok36
    #dbg_declare(ptr %mask, !201, !DIExpression(), !202)
  store i32 -1, ptr %mask, align 4, !dbg !202
  %27 = load i32, ptr %range, align 4, !dbg !203
  %sub39 = sub i32 %27, 1, !dbg !203
  store i32 %sub39, ptr %range, align 4, !dbg !203
  %28 = load i32, ptr %mask, align 4, !dbg !204
  %29 = load i32, ptr %range, align 4
  store i32 %29, ptr %self, align 4
  %30 = load i32, ptr %self, align 4, !dbg !205
  %31 = call i32 @llvm.ctlz.i32(i32 %30, i1 false), !dbg !205
  %shift_exceeds = icmp uge i32 %31, 32, !dbg !204
  %32 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !204
  br i1 %32, label %panic, label %checkok, !dbg !204

checkok:                                          ; preds = %if.exit38
  %lshr = lshr i32 %28, %31, !dbg !204
  %33 = freeze i32 %lshr, !dbg !204
  store i32 %33, ptr %mask, align 4, !dbg !204
    #dbg_declare(ptr %x, !207, !DIExpression(), !208)
  br label %loop.body, !dbg !209

loop.cond:                                        ; preds = %loop.body
  %34 = load i32, ptr %x, align 4, !dbg !210
  %35 = load i32, ptr %range, align 4, !dbg !210
  %gt = icmp ugt i32 %34, %35, !dbg !210
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !210

loop.body:                                        ; preds = %loop.cond, %checkok
  %36 = load ptr, ptr %random25, align 8, !dbg !212
  %37 = call i32 @std.math.random.Sfc64Random.next_int(ptr %36), !dbg !212
  %38 = load i32, ptr %mask, align 4, !dbg !212
  %and = and i32 %37, %38, !dbg !212
  store i32 %and, ptr %x, align 4, !dbg !212
  br label %loop.cond, !dbg !212

loop.exit:                                        ; preds = %loop.cond
  %39 = load i32, ptr %x, align 4, !dbg !214
  store i32 %39, ptr %blockret, align 4, !dbg !214
  br label %expr_block.exit, !dbg !214

expr_block.exit:                                  ; preds = %loop.exit, %if.then37
  %40 = load i32, ptr %blockret, align 4, !dbg !214
  %41 = load i32, ptr %min11, align 4, !dbg !193
  %add44 = add i32 %40, %41, !dbg !193
  ret i32 %add44, !dbg !193

panic:                                            ; preds = %if.exit38
  store i32 %31, ptr %taddr, align 4
  %42 = insertvalue %any undef, ptr %taddr, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 35 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg41, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %indirectarg42, align 8
  store %any %43, ptr %varargslots, align 16
  %44 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %44, i64 1, 1
  store %"any[]" %"$$temp", ptr %indirectarg43, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, ptr align 8 %indirectarg42, i32 42, ptr align 8 %indirectarg43), !dbg !204
  unreachable, !dbg !204
}

; Function Attrs: nounwind ssp uwtable
define weak_odr double @std.math.random.rnd() #0 comdat !dbg !215 {
entry:
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %indirectarg4 = alloca %"char[]", align 8
  %val = alloca i64, align 8
  %0 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !219
  %1 = trunc i8 %0 to i1, !dbg !219
  %not = xor i1 %1, true, !dbg !219
  br i1 %not, label %if.then, label %if.exit, !dbg !219

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %2 = load ptr, ptr %random, align 8
  store ptr %2, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !222

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg2, align 8
  store %"char[]" { ptr @.func.6, i64 3 }, ptr %indirectarg3, align 8
  %3 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %3(ptr align 8 %indirectarg, ptr align 8 %indirectarg2, ptr align 8 %indirectarg3, i32 24), !dbg !224
  unreachable, !dbg !224

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !229
  %4 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !229
  %5 = insertvalue %"char[]" %4, i64 32, 1, !dbg !229
  %6 = load ptr, ptr %random, align 8, !dbg !229
  store %"char[]" %5, ptr %indirectarg4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %6, ptr align 8 %indirectarg4), !dbg !229
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !230
  br label %if.exit, !dbg !230

if.exit:                                          ; preds = %assert_ok, %entry
    #dbg_declare(ptr %val, !231, !DIExpression(), !232)
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr @std.math.random.default_random), !dbg !232
  %and = and i64 %7, 9007199254740991, !dbg !232
  store i64 %and, ptr %val, align 8, !dbg !232
  %8 = load i64, ptr %val, align 8, !dbg !233
  %uifp = uitofp i64 %8 to double, !dbg !233
  %fmul = fmul double %uifp, 0x3CA0000000000000, !dbg !233
  ret double %fmul, !dbg !233
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !234 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !245
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !245
  br i1 %3, label %panic, label %checkok, !dbg !245

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !246, !DIExpression(), !247)
    #dbg_declare(ptr %1, !248, !DIExpression(), !247)
  %4 = load ptr, ptr %self, align 8, !dbg !249
  %checknull = icmp eq ptr %4, null, !dbg !249
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !249
  br i1 %5, label %panic3, label %checkok7, !dbg !249

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !250, !DIExpression(), !252)
  store i128 0, ptr %return_value, align 16, !dbg !252
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !253
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !255
  %10 = load i128, ptr %return_value, align 16, !dbg !256
  store i128 %10, ptr %4, align 16, !dbg !256
  ret void, !dbg !256

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 18), !dbg !247
  unreachable, !dbg !247

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 20), !dbg !249
  unreachable, !dbg !249
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg128Random.next_long(ptr %0) #0 comdat !dbg !257 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !260
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !260
  br i1 %2, label %panic, label %checkok, !dbg !260

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !261, !DIExpression(), !262)
    #dbg_declare(ptr %s, !263, !DIExpression(), !265)
  %3 = load ptr, ptr %self, align 8, !dbg !265
  store ptr %3, ptr %s, align 8, !dbg !265
    #dbg_declare(ptr %result, !266, !DIExpression(), !267)
  %4 = load ptr, ptr %s, align 8, !dbg !267
  %checknull = icmp eq ptr %4, null, !dbg !267
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !267
  br i1 %5, label %panic3, label %checkok7, !dbg !267

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !267
  %lshr = lshr i128 %6, 64, !dbg !267
  %7 = freeze i128 %lshr, !dbg !267
  %trunc = trunc i128 %7 to i64, !dbg !267
  store i64 %trunc, ptr %result, align 8, !dbg !267
  %8 = load ptr, ptr %s, align 8, !dbg !268
  %checknull8 = icmp eq ptr %8, null, !dbg !268
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !268
  br i1 %9, label %panic9, label %checkok13, !dbg !268

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !268
  %checknull14 = icmp eq ptr %10, null, !dbg !268
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !268
  br i1 %11, label %panic15, label %checkok19, !dbg !268

checkok19:                                        ; preds = %checkok13
  %12 = load i128, ptr %10, align 16, !dbg !268
  %mul = mul i128 %12, -48899967401452674293065485854872568811, !dbg !268
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !268
  store i128 %add, ptr %8, align 16, !dbg !268
  %13 = load i64, ptr %result, align 8, !dbg !269
  ret i64 %13, !dbg !269

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 24), !dbg !262
  unreachable, !dbg !262

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 27), !dbg !267
  unreachable, !dbg !267

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 28), !dbg !268
  unreachable, !dbg !268

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 28), !dbg !268
  unreachable, !dbg !268
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !270 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !271
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !271
  br i1 %3, label %panic, label %checkok, !dbg !271

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !272, !DIExpression(), !271)
    #dbg_declare(ptr %1, !273, !DIExpression(), !271)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !274
  %4 = load i64, ptr %ptradd, align 8, !dbg !274
  %lt = icmp ult i64 0, %4, !dbg !274
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !274

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 33), !dbg !274
  unreachable, !dbg !274

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !276, !DIExpression(), !278)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !278
  %6 = load i64, ptr %ptradd6, align 8, !dbg !278
  store i64 %6, ptr %len, align 8, !dbg !278
  br label %loop.cond, !dbg !279

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !280
  %lt7 = icmp ult i64 0, %7, !dbg !280
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !280

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !282, !DIExpression(), !284)
  %8 = load ptr, ptr %self, align 8, !dbg !285
  %9 = call i64 @std.math.random.Lcg128Random.next_long(ptr %8), !dbg !284
  store i64 %9, ptr %value, align 8, !dbg !284
  %10 = load i64, ptr %len, align 8, !dbg !286
  %le = icmp ule i64 %10, 8, !dbg !286
  br i1 %le, label %if.then, label %if.exit, !dbg !286

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !287
  %add = add i64 0, %12, !dbg !287
  %size = sub i64 %add, 0, !dbg !287
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !287
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !287
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !287
  %16 = extractvalue %"char[]" %15, 0, !dbg !287
  %17 = extractvalue %"char[]" %15, 1, !dbg !287
  %gt = icmp ugt i64 0, %17, !dbg !287
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !287
  br i1 %18, label %panic8, label %checkok16, !dbg !287

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !287
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !287
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !287
  %21 = extractvalue %"char[]" %20, 0, !dbg !287
  %22 = extractvalue %"char[]" %14, 0, !dbg !287
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !287
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !287
  br label %expr_block.exit, !dbg !289

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !290
  %31 = extractvalue %"char[]" %30, 0, !dbg !290
  %32 = extractvalue %"char[]" %30, 1, !dbg !290
  %gt34 = icmp sgt i64 0, %32, !dbg !290
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !290
  br i1 %33, label %panic35, label %checkok45, !dbg !290

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !290
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !290
  br i1 %34, label %panic47, label %checkok57, !dbg !290

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !290
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !290
  %37 = extractvalue %"char[]" %36, 0, !dbg !290
  %38 = extractvalue %"char[]" %29, 0, !dbg !290
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !290
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !290
  %43 = load i64, ptr %len, align 8, !dbg !291
  %sub = sub i64 %43, 8, !dbg !291
  store i64 %sub, ptr %len, align 8, !dbg !291
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !292
  %45 = extractvalue %"char[]" %44, 0, !dbg !292
  %46 = extractvalue %"char[]" %44, 1, !dbg !292
  %gt74 = icmp ugt i64 8, %46, !dbg !292
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !292
  br i1 %47, label %panic75, label %checkok85, !dbg !292

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !292
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !292
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !292
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !292
  store %"char[]" %49, ptr %bytes, align 8, !dbg !292
  br label %loop.cond, !dbg !292

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.25, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.26, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 35, ptr align 8 %indirectarg91), !dbg !293
  unreachable, !dbg !296

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !296

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35), !dbg !271
  unreachable, !dbg !271

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !287
  unreachable, !dbg !287

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !287
  unreachable, !dbg !287

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !290
  unreachable, !dbg !290

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !290
  unreachable, !dbg !290

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !290
  unreachable, !dbg !290

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !292
  unreachable, !dbg !292
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg128Random.next_int128(ptr %0) #0 comdat !dbg !297 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !300
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !300
  br i1 %2, label %panic, label %checkok, !dbg !300

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !301, !DIExpression(), !300)
  %3 = load ptr, ptr %self, align 8, !dbg !302
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !304
  %zext = zext i64 %4 to i128, !dbg !304
  %shl = shl i128 %zext, 64, !dbg !304
  %5 = freeze i128 %shl, !dbg !304
  %6 = load ptr, ptr %self, align 8, !dbg !302
  %7 = call i64 @std.math.random.Lcg128Random.next_long(ptr %6), !dbg !304
  %zext3 = zext i64 %7 to i128, !dbg !304
  %add = add i128 %5, %zext3, !dbg !304
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !300
  unreachable, !dbg !300
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg128Random.next_int(ptr %0) #0 comdat !dbg !305 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !308
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !308
  br i1 %2, label %panic, label %checkok, !dbg !308

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !309, !DIExpression(), !308)
  %3 = load ptr, ptr %self, align 8, !dbg !308
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !308
  %trunc = trunc i64 %4 to i32, !dbg !308
  ret i32 %trunc, !dbg !308

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37), !dbg !308
  unreachable, !dbg !308
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg128Random.next_short(ptr %0) #0 comdat !dbg !310 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !313
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !313
  br i1 %2, label %panic, label %checkok, !dbg !313

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !314, !DIExpression(), !313)
  %3 = load ptr, ptr %self, align 8, !dbg !313
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !313
  %trunc = trunc i64 %4 to i16, !dbg !313
  ret i16 %trunc, !dbg !313

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38), !dbg !313
  unreachable, !dbg !313
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg128Random.next_byte(ptr %0) #0 comdat !dbg !315 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !318
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !318
  br i1 %2, label %panic, label %checkok, !dbg !318

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !319, !DIExpression(), !318)
  %3 = load ptr, ptr %self, align 8, !dbg !318
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !318
  %trunc = trunc i64 %4 to i8, !dbg !318
  ret i8 %trunc, !dbg !318

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39), !dbg !318
  unreachable, !dbg !318
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !320 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !325
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !325
  br i1 %3, label %panic, label %checkok, !dbg !325

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !326, !DIExpression(), !327)
    #dbg_declare(ptr %1, !328, !DIExpression(), !327)
  %4 = load ptr, ptr %self, align 8, !dbg !329
  %checknull = icmp eq ptr %4, null, !dbg !329
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !329
  br i1 %5, label %panic3, label %checkok7, !dbg !329

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !330, !DIExpression(), !332)
  store i64 0, ptr %return_value, align 8, !dbg !332
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !333
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !335
  %10 = load i64, ptr %return_value, align 8, !dbg !336
  store i64 %10, ptr %4, align 8, !dbg !336
  ret void, !dbg !336

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !327
  unreachable, !dbg !327

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 47), !dbg !329
  unreachable, !dbg !329
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg64Random.next_int(ptr %0) #0 comdat !dbg !337 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !340
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !340
  br i1 %2, label %panic, label %checkok, !dbg !340

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !341, !DIExpression(), !342)
    #dbg_declare(ptr %s, !343, !DIExpression(), !345)
  %3 = load ptr, ptr %self, align 8, !dbg !345
  store ptr %3, ptr %s, align 8, !dbg !345
    #dbg_declare(ptr %result, !346, !DIExpression(), !347)
  %4 = load ptr, ptr %s, align 8, !dbg !347
  %checknull = icmp eq ptr %4, null, !dbg !347
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !347
  br i1 %5, label %panic3, label %checkok7, !dbg !347

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !347
  %lshr = lshr i64 %6, 32, !dbg !347
  %7 = freeze i64 %lshr, !dbg !347
  %trunc = trunc i64 %7 to i32, !dbg !347
  store i32 %trunc, ptr %result, align 4, !dbg !347
  %8 = load ptr, ptr %s, align 8, !dbg !348
  %checknull8 = icmp eq ptr %8, null, !dbg !348
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !348
  br i1 %9, label %panic9, label %checkok13, !dbg !348

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !348
  %checknull14 = icmp eq ptr %10, null, !dbg !348
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !348
  br i1 %11, label %panic15, label %checkok19, !dbg !348

checkok19:                                        ; preds = %checkok13
  %12 = load i64, ptr %10, align 8, !dbg !348
  %mul = mul i64 %12, -3372029247567499371, !dbg !348
  %add = add i64 %mul, -7046029254386353131, !dbg !348
  store i64 %add, ptr %8, align 8, !dbg !348
  %13 = load i32, ptr %result, align 4, !dbg !349
  ret i32 %13, !dbg !349

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 51), !dbg !342
  unreachable, !dbg !342

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 54), !dbg !347
  unreachable, !dbg !347

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 55), !dbg !348
  unreachable, !dbg !348

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 55), !dbg !348
  unreachable, !dbg !348
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !350 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !351
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !351
  br i1 %3, label %panic, label %checkok, !dbg !351

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !352, !DIExpression(), !351)
    #dbg_declare(ptr %1, !353, !DIExpression(), !351)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !354
  %4 = load i64, ptr %ptradd, align 8, !dbg !354
  %lt = icmp ult i64 0, %4, !dbg !354
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !354

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 60), !dbg !354
  unreachable, !dbg !354

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !356, !DIExpression(), !358)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !358
  %6 = load i64, ptr %ptradd6, align 8, !dbg !358
  store i64 %6, ptr %len, align 8, !dbg !358
  br label %loop.cond, !dbg !359

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !360
  %lt7 = icmp ult i64 0, %7, !dbg !360
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !360

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !362, !DIExpression(), !364)
  %8 = load ptr, ptr %self, align 8, !dbg !365
  %9 = call i32 @std.math.random.Lcg64Random.next_int(ptr %8), !dbg !364
  store i32 %9, ptr %value, align 4, !dbg !364
  %10 = load i64, ptr %len, align 8, !dbg !366
  %le = icmp ule i64 %10, 4, !dbg !366
  br i1 %le, label %if.then, label %if.exit, !dbg !366

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !367
  %add = add i64 0, %12, !dbg !367
  %size = sub i64 %add, 0, !dbg !367
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !367
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !367
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !367
  %16 = extractvalue %"char[]" %15, 0, !dbg !367
  %17 = extractvalue %"char[]" %15, 1, !dbg !367
  %gt = icmp ugt i64 0, %17, !dbg !367
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !367
  br i1 %18, label %panic8, label %checkok16, !dbg !367

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !367
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !367
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !367
  %21 = extractvalue %"char[]" %20, 0, !dbg !367
  %22 = extractvalue %"char[]" %14, 0, !dbg !367
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !367
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !367
  br label %expr_block.exit, !dbg !369

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !370
  %31 = extractvalue %"char[]" %30, 0, !dbg !370
  %32 = extractvalue %"char[]" %30, 1, !dbg !370
  %gt34 = icmp sgt i64 0, %32, !dbg !370
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !370
  br i1 %33, label %panic35, label %checkok45, !dbg !370

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !370
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !370
  br i1 %34, label %panic47, label %checkok57, !dbg !370

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !370
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !370
  %37 = extractvalue %"char[]" %36, 0, !dbg !370
  %38 = extractvalue %"char[]" %29, 0, !dbg !370
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !370
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !370
  %43 = load i64, ptr %len, align 8, !dbg !371
  %sub = sub i64 %43, 4, !dbg !371
  store i64 %sub, ptr %len, align 8, !dbg !371
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !372
  %45 = extractvalue %"char[]" %44, 0, !dbg !372
  %46 = extractvalue %"char[]" %44, 1, !dbg !372
  %gt74 = icmp ugt i64 4, %46, !dbg !372
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !372
  br i1 %47, label %panic75, label %checkok85, !dbg !372

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !372
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !372
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !372
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !372
  store %"char[]" %49, ptr %bytes, align 8, !dbg !372
  br label %loop.cond, !dbg !372

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.31, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.32, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.33, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 62, ptr align 8 %indirectarg91), !dbg !373
  unreachable, !dbg !376

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !376

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 62), !dbg !351
  unreachable, !dbg !351

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !367
  unreachable, !dbg !367

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !367
  unreachable, !dbg !367

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !370
  unreachable, !dbg !370

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !370
  unreachable, !dbg !370

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !370
  unreachable, !dbg !370

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !372
  unreachable, !dbg !372
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg64Random.next_int128(ptr %0) #0 comdat !dbg !377 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !380
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !380
  br i1 %2, label %panic, label %checkok, !dbg !380

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !381, !DIExpression(), !380)
  %3 = load ptr, ptr %self, align 8, !dbg !382
  %4 = call i64 @std.math.random.Lcg64Random.next_long(ptr %3), !dbg !384
  %zext = zext i64 %4 to i128, !dbg !384
  %shl = shl i128 %zext, 64, !dbg !384
  %5 = freeze i128 %shl, !dbg !384
  %6 = load ptr, ptr %self, align 8, !dbg !382
  %7 = call i64 @std.math.random.Lcg64Random.next_long(ptr %6), !dbg !384
  %zext3 = zext i64 %7 to i128, !dbg !384
  %add = add i128 %5, %zext3, !dbg !384
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 63), !dbg !380
  unreachable, !dbg !380
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg64Random.next_long(ptr %0) #0 comdat !dbg !385 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !388
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !388
  br i1 %2, label %panic, label %checkok, !dbg !388

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !389, !DIExpression(), !388)
  %3 = load ptr, ptr %self, align 8, !dbg !390
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !392
  %zext = zext i32 %4 to i64, !dbg !392
  %shl = shl i64 %zext, 32, !dbg !392
  %5 = freeze i64 %shl, !dbg !392
  %6 = load ptr, ptr %self, align 8, !dbg !390
  %7 = call i32 @std.math.random.Lcg64Random.next_int(ptr %6), !dbg !392
  %zext3 = zext i32 %7 to i64, !dbg !392
  %add = add i64 %5, %zext3, !dbg !392
  ret i64 %add, !dbg !392

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 64), !dbg !388
  unreachable, !dbg !388
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg64Random.next_short(ptr %0) #0 comdat !dbg !393 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !396
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !396
  br i1 %2, label %panic, label %checkok, !dbg !396

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !397, !DIExpression(), !396)
  %3 = load ptr, ptr %self, align 8, !dbg !396
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !396
  %trunc = trunc i32 %4 to i16, !dbg !396
  ret i16 %trunc, !dbg !396

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65), !dbg !396
  unreachable, !dbg !396
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg64Random.next_byte(ptr %0) #0 comdat !dbg !398 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !401
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !401
  br i1 %2, label %panic, label %checkok, !dbg !401

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !402, !DIExpression(), !401)
  %3 = load ptr, ptr %self, align 8, !dbg !401
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !401
  %trunc = trunc i32 %4 to i8, !dbg !401
  ret i8 %trunc, !dbg !401

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66), !dbg !401
  unreachable, !dbg !401
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !403 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !408
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !408
  br i1 %3, label %panic, label %checkok, !dbg !408

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !409, !DIExpression(), !410)
    #dbg_declare(ptr %1, !411, !DIExpression(), !410)
  %4 = load ptr, ptr %self, align 8, !dbg !412
  %checknull = icmp eq ptr %4, null, !dbg !412
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !412
  br i1 %5, label %panic3, label %checkok7, !dbg !412

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !413, !DIExpression(), !415)
  store i32 0, ptr %return_value, align 4, !dbg !415
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !416
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !418
  %10 = load i32, ptr %return_value, align 4, !dbg !419
  store i32 %10, ptr %4, align 4, !dbg !419
  ret void, !dbg !419

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 72), !dbg !410
  unreachable, !dbg !410

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 74), !dbg !412
  unreachable, !dbg !412
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg32Random.next_short(ptr %0) #0 comdat !dbg !420 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !423
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !423
  br i1 %2, label %panic, label %checkok, !dbg !423

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !424, !DIExpression(), !425)
    #dbg_declare(ptr %s, !426, !DIExpression(), !428)
  %3 = load ptr, ptr %self, align 8, !dbg !428
  store ptr %3, ptr %s, align 8, !dbg !428
    #dbg_declare(ptr %result, !429, !DIExpression(), !430)
  %4 = load ptr, ptr %s, align 8, !dbg !430
  %checknull = icmp eq ptr %4, null, !dbg !430
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !430
  br i1 %5, label %panic3, label %checkok7, !dbg !430

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !430
  %lshr = lshr i32 %6, 16, !dbg !430
  %7 = freeze i32 %lshr, !dbg !430
  %trunc = trunc i32 %7 to i16, !dbg !430
  store i16 %trunc, ptr %result, align 2, !dbg !430
  %8 = load ptr, ptr %s, align 8, !dbg !431
  %checknull8 = icmp eq ptr %8, null, !dbg !431
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !431
  br i1 %9, label %panic9, label %checkok13, !dbg !431

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !431
  %checknull14 = icmp eq ptr %10, null, !dbg !431
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !431
  br i1 %11, label %panic15, label %checkok19, !dbg !431

checkok19:                                        ; preds = %checkok13
  %12 = load i32, ptr %10, align 4, !dbg !431
  %mul = mul i32 %12, -1856014347, !dbg !431
  %add = add i32 %mul, -1640531527, !dbg !431
  store i32 %add, ptr %8, align 4, !dbg !431
  %13 = load i16, ptr %result, align 2, !dbg !432
  ret i16 %13, !dbg !432

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 77), !dbg !425
  unreachable, !dbg !425

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 80), !dbg !430
  unreachable, !dbg !430

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 81), !dbg !431
  unreachable, !dbg !431

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 81), !dbg !431
  unreachable, !dbg !431
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !433 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !434
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !434
  br i1 %3, label %panic, label %checkok, !dbg !434

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !435, !DIExpression(), !434)
    #dbg_declare(ptr %1, !436, !DIExpression(), !434)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !437, !DIExpression(), !439)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !439
  %4 = load i64, ptr %ptradd, align 8, !dbg !439
  store i64 %4, ptr %len, align 8, !dbg !439
  br label %loop.cond, !dbg !440

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !441
  %lt = icmp ult i64 0, %5, !dbg !441
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !441

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !443, !DIExpression(), !445)
  %6 = load ptr, ptr %self, align 8, !dbg !446
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !445
  store i16 %7, ptr %value, align 2, !dbg !445
  %8 = load i64, ptr %len, align 8, !dbg !447
  %le = icmp ule i64 %8, 2, !dbg !447
  br i1 %le, label %if.then, label %if.exit, !dbg !447

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !448
  %add = add i64 0, %10, !dbg !448
  %size = sub i64 %add, 0, !dbg !448
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !448
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !448
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !448
  %14 = extractvalue %"char[]" %13, 0, !dbg !448
  %15 = extractvalue %"char[]" %13, 1, !dbg !448
  %gt = icmp ugt i64 0, %15, !dbg !448
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !448
  br i1 %16, label %panic3, label %checkok11, !dbg !448

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !448
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !448
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !448
  %19 = extractvalue %"char[]" %18, 0, !dbg !448
  %20 = extractvalue %"char[]" %12, 0, !dbg !448
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !448
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !448
  br label %expr_block.exit, !dbg !450

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 2, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !451
  %29 = extractvalue %"char[]" %28, 0, !dbg !451
  %30 = extractvalue %"char[]" %28, 1, !dbg !451
  %gt29 = icmp sgt i64 0, %30, !dbg !451
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !451
  br i1 %31, label %panic30, label %checkok40, !dbg !451

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 2, !dbg !451
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !451
  br i1 %32, label %panic42, label %checkok52, !dbg !451

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !451
  %34 = insertvalue %"char[]" %33, i64 2, 1, !dbg !451
  %35 = extractvalue %"char[]" %34, 0, !dbg !451
  %36 = extractvalue %"char[]" %27, 0, !dbg !451
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !451
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !451
  %41 = load i64, ptr %len, align 8, !dbg !452
  %sub = sub i64 %41, 2, !dbg !452
  store i64 %sub, ptr %len, align 8, !dbg !452
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !453
  %43 = extractvalue %"char[]" %42, 0, !dbg !453
  %44 = extractvalue %"char[]" %42, 1, !dbg !453
  %gt69 = icmp ugt i64 2, %44, !dbg !453
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !453
  br i1 %45, label %panic70, label %checkok80, !dbg !453

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 2, !dbg !453
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 2, !dbg !453
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !453
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !453
  store %"char[]" %47, ptr %bytes, align 8, !dbg !453
  br label %loop.cond, !dbg !453

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.34, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.35, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.36, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 85, ptr align 8 %indirectarg86), !dbg !454
  unreachable, !dbg !457

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !457

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 85), !dbg !434
  unreachable, !dbg !434

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !448
  unreachable, !dbg !448

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !448
  unreachable, !dbg !448

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !451
  unreachable, !dbg !451

panic42:                                          ; preds = %checkok40
  store i64 1, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !451
  unreachable, !dbg !451

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !451
  unreachable, !dbg !451

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !453
  unreachable, !dbg !453
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg32Random.next_int128(ptr %0) #0 comdat !dbg !458 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !461
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !461
  br i1 %2, label %panic, label %checkok, !dbg !461

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !462, !DIExpression(), !461)
  %3 = load ptr, ptr %self, align 8, !dbg !463
  %4 = call i64 @std.math.random.Lcg32Random.next_long(ptr %3), !dbg !465
  %zext = zext i64 %4 to i128, !dbg !465
  %shl = shl i128 %zext, 64, !dbg !465
  %5 = freeze i128 %shl, !dbg !465
  %6 = load ptr, ptr %self, align 8, !dbg !463
  %7 = call i64 @std.math.random.Lcg32Random.next_long(ptr %6), !dbg !465
  %zext3 = zext i64 %7 to i128, !dbg !465
  %add = add i128 %5, %zext3, !dbg !465
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 86), !dbg !461
  unreachable, !dbg !461
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg32Random.next_long(ptr %0) #0 comdat !dbg !466 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !469
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !469
  br i1 %2, label %panic, label %checkok, !dbg !469

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !470, !DIExpression(), !469)
  %3 = load ptr, ptr %self, align 8, !dbg !471
  %4 = call i32 @std.math.random.Lcg32Random.next_int(ptr %3), !dbg !473
  %zext = zext i32 %4 to i64, !dbg !473
  %shl = shl i64 %zext, 32, !dbg !473
  %5 = freeze i64 %shl, !dbg !473
  %6 = load ptr, ptr %self, align 8, !dbg !471
  %7 = call i32 @std.math.random.Lcg32Random.next_int(ptr %6), !dbg !473
  %zext3 = zext i32 %7 to i64, !dbg !473
  %add = add i64 %5, %zext3, !dbg !473
  ret i64 %add, !dbg !473

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 87), !dbg !469
  unreachable, !dbg !469
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg32Random.next_int(ptr %0) #0 comdat !dbg !474 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !477
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !477
  br i1 %2, label %panic, label %checkok, !dbg !477

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !478, !DIExpression(), !477)
  %3 = load ptr, ptr %self, align 8, !dbg !479
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !481
  %zext = zext i16 %4 to i32, !dbg !481
  %shl = shl i32 %zext, 16, !dbg !481
  %5 = freeze i32 %shl, !dbg !481
  %6 = load ptr, ptr %self, align 8, !dbg !479
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !481
  %zext3 = zext i16 %7 to i32, !dbg !481
  %add = add i32 %5, %zext3, !dbg !481
  ret i32 %add, !dbg !481

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 88), !dbg !477
  unreachable, !dbg !477
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg32Random.next_byte(ptr %0) #0 comdat !dbg !482 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !485
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !485
  br i1 %2, label %panic, label %checkok, !dbg !485

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !486, !DIExpression(), !485)
  %3 = load ptr, ptr %self, align 8, !dbg !485
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !485
  %trunc = trunc i16 %4 to i8, !dbg !485
  ret i8 %trunc, !dbg !485

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 89), !dbg !485
  unreachable, !dbg !485
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !487 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !492
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !492
  br i1 %3, label %panic, label %checkok, !dbg !492

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !493, !DIExpression(), !494)
    #dbg_declare(ptr %1, !495, !DIExpression(), !494)
  %4 = load ptr, ptr %self, align 8, !dbg !496
  %checknull = icmp eq ptr %4, null, !dbg !496
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !496
  br i1 %5, label %panic3, label %checkok7, !dbg !496

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !497, !DIExpression(), !499)
  store i16 0, ptr %return_value, align 2, !dbg !499
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !500
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !502
  %10 = load i16, ptr %return_value, align 2, !dbg !503
  store i16 %10, ptr %4, align 2, !dbg !503
  ret void, !dbg !503

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95), !dbg !494
  unreachable, !dbg !494

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 97), !dbg !496
  unreachable, !dbg !496
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Lcg16Random.next_byte(ptr %0) #0 comdat !dbg !504 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !507
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !507
  br i1 %2, label %panic, label %checkok, !dbg !507

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !508, !DIExpression(), !509)
    #dbg_declare(ptr %s, !510, !DIExpression(), !512)
  %3 = load ptr, ptr %self, align 8, !dbg !512
  store ptr %3, ptr %s, align 8, !dbg !512
    #dbg_declare(ptr %result, !513, !DIExpression(), !514)
  %4 = load ptr, ptr %s, align 8, !dbg !514
  %checknull = icmp eq ptr %4, null, !dbg !514
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !514
  br i1 %5, label %panic3, label %checkok7, !dbg !514

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !514
  %zext = zext i16 %6 to i32, !dbg !514
  %lshr = lshr i32 %zext, 8, !dbg !514
  %7 = freeze i32 %lshr, !dbg !514
  %trunc = trunc i32 %7 to i8, !dbg !514
  store i8 %trunc, ptr %result, align 1, !dbg !514
  %8 = load ptr, ptr %s, align 8, !dbg !515
  %checknull8 = icmp eq ptr %8, null, !dbg !515
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !515
  br i1 %9, label %panic9, label %checkok13, !dbg !515

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !515
  %checknull14 = icmp eq ptr %10, null, !dbg !515
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !515
  br i1 %11, label %panic15, label %checkok19, !dbg !515

checkok19:                                        ; preds = %checkok13
  %12 = load i16, ptr %10, align 2, !dbg !515
  %zext20 = zext i16 %12 to i32, !dbg !515
  %mul = mul i32 %zext20, 37213, !dbg !515
  %add = add i32 %mul, 40503, !dbg !515
  %trunc21 = trunc i32 %add to i16, !dbg !515
  store i16 %trunc21, ptr %8, align 2, !dbg !515
  %13 = load i8, ptr %result, align 1, !dbg !516
  ret i8 %13, !dbg !516

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 100), !dbg !509
  unreachable, !dbg !509

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 103), !dbg !514
  unreachable, !dbg !514

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 104), !dbg !515
  unreachable, !dbg !515

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg16, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg18, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17(ptr align 8 %indirectarg16, ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, i32 104), !dbg !515
  unreachable, !dbg !515
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Lcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !517 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !518
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !518
  br i1 %3, label %panic, label %checkok, !dbg !518

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !519, !DIExpression(), !518)
    #dbg_declare(ptr %1, !520, !DIExpression(), !518)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !521, !DIExpression(), !523)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !523
  %4 = load i64, ptr %ptradd, align 8, !dbg !523
  store i64 %4, ptr %len, align 8, !dbg !523
  br label %loop.cond, !dbg !524

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !525
  %lt = icmp ult i64 0, %5, !dbg !525
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !525

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !527, !DIExpression(), !529)
  %6 = load ptr, ptr %self, align 8, !dbg !530
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !529
  store i8 %7, ptr %value, align 1, !dbg !529
  %8 = load i64, ptr %len, align 8, !dbg !531
  %le = icmp ule i64 %8, 1, !dbg !531
  br i1 %le, label %if.then, label %if.exit, !dbg !531

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !532
  %add = add i64 0, %10, !dbg !532
  %size = sub i64 %add, 0, !dbg !532
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !532
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !532
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !532
  %14 = extractvalue %"char[]" %13, 0, !dbg !532
  %15 = extractvalue %"char[]" %13, 1, !dbg !532
  %gt = icmp ugt i64 0, %15, !dbg !532
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !532
  br i1 %16, label %panic3, label %checkok11, !dbg !532

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !532
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !532
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !532
  %19 = extractvalue %"char[]" %18, 0, !dbg !532
  %20 = extractvalue %"char[]" %12, 0, !dbg !532
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !532
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !532
  br label %expr_block.exit, !dbg !534

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !535
  %29 = extractvalue %"char[]" %28, 0, !dbg !535
  %30 = extractvalue %"char[]" %28, 1, !dbg !535
  %gt29 = icmp sgt i64 0, %30, !dbg !535
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !535
  br i1 %31, label %panic30, label %checkok40, !dbg !535

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !535
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !535
  br i1 %32, label %panic42, label %checkok52, !dbg !535

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !535
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !535
  %35 = extractvalue %"char[]" %34, 0, !dbg !535
  %36 = extractvalue %"char[]" %27, 0, !dbg !535
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !535
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !535
  %41 = load i64, ptr %len, align 8, !dbg !536
  %sub = sub i64 %41, 1, !dbg !536
  store i64 %sub, ptr %len, align 8, !dbg !536
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !537
  %43 = extractvalue %"char[]" %42, 0, !dbg !537
  %44 = extractvalue %"char[]" %42, 1, !dbg !537
  %gt69 = icmp ugt i64 1, %44, !dbg !537
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !537
  br i1 %45, label %panic70, label %checkok80, !dbg !537

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !537
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !537
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !537
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !537
  store %"char[]" %47, ptr %bytes, align 8, !dbg !537
  br label %loop.cond, !dbg !537

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.37, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.38, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.39, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 108, ptr align 8 %indirectarg86), !dbg !538
  unreachable, !dbg !541

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !541

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 108), !dbg !518
  unreachable, !dbg !518

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !532
  unreachable, !dbg !532

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !532
  unreachable, !dbg !532

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !535
  unreachable, !dbg !535

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !535
  unreachable, !dbg !535

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !535
  unreachable, !dbg !535

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !537
  unreachable, !dbg !537
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Lcg16Random.next_int128(ptr %0) #0 comdat !dbg !542 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !545
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !545
  br i1 %2, label %panic, label %checkok, !dbg !545

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !546, !DIExpression(), !545)
  %3 = load ptr, ptr %self, align 8, !dbg !547
  %4 = call i64 @std.math.random.Lcg16Random.next_long(ptr %3), !dbg !549
  %zext = zext i64 %4 to i128, !dbg !549
  %shl = shl i128 %zext, 64, !dbg !549
  %5 = freeze i128 %shl, !dbg !549
  %6 = load ptr, ptr %self, align 8, !dbg !547
  %7 = call i64 @std.math.random.Lcg16Random.next_long(ptr %6), !dbg !549
  %zext3 = zext i64 %7 to i128, !dbg !549
  %add = add i128 %5, %zext3, !dbg !549
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 109), !dbg !545
  unreachable, !dbg !545
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Lcg16Random.next_long(ptr %0) #0 comdat !dbg !550 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !553
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !553
  br i1 %2, label %panic, label %checkok, !dbg !553

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !554, !DIExpression(), !553)
  %3 = load ptr, ptr %self, align 8, !dbg !555
  %4 = call i32 @std.math.random.Lcg16Random.next_int(ptr %3), !dbg !557
  %zext = zext i32 %4 to i64, !dbg !557
  %shl = shl i64 %zext, 32, !dbg !557
  %5 = freeze i64 %shl, !dbg !557
  %6 = load ptr, ptr %self, align 8, !dbg !555
  %7 = call i32 @std.math.random.Lcg16Random.next_int(ptr %6), !dbg !557
  %zext3 = zext i32 %7 to i64, !dbg !557
  %add = add i64 %5, %zext3, !dbg !557
  ret i64 %add, !dbg !557

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 110), !dbg !553
  unreachable, !dbg !553
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Lcg16Random.next_int(ptr %0) #0 comdat !dbg !558 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !561
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !561
  br i1 %2, label %panic, label %checkok, !dbg !561

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !562, !DIExpression(), !561)
  %3 = load ptr, ptr %self, align 8, !dbg !563
  %4 = call i16 @std.math.random.Lcg16Random.next_short(ptr %3), !dbg !565
  %zext = zext i16 %4 to i32, !dbg !565
  %shl = shl i32 %zext, 16, !dbg !565
  %5 = freeze i32 %shl, !dbg !565
  %6 = load ptr, ptr %self, align 8, !dbg !563
  %7 = call i16 @std.math.random.Lcg16Random.next_short(ptr %6), !dbg !565
  %zext3 = zext i16 %7 to i32, !dbg !565
  %add = add i32 %5, %zext3, !dbg !565
  ret i32 %add, !dbg !565

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 111), !dbg !561
  unreachable, !dbg !561
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Lcg16Random.next_short(ptr %0) #0 comdat !dbg !566 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !569
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !569
  br i1 %2, label %panic, label %checkok, !dbg !569

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !570, !DIExpression(), !569)
  %3 = load ptr, ptr %self, align 8, !dbg !571
  %4 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %3), !dbg !573
  %zext = zext i8 %4 to i16, !dbg !573
  %zext3 = zext i16 %zext to i32, !dbg !573
  %shl = shl i32 %zext3, 8, !dbg !573
  %5 = freeze i32 %shl, !dbg !573
  %6 = load ptr, ptr %self, align 8, !dbg !571
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !573
  %zext4 = zext i8 %7 to i32, !dbg !573
  %add = add i32 %5, %zext4, !dbg !573
  %trunc = trunc i32 %add to i16, !dbg !573
  ret i16 %trunc, !dbg !573

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.15, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 112), !dbg !569
  unreachable, !dbg !569
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !574 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !579
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !579
  br i1 %3, label %panic, label %checkok, !dbg !579

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !580, !DIExpression(), !581)
    #dbg_declare(ptr %1, !582, !DIExpression(), !581)
  %4 = load ptr, ptr %self, align 8, !dbg !583
  %checknull = icmp eq ptr %4, null, !dbg !583
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !583
  br i1 %5, label %panic3, label %checkok7, !dbg !583

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !584, !DIExpression(), !586)
  store i128 0, ptr %return_value, align 16, !dbg !586
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !587
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !589
  %10 = load i128, ptr %return_value, align 16, !dbg !590
  %or = or i128 %10, 1, !dbg !583
  store i128 %or, ptr %4, align 16, !dbg !583
  ret void, !dbg !583

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 12), !dbg !581
  unreachable, !dbg !581

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 14), !dbg !583
  unreachable, !dbg !583
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !591 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !592
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !592
  br i1 %3, label %panic, label %checkok, !dbg !592

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !593, !DIExpression(), !594)
    #dbg_declare(ptr %1, !595, !DIExpression(), !594)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !596
  %4 = load i64, ptr %ptradd, align 8, !dbg !596
  %lt = icmp ult i64 0, %4, !dbg !596
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !596

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 18), !dbg !596
  unreachable, !dbg !596

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !598, !DIExpression(), !600)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !600
  %6 = load i64, ptr %ptradd6, align 8, !dbg !600
  store i64 %6, ptr %len, align 8, !dbg !600
  br label %loop.cond, !dbg !602

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !603
  %lt7 = icmp ult i64 0, %7, !dbg !603
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !603

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !605, !DIExpression(), !607)
  %8 = load ptr, ptr %self, align 8, !dbg !608
  %9 = call i64 @std.math.random.Mcg128Random.next_long(ptr %8), !dbg !607
  store i64 %9, ptr %value, align 8, !dbg !607
  %10 = load i64, ptr %len, align 8, !dbg !609
  %le = icmp ule i64 %10, 8, !dbg !609
  br i1 %le, label %if.then, label %if.exit, !dbg !609

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !610
  %add = add i64 0, %12, !dbg !610
  %size = sub i64 %add, 0, !dbg !610
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !610
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !610
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !610
  %16 = extractvalue %"char[]" %15, 0, !dbg !610
  %17 = extractvalue %"char[]" %15, 1, !dbg !610
  %gt = icmp ugt i64 0, %17, !dbg !610
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !610
  br i1 %18, label %panic8, label %checkok16, !dbg !610

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !610
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !610
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !610
  %21 = extractvalue %"char[]" %20, 0, !dbg !610
  %22 = extractvalue %"char[]" %14, 0, !dbg !610
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !610
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !610
  br label %expr_block.exit, !dbg !612

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !613
  %31 = extractvalue %"char[]" %30, 0, !dbg !613
  %32 = extractvalue %"char[]" %30, 1, !dbg !613
  %gt34 = icmp sgt i64 0, %32, !dbg !613
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !613
  br i1 %33, label %panic35, label %checkok45, !dbg !613

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !613
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !613
  br i1 %34, label %panic47, label %checkok57, !dbg !613

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !613
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !613
  %37 = extractvalue %"char[]" %36, 0, !dbg !613
  %38 = extractvalue %"char[]" %29, 0, !dbg !613
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !613
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !613
  %43 = load i64, ptr %len, align 8, !dbg !614
  %sub = sub i64 %43, 8, !dbg !614
  store i64 %sub, ptr %len, align 8, !dbg !614
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !615
  %45 = extractvalue %"char[]" %44, 0, !dbg !615
  %46 = extractvalue %"char[]" %44, 1, !dbg !615
  %gt74 = icmp ugt i64 8, %46, !dbg !615
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !615
  br i1 %47, label %panic75, label %checkok85, !dbg !615

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !615
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !615
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !615
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !615
  store %"char[]" %49, ptr %bytes, align 8, !dbg !615
  br label %loop.cond, !dbg !615

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.44, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.45, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.46, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 22, ptr align 8 %indirectarg91), !dbg !616
  unreachable, !dbg !619

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !619

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20), !dbg !594
  unreachable, !dbg !594

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !610
  unreachable, !dbg !610

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !610
  unreachable, !dbg !610

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !613
  unreachable, !dbg !613

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !613
  unreachable, !dbg !613

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !613
  unreachable, !dbg !613

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !615
  unreachable, !dbg !615
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg128Random.next_long(ptr %0) #0 comdat !dbg !620 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !623
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !623
  br i1 %2, label %panic, label %checkok, !dbg !623

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !624, !DIExpression(), !625)
    #dbg_declare(ptr %s, !626, !DIExpression(), !627)
  %3 = load ptr, ptr %self, align 8, !dbg !627
  store ptr %3, ptr %s, align 8, !dbg !627
    #dbg_declare(ptr %result, !628, !DIExpression(), !629)
  %4 = load ptr, ptr %s, align 8, !dbg !629
  %checknull = icmp eq ptr %4, null, !dbg !629
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !629
  br i1 %5, label %panic3, label %checkok7, !dbg !629

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !629
  %lshr = lshr i128 %6, 64, !dbg !629
  %7 = freeze i128 %lshr, !dbg !629
  %trunc = trunc i128 %7 to i64, !dbg !629
  store i64 %trunc, ptr %result, align 8, !dbg !629
  %8 = load ptr, ptr %s, align 8, !dbg !630
  %checknull8 = icmp eq ptr %8, null, !dbg !630
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !630
  br i1 %9, label %panic9, label %checkok13, !dbg !630

checkok13:                                        ; preds = %checkok7
  %10 = load i128, ptr %8, align 16, !dbg !630
  %mul = mul i128 %10, -129976298391535590297638237547755878347, !dbg !630
  store i128 %mul, ptr %8, align 16, !dbg !630
  %11 = load i64, ptr %result, align 8, !dbg !631
  ret i64 %11, !dbg !631

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 25), !dbg !625
  unreachable, !dbg !625

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 28), !dbg !629
  unreachable, !dbg !629

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 29), !dbg !630
  unreachable, !dbg !630
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg128Random.next_int128(ptr %0) #0 comdat !dbg !632 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !635
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !635
  br i1 %2, label %panic, label %checkok, !dbg !635

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !636, !DIExpression(), !635)
  %3 = load ptr, ptr %self, align 8, !dbg !637
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !639
  %zext = zext i64 %4 to i128, !dbg !639
  %shl = shl i128 %zext, 64, !dbg !639
  %5 = freeze i128 %shl, !dbg !639
  %6 = load ptr, ptr %self, align 8, !dbg !637
  %7 = call i64 @std.math.random.Mcg128Random.next_long(ptr %6), !dbg !639
  %zext3 = zext i64 %7 to i128, !dbg !639
  %add = add i128 %5, %zext3, !dbg !639
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 33), !dbg !635
  unreachable, !dbg !635
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg128Random.next_int(ptr %0) #0 comdat !dbg !640 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !643
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !643
  br i1 %2, label %panic, label %checkok, !dbg !643

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !644, !DIExpression(), !643)
  %3 = load ptr, ptr %self, align 8, !dbg !643
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !643
  %trunc = trunc i64 %4 to i32, !dbg !643
  ret i32 %trunc, !dbg !643

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34), !dbg !643
  unreachable, !dbg !643
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg128Random.next_short(ptr %0) #0 comdat !dbg !645 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !648
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !648
  br i1 %2, label %panic, label %checkok, !dbg !648

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !649, !DIExpression(), !648)
  %3 = load ptr, ptr %self, align 8, !dbg !648
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !648
  %trunc = trunc i64 %4 to i16, !dbg !648
  ret i16 %trunc, !dbg !648

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35), !dbg !648
  unreachable, !dbg !648
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg128Random.next_byte(ptr %0) #0 comdat !dbg !650 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !653
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !653
  br i1 %2, label %panic, label %checkok, !dbg !653

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !654, !DIExpression(), !653)
  %3 = load ptr, ptr %self, align 8, !dbg !653
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !653
  %trunc = trunc i64 %4 to i8, !dbg !653
  ret i8 %trunc, !dbg !653

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !653
  unreachable, !dbg !653
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !655 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !660
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !660
  br i1 %3, label %panic, label %checkok, !dbg !660

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !661, !DIExpression(), !662)
    #dbg_declare(ptr %1, !663, !DIExpression(), !662)
  %4 = load ptr, ptr %self, align 8, !dbg !664
  %checknull = icmp eq ptr %4, null, !dbg !664
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !664
  br i1 %5, label %panic3, label %checkok7, !dbg !664

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !665, !DIExpression(), !667)
  store i64 0, ptr %return_value, align 8, !dbg !667
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !668
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !670
  %10 = load i64, ptr %return_value, align 8, !dbg !671
  %or = or i64 %10, 1, !dbg !664
  store i64 %or, ptr %4, align 8, !dbg !664
  ret void, !dbg !664

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !662
  unreachable, !dbg !662

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 47), !dbg !664
  unreachable, !dbg !664
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !672 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !673
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !673
  br i1 %3, label %panic, label %checkok, !dbg !673

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !674, !DIExpression(), !675)
    #dbg_declare(ptr %1, !676, !DIExpression(), !675)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !677
  %4 = load i64, ptr %ptradd, align 8, !dbg !677
  %lt = icmp ult i64 0, %4, !dbg !677
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !677

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 51), !dbg !677
  unreachable, !dbg !677

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !679, !DIExpression(), !681)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !681
  %6 = load i64, ptr %ptradd6, align 8, !dbg !681
  store i64 %6, ptr %len, align 8, !dbg !681
  br label %loop.cond, !dbg !683

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !684
  %lt7 = icmp ult i64 0, %7, !dbg !684
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !684

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !686, !DIExpression(), !688)
  %8 = load ptr, ptr %self, align 8, !dbg !689
  %9 = call i32 @std.math.random.Mcg64Random.next_int(ptr %8), !dbg !688
  store i32 %9, ptr %value, align 4, !dbg !688
  %10 = load i64, ptr %len, align 8, !dbg !690
  %le = icmp ule i64 %10, 4, !dbg !690
  br i1 %le, label %if.then, label %if.exit, !dbg !690

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !691
  %add = add i64 0, %12, !dbg !691
  %size = sub i64 %add, 0, !dbg !691
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !691
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !691
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !691
  %16 = extractvalue %"char[]" %15, 0, !dbg !691
  %17 = extractvalue %"char[]" %15, 1, !dbg !691
  %gt = icmp ugt i64 0, %17, !dbg !691
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !691
  br i1 %18, label %panic8, label %checkok16, !dbg !691

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !691
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !691
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !691
  %21 = extractvalue %"char[]" %20, 0, !dbg !691
  %22 = extractvalue %"char[]" %14, 0, !dbg !691
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !691
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !691
  br label %expr_block.exit, !dbg !693

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !694
  %31 = extractvalue %"char[]" %30, 0, !dbg !694
  %32 = extractvalue %"char[]" %30, 1, !dbg !694
  %gt34 = icmp sgt i64 0, %32, !dbg !694
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !694
  br i1 %33, label %panic35, label %checkok45, !dbg !694

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !694
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !694
  br i1 %34, label %panic47, label %checkok57, !dbg !694

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !694
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !694
  %37 = extractvalue %"char[]" %36, 0, !dbg !694
  %38 = extractvalue %"char[]" %29, 0, !dbg !694
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !694
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !694
  %43 = load i64, ptr %len, align 8, !dbg !695
  %sub = sub i64 %43, 4, !dbg !695
  store i64 %sub, ptr %len, align 8, !dbg !695
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !696
  %45 = extractvalue %"char[]" %44, 0, !dbg !696
  %46 = extractvalue %"char[]" %44, 1, !dbg !696
  %gt74 = icmp ugt i64 4, %46, !dbg !696
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !696
  br i1 %47, label %panic75, label %checkok85, !dbg !696

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !696
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !696
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !696
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !696
  store %"char[]" %49, ptr %bytes, align 8, !dbg !696
  br label %loop.cond, !dbg !696

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.47, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.48, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.49, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 55, ptr align 8 %indirectarg91), !dbg !697
  unreachable, !dbg !700

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !700

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 53), !dbg !675
  unreachable, !dbg !675

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !691
  unreachable, !dbg !691

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !691
  unreachable, !dbg !691

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !694
  unreachable, !dbg !694

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !694
  unreachable, !dbg !694

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !694
  unreachable, !dbg !694

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !696
  unreachable, !dbg !696
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg64Random.next_int(ptr %0) #0 comdat !dbg !701 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !704
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !704
  br i1 %2, label %panic, label %checkok, !dbg !704

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !705, !DIExpression(), !706)
    #dbg_declare(ptr %s, !707, !DIExpression(), !708)
  %3 = load ptr, ptr %self, align 8, !dbg !708
  store ptr %3, ptr %s, align 8, !dbg !708
    #dbg_declare(ptr %result, !709, !DIExpression(), !710)
  %4 = load ptr, ptr %s, align 8, !dbg !710
  %checknull = icmp eq ptr %4, null, !dbg !710
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !710
  br i1 %5, label %panic3, label %checkok7, !dbg !710

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !710
  %lshr = lshr i64 %6, 32, !dbg !710
  %7 = freeze i64 %lshr, !dbg !710
  %trunc = trunc i64 %7 to i32, !dbg !710
  store i32 %trunc, ptr %result, align 4, !dbg !710
  %8 = load ptr, ptr %s, align 8, !dbg !711
  %checknull8 = icmp eq ptr %8, null, !dbg !711
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !711
  br i1 %9, label %panic9, label %checkok13, !dbg !711

checkok13:                                        ; preds = %checkok7
  %10 = load i64, ptr %8, align 8, !dbg !711
  %mul = mul i64 %10, -1065810590584100411, !dbg !711
  store i64 %mul, ptr %8, align 8, !dbg !711
  %11 = load i32, ptr %result, align 4, !dbg !712
  ret i32 %11, !dbg !712

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 58), !dbg !706
  unreachable, !dbg !706

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 61), !dbg !710
  unreachable, !dbg !710

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 62), !dbg !711
  unreachable, !dbg !711
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg64Random.next_int128(ptr %0) #0 comdat !dbg !713 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !716
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !716
  br i1 %2, label %panic, label %checkok, !dbg !716

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !717, !DIExpression(), !716)
  %3 = load ptr, ptr %self, align 8, !dbg !718
  %4 = call i64 @std.math.random.Mcg64Random.next_long(ptr %3), !dbg !720
  %zext = zext i64 %4 to i128, !dbg !720
  %shl = shl i128 %zext, 64, !dbg !720
  %5 = freeze i128 %shl, !dbg !720
  %6 = load ptr, ptr %self, align 8, !dbg !718
  %7 = call i64 @std.math.random.Mcg64Random.next_long(ptr %6), !dbg !720
  %zext3 = zext i64 %7 to i128, !dbg !720
  %add = add i128 %5, %zext3, !dbg !720
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66), !dbg !716
  unreachable, !dbg !716
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg64Random.next_long(ptr %0) #0 comdat !dbg !721 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !724
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !724
  br i1 %2, label %panic, label %checkok, !dbg !724

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !725, !DIExpression(), !724)
  %3 = load ptr, ptr %self, align 8, !dbg !726
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !728
  %zext = zext i32 %4 to i64, !dbg !728
  %shl = shl i64 %zext, 32, !dbg !728
  %5 = freeze i64 %shl, !dbg !728
  %6 = load ptr, ptr %self, align 8, !dbg !726
  %7 = call i32 @std.math.random.Mcg64Random.next_int(ptr %6), !dbg !728
  %zext3 = zext i32 %7 to i64, !dbg !728
  %add = add i64 %5, %zext3, !dbg !728
  ret i64 %add, !dbg !728

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67), !dbg !724
  unreachable, !dbg !724
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg64Random.next_short(ptr %0) #0 comdat !dbg !729 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !732
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !732
  br i1 %2, label %panic, label %checkok, !dbg !732

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !733, !DIExpression(), !732)
  %3 = load ptr, ptr %self, align 8, !dbg !732
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !732
  %trunc = trunc i32 %4 to i16, !dbg !732
  ret i16 %trunc, !dbg !732

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68), !dbg !732
  unreachable, !dbg !732
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg64Random.next_byte(ptr %0) #0 comdat !dbg !734 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !737
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !737
  br i1 %2, label %panic, label %checkok, !dbg !737

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !738, !DIExpression(), !737)
  %3 = load ptr, ptr %self, align 8, !dbg !737
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !737
  %trunc = trunc i32 %4 to i8, !dbg !737
  ret i8 %trunc, !dbg !737

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69), !dbg !737
  unreachable, !dbg !737
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !739 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !744
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !744
  br i1 %3, label %panic, label %checkok, !dbg !744

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !745, !DIExpression(), !746)
    #dbg_declare(ptr %1, !747, !DIExpression(), !746)
  %4 = load ptr, ptr %self, align 8, !dbg !748
  %checknull = icmp eq ptr %4, null, !dbg !748
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !748
  br i1 %5, label %panic3, label %checkok7, !dbg !748

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !749, !DIExpression(), !751)
  store i32 0, ptr %return_value, align 4, !dbg !751
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !752
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !754
  %10 = load i32, ptr %return_value, align 4, !dbg !755
  %or = or i32 %10, 1, !dbg !748
  store i32 %or, ptr %4, align 4, !dbg !748
  ret void, !dbg !748

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 76), !dbg !746
  unreachable, !dbg !746

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 78), !dbg !748
  unreachable, !dbg !748
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg32Random.next_short(ptr %0) #0 comdat !dbg !756 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !759
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !759
  br i1 %2, label %panic, label %checkok, !dbg !759

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !760, !DIExpression(), !761)
    #dbg_declare(ptr %s, !762, !DIExpression(), !763)
  %3 = load ptr, ptr %self, align 8, !dbg !763
  store ptr %3, ptr %s, align 8, !dbg !763
    #dbg_declare(ptr %result, !764, !DIExpression(), !765)
  %4 = load ptr, ptr %s, align 8, !dbg !765
  %checknull = icmp eq ptr %4, null, !dbg !765
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !765
  br i1 %5, label %panic3, label %checkok7, !dbg !765

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !765
  %lshr = lshr i32 %6, 16, !dbg !765
  %7 = freeze i32 %lshr, !dbg !765
  %trunc = trunc i32 %7 to i16, !dbg !765
  store i16 %trunc, ptr %result, align 2, !dbg !765
  %8 = load ptr, ptr %s, align 8, !dbg !766
  %checknull8 = icmp eq ptr %8, null, !dbg !766
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !766
  br i1 %9, label %panic9, label %checkok13, !dbg !766

checkok13:                                        ; preds = %checkok7
  %10 = load i32, ptr %8, align 4, !dbg !766
  %mul = mul i32 %10, -1814600227, !dbg !766
  store i32 %mul, ptr %8, align 4, !dbg !766
  %11 = load i16, ptr %result, align 2, !dbg !767
  ret i16 %11, !dbg !767

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81), !dbg !761
  unreachable, !dbg !761

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 84), !dbg !765
  unreachable, !dbg !765

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 85), !dbg !766
  unreachable, !dbg !766
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !768 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !769
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !769
  br i1 %3, label %panic, label %checkok, !dbg !769

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !770, !DIExpression(), !769)
    #dbg_declare(ptr %1, !771, !DIExpression(), !769)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !772
  %4 = load i64, ptr %ptradd, align 8, !dbg !772
  %lt = icmp ult i64 0, %4, !dbg !772
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !772

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 90), !dbg !772
  unreachable, !dbg !772

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !774, !DIExpression(), !776)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !776
  %6 = load i64, ptr %ptradd6, align 8, !dbg !776
  store i64 %6, ptr %len, align 8, !dbg !776
  br label %loop.cond, !dbg !777

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !778
  %lt7 = icmp ult i64 0, %7, !dbg !778
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !778

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !780, !DIExpression(), !782)
  %8 = load ptr, ptr %self, align 8, !dbg !783
  %9 = call i16 @std.math.random.Mcg32Random.next_short(ptr %8), !dbg !782
  store i16 %9, ptr %value, align 2, !dbg !782
  %10 = load i64, ptr %len, align 8, !dbg !784
  %le = icmp ule i64 %10, 2, !dbg !784
  br i1 %le, label %if.then, label %if.exit, !dbg !784

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !785
  %add = add i64 0, %12, !dbg !785
  %size = sub i64 %add, 0, !dbg !785
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !785
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !785
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !785
  %16 = extractvalue %"char[]" %15, 0, !dbg !785
  %17 = extractvalue %"char[]" %15, 1, !dbg !785
  %gt = icmp ugt i64 0, %17, !dbg !785
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !785
  br i1 %18, label %panic8, label %checkok16, !dbg !785

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !785
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !785
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !785
  %21 = extractvalue %"char[]" %20, 0, !dbg !785
  %22 = extractvalue %"char[]" %14, 0, !dbg !785
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !785
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !785
  br label %expr_block.exit, !dbg !787

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !788
  %31 = extractvalue %"char[]" %30, 0, !dbg !788
  %32 = extractvalue %"char[]" %30, 1, !dbg !788
  %gt34 = icmp sgt i64 0, %32, !dbg !788
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !788
  br i1 %33, label %panic35, label %checkok45, !dbg !788

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !788
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !788
  br i1 %34, label %panic47, label %checkok57, !dbg !788

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !788
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !788
  %37 = extractvalue %"char[]" %36, 0, !dbg !788
  %38 = extractvalue %"char[]" %29, 0, !dbg !788
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !788
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !788
  %43 = load i64, ptr %len, align 8, !dbg !789
  %sub = sub i64 %43, 2, !dbg !789
  store i64 %sub, ptr %len, align 8, !dbg !789
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !790
  %45 = extractvalue %"char[]" %44, 0, !dbg !790
  %46 = extractvalue %"char[]" %44, 1, !dbg !790
  %gt74 = icmp ugt i64 2, %46, !dbg !790
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !790
  br i1 %47, label %panic75, label %checkok85, !dbg !790

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !790
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !790
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !790
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !790
  store %"char[]" %49, ptr %bytes, align 8, !dbg !790
  br label %loop.cond, !dbg !790

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.50, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.51, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.52, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 92, ptr align 8 %indirectarg91), !dbg !791
  unreachable, !dbg !794

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !794

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 92), !dbg !769
  unreachable, !dbg !769

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !785
  unreachable, !dbg !785

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !785
  unreachable, !dbg !785

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !788
  unreachable, !dbg !788

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !788
  unreachable, !dbg !788

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !788
  unreachable, !dbg !788

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !790
  unreachable, !dbg !790
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg32Random.next_int128(ptr %0) #0 comdat !dbg !795 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !798
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !798
  br i1 %2, label %panic, label %checkok, !dbg !798

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !799, !DIExpression(), !798)
  %3 = load ptr, ptr %self, align 8, !dbg !800
  %4 = call i64 @std.math.random.Mcg32Random.next_long(ptr %3), !dbg !802
  %zext = zext i64 %4 to i128, !dbg !802
  %shl = shl i128 %zext, 64, !dbg !802
  %5 = freeze i128 %shl, !dbg !802
  %6 = load ptr, ptr %self, align 8, !dbg !800
  %7 = call i64 @std.math.random.Mcg32Random.next_long(ptr %6), !dbg !802
  %zext3 = zext i64 %7 to i128, !dbg !802
  %add = add i128 %5, %zext3, !dbg !802
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93), !dbg !798
  unreachable, !dbg !798
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg32Random.next_long(ptr %0) #0 comdat !dbg !803 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !806
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !806
  br i1 %2, label %panic, label %checkok, !dbg !806

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !807, !DIExpression(), !806)
  %3 = load ptr, ptr %self, align 8, !dbg !808
  %4 = call i32 @std.math.random.Mcg32Random.next_int(ptr %3), !dbg !810
  %zext = zext i32 %4 to i64, !dbg !810
  %shl = shl i64 %zext, 32, !dbg !810
  %5 = freeze i64 %shl, !dbg !810
  %6 = load ptr, ptr %self, align 8, !dbg !808
  %7 = call i32 @std.math.random.Mcg32Random.next_int(ptr %6), !dbg !810
  %zext3 = zext i32 %7 to i64, !dbg !810
  %add = add i64 %5, %zext3, !dbg !810
  ret i64 %add, !dbg !810

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94), !dbg !806
  unreachable, !dbg !806
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg32Random.next_int(ptr %0) #0 comdat !dbg !811 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !814
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !814
  br i1 %2, label %panic, label %checkok, !dbg !814

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !815, !DIExpression(), !814)
  %3 = load ptr, ptr %self, align 8, !dbg !816
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !818
  %zext = zext i16 %4 to i32, !dbg !818
  %shl = shl i32 %zext, 16, !dbg !818
  %5 = freeze i32 %shl, !dbg !818
  %6 = load ptr, ptr %self, align 8, !dbg !816
  %7 = call i16 @std.math.random.Mcg32Random.next_short(ptr %6), !dbg !818
  %zext3 = zext i16 %7 to i32, !dbg !818
  %add = add i32 %5, %zext3, !dbg !818
  ret i32 %add, !dbg !818

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95), !dbg !814
  unreachable, !dbg !814
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg32Random.next_byte(ptr %0) #0 comdat !dbg !819 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !822
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !822
  br i1 %2, label %panic, label %checkok, !dbg !822

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !823, !DIExpression(), !822)
  %3 = load ptr, ptr %self, align 8, !dbg !822
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !822
  %trunc = trunc i16 %4 to i8, !dbg !822
  ret i8 %trunc, !dbg !822

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96), !dbg !822
  unreachable, !dbg !822
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !824 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !829
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !829
  br i1 %3, label %panic, label %checkok, !dbg !829

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !830, !DIExpression(), !831)
    #dbg_declare(ptr %1, !832, !DIExpression(), !831)
  %4 = load ptr, ptr %self, align 8, !dbg !833
  %checknull = icmp eq ptr %4, null, !dbg !833
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !833
  br i1 %5, label %panic3, label %checkok7, !dbg !833

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !834, !DIExpression(), !836)
  store i16 0, ptr %return_value, align 2, !dbg !836
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !837
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !839
  %10 = load i16, ptr %return_value, align 2, !dbg !840
  %or = or i16 %10, 1, !dbg !833
  store i16 %or, ptr %4, align 2, !dbg !833
  ret void, !dbg !833

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 102), !dbg !831
  unreachable, !dbg !831

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 104), !dbg !833
  unreachable, !dbg !833
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Mcg16Random.next_byte(ptr %0) #0 comdat !dbg !841 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !844
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !844
  br i1 %2, label %panic, label %checkok, !dbg !844

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !845, !DIExpression(), !846)
    #dbg_declare(ptr %s, !847, !DIExpression(), !848)
  %3 = load ptr, ptr %self, align 8, !dbg !848
  store ptr %3, ptr %s, align 8, !dbg !848
    #dbg_declare(ptr %result, !849, !DIExpression(), !850)
  %4 = load ptr, ptr %s, align 8, !dbg !850
  %checknull = icmp eq ptr %4, null, !dbg !850
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !850
  br i1 %5, label %panic3, label %checkok7, !dbg !850

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !850
  %zext = zext i16 %6 to i32, !dbg !850
  %lshr = lshr i32 %zext, 8, !dbg !850
  %7 = freeze i32 %lshr, !dbg !850
  %trunc = trunc i32 %7 to i8, !dbg !850
  store i8 %trunc, ptr %result, align 1, !dbg !850
  %8 = load ptr, ptr %s, align 8, !dbg !851
  %checknull8 = icmp eq ptr %8, null, !dbg !851
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !851
  br i1 %9, label %panic9, label %checkok13, !dbg !851

checkok13:                                        ; preds = %checkok7
  %10 = load i16, ptr %8, align 2, !dbg !851
  %mul = mul i16 %10, -27691, !dbg !851
  store i16 %mul, ptr %8, align 2, !dbg !851
  %11 = load i8, ptr %result, align 1, !dbg !852
  ret i8 %11, !dbg !852

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 107), !dbg !846
  unreachable, !dbg !846

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 110), !dbg !850
  unreachable, !dbg !850

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg12, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 111), !dbg !851
  unreachable, !dbg !851
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Mcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !853 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !854
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !854
  br i1 %3, label %panic, label %checkok, !dbg !854

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !855, !DIExpression(), !854)
    #dbg_declare(ptr %1, !856, !DIExpression(), !854)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !857, !DIExpression(), !859)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !859
  %4 = load i64, ptr %ptradd, align 8, !dbg !859
  store i64 %4, ptr %len, align 8, !dbg !859
  br label %loop.cond, !dbg !860

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !861
  %lt = icmp ult i64 0, %5, !dbg !861
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !861

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !863, !DIExpression(), !865)
  %6 = load ptr, ptr %self, align 8, !dbg !866
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !865
  store i8 %7, ptr %value, align 1, !dbg !865
  %8 = load i64, ptr %len, align 8, !dbg !867
  %le = icmp ule i64 %8, 1, !dbg !867
  br i1 %le, label %if.then, label %if.exit, !dbg !867

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !868
  %add = add i64 0, %10, !dbg !868
  %size = sub i64 %add, 0, !dbg !868
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !868
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !868
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !868
  %14 = extractvalue %"char[]" %13, 0, !dbg !868
  %15 = extractvalue %"char[]" %13, 1, !dbg !868
  %gt = icmp ugt i64 0, %15, !dbg !868
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !868
  br i1 %16, label %panic3, label %checkok11, !dbg !868

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !868
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !868
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !868
  %19 = extractvalue %"char[]" %18, 0, !dbg !868
  %20 = extractvalue %"char[]" %12, 0, !dbg !868
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !868
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !868
  br label %expr_block.exit, !dbg !870

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !871
  %29 = extractvalue %"char[]" %28, 0, !dbg !871
  %30 = extractvalue %"char[]" %28, 1, !dbg !871
  %gt29 = icmp sgt i64 0, %30, !dbg !871
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !871
  br i1 %31, label %panic30, label %checkok40, !dbg !871

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !871
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !871
  br i1 %32, label %panic42, label %checkok52, !dbg !871

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !871
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !871
  %35 = extractvalue %"char[]" %34, 0, !dbg !871
  %36 = extractvalue %"char[]" %27, 0, !dbg !871
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !871
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !871
  %41 = load i64, ptr %len, align 8, !dbg !872
  %sub = sub i64 %41, 1, !dbg !872
  store i64 %sub, ptr %len, align 8, !dbg !872
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !873
  %43 = extractvalue %"char[]" %42, 0, !dbg !873
  %44 = extractvalue %"char[]" %42, 1, !dbg !873
  %gt69 = icmp ugt i64 1, %44, !dbg !873
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !873
  br i1 %45, label %panic70, label %checkok80, !dbg !873

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !873
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !873
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !873
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !873
  store %"char[]" %47, ptr %bytes, align 8, !dbg !873
  br label %loop.cond, !dbg !873

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.53, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.54, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.55, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 115, ptr align 8 %indirectarg86), !dbg !874
  unreachable, !dbg !877

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !877

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115), !dbg !854
  unreachable, !dbg !854

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !868
  unreachable, !dbg !868

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !868
  unreachable, !dbg !868

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !871
  unreachable, !dbg !871

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !871
  unreachable, !dbg !871

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !871
  unreachable, !dbg !871

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !873
  unreachable, !dbg !873
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Mcg16Random.next_int128(ptr %0) #0 comdat !dbg !878 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !881
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !881
  br i1 %2, label %panic, label %checkok, !dbg !881

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !882, !DIExpression(), !881)
  %3 = load ptr, ptr %self, align 8, !dbg !883
  %4 = call i64 @std.math.random.Mcg16Random.next_long(ptr %3), !dbg !885
  %zext = zext i64 %4 to i128, !dbg !885
  %shl = shl i128 %zext, 64, !dbg !885
  %5 = freeze i128 %shl, !dbg !885
  %6 = load ptr, ptr %self, align 8, !dbg !883
  %7 = call i64 @std.math.random.Mcg16Random.next_long(ptr %6), !dbg !885
  %zext3 = zext i64 %7 to i128, !dbg !885
  %add = add i128 %5, %zext3, !dbg !885
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 116), !dbg !881
  unreachable, !dbg !881
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Mcg16Random.next_long(ptr %0) #0 comdat !dbg !886 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !889
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !889
  br i1 %2, label %panic, label %checkok, !dbg !889

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !890, !DIExpression(), !889)
  %3 = load ptr, ptr %self, align 8, !dbg !891
  %4 = call i32 @std.math.random.Mcg16Random.next_int(ptr %3), !dbg !893
  %zext = zext i32 %4 to i64, !dbg !893
  %shl = shl i64 %zext, 32, !dbg !893
  %5 = freeze i64 %shl, !dbg !893
  %6 = load ptr, ptr %self, align 8, !dbg !891
  %7 = call i32 @std.math.random.Mcg16Random.next_int(ptr %6), !dbg !893
  %zext3 = zext i32 %7 to i64, !dbg !893
  %add = add i64 %5, %zext3, !dbg !893
  ret i64 %add, !dbg !893

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117), !dbg !889
  unreachable, !dbg !889
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Mcg16Random.next_int(ptr %0) #0 comdat !dbg !894 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !897
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !897
  br i1 %2, label %panic, label %checkok, !dbg !897

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !898, !DIExpression(), !897)
  %3 = load ptr, ptr %self, align 8, !dbg !899
  %4 = call i16 @std.math.random.Mcg16Random.next_short(ptr %3), !dbg !901
  %zext = zext i16 %4 to i32, !dbg !901
  %shl = shl i32 %zext, 16, !dbg !901
  %5 = freeze i32 %shl, !dbg !901
  %6 = load ptr, ptr %self, align 8, !dbg !899
  %7 = call i16 @std.math.random.Mcg16Random.next_short(ptr %6), !dbg !901
  %zext3 = zext i16 %7 to i32, !dbg !901
  %add = add i32 %5, %zext3, !dbg !901
  ret i32 %add, !dbg !901

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 118), !dbg !897
  unreachable, !dbg !897
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Mcg16Random.next_short(ptr %0) #0 comdat !dbg !902 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !905
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !905
  br i1 %2, label %panic, label %checkok, !dbg !905

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !906, !DIExpression(), !905)
  %3 = load ptr, ptr %self, align 8, !dbg !907
  %4 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %3), !dbg !909
  %zext = zext i8 %4 to i16, !dbg !909
  %zext3 = zext i16 %zext to i32, !dbg !909
  %shl = shl i32 %zext3, 8, !dbg !909
  %5 = freeze i32 %shl, !dbg !909
  %6 = load ptr, ptr %self, align 8, !dbg !907
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !909
  %zext4 = zext i8 %7 to i32, !dbg !909
  %add = add i32 %5, %zext4, !dbg !909
  %trunc = trunc i32 %add to i16, !dbg !909
  ret i16 %trunc, !dbg !909

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.43, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 119), !dbg !905
  unreachable, !dbg !905
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !910 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %expr = alloca [4 x i128], align 16
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !920
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !920
  br i1 %3, label %panic, label %checkok, !dbg !920

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !921, !DIExpression(), !922)
    #dbg_declare(ptr %1, !923, !DIExpression(), !922)
  %4 = load ptr, ptr %self, align 8, !dbg !924
  %checknull = icmp eq ptr %4, null, !dbg !924
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !924
  br i1 %5, label %panic3, label %checkok7, !dbg !924

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !925, !DIExpression(), !928)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !928
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !929
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 64, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !931
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 64, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !932
  %10 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !932
  br i1 %10, label %panic11, label %checkok15, !dbg !932

checkok15:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %4, ptr align 16 %expr, i32 64, i1 false), !dbg !932
  ret void, !dbg !932

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 17), !dbg !922
  unreachable, !dbg !922

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 19), !dbg !924
  unreachable, !dbg !924

panic11:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 212), !dbg !932
  unreachable, !dbg !932
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %0) #0 comdat !dbg !934 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i128, align 16
  %self3 = alloca i128, align 16
  %shift = alloca i128, align 16
  %s1 = alloca i128, align 16
  %self15 = alloca i128, align 16
  %shift16 = alloca i128, align 16
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !937
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !937
  br i1 %2, label %panic, label %checkok, !dbg !937

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !938, !DIExpression(), !939)
    #dbg_declare(ptr %s0, !940, !DIExpression(), !941)
  %3 = load ptr, ptr %self, align 8, !dbg !941
  %4 = load i128, ptr %3, align 16, !dbg !941
  store i128 %4, ptr %s0, align 16, !dbg !941
  %5 = load ptr, ptr %self, align 8, !dbg !942
  %6 = load ptr, ptr %self, align 8, !dbg !942
  %7 = load i128, ptr %6, align 16, !dbg !942
  %8 = load ptr, ptr %self, align 8, !dbg !942
  %9 = load i128, ptr %8, align 16, !dbg !942
  %mul = mul i128 %7, %9, !dbg !942
  %10 = load ptr, ptr %self, align 8, !dbg !942
  %ptradd = getelementptr inbounds i8, ptr %10, i64 32, !dbg !942
  %11 = load i128, ptr %ptradd, align 16, !dbg !942
  %add = add i128 %mul, %11, !dbg !942
  store i128 %add, ptr %5, align 16, !dbg !942
  %12 = load ptr, ptr %self, align 8, !dbg !943
  %13 = load ptr, ptr %self, align 8, !dbg !943
  %14 = load i128, ptr %13, align 16
  store i128 %14, ptr %self3, align 16
  store i128 64, ptr %shift, align 16
  %15 = load i128, ptr %self3, align 16, !dbg !944
  %16 = load i128, ptr %self3, align 16, !dbg !944
  %17 = load i128, ptr %shift, align 16, !dbg !944
  %18 = call i128 @llvm.fshr.i128(i128 %15, i128 %16, i128 %17), !dbg !944
  store i128 %18, ptr %12, align 16, !dbg !944
  %19 = load ptr, ptr %self, align 8, !dbg !946
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !946
  %20 = load i128, ptr %ptradd4, align 16, !dbg !946
  %add5 = add i128 %20, -129976298391535590297638237547755878347, !dbg !946
  store i128 %add5, ptr %ptradd4, align 16, !dbg !946
  %21 = load ptr, ptr %self, align 8, !dbg !947
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !947
  %22 = load ptr, ptr %self, align 8, !dbg !947
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !947
  %23 = load i128, ptr %ptradd7, align 16, !dbg !947
  %24 = load ptr, ptr %self, align 8, !dbg !947
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !947
  %25 = load i128, ptr %ptradd8, align 16, !dbg !947
  %mul9 = mul i128 %23, %25, !dbg !947
  %26 = load ptr, ptr %self, align 8, !dbg !947
  %ptradd10 = getelementptr inbounds i8, ptr %26, i64 48, !dbg !947
  %27 = load i128, ptr %ptradd10, align 16, !dbg !947
  %add11 = add i128 %mul9, %27, !dbg !947
  store i128 %add11, ptr %ptradd6, align 16, !dbg !947
    #dbg_declare(ptr %s1, !948, !DIExpression(), !949)
  %28 = load ptr, ptr %self, align 8, !dbg !949
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !949
  %29 = load i128, ptr %ptradd12, align 16, !dbg !949
  store i128 %29, ptr %s1, align 16, !dbg !949
  %30 = load ptr, ptr %self, align 8, !dbg !950
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !950
  %31 = load ptr, ptr %self, align 8, !dbg !950
  %ptradd14 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !950
  %32 = load i128, ptr %ptradd14, align 16
  store i128 %32, ptr %self15, align 16
  store i128 64, ptr %shift16, align 16
  %33 = load i128, ptr %self15, align 16, !dbg !951
  %34 = load i128, ptr %self15, align 16, !dbg !951
  %35 = load i128, ptr %shift16, align 16, !dbg !951
  %36 = call i128 @llvm.fshr.i128(i128 %33, i128 %34, i128 %35), !dbg !951
  store i128 %36, ptr %ptradd13, align 16, !dbg !951
  %37 = load ptr, ptr %self, align 8, !dbg !953
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !953
  %38 = load i128, ptr %ptradd17, align 16, !dbg !953
  %sub = sub i128 %38, -129976298391535590297638237547755878347, !dbg !953
  store i128 %sub, ptr %ptradd17, align 16, !dbg !953
  %39 = load i128, ptr %s0, align 16, !dbg !954
  %40 = load i128, ptr %s1, align 16, !dbg !954
  %add18 = add i128 %39, %40, !dbg !954
  store i128 %add18, ptr %taddr, align 16
  %41 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %41

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 23), !dbg !939
  unreachable, !dbg !939
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !955 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !956
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !956
  br i1 %3, label %panic, label %checkok, !dbg !956

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !957, !DIExpression(), !956)
    #dbg_declare(ptr %1, !958, !DIExpression(), !956)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !959
  %4 = load i64, ptr %ptradd, align 8, !dbg !959
  %lt = icmp ult i64 0, %4, !dbg !959
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !959

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 39), !dbg !959
  unreachable, !dbg !959

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !961, !DIExpression(), !963)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !963
  %6 = load i64, ptr %ptradd6, align 8, !dbg !963
  store i64 %6, ptr %len, align 8, !dbg !963
  br label %loop.cond, !dbg !964

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !965
  %lt7 = icmp ult i64 0, %7, !dbg !965
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !965

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !967, !DIExpression(), !969)
  %8 = load ptr, ptr %self, align 8, !dbg !970
  %9 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %8), !dbg !969
  store <2 x i64> %9, ptr %result, align 16
  %10 = load i128, ptr %result, align 16
  store i128 %10, ptr %value, align 16
  %11 = load i64, ptr %len, align 8, !dbg !971
  %le = icmp ule i64 %11, 16, !dbg !971
  br i1 %le, label %if.then, label %if.exit, !dbg !971

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !972
  %add = add i64 0, %13, !dbg !972
  %size = sub i64 %add, 0, !dbg !972
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !972
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !972
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !972
  %17 = extractvalue %"char[]" %16, 0, !dbg !972
  %18 = extractvalue %"char[]" %16, 1, !dbg !972
  %gt = icmp ugt i64 0, %18, !dbg !972
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !972
  br i1 %19, label %panic8, label %checkok16, !dbg !972

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %18, 0, !dbg !972
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !972
  %21 = insertvalue %"char[]" %20, i64 %size17, 1, !dbg !972
  %22 = extractvalue %"char[]" %21, 0, !dbg !972
  %23 = extractvalue %"char[]" %15, 0, !dbg !972
  store %"char[]" %15, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %24 = load i64, ptr %ptradd19, align 8
  store %"char[]" %21, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %25 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %27 = mul i64 %24, 1, !dbg !972
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !972
  br label %expr_block.exit, !dbg !974

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %28 = load ptr, ptr %taddr33, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 16, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !975
  %32 = extractvalue %"char[]" %31, 0, !dbg !975
  %33 = extractvalue %"char[]" %31, 1, !dbg !975
  %gt34 = icmp sgt i64 0, %33, !dbg !975
  %34 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !975
  br i1 %34, label %panic35, label %checkok45, !dbg !975

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %33, 16, !dbg !975
  %35 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !975
  br i1 %35, label %panic47, label %checkok57, !dbg !975

checkok57:                                        ; preds = %checkok45
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !975
  %37 = insertvalue %"char[]" %36, i64 16, 1, !dbg !975
  %38 = extractvalue %"char[]" %37, 0, !dbg !975
  %39 = extractvalue %"char[]" %30, 0, !dbg !975
  store %"char[]" %30, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %40 = load i64, ptr %ptradd59, align 8
  store %"char[]" %37, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %41 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %42, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %43 = mul i64 %40, 1, !dbg !975
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !975
  %44 = load i64, ptr %len, align 8, !dbg !976
  %sub = sub i64 %44, 16, !dbg !976
  store i64 %sub, ptr %len, align 8, !dbg !976
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !977
  %46 = extractvalue %"char[]" %45, 0, !dbg !977
  %47 = extractvalue %"char[]" %45, 1, !dbg !977
  %gt74 = icmp ugt i64 16, %47, !dbg !977
  %48 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !977
  br i1 %48, label %panic75, label %checkok85, !dbg !977

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %47, 16, !dbg !977
  %ptradd87 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !977
  %49 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !977
  %50 = insertvalue %"char[]" %49, i64 %size86, 1, !dbg !977
  store %"char[]" %50, ptr %bytes, align 8, !dbg !977
  br label %loop.cond, !dbg !977

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.67, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.68, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.69, i64 24 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 41, ptr align 8 %indirectarg91), !dbg !978
  unreachable, !dbg !981

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !981

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41), !dbg !956
  unreachable, !dbg !956

panic8:                                           ; preds = %if.then
  store i64 %18, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %54 = insertvalue %any undef, ptr %taddr10, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %53, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd14, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !972
  unreachable, !dbg !972

panic22:                                          ; preds = %checkok16
  store i64 %25, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr24, align 8
  %59 = insertvalue %any undef, ptr %taddr24, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %58, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %60, ptr %ptradd29, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !972
  unreachable, !dbg !972

panic35:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr36, align 8
  %62 = insertvalue %any undef, ptr %taddr36, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %64 = insertvalue %any undef, ptr %taddr37, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %63, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %65, ptr %ptradd42, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !975
  unreachable, !dbg !975

panic47:                                          ; preds = %checkok45
  store i64 15, ptr %taddr48, align 8
  %67 = insertvalue %any undef, ptr %taddr48, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr49, align 8
  %69 = insertvalue %any undef, ptr %taddr49, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %68, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %70, ptr %ptradd54, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !975
  unreachable, !dbg !975

panic63:                                          ; preds = %checkok57
  store i64 %41, ptr %taddr64, align 8
  %72 = insertvalue %any undef, ptr %taddr64, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr65, align 8
  %74 = insertvalue %any undef, ptr %taddr65, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %73, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %75, ptr %ptradd70, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !975
  unreachable, !dbg !975

panic75:                                          ; preds = %checkok73
  store i64 %47, ptr %taddr76, align 8
  %77 = insertvalue %any undef, ptr %taddr76, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr77, align 8
  %79 = insertvalue %any undef, ptr %taddr77, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %78, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %80, ptr %ptradd82, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !977
  unreachable, !dbg !977
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws128Random.next_long(ptr %0) #0 comdat !dbg !982 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !985
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !985
  br i1 %2, label %panic, label %checkok, !dbg !985

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !986, !DIExpression(), !985)
  %3 = load ptr, ptr %self, align 8, !dbg !985
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !985
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i64
  ret i64 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42), !dbg !985
  unreachable, !dbg !985
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws128Random.next_int(ptr %0) #0 comdat !dbg !987 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !990
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !990
  br i1 %2, label %panic, label %checkok, !dbg !990

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !991, !DIExpression(), !990)
  %3 = load ptr, ptr %self, align 8, !dbg !990
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !990
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43), !dbg !990
  unreachable, !dbg !990
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws128Random.next_short(ptr %0) #0 comdat !dbg !992 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !995
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !995
  br i1 %2, label %panic, label %checkok, !dbg !995

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !996, !DIExpression(), !995)
  %3 = load ptr, ptr %self, align 8, !dbg !995
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !995
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 44), !dbg !995
  unreachable, !dbg !995
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws128Random.next_byte(ptr %0) #0 comdat !dbg !997 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1000
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1000
  br i1 %2, label %panic, label %checkok, !dbg !1000

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1001, !DIExpression(), !1000)
  %3 = load ptr, ptr %self, align 8, !dbg !1000
  %4 = call <2 x i64> @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1000
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !1000
  unreachable, !dbg !1000
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1002 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %expr = alloca [4 x i64], align 16
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %indirectarg14 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1012
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1012
  br i1 %3, label %panic, label %checkok, !dbg !1012

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1013, !DIExpression(), !1014)
    #dbg_declare(ptr %1, !1015, !DIExpression(), !1014)
  %4 = load ptr, ptr %self, align 8, !dbg !1016
  %checknull = icmp eq ptr %4, null, !dbg !1016
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1016
  br i1 %5, label %panic3, label %checkok7, !dbg !1016

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1017, !DIExpression(), !1019)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !1019
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1020
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 32, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1022
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 32, i1 false)
  %checknull10 = icmp eq ptr %expr, null, !dbg !1023
  %10 = call i1 @llvm.expect.i1(i1 %checknull10, i1 false), !dbg !1023
  br i1 %10, label %panic11, label %checkok15, !dbg !1023

checkok15:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %expr, i32 32, i1 false), !dbg !1023
  ret void, !dbg !1023

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 55), !dbg !1014
  unreachable, !dbg !1014

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 57), !dbg !1016
  unreachable, !dbg !1016

panic11:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg13, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg14, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, ptr align 8 %indirectarg14, i32 212), !dbg !1023
  unreachable, !dbg !1023
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws64Random.next_long(ptr %0) #0 comdat !dbg !1025 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i64, align 8
  %self3 = alloca i64, align 8
  %shift = alloca i64, align 8
  %s1 = alloca i64, align 8
  %self15 = alloca i64, align 8
  %shift16 = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1028
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1028
  br i1 %2, label %panic, label %checkok, !dbg !1028

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1029, !DIExpression(), !1030)
    #dbg_declare(ptr %s0, !1031, !DIExpression(), !1032)
  %3 = load ptr, ptr %self, align 8, !dbg !1032
  %4 = load i64, ptr %3, align 8, !dbg !1032
  store i64 %4, ptr %s0, align 8, !dbg !1032
  %5 = load ptr, ptr %self, align 8, !dbg !1033
  %6 = load ptr, ptr %self, align 8, !dbg !1033
  %7 = load i64, ptr %6, align 8, !dbg !1033
  %8 = load ptr, ptr %self, align 8, !dbg !1033
  %9 = load i64, ptr %8, align 8, !dbg !1033
  %mul = mul i64 %7, %9, !dbg !1033
  %10 = load ptr, ptr %self, align 8, !dbg !1033
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1033
  %11 = load i64, ptr %ptradd, align 8, !dbg !1033
  %add = add i64 %mul, %11, !dbg !1033
  store i64 %add, ptr %5, align 8, !dbg !1033
  %12 = load ptr, ptr %self, align 8, !dbg !1034
  %13 = load ptr, ptr %self, align 8, !dbg !1034
  %14 = load i64, ptr %13, align 8
  store i64 %14, ptr %self3, align 8
  store i64 32, ptr %shift, align 8
  %15 = load i64, ptr %self3, align 8, !dbg !1035
  %16 = load i64, ptr %self3, align 8, !dbg !1035
  %17 = load i64, ptr %shift, align 8, !dbg !1035
  %18 = call i64 @llvm.fshr.i64(i64 %15, i64 %16, i64 %17), !dbg !1035
  store i64 %18, ptr %12, align 8, !dbg !1035
  %19 = load ptr, ptr %self, align 8, !dbg !1037
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1037
  %20 = load i64, ptr %ptradd4, align 8, !dbg !1037
  %add5 = add i64 %20, -7046029254386353131, !dbg !1037
  store i64 %add5, ptr %ptradd4, align 8, !dbg !1037
  %21 = load ptr, ptr %self, align 8, !dbg !1038
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !1038
  %22 = load ptr, ptr %self, align 8, !dbg !1038
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1038
  %23 = load i64, ptr %ptradd7, align 8, !dbg !1038
  %24 = load ptr, ptr %self, align 8, !dbg !1038
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !1038
  %25 = load i64, ptr %ptradd8, align 8, !dbg !1038
  %mul9 = mul i64 %23, %25, !dbg !1038
  %26 = load ptr, ptr %self, align 8, !dbg !1038
  %ptradd10 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !1038
  %27 = load i64, ptr %ptradd10, align 8, !dbg !1038
  %add11 = add i64 %mul9, %27, !dbg !1038
  store i64 %add11, ptr %ptradd6, align 8, !dbg !1038
    #dbg_declare(ptr %s1, !1039, !DIExpression(), !1040)
  %28 = load ptr, ptr %self, align 8, !dbg !1040
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !1040
  %29 = load i64, ptr %ptradd12, align 8, !dbg !1040
  store i64 %29, ptr %s1, align 8, !dbg !1040
  %30 = load ptr, ptr %self, align 8, !dbg !1041
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !1041
  %31 = load ptr, ptr %self, align 8, !dbg !1041
  %ptradd14 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !1041
  %32 = load i64, ptr %ptradd14, align 8
  store i64 %32, ptr %self15, align 8
  store i64 32, ptr %shift16, align 8
  %33 = load i64, ptr %self15, align 8, !dbg !1042
  %34 = load i64, ptr %self15, align 8, !dbg !1042
  %35 = load i64, ptr %shift16, align 8, !dbg !1042
  %36 = call i64 @llvm.fshr.i64(i64 %33, i64 %34, i64 %35), !dbg !1042
  store i64 %36, ptr %ptradd13, align 8, !dbg !1042
  %37 = load ptr, ptr %self, align 8, !dbg !1044
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !1044
  %38 = load i64, ptr %ptradd17, align 8, !dbg !1044
  %sub = sub i64 %38, -7046029254386353131, !dbg !1044
  store i64 %sub, ptr %ptradd17, align 8, !dbg !1044
  %39 = load i64, ptr %s0, align 8, !dbg !1045
  %40 = load i64, ptr %s1, align 8, !dbg !1045
  %add18 = add i64 %39, %40, !dbg !1045
  ret i64 %add18, !dbg !1045

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 60), !dbg !1030
  unreachable, !dbg !1030
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1046 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1047
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1047
  br i1 %3, label %panic, label %checkok, !dbg !1047

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1048, !DIExpression(), !1047)
    #dbg_declare(ptr %1, !1049, !DIExpression(), !1047)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1050
  %4 = load i64, ptr %ptradd, align 8, !dbg !1050
  %lt = icmp ult i64 0, %4, !dbg !1050
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1050

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 76), !dbg !1050
  unreachable, !dbg !1050

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1052, !DIExpression(), !1054)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1054
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1054
  store i64 %6, ptr %len, align 8, !dbg !1054
  br label %loop.cond, !dbg !1055

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1056
  %lt7 = icmp ult i64 0, %7, !dbg !1056
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1056

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1058, !DIExpression(), !1060)
  %8 = load ptr, ptr %self, align 8, !dbg !1061
  %9 = call i64 @std.math.random.Msws64Random.next_long(ptr %8), !dbg !1060
  store i64 %9, ptr %value, align 8, !dbg !1060
  %10 = load i64, ptr %len, align 8, !dbg !1062
  %le = icmp ule i64 %10, 8, !dbg !1062
  br i1 %le, label %if.then, label %if.exit, !dbg !1062

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1063
  %add = add i64 0, %12, !dbg !1063
  %size = sub i64 %add, 0, !dbg !1063
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1063
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1063
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1063
  %16 = extractvalue %"char[]" %15, 0, !dbg !1063
  %17 = extractvalue %"char[]" %15, 1, !dbg !1063
  %gt = icmp ugt i64 0, %17, !dbg !1063
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1063
  br i1 %18, label %panic8, label %checkok16, !dbg !1063

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1063
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1063
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1063
  %21 = extractvalue %"char[]" %20, 0, !dbg !1063
  %22 = extractvalue %"char[]" %14, 0, !dbg !1063
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1063
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1063
  br label %expr_block.exit, !dbg !1065

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1066
  %31 = extractvalue %"char[]" %30, 0, !dbg !1066
  %32 = extractvalue %"char[]" %30, 1, !dbg !1066
  %gt34 = icmp sgt i64 0, %32, !dbg !1066
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1066
  br i1 %33, label %panic35, label %checkok45, !dbg !1066

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !1066
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1066
  br i1 %34, label %panic47, label %checkok57, !dbg !1066

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1066
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !1066
  %37 = extractvalue %"char[]" %36, 0, !dbg !1066
  %38 = extractvalue %"char[]" %29, 0, !dbg !1066
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1066
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1066
  %43 = load i64, ptr %len, align 8, !dbg !1067
  %sub = sub i64 %43, 8, !dbg !1067
  store i64 %sub, ptr %len, align 8, !dbg !1067
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1068
  %45 = extractvalue %"char[]" %44, 0, !dbg !1068
  %46 = extractvalue %"char[]" %44, 1, !dbg !1068
  %gt74 = icmp ugt i64 8, %46, !dbg !1068
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1068
  br i1 %47, label %panic75, label %checkok85, !dbg !1068

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !1068
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1068
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1068
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1068
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1068
  br label %loop.cond, !dbg !1068

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.70, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.71, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.72, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 78, ptr align 8 %indirectarg91), !dbg !1069
  unreachable, !dbg !1072

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1072

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 78), !dbg !1047
  unreachable, !dbg !1047

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1063
  unreachable, !dbg !1063

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1063
  unreachable, !dbg !1063

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1066
  unreachable, !dbg !1066

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1066
  unreachable, !dbg !1066

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1066
  unreachable, !dbg !1066

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1068
  unreachable, !dbg !1068
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws64Random.next_int128(ptr %0) #0 comdat !dbg !1073 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1076
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1076
  br i1 %2, label %panic, label %checkok, !dbg !1076

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1077, !DIExpression(), !1076)
  %3 = load ptr, ptr %self, align 8, !dbg !1078
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1080
  %zext = zext i64 %4 to i128, !dbg !1080
  %shl = shl i128 %zext, 64, !dbg !1080
  %5 = freeze i128 %shl, !dbg !1080
  %6 = load ptr, ptr %self, align 8, !dbg !1078
  %7 = call i64 @std.math.random.Msws64Random.next_long(ptr %6), !dbg !1080
  %zext3 = zext i64 %7 to i128, !dbg !1080
  %add = add i128 %5, %zext3, !dbg !1080
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79), !dbg !1076
  unreachable, !dbg !1076
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws64Random.next_int(ptr %0) #0 comdat !dbg !1081 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1084
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1084
  br i1 %2, label %panic, label %checkok, !dbg !1084

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1085, !DIExpression(), !1084)
  %3 = load ptr, ptr %self, align 8, !dbg !1084
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1084
  %trunc = trunc i64 %4 to i32, !dbg !1084
  ret i32 %trunc, !dbg !1084

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 80), !dbg !1084
  unreachable, !dbg !1084
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws64Random.next_short(ptr %0) #0 comdat !dbg !1086 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1089
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1089
  br i1 %2, label %panic, label %checkok, !dbg !1089

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1090, !DIExpression(), !1089)
  %3 = load ptr, ptr %self, align 8, !dbg !1089
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1089
  %trunc = trunc i64 %4 to i16, !dbg !1089
  ret i16 %trunc, !dbg !1089

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 81), !dbg !1089
  unreachable, !dbg !1089
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws64Random.next_byte(ptr %0) #0 comdat !dbg !1091 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1094
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1094
  br i1 %2, label %panic, label %checkok, !dbg !1094

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1095, !DIExpression(), !1094)
  %3 = load ptr, ptr %self, align 8, !dbg !1094
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1094
  %trunc = trunc i64 %4 to i8, !dbg !1094
  ret i8 %trunc, !dbg !1094

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 82), !dbg !1094
  unreachable, !dbg !1094
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1096 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %expr = alloca [4 x i32], align 16
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1106
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1106
  br i1 %3, label %panic, label %checkok, !dbg !1106

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1107, !DIExpression(), !1108)
    #dbg_declare(ptr %1, !1109, !DIExpression(), !1108)
  %4 = load ptr, ptr %self, align 8, !dbg !1110
  %checknull = icmp eq ptr %4, null, !dbg !1110
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1110
  br i1 %5, label %panic3, label %checkok7, !dbg !1110

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1111, !DIExpression(), !1114)
  store i32 0, ptr %return_value, align 4, !dbg !1114
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1114
  store i32 0, ptr %ptradd, align 4, !dbg !1114
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !1114
  store i32 0, ptr %ptradd8, align 4, !dbg !1114
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !1114
  store i32 0, ptr %ptradd9, align 4, !dbg !1114
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1115
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !1117
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 16, i1 false)
  %checknull12 = icmp eq ptr %expr, null, !dbg !1118
  %10 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !1118
  br i1 %10, label %panic13, label %checkok17, !dbg !1118

checkok17:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %4, ptr align 4 %expr, i32 16, i1 false), !dbg !1118
  ret void, !dbg !1118

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 91), !dbg !1108
  unreachable, !dbg !1108

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 93), !dbg !1110
  unreachable, !dbg !1110

panic13:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 212), !dbg !1118
  unreachable, !dbg !1118
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws32Random.next_int(ptr %0) #0 comdat !dbg !1120 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i32, align 4
  %self3 = alloca i32, align 4
  %shift = alloca i32, align 4
  %s1 = alloca i32, align 4
  %self15 = alloca i32, align 4
  %shift16 = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !1123
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1123
  br i1 %2, label %panic, label %checkok, !dbg !1123

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1124, !DIExpression(), !1125)
    #dbg_declare(ptr %s0, !1126, !DIExpression(), !1127)
  %3 = load ptr, ptr %self, align 8, !dbg !1127
  %4 = load i32, ptr %3, align 4, !dbg !1127
  store i32 %4, ptr %s0, align 4, !dbg !1127
  %5 = load ptr, ptr %self, align 8, !dbg !1128
  %6 = load ptr, ptr %self, align 8, !dbg !1128
  %7 = load i32, ptr %6, align 4, !dbg !1128
  %8 = load ptr, ptr %self, align 8, !dbg !1128
  %9 = load i32, ptr %8, align 4, !dbg !1128
  %mul = mul i32 %7, %9, !dbg !1128
  %10 = load ptr, ptr %self, align 8, !dbg !1128
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1128
  %11 = load i32, ptr %ptradd, align 4, !dbg !1128
  %add = add i32 %mul, %11, !dbg !1128
  store i32 %add, ptr %5, align 4, !dbg !1128
  %12 = load ptr, ptr %self, align 8, !dbg !1129
  %13 = load ptr, ptr %self, align 8, !dbg !1129
  %14 = load i32, ptr %13, align 4
  store i32 %14, ptr %self3, align 4
  store i32 16, ptr %shift, align 4
  %15 = load i32, ptr %self3, align 4, !dbg !1130
  %16 = load i32, ptr %self3, align 4, !dbg !1130
  %17 = load i32, ptr %shift, align 4, !dbg !1130
  %18 = call i32 @llvm.fshr.i32(i32 %15, i32 %16, i32 %17), !dbg !1130
  store i32 %18, ptr %12, align 4, !dbg !1130
  %19 = load ptr, ptr %self, align 8, !dbg !1132
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !1132
  %20 = load i32, ptr %ptradd4, align 4, !dbg !1132
  %add5 = add i32 %20, -1640531527, !dbg !1132
  store i32 %add5, ptr %ptradd4, align 4, !dbg !1132
  %21 = load ptr, ptr %self, align 8, !dbg !1133
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 4, !dbg !1133
  %22 = load ptr, ptr %self, align 8, !dbg !1133
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !1133
  %23 = load i32, ptr %ptradd7, align 4, !dbg !1133
  %24 = load ptr, ptr %self, align 8, !dbg !1133
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 4, !dbg !1133
  %25 = load i32, ptr %ptradd8, align 4, !dbg !1133
  %mul9 = mul i32 %23, %25, !dbg !1133
  %26 = load ptr, ptr %self, align 8, !dbg !1133
  %ptradd10 = getelementptr inbounds i8, ptr %26, i64 12, !dbg !1133
  %27 = load i32, ptr %ptradd10, align 4, !dbg !1133
  %add11 = add i32 %mul9, %27, !dbg !1133
  store i32 %add11, ptr %ptradd6, align 4, !dbg !1133
    #dbg_declare(ptr %s1, !1134, !DIExpression(), !1135)
  %28 = load ptr, ptr %self, align 8, !dbg !1135
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 4, !dbg !1135
  %29 = load i32, ptr %ptradd12, align 4, !dbg !1135
  store i32 %29, ptr %s1, align 4, !dbg !1135
  %30 = load ptr, ptr %self, align 8, !dbg !1136
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 4, !dbg !1136
  %31 = load ptr, ptr %self, align 8, !dbg !1136
  %ptradd14 = getelementptr inbounds i8, ptr %31, i64 4, !dbg !1136
  %32 = load i32, ptr %ptradd14, align 4
  store i32 %32, ptr %self15, align 4
  store i32 16, ptr %shift16, align 4
  %33 = load i32, ptr %self15, align 4, !dbg !1137
  %34 = load i32, ptr %self15, align 4, !dbg !1137
  %35 = load i32, ptr %shift16, align 4, !dbg !1137
  %36 = call i32 @llvm.fshr.i32(i32 %33, i32 %34, i32 %35), !dbg !1137
  store i32 %36, ptr %ptradd13, align 4, !dbg !1137
  %37 = load ptr, ptr %self, align 8, !dbg !1139
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 12, !dbg !1139
  %38 = load i32, ptr %ptradd17, align 4, !dbg !1139
  %sub = sub i32 %38, -1640531527, !dbg !1139
  store i32 %sub, ptr %ptradd17, align 4, !dbg !1139
  %39 = load i32, ptr %s0, align 4, !dbg !1140
  %40 = load i32, ptr %s1, align 4, !dbg !1140
  %add18 = add i32 %39, %40, !dbg !1140
  ret i32 %add18, !dbg !1140

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97), !dbg !1125
  unreachable, !dbg !1125
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1141 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1142
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1142
  br i1 %3, label %panic, label %checkok, !dbg !1142

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1143, !DIExpression(), !1142)
    #dbg_declare(ptr %1, !1144, !DIExpression(), !1142)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1145
  %4 = load i64, ptr %ptradd, align 8, !dbg !1145
  %lt = icmp ult i64 0, %4, !dbg !1145
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1145

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 113), !dbg !1145
  unreachable, !dbg !1145

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1147, !DIExpression(), !1149)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1149
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1149
  store i64 %6, ptr %len, align 8, !dbg !1149
  br label %loop.cond, !dbg !1150

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1151
  %lt7 = icmp ult i64 0, %7, !dbg !1151
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1151

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1153, !DIExpression(), !1155)
  %8 = load ptr, ptr %self, align 8, !dbg !1156
  %9 = call i32 @std.math.random.Msws32Random.next_int(ptr %8), !dbg !1155
  store i32 %9, ptr %value, align 4, !dbg !1155
  %10 = load i64, ptr %len, align 8, !dbg !1157
  %le = icmp ule i64 %10, 4, !dbg !1157
  br i1 %le, label %if.then, label %if.exit, !dbg !1157

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1158
  %add = add i64 0, %12, !dbg !1158
  %size = sub i64 %add, 0, !dbg !1158
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1158
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1158
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1158
  %16 = extractvalue %"char[]" %15, 0, !dbg !1158
  %17 = extractvalue %"char[]" %15, 1, !dbg !1158
  %gt = icmp ugt i64 0, %17, !dbg !1158
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1158
  br i1 %18, label %panic8, label %checkok16, !dbg !1158

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1158
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1158
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1158
  %21 = extractvalue %"char[]" %20, 0, !dbg !1158
  %22 = extractvalue %"char[]" %14, 0, !dbg !1158
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1158
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1158
  br label %expr_block.exit, !dbg !1160

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1161
  %31 = extractvalue %"char[]" %30, 0, !dbg !1161
  %32 = extractvalue %"char[]" %30, 1, !dbg !1161
  %gt34 = icmp sgt i64 0, %32, !dbg !1161
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1161
  br i1 %33, label %panic35, label %checkok45, !dbg !1161

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !1161
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1161
  br i1 %34, label %panic47, label %checkok57, !dbg !1161

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1161
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !1161
  %37 = extractvalue %"char[]" %36, 0, !dbg !1161
  %38 = extractvalue %"char[]" %29, 0, !dbg !1161
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1161
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1161
  %43 = load i64, ptr %len, align 8, !dbg !1162
  %sub = sub i64 %43, 4, !dbg !1162
  store i64 %sub, ptr %len, align 8, !dbg !1162
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1163
  %45 = extractvalue %"char[]" %44, 0, !dbg !1163
  %46 = extractvalue %"char[]" %44, 1, !dbg !1163
  %gt74 = icmp ugt i64 4, %46, !dbg !1163
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1163
  br i1 %47, label %panic75, label %checkok85, !dbg !1163

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !1163
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !1163
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1163
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1163
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1163
  br label %loop.cond, !dbg !1163

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.73, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.74, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.75, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 115, ptr align 8 %indirectarg91), !dbg !1164
  unreachable, !dbg !1167

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1167

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 115), !dbg !1142
  unreachable, !dbg !1142

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1158
  unreachable, !dbg !1158

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1158
  unreachable, !dbg !1158

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1161
  unreachable, !dbg !1161

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1161
  unreachable, !dbg !1161

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1161
  unreachable, !dbg !1161

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1163
  unreachable, !dbg !1163
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws32Random.next_int128(ptr %0) #0 comdat !dbg !1168 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1171
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1171
  br i1 %2, label %panic, label %checkok, !dbg !1171

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1172, !DIExpression(), !1171)
  %3 = load ptr, ptr %self, align 8, !dbg !1173
  %4 = call i64 @std.math.random.Msws32Random.next_long(ptr %3), !dbg !1175
  %zext = zext i64 %4 to i128, !dbg !1175
  %shl = shl i128 %zext, 64, !dbg !1175
  %5 = freeze i128 %shl, !dbg !1175
  %6 = load ptr, ptr %self, align 8, !dbg !1173
  %7 = call i64 @std.math.random.Msws32Random.next_long(ptr %6), !dbg !1175
  %zext3 = zext i64 %7 to i128, !dbg !1175
  %add = add i128 %5, %zext3, !dbg !1175
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 116), !dbg !1171
  unreachable, !dbg !1171
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws32Random.next_long(ptr %0) #0 comdat !dbg !1176 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1179
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1179
  br i1 %2, label %panic, label %checkok, !dbg !1179

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1180, !DIExpression(), !1179)
  %3 = load ptr, ptr %self, align 8, !dbg !1181
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1183
  %zext = zext i32 %4 to i64, !dbg !1183
  %shl = shl i64 %zext, 32, !dbg !1183
  %5 = freeze i64 %shl, !dbg !1183
  %6 = load ptr, ptr %self, align 8, !dbg !1181
  %7 = call i32 @std.math.random.Msws32Random.next_int(ptr %6), !dbg !1183
  %zext3 = zext i32 %7 to i64, !dbg !1183
  %add = add i64 %5, %zext3, !dbg !1183
  ret i64 %add, !dbg !1183

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 117), !dbg !1179
  unreachable, !dbg !1179
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws32Random.next_short(ptr %0) #0 comdat !dbg !1184 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1187
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1187
  br i1 %2, label %panic, label %checkok, !dbg !1187

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1188, !DIExpression(), !1187)
  %3 = load ptr, ptr %self, align 8, !dbg !1187
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1187
  %trunc = trunc i32 %4 to i16, !dbg !1187
  ret i16 %trunc, !dbg !1187

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 118), !dbg !1187
  unreachable, !dbg !1187
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws32Random.next_byte(ptr %0) #0 comdat !dbg !1189 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1192
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1192
  br i1 %2, label %panic, label %checkok, !dbg !1192

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1193, !DIExpression(), !1192)
  %3 = load ptr, ptr %self, align 8, !dbg !1192
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !1192
  %trunc = trunc i32 %4 to i8, !dbg !1192
  ret i8 %trunc, !dbg !1192

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 119), !dbg !1192
  unreachable, !dbg !1192
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1194 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %expr = alloca [4 x i16], align 2
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1204
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1204
  br i1 %3, label %panic, label %checkok, !dbg !1204

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1205, !DIExpression(), !1206)
    #dbg_declare(ptr %1, !1207, !DIExpression(), !1206)
  %4 = load ptr, ptr %self, align 8, !dbg !1208
  %checknull = icmp eq ptr %4, null, !dbg !1208
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1208
  br i1 %5, label %panic3, label %checkok7, !dbg !1208

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1209, !DIExpression(), !1212)
  store i16 0, ptr %return_value, align 2, !dbg !1212
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1212
  store i16 0, ptr %ptradd, align 2, !dbg !1212
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1212
  store i16 0, ptr %ptradd8, align 2, !dbg !1212
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1212
  store i16 0, ptr %ptradd9, align 2, !dbg !1212
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1213
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !1215
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %expr, ptr align 2 %return_value, i32 8, i1 false)
  %checknull12 = icmp eq ptr %expr, null, !dbg !1216
  %10 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !1216
  br i1 %10, label %panic13, label %checkok17, !dbg !1216

checkok17:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %4, ptr align 2 %expr, i32 8, i1 false), !dbg !1216
  ret void, !dbg !1216

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 129), !dbg !1206
  unreachable, !dbg !1206

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 131), !dbg !1208
  unreachable, !dbg !1208

panic13:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 212), !dbg !1216
  unreachable, !dbg !1216
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws16Random.next_short(ptr %0) #0 comdat !dbg !1218 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i16, align 2
  %self5 = alloca i16, align 2
  %shift = alloca i16, align 2
  %s1 = alloca i16, align 2
  %self21 = alloca i16, align 2
  %shift22 = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1221
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1221
  br i1 %2, label %panic, label %checkok, !dbg !1221

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1222, !DIExpression(), !1223)
    #dbg_declare(ptr %s0, !1224, !DIExpression(), !1225)
  %3 = load ptr, ptr %self, align 8, !dbg !1225
  %4 = load i16, ptr %3, align 2, !dbg !1225
  store i16 %4, ptr %s0, align 2, !dbg !1225
  %5 = load ptr, ptr %self, align 8, !dbg !1226
  %6 = load ptr, ptr %self, align 8, !dbg !1226
  %7 = load i16, ptr %6, align 2, !dbg !1226
  %zext = zext i16 %7 to i32, !dbg !1226
  %8 = load ptr, ptr %self, align 8, !dbg !1226
  %9 = load i16, ptr %8, align 2, !dbg !1226
  %zext3 = zext i16 %9 to i32, !dbg !1226
  %mul = mul i32 %zext, %zext3, !dbg !1226
  %10 = load ptr, ptr %self, align 8, !dbg !1226
  %ptradd = getelementptr inbounds i8, ptr %10, i64 4, !dbg !1226
  %11 = load i16, ptr %ptradd, align 2, !dbg !1226
  %zext4 = zext i16 %11 to i32, !dbg !1226
  %add = add i32 %mul, %zext4, !dbg !1226
  %trunc = trunc i32 %add to i16, !dbg !1226
  store i16 %trunc, ptr %5, align 2, !dbg !1226
  %12 = load ptr, ptr %self, align 8, !dbg !1227
  %13 = load ptr, ptr %self, align 8, !dbg !1227
  %14 = load i16, ptr %13, align 2
  store i16 %14, ptr %self5, align 2
  store i16 8, ptr %shift, align 2
  %15 = load i16, ptr %self5, align 2, !dbg !1228
  %16 = load i16, ptr %self5, align 2, !dbg !1228
  %17 = load i16, ptr %shift, align 2, !dbg !1228
  %18 = call i16 @llvm.fshr.i16(i16 %15, i16 %16, i16 %17), !dbg !1228
  store i16 %18, ptr %12, align 2, !dbg !1228
  %19 = load ptr, ptr %self, align 8, !dbg !1230
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !1230
  %20 = load i16, ptr %ptradd6, align 2, !dbg !1230
  %add7 = add i16 %20, -25033, !dbg !1230
  store i16 %add7, ptr %ptradd6, align 2, !dbg !1230
  %21 = load ptr, ptr %self, align 8, !dbg !1231
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 2, !dbg !1231
  %22 = load ptr, ptr %self, align 8, !dbg !1231
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !1231
  %23 = load i16, ptr %ptradd9, align 2, !dbg !1231
  %zext10 = zext i16 %23 to i32, !dbg !1231
  %24 = load ptr, ptr %self, align 8, !dbg !1231
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 2, !dbg !1231
  %25 = load i16, ptr %ptradd11, align 2, !dbg !1231
  %zext12 = zext i16 %25 to i32, !dbg !1231
  %mul13 = mul i32 %zext10, %zext12, !dbg !1231
  %26 = load ptr, ptr %self, align 8, !dbg !1231
  %ptradd14 = getelementptr inbounds i8, ptr %26, i64 6, !dbg !1231
  %27 = load i16, ptr %ptradd14, align 2, !dbg !1231
  %zext15 = zext i16 %27 to i32, !dbg !1231
  %add16 = add i32 %mul13, %zext15, !dbg !1231
  %trunc17 = trunc i32 %add16 to i16, !dbg !1231
  store i16 %trunc17, ptr %ptradd8, align 2, !dbg !1231
    #dbg_declare(ptr %s1, !1232, !DIExpression(), !1233)
  %28 = load ptr, ptr %self, align 8, !dbg !1233
  %ptradd18 = getelementptr inbounds i8, ptr %28, i64 2, !dbg !1233
  %29 = load i16, ptr %ptradd18, align 2, !dbg !1233
  store i16 %29, ptr %s1, align 2, !dbg !1233
  %30 = load ptr, ptr %self, align 8, !dbg !1234
  %ptradd19 = getelementptr inbounds i8, ptr %30, i64 2, !dbg !1234
  %31 = load ptr, ptr %self, align 8, !dbg !1234
  %ptradd20 = getelementptr inbounds i8, ptr %31, i64 2, !dbg !1234
  %32 = load i16, ptr %ptradd20, align 2
  store i16 %32, ptr %self21, align 2
  store i16 8, ptr %shift22, align 2
  %33 = load i16, ptr %self21, align 2, !dbg !1235
  %34 = load i16, ptr %self21, align 2, !dbg !1235
  %35 = load i16, ptr %shift22, align 2, !dbg !1235
  %36 = call i16 @llvm.fshr.i16(i16 %33, i16 %34, i16 %35), !dbg !1235
  store i16 %36, ptr %ptradd19, align 2, !dbg !1235
  %37 = load ptr, ptr %self, align 8, !dbg !1237
  %ptradd23 = getelementptr inbounds i8, ptr %37, i64 6, !dbg !1237
  %38 = load i16, ptr %ptradd23, align 2, !dbg !1237
  %sub = sub i16 %38, -25033, !dbg !1237
  store i16 %sub, ptr %ptradd23, align 2, !dbg !1237
  %39 = load i16, ptr %s0, align 2, !dbg !1238
  %zext24 = zext i16 %39 to i32, !dbg !1238
  %40 = load i16, ptr %s1, align 2, !dbg !1238
  %zext25 = zext i16 %40 to i32, !dbg !1238
  %add26 = add i32 %zext24, %zext25, !dbg !1238
  %trunc27 = trunc i32 %add26 to i16, !dbg !1238
  ret i16 %trunc27, !dbg !1238

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 135), !dbg !1223
  unreachable, !dbg !1223
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1239 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1240
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1240
  br i1 %3, label %panic, label %checkok, !dbg !1240

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1241, !DIExpression(), !1240)
    #dbg_declare(ptr %1, !1242, !DIExpression(), !1240)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1243
  %4 = load i64, ptr %ptradd, align 8, !dbg !1243
  %lt = icmp ult i64 0, %4, !dbg !1243
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1243

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 151), !dbg !1243
  unreachable, !dbg !1243

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1245, !DIExpression(), !1247)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1247
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1247
  store i64 %6, ptr %len, align 8, !dbg !1247
  br label %loop.cond, !dbg !1248

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1249
  %lt7 = icmp ult i64 0, %7, !dbg !1249
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1249

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1251, !DIExpression(), !1253)
  %8 = load ptr, ptr %self, align 8, !dbg !1254
  %9 = call i16 @std.math.random.Msws16Random.next_short(ptr %8), !dbg !1253
  store i16 %9, ptr %value, align 2, !dbg !1253
  %10 = load i64, ptr %len, align 8, !dbg !1255
  %le = icmp ule i64 %10, 2, !dbg !1255
  br i1 %le, label %if.then, label %if.exit, !dbg !1255

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1256
  %add = add i64 0, %12, !dbg !1256
  %size = sub i64 %add, 0, !dbg !1256
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1256
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1256
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1256
  %16 = extractvalue %"char[]" %15, 0, !dbg !1256
  %17 = extractvalue %"char[]" %15, 1, !dbg !1256
  %gt = icmp ugt i64 0, %17, !dbg !1256
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1256
  br i1 %18, label %panic8, label %checkok16, !dbg !1256

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1256
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1256
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1256
  %21 = extractvalue %"char[]" %20, 0, !dbg !1256
  %22 = extractvalue %"char[]" %14, 0, !dbg !1256
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1256
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1256
  br label %expr_block.exit, !dbg !1258

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1259
  %31 = extractvalue %"char[]" %30, 0, !dbg !1259
  %32 = extractvalue %"char[]" %30, 1, !dbg !1259
  %gt34 = icmp sgt i64 0, %32, !dbg !1259
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1259
  br i1 %33, label %panic35, label %checkok45, !dbg !1259

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !1259
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1259
  br i1 %34, label %panic47, label %checkok57, !dbg !1259

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1259
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !1259
  %37 = extractvalue %"char[]" %36, 0, !dbg !1259
  %38 = extractvalue %"char[]" %29, 0, !dbg !1259
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1259
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1259
  %43 = load i64, ptr %len, align 8, !dbg !1260
  %sub = sub i64 %43, 2, !dbg !1260
  store i64 %sub, ptr %len, align 8, !dbg !1260
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1261
  %45 = extractvalue %"char[]" %44, 0, !dbg !1261
  %46 = extractvalue %"char[]" %44, 1, !dbg !1261
  %gt74 = icmp ugt i64 2, %46, !dbg !1261
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1261
  br i1 %47, label %panic75, label %checkok85, !dbg !1261

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !1261
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !1261
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1261
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1261
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1261
  br label %loop.cond, !dbg !1261

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.76, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.77, i64 12 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.78, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 153, ptr align 8 %indirectarg91), !dbg !1262
  unreachable, !dbg !1265

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1265

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 153), !dbg !1240
  unreachable, !dbg !1240

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1256
  unreachable, !dbg !1256

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1256
  unreachable, !dbg !1256

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1259
  unreachable, !dbg !1259

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1259
  unreachable, !dbg !1259

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1259
  unreachable, !dbg !1259

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1261
  unreachable, !dbg !1261
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws16Random.next_int128(ptr %0) #0 comdat !dbg !1266 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1269
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1269
  br i1 %2, label %panic, label %checkok, !dbg !1269

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1270, !DIExpression(), !1269)
  %3 = load ptr, ptr %self, align 8, !dbg !1271
  %4 = call i64 @std.math.random.Msws16Random.next_long(ptr %3), !dbg !1273
  %zext = zext i64 %4 to i128, !dbg !1273
  %shl = shl i128 %zext, 64, !dbg !1273
  %5 = freeze i128 %shl, !dbg !1273
  %6 = load ptr, ptr %self, align 8, !dbg !1271
  %7 = call i64 @std.math.random.Msws16Random.next_long(ptr %6), !dbg !1273
  %zext3 = zext i64 %7 to i128, !dbg !1273
  %add = add i128 %5, %zext3, !dbg !1273
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 154), !dbg !1269
  unreachable, !dbg !1269
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws16Random.next_long(ptr %0) #0 comdat !dbg !1274 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1277
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1277
  br i1 %2, label %panic, label %checkok, !dbg !1277

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1278, !DIExpression(), !1277)
  %3 = load ptr, ptr %self, align 8, !dbg !1279
  %4 = call i32 @std.math.random.Msws16Random.next_int(ptr %3), !dbg !1281
  %zext = zext i32 %4 to i64, !dbg !1281
  %shl = shl i64 %zext, 32, !dbg !1281
  %5 = freeze i64 %shl, !dbg !1281
  %6 = load ptr, ptr %self, align 8, !dbg !1279
  %7 = call i32 @std.math.random.Msws16Random.next_int(ptr %6), !dbg !1281
  %zext3 = zext i32 %7 to i64, !dbg !1281
  %add = add i64 %5, %zext3, !dbg !1281
  ret i64 %add, !dbg !1281

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 155), !dbg !1277
  unreachable, !dbg !1277
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws16Random.next_int(ptr %0) #0 comdat !dbg !1282 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1285
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1285
  br i1 %2, label %panic, label %checkok, !dbg !1285

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1286, !DIExpression(), !1285)
  %3 = load ptr, ptr %self, align 8, !dbg !1287
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1289
  %zext = zext i16 %4 to i32, !dbg !1289
  %shl = shl i32 %zext, 16, !dbg !1289
  %5 = freeze i32 %shl, !dbg !1289
  %6 = load ptr, ptr %self, align 8, !dbg !1287
  %7 = call i16 @std.math.random.Msws16Random.next_short(ptr %6), !dbg !1289
  %zext3 = zext i16 %7 to i32, !dbg !1289
  %add = add i32 %5, %zext3, !dbg !1289
  ret i32 %add, !dbg !1289

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 156), !dbg !1285
  unreachable, !dbg !1285
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws16Random.next_byte(ptr %0) #0 comdat !dbg !1290 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1293
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1293
  br i1 %2, label %panic, label %checkok, !dbg !1293

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1294, !DIExpression(), !1293)
  %3 = load ptr, ptr %self, align 8, !dbg !1293
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !1293
  %trunc = trunc i16 %4 to i8, !dbg !1293
  ret i8 %trunc, !dbg !1293

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 157), !dbg !1293
  unreachable, !dbg !1293
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws8Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1295 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %expr = alloca [4 x i8], align 1
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1305
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1305
  br i1 %3, label %panic, label %checkok, !dbg !1305

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1306, !DIExpression(), !1307)
    #dbg_declare(ptr %1, !1308, !DIExpression(), !1307)
  %4 = load ptr, ptr %self, align 8, !dbg !1309
  %checknull = icmp eq ptr %4, null, !dbg !1309
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1309
  br i1 %5, label %panic3, label %checkok7, !dbg !1309

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1310, !DIExpression(), !1313)
  store i8 0, ptr %return_value, align 1, !dbg !1313
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !1313
  store i8 0, ptr %ptradd, align 1, !dbg !1313
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1313
  store i8 0, ptr %ptradd8, align 1, !dbg !1313
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !1313
  store i8 0, ptr %ptradd9, align 1, !dbg !1313
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1314
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !1316
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %return_value, i32 4, i1 false)
  %checknull12 = icmp eq ptr %expr, null, !dbg !1317
  %10 = call i1 @llvm.expect.i1(i1 %checknull12, i1 false), !dbg !1317
  br i1 %10, label %panic13, label %checkok17, !dbg !1317

checkok17:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %4, ptr align 1 %expr, i32 4, i1 false), !dbg !1317
  ret void, !dbg !1317

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 166), !dbg !1307
  unreachable, !dbg !1307

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 168), !dbg !1309
  unreachable, !dbg !1309

panic13:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 212), !dbg !1317
  unreachable, !dbg !1317
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Msws8Random.next_byte(ptr %0) #0 comdat !dbg !1319 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i8, align 1
  %self5 = alloca i8, align 1
  %shift = alloca i8, align 1
  %s1 = alloca i8, align 1
  %self21 = alloca i8, align 1
  %shift22 = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1322
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1322
  br i1 %2, label %panic, label %checkok, !dbg !1322

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1323, !DIExpression(), !1324)
    #dbg_declare(ptr %s0, !1325, !DIExpression(), !1326)
  %3 = load ptr, ptr %self, align 8, !dbg !1326
  %4 = load i8, ptr %3, align 1, !dbg !1326
  store i8 %4, ptr %s0, align 1, !dbg !1326
  %5 = load ptr, ptr %self, align 8, !dbg !1327
  %6 = load ptr, ptr %self, align 8, !dbg !1327
  %7 = load i8, ptr %6, align 1, !dbg !1327
  %zext = zext i8 %7 to i32, !dbg !1327
  %8 = load ptr, ptr %self, align 8, !dbg !1327
  %9 = load i8, ptr %8, align 1, !dbg !1327
  %zext3 = zext i8 %9 to i32, !dbg !1327
  %mul = mul i32 %zext, %zext3, !dbg !1327
  %10 = load ptr, ptr %self, align 8, !dbg !1327
  %ptradd = getelementptr inbounds i8, ptr %10, i64 2, !dbg !1327
  %11 = load i8, ptr %ptradd, align 1, !dbg !1327
  %zext4 = zext i8 %11 to i32, !dbg !1327
  %add = add i32 %mul, %zext4, !dbg !1327
  %trunc = trunc i32 %add to i8, !dbg !1327
  store i8 %trunc, ptr %5, align 1, !dbg !1327
  %12 = load ptr, ptr %self, align 8, !dbg !1328
  %13 = load ptr, ptr %self, align 8, !dbg !1328
  %14 = load i8, ptr %13, align 1
  store i8 %14, ptr %self5, align 1
  store i8 4, ptr %shift, align 1
  %15 = load i8, ptr %self5, align 1, !dbg !1329
  %16 = load i8, ptr %self5, align 1, !dbg !1329
  %17 = load i8, ptr %shift, align 1, !dbg !1329
  %18 = call i8 @llvm.fshr.i8(i8 %15, i8 %16, i8 %17), !dbg !1329
  store i8 %18, ptr %12, align 1, !dbg !1329
  %19 = load ptr, ptr %self, align 8, !dbg !1331
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !1331
  %20 = load i8, ptr %ptradd6, align 1, !dbg !1331
  %add7 = add i8 %20, -97, !dbg !1331
  store i8 %add7, ptr %ptradd6, align 1, !dbg !1331
  %21 = load ptr, ptr %self, align 8, !dbg !1332
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !1332
  %22 = load ptr, ptr %self, align 8, !dbg !1332
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 1, !dbg !1332
  %23 = load i8, ptr %ptradd9, align 1, !dbg !1332
  %zext10 = zext i8 %23 to i32, !dbg !1332
  %24 = load ptr, ptr %self, align 8, !dbg !1332
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 1, !dbg !1332
  %25 = load i8, ptr %ptradd11, align 1, !dbg !1332
  %zext12 = zext i8 %25 to i32, !dbg !1332
  %mul13 = mul i32 %zext10, %zext12, !dbg !1332
  %26 = load ptr, ptr %self, align 8, !dbg !1332
  %ptradd14 = getelementptr inbounds i8, ptr %26, i64 3, !dbg !1332
  %27 = load i8, ptr %ptradd14, align 1, !dbg !1332
  %zext15 = zext i8 %27 to i32, !dbg !1332
  %add16 = add i32 %mul13, %zext15, !dbg !1332
  %trunc17 = trunc i32 %add16 to i8, !dbg !1332
  store i8 %trunc17, ptr %ptradd8, align 1, !dbg !1332
    #dbg_declare(ptr %s1, !1333, !DIExpression(), !1334)
  %28 = load ptr, ptr %self, align 8, !dbg !1334
  %ptradd18 = getelementptr inbounds i8, ptr %28, i64 1, !dbg !1334
  %29 = load i8, ptr %ptradd18, align 1, !dbg !1334
  store i8 %29, ptr %s1, align 1, !dbg !1334
  %30 = load ptr, ptr %self, align 8, !dbg !1335
  %ptradd19 = getelementptr inbounds i8, ptr %30, i64 1, !dbg !1335
  %31 = load ptr, ptr %self, align 8, !dbg !1335
  %ptradd20 = getelementptr inbounds i8, ptr %31, i64 1, !dbg !1335
  %32 = load i8, ptr %ptradd20, align 1
  store i8 %32, ptr %self21, align 1
  store i8 4, ptr %shift22, align 1
  %33 = load i8, ptr %self21, align 1, !dbg !1336
  %34 = load i8, ptr %self21, align 1, !dbg !1336
  %35 = load i8, ptr %shift22, align 1, !dbg !1336
  %36 = call i8 @llvm.fshr.i8(i8 %33, i8 %34, i8 %35), !dbg !1336
  store i8 %36, ptr %ptradd19, align 1, !dbg !1336
  %37 = load ptr, ptr %self, align 8, !dbg !1338
  %ptradd23 = getelementptr inbounds i8, ptr %37, i64 3, !dbg !1338
  %38 = load i8, ptr %ptradd23, align 1, !dbg !1338
  %sub = sub i8 %38, -97, !dbg !1338
  store i8 %sub, ptr %ptradd23, align 1, !dbg !1338
  %39 = load i8, ptr %s0, align 1, !dbg !1339
  %zext24 = zext i8 %39 to i32, !dbg !1339
  %40 = load i8, ptr %s1, align 1, !dbg !1339
  %zext25 = zext i8 %40 to i32, !dbg !1339
  %add26 = add i32 %zext24, %zext25, !dbg !1339
  %trunc27 = trunc i32 %add26 to i8, !dbg !1339
  ret i8 %trunc27, !dbg !1339

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 171), !dbg !1324
  unreachable, !dbg !1324
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Msws8Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1340 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1341
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1341
  br i1 %3, label %panic, label %checkok, !dbg !1341

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1342, !DIExpression(), !1341)
    #dbg_declare(ptr %1, !1343, !DIExpression(), !1341)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1344, !DIExpression(), !1346)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1346
  %4 = load i64, ptr %ptradd, align 8, !dbg !1346
  store i64 %4, ptr %len, align 8, !dbg !1346
  br label %loop.cond, !dbg !1347

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !1348
  %lt = icmp ult i64 0, %5, !dbg !1348
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1348

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1350, !DIExpression(), !1352)
  %6 = load ptr, ptr %self, align 8, !dbg !1353
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !1352
  store i8 %7, ptr %value, align 1, !dbg !1352
  %8 = load i64, ptr %len, align 8, !dbg !1354
  %le = icmp ule i64 %8, 1, !dbg !1354
  br i1 %le, label %if.then, label %if.exit, !dbg !1354

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !1355
  %add = add i64 0, %10, !dbg !1355
  %size = sub i64 %add, 0, !dbg !1355
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !1355
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !1355
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !1355
  %14 = extractvalue %"char[]" %13, 0, !dbg !1355
  %15 = extractvalue %"char[]" %13, 1, !dbg !1355
  %gt = icmp ugt i64 0, %15, !dbg !1355
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1355
  br i1 %16, label %panic3, label %checkok11, !dbg !1355

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !1355
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1355
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !1355
  %19 = extractvalue %"char[]" %18, 0, !dbg !1355
  %20 = extractvalue %"char[]" %12, 0, !dbg !1355
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !1355
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !1355
  br label %expr_block.exit, !dbg !1357

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !1358
  %29 = extractvalue %"char[]" %28, 0, !dbg !1358
  %30 = extractvalue %"char[]" %28, 1, !dbg !1358
  %gt29 = icmp sgt i64 0, %30, !dbg !1358
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !1358
  br i1 %31, label %panic30, label %checkok40, !dbg !1358

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !1358
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !1358
  br i1 %32, label %panic42, label %checkok52, !dbg !1358

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !1358
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !1358
  %35 = extractvalue %"char[]" %34, 0, !dbg !1358
  %36 = extractvalue %"char[]" %27, 0, !dbg !1358
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !1358
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !1358
  %41 = load i64, ptr %len, align 8, !dbg !1359
  %sub = sub i64 %41, 1, !dbg !1359
  store i64 %sub, ptr %len, align 8, !dbg !1359
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !1360
  %43 = extractvalue %"char[]" %42, 0, !dbg !1360
  %44 = extractvalue %"char[]" %42, 1, !dbg !1360
  %gt69 = icmp ugt i64 1, %44, !dbg !1360
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !1360
  br i1 %45, label %panic70, label %checkok80, !dbg !1360

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !1360
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !1360
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !1360
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !1360
  store %"char[]" %47, ptr %bytes, align 8, !dbg !1360
  br label %loop.cond, !dbg !1360

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.79, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.80, i64 12 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.81, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 186, ptr align 8 %indirectarg86), !dbg !1361
  unreachable, !dbg !1364

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !1364

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 186), !dbg !1341
  unreachable, !dbg !1341

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !1355
  unreachable, !dbg !1355

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !1355
  unreachable, !dbg !1355

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !1358
  unreachable, !dbg !1358

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !1358
  unreachable, !dbg !1358

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !1358
  unreachable, !dbg !1358

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !1360
  unreachable, !dbg !1360
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Msws8Random.next_int128(ptr %0) #0 comdat !dbg !1365 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1368
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1368
  br i1 %2, label %panic, label %checkok, !dbg !1368

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1369, !DIExpression(), !1368)
  %3 = load ptr, ptr %self, align 8, !dbg !1370
  %4 = call i64 @std.math.random.Msws8Random.next_long(ptr %3), !dbg !1372
  %zext = zext i64 %4 to i128, !dbg !1372
  %shl = shl i128 %zext, 64, !dbg !1372
  %5 = freeze i128 %shl, !dbg !1372
  %6 = load ptr, ptr %self, align 8, !dbg !1370
  %7 = call i64 @std.math.random.Msws8Random.next_long(ptr %6), !dbg !1372
  %zext3 = zext i64 %7 to i128, !dbg !1372
  %add = add i128 %5, %zext3, !dbg !1372
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 187), !dbg !1368
  unreachable, !dbg !1368
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Msws8Random.next_long(ptr %0) #0 comdat !dbg !1373 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1376
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1376
  br i1 %2, label %panic, label %checkok, !dbg !1376

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1377, !DIExpression(), !1376)
  %3 = load ptr, ptr %self, align 8, !dbg !1378
  %4 = call i32 @std.math.random.Msws8Random.next_int(ptr %3), !dbg !1380
  %zext = zext i32 %4 to i64, !dbg !1380
  %shl = shl i64 %zext, 32, !dbg !1380
  %5 = freeze i64 %shl, !dbg !1380
  %6 = load ptr, ptr %self, align 8, !dbg !1378
  %7 = call i32 @std.math.random.Msws8Random.next_int(ptr %6), !dbg !1380
  %zext3 = zext i32 %7 to i64, !dbg !1380
  %add = add i64 %5, %zext3, !dbg !1380
  ret i64 %add, !dbg !1380

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 188), !dbg !1376
  unreachable, !dbg !1376
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Msws8Random.next_int(ptr %0) #0 comdat !dbg !1381 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1384
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1384
  br i1 %2, label %panic, label %checkok, !dbg !1384

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1385, !DIExpression(), !1384)
  %3 = load ptr, ptr %self, align 8, !dbg !1386
  %4 = call i16 @std.math.random.Msws8Random.next_short(ptr %3), !dbg !1388
  %zext = zext i16 %4 to i32, !dbg !1388
  %shl = shl i32 %zext, 16, !dbg !1388
  %5 = freeze i32 %shl, !dbg !1388
  %6 = load ptr, ptr %self, align 8, !dbg !1386
  %7 = call i16 @std.math.random.Msws8Random.next_short(ptr %6), !dbg !1388
  %zext3 = zext i16 %7 to i32, !dbg !1388
  %add = add i32 %5, %zext3, !dbg !1388
  ret i32 %add, !dbg !1388

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 189), !dbg !1384
  unreachable, !dbg !1384
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Msws8Random.next_short(ptr %0) #0 comdat !dbg !1389 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1392
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1392
  br i1 %2, label %panic, label %checkok, !dbg !1392

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1393, !DIExpression(), !1392)
  %3 = load ptr, ptr %self, align 8, !dbg !1394
  %4 = call i8 @std.math.random.Msws8Random.next_byte(ptr %3), !dbg !1396
  %zext = zext i8 %4 to i16, !dbg !1396
  %zext3 = zext i16 %zext to i32, !dbg !1396
  %shl = shl i32 %zext3, 8, !dbg !1396
  %5 = freeze i32 %shl, !dbg !1396
  %6 = load ptr, ptr %self, align 8, !dbg !1394
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !1396
  %zext4 = zext i8 %7 to i32, !dbg !1396
  %add = add i32 %5, %zext4, !dbg !1396
  %trunc = trunc i32 %add to i16, !dbg !1396
  ret i16 %trunc, !dbg !1396

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.64, i64 12 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 190), !dbg !1392
  unreachable, !dbg !1392
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1397 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1402
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1402
  br i1 %3, label %panic, label %checkok, !dbg !1402

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1403, !DIExpression(), !1404)
    #dbg_declare(ptr %1, !1405, !DIExpression(), !1404)
  %4 = load ptr, ptr %self, align 8, !dbg !1406
  %checknull = icmp eq ptr %4, null, !dbg !1406
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1406
  br i1 %5, label %panic3, label %checkok7, !dbg !1406

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1407, !DIExpression(), !1409)
  store i128 0, ptr %return_value, align 16, !dbg !1409
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1410
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1412
  %10 = load i128, ptr %return_value, align 16, !dbg !1413
  store i128 %10, ptr %4, align 16, !dbg !1413
  ret void, !dbg !1413

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20), !dbg !1404
  unreachable, !dbg !1404

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 22), !dbg !1406
  unreachable, !dbg !1406
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg128Random.next_long(ptr %0) #0 comdat !dbg !1414 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i128, align 16
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %self36 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1417
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1417
  br i1 %2, label %panic, label %checkok, !dbg !1417

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1418, !DIExpression(), !1419)
    #dbg_declare(ptr %s, !1420, !DIExpression(), !1421)
  %3 = load ptr, ptr %self, align 8, !dbg !1421
  store ptr %3, ptr %s, align 8, !dbg !1421
    #dbg_declare(ptr %xor, !1422, !DIExpression(), !1423)
  %4 = load ptr, ptr %s, align 8, !dbg !1423
  %checknull = icmp eq ptr %4, null, !dbg !1423
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1423
  br i1 %5, label %panic3, label %checkok7, !dbg !1423

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !1423
  %7 = load ptr, ptr %s, align 8, !dbg !1423
  %checknull8 = icmp eq ptr %7, null, !dbg !1423
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1423
  br i1 %8, label %panic9, label %checkok13, !dbg !1423

checkok13:                                        ; preds = %checkok7
  %9 = load i128, ptr %7, align 16, !dbg !1423
  %lshr = lshr i128 %9, 35, !dbg !1423
  %10 = freeze i128 %lshr, !dbg !1423
  %xor14 = xor i128 %6, %10, !dbg !1423
  store i128 %xor14, ptr %xor, align 16, !dbg !1423
    #dbg_declare(ptr %rot, !1424, !DIExpression(), !1425)
  %11 = load ptr, ptr %s, align 8, !dbg !1425
  %checknull15 = icmp eq ptr %11, null, !dbg !1425
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1425
  br i1 %12, label %panic16, label %checkok20, !dbg !1425

checkok20:                                        ; preds = %checkok13
  %13 = load i128, ptr %11, align 16, !dbg !1425
  %lshr21 = lshr i128 %13, 122, !dbg !1425
  %14 = freeze i128 %lshr21, !dbg !1425
  %trunc = trunc i128 %14 to i8, !dbg !1425
  store i8 %trunc, ptr %rot, align 1, !dbg !1425
  %15 = load ptr, ptr %s, align 8, !dbg !1426
  %checknull22 = icmp eq ptr %15, null, !dbg !1426
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !1426
  br i1 %16, label %panic23, label %checkok27, !dbg !1426

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !1426
  %checknull28 = icmp eq ptr %17, null, !dbg !1426
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !1426
  br i1 %18, label %panic29, label %checkok33, !dbg !1426

checkok33:                                        ; preds = %checkok27
  %19 = load i128, ptr %17, align 16, !dbg !1426
  %mul = mul i128 %19, -48899967401452674293065485854872568811, !dbg !1426
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !1426
  store i128 %add, ptr %15, align 16, !dbg !1426
  %20 = load i128, ptr %xor, align 16, !dbg !1427
  %lshr34 = lshr i128 %20, 58, !dbg !1427
  %21 = freeze i128 %lshr34, !dbg !1427
  %trunc35 = trunc i128 %21 to i64, !dbg !1427
  store i64 %trunc35, ptr %self36, align 8
  %22 = load i8, ptr %rot, align 1, !dbg !1427
  %zext = zext i8 %22 to i64, !dbg !1427
  store i64 %zext, ptr %shift, align 8
  %23 = load i64, ptr %self36, align 8, !dbg !1428
  %24 = load i64, ptr %self36, align 8, !dbg !1428
  %25 = load i64, ptr %shift, align 8, !dbg !1428
  %26 = call i64 @llvm.fshr.i64(i64 %23, i64 %24, i64 %25), !dbg !1428
  ret i64 %26, !dbg !1428

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 26), !dbg !1419
  unreachable, !dbg !1419

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 30), !dbg !1423
  unreachable, !dbg !1423

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 30), !dbg !1423
  unreachable, !dbg !1423

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg19, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 31), !dbg !1425
  unreachable, !dbg !1425

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg26, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 32), !dbg !1426
  unreachable, !dbg !1426

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg32, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 32), !dbg !1426
  unreachable, !dbg !1426
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1430 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1431
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1431
  br i1 %3, label %panic, label %checkok, !dbg !1431

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1432, !DIExpression(), !1431)
    #dbg_declare(ptr %1, !1433, !DIExpression(), !1431)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1434
  %4 = load i64, ptr %ptradd, align 8, !dbg !1434
  %lt = icmp ult i64 0, %4, !dbg !1434
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1434

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 37), !dbg !1434
  unreachable, !dbg !1434

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1436, !DIExpression(), !1438)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1438
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1438
  store i64 %6, ptr %len, align 8, !dbg !1438
  br label %loop.cond, !dbg !1439

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1440
  %lt7 = icmp ult i64 0, %7, !dbg !1440
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1440

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1442, !DIExpression(), !1444)
  %8 = load ptr, ptr %self, align 8, !dbg !1445
  %9 = call i64 @std.math.random.Pcg128Random.next_long(ptr %8), !dbg !1444
  store i64 %9, ptr %value, align 8, !dbg !1444
  %10 = load i64, ptr %len, align 8, !dbg !1446
  %le = icmp ule i64 %10, 8, !dbg !1446
  br i1 %le, label %if.then, label %if.exit, !dbg !1446

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1447
  %add = add i64 0, %12, !dbg !1447
  %size = sub i64 %add, 0, !dbg !1447
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1447
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1447
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1447
  %16 = extractvalue %"char[]" %15, 0, !dbg !1447
  %17 = extractvalue %"char[]" %15, 1, !dbg !1447
  %gt = icmp ugt i64 0, %17, !dbg !1447
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1447
  br i1 %18, label %panic8, label %checkok16, !dbg !1447

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1447
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1447
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1447
  %21 = extractvalue %"char[]" %20, 0, !dbg !1447
  %22 = extractvalue %"char[]" %14, 0, !dbg !1447
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1447
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1447
  br label %expr_block.exit, !dbg !1449

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1450
  %31 = extractvalue %"char[]" %30, 0, !dbg !1450
  %32 = extractvalue %"char[]" %30, 1, !dbg !1450
  %gt34 = icmp sgt i64 0, %32, !dbg !1450
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1450
  br i1 %33, label %panic35, label %checkok45, !dbg !1450

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !1450
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1450
  br i1 %34, label %panic47, label %checkok57, !dbg !1450

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1450
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !1450
  %37 = extractvalue %"char[]" %36, 0, !dbg !1450
  %38 = extractvalue %"char[]" %29, 0, !dbg !1450
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1450
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1450
  %43 = load i64, ptr %len, align 8, !dbg !1451
  %sub = sub i64 %43, 8, !dbg !1451
  store i64 %sub, ptr %len, align 8, !dbg !1451
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1452
  %45 = extractvalue %"char[]" %44, 0, !dbg !1452
  %46 = extractvalue %"char[]" %44, 1, !dbg !1452
  %gt74 = icmp ugt i64 8, %46, !dbg !1452
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1452
  br i1 %47, label %panic75, label %checkok85, !dbg !1452

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !1452
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !1452
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1452
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1452
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1452
  br label %loop.cond, !dbg !1452

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.98, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.99, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.100, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 39, ptr align 8 %indirectarg91), !dbg !1453
  unreachable, !dbg !1456

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1456

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 39), !dbg !1431
  unreachable, !dbg !1431

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1447
  unreachable, !dbg !1447

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1447
  unreachable, !dbg !1447

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1450
  unreachable, !dbg !1450

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1450
  unreachable, !dbg !1450

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1450
  unreachable, !dbg !1450

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1452
  unreachable, !dbg !1452
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg128Random.next_int128(ptr %0) #0 comdat !dbg !1457 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1460
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1460
  br i1 %2, label %panic, label %checkok, !dbg !1460

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1461, !DIExpression(), !1460)
  %3 = load ptr, ptr %self, align 8, !dbg !1462
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1464
  %zext = zext i64 %4 to i128, !dbg !1464
  %shl = shl i128 %zext, 64, !dbg !1464
  %5 = freeze i128 %shl, !dbg !1464
  %6 = load ptr, ptr %self, align 8, !dbg !1462
  %7 = call i64 @std.math.random.Pcg128Random.next_long(ptr %6), !dbg !1464
  %zext3 = zext i64 %7 to i128, !dbg !1464
  %add = add i128 %5, %zext3, !dbg !1464
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 40), !dbg !1460
  unreachable, !dbg !1460
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg128Random.next_int(ptr %0) #0 comdat !dbg !1465 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1468
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1468
  br i1 %2, label %panic, label %checkok, !dbg !1468

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1469, !DIExpression(), !1468)
  %3 = load ptr, ptr %self, align 8, !dbg !1468
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1468
  %trunc = trunc i64 %4 to i32, !dbg !1468
  ret i32 %trunc, !dbg !1468

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 41), !dbg !1468
  unreachable, !dbg !1468
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg128Random.next_short(ptr %0) #0 comdat !dbg !1470 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1473
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1473
  br i1 %2, label %panic, label %checkok, !dbg !1473

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1474, !DIExpression(), !1473)
  %3 = load ptr, ptr %self, align 8, !dbg !1473
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1473
  %trunc = trunc i64 %4 to i16, !dbg !1473
  ret i16 %trunc, !dbg !1473

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 42), !dbg !1473
  unreachable, !dbg !1473
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg128Random.next_byte(ptr %0) #0 comdat !dbg !1475 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1478
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1478
  br i1 %2, label %panic, label %checkok, !dbg !1478

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1479, !DIExpression(), !1478)
  %3 = load ptr, ptr %self, align 8, !dbg !1478
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !1478
  %trunc = trunc i64 %4 to i8, !dbg !1478
  ret i8 %trunc, !dbg !1478

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 43), !dbg !1478
  unreachable, !dbg !1478
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1480 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1485
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1485
  br i1 %3, label %panic, label %checkok, !dbg !1485

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1486, !DIExpression(), !1487)
    #dbg_declare(ptr %1, !1488, !DIExpression(), !1487)
  %4 = load ptr, ptr %self, align 8, !dbg !1489
  %checknull = icmp eq ptr %4, null, !dbg !1489
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1489
  br i1 %5, label %panic3, label %checkok7, !dbg !1489

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1490, !DIExpression(), !1492)
  store i64 0, ptr %return_value, align 8, !dbg !1492
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1493
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1495
  %10 = load i64, ptr %return_value, align 8, !dbg !1496
  store i64 %10, ptr %4, align 8, !dbg !1496
  ret void, !dbg !1496

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 49), !dbg !1487
  unreachable, !dbg !1487

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 51), !dbg !1489
  unreachable, !dbg !1489
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg64Random.next_int(ptr %0) #0 comdat !dbg !1497 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %self36 = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !1500
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1500
  br i1 %2, label %panic, label %checkok, !dbg !1500

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1501, !DIExpression(), !1502)
    #dbg_declare(ptr %s, !1503, !DIExpression(), !1504)
  %3 = load ptr, ptr %self, align 8, !dbg !1504
  store ptr %3, ptr %s, align 8, !dbg !1504
    #dbg_declare(ptr %xor, !1505, !DIExpression(), !1506)
  %4 = load ptr, ptr %s, align 8, !dbg !1506
  %checknull = icmp eq ptr %4, null, !dbg !1506
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1506
  br i1 %5, label %panic3, label %checkok7, !dbg !1506

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !1506
  %7 = load ptr, ptr %s, align 8, !dbg !1506
  %checknull8 = icmp eq ptr %7, null, !dbg !1506
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1506
  br i1 %8, label %panic9, label %checkok13, !dbg !1506

checkok13:                                        ; preds = %checkok7
  %9 = load i64, ptr %7, align 8, !dbg !1506
  %lshr = lshr i64 %9, 18, !dbg !1506
  %10 = freeze i64 %lshr, !dbg !1506
  %xor14 = xor i64 %6, %10, !dbg !1506
  store i64 %xor14, ptr %xor, align 8, !dbg !1506
    #dbg_declare(ptr %rot, !1507, !DIExpression(), !1508)
  %11 = load ptr, ptr %s, align 8, !dbg !1508
  %checknull15 = icmp eq ptr %11, null, !dbg !1508
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1508
  br i1 %12, label %panic16, label %checkok20, !dbg !1508

checkok20:                                        ; preds = %checkok13
  %13 = load i64, ptr %11, align 8, !dbg !1508
  %lshr21 = lshr i64 %13, 59, !dbg !1508
  %14 = freeze i64 %lshr21, !dbg !1508
  %trunc = trunc i64 %14 to i8, !dbg !1508
  store i8 %trunc, ptr %rot, align 1, !dbg !1508
  %15 = load ptr, ptr %s, align 8, !dbg !1509
  %checknull22 = icmp eq ptr %15, null, !dbg !1509
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !1509
  br i1 %16, label %panic23, label %checkok27, !dbg !1509

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !1509
  %checknull28 = icmp eq ptr %17, null, !dbg !1509
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !1509
  br i1 %18, label %panic29, label %checkok33, !dbg !1509

checkok33:                                        ; preds = %checkok27
  %19 = load i64, ptr %17, align 8, !dbg !1509
  %mul = mul i64 %19, -3372029247567499371, !dbg !1509
  %add = add i64 %mul, -7046029254386353131, !dbg !1509
  store i64 %add, ptr %15, align 8, !dbg !1509
  %20 = load i64, ptr %xor, align 8, !dbg !1510
  %lshr34 = lshr i64 %20, 27, !dbg !1510
  %21 = freeze i64 %lshr34, !dbg !1510
  %trunc35 = trunc i64 %21 to i32, !dbg !1510
  store i32 %trunc35, ptr %self36, align 4
  %22 = load i8, ptr %rot, align 1, !dbg !1510
  %zext = zext i8 %22 to i32, !dbg !1510
  store i32 %zext, ptr %shift, align 4
  %23 = load i32, ptr %self36, align 4, !dbg !1511
  %24 = load i32, ptr %self36, align 4, !dbg !1511
  %25 = load i32, ptr %shift, align 4, !dbg !1511
  %26 = call i32 @llvm.fshr.i32(i32 %23, i32 %24, i32 %25), !dbg !1511
  ret i32 %26, !dbg !1511

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 54), !dbg !1502
  unreachable, !dbg !1502

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 58), !dbg !1506
  unreachable, !dbg !1506

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 58), !dbg !1506
  unreachable, !dbg !1506

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg19, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 59), !dbg !1508
  unreachable, !dbg !1508

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg26, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 60), !dbg !1509
  unreachable, !dbg !1509

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg32, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 60), !dbg !1509
  unreachable, !dbg !1509
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1513 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1514
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1514
  br i1 %3, label %panic, label %checkok, !dbg !1514

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1515, !DIExpression(), !1514)
    #dbg_declare(ptr %1, !1516, !DIExpression(), !1514)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1517
  %4 = load i64, ptr %ptradd, align 8, !dbg !1517
  %lt = icmp ult i64 0, %4, !dbg !1517
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1517

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 65), !dbg !1517
  unreachable, !dbg !1517

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1519, !DIExpression(), !1521)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1521
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1521
  store i64 %6, ptr %len, align 8, !dbg !1521
  br label %loop.cond, !dbg !1522

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1523
  %lt7 = icmp ult i64 0, %7, !dbg !1523
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1523

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1525, !DIExpression(), !1527)
  %8 = load ptr, ptr %self, align 8, !dbg !1528
  %9 = call i32 @std.math.random.Pcg64Random.next_int(ptr %8), !dbg !1527
  store i32 %9, ptr %value, align 4, !dbg !1527
  %10 = load i64, ptr %len, align 8, !dbg !1529
  %le = icmp ule i64 %10, 4, !dbg !1529
  br i1 %le, label %if.then, label %if.exit, !dbg !1529

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1530
  %add = add i64 0, %12, !dbg !1530
  %size = sub i64 %add, 0, !dbg !1530
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1530
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1530
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1530
  %16 = extractvalue %"char[]" %15, 0, !dbg !1530
  %17 = extractvalue %"char[]" %15, 1, !dbg !1530
  %gt = icmp ugt i64 0, %17, !dbg !1530
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1530
  br i1 %18, label %panic8, label %checkok16, !dbg !1530

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1530
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1530
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1530
  %21 = extractvalue %"char[]" %20, 0, !dbg !1530
  %22 = extractvalue %"char[]" %14, 0, !dbg !1530
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1530
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1530
  br label %expr_block.exit, !dbg !1532

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1533
  %31 = extractvalue %"char[]" %30, 0, !dbg !1533
  %32 = extractvalue %"char[]" %30, 1, !dbg !1533
  %gt34 = icmp sgt i64 0, %32, !dbg !1533
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1533
  br i1 %33, label %panic35, label %checkok45, !dbg !1533

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !1533
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1533
  br i1 %34, label %panic47, label %checkok57, !dbg !1533

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1533
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !1533
  %37 = extractvalue %"char[]" %36, 0, !dbg !1533
  %38 = extractvalue %"char[]" %29, 0, !dbg !1533
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1533
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1533
  %43 = load i64, ptr %len, align 8, !dbg !1534
  %sub = sub i64 %43, 4, !dbg !1534
  store i64 %sub, ptr %len, align 8, !dbg !1534
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1535
  %45 = extractvalue %"char[]" %44, 0, !dbg !1535
  %46 = extractvalue %"char[]" %44, 1, !dbg !1535
  %gt74 = icmp ugt i64 4, %46, !dbg !1535
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1535
  br i1 %47, label %panic75, label %checkok85, !dbg !1535

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !1535
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !1535
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1535
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1535
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1535
  br label %loop.cond, !dbg !1535

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.101, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.102, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.103, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 67, ptr align 8 %indirectarg91), !dbg !1536
  unreachable, !dbg !1539

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1539

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67), !dbg !1514
  unreachable, !dbg !1514

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1530
  unreachable, !dbg !1530

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1530
  unreachable, !dbg !1530

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1533
  unreachable, !dbg !1533

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1533
  unreachable, !dbg !1533

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1533
  unreachable, !dbg !1533

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1535
  unreachable, !dbg !1535
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg64Random.next_int128(ptr %0) #0 comdat !dbg !1540 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1543
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1543
  br i1 %2, label %panic, label %checkok, !dbg !1543

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1544, !DIExpression(), !1543)
  %3 = load ptr, ptr %self, align 8, !dbg !1545
  %4 = call i64 @std.math.random.Pcg64Random.next_long(ptr %3), !dbg !1547
  %zext = zext i64 %4 to i128, !dbg !1547
  %shl = shl i128 %zext, 64, !dbg !1547
  %5 = freeze i128 %shl, !dbg !1547
  %6 = load ptr, ptr %self, align 8, !dbg !1545
  %7 = call i64 @std.math.random.Pcg64Random.next_long(ptr %6), !dbg !1547
  %zext3 = zext i64 %7 to i128, !dbg !1547
  %add = add i128 %5, %zext3, !dbg !1547
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68), !dbg !1543
  unreachable, !dbg !1543
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg64Random.next_long(ptr %0) #0 comdat !dbg !1548 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1551
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1551
  br i1 %2, label %panic, label %checkok, !dbg !1551

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1552, !DIExpression(), !1551)
  %3 = load ptr, ptr %self, align 8, !dbg !1553
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !1555
  %zext = zext i32 %4 to i64, !dbg !1555
  %shl = shl i64 %zext, 32, !dbg !1555
  %5 = freeze i64 %shl, !dbg !1555
  %6 = load ptr, ptr %self, align 8, !dbg !1553
  %7 = call i32 @std.math.random.Pcg64Random.next_int(ptr %6), !dbg !1555
  %zext3 = zext i32 %7 to i64, !dbg !1555
  %add = add i64 %5, %zext3, !dbg !1555
  ret i64 %add, !dbg !1555

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 69), !dbg !1551
  unreachable, !dbg !1551
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg64Random.next_short(ptr %0) #0 comdat !dbg !1556 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1559
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1559
  br i1 %2, label %panic, label %checkok, !dbg !1559

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1560, !DIExpression(), !1559)
  %3 = load ptr, ptr %self, align 8, !dbg !1559
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !1559
  %trunc = trunc i32 %4 to i16, !dbg !1559
  ret i16 %trunc, !dbg !1559

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 70), !dbg !1559
  unreachable, !dbg !1559
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg64Random.next_byte(ptr %0) #0 comdat !dbg !1561 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1564
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1564
  br i1 %2, label %panic, label %checkok, !dbg !1564

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1565, !DIExpression(), !1564)
  %3 = load ptr, ptr %self, align 8, !dbg !1564
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !1564
  %trunc = trunc i32 %4 to i8, !dbg !1564
  ret i8 %trunc, !dbg !1564

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 71), !dbg !1564
  unreachable, !dbg !1564
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1566 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1571
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1571
  br i1 %3, label %panic, label %checkok, !dbg !1571

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1572, !DIExpression(), !1573)
    #dbg_declare(ptr %1, !1574, !DIExpression(), !1573)
  %4 = load ptr, ptr %self, align 8, !dbg !1575
  %checknull = icmp eq ptr %4, null, !dbg !1575
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1575
  br i1 %5, label %panic3, label %checkok7, !dbg !1575

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1576, !DIExpression(), !1578)
  store i32 0, ptr %return_value, align 4, !dbg !1578
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1579
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1581
  %10 = load i32, ptr %return_value, align 4, !dbg !1582
  store i32 %10, ptr %4, align 4, !dbg !1582
  ret void, !dbg !1582

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 78), !dbg !1573
  unreachable, !dbg !1573

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 80), !dbg !1575
  unreachable, !dbg !1575
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg32Random.next_short(ptr %0) #0 comdat !dbg !1583 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i32, align 4
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg31 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %self36 = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1586
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1586
  br i1 %2, label %panic, label %checkok, !dbg !1586

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1587, !DIExpression(), !1588)
    #dbg_declare(ptr %s, !1589, !DIExpression(), !1590)
  %3 = load ptr, ptr %self, align 8, !dbg !1590
  store ptr %3, ptr %s, align 8, !dbg !1590
    #dbg_declare(ptr %xor, !1591, !DIExpression(), !1592)
  %4 = load ptr, ptr %s, align 8, !dbg !1592
  %checknull = icmp eq ptr %4, null, !dbg !1592
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1592
  br i1 %5, label %panic3, label %checkok7, !dbg !1592

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !1592
  %7 = load ptr, ptr %s, align 8, !dbg !1592
  %checknull8 = icmp eq ptr %7, null, !dbg !1592
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1592
  br i1 %8, label %panic9, label %checkok13, !dbg !1592

checkok13:                                        ; preds = %checkok7
  %9 = load i32, ptr %7, align 4, !dbg !1592
  %lshr = lshr i32 %9, 10, !dbg !1592
  %10 = freeze i32 %lshr, !dbg !1592
  %xor14 = xor i32 %6, %10, !dbg !1592
  store i32 %xor14, ptr %xor, align 4, !dbg !1592
    #dbg_declare(ptr %rot, !1593, !DIExpression(), !1594)
  %11 = load ptr, ptr %s, align 8, !dbg !1594
  %checknull15 = icmp eq ptr %11, null, !dbg !1594
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !1594
  br i1 %12, label %panic16, label %checkok20, !dbg !1594

checkok20:                                        ; preds = %checkok13
  %13 = load i32, ptr %11, align 4, !dbg !1594
  %lshr21 = lshr i32 %13, 28, !dbg !1594
  %14 = freeze i32 %lshr21, !dbg !1594
  %trunc = trunc i32 %14 to i8, !dbg !1594
  store i8 %trunc, ptr %rot, align 1, !dbg !1594
  %15 = load ptr, ptr %s, align 8, !dbg !1595
  %checknull22 = icmp eq ptr %15, null, !dbg !1595
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !1595
  br i1 %16, label %panic23, label %checkok27, !dbg !1595

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !1595
  %checknull28 = icmp eq ptr %17, null, !dbg !1595
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !1595
  br i1 %18, label %panic29, label %checkok33, !dbg !1595

checkok33:                                        ; preds = %checkok27
  %19 = load i32, ptr %17, align 4, !dbg !1595
  %mul = mul i32 %19, -1856014347, !dbg !1595
  %add = add i32 %mul, -1640531527, !dbg !1595
  store i32 %add, ptr %15, align 4, !dbg !1595
  %20 = load i32, ptr %xor, align 4, !dbg !1596
  %lshr34 = lshr i32 %20, 12, !dbg !1596
  %21 = freeze i32 %lshr34, !dbg !1596
  %trunc35 = trunc i32 %21 to i16, !dbg !1596
  store i16 %trunc35, ptr %self36, align 2
  %22 = load i8, ptr %rot, align 1, !dbg !1596
  %zext = zext i8 %22 to i16, !dbg !1596
  store i16 %zext, ptr %shift, align 2
  %23 = load i16, ptr %self36, align 2, !dbg !1597
  %24 = load i16, ptr %self36, align 2, !dbg !1597
  %25 = load i16, ptr %shift, align 2, !dbg !1597
  %26 = call i16 @llvm.fshr.i16(i16 %23, i16 %24, i16 %25), !dbg !1597
  ret i16 %26, !dbg !1597

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 83), !dbg !1588
  unreachable, !dbg !1588

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 87), !dbg !1592
  unreachable, !dbg !1592

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 87), !dbg !1592
  unreachable, !dbg !1592

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg19, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 88), !dbg !1594
  unreachable, !dbg !1594

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg26, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 89), !dbg !1595
  unreachable, !dbg !1595

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg30, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg31, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg32, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg30, ptr align 8 %indirectarg31, ptr align 8 %indirectarg32, i32 89), !dbg !1595
  unreachable, !dbg !1595
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1599 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1600
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1600
  br i1 %3, label %panic, label %checkok, !dbg !1600

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1601, !DIExpression(), !1600)
    #dbg_declare(ptr %1, !1602, !DIExpression(), !1600)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1603
  %4 = load i64, ptr %ptradd, align 8, !dbg !1603
  %lt = icmp ult i64 0, %4, !dbg !1603
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1603

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 94), !dbg !1603
  unreachable, !dbg !1603

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1605, !DIExpression(), !1607)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1607
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1607
  store i64 %6, ptr %len, align 8, !dbg !1607
  br label %loop.cond, !dbg !1608

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1609
  %lt7 = icmp ult i64 0, %7, !dbg !1609
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1609

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1611, !DIExpression(), !1613)
  %8 = load ptr, ptr %self, align 8, !dbg !1614
  %9 = call i16 @std.math.random.Pcg32Random.next_short(ptr %8), !dbg !1613
  store i16 %9, ptr %value, align 2, !dbg !1613
  %10 = load i64, ptr %len, align 8, !dbg !1615
  %le = icmp ule i64 %10, 2, !dbg !1615
  br i1 %le, label %if.then, label %if.exit, !dbg !1615

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !1616
  %add = add i64 0, %12, !dbg !1616
  %size = sub i64 %add, 0, !dbg !1616
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !1616
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !1616
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !1616
  %16 = extractvalue %"char[]" %15, 0, !dbg !1616
  %17 = extractvalue %"char[]" %15, 1, !dbg !1616
  %gt = icmp ugt i64 0, %17, !dbg !1616
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1616
  br i1 %18, label %panic8, label %checkok16, !dbg !1616

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !1616
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !1616
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !1616
  %21 = extractvalue %"char[]" %20, 0, !dbg !1616
  %22 = extractvalue %"char[]" %14, 0, !dbg !1616
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !1616
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !1616
  br label %expr_block.exit, !dbg !1618

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !1619
  %31 = extractvalue %"char[]" %30, 0, !dbg !1619
  %32 = extractvalue %"char[]" %30, 1, !dbg !1619
  %gt34 = icmp sgt i64 0, %32, !dbg !1619
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1619
  br i1 %33, label %panic35, label %checkok45, !dbg !1619

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !1619
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1619
  br i1 %34, label %panic47, label %checkok57, !dbg !1619

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !1619
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !1619
  %37 = extractvalue %"char[]" %36, 0, !dbg !1619
  %38 = extractvalue %"char[]" %29, 0, !dbg !1619
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !1619
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !1619
  %43 = load i64, ptr %len, align 8, !dbg !1620
  %sub = sub i64 %43, 2, !dbg !1620
  store i64 %sub, ptr %len, align 8, !dbg !1620
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !1621
  %45 = extractvalue %"char[]" %44, 0, !dbg !1621
  %46 = extractvalue %"char[]" %44, 1, !dbg !1621
  %gt74 = icmp ugt i64 2, %46, !dbg !1621
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1621
  br i1 %47, label %panic75, label %checkok85, !dbg !1621

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !1621
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !1621
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1621
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !1621
  store %"char[]" %49, ptr %bytes, align 8, !dbg !1621
  br label %loop.cond, !dbg !1621

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.104, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.105, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.106, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 96, ptr align 8 %indirectarg91), !dbg !1622
  unreachable, !dbg !1625

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1625

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96), !dbg !1600
  unreachable, !dbg !1600

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1616
  unreachable, !dbg !1616

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1616
  unreachable, !dbg !1616

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1619
  unreachable, !dbg !1619

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1619
  unreachable, !dbg !1619

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1619
  unreachable, !dbg !1619

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1621
  unreachable, !dbg !1621
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg32Random.next_int128(ptr %0) #0 comdat !dbg !1626 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1629
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1629
  br i1 %2, label %panic, label %checkok, !dbg !1629

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1630, !DIExpression(), !1629)
  %3 = load ptr, ptr %self, align 8, !dbg !1631
  %4 = call i64 @std.math.random.Pcg32Random.next_long(ptr %3), !dbg !1633
  %zext = zext i64 %4 to i128, !dbg !1633
  %shl = shl i128 %zext, 64, !dbg !1633
  %5 = freeze i128 %shl, !dbg !1633
  %6 = load ptr, ptr %self, align 8, !dbg !1631
  %7 = call i64 @std.math.random.Pcg32Random.next_long(ptr %6), !dbg !1633
  %zext3 = zext i64 %7 to i128, !dbg !1633
  %add = add i128 %5, %zext3, !dbg !1633
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97), !dbg !1629
  unreachable, !dbg !1629
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg32Random.next_long(ptr %0) #0 comdat !dbg !1634 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1637
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1637
  br i1 %2, label %panic, label %checkok, !dbg !1637

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1638, !DIExpression(), !1637)
  %3 = load ptr, ptr %self, align 8, !dbg !1639
  %4 = call i32 @std.math.random.Pcg32Random.next_int(ptr %3), !dbg !1641
  %zext = zext i32 %4 to i64, !dbg !1641
  %shl = shl i64 %zext, 32, !dbg !1641
  %5 = freeze i64 %shl, !dbg !1641
  %6 = load ptr, ptr %self, align 8, !dbg !1639
  %7 = call i32 @std.math.random.Pcg32Random.next_int(ptr %6), !dbg !1641
  %zext3 = zext i32 %7 to i64, !dbg !1641
  %add = add i64 %5, %zext3, !dbg !1641
  ret i64 %add, !dbg !1641

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 98), !dbg !1637
  unreachable, !dbg !1637
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg32Random.next_int(ptr %0) #0 comdat !dbg !1642 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1645
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1645
  br i1 %2, label %panic, label %checkok, !dbg !1645

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1646, !DIExpression(), !1645)
  %3 = load ptr, ptr %self, align 8, !dbg !1647
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !1649
  %zext = zext i16 %4 to i32, !dbg !1649
  %shl = shl i32 %zext, 16, !dbg !1649
  %5 = freeze i32 %shl, !dbg !1649
  %6 = load ptr, ptr %self, align 8, !dbg !1647
  %7 = call i16 @std.math.random.Pcg32Random.next_short(ptr %6), !dbg !1649
  %zext3 = zext i16 %7 to i32, !dbg !1649
  %add = add i32 %5, %zext3, !dbg !1649
  ret i32 %add, !dbg !1649

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 99), !dbg !1645
  unreachable, !dbg !1645
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg32Random.next_byte(ptr %0) #0 comdat !dbg !1650 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1653
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1653
  br i1 %2, label %panic, label %checkok, !dbg !1653

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1654, !DIExpression(), !1653)
  %3 = load ptr, ptr %self, align 8, !dbg !1653
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !1653
  %trunc = trunc i16 %4 to i8, !dbg !1653
  ret i8 %trunc, !dbg !1653

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 100), !dbg !1653
  unreachable, !dbg !1653
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1655 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1660
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1660
  br i1 %3, label %panic, label %checkok, !dbg !1660

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1661, !DIExpression(), !1662)
    #dbg_declare(ptr %1, !1663, !DIExpression(), !1662)
  %4 = load ptr, ptr %self, align 8, !dbg !1664
  %checknull = icmp eq ptr %4, null, !dbg !1664
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1664
  br i1 %5, label %panic3, label %checkok7, !dbg !1664

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1665, !DIExpression(), !1667)
  store i16 0, ptr %return_value, align 2, !dbg !1667
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1668
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 2, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1670
  %10 = load i16, ptr %return_value, align 2, !dbg !1671
  store i16 %10, ptr %4, align 2, !dbg !1671
  ret void, !dbg !1671

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 106), !dbg !1662
  unreachable, !dbg !1662

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 108), !dbg !1664
  unreachable, !dbg !1664
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Pcg16Random.next_byte(ptr %0) #0 comdat !dbg !1672 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i16, align 2
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %self42 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1675
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1675
  br i1 %2, label %panic, label %checkok, !dbg !1675

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1676, !DIExpression(), !1677)
    #dbg_declare(ptr %s, !1678, !DIExpression(), !1679)
  %3 = load ptr, ptr %self, align 8, !dbg !1679
  store ptr %3, ptr %s, align 8, !dbg !1679
    #dbg_declare(ptr %xor, !1680, !DIExpression(), !1681)
  %4 = load ptr, ptr %s, align 8, !dbg !1681
  %checknull = icmp eq ptr %4, null, !dbg !1681
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1681
  br i1 %5, label %panic3, label %checkok7, !dbg !1681

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !1681
  %zext = zext i16 %6 to i32, !dbg !1681
  %7 = load ptr, ptr %s, align 8, !dbg !1681
  %checknull8 = icmp eq ptr %7, null, !dbg !1681
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1681
  br i1 %8, label %panic9, label %checkok13, !dbg !1681

checkok13:                                        ; preds = %checkok7
  %9 = load i16, ptr %7, align 2, !dbg !1681
  %zext14 = zext i16 %9 to i32, !dbg !1681
  %lshr = lshr i32 %zext14, 5, !dbg !1681
  %10 = freeze i32 %lshr, !dbg !1681
  %xor15 = xor i32 %zext, %10, !dbg !1681
  %trunc = trunc i32 %xor15 to i16, !dbg !1681
  store i16 %trunc, ptr %xor, align 2, !dbg !1681
    #dbg_declare(ptr %rot, !1682, !DIExpression(), !1683)
  %11 = load ptr, ptr %s, align 8, !dbg !1683
  %checknull16 = icmp eq ptr %11, null, !dbg !1683
  %12 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !1683
  br i1 %12, label %panic17, label %checkok21, !dbg !1683

checkok21:                                        ; preds = %checkok13
  %13 = load i16, ptr %11, align 2, !dbg !1683
  %zext22 = zext i16 %13 to i32, !dbg !1683
  %lshr23 = lshr i32 %zext22, 13, !dbg !1683
  %14 = freeze i32 %lshr23, !dbg !1683
  %trunc24 = trunc i32 %14 to i8, !dbg !1683
  store i8 %trunc24, ptr %rot, align 1, !dbg !1683
  %15 = load ptr, ptr %s, align 8, !dbg !1684
  %checknull25 = icmp eq ptr %15, null, !dbg !1684
  %16 = call i1 @llvm.expect.i1(i1 %checknull25, i1 false), !dbg !1684
  br i1 %16, label %panic26, label %checkok30, !dbg !1684

checkok30:                                        ; preds = %checkok21
  %17 = load ptr, ptr %s, align 8, !dbg !1684
  %checknull31 = icmp eq ptr %17, null, !dbg !1684
  %18 = call i1 @llvm.expect.i1(i1 %checknull31, i1 false), !dbg !1684
  br i1 %18, label %panic32, label %checkok36, !dbg !1684

checkok36:                                        ; preds = %checkok30
  %19 = load i16, ptr %17, align 2, !dbg !1684
  %zext37 = zext i16 %19 to i32, !dbg !1684
  %mul = mul i32 %zext37, 37213, !dbg !1684
  %add = add i32 %mul, 40503, !dbg !1684
  %trunc38 = trunc i32 %add to i16, !dbg !1684
  store i16 %trunc38, ptr %15, align 2, !dbg !1684
  %20 = load i16, ptr %xor, align 2, !dbg !1685
  %zext39 = zext i16 %20 to i32, !dbg !1685
  %lshr40 = lshr i32 %zext39, 5, !dbg !1685
  %21 = freeze i32 %lshr40, !dbg !1685
  %trunc41 = trunc i32 %21 to i8, !dbg !1685
  store i8 %trunc41, ptr %self42, align 1
  %22 = load i8, ptr %rot, align 1
  store i8 %22, ptr %shift, align 1
  %23 = load i8, ptr %self42, align 1, !dbg !1686
  %24 = load i8, ptr %self42, align 1, !dbg !1686
  %25 = load i8, ptr %shift, align 1, !dbg !1686
  %26 = call i8 @llvm.fshr.i8(i8 %23, i8 %24, i8 %25), !dbg !1686
  ret i8 %26, !dbg !1686

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 111), !dbg !1677
  unreachable, !dbg !1677

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 115), !dbg !1681
  unreachable, !dbg !1681

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg12, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 115), !dbg !1681
  unreachable, !dbg !1681

panic17:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg20, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 116), !dbg !1683
  unreachable, !dbg !1683

panic26:                                          ; preds = %checkok21
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg27, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg29, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31(ptr align 8 %indirectarg27, ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, i32 117), !dbg !1684
  unreachable, !dbg !1684

panic32:                                          ; preds = %checkok30
  store %"char[]" { ptr @.panic_msg.19, i64 42 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg35, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 117), !dbg !1684
  unreachable, !dbg !1684
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Pcg16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1688 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1689
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1689
  br i1 %3, label %panic, label %checkok, !dbg !1689

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1690, !DIExpression(), !1689)
    #dbg_declare(ptr %1, !1691, !DIExpression(), !1689)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1692, !DIExpression(), !1694)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1694
  %4 = load i64, ptr %ptradd, align 8, !dbg !1694
  store i64 %4, ptr %len, align 8, !dbg !1694
  br label %loop.cond, !dbg !1695

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !1696
  %lt = icmp ult i64 0, %5, !dbg !1696
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1696

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1698, !DIExpression(), !1700)
  %6 = load ptr, ptr %self, align 8, !dbg !1701
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !1700
  store i8 %7, ptr %value, align 1, !dbg !1700
  %8 = load i64, ptr %len, align 8, !dbg !1702
  %le = icmp ule i64 %8, 1, !dbg !1702
  br i1 %le, label %if.then, label %if.exit, !dbg !1702

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !1703
  %add = add i64 0, %10, !dbg !1703
  %size = sub i64 %add, 0, !dbg !1703
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !1703
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !1703
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !1703
  %14 = extractvalue %"char[]" %13, 0, !dbg !1703
  %15 = extractvalue %"char[]" %13, 1, !dbg !1703
  %gt = icmp ugt i64 0, %15, !dbg !1703
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1703
  br i1 %16, label %panic3, label %checkok11, !dbg !1703

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !1703
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1703
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !1703
  %19 = extractvalue %"char[]" %18, 0, !dbg !1703
  %20 = extractvalue %"char[]" %12, 0, !dbg !1703
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !1703
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !1703
  br label %expr_block.exit, !dbg !1705

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !1706
  %29 = extractvalue %"char[]" %28, 0, !dbg !1706
  %30 = extractvalue %"char[]" %28, 1, !dbg !1706
  %gt29 = icmp sgt i64 0, %30, !dbg !1706
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !1706
  br i1 %31, label %panic30, label %checkok40, !dbg !1706

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !1706
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !1706
  br i1 %32, label %panic42, label %checkok52, !dbg !1706

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !1706
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !1706
  %35 = extractvalue %"char[]" %34, 0, !dbg !1706
  %36 = extractvalue %"char[]" %27, 0, !dbg !1706
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !1706
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !1706
  %41 = load i64, ptr %len, align 8, !dbg !1707
  %sub = sub i64 %41, 1, !dbg !1707
  store i64 %sub, ptr %len, align 8, !dbg !1707
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !1708
  %43 = extractvalue %"char[]" %42, 0, !dbg !1708
  %44 = extractvalue %"char[]" %42, 1, !dbg !1708
  %gt69 = icmp ugt i64 1, %44, !dbg !1708
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !1708
  br i1 %45, label %panic70, label %checkok80, !dbg !1708

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !1708
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !1708
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !1708
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !1708
  store %"char[]" %47, ptr %bytes, align 8, !dbg !1708
  br label %loop.cond, !dbg !1708

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.107, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.108, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.109, i64 22 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 121, ptr align 8 %indirectarg86), !dbg !1709
  unreachable, !dbg !1712

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !1712

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 121), !dbg !1689
  unreachable, !dbg !1689

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !1703
  unreachable, !dbg !1703

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !1703
  unreachable, !dbg !1703

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !1706
  unreachable, !dbg !1706

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !1706
  unreachable, !dbg !1706

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !1706
  unreachable, !dbg !1706

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !1708
  unreachable, !dbg !1708
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Pcg16Random.next_int128(ptr %0) #0 comdat !dbg !1713 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1716
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1716
  br i1 %2, label %panic, label %checkok, !dbg !1716

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1717, !DIExpression(), !1716)
  %3 = load ptr, ptr %self, align 8, !dbg !1718
  %4 = call i64 @std.math.random.Pcg16Random.next_long(ptr %3), !dbg !1720
  %zext = zext i64 %4 to i128, !dbg !1720
  %shl = shl i128 %zext, 64, !dbg !1720
  %5 = freeze i128 %shl, !dbg !1720
  %6 = load ptr, ptr %self, align 8, !dbg !1718
  %7 = call i64 @std.math.random.Pcg16Random.next_long(ptr %6), !dbg !1720
  %zext3 = zext i64 %7 to i128, !dbg !1720
  %add = add i128 %5, %zext3, !dbg !1720
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 122), !dbg !1716
  unreachable, !dbg !1716
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Pcg16Random.next_long(ptr %0) #0 comdat !dbg !1721 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1724
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1724
  br i1 %2, label %panic, label %checkok, !dbg !1724

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1725, !DIExpression(), !1724)
  %3 = load ptr, ptr %self, align 8, !dbg !1726
  %4 = call i32 @std.math.random.Pcg16Random.next_int(ptr %3), !dbg !1728
  %zext = zext i32 %4 to i64, !dbg !1728
  %shl = shl i64 %zext, 32, !dbg !1728
  %5 = freeze i64 %shl, !dbg !1728
  %6 = load ptr, ptr %self, align 8, !dbg !1726
  %7 = call i32 @std.math.random.Pcg16Random.next_int(ptr %6), !dbg !1728
  %zext3 = zext i32 %7 to i64, !dbg !1728
  %add = add i64 %5, %zext3, !dbg !1728
  ret i64 %add, !dbg !1728

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 123), !dbg !1724
  unreachable, !dbg !1724
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Pcg16Random.next_int(ptr %0) #0 comdat !dbg !1729 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1732
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1732
  br i1 %2, label %panic, label %checkok, !dbg !1732

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1733, !DIExpression(), !1732)
  %3 = load ptr, ptr %self, align 8, !dbg !1734
  %4 = call i16 @std.math.random.Pcg16Random.next_short(ptr %3), !dbg !1736
  %zext = zext i16 %4 to i32, !dbg !1736
  %shl = shl i32 %zext, 16, !dbg !1736
  %5 = freeze i32 %shl, !dbg !1736
  %6 = load ptr, ptr %self, align 8, !dbg !1734
  %7 = call i16 @std.math.random.Pcg16Random.next_short(ptr %6), !dbg !1736
  %zext3 = zext i16 %7 to i32, !dbg !1736
  %add = add i32 %5, %zext3, !dbg !1736
  ret i32 %add, !dbg !1736

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 124), !dbg !1732
  unreachable, !dbg !1732
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Pcg16Random.next_short(ptr %0) #0 comdat !dbg !1737 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1740
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1740
  br i1 %2, label %panic, label %checkok, !dbg !1740

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1741, !DIExpression(), !1740)
  %3 = load ptr, ptr %self, align 8, !dbg !1742
  %4 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %3), !dbg !1744
  %zext = zext i8 %4 to i16, !dbg !1744
  %zext3 = zext i16 %zext to i32, !dbg !1744
  %shl = shl i32 %zext3, 8, !dbg !1744
  %5 = freeze i32 %shl, !dbg !1744
  %6 = load ptr, ptr %self, align 8, !dbg !1742
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !1744
  %zext4 = zext i8 %7 to i32, !dbg !1744
  %add = add i32 %5, %zext4, !dbg !1744
  %trunc = trunc i32 %add to i16, !dbg !1744
  ret i16 %trunc, !dbg !1744

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.97, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 125), !dbg !1740
  unreachable, !dbg !1740
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.seeder(ptr align 8 %0, ptr align 8 %1) #0 comdat !dbg !1745 {
entry:
  %out_chars = alloca i64, align 8
  %current = alloca ptr, align 8
  %mark = alloca i64, align 8
  %words = alloca %"ulong[]", align 8
  %elements = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr3 = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %words_len_2 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %indirectarg17 = alloca %"char[]", align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr38 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %varargslots42 = alloca [1 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %indirectarg70 = alloca %"char[]", align 8
  %indirectarg71 = alloca %"char[]", align 8
  %indirectarg72 = alloca %"char[]", align 8
  %varargslots73 = alloca [2 x %any], align 16
  %indirectarg76 = alloca %"any[]", align 8
  %taddr82 = alloca i64, align 8
  %taddr83 = alloca i64, align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"char[]", align 8
  %varargslots87 = alloca [2 x %any], align 16
  %indirectarg90 = alloca %"any[]", align 8
  %remaining = alloca i64, align 8
  %rest = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr103 = alloca i64, align 8
  %taddr104 = alloca i64, align 8
  %indirectarg105 = alloca %"char[]", align 8
  %indirectarg106 = alloca %"char[]", align 8
  %indirectarg107 = alloca %"char[]", align 8
  %varargslots108 = alloca [2 x %any], align 16
  %indirectarg111 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %indirectarg119 = alloca %"char[]", align 8
  %indirectarg120 = alloca %"char[]", align 8
  %indirectarg121 = alloca %"char[]", align 8
  %taddr125 = alloca i64, align 8
  %indirectarg126 = alloca %"char[]", align 8
  %indirectarg127 = alloca %"char[]", align 8
  %indirectarg128 = alloca %"char[]", align 8
  %varargslots129 = alloca [1 x %any], align 16
  %indirectarg131 = alloca %"any[]", align 8
  %taddr135 = alloca i64, align 8
  %taddr136 = alloca i64, align 8
  %indirectarg137 = alloca %"char[]", align 8
  %indirectarg138 = alloca %"char[]", align 8
  %indirectarg139 = alloca %"char[]", align 8
  %varargslots140 = alloca [2 x %any], align 16
  %indirectarg143 = alloca %"any[]", align 8
  %taddr151 = alloca i64, align 8
  %indirectarg152 = alloca %"char[]", align 8
  %indirectarg153 = alloca %"char[]", align 8
  %indirectarg154 = alloca %"char[]", align 8
  %varargslots155 = alloca [1 x %any], align 16
  %indirectarg157 = alloca %"any[]", align 8
  %taddr161 = alloca i64, align 8
  %taddr162 = alloca i64, align 8
  %indirectarg163 = alloca %"char[]", align 8
  %indirectarg164 = alloca %"char[]", align 8
  %indirectarg165 = alloca %"char[]", align 8
  %varargslots166 = alloca [2 x %any], align 16
  %indirectarg169 = alloca %"any[]", align 8
  %taddr175 = alloca i64, align 8
  %indirectarg176 = alloca %"char[]", align 8
  %indirectarg177 = alloca %"char[]", align 8
  %indirectarg178 = alloca %"char[]", align 8
  %varargslots179 = alloca [1 x %any], align 16
  %indirectarg181 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %indirectarg187 = alloca %"char[]", align 8
  %indirectarg188 = alloca %"char[]", align 8
  %indirectarg189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 16
  %indirectarg193 = alloca %"any[]", align 8
  %i199 = alloca i64, align 8
  %j204 = alloca i64, align 8
  %indirectarg208 = alloca %"char[]", align 8
  %indirectarg209 = alloca %"char[]", align 8
  %indirectarg210 = alloca %"char[]", align 8
  %taddr215 = alloca i64, align 8
  %indirectarg216 = alloca %"char[]", align 8
  %indirectarg217 = alloca %"char[]", align 8
  %indirectarg218 = alloca %"char[]", align 8
  %varargslots219 = alloca [1 x %any], align 16
  %indirectarg221 = alloca %"any[]", align 8
  %taddr225 = alloca i64, align 8
  %taddr226 = alloca i64, align 8
  %indirectarg227 = alloca %"char[]", align 8
  %indirectarg228 = alloca %"char[]", align 8
  %indirectarg229 = alloca %"char[]", align 8
  %varargslots230 = alloca [2 x %any], align 16
  %indirectarg233 = alloca %"any[]", align 8
  %indirectarg241 = alloca %"char[]", align 8
  %indirectarg242 = alloca %"char[]", align 8
  %indirectarg243 = alloca %"char[]", align 8
  %taddr248 = alloca i64, align 8
  %indirectarg249 = alloca %"char[]", align 8
  %indirectarg250 = alloca %"char[]", align 8
  %indirectarg251 = alloca %"char[]", align 8
  %varargslots252 = alloca [1 x %any], align 16
  %indirectarg254 = alloca %"any[]", align 8
  %taddr258 = alloca i64, align 8
  %taddr259 = alloca i64, align 8
  %indirectarg260 = alloca %"char[]", align 8
  %indirectarg261 = alloca %"char[]", align 8
  %indirectarg262 = alloca %"char[]", align 8
  %varargslots263 = alloca [2 x %any], align 16
  %indirectarg266 = alloca %"any[]", align 8
  %taddr274 = alloca i64, align 8
  %indirectarg275 = alloca %"char[]", align 8
  %indirectarg276 = alloca %"char[]", align 8
  %indirectarg277 = alloca %"char[]", align 8
  %varargslots278 = alloca [1 x %any], align 16
  %indirectarg280 = alloca %"any[]", align 8
  %taddr284 = alloca i64, align 8
  %taddr285 = alloca i64, align 8
  %indirectarg286 = alloca %"char[]", align 8
  %indirectarg287 = alloca %"char[]", align 8
  %indirectarg288 = alloca %"char[]", align 8
  %varargslots289 = alloca [2 x %any], align 16
  %indirectarg292 = alloca %"any[]", align 8
  %taddr298 = alloca i64, align 8
  %indirectarg299 = alloca %"char[]", align 8
  %indirectarg300 = alloca %"char[]", align 8
  %indirectarg301 = alloca %"char[]", align 8
  %varargslots302 = alloca [1 x %any], align 16
  %indirectarg304 = alloca %"any[]", align 8
  %taddr308 = alloca i64, align 8
  %taddr309 = alloca i64, align 8
  %indirectarg310 = alloca %"char[]", align 8
  %indirectarg311 = alloca %"char[]", align 8
  %indirectarg312 = alloca %"char[]", align 8
  %varargslots313 = alloca [2 x %any], align 16
  %indirectarg316 = alloca %"any[]", align 8
  %i323 = alloca i64, align 8
  %j327 = alloca i64, align 8
  %indirectarg331 = alloca %"char[]", align 8
  %indirectarg332 = alloca %"char[]", align 8
  %indirectarg333 = alloca %"char[]", align 8
  %taddr339 = alloca i64, align 8
  %taddr340 = alloca i64, align 8
  %indirectarg341 = alloca %"char[]", align 8
  %indirectarg342 = alloca %"char[]", align 8
  %indirectarg343 = alloca %"char[]", align 8
  %varargslots344 = alloca [2 x %any], align 16
  %indirectarg347 = alloca %"any[]", align 8
  %taddr354 = alloca i64, align 8
  %taddr355 = alloca i64, align 8
  %indirectarg356 = alloca %"char[]", align 8
  %indirectarg357 = alloca %"char[]", align 8
  %indirectarg358 = alloca %"char[]", align 8
  %varargslots359 = alloca [2 x %any], align 16
  %indirectarg362 = alloca %"any[]", align 8
  %taddr368 = alloca i64, align 8
  %taddr369 = alloca i64, align 8
  %indirectarg370 = alloca %"char[]", align 8
  %indirectarg371 = alloca %"char[]", align 8
  %indirectarg372 = alloca %"char[]", align 8
  %varargslots373 = alloca [2 x %any], align 16
  %indirectarg376 = alloca %"any[]", align 8
  %taddr383 = alloca ptr, align 8
  %taddr388 = alloca i64, align 8
  %taddr389 = alloca i64, align 8
  %indirectarg390 = alloca %"char[]", align 8
  %indirectarg391 = alloca %"char[]", align 8
  %indirectarg392 = alloca %"char[]", align 8
  %varargslots393 = alloca [2 x %any], align 16
  %indirectarg396 = alloca %"any[]", align 8
  %taddr399 = alloca %"char[]", align 8
  %taddr401 = alloca %"char[]", align 8
  %taddr404 = alloca i64, align 8
  %taddr405 = alloca i64, align 8
  %indirectarg406 = alloca %"char[]", align 8
  %indirectarg407 = alloca %"char[]", align 8
  %indirectarg408 = alloca %"char[]", align 8
  %varargslots409 = alloca [2 x %any], align 16
  %indirectarg412 = alloca %"any[]", align 8
    #dbg_declare(ptr %0, !1748, !DIExpression(), !1749)
    #dbg_declare(ptr %1, !1750, !DIExpression(), !1749)
    #dbg_declare(ptr %out_chars, !1751, !DIExpression(), !1752)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1752
  %2 = load i64, ptr %ptradd, align 8, !dbg !1752
  store i64 %2, ptr %out_chars, align 8, !dbg !1752
    #dbg_declare(ptr %current, !1753, !DIExpression(), !1782)
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1784
  %i2nb = icmp eq ptr %3, null, !dbg !1784
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1784

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1787
  br label %if.exit, !dbg !1787

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1789
  store ptr %4, ptr %current, align 8, !dbg !1789
    #dbg_declare(ptr %mark, !1790, !DIExpression(), !1791)
  %5 = load ptr, ptr %current, align 8, !dbg !1791
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !1791
  %6 = load i64, ptr %ptradd1, align 8, !dbg !1791
  store i64 %6, ptr %mark, align 8, !dbg !1791
    #dbg_declare(ptr %words, !1792, !DIExpression(), !1798)
  %7 = load i64, ptr %out_chars, align 8, !dbg !1798
  %add = add i64 %7, 7, !dbg !1798
  %sdiv = sdiv i64 %add, 8, !dbg !1798
  store i64 %sdiv, ptr %elements, align 8
  %8 = load i64, ptr %elements, align 8, !dbg !1799
  %mul = mul i64 8, %8, !dbg !1799
  %9 = call ptr @std.core.mem.tmalloc(i64 %mul, i64 8) #5, !dbg !1799
  store ptr %9, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %elements, align 8, !dbg !1799
  %add2 = add i64 0, %11, !dbg !1799
  %size = sub i64 %add2, 0, !dbg !1799
  %12 = insertvalue %"ulong[]" undef, ptr %10, 0, !dbg !1799
  %13 = insertvalue %"ulong[]" %12, i64 %size, 1, !dbg !1799
  store %"ulong[]" %13, ptr %words, align 8, !dbg !1799
  %14 = load %"ulong[]", ptr %words, align 8, !dbg !1801
  %15 = extractvalue %"ulong[]" %14, 0, !dbg !1801
  %16 = extractvalue %"ulong[]" %14, 1, !dbg !1801
  %gt = icmp ugt i64 0, %16, !dbg !1801
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1801
  br i1 %17, label %panic, label %checkok, !dbg !1801

checkok:                                          ; preds = %if.exit
  br label %cond, !dbg !1801

cond:                                             ; preds = %assign, %checkok
  %18 = phi i64 [ 0, %checkok ], [ %add9, %assign ], !dbg !1801
  %lt = icmp ult i64 %18, %16, !dbg !1801
  br i1 %lt, label %assign, label %exit, !dbg !1801

assign:                                           ; preds = %cond
  %ptroffset = getelementptr inbounds [8 x i8], ptr %15, i64 %18, !dbg !1801
  store i64 -7046029254386353131, ptr %ptroffset, align 8, !dbg !1801
  %add9 = add i64 %18, 1, !dbg !1801
  br label %cond, !dbg !1801

exit:                                             ; preds = %cond
    #dbg_declare(ptr %words_len_2, !1802, !DIExpression(), !1803)
  %ptradd10 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1803
  %19 = load i64, ptr %ptradd10, align 8, !dbg !1803
  %mul11 = mul i64 %19, 2, !dbg !1803
  store i64 %mul11, ptr %words_len_2, align 8, !dbg !1803
    #dbg_declare(ptr %i, !1804, !DIExpression(), !1806)
  store i64 0, ptr %i, align 8, !dbg !1806
  br label %loop.cond, !dbg !1806

loop.cond:                                        ; preds = %checkok91, %exit
  %20 = load i64, ptr %i, align 8, !dbg !1806
  %ptradd12 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1806
  %21 = load i64, ptr %ptradd12, align 8, !dbg !1806
  %sdiv13 = sdiv i64 %21, 8, !dbg !1806
  %gt14 = icmp sgt i64 %sdiv13, %20, !dbg !1806
  %check = icmp sge i64 %20, 0, !dbg !1806
  %siui-gt = and i1 %check, %gt14, !dbg !1806
  br i1 %siui-gt, label %loop.body, label %loop.exit, !dbg !1806

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %j, !1807, !DIExpression(), !1809)
  %22 = load i64, ptr %i, align 8, !dbg !1809
  %ptradd15 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1809
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1809
  %zero = icmp eq i64 %23, 0, !dbg !1809
  %24 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !1809
  br i1 %24, label %panic16, label %checkok20, !dbg !1809

checkok20:                                        ; preds = %loop.body
  %umod = urem i64 %22, %23, !dbg !1809
  store i64 %umod, ptr %j, align 8, !dbg !1809
  %ptradd21 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1810
  %25 = load i64, ptr %ptradd21, align 8, !dbg !1810
  %26 = load ptr, ptr %words, align 8, !dbg !1810
  %27 = load i64, ptr %j, align 8, !dbg !1810
  %ge = icmp uge i64 %27, %25, !dbg !1810
  %28 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1810
  br i1 %28, label %panic22, label %checkok32, !dbg !1810

checkok32:                                        ; preds = %checkok20
  %ptroffset33 = getelementptr inbounds [8 x i8], ptr %26, i64 %27, !dbg !1810
  %29 = load i64, ptr %ptroffset33, align 8, !dbg !1810
  %ptradd34 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1810
  %30 = load i64, ptr %ptradd34, align 8, !dbg !1810
  %31 = load ptr, ptr %0, align 8, !dbg !1810
  %32 = load i64, ptr %i, align 8, !dbg !1810
  %mul35 = mul i64 %32, 8, !dbg !1810
  %lt36 = icmp slt i64 %mul35, 0, !dbg !1810
  %33 = call i1 @llvm.expect.i1(i1 %lt36, i1 false), !dbg !1810
  br i1 %33, label %panic37, label %checkok45, !dbg !1810

checkok45:                                        ; preds = %checkok32
  %ge46 = icmp sge i64 %mul35, %30, !dbg !1810
  %34 = call i1 @llvm.expect.i1(i1 %ge46, i1 false), !dbg !1810
  br i1 %34, label %panic47, label %checkok57, !dbg !1810

checkok57:                                        ; preds = %checkok45
  %ptradd58 = getelementptr inbounds i8, ptr %31, i64 %mul35, !dbg !1810
  %checknull = icmp eq ptr %ptradd58, null, !dbg !1810
  %35 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1810
  br i1 %35, label %panic59, label %checkok63, !dbg !1810

checkok63:                                        ; preds = %checkok57
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %ptradd58, i32 8, i1 false)
    #dbg_declare(ptr %x, !1811, !DIExpression(), !1813)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !1814
  %36 = load i64, ptr %x, align 8, !dbg !1815
  %mul64 = mul i64 %36, -3372029247567499371, !dbg !1810
  %sub = sub i64 %29, %mul64, !dbg !1810
  store i64 %sub, ptr %ptroffset33, align 8, !dbg !1810
  %ptradd65 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1816
  %37 = load i64, ptr %ptradd65, align 8, !dbg !1816
  %38 = load ptr, ptr %words, align 8, !dbg !1816
  %39 = load i64, ptr %j, align 8, !dbg !1816
  %ge66 = icmp uge i64 %39, %37, !dbg !1816
  %40 = call i1 @llvm.expect.i1(i1 %ge66, i1 false), !dbg !1816
  br i1 %40, label %panic67, label %checkok77, !dbg !1816

checkok77:                                        ; preds = %checkok63
  %ptroffset78 = getelementptr inbounds [8 x i8], ptr %38, i64 %39, !dbg !1816
  %41 = load i64, ptr %ptroffset78, align 8, !dbg !1816
  %ptradd79 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1816
  %42 = load i64, ptr %ptradd79, align 8, !dbg !1816
  %43 = load ptr, ptr %words, align 8, !dbg !1816
  %44 = load i64, ptr %j, align 8, !dbg !1816
  %ge80 = icmp uge i64 %44, %42, !dbg !1816
  %45 = call i1 @llvm.expect.i1(i1 %ge80, i1 false), !dbg !1816
  br i1 %45, label %panic81, label %checkok91, !dbg !1816

checkok91:                                        ; preds = %checkok77
  %ptroffset92 = getelementptr inbounds [8 x i8], ptr %43, i64 %44, !dbg !1816
  %46 = load i64, ptr %ptroffset92, align 8, !dbg !1816
  %lshr = lshr i64 %46, 25, !dbg !1816
  %47 = freeze i64 %lshr, !dbg !1816
  %xor = xor i64 %41, %47, !dbg !1816
  store i64 %xor, ptr %ptroffset78, align 8, !dbg !1816
  %48 = load i64, ptr %i, align 8, !dbg !1806
  %add93 = add i64 %48, 1, !dbg !1806
  store i64 %add93, ptr %i, align 8, !dbg !1806
  br label %loop.cond, !dbg !1806

loop.exit:                                        ; preds = %loop.cond
    #dbg_declare(ptr %remaining, !1817, !DIExpression(), !1818)
  %ptradd94 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1818
  %49 = load i64, ptr %ptradd94, align 8, !dbg !1818
  %ptradd95 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1818
  %50 = load i64, ptr %ptradd95, align 8, !dbg !1818
  %sdiv96 = sdiv i64 %50, 8, !dbg !1818
  %mul97 = mul i64 %sdiv96, 8, !dbg !1818
  %sub98 = sub i64 %49, %mul97, !dbg !1818
  store i64 %sub98, ptr %remaining, align 8, !dbg !1818
  %51 = load i64, ptr %remaining, align 8, !dbg !1819
  %i2b = icmp ne i64 %51, 0, !dbg !1819
  br i1 %i2b, label %if.then99, label %if.exit198, !dbg !1819

if.then99:                                        ; preds = %loop.exit
    #dbg_declare(ptr %rest, !1820, !DIExpression(), !1822)
  store i64 -1065810590584100411, ptr %rest, align 8, !dbg !1822
  store ptr %rest, ptr %dst, align 8
  %ptradd100 = getelementptr inbounds i8, ptr %0, i64 8, !dbg !1823
  %52 = load i64, ptr %ptradd100, align 8, !dbg !1823
  %53 = load ptr, ptr %0, align 8, !dbg !1823
  %54 = load i64, ptr %remaining, align 8, !dbg !1823
  %55 = sub nuw i64 %52, %54, !dbg !1823
  %ge101 = icmp uge i64 %55, %52, !dbg !1823
  %56 = call i1 @llvm.expect.i1(i1 %ge101, i1 false), !dbg !1823
  br i1 %56, label %panic102, label %checkok112, !dbg !1823

checkok112:                                       ; preds = %if.then99
  %ptradd113 = getelementptr inbounds i8, ptr %53, i64 %55, !dbg !1823
  store ptr %ptradd113, ptr %src, align 8
  %57 = load i64, ptr %remaining, align 8
  store i64 %57, ptr %len, align 8
  %58 = load i64, ptr %len, align 8, !dbg !1824
  %eq = icmp eq i64 0, %58, !dbg !1824
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !1824

or.rhs:                                           ; preds = %checkok112
  %59 = load ptr, ptr %dst, align 8, !dbg !1824
  %60 = load i64, ptr %len, align 8, !dbg !1824
  %ptradd_any = getelementptr i8, ptr %59, i64 %60, !dbg !1824
  %61 = load ptr, ptr %src, align 8, !dbg !1824
  %le = icmp ule ptr %ptradd_any, %61, !dbg !1824
  br label %or.phi, !dbg !1824

or.phi:                                           ; preds = %or.rhs, %checkok112
  %val = phi i1 [ true, %checkok112 ], [ %le, %or.rhs ], !dbg !1824
  br i1 %val, label %or.phi117, label %or.rhs114, !dbg !1824

or.rhs114:                                        ; preds = %or.phi
  %62 = load ptr, ptr %src, align 8, !dbg !1824
  %63 = load i64, ptr %len, align 8, !dbg !1824
  %ptradd_any115 = getelementptr i8, ptr %62, i64 %63, !dbg !1824
  %64 = load ptr, ptr %dst, align 8, !dbg !1824
  %le116 = icmp ule ptr %ptradd_any115, %64, !dbg !1824
  br label %or.phi117, !dbg !1824

or.phi117:                                        ; preds = %or.rhs114, %or.phi
  %val118 = phi i1 [ true, %or.phi ], [ %le116, %or.rhs114 ], !dbg !1824
  br i1 %val118, label %assert_ok, label %assert_fail, !dbg !1824

assert_fail:                                      ; preds = %or.phi117
  store %"char[]" { ptr @.panic_msg.121, i64 95 }, ptr %indirectarg119, align 8
  store %"char[]" { ptr @.file.122, i64 6 }, ptr %indirectarg120, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg121, align 8
  %65 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %65(ptr align 8 %indirectarg119, ptr align 8 %indirectarg120, ptr align 8 %indirectarg121, i32 309), !dbg !1824
  unreachable, !dbg !1824

assert_ok:                                        ; preds = %or.phi117
  %66 = load ptr, ptr %dst, align 8, !dbg !1827
  %67 = load ptr, ptr %src, align 8, !dbg !1827
  %68 = load i64, ptr %len, align 8, !dbg !1827
  call void @llvm.memcpy.p0.p0.i64(ptr %66, ptr %67, i64 %68, i1 false), !dbg !1827
  %ptradd122 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1828
  %69 = load i64, ptr %ptradd122, align 8, !dbg !1828
  %70 = load ptr, ptr %words, align 8, !dbg !1828
  %71 = sub nuw i64 %69, 1, !dbg !1828
  %lt123 = icmp slt i64 %71, 0, !dbg !1828
  %72 = call i1 @llvm.expect.i1(i1 %lt123, i1 false), !dbg !1828
  br i1 %72, label %panic124, label %checkok132, !dbg !1828

checkok132:                                       ; preds = %assert_ok
  %ge133 = icmp sge i64 %71, %69, !dbg !1828
  %73 = call i1 @llvm.expect.i1(i1 %ge133, i1 false), !dbg !1828
  br i1 %73, label %panic134, label %checkok144, !dbg !1828

checkok144:                                       ; preds = %checkok132
  %ptroffset145 = getelementptr inbounds [8 x i8], ptr %70, i64 %71, !dbg !1828
  %74 = load i64, ptr %ptroffset145, align 8, !dbg !1828
  %75 = load i64, ptr %rest, align 8, !dbg !1828
  %mul146 = mul i64 %75, -3372029247567499371, !dbg !1828
  %sub147 = sub i64 %74, %mul146, !dbg !1828
  store i64 %sub147, ptr %ptroffset145, align 8, !dbg !1828
  %ptradd148 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1829
  %76 = load i64, ptr %ptradd148, align 8, !dbg !1829
  %77 = load ptr, ptr %words, align 8, !dbg !1829
  %78 = sub nuw i64 %76, 1, !dbg !1829
  %lt149 = icmp slt i64 %78, 0, !dbg !1829
  %79 = call i1 @llvm.expect.i1(i1 %lt149, i1 false), !dbg !1829
  br i1 %79, label %panic150, label %checkok158, !dbg !1829

checkok158:                                       ; preds = %checkok144
  %ge159 = icmp sge i64 %78, %76, !dbg !1829
  %80 = call i1 @llvm.expect.i1(i1 %ge159, i1 false), !dbg !1829
  br i1 %80, label %panic160, label %checkok170, !dbg !1829

checkok170:                                       ; preds = %checkok158
  %ptroffset171 = getelementptr inbounds [8 x i8], ptr %77, i64 %78, !dbg !1829
  %81 = load i64, ptr %ptroffset171, align 8, !dbg !1829
  %ptradd172 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1829
  %82 = load i64, ptr %ptradd172, align 8, !dbg !1829
  %83 = load ptr, ptr %words, align 8, !dbg !1829
  %84 = sub nuw i64 %82, 1, !dbg !1829
  %lt173 = icmp slt i64 %84, 0, !dbg !1829
  %85 = call i1 @llvm.expect.i1(i1 %lt173, i1 false), !dbg !1829
  br i1 %85, label %panic174, label %checkok182, !dbg !1829

checkok182:                                       ; preds = %checkok170
  %ge183 = icmp sge i64 %84, %82, !dbg !1829
  %86 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !1829
  br i1 %86, label %panic184, label %checkok194, !dbg !1829

checkok194:                                       ; preds = %checkok182
  %ptroffset195 = getelementptr inbounds [8 x i8], ptr %83, i64 %84, !dbg !1829
  %87 = load i64, ptr %ptroffset195, align 8, !dbg !1829
  %lshr196 = lshr i64 %87, 25, !dbg !1829
  %88 = freeze i64 %lshr196, !dbg !1829
  %xor197 = xor i64 %81, %88, !dbg !1829
  store i64 %xor197, ptr %ptroffset171, align 8, !dbg !1829
  br label %if.exit198, !dbg !1829

if.exit198:                                       ; preds = %checkok194, %loop.exit
    #dbg_declare(ptr %i199, !1830, !DIExpression(), !1833)
  %89 = load i64, ptr %words_len_2, align 8, !dbg !1833
  %sub200 = sub i64 %89, 1, !dbg !1833
  store i64 %sub200, ptr %i199, align 8, !dbg !1833
  br label %loop.cond201, !dbg !1833

loop.cond201:                                     ; preds = %checkok317, %if.exit198
  %90 = load i64, ptr %i199, align 8, !dbg !1833
  %ge202 = icmp sge i64 %90, 0, !dbg !1833
  br i1 %ge202, label %loop.body203, label %loop.exit322, !dbg !1833

loop.body203:                                     ; preds = %loop.cond201
    #dbg_declare(ptr %j204, !1834, !DIExpression(), !1836)
  %91 = load i64, ptr %i199, align 8, !dbg !1836
  %ptradd205 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1836
  %92 = load i64, ptr %ptradd205, align 8, !dbg !1836
  %zero206 = icmp eq i64 %92, 0, !dbg !1836
  %93 = call i1 @llvm.expect.i1(i1 %zero206, i1 false), !dbg !1836
  br i1 %93, label %panic207, label %checkok211, !dbg !1836

checkok211:                                       ; preds = %loop.body203
  %smod = srem i64 %91, %92, !dbg !1836
  store i64 %smod, ptr %j204, align 8, !dbg !1836
  %ptradd212 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1837
  %94 = load i64, ptr %ptradd212, align 8, !dbg !1837
  %95 = load ptr, ptr %words, align 8, !dbg !1837
  %96 = load i64, ptr %j204, align 8, !dbg !1837
  %lt213 = icmp slt i64 %96, 0, !dbg !1837
  %97 = call i1 @llvm.expect.i1(i1 %lt213, i1 false), !dbg !1837
  br i1 %97, label %panic214, label %checkok222, !dbg !1837

checkok222:                                       ; preds = %checkok211
  %ge223 = icmp sge i64 %96, %94, !dbg !1837
  %98 = call i1 @llvm.expect.i1(i1 %ge223, i1 false), !dbg !1837
  br i1 %98, label %panic224, label %checkok234, !dbg !1837

checkok234:                                       ; preds = %checkok222
  %ptroffset235 = getelementptr inbounds [8 x i8], ptr %95, i64 %96, !dbg !1837
  %99 = load i64, ptr %ptroffset235, align 8, !dbg !1837
  %ptradd236 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1837
  %100 = load i64, ptr %ptradd236, align 8, !dbg !1837
  %101 = load ptr, ptr %words, align 8, !dbg !1837
  %102 = load i64, ptr %i199, align 8, !dbg !1837
  %add237 = add i64 %102, 1, !dbg !1837
  %ptradd238 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1837
  %103 = load i64, ptr %ptradd238, align 8, !dbg !1837
  %zero239 = icmp eq i64 %103, 0, !dbg !1837
  %104 = call i1 @llvm.expect.i1(i1 %zero239, i1 false), !dbg !1837
  br i1 %104, label %panic240, label %checkok244, !dbg !1837

checkok244:                                       ; preds = %checkok234
  %smod245 = srem i64 %add237, %103, !dbg !1837
  %lt246 = icmp slt i64 %smod245, 0, !dbg !1837
  %105 = call i1 @llvm.expect.i1(i1 %lt246, i1 false), !dbg !1837
  br i1 %105, label %panic247, label %checkok255, !dbg !1837

checkok255:                                       ; preds = %checkok244
  %ge256 = icmp sge i64 %smod245, %100, !dbg !1837
  %106 = call i1 @llvm.expect.i1(i1 %ge256, i1 false), !dbg !1837
  br i1 %106, label %panic257, label %checkok267, !dbg !1837

checkok267:                                       ; preds = %checkok255
  %ptroffset268 = getelementptr inbounds [8 x i8], ptr %101, i64 %smod245, !dbg !1837
  %107 = load i64, ptr %ptroffset268, align 8, !dbg !1837
  %mul269 = mul i64 %107, -3372029247567499371, !dbg !1837
  %sub270 = sub i64 %99, %mul269, !dbg !1837
  store i64 %sub270, ptr %ptroffset235, align 8, !dbg !1837
  %ptradd271 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1838
  %108 = load i64, ptr %ptradd271, align 8, !dbg !1838
  %109 = load ptr, ptr %words, align 8, !dbg !1838
  %110 = load i64, ptr %j204, align 8, !dbg !1838
  %lt272 = icmp slt i64 %110, 0, !dbg !1838
  %111 = call i1 @llvm.expect.i1(i1 %lt272, i1 false), !dbg !1838
  br i1 %111, label %panic273, label %checkok281, !dbg !1838

checkok281:                                       ; preds = %checkok267
  %ge282 = icmp sge i64 %110, %108, !dbg !1838
  %112 = call i1 @llvm.expect.i1(i1 %ge282, i1 false), !dbg !1838
  br i1 %112, label %panic283, label %checkok293, !dbg !1838

checkok293:                                       ; preds = %checkok281
  %ptroffset294 = getelementptr inbounds [8 x i8], ptr %109, i64 %110, !dbg !1838
  %113 = load i64, ptr %ptroffset294, align 8, !dbg !1838
  %ptradd295 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1838
  %114 = load i64, ptr %ptradd295, align 8, !dbg !1838
  %115 = load ptr, ptr %words, align 8, !dbg !1838
  %116 = load i64, ptr %j204, align 8, !dbg !1838
  %lt296 = icmp slt i64 %116, 0, !dbg !1838
  %117 = call i1 @llvm.expect.i1(i1 %lt296, i1 false), !dbg !1838
  br i1 %117, label %panic297, label %checkok305, !dbg !1838

checkok305:                                       ; preds = %checkok293
  %ge306 = icmp sge i64 %116, %114, !dbg !1838
  %118 = call i1 @llvm.expect.i1(i1 %ge306, i1 false), !dbg !1838
  br i1 %118, label %panic307, label %checkok317, !dbg !1838

checkok317:                                       ; preds = %checkok305
  %ptroffset318 = getelementptr inbounds [8 x i8], ptr %115, i64 %116, !dbg !1838
  %119 = load i64, ptr %ptroffset318, align 8, !dbg !1838
  %lshr319 = lshr i64 %119, 25, !dbg !1838
  %120 = freeze i64 %lshr319, !dbg !1838
  %xor320 = xor i64 %113, %120, !dbg !1838
  store i64 %xor320, ptr %ptroffset294, align 8, !dbg !1838
  %121 = load i64, ptr %i199, align 8, !dbg !1833
  %sub321 = sub i64 %121, 1, !dbg !1833
  store i64 %sub321, ptr %i199, align 8, !dbg !1833
  br label %loop.cond201, !dbg !1833

loop.exit322:                                     ; preds = %loop.cond201
    #dbg_declare(ptr %i323, !1839, !DIExpression(), !1841)
  store i64 0, ptr %i323, align 8, !dbg !1841
  br label %loop.cond324, !dbg !1841

loop.cond324:                                     ; preds = %checkok377, %loop.exit322
  %122 = load i64, ptr %i323, align 8, !dbg !1841
  %123 = load i64, ptr %words_len_2, align 8, !dbg !1841
  %lt325 = icmp ult i64 %122, %123, !dbg !1841
  br i1 %lt325, label %loop.body326, label %loop.exit382, !dbg !1841

loop.body326:                                     ; preds = %loop.cond324
    #dbg_declare(ptr %j327, !1842, !DIExpression(), !1844)
  %124 = load i64, ptr %i323, align 8, !dbg !1844
  %ptradd328 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1844
  %125 = load i64, ptr %ptradd328, align 8, !dbg !1844
  %zero329 = icmp eq i64 %125, 0, !dbg !1844
  %126 = call i1 @llvm.expect.i1(i1 %zero329, i1 false), !dbg !1844
  br i1 %126, label %panic330, label %checkok334, !dbg !1844

checkok334:                                       ; preds = %loop.body326
  %umod335 = urem i64 %124, %125, !dbg !1844
  store i64 %umod335, ptr %j327, align 8, !dbg !1844
  %ptradd336 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1845
  %127 = load i64, ptr %ptradd336, align 8, !dbg !1845
  %128 = load ptr, ptr %words, align 8, !dbg !1845
  %129 = load i64, ptr %j327, align 8, !dbg !1845
  %ge337 = icmp uge i64 %129, %127, !dbg !1845
  %130 = call i1 @llvm.expect.i1(i1 %ge337, i1 false), !dbg !1845
  br i1 %130, label %panic338, label %checkok348, !dbg !1845

checkok348:                                       ; preds = %checkok334
  %ptroffset349 = getelementptr inbounds [8 x i8], ptr %128, i64 %129, !dbg !1845
  %131 = load i64, ptr %ptroffset349, align 8, !dbg !1845
  %mul350 = mul i64 %131, -1065810590584100411, !dbg !1845
  store i64 %mul350, ptr %ptroffset349, align 8, !dbg !1845
  %ptradd351 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1846
  %132 = load i64, ptr %ptradd351, align 8, !dbg !1846
  %133 = load ptr, ptr %words, align 8, !dbg !1846
  %134 = load i64, ptr %j327, align 8, !dbg !1846
  %ge352 = icmp uge i64 %134, %132, !dbg !1846
  %135 = call i1 @llvm.expect.i1(i1 %ge352, i1 false), !dbg !1846
  br i1 %135, label %panic353, label %checkok363, !dbg !1846

checkok363:                                       ; preds = %checkok348
  %ptroffset364 = getelementptr inbounds [8 x i8], ptr %133, i64 %134, !dbg !1846
  %136 = load i64, ptr %ptroffset364, align 8, !dbg !1846
  %ptradd365 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !1846
  %137 = load i64, ptr %ptradd365, align 8, !dbg !1846
  %138 = load ptr, ptr %words, align 8, !dbg !1846
  %139 = load i64, ptr %j327, align 8, !dbg !1846
  %ge366 = icmp uge i64 %139, %137, !dbg !1846
  %140 = call i1 @llvm.expect.i1(i1 %ge366, i1 false), !dbg !1846
  br i1 %140, label %panic367, label %checkok377, !dbg !1846

checkok377:                                       ; preds = %checkok363
  %ptroffset378 = getelementptr inbounds [8 x i8], ptr %138, i64 %139, !dbg !1846
  %141 = load i64, ptr %ptroffset378, align 8, !dbg !1846
  %lshr379 = lshr i64 %141, 25, !dbg !1846
  %142 = freeze i64 %lshr379, !dbg !1846
  %xor380 = xor i64 %136, %142, !dbg !1846
  store i64 %xor380, ptr %ptroffset364, align 8, !dbg !1846
  %143 = load i64, ptr %i323, align 8, !dbg !1841
  %add381 = add i64 %143, 1, !dbg !1841
  store i64 %add381, ptr %i323, align 8, !dbg !1841
  br label %loop.cond324, !dbg !1841

loop.exit382:                                     ; preds = %loop.cond324
  %144 = load ptr, ptr %words, align 8, !dbg !1847
  store ptr %144, ptr %taddr383, align 8
  %145 = load ptr, ptr %taddr383, align 8
  %146 = load i64, ptr %out_chars, align 8, !dbg !1847
  %add384 = add i64 0, %146, !dbg !1847
  %size385 = sub i64 %add384, 0, !dbg !1847
  %147 = insertvalue %"char[]" undef, ptr %145, 0, !dbg !1847
  %148 = insertvalue %"char[]" %147, i64 %size385, 1, !dbg !1847
  %149 = load %"char[]", ptr %1, align 8, !dbg !1847
  %150 = extractvalue %"char[]" %149, 0, !dbg !1847
  %151 = extractvalue %"char[]" %149, 1, !dbg !1847
  %gt386 = icmp ugt i64 0, %151, !dbg !1847
  %152 = call i1 @llvm.expect.i1(i1 %gt386, i1 false), !dbg !1847
  br i1 %152, label %panic387, label %checkok397, !dbg !1847

checkok397:                                       ; preds = %loop.exit382
  %size398 = sub i64 %151, 0, !dbg !1847
  %153 = insertvalue %"char[]" undef, ptr %150, 0, !dbg !1847
  %154 = insertvalue %"char[]" %153, i64 %size398, 1, !dbg !1847
  %155 = extractvalue %"char[]" %154, 0, !dbg !1847
  %156 = extractvalue %"char[]" %148, 0, !dbg !1847
  store %"char[]" %148, ptr %taddr399, align 8
  %ptradd400 = getelementptr inbounds i8, ptr %taddr399, i64 8
  %157 = load i64, ptr %ptradd400, align 8
  store %"char[]" %154, ptr %taddr401, align 8
  %ptradd402 = getelementptr inbounds i8, ptr %taddr401, i64 8
  %158 = load i64, ptr %ptradd402, align 8
  %neq = icmp ne i64 %158, %157
  %159 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %159, label %panic403, label %checkok413

checkok413:                                       ; preds = %checkok397
  %160 = mul i64 %157, 1, !dbg !1847
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %155, ptr align 1 %156, i64 %160, i1 false), !dbg !1847
  %161 = load ptr, ptr %current, align 8, !dbg !1848
  %162 = load i64, ptr %mark, align 8, !dbg !1848
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %161, i64 %162), !dbg !1848
  ret void, !dbg !1850

panic:                                            ; preds = %if.exit
  store i64 %16, ptr %taddr3, align 8
  %163 = insertvalue %any undef, ptr %taddr3, 0
  %164 = insertvalue %any %163, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr4, align 8
  %165 = insertvalue %any undef, ptr %taddr4, 0
  %166 = insertvalue %any %165, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg6, align 8
  store %any %164, ptr %varargslots, align 16
  %ptradd7 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %166, ptr %ptradd7, align 16
  %167 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %167, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 30, ptr align 8 %indirectarg8), !dbg !1801
  unreachable, !dbg !1801

panic16:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.117, i64 10 }, ptr %indirectarg17, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg19, align 8
  %168 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %168(ptr align 8 %indirectarg17, ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, i32 36), !dbg !1809
  unreachable, !dbg !1809

panic22:                                          ; preds = %checkok20
  store i64 %25, ptr %taddr23, align 8
  %169 = insertvalue %any undef, ptr %taddr23, 0
  %170 = insertvalue %any %169, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr24, align 8
  %171 = insertvalue %any undef, ptr %taddr24, 0
  %172 = insertvalue %any %171, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg27, align 8
  store %any %170, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %172, ptr %ptradd29, align 16
  %173 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 37, ptr align 8 %indirectarg31), !dbg !1810
  unreachable, !dbg !1810

panic37:                                          ; preds = %checkok32
  store i64 %mul35, ptr %taddr38, align 8
  %174 = insertvalue %any undef, ptr %taddr38, 0
  %175 = insertvalue %any %174, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg41, align 8
  store %any %175, ptr %varargslots42, align 16
  %176 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp43" = insertvalue %"any[]" %176, i64 1, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 37, ptr align 8 %indirectarg44), !dbg !1810
  unreachable, !dbg !1810

panic47:                                          ; preds = %checkok45
  store i64 %30, ptr %taddr48, align 8
  %177 = insertvalue %any undef, ptr %taddr48, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %mul35, ptr %taddr49, align 8
  %179 = insertvalue %any undef, ptr %taddr49, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg52, align 8
  store %any %178, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %180, ptr %ptradd54, align 16
  %181 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %181, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 37, ptr align 8 %indirectarg56), !dbg !1810
  unreachable, !dbg !1810

panic59:                                          ; preds = %checkok57
  store %"char[]" { ptr @.panic_msg.120, i64 63 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg62, align 8
  %182 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %182(ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, i32 37), !dbg !1810
  unreachable, !dbg !1810

panic67:                                          ; preds = %checkok63
  store i64 %37, ptr %taddr68, align 8
  %183 = insertvalue %any undef, ptr %taddr68, 0
  %184 = insertvalue %any %183, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr69, align 8
  %185 = insertvalue %any undef, ptr %taddr69, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg70, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg71, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg72, align 8
  store %any %184, ptr %varargslots73, align 16
  %ptradd74 = getelementptr inbounds i8, ptr %varargslots73, i64 16
  store %any %186, ptr %ptradd74, align 16
  %187 = insertvalue %"any[]" undef, ptr %varargslots73, 0
  %"$$temp75" = insertvalue %"any[]" %187, i64 2, 1
  store %"any[]" %"$$temp75", ptr %indirectarg76, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg70, ptr align 8 %indirectarg71, ptr align 8 %indirectarg72, i32 38, ptr align 8 %indirectarg76), !dbg !1816
  unreachable, !dbg !1816

panic81:                                          ; preds = %checkok77
  store i64 %42, ptr %taddr82, align 8
  %188 = insertvalue %any undef, ptr %taddr82, 0
  %189 = insertvalue %any %188, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr83, align 8
  %190 = insertvalue %any undef, ptr %taddr83, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg85, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg86, align 8
  store %any %189, ptr %varargslots87, align 16
  %ptradd88 = getelementptr inbounds i8, ptr %varargslots87, i64 16
  store %any %191, ptr %ptradd88, align 16
  %192 = insertvalue %"any[]" undef, ptr %varargslots87, 0
  %"$$temp89" = insertvalue %"any[]" %192, i64 2, 1
  store %"any[]" %"$$temp89", ptr %indirectarg90, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, ptr align 8 %indirectarg86, i32 38, ptr align 8 %indirectarg90), !dbg !1816
  unreachable, !dbg !1816

panic102:                                         ; preds = %if.then99
  store i64 %52, ptr %taddr103, align 8
  %193 = insertvalue %any undef, ptr %taddr103, 0
  %194 = insertvalue %any %193, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr104, align 8
  %195 = insertvalue %any undef, ptr %taddr104, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg105, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg106, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg107, align 8
  store %any %194, ptr %varargslots108, align 16
  %ptradd109 = getelementptr inbounds i8, ptr %varargslots108, i64 16
  store %any %196, ptr %ptradd109, align 16
  %197 = insertvalue %"any[]" undef, ptr %varargslots108, 0
  %"$$temp110" = insertvalue %"any[]" %197, i64 2, 1
  store %"any[]" %"$$temp110", ptr %indirectarg111, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg105, ptr align 8 %indirectarg106, ptr align 8 %indirectarg107, i32 46, ptr align 8 %indirectarg111), !dbg !1823
  unreachable, !dbg !1823

panic124:                                         ; preds = %assert_ok
  store i64 %71, ptr %taddr125, align 8
  %198 = insertvalue %any undef, ptr %taddr125, 0
  %199 = insertvalue %any %198, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg126, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg127, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg128, align 8
  store %any %199, ptr %varargslots129, align 16
  %200 = insertvalue %"any[]" undef, ptr %varargslots129, 0
  %"$$temp130" = insertvalue %"any[]" %200, i64 1, 1
  store %"any[]" %"$$temp130", ptr %indirectarg131, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg126, ptr align 8 %indirectarg127, ptr align 8 %indirectarg128, i32 47, ptr align 8 %indirectarg131), !dbg !1828
  unreachable, !dbg !1828

panic134:                                         ; preds = %checkok132
  store i64 %69, ptr %taddr135, align 8
  %201 = insertvalue %any undef, ptr %taddr135, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %71, ptr %taddr136, align 8
  %203 = insertvalue %any undef, ptr %taddr136, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg137, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg138, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg139, align 8
  store %any %202, ptr %varargslots140, align 16
  %ptradd141 = getelementptr inbounds i8, ptr %varargslots140, i64 16
  store %any %204, ptr %ptradd141, align 16
  %205 = insertvalue %"any[]" undef, ptr %varargslots140, 0
  %"$$temp142" = insertvalue %"any[]" %205, i64 2, 1
  store %"any[]" %"$$temp142", ptr %indirectarg143, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg137, ptr align 8 %indirectarg138, ptr align 8 %indirectarg139, i32 47, ptr align 8 %indirectarg143), !dbg !1828
  unreachable, !dbg !1828

panic150:                                         ; preds = %checkok144
  store i64 %78, ptr %taddr151, align 8
  %206 = insertvalue %any undef, ptr %taddr151, 0
  %207 = insertvalue %any %206, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg152, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg153, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg154, align 8
  store %any %207, ptr %varargslots155, align 16
  %208 = insertvalue %"any[]" undef, ptr %varargslots155, 0
  %"$$temp156" = insertvalue %"any[]" %208, i64 1, 1
  store %"any[]" %"$$temp156", ptr %indirectarg157, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg152, ptr align 8 %indirectarg153, ptr align 8 %indirectarg154, i32 48, ptr align 8 %indirectarg157), !dbg !1829
  unreachable, !dbg !1829

panic160:                                         ; preds = %checkok158
  store i64 %76, ptr %taddr161, align 8
  %209 = insertvalue %any undef, ptr %taddr161, 0
  %210 = insertvalue %any %209, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %78, ptr %taddr162, align 8
  %211 = insertvalue %any undef, ptr %taddr162, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg163, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg164, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg165, align 8
  store %any %210, ptr %varargslots166, align 16
  %ptradd167 = getelementptr inbounds i8, ptr %varargslots166, i64 16
  store %any %212, ptr %ptradd167, align 16
  %213 = insertvalue %"any[]" undef, ptr %varargslots166, 0
  %"$$temp168" = insertvalue %"any[]" %213, i64 2, 1
  store %"any[]" %"$$temp168", ptr %indirectarg169, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg163, ptr align 8 %indirectarg164, ptr align 8 %indirectarg165, i32 48, ptr align 8 %indirectarg169), !dbg !1829
  unreachable, !dbg !1829

panic174:                                         ; preds = %checkok170
  store i64 %84, ptr %taddr175, align 8
  %214 = insertvalue %any undef, ptr %taddr175, 0
  %215 = insertvalue %any %214, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg176, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg177, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg178, align 8
  store %any %215, ptr %varargslots179, align 16
  %216 = insertvalue %"any[]" undef, ptr %varargslots179, 0
  %"$$temp180" = insertvalue %"any[]" %216, i64 1, 1
  store %"any[]" %"$$temp180", ptr %indirectarg181, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg176, ptr align 8 %indirectarg177, ptr align 8 %indirectarg178, i32 48, ptr align 8 %indirectarg181), !dbg !1829
  unreachable, !dbg !1829

panic184:                                         ; preds = %checkok182
  store i64 %82, ptr %taddr185, align 8
  %217 = insertvalue %any undef, ptr %taddr185, 0
  %218 = insertvalue %any %217, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %84, ptr %taddr186, align 8
  %219 = insertvalue %any undef, ptr %taddr186, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg187, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg188, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg189, align 8
  store %any %218, ptr %varargslots190, align 16
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %220, ptr %ptradd191, align 16
  %221 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %221, i64 2, 1
  store %"any[]" %"$$temp192", ptr %indirectarg193, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg187, ptr align 8 %indirectarg188, ptr align 8 %indirectarg189, i32 48, ptr align 8 %indirectarg193), !dbg !1829
  unreachable, !dbg !1829

panic207:                                         ; preds = %loop.body203
  store %"char[]" { ptr @.panic_msg.117, i64 10 }, ptr %indirectarg208, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg209, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg210, align 8
  %222 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %222(ptr align 8 %indirectarg208, ptr align 8 %indirectarg209, ptr align 8 %indirectarg210, i32 54), !dbg !1836
  unreachable, !dbg !1836

panic214:                                         ; preds = %checkok211
  store i64 %96, ptr %taddr215, align 8
  %223 = insertvalue %any undef, ptr %taddr215, 0
  %224 = insertvalue %any %223, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg216, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg217, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg218, align 8
  store %any %224, ptr %varargslots219, align 16
  %225 = insertvalue %"any[]" undef, ptr %varargslots219, 0
  %"$$temp220" = insertvalue %"any[]" %225, i64 1, 1
  store %"any[]" %"$$temp220", ptr %indirectarg221, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg216, ptr align 8 %indirectarg217, ptr align 8 %indirectarg218, i32 55, ptr align 8 %indirectarg221), !dbg !1837
  unreachable, !dbg !1837

panic224:                                         ; preds = %checkok222
  store i64 %94, ptr %taddr225, align 8
  %226 = insertvalue %any undef, ptr %taddr225, 0
  %227 = insertvalue %any %226, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %96, ptr %taddr226, align 8
  %228 = insertvalue %any undef, ptr %taddr226, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg227, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg228, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg229, align 8
  store %any %227, ptr %varargslots230, align 16
  %ptradd231 = getelementptr inbounds i8, ptr %varargslots230, i64 16
  store %any %229, ptr %ptradd231, align 16
  %230 = insertvalue %"any[]" undef, ptr %varargslots230, 0
  %"$$temp232" = insertvalue %"any[]" %230, i64 2, 1
  store %"any[]" %"$$temp232", ptr %indirectarg233, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg227, ptr align 8 %indirectarg228, ptr align 8 %indirectarg229, i32 55, ptr align 8 %indirectarg233), !dbg !1837
  unreachable, !dbg !1837

panic240:                                         ; preds = %checkok234
  store %"char[]" { ptr @.panic_msg.117, i64 10 }, ptr %indirectarg241, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg242, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg243, align 8
  %231 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %231(ptr align 8 %indirectarg241, ptr align 8 %indirectarg242, ptr align 8 %indirectarg243, i32 55), !dbg !1837
  unreachable, !dbg !1837

panic247:                                         ; preds = %checkok244
  store i64 %smod245, ptr %taddr248, align 8
  %232 = insertvalue %any undef, ptr %taddr248, 0
  %233 = insertvalue %any %232, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg249, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg250, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg251, align 8
  store %any %233, ptr %varargslots252, align 16
  %234 = insertvalue %"any[]" undef, ptr %varargslots252, 0
  %"$$temp253" = insertvalue %"any[]" %234, i64 1, 1
  store %"any[]" %"$$temp253", ptr %indirectarg254, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg249, ptr align 8 %indirectarg250, ptr align 8 %indirectarg251, i32 55, ptr align 8 %indirectarg254), !dbg !1837
  unreachable, !dbg !1837

panic257:                                         ; preds = %checkok255
  store i64 %100, ptr %taddr258, align 8
  %235 = insertvalue %any undef, ptr %taddr258, 0
  %236 = insertvalue %any %235, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod245, ptr %taddr259, align 8
  %237 = insertvalue %any undef, ptr %taddr259, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg260, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg261, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg262, align 8
  store %any %236, ptr %varargslots263, align 16
  %ptradd264 = getelementptr inbounds i8, ptr %varargslots263, i64 16
  store %any %238, ptr %ptradd264, align 16
  %239 = insertvalue %"any[]" undef, ptr %varargslots263, 0
  %"$$temp265" = insertvalue %"any[]" %239, i64 2, 1
  store %"any[]" %"$$temp265", ptr %indirectarg266, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg260, ptr align 8 %indirectarg261, ptr align 8 %indirectarg262, i32 55, ptr align 8 %indirectarg266), !dbg !1837
  unreachable, !dbg !1837

panic273:                                         ; preds = %checkok267
  store i64 %110, ptr %taddr274, align 8
  %240 = insertvalue %any undef, ptr %taddr274, 0
  %241 = insertvalue %any %240, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg275, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg276, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg277, align 8
  store %any %241, ptr %varargslots278, align 16
  %242 = insertvalue %"any[]" undef, ptr %varargslots278, 0
  %"$$temp279" = insertvalue %"any[]" %242, i64 1, 1
  store %"any[]" %"$$temp279", ptr %indirectarg280, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg275, ptr align 8 %indirectarg276, ptr align 8 %indirectarg277, i32 56, ptr align 8 %indirectarg280), !dbg !1838
  unreachable, !dbg !1838

panic283:                                         ; preds = %checkok281
  store i64 %108, ptr %taddr284, align 8
  %243 = insertvalue %any undef, ptr %taddr284, 0
  %244 = insertvalue %any %243, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %110, ptr %taddr285, align 8
  %245 = insertvalue %any undef, ptr %taddr285, 0
  %246 = insertvalue %any %245, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg286, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg287, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg288, align 8
  store %any %244, ptr %varargslots289, align 16
  %ptradd290 = getelementptr inbounds i8, ptr %varargslots289, i64 16
  store %any %246, ptr %ptradd290, align 16
  %247 = insertvalue %"any[]" undef, ptr %varargslots289, 0
  %"$$temp291" = insertvalue %"any[]" %247, i64 2, 1
  store %"any[]" %"$$temp291", ptr %indirectarg292, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg286, ptr align 8 %indirectarg287, ptr align 8 %indirectarg288, i32 56, ptr align 8 %indirectarg292), !dbg !1838
  unreachable, !dbg !1838

panic297:                                         ; preds = %checkok293
  store i64 %116, ptr %taddr298, align 8
  %248 = insertvalue %any undef, ptr %taddr298, 0
  %249 = insertvalue %any %248, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg299, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg300, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg301, align 8
  store %any %249, ptr %varargslots302, align 16
  %250 = insertvalue %"any[]" undef, ptr %varargslots302, 0
  %"$$temp303" = insertvalue %"any[]" %250, i64 1, 1
  store %"any[]" %"$$temp303", ptr %indirectarg304, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg299, ptr align 8 %indirectarg300, ptr align 8 %indirectarg301, i32 56, ptr align 8 %indirectarg304), !dbg !1838
  unreachable, !dbg !1838

panic307:                                         ; preds = %checkok305
  store i64 %114, ptr %taddr308, align 8
  %251 = insertvalue %any undef, ptr %taddr308, 0
  %252 = insertvalue %any %251, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %116, ptr %taddr309, align 8
  %253 = insertvalue %any undef, ptr %taddr309, 0
  %254 = insertvalue %any %253, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg310, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg311, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg312, align 8
  store %any %252, ptr %varargslots313, align 16
  %ptradd314 = getelementptr inbounds i8, ptr %varargslots313, i64 16
  store %any %254, ptr %ptradd314, align 16
  %255 = insertvalue %"any[]" undef, ptr %varargslots313, 0
  %"$$temp315" = insertvalue %"any[]" %255, i64 2, 1
  store %"any[]" %"$$temp315", ptr %indirectarg316, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg310, ptr align 8 %indirectarg311, ptr align 8 %indirectarg312, i32 56, ptr align 8 %indirectarg316), !dbg !1838
  unreachable, !dbg !1838

panic330:                                         ; preds = %loop.body326
  store %"char[]" { ptr @.panic_msg.117, i64 10 }, ptr %indirectarg331, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg332, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg333, align 8
  %256 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %256(ptr align 8 %indirectarg331, ptr align 8 %indirectarg332, ptr align 8 %indirectarg333, i32 62), !dbg !1844
  unreachable, !dbg !1844

panic338:                                         ; preds = %checkok334
  store i64 %127, ptr %taddr339, align 8
  %257 = insertvalue %any undef, ptr %taddr339, 0
  %258 = insertvalue %any %257, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %129, ptr %taddr340, align 8
  %259 = insertvalue %any undef, ptr %taddr340, 0
  %260 = insertvalue %any %259, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg341, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg342, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg343, align 8
  store %any %258, ptr %varargslots344, align 16
  %ptradd345 = getelementptr inbounds i8, ptr %varargslots344, i64 16
  store %any %260, ptr %ptradd345, align 16
  %261 = insertvalue %"any[]" undef, ptr %varargslots344, 0
  %"$$temp346" = insertvalue %"any[]" %261, i64 2, 1
  store %"any[]" %"$$temp346", ptr %indirectarg347, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg341, ptr align 8 %indirectarg342, ptr align 8 %indirectarg343, i32 63, ptr align 8 %indirectarg347), !dbg !1845
  unreachable, !dbg !1845

panic353:                                         ; preds = %checkok348
  store i64 %132, ptr %taddr354, align 8
  %262 = insertvalue %any undef, ptr %taddr354, 0
  %263 = insertvalue %any %262, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %134, ptr %taddr355, align 8
  %264 = insertvalue %any undef, ptr %taddr355, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg356, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg357, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg358, align 8
  store %any %263, ptr %varargslots359, align 16
  %ptradd360 = getelementptr inbounds i8, ptr %varargslots359, i64 16
  store %any %265, ptr %ptradd360, align 16
  %266 = insertvalue %"any[]" undef, ptr %varargslots359, 0
  %"$$temp361" = insertvalue %"any[]" %266, i64 2, 1
  store %"any[]" %"$$temp361", ptr %indirectarg362, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg356, ptr align 8 %indirectarg357, ptr align 8 %indirectarg358, i32 64, ptr align 8 %indirectarg362), !dbg !1846
  unreachable, !dbg !1846

panic367:                                         ; preds = %checkok363
  store i64 %137, ptr %taddr368, align 8
  %267 = insertvalue %any undef, ptr %taddr368, 0
  %268 = insertvalue %any %267, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %139, ptr %taddr369, align 8
  %269 = insertvalue %any undef, ptr %taddr369, 0
  %270 = insertvalue %any %269, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg370, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg371, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg372, align 8
  store %any %268, ptr %varargslots373, align 16
  %ptradd374 = getelementptr inbounds i8, ptr %varargslots373, i64 16
  store %any %270, ptr %ptradd374, align 16
  %271 = insertvalue %"any[]" undef, ptr %varargslots373, 0
  %"$$temp375" = insertvalue %"any[]" %271, i64 2, 1
  store %"any[]" %"$$temp375", ptr %indirectarg376, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg370, ptr align 8 %indirectarg371, ptr align 8 %indirectarg372, i32 64, ptr align 8 %indirectarg376), !dbg !1846
  unreachable, !dbg !1846

panic387:                                         ; preds = %loop.exit382
  store i64 %151, ptr %taddr388, align 8
  %272 = insertvalue %any undef, ptr %taddr388, 0
  %273 = insertvalue %any %272, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr389, align 8
  %274 = insertvalue %any undef, ptr %taddr389, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg390, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg391, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg392, align 8
  store %any %273, ptr %varargslots393, align 16
  %ptradd394 = getelementptr inbounds i8, ptr %varargslots393, i64 16
  store %any %275, ptr %ptradd394, align 16
  %276 = insertvalue %"any[]" undef, ptr %varargslots393, 0
  %"$$temp395" = insertvalue %"any[]" %276, i64 2, 1
  store %"any[]" %"$$temp395", ptr %indirectarg396, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg390, ptr align 8 %indirectarg391, ptr align 8 %indirectarg392, i32 66, ptr align 8 %indirectarg396), !dbg !1847
  unreachable, !dbg !1847

panic403:                                         ; preds = %checkok397
  store i64 %158, ptr %taddr404, align 8
  %277 = insertvalue %any undef, ptr %taddr404, 0
  %278 = insertvalue %any %277, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %157, ptr %taddr405, align 8
  %279 = insertvalue %any undef, ptr %taddr405, 0
  %280 = insertvalue %any %279, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg406, align 8
  store %"char[]" { ptr @.file.115, i64 14 }, ptr %indirectarg407, align 8
  store %"char[]" { ptr @.func.116, i64 6 }, ptr %indirectarg408, align 8
  store %any %278, ptr %varargslots409, align 16
  %ptradd410 = getelementptr inbounds i8, ptr %varargslots409, i64 16
  store %any %280, ptr %ptradd410, align 16
  %281 = insertvalue %"any[]" undef, ptr %varargslots409, 0
  %"$$temp411" = insertvalue %"any[]" %281, i64 2, 1
  store %"any[]" %"$$temp411", ptr %indirectarg412, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg406, ptr align 8 %indirectarg407, ptr align 8 %indirectarg408, i32 66, ptr align 8 %indirectarg412), !dbg !1847
  unreachable, !dbg !1847
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.entropy(ptr noalias sret([32 x i8]) align 1 %0) #0 comdat !dbg !1851 {
entry:
  %addr = alloca ptr, align 8
  %entropy_data = alloca [8 x i32], align 16
  %value = alloca %"char[]", align 8
  %expr = alloca %"char[]", align 8
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %indirectarg3 = alloca %"char[]", align 8
  %value4 = alloca ptr, align 8
  %expr5 = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %value14 = alloca ptr, align 8
  %expr15 = alloca ptr, align 8
  %indirectarg18 = alloca %"char[]", align 8
  %indirectarg19 = alloca %"char[]", align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %value24 = alloca ptr, align 8
  %expr25 = alloca ptr, align 8
  %indirectarg28 = alloca %"char[]", align 8
  %indirectarg29 = alloca %"char[]", align 8
  %indirectarg30 = alloca %"char[]", align 8
  %indirectarg32 = alloca %"char[]", align 8
  %value35 = alloca i64, align 8
  %expr36 = alloca i64, align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %indirectarg41 = alloca %"char[]", align 8
  %indirectarg43 = alloca %"char[]", align 8
  %value45 = alloca ptr, align 8
  %expr46 = alloca ptr, align 8
  %indirectarg49 = alloca %"char[]", align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg53 = alloca %"char[]", align 8
  %value55 = alloca %any, align 8
  %expr56 = alloca %any, align 8
  %indirectarg59 = alloca %"char[]", align 8
  %indirectarg60 = alloca %"char[]", align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %expr64 = alloca [8 x i32], align 16
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %indirectarg69 = alloca %"char[]", align 8
    #dbg_declare(ptr %addr, !1857, !DIExpression(), !1858)
  %1 = call ptr @std.core.mem.malloc(i64 1) #5, !dbg !1858
  store ptr %1, ptr %addr, align 8, !dbg !1858
  %2 = load ptr, ptr %addr, align 8, !dbg !1859
  call void @std.core.mem.free(ptr %2) #5, !dbg !1859
  %3 = load i32, ptr @entropy.random_int, align 4, !dbg !1860
  %add = add i32 %3, -302935722, !dbg !1860
  store i32 %add, ptr @entropy.random_int, align 4, !dbg !1860
    #dbg_declare(ptr %entropy_data, !1861, !DIExpression(), !1865)
  store %"char[]" { ptr @.str.123, i64 8 }, ptr %value, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !1866
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1866
  br i1 %4, label %panic, label %checkok, !dbg !1866

checkok:                                          ; preds = %entry
  %5 = insertvalue %"char[]" undef, ptr %expr, 0, !dbg !1866
  %6 = insertvalue %"char[]" %5, i64 16, 1, !dbg !1866
  store %"char[]" %6, ptr %indirectarg3, align 8
  %7 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg3), !dbg !1868
  store i32 %7, ptr %entropy_data, align 4, !dbg !1868
  %ptradd = getelementptr inbounds i8, ptr %entropy_data, i64 4, !dbg !1868
  %8 = load ptr, ptr %addr, align 8
  store ptr %8, ptr %value4, align 8
  %9 = load ptr, ptr %value4, align 8
  store ptr %9, ptr %expr5, align 8
  %checknull6 = icmp eq ptr %expr5, null, !dbg !1871
  %10 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !1871
  br i1 %10, label %panic7, label %checkok11, !dbg !1871

checkok11:                                        ; preds = %checkok
  %11 = insertvalue %"char[]" undef, ptr %expr5, 0, !dbg !1871
  %12 = insertvalue %"char[]" %11, i64 8, 1, !dbg !1871
  store %"char[]" %12, ptr %indirectarg12, align 8
  %13 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg12), !dbg !1873
  store i32 %13, ptr %ptradd, align 4, !dbg !1873
  %ptradd13 = getelementptr inbounds i8, ptr %entropy_data, i64 8, !dbg !1873
  store ptr %addr, ptr %value14, align 8
  %14 = load ptr, ptr %value14, align 8
  store ptr %14, ptr %expr15, align 8
  %checknull16 = icmp eq ptr %expr15, null, !dbg !1876
  %15 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !1876
  br i1 %15, label %panic17, label %checkok21, !dbg !1876

checkok21:                                        ; preds = %checkok11
  %16 = insertvalue %"char[]" undef, ptr %expr15, 0, !dbg !1876
  %17 = insertvalue %"char[]" %16, i64 8, 1, !dbg !1876
  store %"char[]" %17, ptr %indirectarg22, align 8
  %18 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg22), !dbg !1878
  store i32 %18, ptr %ptradd13, align 4, !dbg !1878
  %ptradd23 = getelementptr inbounds i8, ptr %entropy_data, i64 12, !dbg !1878
  store ptr @std.math.random.entropy, ptr %value24, align 8
  %19 = load ptr, ptr %value24, align 8
  store ptr %19, ptr %expr25, align 8
  %checknull26 = icmp eq ptr %expr25, null, !dbg !1881
  %20 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !1881
  br i1 %20, label %panic27, label %checkok31, !dbg !1881

checkok31:                                        ; preds = %checkok21
  %21 = insertvalue %"char[]" undef, ptr %expr25, 0, !dbg !1881
  %22 = insertvalue %"char[]" %21, i64 8, 1, !dbg !1881
  store %"char[]" %22, ptr %indirectarg32, align 8
  %23 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg32), !dbg !1883
  store i32 %23, ptr %ptradd23, align 4, !dbg !1883
  %ptradd33 = getelementptr inbounds i8, ptr %entropy_data, i64 16, !dbg !1883
  %24 = load i32, ptr @entropy.random_int, align 4, !dbg !1886
  store i32 %24, ptr %ptradd33, align 4, !dbg !1886
  %ptradd34 = getelementptr inbounds i8, ptr %entropy_data, i64 20, !dbg !1886
  %25 = call i64 @std.time.clock.now(), !dbg !1887
  store i64 %25, ptr %value35, align 8
  %26 = load i64, ptr %value35, align 8
  store i64 %26, ptr %expr36, align 8
  %checknull37 = icmp eq ptr %expr36, null, !dbg !1888
  %27 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !1888
  br i1 %27, label %panic38, label %checkok42, !dbg !1888

checkok42:                                        ; preds = %checkok31
  %28 = insertvalue %"char[]" undef, ptr %expr36, 0, !dbg !1888
  %29 = insertvalue %"char[]" %28, i64 8, 1, !dbg !1888
  store %"char[]" %29, ptr %indirectarg43, align 8
  %30 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg43), !dbg !1890
  store i32 %30, ptr %ptradd34, align 4, !dbg !1890
  %ptradd44 = getelementptr inbounds i8, ptr %entropy_data, i64 24, !dbg !1890
  store ptr @std.core.dstring.DString.new_init, ptr %value45, align 8
  %31 = load ptr, ptr %value45, align 8
  store ptr %31, ptr %expr46, align 8
  %checknull47 = icmp eq ptr %expr46, null, !dbg !1892
  %32 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !1892
  br i1 %32, label %panic48, label %checkok52, !dbg !1892

checkok52:                                        ; preds = %checkok42
  %33 = insertvalue %"char[]" undef, ptr %expr46, 0, !dbg !1892
  %34 = insertvalue %"char[]" %33, i64 8, 1, !dbg !1892
  store %"char[]" %34, ptr %indirectarg53, align 8
  %35 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg53), !dbg !1894
  store i32 %35, ptr %ptradd44, align 4, !dbg !1894
  %ptradd54 = getelementptr inbounds i8, ptr %entropy_data, i64 28, !dbg !1894
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value55, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr56, ptr align 8 %value55, i32 16, i1 false)
  %checknull57 = icmp eq ptr %expr56, null, !dbg !1897
  %36 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !1897
  br i1 %36, label %panic58, label %checkok62, !dbg !1897

checkok62:                                        ; preds = %checkok52
  %37 = insertvalue %"char[]" undef, ptr %expr56, 0, !dbg !1897
  %38 = insertvalue %"char[]" %37, i64 16, 1, !dbg !1897
  store %"char[]" %38, ptr %indirectarg63, align 8
  %39 = call i32 @std.hash.fnv32a.encode(ptr align 8 %indirectarg63), !dbg !1899
  store i32 %39, ptr %ptradd54, align 4, !dbg !1899
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr64, ptr align 16 %entropy_data, i32 32, i1 false)
  %checknull65 = icmp eq ptr %expr64, null, !dbg !1902
  %40 = call i1 @llvm.expect.i1(i1 %checknull65, i1 false), !dbg !1902
  br i1 %40, label %panic66, label %checkok70, !dbg !1902

checkok70:                                        ; preds = %checkok62
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %expr64, i32 32, i1 false), !dbg !1902
  ret void, !dbg !1902

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 212), !dbg !1866
  unreachable, !dbg !1866

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg8, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg9, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg10, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9, ptr align 8 %indirectarg10, i32 212), !dbg !1871
  unreachable, !dbg !1871

panic17:                                          ; preds = %checkok11
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg18, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg19, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg20, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43(ptr align 8 %indirectarg18, ptr align 8 %indirectarg19, ptr align 8 %indirectarg20, i32 212), !dbg !1876
  unreachable, !dbg !1876

panic27:                                          ; preds = %checkok21
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg28, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg29, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg30, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44(ptr align 8 %indirectarg28, ptr align 8 %indirectarg29, ptr align 8 %indirectarg30, i32 212), !dbg !1881
  unreachable, !dbg !1881

panic38:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg40, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg41, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45(ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, ptr align 8 %indirectarg41, i32 212), !dbg !1888
  unreachable, !dbg !1888

panic48:                                          ; preds = %checkok42
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg49, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg51, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46(ptr align 8 %indirectarg49, ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, i32 212), !dbg !1892
  unreachable, !dbg !1892

panic58:                                          ; preds = %checkok52
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg59, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg60, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg61, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47(ptr align 8 %indirectarg59, ptr align 8 %indirectarg60, ptr align 8 %indirectarg61, i32 212), !dbg !1897
  unreachable, !dbg !1897

panic66:                                          ; preds = %checkok62
  store %"char[]" { ptr @.panic_msg.65, i64 53 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.file.66, i64 10 }, ptr %indirectarg68, align 8
  store %"char[]" { ptr @.func.124, i64 7 }, ptr %indirectarg69, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, ptr align 8 %indirectarg69, i32 212), !dbg !1902
  unreachable, !dbg !1902
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc128Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1905 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1910
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1910
  br i1 %3, label %panic, label %checkok, !dbg !1910

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1911, !DIExpression(), !1912)
    #dbg_declare(ptr %1, !1913, !DIExpression(), !1912)
  %4 = load ptr, ptr %self, align 8, !dbg !1914
  %checknull = icmp eq ptr %4, null, !dbg !1914
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1914
  br i1 %5, label %panic3, label %checkok7, !dbg !1914

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1915, !DIExpression(), !1917)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !1917
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1918
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 64, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !1920
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %4, ptr align 16 %return_value, i32 64, i1 false), !dbg !1921
  ret void, !dbg !1921

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 15), !dbg !1912
  unreachable, !dbg !1912

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 17), !dbg !1914
  unreachable, !dbg !1914
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %0) #0 comdat !dbg !1922 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i128, align 16
  %self13 = alloca i128, align 16
  %shift = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1925
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1925
  br i1 %2, label %panic, label %checkok, !dbg !1925

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1926, !DIExpression(), !1927)
    #dbg_declare(ptr %s, !1928, !DIExpression(), !1929)
  %3 = load ptr, ptr %self, align 8, !dbg !1929
  store ptr %3, ptr %s, align 8, !dbg !1929
    #dbg_declare(ptr %result, !1930, !DIExpression(), !1931)
  %4 = load ptr, ptr %s, align 8, !dbg !1931
  %5 = load i128, ptr %4, align 16, !dbg !1931
  %6 = load ptr, ptr %s, align 8, !dbg !1931
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1931
  %7 = load i128, ptr %ptradd, align 16, !dbg !1931
  %add = add i128 %5, %7, !dbg !1931
  %8 = load ptr, ptr %s, align 8, !dbg !1931
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !1931
  %9 = load i128, ptr %ptradd3, align 16, !dbg !1931
  %add4 = add i128 %add, %9, !dbg !1931
  store i128 %add4, ptr %result, align 16, !dbg !1931
  %10 = load ptr, ptr %s, align 8, !dbg !1932
  %11 = load ptr, ptr %s, align 8, !dbg !1932
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1932
  %12 = load i128, ptr %ptradd5, align 16, !dbg !1932
  %13 = load ptr, ptr %s, align 8, !dbg !1932
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1932
  %14 = load i128, ptr %ptradd6, align 16, !dbg !1932
  %lshr = lshr i128 %14, 11, !dbg !1932
  %15 = freeze i128 %lshr, !dbg !1932
  %xor = xor i128 %12, %15, !dbg !1932
  store i128 %xor, ptr %10, align 16, !dbg !1932
  %16 = load ptr, ptr %s, align 8, !dbg !1933
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1933
  %17 = load ptr, ptr %s, align 8, !dbg !1933
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 32, !dbg !1933
  %18 = load i128, ptr %ptradd8, align 16, !dbg !1933
  %19 = load ptr, ptr %s, align 8, !dbg !1933
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !1933
  %20 = load i128, ptr %ptradd9, align 16, !dbg !1933
  %shl = shl i128 %20, 3, !dbg !1933
  %21 = freeze i128 %shl, !dbg !1933
  %add10 = add i128 %18, %21, !dbg !1933
  store i128 %add10, ptr %ptradd7, align 16, !dbg !1933
  %22 = load ptr, ptr %s, align 8, !dbg !1934
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !1934
  %23 = load ptr, ptr %s, align 8, !dbg !1934
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1934
  %24 = load i128, ptr %ptradd12, align 16
  store i128 %24, ptr %self13, align 16
  store i128 40, ptr %shift, align 16
  %25 = load i128, ptr %self13, align 16, !dbg !1935
  %26 = load i128, ptr %self13, align 16, !dbg !1935
  %27 = load i128, ptr %shift, align 16, !dbg !1935
  %28 = call i128 @llvm.fshr.i128(i128 %25, i128 %26, i128 %27), !dbg !1935
  %29 = load i128, ptr %result, align 16, !dbg !1934
  %add14 = add i128 %28, %29, !dbg !1934
  store i128 %add14, ptr %ptradd11, align 16, !dbg !1934
  %30 = load ptr, ptr %s, align 8, !dbg !1937
  %ptradd15 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !1937
  %31 = load i128, ptr %ptradd15, align 16, !dbg !1937
  %add16 = add i128 %31, -129976298391535590297638237547755878347, !dbg !1937
  store i128 %add16, ptr %ptradd15, align 16, !dbg !1937
  %32 = load <2 x i64>, ptr %result, align 16, !dbg !1938
  ret <2 x i64> %32, !dbg !1938

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 20), !dbg !1927
  unreachable, !dbg !1927
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc128Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !1939 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %result = alloca i128, align 16
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1940
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1940
  br i1 %3, label %panic, label %checkok, !dbg !1940

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1941, !DIExpression(), !1940)
    #dbg_declare(ptr %1, !1942, !DIExpression(), !1940)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !1943
  %4 = load i64, ptr %ptradd, align 8, !dbg !1943
  %lt = icmp ult i64 0, %4, !dbg !1943
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1943

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 32), !dbg !1943
  unreachable, !dbg !1943

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !1945, !DIExpression(), !1947)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1947
  %6 = load i64, ptr %ptradd6, align 8, !dbg !1947
  store i64 %6, ptr %len, align 8, !dbg !1947
  br label %loop.cond, !dbg !1948

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !1949
  %lt7 = icmp ult i64 0, %7, !dbg !1949
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1949

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !1951, !DIExpression(), !1953)
  %8 = load ptr, ptr %self, align 8, !dbg !1954
  %9 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %8), !dbg !1953
  store <2 x i64> %9, ptr %result, align 16
  %10 = load i128, ptr %result, align 16
  store i128 %10, ptr %value, align 16
  %11 = load i64, ptr %len, align 8, !dbg !1955
  %le = icmp ule i64 %11, 16, !dbg !1955
  br i1 %le, label %if.then, label %if.exit, !dbg !1955

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %12 = load ptr, ptr %taddr, align 8
  %13 = load i64, ptr %len, align 8, !dbg !1956
  %add = add i64 0, %13, !dbg !1956
  %size = sub i64 %add, 0, !dbg !1956
  %14 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !1956
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !1956
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !1956
  %17 = extractvalue %"char[]" %16, 0, !dbg !1956
  %18 = extractvalue %"char[]" %16, 1, !dbg !1956
  %gt = icmp ugt i64 0, %18, !dbg !1956
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1956
  br i1 %19, label %panic8, label %checkok16, !dbg !1956

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %18, 0, !dbg !1956
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !1956
  %21 = insertvalue %"char[]" %20, i64 %size17, 1, !dbg !1956
  %22 = extractvalue %"char[]" %21, 0, !dbg !1956
  %23 = extractvalue %"char[]" %15, 0, !dbg !1956
  store %"char[]" %15, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %24 = load i64, ptr %ptradd19, align 8
  store %"char[]" %21, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %25 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %25, %24
  %26 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %26, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %27 = mul i64 %24, 1, !dbg !1956
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %22, ptr align 1 %23, i64 %27, i1 false), !dbg !1956
  br label %expr_block.exit, !dbg !1958

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %28 = load ptr, ptr %taddr33, align 8
  %29 = insertvalue %"char[]" undef, ptr %28, 0
  %30 = insertvalue %"char[]" %29, i64 16, 1
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1959
  %32 = extractvalue %"char[]" %31, 0, !dbg !1959
  %33 = extractvalue %"char[]" %31, 1, !dbg !1959
  %gt34 = icmp sgt i64 0, %33, !dbg !1959
  %34 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1959
  br i1 %34, label %panic35, label %checkok45, !dbg !1959

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %33, 16, !dbg !1959
  %35 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1959
  br i1 %35, label %panic47, label %checkok57, !dbg !1959

checkok57:                                        ; preds = %checkok45
  %36 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1959
  %37 = insertvalue %"char[]" %36, i64 16, 1, !dbg !1959
  %38 = extractvalue %"char[]" %37, 0, !dbg !1959
  %39 = extractvalue %"char[]" %30, 0, !dbg !1959
  store %"char[]" %30, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %40 = load i64, ptr %ptradd59, align 8
  store %"char[]" %37, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %41 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %41, %40
  %42 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %42, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %43 = mul i64 %40, 1, !dbg !1959
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !1959
  %44 = load i64, ptr %len, align 8, !dbg !1960
  %sub = sub i64 %44, 16, !dbg !1960
  store i64 %sub, ptr %len, align 8, !dbg !1960
  %45 = load %"char[]", ptr %bytes, align 8, !dbg !1961
  %46 = extractvalue %"char[]" %45, 0, !dbg !1961
  %47 = extractvalue %"char[]" %45, 1, !dbg !1961
  %gt74 = icmp ugt i64 16, %47, !dbg !1961
  %48 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !1961
  br i1 %48, label %panic75, label %checkok85, !dbg !1961

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %47, 16, !dbg !1961
  %ptradd87 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !1961
  %49 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !1961
  %50 = insertvalue %"char[]" %49, i64 %size86, 1, !dbg !1961
  store %"char[]" %50, ptr %bytes, align 8, !dbg !1961
  br label %loop.cond, !dbg !1961

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.135, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.136, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.137, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 34, ptr align 8 %indirectarg91), !dbg !1962
  unreachable, !dbg !1965

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !1965

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 34), !dbg !1940
  unreachable, !dbg !1940

panic8:                                           ; preds = %if.then
  store i64 %18, ptr %taddr9, align 8
  %52 = insertvalue %any undef, ptr %taddr9, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %54 = insertvalue %any undef, ptr %taddr10, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %53, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd14, align 16
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !1956
  unreachable, !dbg !1956

panic22:                                          ; preds = %checkok16
  store i64 %25, ptr %taddr23, align 8
  %57 = insertvalue %any undef, ptr %taddr23, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr24, align 8
  %59 = insertvalue %any undef, ptr %taddr24, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %58, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %60, ptr %ptradd29, align 16
  %61 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %61, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !1956
  unreachable, !dbg !1956

panic35:                                          ; preds = %if.exit
  store i64 %33, ptr %taddr36, align 8
  %62 = insertvalue %any undef, ptr %taddr36, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %64 = insertvalue %any undef, ptr %taddr37, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %63, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %65, ptr %ptradd42, align 16
  %66 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !1959
  unreachable, !dbg !1959

panic47:                                          ; preds = %checkok45
  store i64 15, ptr %taddr48, align 8
  %67 = insertvalue %any undef, ptr %taddr48, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %33, ptr %taddr49, align 8
  %69 = insertvalue %any undef, ptr %taddr49, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %68, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %70, ptr %ptradd54, align 16
  %71 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !1959
  unreachable, !dbg !1959

panic63:                                          ; preds = %checkok57
  store i64 %41, ptr %taddr64, align 8
  %72 = insertvalue %any undef, ptr %taddr64, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr65, align 8
  %74 = insertvalue %any undef, ptr %taddr65, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %73, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %75, ptr %ptradd70, align 16
  %76 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %76, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !1959
  unreachable, !dbg !1959

panic75:                                          ; preds = %checkok73
  store i64 %47, ptr %taddr76, align 8
  %77 = insertvalue %any undef, ptr %taddr76, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr77, align 8
  %79 = insertvalue %any undef, ptr %taddr77, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %78, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %80, ptr %ptradd82, align 16
  %81 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !1961
  unreachable, !dbg !1961
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc128Random.next_long(ptr %0) #0 comdat !dbg !1966 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1969
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1969
  br i1 %2, label %panic, label %checkok, !dbg !1969

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1970, !DIExpression(), !1969)
  %3 = load ptr, ptr %self, align 8, !dbg !1969
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1969
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  %zext = zext i32 %trunc to i64
  ret i64 %zext

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 35), !dbg !1969
  unreachable, !dbg !1969
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc128Random.next_int(ptr %0) #0 comdat !dbg !1971 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1974
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1974
  br i1 %2, label %panic, label %checkok, !dbg !1974

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1975, !DIExpression(), !1974)
  %3 = load ptr, ptr %self, align 8, !dbg !1974
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1974
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i32
  ret i32 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 36), !dbg !1974
  unreachable, !dbg !1974
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc128Random.next_short(ptr %0) #0 comdat !dbg !1976 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1979
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1979
  br i1 %2, label %panic, label %checkok, !dbg !1979

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1980, !DIExpression(), !1979)
  %3 = load ptr, ptr %self, align 8, !dbg !1979
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1979
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i16
  ret i16 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 37), !dbg !1979
  unreachable, !dbg !1979
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc128Random.next_byte(ptr %0) #0 comdat !dbg !1981 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %result = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1984
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1984
  br i1 %2, label %panic, label %checkok, !dbg !1984

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1985, !DIExpression(), !1984)
  %3 = load ptr, ptr %self, align 8, !dbg !1984
  %4 = call <2 x i64> @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1984
  store <2 x i64> %4, ptr %result, align 16
  %5 = load i128, ptr %result, align 16
  %trunc = trunc i128 %5 to i8
  ret i8 %trunc

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 38), !dbg !1984
  unreachable, !dbg !1984
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc64Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !1986 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg8 = alloca %"char[]", align 8
  %indirectarg9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1990
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1990
  br i1 %3, label %panic, label %checkok, !dbg !1990

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !1991, !DIExpression(), !1992)
    #dbg_declare(ptr %1, !1993, !DIExpression(), !1992)
  %4 = load ptr, ptr %self, align 8, !dbg !1994
  %checknull = icmp eq ptr %4, null, !dbg !1994
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1994
  br i1 %5, label %panic3, label %checkok7, !dbg !1994

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !1995, !DIExpression(), !1997)
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 32, i1 false), !dbg !1997
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !1998
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 32, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg8, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg9, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg8, ptr align 8 %indirectarg9), !dbg !2000
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 16 %return_value, i32 32, i1 false), !dbg !2001
  ret void, !dbg !2001

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 45), !dbg !1992
  unreachable, !dbg !1992

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 47), !dbg !1994
  unreachable, !dbg !1994
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc64Random.next_long(ptr %0) #0 comdat !dbg !2002 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %self13 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !2005
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2005
  br i1 %2, label %panic, label %checkok, !dbg !2005

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2006, !DIExpression(), !2007)
    #dbg_declare(ptr %s, !2008, !DIExpression(), !2009)
  %3 = load ptr, ptr %self, align 8, !dbg !2009
  store ptr %3, ptr %s, align 8, !dbg !2009
    #dbg_declare(ptr %result, !2010, !DIExpression(), !2011)
  %4 = load ptr, ptr %s, align 8, !dbg !2011
  %5 = load i64, ptr %4, align 8, !dbg !2011
  %6 = load ptr, ptr %s, align 8, !dbg !2011
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !2011
  %7 = load i64, ptr %ptradd, align 8, !dbg !2011
  %add = add i64 %5, %7, !dbg !2011
  %8 = load ptr, ptr %s, align 8, !dbg !2011
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !2011
  %9 = load i64, ptr %ptradd3, align 8, !dbg !2011
  %add4 = add i64 %add, %9, !dbg !2011
  store i64 %add4, ptr %result, align 8, !dbg !2011
  %10 = load ptr, ptr %s, align 8, !dbg !2012
  %11 = load ptr, ptr %s, align 8, !dbg !2012
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !2012
  %12 = load i64, ptr %ptradd5, align 8, !dbg !2012
  %13 = load ptr, ptr %s, align 8, !dbg !2012
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !2012
  %14 = load i64, ptr %ptradd6, align 8, !dbg !2012
  %lshr = lshr i64 %14, 11, !dbg !2012
  %15 = freeze i64 %lshr, !dbg !2012
  %xor = xor i64 %12, %15, !dbg !2012
  store i64 %xor, ptr %10, align 8, !dbg !2012
  %16 = load ptr, ptr %s, align 8, !dbg !2013
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !2013
  %17 = load ptr, ptr %s, align 8, !dbg !2013
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !2013
  %18 = load i64, ptr %ptradd8, align 8, !dbg !2013
  %19 = load ptr, ptr %s, align 8, !dbg !2013
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !2013
  %20 = load i64, ptr %ptradd9, align 8, !dbg !2013
  %shl = shl i64 %20, 3, !dbg !2013
  %21 = freeze i64 %shl, !dbg !2013
  %add10 = add i64 %18, %21, !dbg !2013
  store i64 %add10, ptr %ptradd7, align 8, !dbg !2013
  %22 = load ptr, ptr %s, align 8, !dbg !2014
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !2014
  %23 = load ptr, ptr %s, align 8, !dbg !2014
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !2014
  %24 = load i64, ptr %ptradd12, align 8
  store i64 %24, ptr %self13, align 8
  store i64 40, ptr %shift, align 8
  %25 = load i64, ptr %self13, align 8, !dbg !2015
  %26 = load i64, ptr %self13, align 8, !dbg !2015
  %27 = load i64, ptr %shift, align 8, !dbg !2015
  %28 = call i64 @llvm.fshr.i64(i64 %25, i64 %26, i64 %27), !dbg !2015
  %29 = load i64, ptr %result, align 8, !dbg !2014
  %add14 = add i64 %28, %29, !dbg !2014
  store i64 %add14, ptr %ptradd11, align 8, !dbg !2014
  %30 = load ptr, ptr %s, align 8, !dbg !2017
  %ptradd15 = getelementptr inbounds i8, ptr %30, i64 24, !dbg !2017
  %31 = load i64, ptr %ptradd15, align 8, !dbg !2017
  %add16 = add i64 %31, -7046029254386353131, !dbg !2017
  store i64 %add16, ptr %ptradd15, align 8, !dbg !2017
  %32 = load i64, ptr %result, align 8, !dbg !2018
  ret i64 %32, !dbg !2018

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 50), !dbg !2007
  unreachable, !dbg !2007
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc64Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2019 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2020
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2020
  br i1 %3, label %panic, label %checkok, !dbg !2020

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2021, !DIExpression(), !2020)
    #dbg_declare(ptr %1, !2022, !DIExpression(), !2020)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2023
  %4 = load i64, ptr %ptradd, align 8, !dbg !2023
  %lt = icmp ult i64 0, %4, !dbg !2023
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2023

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 62), !dbg !2023
  unreachable, !dbg !2023

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2025, !DIExpression(), !2027)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2027
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2027
  store i64 %6, ptr %len, align 8, !dbg !2027
  br label %loop.cond, !dbg !2028

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2029
  %lt7 = icmp ult i64 0, %7, !dbg !2029
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2029

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2031, !DIExpression(), !2033)
  %8 = load ptr, ptr %self, align 8, !dbg !2034
  %9 = call i64 @std.math.random.Sfc64Random.next_long(ptr %8), !dbg !2033
  store i64 %9, ptr %value, align 8, !dbg !2033
  %10 = load i64, ptr %len, align 8, !dbg !2035
  %le = icmp ule i64 %10, 8, !dbg !2035
  br i1 %le, label %if.then, label %if.exit, !dbg !2035

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2036
  %add = add i64 0, %12, !dbg !2036
  %size = sub i64 %add, 0, !dbg !2036
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2036
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2036
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2036
  %16 = extractvalue %"char[]" %15, 0, !dbg !2036
  %17 = extractvalue %"char[]" %15, 1, !dbg !2036
  %gt = icmp ugt i64 0, %17, !dbg !2036
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2036
  br i1 %18, label %panic8, label %checkok16, !dbg !2036

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2036
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2036
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2036
  %21 = extractvalue %"char[]" %20, 0, !dbg !2036
  %22 = extractvalue %"char[]" %14, 0, !dbg !2036
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2036
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2036
  br label %expr_block.exit, !dbg !2038

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 8, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2039
  %31 = extractvalue %"char[]" %30, 0, !dbg !2039
  %32 = extractvalue %"char[]" %30, 1, !dbg !2039
  %gt34 = icmp sgt i64 0, %32, !dbg !2039
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2039
  br i1 %33, label %panic35, label %checkok45, !dbg !2039

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 8, !dbg !2039
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2039
  br i1 %34, label %panic47, label %checkok57, !dbg !2039

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2039
  %36 = insertvalue %"char[]" %35, i64 8, 1, !dbg !2039
  %37 = extractvalue %"char[]" %36, 0, !dbg !2039
  %38 = extractvalue %"char[]" %29, 0, !dbg !2039
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2039
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2039
  %43 = load i64, ptr %len, align 8, !dbg !2040
  %sub = sub i64 %43, 8, !dbg !2040
  store i64 %sub, ptr %len, align 8, !dbg !2040
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2041
  %45 = extractvalue %"char[]" %44, 0, !dbg !2041
  %46 = extractvalue %"char[]" %44, 1, !dbg !2041
  %gt74 = icmp ugt i64 8, %46, !dbg !2041
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2041
  br i1 %47, label %panic75, label %checkok85, !dbg !2041

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 8, !dbg !2041
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !2041
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2041
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2041
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2041
  br label %loop.cond, !dbg !2041

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.138, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.139, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.140, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 64, ptr align 8 %indirectarg91), !dbg !2042
  unreachable, !dbg !2045

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2045

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 64), !dbg !2020
  unreachable, !dbg !2020

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2036
  unreachable, !dbg !2036

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2036
  unreachable, !dbg !2036

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2039
  unreachable, !dbg !2039

panic47:                                          ; preds = %checkok45
  store i64 7, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2039
  unreachable, !dbg !2039

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2039
  unreachable, !dbg !2039

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2041
  unreachable, !dbg !2041
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc64Random.next_int128(ptr %0) #0 comdat !dbg !2046 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2049
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2049
  br i1 %2, label %panic, label %checkok, !dbg !2049

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2050, !DIExpression(), !2049)
  %3 = load ptr, ptr %self, align 8, !dbg !2051
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2053
  %zext = zext i64 %4 to i128, !dbg !2053
  %shl = shl i128 %zext, 64, !dbg !2053
  %5 = freeze i128 %shl, !dbg !2053
  %6 = load ptr, ptr %self, align 8, !dbg !2051
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr %6), !dbg !2053
  %zext3 = zext i64 %7 to i128, !dbg !2053
  %add = add i128 %5, %zext3, !dbg !2053
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 65), !dbg !2049
  unreachable, !dbg !2049
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc64Random.next_int(ptr %0) #0 comdat !dbg !2054 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2057
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2057
  br i1 %2, label %panic, label %checkok, !dbg !2057

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2058, !DIExpression(), !2057)
  %3 = load ptr, ptr %self, align 8, !dbg !2057
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2057
  %trunc = trunc i64 %4 to i32, !dbg !2057
  ret i32 %trunc, !dbg !2057

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 66), !dbg !2057
  unreachable, !dbg !2057
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc64Random.next_short(ptr %0) #0 comdat !dbg !2059 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2062
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2062
  br i1 %2, label %panic, label %checkok, !dbg !2062

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2063, !DIExpression(), !2062)
  %3 = load ptr, ptr %self, align 8, !dbg !2062
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2062
  %trunc = trunc i64 %4 to i16, !dbg !2062
  ret i16 %trunc, !dbg !2062

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 67), !dbg !2062
  unreachable, !dbg !2062
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc64Random.next_byte(ptr %0) #0 comdat !dbg !2064 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2067
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2067
  br i1 %2, label %panic, label %checkok, !dbg !2067

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2068, !DIExpression(), !2067)
  %3 = load ptr, ptr %self, align 8, !dbg !2067
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !2067
  %trunc = trunc i64 %4 to i8, !dbg !2067
  ret i8 %trunc, !dbg !2067

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 68), !dbg !2067
  unreachable, !dbg !2067
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc32Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2069 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 16
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2074
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2074
  br i1 %3, label %panic, label %checkok, !dbg !2074

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2075, !DIExpression(), !2076)
    #dbg_declare(ptr %1, !2077, !DIExpression(), !2076)
  %4 = load ptr, ptr %self, align 8, !dbg !2078
  %checknull = icmp eq ptr %4, null, !dbg !2078
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2078
  br i1 %5, label %panic3, label %checkok7, !dbg !2078

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2079, !DIExpression(), !2081)
  store i32 0, ptr %return_value, align 4, !dbg !2081
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2081
  store i32 0, ptr %ptradd, align 4, !dbg !2081
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !2081
  store i32 0, ptr %ptradd8, align 4, !dbg !2081
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !2081
  store i32 0, ptr %ptradd9, align 4, !dbg !2081
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2082
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 16, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !2084
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %4, ptr align 16 %return_value, i32 16, i1 false), !dbg !2085
  ret void, !dbg !2085

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 74), !dbg !2076
  unreachable, !dbg !2076

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 76), !dbg !2078
  unreachable, !dbg !2078
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc32Random.next_int(ptr %0) #0 comdat !dbg !2086 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %sfc = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %self = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2089
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2089
  br i1 %2, label %panic, label %checkok, !dbg !2089

checkok:                                          ; preds = %entry
  store ptr %0, ptr %sfc, align 8
    #dbg_declare(ptr %sfc, !2090, !DIExpression(), !2091)
    #dbg_declare(ptr %s, !2092, !DIExpression(), !2093)
  %3 = load ptr, ptr %sfc, align 8, !dbg !2093
  store ptr %3, ptr %s, align 8, !dbg !2093
    #dbg_declare(ptr %result, !2094, !DIExpression(), !2095)
  %4 = load ptr, ptr %s, align 8, !dbg !2095
  %5 = load i32, ptr %4, align 4, !dbg !2095
  %6 = load ptr, ptr %s, align 8, !dbg !2095
  %ptradd = getelementptr inbounds i8, ptr %6, i64 4, !dbg !2095
  %7 = load i32, ptr %ptradd, align 4, !dbg !2095
  %add = add i32 %5, %7, !dbg !2095
  %8 = load ptr, ptr %s, align 8, !dbg !2095
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 12, !dbg !2095
  %9 = load i32, ptr %ptradd3, align 4, !dbg !2095
  %add4 = add i32 %add, %9, !dbg !2095
  store i32 %add4, ptr %result, align 4, !dbg !2095
  %10 = load ptr, ptr %s, align 8, !dbg !2096
  %11 = load ptr, ptr %s, align 8, !dbg !2096
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 4, !dbg !2096
  %12 = load i32, ptr %ptradd5, align 4, !dbg !2096
  %13 = load ptr, ptr %s, align 8, !dbg !2096
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 4, !dbg !2096
  %14 = load i32, ptr %ptradd6, align 4, !dbg !2096
  %lshr = lshr i32 %14, 9, !dbg !2096
  %15 = freeze i32 %lshr, !dbg !2096
  %xor = xor i32 %12, %15, !dbg !2096
  store i32 %xor, ptr %10, align 4, !dbg !2096
  %16 = load ptr, ptr %s, align 8, !dbg !2097
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 4, !dbg !2097
  %17 = load ptr, ptr %s, align 8, !dbg !2097
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !2097
  %18 = load i32, ptr %ptradd8, align 4, !dbg !2097
  %19 = load ptr, ptr %s, align 8, !dbg !2097
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2097
  %20 = load i32, ptr %ptradd9, align 4, !dbg !2097
  %shl = shl i32 %20, 3, !dbg !2097
  %21 = freeze i32 %shl, !dbg !2097
  %add10 = add i32 %18, %21, !dbg !2097
  store i32 %add10, ptr %ptradd7, align 4, !dbg !2097
  %22 = load ptr, ptr %s, align 8, !dbg !2098
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !2098
  %23 = load ptr, ptr %s, align 8, !dbg !2098
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !2098
  %24 = load i32, ptr %ptradd12, align 4
  store i32 %24, ptr %self, align 4
  store i32 11, ptr %shift, align 4
  %25 = load i32, ptr %self, align 4, !dbg !2099
  %26 = load i32, ptr %self, align 4, !dbg !2099
  %27 = load i32, ptr %shift, align 4, !dbg !2099
  %28 = call i32 @llvm.fshr.i32(i32 %25, i32 %26, i32 %27), !dbg !2099
  %29 = load i32, ptr %result, align 4, !dbg !2098
  %add13 = add i32 %28, %29, !dbg !2098
  store i32 %add13, ptr %ptradd11, align 4, !dbg !2098
  %30 = load ptr, ptr %s, align 8, !dbg !2101
  %ptradd14 = getelementptr inbounds i8, ptr %30, i64 12, !dbg !2101
  %31 = load i32, ptr %ptradd14, align 4, !dbg !2101
  %add15 = add i32 %31, -1640531527, !dbg !2101
  store i32 %add15, ptr %ptradd14, align 4, !dbg !2101
  %32 = load i32, ptr %result, align 4, !dbg !2102
  ret i32 %32, !dbg !2102

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.141, i64 61 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 79), !dbg !2091
  unreachable, !dbg !2091
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc32Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2103 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2104
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2104
  br i1 %3, label %panic, label %checkok, !dbg !2104

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2105, !DIExpression(), !2104)
    #dbg_declare(ptr %1, !2106, !DIExpression(), !2104)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2107
  %4 = load i64, ptr %ptradd, align 8, !dbg !2107
  %lt = icmp ult i64 0, %4, !dbg !2107
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2107

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 91), !dbg !2107
  unreachable, !dbg !2107

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2109, !DIExpression(), !2111)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2111
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2111
  store i64 %6, ptr %len, align 8, !dbg !2111
  br label %loop.cond, !dbg !2112

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2113
  %lt7 = icmp ult i64 0, %7, !dbg !2113
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2113

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2115, !DIExpression(), !2117)
  %8 = load ptr, ptr %self, align 8, !dbg !2118
  %9 = call i32 @std.math.random.Sfc32Random.next_int(ptr %8), !dbg !2117
  store i32 %9, ptr %value, align 4, !dbg !2117
  %10 = load i64, ptr %len, align 8, !dbg !2119
  %le = icmp ule i64 %10, 4, !dbg !2119
  br i1 %le, label %if.then, label %if.exit, !dbg !2119

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2120
  %add = add i64 0, %12, !dbg !2120
  %size = sub i64 %add, 0, !dbg !2120
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2120
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2120
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2120
  %16 = extractvalue %"char[]" %15, 0, !dbg !2120
  %17 = extractvalue %"char[]" %15, 1, !dbg !2120
  %gt = icmp ugt i64 0, %17, !dbg !2120
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2120
  br i1 %18, label %panic8, label %checkok16, !dbg !2120

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2120
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2120
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2120
  %21 = extractvalue %"char[]" %20, 0, !dbg !2120
  %22 = extractvalue %"char[]" %14, 0, !dbg !2120
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2120
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2120
  br label %expr_block.exit, !dbg !2122

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2123
  %31 = extractvalue %"char[]" %30, 0, !dbg !2123
  %32 = extractvalue %"char[]" %30, 1, !dbg !2123
  %gt34 = icmp sgt i64 0, %32, !dbg !2123
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2123
  br i1 %33, label %panic35, label %checkok45, !dbg !2123

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !2123
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2123
  br i1 %34, label %panic47, label %checkok57, !dbg !2123

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2123
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !2123
  %37 = extractvalue %"char[]" %36, 0, !dbg !2123
  %38 = extractvalue %"char[]" %29, 0, !dbg !2123
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2123
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2123
  %43 = load i64, ptr %len, align 8, !dbg !2124
  %sub = sub i64 %43, 4, !dbg !2124
  store i64 %sub, ptr %len, align 8, !dbg !2124
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2125
  %45 = extractvalue %"char[]" %44, 0, !dbg !2125
  %46 = extractvalue %"char[]" %44, 1, !dbg !2125
  %gt74 = icmp ugt i64 4, %46, !dbg !2125
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2125
  br i1 %47, label %panic75, label %checkok85, !dbg !2125

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !2125
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !2125
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2125
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2125
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2125
  br label %loop.cond, !dbg !2125

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.142, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.143, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.144, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 93, ptr align 8 %indirectarg91), !dbg !2126
  unreachable, !dbg !2129

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2129

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 93), !dbg !2104
  unreachable, !dbg !2104

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2120
  unreachable, !dbg !2120

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2120
  unreachable, !dbg !2120

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2123
  unreachable, !dbg !2123

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2123
  unreachable, !dbg !2123

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2123
  unreachable, !dbg !2123

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2125
  unreachable, !dbg !2125
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc32Random.next_int128(ptr %0) #0 comdat !dbg !2130 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2133
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2133
  br i1 %2, label %panic, label %checkok, !dbg !2133

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2134, !DIExpression(), !2133)
  %3 = load ptr, ptr %self, align 8, !dbg !2135
  %4 = call i64 @std.math.random.Sfc32Random.next_long(ptr %3), !dbg !2137
  %zext = zext i64 %4 to i128, !dbg !2137
  %shl = shl i128 %zext, 64, !dbg !2137
  %5 = freeze i128 %shl, !dbg !2137
  %6 = load ptr, ptr %self, align 8, !dbg !2135
  %7 = call i64 @std.math.random.Sfc32Random.next_long(ptr %6), !dbg !2137
  %zext3 = zext i64 %7 to i128, !dbg !2137
  %add = add i128 %5, %zext3, !dbg !2137
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 94), !dbg !2133
  unreachable, !dbg !2133
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc32Random.next_long(ptr %0) #0 comdat !dbg !2138 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2141
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2141
  br i1 %2, label %panic, label %checkok, !dbg !2141

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2142, !DIExpression(), !2141)
  %3 = load ptr, ptr %self, align 8, !dbg !2143
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2145
  %zext = zext i32 %4 to i64, !dbg !2145
  %shl = shl i64 %zext, 32, !dbg !2145
  %5 = freeze i64 %shl, !dbg !2145
  %6 = load ptr, ptr %self, align 8, !dbg !2143
  %7 = call i32 @std.math.random.Sfc32Random.next_int(ptr %6), !dbg !2145
  %zext3 = zext i32 %7 to i64, !dbg !2145
  %add = add i64 %5, %zext3, !dbg !2145
  ret i64 %add, !dbg !2145

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 95), !dbg !2141
  unreachable, !dbg !2141
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc32Random.next_short(ptr %0) #0 comdat !dbg !2146 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2149
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2149
  br i1 %2, label %panic, label %checkok, !dbg !2149

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2150, !DIExpression(), !2149)
  %3 = load ptr, ptr %self, align 8, !dbg !2149
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2149
  %trunc = trunc i32 %4 to i16, !dbg !2149
  ret i16 %trunc, !dbg !2149

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 96), !dbg !2149
  unreachable, !dbg !2149
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc32Random.next_byte(ptr %0) #0 comdat !dbg !2151 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2154
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2154
  br i1 %2, label %panic, label %checkok, !dbg !2154

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2155, !DIExpression(), !2154)
  %3 = load ptr, ptr %self, align 8, !dbg !2154
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !2154
  %trunc = trunc i32 %4 to i8, !dbg !2154
  ret i8 %trunc, !dbg !2154

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 97), !dbg !2154
  unreachable, !dbg !2154
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc16Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2156 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2161
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2161
  br i1 %3, label %panic, label %checkok, !dbg !2161

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2162, !DIExpression(), !2163)
    #dbg_declare(ptr %1, !2164, !DIExpression(), !2163)
  %4 = load ptr, ptr %self, align 8, !dbg !2165
  %checknull = icmp eq ptr %4, null, !dbg !2165
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2165
  br i1 %5, label %panic3, label %checkok7, !dbg !2165

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2166, !DIExpression(), !2168)
  store i16 0, ptr %return_value, align 2, !dbg !2168
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2168
  store i16 0, ptr %ptradd, align 2, !dbg !2168
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2168
  store i16 0, ptr %ptradd8, align 2, !dbg !2168
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !2168
  store i16 0, ptr %ptradd9, align 2, !dbg !2168
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2169
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 8, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !2171
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %4, ptr align 2 %return_value, i32 8, i1 false), !dbg !2172
  ret void, !dbg !2172

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 103), !dbg !2163
  unreachable, !dbg !2163

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 105), !dbg !2165
  unreachable, !dbg !2165
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc16Random.next_short(ptr %0) #0 comdat !dbg !2173 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %seed = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %self = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !2176
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2176
  br i1 %2, label %panic, label %checkok, !dbg !2176

checkok:                                          ; preds = %entry
  store ptr %0, ptr %seed, align 8
    #dbg_declare(ptr %seed, !2177, !DIExpression(), !2178)
    #dbg_declare(ptr %s, !2179, !DIExpression(), !2180)
  %3 = load ptr, ptr %seed, align 8, !dbg !2180
  store ptr %3, ptr %s, align 8, !dbg !2180
    #dbg_declare(ptr %result, !2181, !DIExpression(), !2182)
  %4 = load ptr, ptr %s, align 8, !dbg !2182
  %5 = load i16, ptr %4, align 2, !dbg !2182
  %zext = zext i16 %5 to i32, !dbg !2182
  %6 = load ptr, ptr %s, align 8, !dbg !2182
  %ptradd = getelementptr inbounds i8, ptr %6, i64 2, !dbg !2182
  %7 = load i16, ptr %ptradd, align 2, !dbg !2182
  %zext3 = zext i16 %7 to i32, !dbg !2182
  %add = add i32 %zext, %zext3, !dbg !2182
  %8 = load ptr, ptr %s, align 8, !dbg !2182
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 6, !dbg !2182
  %9 = load i16, ptr %ptradd4, align 2, !dbg !2182
  %zext5 = zext i16 %9 to i32, !dbg !2182
  %add6 = add i32 %add, %zext5, !dbg !2182
  %trunc = trunc i32 %add6 to i16, !dbg !2182
  store i16 %trunc, ptr %result, align 2, !dbg !2182
  %10 = load ptr, ptr %s, align 8, !dbg !2183
  %11 = load ptr, ptr %s, align 8, !dbg !2183
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 2, !dbg !2183
  %12 = load i16, ptr %ptradd7, align 2, !dbg !2183
  %zext8 = zext i16 %12 to i32, !dbg !2183
  %13 = load ptr, ptr %s, align 8, !dbg !2183
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 2, !dbg !2183
  %14 = load i16, ptr %ptradd9, align 2, !dbg !2183
  %zext10 = zext i16 %14 to i32, !dbg !2183
  %lshr = lshr i32 %zext10, 2, !dbg !2183
  %15 = freeze i32 %lshr, !dbg !2183
  %xor = xor i32 %zext8, %15, !dbg !2183
  %trunc11 = trunc i32 %xor to i16, !dbg !2183
  store i16 %trunc11, ptr %10, align 2, !dbg !2183
  %16 = load ptr, ptr %s, align 8, !dbg !2184
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 2, !dbg !2184
  %17 = load ptr, ptr %s, align 8, !dbg !2184
  %ptradd13 = getelementptr inbounds i8, ptr %17, i64 4, !dbg !2184
  %18 = load i16, ptr %ptradd13, align 2, !dbg !2184
  %zext14 = zext i16 %18 to i32, !dbg !2184
  %19 = load ptr, ptr %s, align 8, !dbg !2184
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !2184
  %20 = load i16, ptr %ptradd15, align 2, !dbg !2184
  %zext16 = zext i16 %20 to i32, !dbg !2184
  %shl = shl i32 %zext16, 3, !dbg !2184
  %21 = freeze i32 %shl, !dbg !2184
  %add17 = add i32 %zext14, %21, !dbg !2184
  %trunc18 = trunc i32 %add17 to i16, !dbg !2184
  store i16 %trunc18, ptr %ptradd12, align 2, !dbg !2184
  %22 = load ptr, ptr %s, align 8, !dbg !2185
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !2185
  %23 = load ptr, ptr %s, align 8, !dbg !2185
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 4, !dbg !2185
  %24 = load i16, ptr %ptradd20, align 2
  store i16 %24, ptr %self, align 2
  store i16 12, ptr %shift, align 2
  %25 = load i16, ptr %self, align 2, !dbg !2186
  %26 = load i16, ptr %self, align 2, !dbg !2186
  %27 = load i16, ptr %shift, align 2, !dbg !2186
  %28 = call i16 @llvm.fshr.i16(i16 %25, i16 %26, i16 %27), !dbg !2186
  %zext21 = zext i16 %28 to i32, !dbg !2186
  %29 = load i16, ptr %result, align 2, !dbg !2185
  %zext22 = zext i16 %29 to i32, !dbg !2185
  %add23 = add i32 %zext21, %zext22, !dbg !2185
  %trunc24 = trunc i32 %add23 to i16, !dbg !2185
  store i16 %trunc24, ptr %ptradd19, align 2, !dbg !2185
  %30 = load ptr, ptr %s, align 8, !dbg !2188
  %ptradd25 = getelementptr inbounds i8, ptr %30, i64 6, !dbg !2188
  %31 = load i16, ptr %ptradd25, align 2, !dbg !2188
  %add26 = add i16 %31, -25033, !dbg !2188
  store i16 %add26, ptr %ptradd25, align 2, !dbg !2188
  %32 = load i16, ptr %result, align 2, !dbg !2189
  ret i16 %32, !dbg !2189

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.145, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 109), !dbg !2178
  unreachable, !dbg !2178
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc16Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2190 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2191
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2191
  br i1 %3, label %panic, label %checkok, !dbg !2191

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2192, !DIExpression(), !2191)
    #dbg_declare(ptr %1, !2193, !DIExpression(), !2191)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2194
  %4 = load i64, ptr %ptradd, align 8, !dbg !2194
  %lt = icmp ult i64 0, %4, !dbg !2194
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2194

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 121), !dbg !2194
  unreachable, !dbg !2194

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2196, !DIExpression(), !2198)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2198
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2198
  store i64 %6, ptr %len, align 8, !dbg !2198
  br label %loop.cond, !dbg !2199

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2200
  %lt7 = icmp ult i64 0, %7, !dbg !2200
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2200

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2202, !DIExpression(), !2204)
  %8 = load ptr, ptr %self, align 8, !dbg !2205
  %9 = call i16 @std.math.random.Sfc16Random.next_short(ptr %8), !dbg !2204
  store i16 %9, ptr %value, align 2, !dbg !2204
  %10 = load i64, ptr %len, align 8, !dbg !2206
  %le = icmp ule i64 %10, 2, !dbg !2206
  br i1 %le, label %if.then, label %if.exit, !dbg !2206

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2207
  %add = add i64 0, %12, !dbg !2207
  %size = sub i64 %add, 0, !dbg !2207
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2207
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2207
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2207
  %16 = extractvalue %"char[]" %15, 0, !dbg !2207
  %17 = extractvalue %"char[]" %15, 1, !dbg !2207
  %gt = icmp ugt i64 0, %17, !dbg !2207
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2207
  br i1 %18, label %panic8, label %checkok16, !dbg !2207

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2207
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2207
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2207
  %21 = extractvalue %"char[]" %20, 0, !dbg !2207
  %22 = extractvalue %"char[]" %14, 0, !dbg !2207
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2207
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2207
  br label %expr_block.exit, !dbg !2209

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 2, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2210
  %31 = extractvalue %"char[]" %30, 0, !dbg !2210
  %32 = extractvalue %"char[]" %30, 1, !dbg !2210
  %gt34 = icmp sgt i64 0, %32, !dbg !2210
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2210
  br i1 %33, label %panic35, label %checkok45, !dbg !2210

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 2, !dbg !2210
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2210
  br i1 %34, label %panic47, label %checkok57, !dbg !2210

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2210
  %36 = insertvalue %"char[]" %35, i64 2, 1, !dbg !2210
  %37 = extractvalue %"char[]" %36, 0, !dbg !2210
  %38 = extractvalue %"char[]" %29, 0, !dbg !2210
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2210
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2210
  %43 = load i64, ptr %len, align 8, !dbg !2211
  %sub = sub i64 %43, 2, !dbg !2211
  store i64 %sub, ptr %len, align 8, !dbg !2211
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2212
  %45 = extractvalue %"char[]" %44, 0, !dbg !2212
  %46 = extractvalue %"char[]" %44, 1, !dbg !2212
  %gt74 = icmp ugt i64 2, %46, !dbg !2212
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2212
  br i1 %47, label %panic75, label %checkok85, !dbg !2212

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 2, !dbg !2212
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 2, !dbg !2212
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2212
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2212
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2212
  br label %loop.cond, !dbg !2212

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.146, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.147, i64 11 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.148, i64 22 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 123, ptr align 8 %indirectarg91), !dbg !2213
  unreachable, !dbg !2216

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2216

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 123), !dbg !2191
  unreachable, !dbg !2191

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2207
  unreachable, !dbg !2207

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2207
  unreachable, !dbg !2207

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2210
  unreachable, !dbg !2210

panic47:                                          ; preds = %checkok45
  store i64 1, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2210
  unreachable, !dbg !2210

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2210
  unreachable, !dbg !2210

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2212
  unreachable, !dbg !2212
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc16Random.next_int128(ptr %0) #0 comdat !dbg !2217 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2220
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2220
  br i1 %2, label %panic, label %checkok, !dbg !2220

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2221, !DIExpression(), !2220)
  %3 = load ptr, ptr %self, align 8, !dbg !2222
  %4 = call i64 @std.math.random.Sfc16Random.next_long(ptr %3), !dbg !2224
  %zext = zext i64 %4 to i128, !dbg !2224
  %shl = shl i128 %zext, 64, !dbg !2224
  %5 = freeze i128 %shl, !dbg !2224
  %6 = load ptr, ptr %self, align 8, !dbg !2222
  %7 = call i64 @std.math.random.Sfc16Random.next_long(ptr %6), !dbg !2224
  %zext3 = zext i64 %7 to i128, !dbg !2224
  %add = add i128 %5, %zext3, !dbg !2224
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 124), !dbg !2220
  unreachable, !dbg !2220
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc16Random.next_long(ptr %0) #0 comdat !dbg !2225 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2228
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2228
  br i1 %2, label %panic, label %checkok, !dbg !2228

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2229, !DIExpression(), !2228)
  %3 = load ptr, ptr %self, align 8, !dbg !2230
  %4 = call i32 @std.math.random.Sfc16Random.next_int(ptr %3), !dbg !2232
  %zext = zext i32 %4 to i64, !dbg !2232
  %shl = shl i64 %zext, 32, !dbg !2232
  %5 = freeze i64 %shl, !dbg !2232
  %6 = load ptr, ptr %self, align 8, !dbg !2230
  %7 = call i32 @std.math.random.Sfc16Random.next_int(ptr %6), !dbg !2232
  %zext3 = zext i32 %7 to i64, !dbg !2232
  %add = add i64 %5, %zext3, !dbg !2232
  ret i64 %add, !dbg !2232

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 125), !dbg !2228
  unreachable, !dbg !2228
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc16Random.next_int(ptr %0) #0 comdat !dbg !2233 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2236
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2236
  br i1 %2, label %panic, label %checkok, !dbg !2236

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2237, !DIExpression(), !2236)
  %3 = load ptr, ptr %self, align 8, !dbg !2238
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !2240
  %zext = zext i16 %4 to i32, !dbg !2240
  %shl = shl i32 %zext, 16, !dbg !2240
  %5 = freeze i32 %shl, !dbg !2240
  %6 = load ptr, ptr %self, align 8, !dbg !2238
  %7 = call i16 @std.math.random.Sfc16Random.next_short(ptr %6), !dbg !2240
  %zext3 = zext i16 %7 to i32, !dbg !2240
  %add = add i32 %5, %zext3, !dbg !2240
  ret i32 %add, !dbg !2240

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 126), !dbg !2236
  unreachable, !dbg !2236
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc16Random.next_byte(ptr %0) #0 comdat !dbg !2241 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2244
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2244
  br i1 %2, label %panic, label %checkok, !dbg !2244

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2245, !DIExpression(), !2244)
  %3 = load ptr, ptr %self, align 8, !dbg !2244
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !2244
  %trunc = trunc i16 %4 to i8, !dbg !2244
  ret i8 %trunc, !dbg !2244

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 127), !dbg !2244
  unreachable, !dbg !2244
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc8Random.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2246 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %value = alloca ptr, align 8
  %taddr = alloca ptr, align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2251
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2251
  br i1 %3, label %panic, label %checkok, !dbg !2251

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2252, !DIExpression(), !2253)
    #dbg_declare(ptr %1, !2254, !DIExpression(), !2253)
  %4 = load ptr, ptr %self, align 8, !dbg !2255
  %checknull = icmp eq ptr %4, null, !dbg !2255
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2255
  br i1 %5, label %panic3, label %checkok7, !dbg !2255

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %return_value, !2256, !DIExpression(), !2258)
  store i8 0, ptr %return_value, align 1, !dbg !2258
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !2258
  store i8 0, ptr %ptradd, align 1, !dbg !2258
  %ptradd8 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2258
  store i8 0, ptr %ptradd8, align 1, !dbg !2258
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !2258
  store i8 0, ptr %ptradd9, align 1, !dbg !2258
  store ptr %return_value, ptr %value, align 8
  %6 = load ptr, ptr %value, align 8, !dbg !2259
  store ptr %6, ptr %taddr, align 8
  %7 = load ptr, ptr %taddr, align 8
  %8 = insertvalue %"char[]" undef, ptr %7, 0
  %9 = insertvalue %"char[]" %8, i64 4, 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg10, ptr align 8 %input, i32 16, i1 false)
  store %"char[]" %9, ptr %indirectarg11, align 8
  call void @std.math.random.seeder(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11), !dbg !2261
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %4, ptr align 1 %return_value, i32 4, i1 false), !dbg !2262
  ret void, !dbg !2262

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 134), !dbg !2253
  unreachable, !dbg !2253

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 136), !dbg !2255
  unreachable, !dbg !2255
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.Sfc8Random.next_byte(ptr %0) #0 comdat !dbg !2263 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %self21 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !2266
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2266
  br i1 %2, label %panic, label %checkok, !dbg !2266

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2267, !DIExpression(), !2268)
    #dbg_declare(ptr %s, !2269, !DIExpression(), !2270)
  %3 = load ptr, ptr %self, align 8, !dbg !2270
  store ptr %3, ptr %s, align 8, !dbg !2270
    #dbg_declare(ptr %result, !2271, !DIExpression(), !2272)
  %4 = load ptr, ptr %s, align 8, !dbg !2272
  %5 = load i8, ptr %4, align 1, !dbg !2272
  %zext = zext i8 %5 to i32, !dbg !2272
  %6 = load ptr, ptr %s, align 8, !dbg !2272
  %ptradd = getelementptr inbounds i8, ptr %6, i64 1, !dbg !2272
  %7 = load i8, ptr %ptradd, align 1, !dbg !2272
  %zext3 = zext i8 %7 to i32, !dbg !2272
  %add = add i32 %zext, %zext3, !dbg !2272
  %8 = load ptr, ptr %s, align 8, !dbg !2272
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 3, !dbg !2272
  %9 = load i8, ptr %ptradd4, align 1, !dbg !2272
  %zext5 = zext i8 %9 to i32, !dbg !2272
  %add6 = add i32 %add, %zext5, !dbg !2272
  %trunc = trunc i32 %add6 to i8, !dbg !2272
  store i8 %trunc, ptr %result, align 1, !dbg !2272
  %10 = load ptr, ptr %s, align 8, !dbg !2273
  %11 = load ptr, ptr %s, align 8, !dbg !2273
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 1, !dbg !2273
  %12 = load i8, ptr %ptradd7, align 1, !dbg !2273
  %zext8 = zext i8 %12 to i32, !dbg !2273
  %13 = load ptr, ptr %s, align 8, !dbg !2273
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 1, !dbg !2273
  %14 = load i8, ptr %ptradd9, align 1, !dbg !2273
  %zext10 = zext i8 %14 to i32, !dbg !2273
  %lshr = lshr i32 %zext10, 1, !dbg !2273
  %15 = freeze i32 %lshr, !dbg !2273
  %xor = xor i32 %zext8, %15, !dbg !2273
  %trunc11 = trunc i32 %xor to i8, !dbg !2273
  store i8 %trunc11, ptr %10, align 1, !dbg !2273
  %16 = load ptr, ptr %s, align 8, !dbg !2274
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 1, !dbg !2274
  %17 = load ptr, ptr %s, align 8, !dbg !2274
  %ptradd13 = getelementptr inbounds i8, ptr %17, i64 2, !dbg !2274
  %18 = load i8, ptr %ptradd13, align 1, !dbg !2274
  %zext14 = zext i8 %18 to i32, !dbg !2274
  %19 = load ptr, ptr %s, align 8, !dbg !2274
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !2274
  %20 = load i8, ptr %ptradd15, align 1, !dbg !2274
  %zext16 = zext i8 %20 to i32, !dbg !2274
  %shl = shl i32 %zext16, 2, !dbg !2274
  %21 = freeze i32 %shl, !dbg !2274
  %add17 = add i32 %zext14, %21, !dbg !2274
  %trunc18 = trunc i32 %add17 to i8, !dbg !2274
  store i8 %trunc18, ptr %ptradd12, align 1, !dbg !2274
  %22 = load ptr, ptr %s, align 8, !dbg !2275
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !2275
  %23 = load ptr, ptr %s, align 8, !dbg !2275
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 2, !dbg !2275
  %24 = load i8, ptr %ptradd20, align 1
  store i8 %24, ptr %self21, align 1
  store i8 3, ptr %shift, align 1
  %25 = load i8, ptr %self21, align 1, !dbg !2276
  %26 = load i8, ptr %self21, align 1, !dbg !2276
  %27 = load i8, ptr %shift, align 1, !dbg !2276
  %28 = call i8 @llvm.fshr.i8(i8 %25, i8 %26, i8 %27), !dbg !2276
  %zext22 = zext i8 %28 to i32, !dbg !2276
  %29 = load i8, ptr %result, align 1, !dbg !2275
  %zext23 = zext i8 %29 to i32, !dbg !2275
  %add24 = add i32 %zext22, %zext23, !dbg !2275
  %trunc25 = trunc i32 %add24 to i8, !dbg !2275
  store i8 %trunc25, ptr %ptradd19, align 1, !dbg !2275
  %30 = load ptr, ptr %s, align 8, !dbg !2278
  %ptradd26 = getelementptr inbounds i8, ptr %30, i64 3, !dbg !2278
  %31 = load i8, ptr %ptradd26, align 1, !dbg !2278
  %add27 = add i8 %31, -97, !dbg !2278
  store i8 %add27, ptr %ptradd26, align 1, !dbg !2278
  %32 = load i8, ptr %result, align 1, !dbg !2279
  ret i8 %32, !dbg !2279

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 139), !dbg !2268
  unreachable, !dbg !2268
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.Sfc8Random.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2280 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg7 = alloca %"char[]", align 8
  %indirectarg8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg10 = alloca %"any[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca i64, align 8
  %indirectarg20 = alloca %"char[]", align 8
  %indirectarg21 = alloca %"char[]", align 8
  %indirectarg22 = alloca %"char[]", align 8
  %varargslots23 = alloca [2 x %any], align 16
  %indirectarg26 = alloca %"any[]", align 8
  %taddr28 = alloca ptr, align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %indirectarg33 = alloca %"char[]", align 8
  %indirectarg34 = alloca %"char[]", align 8
  %indirectarg35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 16
  %indirectarg39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 16
  %indirectarg51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %indirectarg61 = alloca %"char[]", align 8
  %indirectarg62 = alloca %"char[]", align 8
  %indirectarg63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 16
  %indirectarg67 = alloca %"any[]", align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca i64, align 8
  %indirectarg73 = alloca %"char[]", align 8
  %indirectarg74 = alloca %"char[]", align 8
  %indirectarg75 = alloca %"char[]", align 8
  %varargslots76 = alloca [2 x %any], align 16
  %indirectarg79 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg83 = alloca %"char[]", align 8
  %indirectarg84 = alloca %"char[]", align 8
  %indirectarg85 = alloca %"char[]", align 8
  %indirectarg86 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2281
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2281
  br i1 %3, label %panic, label %checkok, !dbg !2281

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2282, !DIExpression(), !2281)
    #dbg_declare(ptr %1, !2283, !DIExpression(), !2281)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2284, !DIExpression(), !2286)
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2286
  %4 = load i64, ptr %ptradd, align 8, !dbg !2286
  store i64 %4, ptr %len, align 8, !dbg !2286
  br label %loop.cond, !dbg !2287

loop.cond:                                        ; preds = %checkok80, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !2288
  %lt = icmp ult i64 0, %5, !dbg !2288
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2288

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2290, !DIExpression(), !2292)
  %6 = load ptr, ptr %self, align 8, !dbg !2292
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !2292
  store i8 %7, ptr %value, align 1, !dbg !2292
  %8 = load i64, ptr %len, align 8, !dbg !2293
  %le = icmp ule i64 %8, 1, !dbg !2293
  br i1 %le, label %if.then, label %if.exit, !dbg !2293

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %9 = load ptr, ptr %taddr, align 8
  %10 = load i64, ptr %len, align 8, !dbg !2294
  %add = add i64 0, %10, !dbg !2294
  %size = sub i64 %add, 0, !dbg !2294
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2294
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2294
  %13 = load %"char[]", ptr %bytes, align 8, !dbg !2294
  %14 = extractvalue %"char[]" %13, 0, !dbg !2294
  %15 = extractvalue %"char[]" %13, 1, !dbg !2294
  %gt = icmp ugt i64 0, %15, !dbg !2294
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2294
  br i1 %16, label %panic3, label %checkok11, !dbg !2294

checkok11:                                        ; preds = %if.then
  %size12 = sub i64 %15, 0, !dbg !2294
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2294
  %18 = insertvalue %"char[]" %17, i64 %size12, 1, !dbg !2294
  %19 = extractvalue %"char[]" %18, 0, !dbg !2294
  %20 = extractvalue %"char[]" %12, 0, !dbg !2294
  store %"char[]" %12, ptr %taddr13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %taddr13, i64 8
  %21 = load i64, ptr %ptradd14, align 8
  store %"char[]" %18, ptr %taddr15, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %taddr15, i64 8
  %22 = load i64, ptr %ptradd16, align 8
  %neq = icmp ne i64 %22, %21
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %23, label %panic17, label %checkok27

checkok27:                                        ; preds = %checkok11
  %24 = mul i64 %21, 1, !dbg !2294
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !2294
  br label %expr_block.exit, !dbg !2296

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr28, align 8
  %25 = load ptr, ptr %taddr28, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes, align 8, !dbg !2297
  %29 = extractvalue %"char[]" %28, 0, !dbg !2297
  %30 = extractvalue %"char[]" %28, 1, !dbg !2297
  %gt29 = icmp sgt i64 0, %30, !dbg !2297
  %31 = call i1 @llvm.expect.i1(i1 %gt29, i1 false), !dbg !2297
  br i1 %31, label %panic30, label %checkok40, !dbg !2297

checkok40:                                        ; preds = %if.exit
  %lt41 = icmp slt i64 %30, 1, !dbg !2297
  %32 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !2297
  br i1 %32, label %panic42, label %checkok52, !dbg !2297

checkok52:                                        ; preds = %checkok40
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !2297
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !2297
  %35 = extractvalue %"char[]" %34, 0, !dbg !2297
  %36 = extractvalue %"char[]" %27, 0, !dbg !2297
  store %"char[]" %27, ptr %taddr53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %taddr53, i64 8
  %37 = load i64, ptr %ptradd54, align 8
  store %"char[]" %34, ptr %taddr55, align 8
  %ptradd56 = getelementptr inbounds i8, ptr %taddr55, i64 8
  %38 = load i64, ptr %ptradd56, align 8
  %neq57 = icmp ne i64 %38, %37
  %39 = call i1 @llvm.expect.i1(i1 %neq57, i1 false)
  br i1 %39, label %panic58, label %checkok68

checkok68:                                        ; preds = %checkok52
  %40 = mul i64 %37, 1, !dbg !2297
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !2297
  %41 = load i64, ptr %len, align 8, !dbg !2298
  %sub = sub i64 %41, 1, !dbg !2298
  store i64 %sub, ptr %len, align 8, !dbg !2298
  %42 = load %"char[]", ptr %bytes, align 8, !dbg !2299
  %43 = extractvalue %"char[]" %42, 0, !dbg !2299
  %44 = extractvalue %"char[]" %42, 1, !dbg !2299
  %gt69 = icmp ugt i64 1, %44, !dbg !2299
  %45 = call i1 @llvm.expect.i1(i1 %gt69, i1 false), !dbg !2299
  br i1 %45, label %panic70, label %checkok80, !dbg !2299

checkok80:                                        ; preds = %checkok68
  %size81 = sub i64 %44, 1, !dbg !2299
  %ptradd82 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !2299
  %46 = insertvalue %"char[]" undef, ptr %ptradd82, 0, !dbg !2299
  %47 = insertvalue %"char[]" %46, i64 %size81, 1, !dbg !2299
  store %"char[]" %47, ptr %bytes, align 8, !dbg !2299
  br label %loop.cond, !dbg !2299

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.149, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg83, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.150, i64 11 }, ptr %indirectarg84, align 8
  store %"char[]" { ptr @.str.151, i64 21 }, ptr %indirectarg85, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg86, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg83, ptr align 8 %indirectarg84, ptr align 8 %indirectarg85, i32 150, ptr align 8 %indirectarg86), !dbg !2300
  unreachable, !dbg !2303

expr_block.exit:                                  ; preds = %checkok27
  ret void, !dbg !2303

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 150), !dbg !2281
  unreachable, !dbg !2281

panic3:                                           ; preds = %if.then
  store i64 %15, ptr %taddr4, align 8
  %49 = insertvalue %any undef, ptr %taddr4, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %51 = insertvalue %any undef, ptr %taddr5, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg6, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg7, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg8, align 8
  store %any %50, ptr %varargslots, align 16
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd9, align 16
  %53 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %53, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg10, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg6, ptr align 8 %indirectarg7, ptr align 8 %indirectarg8, i32 153, ptr align 8 %indirectarg10), !dbg !2294
  unreachable, !dbg !2294

panic17:                                          ; preds = %checkok11
  store i64 %22, ptr %taddr18, align 8
  %54 = insertvalue %any undef, ptr %taddr18, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr19, align 8
  %56 = insertvalue %any undef, ptr %taddr19, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg20, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg21, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg22, align 8
  store %any %55, ptr %varargslots23, align 16
  %ptradd24 = getelementptr inbounds i8, ptr %varargslots23, i64 16
  store %any %57, ptr %ptradd24, align 16
  %58 = insertvalue %"any[]" undef, ptr %varargslots23, 0
  %"$$temp25" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp25", ptr %indirectarg26, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg20, ptr align 8 %indirectarg21, ptr align 8 %indirectarg22, i32 153, ptr align 8 %indirectarg26), !dbg !2294
  unreachable, !dbg !2294

panic30:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg34, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg35, align 8
  store %any %60, ptr %varargslots36, align 16
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 16
  %63 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp38", ptr %indirectarg39, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg33, ptr align 8 %indirectarg34, ptr align 8 %indirectarg35, i32 156, ptr align 8 %indirectarg39), !dbg !2297
  unreachable, !dbg !2297

panic42:                                          ; preds = %checkok40
  store i64 0, ptr %taddr43, align 8
  %64 = insertvalue %any undef, ptr %taddr43, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr44, align 8
  %66 = insertvalue %any undef, ptr %taddr44, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg47, align 8
  store %any %65, ptr %varargslots48, align 16
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %67, ptr %ptradd49, align 16
  %68 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp50", ptr %indirectarg51, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 156, ptr align 8 %indirectarg51), !dbg !2297
  unreachable, !dbg !2297

panic58:                                          ; preds = %checkok52
  store i64 %38, ptr %taddr59, align 8
  %69 = insertvalue %any undef, ptr %taddr59, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr60, align 8
  %71 = insertvalue %any undef, ptr %taddr60, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg61, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg62, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg63, align 8
  store %any %70, ptr %varargslots64, align 16
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %72, ptr %ptradd65, align 16
  %73 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp66", ptr %indirectarg67, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg61, ptr align 8 %indirectarg62, ptr align 8 %indirectarg63, i32 156, ptr align 8 %indirectarg67), !dbg !2297
  unreachable, !dbg !2297

panic70:                                          ; preds = %checkok68
  store i64 %44, ptr %taddr71, align 8
  %74 = insertvalue %any undef, ptr %taddr71, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr72, align 8
  %76 = insertvalue %any undef, ptr %taddr72, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg73, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg74, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg75, align 8
  store %any %75, ptr %varargslots76, align 16
  %ptradd77 = getelementptr inbounds i8, ptr %varargslots76, i64 16
  store %any %77, ptr %ptradd77, align 16
  %78 = insertvalue %"any[]" undef, ptr %varargslots76, 0
  %"$$temp78" = insertvalue %"any[]" %78, i64 2, 1
  store %"any[]" %"$$temp78", ptr %indirectarg79, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg73, ptr align 8 %indirectarg74, ptr align 8 %indirectarg75, i32 158, ptr align 8 %indirectarg79), !dbg !2299
  unreachable, !dbg !2299
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.Sfc8Random.next_int128(ptr %0) #0 comdat !dbg !2304 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2307
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2307
  br i1 %2, label %panic, label %checkok, !dbg !2307

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2308, !DIExpression(), !2307)
  %3 = load ptr, ptr %self, align 8, !dbg !2309
  %4 = call i64 @std.math.random.Sfc8Random.next_long(ptr %3), !dbg !2311
  %zext = zext i64 %4 to i128, !dbg !2311
  %shl = shl i128 %zext, 64, !dbg !2311
  %5 = freeze i128 %shl, !dbg !2311
  %6 = load ptr, ptr %self, align 8, !dbg !2309
  %7 = call i64 @std.math.random.Sfc8Random.next_long(ptr %6), !dbg !2311
  %zext3 = zext i64 %7 to i128, !dbg !2311
  %add = add i128 %5, %zext3, !dbg !2311
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 151), !dbg !2307
  unreachable, !dbg !2307
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.Sfc8Random.next_long(ptr %0) #0 comdat !dbg !2312 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2315
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2315
  br i1 %2, label %panic, label %checkok, !dbg !2315

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2316, !DIExpression(), !2315)
  %3 = load ptr, ptr %self, align 8, !dbg !2317
  %4 = call i32 @std.math.random.Sfc8Random.next_int(ptr %3), !dbg !2319
  %zext = zext i32 %4 to i64, !dbg !2319
  %shl = shl i64 %zext, 32, !dbg !2319
  %5 = freeze i64 %shl, !dbg !2319
  %6 = load ptr, ptr %self, align 8, !dbg !2317
  %7 = call i32 @std.math.random.Sfc8Random.next_int(ptr %6), !dbg !2319
  %zext3 = zext i32 %7 to i64, !dbg !2319
  %add = add i64 %5, %zext3, !dbg !2319
  ret i64 %add, !dbg !2319

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 152), !dbg !2315
  unreachable, !dbg !2315
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.Sfc8Random.next_int(ptr %0) #0 comdat !dbg !2320 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2323
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2323
  br i1 %2, label %panic, label %checkok, !dbg !2323

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2324, !DIExpression(), !2323)
  %3 = load ptr, ptr %self, align 8, !dbg !2325
  %4 = call i16 @std.math.random.Sfc8Random.next_short(ptr %3), !dbg !2327
  %zext = zext i16 %4 to i32, !dbg !2327
  %shl = shl i32 %zext, 16, !dbg !2327
  %5 = freeze i32 %shl, !dbg !2327
  %6 = load ptr, ptr %self, align 8, !dbg !2325
  %7 = call i16 @std.math.random.Sfc8Random.next_short(ptr %6), !dbg !2327
  %zext3 = zext i16 %7 to i32, !dbg !2327
  %add = add i32 %5, %zext3, !dbg !2327
  ret i32 %add, !dbg !2327

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 153), !dbg !2323
  unreachable, !dbg !2323
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.Sfc8Random.next_short(ptr %0) #0 comdat !dbg !2328 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2331
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2331
  br i1 %2, label %panic, label %checkok, !dbg !2331

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2332, !DIExpression(), !2331)
  %3 = load ptr, ptr %self, align 8, !dbg !2333
  %4 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %3), !dbg !2335
  %zext = zext i8 %4 to i16, !dbg !2335
  %zext3 = zext i16 %zext to i32, !dbg !2335
  %shl = shl i32 %zext3, 8, !dbg !2335
  %5 = freeze i32 %shl, !dbg !2335
  %6 = load ptr, ptr %self, align 8, !dbg !2333
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !2335
  %zext4 = zext i8 %7 to i32, !dbg !2335
  %add = add i32 %5, %zext4, !dbg !2335
  %trunc = trunc i32 %add to i16, !dbg !2335
  ret i16 %trunc, !dbg !2335

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.134, i64 11 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 154), !dbg !2331
  unreachable, !dbg !2331
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.SimpleRandom.set_seed(ptr %0, ptr align 8 %1) #0 comdat !dbg !2336 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %full = alloca [8 x i8], align 1
  %.anon = alloca i64, align 8
  %.anon10 = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %indirectarg14 = alloca %"char[]", align 8
  %indirectarg15 = alloca %"char[]", align 8
  %indirectarg16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg18 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %indirectarg24 = alloca %"char[]", align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %varargslots27 = alloca [1 x %any], align 16
  %indirectarg29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %indirectarg35 = alloca %"char[]", align 8
  %indirectarg36 = alloca %"char[]", align 8
  %indirectarg37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 16
  %indirectarg41 = alloca %"any[]", align 8
  %indirectarg45 = alloca %"char[]", align 8
  %indirectarg46 = alloca %"char[]", align 8
  %indirectarg47 = alloca %"char[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !2341
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2341
  br i1 %3, label %panic, label %checkok, !dbg !2341

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2342, !DIExpression(), !2343)
    #dbg_declare(ptr %1, !2344, !DIExpression(), !2343)
    #dbg_declare(ptr %full, !2345, !DIExpression(), !2347)
  store i8 0, ptr %full, align 1, !dbg !2347
  %ptradd = getelementptr inbounds i8, ptr %full, i64 1, !dbg !2347
  store i8 0, ptr %ptradd, align 1, !dbg !2347
  %ptradd3 = getelementptr inbounds i8, ptr %full, i64 2, !dbg !2347
  store i8 0, ptr %ptradd3, align 1, !dbg !2347
  %ptradd4 = getelementptr inbounds i8, ptr %full, i64 3, !dbg !2347
  store i8 0, ptr %ptradd4, align 1, !dbg !2347
  %ptradd5 = getelementptr inbounds i8, ptr %full, i64 4, !dbg !2347
  store i8 0, ptr %ptradd5, align 1, !dbg !2347
  %ptradd6 = getelementptr inbounds i8, ptr %full, i64 5, !dbg !2347
  store i8 0, ptr %ptradd6, align 1, !dbg !2347
  %ptradd7 = getelementptr inbounds i8, ptr %full, i64 6, !dbg !2347
  store i8 0, ptr %ptradd7, align 1, !dbg !2347
  %ptradd8 = getelementptr inbounds i8, ptr %full, i64 7, !dbg !2347
  store i8 0, ptr %ptradd8, align 1, !dbg !2347
    #dbg_declare(ptr %.anon, !2348, !DIExpression(), !2350)
  %ptradd9 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2350
  %4 = load i64, ptr %ptradd9, align 8, !dbg !2350
  store i64 %4, ptr %.anon, align 8, !dbg !2350
    #dbg_declare(ptr %.anon10, !2348, !DIExpression(), !2350)
  store i64 0, ptr %.anon10, align 8, !dbg !2350
  br label %loop.cond, !dbg !2350

loop.cond:                                        ; preds = %checkok42, %checkok
  %5 = load i64, ptr %.anon10, align 8, !dbg !2350
  %6 = load i64, ptr %.anon, align 8, !dbg !2350
  %lt = icmp ult i64 %5, %6, !dbg !2350
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2350

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %i, !2351, !DIExpression(), !2353)
  %7 = load i64, ptr %.anon10, align 8, !dbg !2353
  store i64 %7, ptr %i, align 8, !dbg !2353
    #dbg_declare(ptr %c, !2354, !DIExpression(), !2353)
  %ptradd11 = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2353
  %8 = load i64, ptr %ptradd11, align 8, !dbg !2353
  %9 = load ptr, ptr %1, align 8, !dbg !2353
  %10 = load i64, ptr %.anon10, align 8, !dbg !2353
  %ge = icmp uge i64 %10, %8, !dbg !2353
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2353
  br i1 %11, label %panic12, label %checkok19, !dbg !2353

checkok19:                                        ; preds = %loop.body
  %ptradd20 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !2353
  %12 = load i8, ptr %ptradd20, align 1, !dbg !2353
  store i8 %12, ptr %c, align 1, !dbg !2353
  %13 = load i64, ptr %i, align 8, !dbg !2355
  %smod = srem i64 %13, 8, !dbg !2355
  %lt21 = icmp slt i64 %smod, 0, !dbg !2355
  %14 = call i1 @llvm.expect.i1(i1 %lt21, i1 false), !dbg !2355
  br i1 %14, label %panic22, label %checkok30, !dbg !2355

checkok30:                                        ; preds = %checkok19
  %ge31 = icmp sge i64 %smod, 8, !dbg !2355
  %15 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !2355
  br i1 %15, label %panic32, label %checkok42, !dbg !2355

checkok42:                                        ; preds = %checkok30
  %ptradd43 = getelementptr inbounds i8, ptr %full, i64 %smod, !dbg !2355
  %16 = load i8, ptr %ptradd43, align 1, !dbg !2355
  %17 = load i8, ptr %c, align 1, !dbg !2355
  %xor = xor i8 %16, %17, !dbg !2355
  store i8 %xor, ptr %ptradd43, align 1, !dbg !2355
  %18 = load i64, ptr %.anon10, align 8, !dbg !2350
  %addnuw = add nuw i64 %18, 1, !dbg !2350
  store i64 %addnuw, ptr %.anon10, align 8, !dbg !2350
  br label %loop.cond, !dbg !2350

loop.exit:                                        ; preds = %loop.cond
  %19 = load ptr, ptr %self, align 8, !dbg !2357
  %checknull = icmp eq ptr %19, null, !dbg !2357
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2357
  br i1 %20, label %panic44, label %checkok48, !dbg !2357

checkok48:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %full, i32 8, i1 false)
    #dbg_declare(ptr %x, !2358, !DIExpression(), !2360)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !2361
  %21 = load i64, ptr %x, align 8, !dbg !2362
  %xor49 = xor i64 %21, 25214903917, !dbg !2357
  %and = and i64 %xor49, 281474976710655, !dbg !2357
  store i64 %and, ptr %19, align 8, !dbg !2357
  ret void, !dbg !2357

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 6), !dbg !2343
  unreachable, !dbg !2343

panic12:                                          ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr13, align 8
  %25 = insertvalue %any undef, ptr %taddr13, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg14, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg15, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg16, align 8
  store %any %24, ptr %varargslots, align 16
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd17, align 16
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg18, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg14, ptr align 8 %indirectarg15, ptr align 8 %indirectarg16, i32 9, ptr align 8 %indirectarg18), !dbg !2353
  unreachable, !dbg !2353

panic22:                                          ; preds = %checkok19
  store i64 %smod, ptr %taddr23, align 8
  %28 = insertvalue %any undef, ptr %taddr23, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.119, i64 38 }, ptr %indirectarg24, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg26, align 8
  store %any %29, ptr %varargslots27, align 16
  %30 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %30, i64 1, 1
  store %"any[]" %"$$temp28", ptr %indirectarg29, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg24, ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, i32 11, ptr align 8 %indirectarg29), !dbg !2355
  unreachable, !dbg !2355

panic32:                                          ; preds = %checkok30
  store i64 8, ptr %taddr33, align 8
  %31 = insertvalue %any undef, ptr %taddr33, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod, ptr %taddr34, align 8
  %33 = insertvalue %any undef, ptr %taddr34, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.118, i64 59 }, ptr %indirectarg35, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg36, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg37, align 8
  store %any %32, ptr %varargslots38, align 16
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %34, ptr %ptradd39, align 16
  %35 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %35, i64 2, 1
  store %"any[]" %"$$temp40", ptr %indirectarg41, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg35, ptr align 8 %indirectarg36, ptr align 8 %indirectarg37, i32 11, ptr align 8 %indirectarg41), !dbg !2355
  unreachable, !dbg !2355

panic44:                                          ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg45, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg46, align 8
  store %"char[]" { ptr @.func.16, i64 8 }, ptr %indirectarg47, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36(ptr align 8 %indirectarg45, ptr align 8 %indirectarg46, ptr align 8 %indirectarg47, i32 13), !dbg !2357
  unreachable, !dbg !2357
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i32 @std.math.random.SimpleRandom.next_int(ptr %0) #0 comdat !dbg !2363 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nextseed = alloca i64, align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %indirectarg6 = alloca %"char[]", align 8
  %indirectarg10 = alloca %"char[]", align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2366
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2366
  br i1 %2, label %panic, label %checkok, !dbg !2366

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2367, !DIExpression(), !2368)
    #dbg_declare(ptr %nextseed, !2369, !DIExpression(), !2370)
  %3 = load ptr, ptr %self, align 8, !dbg !2370
  %checknull = icmp eq ptr %3, null, !dbg !2370
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2370
  br i1 %4, label %panic3, label %checkok7, !dbg !2370

checkok7:                                         ; preds = %checkok
  %5 = load i64, ptr %3, align 8, !dbg !2370
  %mul = mul i64 %5, 25214903917, !dbg !2370
  %add = add i64 %mul, 11, !dbg !2370
  %and = and i64 %add, 281474976710655, !dbg !2370
  store i64 %and, ptr %nextseed, align 8, !dbg !2370
  %6 = load ptr, ptr %self, align 8, !dbg !2371
  %checknull8 = icmp eq ptr %6, null, !dbg !2371
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2371
  br i1 %7, label %panic9, label %checkok13, !dbg !2371

checkok13:                                        ; preds = %checkok7
  %8 = load i64, ptr %nextseed, align 8, !dbg !2371
  store i64 %8, ptr %6, align 8, !dbg !2371
  %9 = load i64, ptr %nextseed, align 8, !dbg !2372
  %lshr = lshr i64 %9, 16, !dbg !2372
  %10 = freeze i64 %lshr, !dbg !2372
  %trunc = trunc i64 %10 to i32, !dbg !2372
  ret i32 %trunc, !dbg !2372

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 16), !dbg !2368
  unreachable, !dbg !2368

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg5, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12(ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, ptr align 8 %indirectarg6, i32 18), !dbg !2370
  unreachable, !dbg !2370

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.17, i64 45 }, ptr %indirectarg10, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.func.28, i64 8 }, ptr %indirectarg12, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13(ptr align 8 %indirectarg10, ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, i32 19), !dbg !2371
  unreachable, !dbg !2371
}

; Function Attrs: nounwind ssp uwtable
define weak_odr void @std.math.random.SimpleRandom.next_bytes(ptr %0, ptr align 8 %1) #0 comdat !dbg !2373 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %indirectarg3 = alloca %"char[]", align 8
  %indirectarg4 = alloca %"char[]", align 8
  %indirectarg5 = alloca %"char[]", align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr = alloca ptr, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %indirectarg11 = alloca %"char[]", align 8
  %indirectarg12 = alloca %"char[]", align 8
  %indirectarg13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg15 = alloca %"any[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %indirectarg25 = alloca %"char[]", align 8
  %indirectarg26 = alloca %"char[]", align 8
  %indirectarg27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 16
  %indirectarg31 = alloca %"any[]", align 8
  %taddr33 = alloca ptr, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %indirectarg38 = alloca %"char[]", align 8
  %indirectarg39 = alloca %"char[]", align 8
  %indirectarg40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 16
  %indirectarg44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %indirectarg50 = alloca %"char[]", align 8
  %indirectarg51 = alloca %"char[]", align 8
  %indirectarg52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 16
  %indirectarg56 = alloca %"any[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr64 = alloca i64, align 8
  %taddr65 = alloca i64, align 8
  %indirectarg66 = alloca %"char[]", align 8
  %indirectarg67 = alloca %"char[]", align 8
  %indirectarg68 = alloca %"char[]", align 8
  %varargslots69 = alloca [2 x %any], align 16
  %indirectarg72 = alloca %"any[]", align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %indirectarg78 = alloca %"char[]", align 8
  %indirectarg79 = alloca %"char[]", align 8
  %indirectarg80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 16
  %indirectarg84 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %indirectarg88 = alloca %"char[]", align 8
  %indirectarg89 = alloca %"char[]", align 8
  %indirectarg90 = alloca %"char[]", align 8
  %indirectarg91 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2374
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2374
  br i1 %3, label %panic, label %checkok, !dbg !2374

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2375, !DIExpression(), !2374)
    #dbg_declare(ptr %1, !2376, !DIExpression(), !2374)
  %ptradd = getelementptr inbounds i8, ptr %1, i64 8, !dbg !2377
  %4 = load i64, ptr %ptradd, align 8, !dbg !2377
  %lt = icmp ult i64 0, %4, !dbg !2377
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2377

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.21, i64 34 }, ptr %indirectarg3, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg4, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg5, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg3, ptr align 8 %indirectarg4, ptr align 8 %indirectarg5, i32 24), !dbg !2377
  unreachable, !dbg !2377

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes, ptr align 8 %1, i32 16, i1 false)
    #dbg_declare(ptr %len, !2379, !DIExpression(), !2381)
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2381
  %6 = load i64, ptr %ptradd6, align 8, !dbg !2381
  store i64 %6, ptr %len, align 8, !dbg !2381
  br label %loop.cond, !dbg !2382

loop.cond:                                        ; preds = %checkok85, %assert_ok
  %7 = load i64, ptr %len, align 8, !dbg !2383
  %lt7 = icmp ult i64 0, %7, !dbg !2383
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !2383

loop.body:                                        ; preds = %loop.cond
    #dbg_declare(ptr %value, !2385, !DIExpression(), !2387)
  %8 = load ptr, ptr %self, align 8, !dbg !2388
  %9 = call i32 @std.math.random.SimpleRandom.next_int(ptr %8), !dbg !2387
  store i32 %9, ptr %value, align 4, !dbg !2387
  %10 = load i64, ptr %len, align 8, !dbg !2389
  %le = icmp ule i64 %10, 4, !dbg !2389
  br i1 %le, label %if.then, label %if.exit, !dbg !2389

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr, align 8
  %11 = load ptr, ptr %taddr, align 8
  %12 = load i64, ptr %len, align 8, !dbg !2390
  %add = add i64 0, %12, !dbg !2390
  %size = sub i64 %add, 0, !dbg !2390
  %13 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !2390
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !2390
  %15 = load %"char[]", ptr %bytes, align 8, !dbg !2390
  %16 = extractvalue %"char[]" %15, 0, !dbg !2390
  %17 = extractvalue %"char[]" %15, 1, !dbg !2390
  %gt = icmp ugt i64 0, %17, !dbg !2390
  %18 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2390
  br i1 %18, label %panic8, label %checkok16, !dbg !2390

checkok16:                                        ; preds = %if.then
  %size17 = sub i64 %17, 0, !dbg !2390
  %19 = insertvalue %"char[]" undef, ptr %16, 0, !dbg !2390
  %20 = insertvalue %"char[]" %19, i64 %size17, 1, !dbg !2390
  %21 = extractvalue %"char[]" %20, 0, !dbg !2390
  %22 = extractvalue %"char[]" %14, 0, !dbg !2390
  store %"char[]" %14, ptr %taddr18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %taddr18, i64 8
  %23 = load i64, ptr %ptradd19, align 8
  store %"char[]" %20, ptr %taddr20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %taddr20, i64 8
  %24 = load i64, ptr %ptradd21, align 8
  %neq = icmp ne i64 %24, %23
  %25 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %25, label %panic22, label %checkok32

checkok32:                                        ; preds = %checkok16
  %26 = mul i64 %23, 1, !dbg !2390
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %21, ptr align 1 %22, i64 %26, i1 false), !dbg !2390
  br label %expr_block.exit, !dbg !2392

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr33, align 8
  %27 = load ptr, ptr %taddr33, align 8
  %28 = insertvalue %"char[]" undef, ptr %27, 0
  %29 = insertvalue %"char[]" %28, i64 4, 1
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !2393
  %31 = extractvalue %"char[]" %30, 0, !dbg !2393
  %32 = extractvalue %"char[]" %30, 1, !dbg !2393
  %gt34 = icmp sgt i64 0, %32, !dbg !2393
  %33 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !2393
  br i1 %33, label %panic35, label %checkok45, !dbg !2393

checkok45:                                        ; preds = %if.exit
  %lt46 = icmp slt i64 %32, 4, !dbg !2393
  %34 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !2393
  br i1 %34, label %panic47, label %checkok57, !dbg !2393

checkok57:                                        ; preds = %checkok45
  %35 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !2393
  %36 = insertvalue %"char[]" %35, i64 4, 1, !dbg !2393
  %37 = extractvalue %"char[]" %36, 0, !dbg !2393
  %38 = extractvalue %"char[]" %29, 0, !dbg !2393
  store %"char[]" %29, ptr %taddr58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %taddr58, i64 8
  %39 = load i64, ptr %ptradd59, align 8
  store %"char[]" %36, ptr %taddr60, align 8
  %ptradd61 = getelementptr inbounds i8, ptr %taddr60, i64 8
  %40 = load i64, ptr %ptradd61, align 8
  %neq62 = icmp ne i64 %40, %39
  %41 = call i1 @llvm.expect.i1(i1 %neq62, i1 false)
  br i1 %41, label %panic63, label %checkok73

checkok73:                                        ; preds = %checkok57
  %42 = mul i64 %39, 1, !dbg !2393
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %37, ptr align 1 %38, i64 %42, i1 false), !dbg !2393
  %43 = load i64, ptr %len, align 8, !dbg !2394
  %sub = sub i64 %43, 4, !dbg !2394
  store i64 %sub, ptr %len, align 8, !dbg !2394
  %44 = load %"char[]", ptr %bytes, align 8, !dbg !2395
  %45 = extractvalue %"char[]" %44, 0, !dbg !2395
  %46 = extractvalue %"char[]" %44, 1, !dbg !2395
  %gt74 = icmp ugt i64 4, %46, !dbg !2395
  %47 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !2395
  br i1 %47, label %panic75, label %checkok85, !dbg !2395

checkok85:                                        ; preds = %checkok73
  %size86 = sub i64 %46, 4, !dbg !2395
  %ptradd87 = getelementptr inbounds i8, ptr %45, i64 4, !dbg !2395
  %48 = insertvalue %"char[]" undef, ptr %ptradd87, 0, !dbg !2395
  %49 = insertvalue %"char[]" %48, i64 %size86, 1, !dbg !2395
  store %"char[]" %49, ptr %bytes, align 8, !dbg !2395
  br label %loop.cond, !dbg !2395

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.155, i64 30 }, ptr %string, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %indirectarg88, ptr align 8 %string, i32 16, i1 false)
  store %"char[]" { ptr @.str.156, i64 21 }, ptr %indirectarg89, align 8
  store %"char[]" { ptr @.str.157, i64 23 }, ptr %indirectarg90, align 8
  store %"any[]" zeroinitializer, ptr %indirectarg91, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg88, ptr align 8 %indirectarg89, ptr align 8 %indirectarg90, i32 26, ptr align 8 %indirectarg91), !dbg !2396
  unreachable, !dbg !2399

expr_block.exit:                                  ; preds = %checkok32
  ret void, !dbg !2399

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 26), !dbg !2374
  unreachable, !dbg !2374

panic8:                                           ; preds = %if.then
  store i64 %17, ptr %taddr9, align 8
  %51 = insertvalue %any undef, ptr %taddr9, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr10, align 8
  %53 = insertvalue %any undef, ptr %taddr10, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg11, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg12, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg13, align 8
  store %any %52, ptr %varargslots, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd14, align 16
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg15, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg11, ptr align 8 %indirectarg12, ptr align 8 %indirectarg13, i32 153, ptr align 8 %indirectarg15), !dbg !2390
  unreachable, !dbg !2390

panic22:                                          ; preds = %checkok16
  store i64 %24, ptr %taddr23, align 8
  %56 = insertvalue %any undef, ptr %taddr23, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr24, align 8
  %58 = insertvalue %any undef, ptr %taddr24, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg25, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg26, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg27, align 8
  store %any %57, ptr %varargslots28, align 16
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %59, ptr %ptradd29, align 16
  %60 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %60, i64 2, 1
  store %"any[]" %"$$temp30", ptr %indirectarg31, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg25, ptr align 8 %indirectarg26, ptr align 8 %indirectarg27, i32 153, ptr align 8 %indirectarg31), !dbg !2390
  unreachable, !dbg !2390

panic35:                                          ; preds = %if.exit
  store i64 %32, ptr %taddr36, align 8
  %61 = insertvalue %any undef, ptr %taddr36, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %63 = insertvalue %any undef, ptr %taddr37, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg38, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg39, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg40, align 8
  store %any %62, ptr %varargslots41, align 16
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %64, ptr %ptradd42, align 16
  %65 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %65, i64 2, 1
  store %"any[]" %"$$temp43", ptr %indirectarg44, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg38, ptr align 8 %indirectarg39, ptr align 8 %indirectarg40, i32 156, ptr align 8 %indirectarg44), !dbg !2393
  unreachable, !dbg !2393

panic47:                                          ; preds = %checkok45
  store i64 3, ptr %taddr48, align 8
  %66 = insertvalue %any undef, ptr %taddr48, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %32, ptr %taddr49, align 8
  %68 = insertvalue %any undef, ptr %taddr49, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.24, i64 60 }, ptr %indirectarg50, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg51, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg52, align 8
  store %any %67, ptr %varargslots53, align 16
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %69, ptr %ptradd54, align 16
  %70 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %70, i64 2, 1
  store %"any[]" %"$$temp55", ptr %indirectarg56, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg50, ptr align 8 %indirectarg51, ptr align 8 %indirectarg52, i32 156, ptr align 8 %indirectarg56), !dbg !2393
  unreachable, !dbg !2393

panic63:                                          ; preds = %checkok57
  store i64 %40, ptr %taddr64, align 8
  %71 = insertvalue %any undef, ptr %taddr64, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr65, align 8
  %73 = insertvalue %any undef, ptr %taddr65, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.23, i64 38 }, ptr %indirectarg66, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg67, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg68, align 8
  store %any %72, ptr %varargslots69, align 16
  %ptradd70 = getelementptr inbounds i8, ptr %varargslots69, i64 16
  store %any %74, ptr %ptradd70, align 16
  %75 = insertvalue %"any[]" undef, ptr %varargslots69, 0
  %"$$temp71" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp71", ptr %indirectarg72, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg66, ptr align 8 %indirectarg67, ptr align 8 %indirectarg68, i32 156, ptr align 8 %indirectarg72), !dbg !2393
  unreachable, !dbg !2393

panic75:                                          ; preds = %checkok73
  store i64 %46, ptr %taddr76, align 8
  %76 = insertvalue %any undef, ptr %taddr76, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr77, align 8
  %78 = insertvalue %any undef, ptr %taddr77, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.22, i64 61 }, ptr %indirectarg78, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %indirectarg79, align 8
  store %"char[]" { ptr @.func.20, i64 10 }, ptr %indirectarg80, align 8
  store %any %77, ptr %varargslots81, align 16
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %79, ptr %ptradd82, align 16
  %80 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp83", ptr %indirectarg84, align 8
  call void @std.core.builtin.panicf(ptr align 8 %indirectarg78, ptr align 8 %indirectarg79, ptr align 8 %indirectarg80, i32 158, ptr align 8 %indirectarg84), !dbg !2395
  unreachable, !dbg !2395
}

; Function Attrs: nounwind ssp uwtable
define weak_odr <2 x i64> @std.math.random.SimpleRandom.next_int128(ptr %0) #0 comdat !dbg !2400 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !2403
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2403
  br i1 %2, label %panic, label %checkok, !dbg !2403

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2404, !DIExpression(), !2403)
  %3 = load ptr, ptr %self, align 8, !dbg !2405
  %4 = call i64 @std.math.random.SimpleRandom.next_long(ptr %3), !dbg !2407
  %zext = zext i64 %4 to i128, !dbg !2407
  %shl = shl i128 %zext, 64, !dbg !2407
  %5 = freeze i128 %shl, !dbg !2407
  %6 = load ptr, ptr %self, align 8, !dbg !2405
  %7 = call i64 @std.math.random.SimpleRandom.next_long(ptr %6), !dbg !2407
  %zext3 = zext i64 %7 to i128, !dbg !2407
  %add = add i128 %5, %zext3, !dbg !2407
  store i128 %add, ptr %taddr, align 16
  %8 = load <2 x i64>, ptr %taddr, align 16
  ret <2 x i64> %8

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.27, i64 11 }, ptr %indirectarg2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 27), !dbg !2403
  unreachable, !dbg !2403
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i64 @std.math.random.SimpleRandom.next_long(ptr %0) #0 comdat !dbg !2408 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2411
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2411
  br i1 %2, label %panic, label %checkok, !dbg !2411

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2412, !DIExpression(), !2411)
  %3 = load ptr, ptr %self, align 8, !dbg !2413
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2415
  %zext = zext i32 %4 to i64, !dbg !2415
  %shl = shl i64 %zext, 32, !dbg !2415
  %5 = freeze i64 %shl, !dbg !2415
  %6 = load ptr, ptr %self, align 8, !dbg !2413
  %7 = call i32 @std.math.random.SimpleRandom.next_int(ptr %6), !dbg !2415
  %zext3 = zext i32 %7 to i64, !dbg !2415
  %add = add i64 %5, %zext3, !dbg !2415
  ret i64 %add, !dbg !2415

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.18, i64 9 }, ptr %indirectarg2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 28), !dbg !2411
  unreachable, !dbg !2411
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i16 @std.math.random.SimpleRandom.next_short(ptr %0) #0 comdat !dbg !2416 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2419
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2419
  br i1 %2, label %panic, label %checkok, !dbg !2419

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2420, !DIExpression(), !2419)
  %3 = load ptr, ptr %self, align 8, !dbg !2419
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2419
  %trunc = trunc i32 %4 to i16, !dbg !2419
  ret i16 %trunc, !dbg !2419

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.29, i64 10 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 29), !dbg !2419
  unreachable, !dbg !2419
}

; Function Attrs: nounwind ssp uwtable
define weak_odr i8 @std.math.random.SimpleRandom.next_byte(ptr %0) #0 comdat !dbg !2421 {
entry:
  %indirectarg = alloca %"char[]", align 8
  %indirectarg1 = alloca %"char[]", align 8
  %indirectarg2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2424
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2424
  br i1 %2, label %panic, label %checkok, !dbg !2424

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
    #dbg_declare(ptr %self, !2425, !DIExpression(), !2424)
  %3 = load ptr, ptr %self, align 8, !dbg !2424
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !2424
  %trunc = trunc i32 %4 to i8, !dbg !2424
  ret i8 %trunc, !dbg !2424

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.14, i64 62 }, ptr %indirectarg, align 8
  store %"char[]" { ptr @.file.154, i64 21 }, ptr %indirectarg1, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %indirectarg2, align 8
  %5 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %5(ptr align 8 %indirectarg, ptr align 8 %indirectarg1, ptr align 8 %indirectarg2, i32 30), !dbg !2424
  unreachable, !dbg !2424
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable
declare void @std.core.builtin.panicf(ptr align 8, ptr align 8, ptr align 8, i32, ptr align 8) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.fshr.i128(i128, i128, i128) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshr.i64(i64, i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshr.i16(i16, i16, i16) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.fshr.i8(i8, i8, i8) #1

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.tmalloc(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.mem.malloc(i64) #0

; Function Attrs: nounwind ssp uwtable
declare void @std.core.mem.free(ptr) #0

; Function Attrs: nounwind ssp uwtable
declare i32 @std.hash.fnv32a.encode(ptr align 8) #0

; Function Attrs: nounwind ssp uwtable
declare i64 @std.time.clock.now() #0

; Function Attrs: nounwind ssp uwtable
declare ptr @std.core.dstring.DString.new_init(ptr, i64, ptr align 8) #0

define internal void @.c3_dynamic_register() align 8 {
entry:
  %next_val = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  %0 = icmp eq ptr %next_val, inttoptr (i64 -1 to ptr)
  br i1 %0, label %dtable_check, label %dtable_skip

dtable_check:                                     ; preds = %dtable_check, %entry
  %dtable_ref = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %entry ], [ %next_dtable_ref, %dtable_check ]
  %dtable_ptr = load ptr, ptr %dtable_ref, align 8
  %1 = icmp eq ptr %dtable_ptr, null
  %next_dtable_ref = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr, i32 0, i32 2
  br i1 %1, label %dtable_found, label %dtable_check

dtable_found:                                     ; preds = %dtable_check
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", ptr %dtable_ref, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip

dtable_skip:                                      ; preds = %dtable_found, %entry
  %next_val1 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  %2 = icmp eq ptr %next_val1, inttoptr (i64 -1 to ptr)
  br i1 %2, label %dtable_check2, label %dtable_skip7

dtable_check2:                                    ; preds = %dtable_check2, %dtable_skip
  %dtable_ref3 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip ], [ %next_dtable_ref5, %dtable_check2 ]
  %dtable_ptr4 = load ptr, ptr %dtable_ref3, align 8
  %3 = icmp eq ptr %dtable_ptr4, null
  %next_dtable_ref5 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr4, i32 0, i32 2
  br i1 %3, label %dtable_found6, label %dtable_check2

dtable_found6:                                    ; preds = %dtable_check2
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", ptr %dtable_ref3, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip7

dtable_skip7:                                     ; preds = %dtable_found6, %dtable_skip
  %next_val8 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  %4 = icmp eq ptr %next_val8, inttoptr (i64 -1 to ptr)
  br i1 %4, label %dtable_check9, label %dtable_skip14

dtable_check9:                                    ; preds = %dtable_check9, %dtable_skip7
  %dtable_ref10 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip7 ], [ %next_dtable_ref12, %dtable_check9 ]
  %dtable_ptr11 = load ptr, ptr %dtable_ref10, align 8
  %5 = icmp eq ptr %dtable_ptr11, null
  %next_dtable_ref12 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr11, i32 0, i32 2
  br i1 %5, label %dtable_found13, label %dtable_check9

dtable_found13:                                   ; preds = %dtable_check9
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", ptr %dtable_ref10, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip14

dtable_skip14:                                    ; preds = %dtable_found13, %dtable_skip7
  %next_val15 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  %6 = icmp eq ptr %next_val15, inttoptr (i64 -1 to ptr)
  br i1 %6, label %dtable_check16, label %dtable_skip21

dtable_check16:                                   ; preds = %dtable_check16, %dtable_skip14
  %dtable_ref17 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip14 ], [ %next_dtable_ref19, %dtable_check16 ]
  %dtable_ptr18 = load ptr, ptr %dtable_ref17, align 8
  %7 = icmp eq ptr %dtable_ptr18, null
  %next_dtable_ref19 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr18, i32 0, i32 2
  br i1 %7, label %dtable_found20, label %dtable_check16

dtable_found20:                                   ; preds = %dtable_check16
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", ptr %dtable_ref17, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip21

dtable_skip21:                                    ; preds = %dtable_found20, %dtable_skip14
  %next_val22 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  %8 = icmp eq ptr %next_val22, inttoptr (i64 -1 to ptr)
  br i1 %8, label %dtable_check23, label %dtable_skip28

dtable_check23:                                   ; preds = %dtable_check23, %dtable_skip21
  %dtable_ref24 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip21 ], [ %next_dtable_ref26, %dtable_check23 ]
  %dtable_ptr25 = load ptr, ptr %dtable_ref24, align 8
  %9 = icmp eq ptr %dtable_ptr25, null
  %next_dtable_ref26 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr25, i32 0, i32 2
  br i1 %9, label %dtable_found27, label %dtable_check23

dtable_found27:                                   ; preds = %dtable_check23
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", ptr %dtable_ref24, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip28

dtable_skip28:                                    ; preds = %dtable_found27, %dtable_skip21
  %next_val29 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  %10 = icmp eq ptr %next_val29, inttoptr (i64 -1 to ptr)
  br i1 %10, label %dtable_check30, label %dtable_skip35

dtable_check30:                                   ; preds = %dtable_check30, %dtable_skip28
  %dtable_ref31 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip28 ], [ %next_dtable_ref33, %dtable_check30 ]
  %dtable_ptr32 = load ptr, ptr %dtable_ref31, align 8
  %11 = icmp eq ptr %dtable_ptr32, null
  %next_dtable_ref33 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr32, i32 0, i32 2
  br i1 %11, label %dtable_found34, label %dtable_check30

dtable_found34:                                   ; preds = %dtable_check30
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", ptr %dtable_ref31, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip35

dtable_skip35:                                    ; preds = %dtable_found34, %dtable_skip28
  %next_val36 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  %12 = icmp eq ptr %next_val36, inttoptr (i64 -1 to ptr)
  br i1 %12, label %dtable_check37, label %dtable_skip42

dtable_check37:                                   ; preds = %dtable_check37, %dtable_skip35
  %dtable_ref38 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg128Random", i32 0, i32 2), %dtable_skip35 ], [ %next_dtable_ref40, %dtable_check37 ]
  %dtable_ptr39 = load ptr, ptr %dtable_ref38, align 8
  %13 = icmp eq ptr %dtable_ptr39, null
  %next_dtable_ref40 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr39, i32 0, i32 2
  br i1 %13, label %dtable_found41, label %dtable_check37

dtable_found41:                                   ; preds = %dtable_check37
  store ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", ptr %dtable_ref38, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip42

dtable_skip42:                                    ; preds = %dtable_found41, %dtable_skip35
  %next_val43 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  %14 = icmp eq ptr %next_val43, inttoptr (i64 -1 to ptr)
  br i1 %14, label %dtable_check44, label %dtable_skip49

dtable_check44:                                   ; preds = %dtable_check44, %dtable_skip42
  %dtable_ref45 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip42 ], [ %next_dtable_ref47, %dtable_check44 ]
  %dtable_ptr46 = load ptr, ptr %dtable_ref45, align 8
  %15 = icmp eq ptr %dtable_ptr46, null
  %next_dtable_ref47 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr46, i32 0, i32 2
  br i1 %15, label %dtable_found48, label %dtable_check44

dtable_found48:                                   ; preds = %dtable_check44
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", ptr %dtable_ref45, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip49

dtable_skip49:                                    ; preds = %dtable_found48, %dtable_skip42
  %next_val50 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  %16 = icmp eq ptr %next_val50, inttoptr (i64 -1 to ptr)
  br i1 %16, label %dtable_check51, label %dtable_skip56

dtable_check51:                                   ; preds = %dtable_check51, %dtable_skip49
  %dtable_ref52 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip49 ], [ %next_dtable_ref54, %dtable_check51 ]
  %dtable_ptr53 = load ptr, ptr %dtable_ref52, align 8
  %17 = icmp eq ptr %dtable_ptr53, null
  %next_dtable_ref54 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr53, i32 0, i32 2
  br i1 %17, label %dtable_found55, label %dtable_check51

dtable_found55:                                   ; preds = %dtable_check51
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", ptr %dtable_ref52, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip56

dtable_skip56:                                    ; preds = %dtable_found55, %dtable_skip49
  %next_val57 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  %18 = icmp eq ptr %next_val57, inttoptr (i64 -1 to ptr)
  br i1 %18, label %dtable_check58, label %dtable_skip63

dtable_check58:                                   ; preds = %dtable_check58, %dtable_skip56
  %dtable_ref59 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip56 ], [ %next_dtable_ref61, %dtable_check58 ]
  %dtable_ptr60 = load ptr, ptr %dtable_ref59, align 8
  %19 = icmp eq ptr %dtable_ptr60, null
  %next_dtable_ref61 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr60, i32 0, i32 2
  br i1 %19, label %dtable_found62, label %dtable_check58

dtable_found62:                                   ; preds = %dtable_check58
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", ptr %dtable_ref59, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip63

dtable_skip63:                                    ; preds = %dtable_found62, %dtable_skip56
  %next_val64 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  %20 = icmp eq ptr %next_val64, inttoptr (i64 -1 to ptr)
  br i1 %20, label %dtable_check65, label %dtable_skip70

dtable_check65:                                   ; preds = %dtable_check65, %dtable_skip63
  %dtable_ref66 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip63 ], [ %next_dtable_ref68, %dtable_check65 ]
  %dtable_ptr67 = load ptr, ptr %dtable_ref66, align 8
  %21 = icmp eq ptr %dtable_ptr67, null
  %next_dtable_ref68 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr67, i32 0, i32 2
  br i1 %21, label %dtable_found69, label %dtable_check65

dtable_found69:                                   ; preds = %dtable_check65
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", ptr %dtable_ref66, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip70

dtable_skip70:                                    ; preds = %dtable_found69, %dtable_skip63
  %next_val71 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  %22 = icmp eq ptr %next_val71, inttoptr (i64 -1 to ptr)
  br i1 %22, label %dtable_check72, label %dtable_skip77

dtable_check72:                                   ; preds = %dtable_check72, %dtable_skip70
  %dtable_ref73 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip70 ], [ %next_dtable_ref75, %dtable_check72 ]
  %dtable_ptr74 = load ptr, ptr %dtable_ref73, align 8
  %23 = icmp eq ptr %dtable_ptr74, null
  %next_dtable_ref75 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr74, i32 0, i32 2
  br i1 %23, label %dtable_found76, label %dtable_check72

dtable_found76:                                   ; preds = %dtable_check72
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", ptr %dtable_ref73, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip77

dtable_skip77:                                    ; preds = %dtable_found76, %dtable_skip70
  %next_val78 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  %24 = icmp eq ptr %next_val78, inttoptr (i64 -1 to ptr)
  br i1 %24, label %dtable_check79, label %dtable_skip84

dtable_check79:                                   ; preds = %dtable_check79, %dtable_skip77
  %dtable_ref80 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip77 ], [ %next_dtable_ref82, %dtable_check79 ]
  %dtable_ptr81 = load ptr, ptr %dtable_ref80, align 8
  %25 = icmp eq ptr %dtable_ptr81, null
  %next_dtable_ref82 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr81, i32 0, i32 2
  br i1 %25, label %dtable_found83, label %dtable_check79

dtable_found83:                                   ; preds = %dtable_check79
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", ptr %dtable_ref80, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip84

dtable_skip84:                                    ; preds = %dtable_found83, %dtable_skip77
  %next_val85 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  %26 = icmp eq ptr %next_val85, inttoptr (i64 -1 to ptr)
  br i1 %26, label %dtable_check86, label %dtable_skip91

dtable_check86:                                   ; preds = %dtable_check86, %dtable_skip84
  %dtable_ref87 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg64Random", i32 0, i32 2), %dtable_skip84 ], [ %next_dtable_ref89, %dtable_check86 ]
  %dtable_ptr88 = load ptr, ptr %dtable_ref87, align 8
  %27 = icmp eq ptr %dtable_ptr88, null
  %next_dtable_ref89 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr88, i32 0, i32 2
  br i1 %27, label %dtable_found90, label %dtable_check86

dtable_found90:                                   ; preds = %dtable_check86
  store ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", ptr %dtable_ref87, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip91

dtable_skip91:                                    ; preds = %dtable_found90, %dtable_skip84
  %next_val92 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  %28 = icmp eq ptr %next_val92, inttoptr (i64 -1 to ptr)
  br i1 %28, label %dtable_check93, label %dtable_skip98

dtable_check93:                                   ; preds = %dtable_check93, %dtable_skip91
  %dtable_ref94 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip91 ], [ %next_dtable_ref96, %dtable_check93 ]
  %dtable_ptr95 = load ptr, ptr %dtable_ref94, align 8
  %29 = icmp eq ptr %dtable_ptr95, null
  %next_dtable_ref96 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr95, i32 0, i32 2
  br i1 %29, label %dtable_found97, label %dtable_check93

dtable_found97:                                   ; preds = %dtable_check93
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", ptr %dtable_ref94, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip98

dtable_skip98:                                    ; preds = %dtable_found97, %dtable_skip91
  %next_val99 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  %30 = icmp eq ptr %next_val99, inttoptr (i64 -1 to ptr)
  br i1 %30, label %dtable_check100, label %dtable_skip105

dtable_check100:                                  ; preds = %dtable_check100, %dtable_skip98
  %dtable_ref101 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip98 ], [ %next_dtable_ref103, %dtable_check100 ]
  %dtable_ptr102 = load ptr, ptr %dtable_ref101, align 8
  %31 = icmp eq ptr %dtable_ptr102, null
  %next_dtable_ref103 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr102, i32 0, i32 2
  br i1 %31, label %dtable_found104, label %dtable_check100

dtable_found104:                                  ; preds = %dtable_check100
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", ptr %dtable_ref101, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip105

dtable_skip105:                                   ; preds = %dtable_found104, %dtable_skip98
  %next_val106 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  %32 = icmp eq ptr %next_val106, inttoptr (i64 -1 to ptr)
  br i1 %32, label %dtable_check107, label %dtable_skip112

dtable_check107:                                  ; preds = %dtable_check107, %dtable_skip105
  %dtable_ref108 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip105 ], [ %next_dtable_ref110, %dtable_check107 ]
  %dtable_ptr109 = load ptr, ptr %dtable_ref108, align 8
  %33 = icmp eq ptr %dtable_ptr109, null
  %next_dtable_ref110 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr109, i32 0, i32 2
  br i1 %33, label %dtable_found111, label %dtable_check107

dtable_found111:                                  ; preds = %dtable_check107
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", ptr %dtable_ref108, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip112

dtable_skip112:                                   ; preds = %dtable_found111, %dtable_skip105
  %next_val113 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  %34 = icmp eq ptr %next_val113, inttoptr (i64 -1 to ptr)
  br i1 %34, label %dtable_check114, label %dtable_skip119

dtable_check114:                                  ; preds = %dtable_check114, %dtable_skip112
  %dtable_ref115 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip112 ], [ %next_dtable_ref117, %dtable_check114 ]
  %dtable_ptr116 = load ptr, ptr %dtable_ref115, align 8
  %35 = icmp eq ptr %dtable_ptr116, null
  %next_dtable_ref117 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr116, i32 0, i32 2
  br i1 %35, label %dtable_found118, label %dtable_check114

dtable_found118:                                  ; preds = %dtable_check114
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", ptr %dtable_ref115, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip119

dtable_skip119:                                   ; preds = %dtable_found118, %dtable_skip112
  %next_val120 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  %36 = icmp eq ptr %next_val120, inttoptr (i64 -1 to ptr)
  br i1 %36, label %dtable_check121, label %dtable_skip126

dtable_check121:                                  ; preds = %dtable_check121, %dtable_skip119
  %dtable_ref122 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip119 ], [ %next_dtable_ref124, %dtable_check121 ]
  %dtable_ptr123 = load ptr, ptr %dtable_ref122, align 8
  %37 = icmp eq ptr %dtable_ptr123, null
  %next_dtable_ref124 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr123, i32 0, i32 2
  br i1 %37, label %dtable_found125, label %dtable_check121

dtable_found125:                                  ; preds = %dtable_check121
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", ptr %dtable_ref122, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip126

dtable_skip126:                                   ; preds = %dtable_found125, %dtable_skip119
  %next_val127 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  %38 = icmp eq ptr %next_val127, inttoptr (i64 -1 to ptr)
  br i1 %38, label %dtable_check128, label %dtable_skip133

dtable_check128:                                  ; preds = %dtable_check128, %dtable_skip126
  %dtable_ref129 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip126 ], [ %next_dtable_ref131, %dtable_check128 ]
  %dtable_ptr130 = load ptr, ptr %dtable_ref129, align 8
  %39 = icmp eq ptr %dtable_ptr130, null
  %next_dtable_ref131 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr130, i32 0, i32 2
  br i1 %39, label %dtable_found132, label %dtable_check128

dtable_found132:                                  ; preds = %dtable_check128
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", ptr %dtable_ref129, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip133

dtable_skip133:                                   ; preds = %dtable_found132, %dtable_skip126
  %next_val134 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  %40 = icmp eq ptr %next_val134, inttoptr (i64 -1 to ptr)
  br i1 %40, label %dtable_check135, label %dtable_skip140

dtable_check135:                                  ; preds = %dtable_check135, %dtable_skip133
  %dtable_ref136 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg32Random", i32 0, i32 2), %dtable_skip133 ], [ %next_dtable_ref138, %dtable_check135 ]
  %dtable_ptr137 = load ptr, ptr %dtable_ref136, align 8
  %41 = icmp eq ptr %dtable_ptr137, null
  %next_dtable_ref138 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr137, i32 0, i32 2
  br i1 %41, label %dtable_found139, label %dtable_check135

dtable_found139:                                  ; preds = %dtable_check135
  store ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", ptr %dtable_ref136, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip140

dtable_skip140:                                   ; preds = %dtable_found139, %dtable_skip133
  %next_val141 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  %42 = icmp eq ptr %next_val141, inttoptr (i64 -1 to ptr)
  br i1 %42, label %dtable_check142, label %dtable_skip147

dtable_check142:                                  ; preds = %dtable_check142, %dtable_skip140
  %dtable_ref143 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip140 ], [ %next_dtable_ref145, %dtable_check142 ]
  %dtable_ptr144 = load ptr, ptr %dtable_ref143, align 8
  %43 = icmp eq ptr %dtable_ptr144, null
  %next_dtable_ref145 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr144, i32 0, i32 2
  br i1 %43, label %dtable_found146, label %dtable_check142

dtable_found146:                                  ; preds = %dtable_check142
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", ptr %dtable_ref143, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip147

dtable_skip147:                                   ; preds = %dtable_found146, %dtable_skip140
  %next_val148 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  %44 = icmp eq ptr %next_val148, inttoptr (i64 -1 to ptr)
  br i1 %44, label %dtable_check149, label %dtable_skip154

dtable_check149:                                  ; preds = %dtable_check149, %dtable_skip147
  %dtable_ref150 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip147 ], [ %next_dtable_ref152, %dtable_check149 ]
  %dtable_ptr151 = load ptr, ptr %dtable_ref150, align 8
  %45 = icmp eq ptr %dtable_ptr151, null
  %next_dtable_ref152 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr151, i32 0, i32 2
  br i1 %45, label %dtable_found153, label %dtable_check149

dtable_found153:                                  ; preds = %dtable_check149
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", ptr %dtable_ref150, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip154

dtable_skip154:                                   ; preds = %dtable_found153, %dtable_skip147
  %next_val155 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  %46 = icmp eq ptr %next_val155, inttoptr (i64 -1 to ptr)
  br i1 %46, label %dtable_check156, label %dtable_skip161

dtable_check156:                                  ; preds = %dtable_check156, %dtable_skip154
  %dtable_ref157 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip154 ], [ %next_dtable_ref159, %dtable_check156 ]
  %dtable_ptr158 = load ptr, ptr %dtable_ref157, align 8
  %47 = icmp eq ptr %dtable_ptr158, null
  %next_dtable_ref159 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr158, i32 0, i32 2
  br i1 %47, label %dtable_found160, label %dtable_check156

dtable_found160:                                  ; preds = %dtable_check156
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", ptr %dtable_ref157, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip161

dtable_skip161:                                   ; preds = %dtable_found160, %dtable_skip154
  %next_val162 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  %48 = icmp eq ptr %next_val162, inttoptr (i64 -1 to ptr)
  br i1 %48, label %dtable_check163, label %dtable_skip168

dtable_check163:                                  ; preds = %dtable_check163, %dtable_skip161
  %dtable_ref164 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip161 ], [ %next_dtable_ref166, %dtable_check163 ]
  %dtable_ptr165 = load ptr, ptr %dtable_ref164, align 8
  %49 = icmp eq ptr %dtable_ptr165, null
  %next_dtable_ref166 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr165, i32 0, i32 2
  br i1 %49, label %dtable_found167, label %dtable_check163

dtable_found167:                                  ; preds = %dtable_check163
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", ptr %dtable_ref164, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip168

dtable_skip168:                                   ; preds = %dtable_found167, %dtable_skip161
  %next_val169 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  %50 = icmp eq ptr %next_val169, inttoptr (i64 -1 to ptr)
  br i1 %50, label %dtable_check170, label %dtable_skip175

dtable_check170:                                  ; preds = %dtable_check170, %dtable_skip168
  %dtable_ref171 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip168 ], [ %next_dtable_ref173, %dtable_check170 ]
  %dtable_ptr172 = load ptr, ptr %dtable_ref171, align 8
  %51 = icmp eq ptr %dtable_ptr172, null
  %next_dtable_ref173 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr172, i32 0, i32 2
  br i1 %51, label %dtable_found174, label %dtable_check170

dtable_found174:                                  ; preds = %dtable_check170
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", ptr %dtable_ref171, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip175

dtable_skip175:                                   ; preds = %dtable_found174, %dtable_skip168
  %next_val176 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  %52 = icmp eq ptr %next_val176, inttoptr (i64 -1 to ptr)
  br i1 %52, label %dtable_check177, label %dtable_skip182

dtable_check177:                                  ; preds = %dtable_check177, %dtable_skip175
  %dtable_ref178 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip175 ], [ %next_dtable_ref180, %dtable_check177 ]
  %dtable_ptr179 = load ptr, ptr %dtable_ref178, align 8
  %53 = icmp eq ptr %dtable_ptr179, null
  %next_dtable_ref180 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr179, i32 0, i32 2
  br i1 %53, label %dtable_found181, label %dtable_check177

dtable_found181:                                  ; preds = %dtable_check177
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", ptr %dtable_ref178, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip182

dtable_skip182:                                   ; preds = %dtable_found181, %dtable_skip175
  %next_val183 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  %54 = icmp eq ptr %next_val183, inttoptr (i64 -1 to ptr)
  br i1 %54, label %dtable_check184, label %dtable_skip189

dtable_check184:                                  ; preds = %dtable_check184, %dtable_skip182
  %dtable_ref185 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Lcg16Random", i32 0, i32 2), %dtable_skip182 ], [ %next_dtable_ref187, %dtable_check184 ]
  %dtable_ptr186 = load ptr, ptr %dtable_ref185, align 8
  %55 = icmp eq ptr %dtable_ptr186, null
  %next_dtable_ref187 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr186, i32 0, i32 2
  br i1 %55, label %dtable_found188, label %dtable_check184

dtable_found188:                                  ; preds = %dtable_check184
  store ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", ptr %dtable_ref185, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Lcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip189

dtable_skip189:                                   ; preds = %dtable_found188, %dtable_skip182
  %next_val190 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  %56 = icmp eq ptr %next_val190, inttoptr (i64 -1 to ptr)
  br i1 %56, label %dtable_check191, label %dtable_skip196

dtable_check191:                                  ; preds = %dtable_check191, %dtable_skip189
  %dtable_ref192 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip189 ], [ %next_dtable_ref194, %dtable_check191 ]
  %dtable_ptr193 = load ptr, ptr %dtable_ref192, align 8
  %57 = icmp eq ptr %dtable_ptr193, null
  %next_dtable_ref194 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr193, i32 0, i32 2
  br i1 %57, label %dtable_found195, label %dtable_check191

dtable_found195:                                  ; preds = %dtable_check191
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", ptr %dtable_ref192, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip196

dtable_skip196:                                   ; preds = %dtable_found195, %dtable_skip189
  %next_val197 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  %58 = icmp eq ptr %next_val197, inttoptr (i64 -1 to ptr)
  br i1 %58, label %dtable_check198, label %dtable_skip203

dtable_check198:                                  ; preds = %dtable_check198, %dtable_skip196
  %dtable_ref199 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip196 ], [ %next_dtable_ref201, %dtable_check198 ]
  %dtable_ptr200 = load ptr, ptr %dtable_ref199, align 8
  %59 = icmp eq ptr %dtable_ptr200, null
  %next_dtable_ref201 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr200, i32 0, i32 2
  br i1 %59, label %dtable_found202, label %dtable_check198

dtable_found202:                                  ; preds = %dtable_check198
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", ptr %dtable_ref199, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip203

dtable_skip203:                                   ; preds = %dtable_found202, %dtable_skip196
  %next_val204 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  %60 = icmp eq ptr %next_val204, inttoptr (i64 -1 to ptr)
  br i1 %60, label %dtable_check205, label %dtable_skip210

dtable_check205:                                  ; preds = %dtable_check205, %dtable_skip203
  %dtable_ref206 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip203 ], [ %next_dtable_ref208, %dtable_check205 ]
  %dtable_ptr207 = load ptr, ptr %dtable_ref206, align 8
  %61 = icmp eq ptr %dtable_ptr207, null
  %next_dtable_ref208 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr207, i32 0, i32 2
  br i1 %61, label %dtable_found209, label %dtable_check205

dtable_found209:                                  ; preds = %dtable_check205
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", ptr %dtable_ref206, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip210

dtable_skip210:                                   ; preds = %dtable_found209, %dtable_skip203
  %next_val211 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  %62 = icmp eq ptr %next_val211, inttoptr (i64 -1 to ptr)
  br i1 %62, label %dtable_check212, label %dtable_skip217

dtable_check212:                                  ; preds = %dtable_check212, %dtable_skip210
  %dtable_ref213 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip210 ], [ %next_dtable_ref215, %dtable_check212 ]
  %dtable_ptr214 = load ptr, ptr %dtable_ref213, align 8
  %63 = icmp eq ptr %dtable_ptr214, null
  %next_dtable_ref215 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr214, i32 0, i32 2
  br i1 %63, label %dtable_found216, label %dtable_check212

dtable_found216:                                  ; preds = %dtable_check212
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", ptr %dtable_ref213, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip217

dtable_skip217:                                   ; preds = %dtable_found216, %dtable_skip210
  %next_val218 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  %64 = icmp eq ptr %next_val218, inttoptr (i64 -1 to ptr)
  br i1 %64, label %dtable_check219, label %dtable_skip224

dtable_check219:                                  ; preds = %dtable_check219, %dtable_skip217
  %dtable_ref220 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip217 ], [ %next_dtable_ref222, %dtable_check219 ]
  %dtable_ptr221 = load ptr, ptr %dtable_ref220, align 8
  %65 = icmp eq ptr %dtable_ptr221, null
  %next_dtable_ref222 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr221, i32 0, i32 2
  br i1 %65, label %dtable_found223, label %dtable_check219

dtable_found223:                                  ; preds = %dtable_check219
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", ptr %dtable_ref220, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip224

dtable_skip224:                                   ; preds = %dtable_found223, %dtable_skip217
  %next_val225 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  %66 = icmp eq ptr %next_val225, inttoptr (i64 -1 to ptr)
  br i1 %66, label %dtable_check226, label %dtable_skip231

dtable_check226:                                  ; preds = %dtable_check226, %dtable_skip224
  %dtable_ref227 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip224 ], [ %next_dtable_ref229, %dtable_check226 ]
  %dtable_ptr228 = load ptr, ptr %dtable_ref227, align 8
  %67 = icmp eq ptr %dtable_ptr228, null
  %next_dtable_ref229 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr228, i32 0, i32 2
  br i1 %67, label %dtable_found230, label %dtable_check226

dtable_found230:                                  ; preds = %dtable_check226
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", ptr %dtable_ref227, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip231

dtable_skip231:                                   ; preds = %dtable_found230, %dtable_skip224
  %next_val232 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  %68 = icmp eq ptr %next_val232, inttoptr (i64 -1 to ptr)
  br i1 %68, label %dtable_check233, label %dtable_skip238

dtable_check233:                                  ; preds = %dtable_check233, %dtable_skip231
  %dtable_ref234 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg128Random", i32 0, i32 2), %dtable_skip231 ], [ %next_dtable_ref236, %dtable_check233 ]
  %dtable_ptr235 = load ptr, ptr %dtable_ref234, align 8
  %69 = icmp eq ptr %dtable_ptr235, null
  %next_dtable_ref236 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr235, i32 0, i32 2
  br i1 %69, label %dtable_found237, label %dtable_check233

dtable_found237:                                  ; preds = %dtable_check233
  store ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", ptr %dtable_ref234, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip238

dtable_skip238:                                   ; preds = %dtable_found237, %dtable_skip231
  %next_val239 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  %70 = icmp eq ptr %next_val239, inttoptr (i64 -1 to ptr)
  br i1 %70, label %dtable_check240, label %dtable_skip245

dtable_check240:                                  ; preds = %dtable_check240, %dtable_skip238
  %dtable_ref241 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip238 ], [ %next_dtable_ref243, %dtable_check240 ]
  %dtable_ptr242 = load ptr, ptr %dtable_ref241, align 8
  %71 = icmp eq ptr %dtable_ptr242, null
  %next_dtable_ref243 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr242, i32 0, i32 2
  br i1 %71, label %dtable_found244, label %dtable_check240

dtable_found244:                                  ; preds = %dtable_check240
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", ptr %dtable_ref241, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip245

dtable_skip245:                                   ; preds = %dtable_found244, %dtable_skip238
  %next_val246 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  %72 = icmp eq ptr %next_val246, inttoptr (i64 -1 to ptr)
  br i1 %72, label %dtable_check247, label %dtable_skip252

dtable_check247:                                  ; preds = %dtable_check247, %dtable_skip245
  %dtable_ref248 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip245 ], [ %next_dtable_ref250, %dtable_check247 ]
  %dtable_ptr249 = load ptr, ptr %dtable_ref248, align 8
  %73 = icmp eq ptr %dtable_ptr249, null
  %next_dtable_ref250 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr249, i32 0, i32 2
  br i1 %73, label %dtable_found251, label %dtable_check247

dtable_found251:                                  ; preds = %dtable_check247
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", ptr %dtable_ref248, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip252

dtable_skip252:                                   ; preds = %dtable_found251, %dtable_skip245
  %next_val253 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  %74 = icmp eq ptr %next_val253, inttoptr (i64 -1 to ptr)
  br i1 %74, label %dtable_check254, label %dtable_skip259

dtable_check254:                                  ; preds = %dtable_check254, %dtable_skip252
  %dtable_ref255 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip252 ], [ %next_dtable_ref257, %dtable_check254 ]
  %dtable_ptr256 = load ptr, ptr %dtable_ref255, align 8
  %75 = icmp eq ptr %dtable_ptr256, null
  %next_dtable_ref257 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr256, i32 0, i32 2
  br i1 %75, label %dtable_found258, label %dtable_check254

dtable_found258:                                  ; preds = %dtable_check254
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", ptr %dtable_ref255, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip259

dtable_skip259:                                   ; preds = %dtable_found258, %dtable_skip252
  %next_val260 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  %76 = icmp eq ptr %next_val260, inttoptr (i64 -1 to ptr)
  br i1 %76, label %dtable_check261, label %dtable_skip266

dtable_check261:                                  ; preds = %dtable_check261, %dtable_skip259
  %dtable_ref262 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip259 ], [ %next_dtable_ref264, %dtable_check261 ]
  %dtable_ptr263 = load ptr, ptr %dtable_ref262, align 8
  %77 = icmp eq ptr %dtable_ptr263, null
  %next_dtable_ref264 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr263, i32 0, i32 2
  br i1 %77, label %dtable_found265, label %dtable_check261

dtable_found265:                                  ; preds = %dtable_check261
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", ptr %dtable_ref262, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip266

dtable_skip266:                                   ; preds = %dtable_found265, %dtable_skip259
  %next_val267 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  %78 = icmp eq ptr %next_val267, inttoptr (i64 -1 to ptr)
  br i1 %78, label %dtable_check268, label %dtable_skip273

dtable_check268:                                  ; preds = %dtable_check268, %dtable_skip266
  %dtable_ref269 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip266 ], [ %next_dtable_ref271, %dtable_check268 ]
  %dtable_ptr270 = load ptr, ptr %dtable_ref269, align 8
  %79 = icmp eq ptr %dtable_ptr270, null
  %next_dtable_ref271 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr270, i32 0, i32 2
  br i1 %79, label %dtable_found272, label %dtable_check268

dtable_found272:                                  ; preds = %dtable_check268
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", ptr %dtable_ref269, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip273

dtable_skip273:                                   ; preds = %dtable_found272, %dtable_skip266
  %next_val274 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  %80 = icmp eq ptr %next_val274, inttoptr (i64 -1 to ptr)
  br i1 %80, label %dtable_check275, label %dtable_skip280

dtable_check275:                                  ; preds = %dtable_check275, %dtable_skip273
  %dtable_ref276 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip273 ], [ %next_dtable_ref278, %dtable_check275 ]
  %dtable_ptr277 = load ptr, ptr %dtable_ref276, align 8
  %81 = icmp eq ptr %dtable_ptr277, null
  %next_dtable_ref278 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr277, i32 0, i32 2
  br i1 %81, label %dtable_found279, label %dtable_check275

dtable_found279:                                  ; preds = %dtable_check275
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", ptr %dtable_ref276, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip280

dtable_skip280:                                   ; preds = %dtable_found279, %dtable_skip273
  %next_val281 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  %82 = icmp eq ptr %next_val281, inttoptr (i64 -1 to ptr)
  br i1 %82, label %dtable_check282, label %dtable_skip287

dtable_check282:                                  ; preds = %dtable_check282, %dtable_skip280
  %dtable_ref283 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg64Random", i32 0, i32 2), %dtable_skip280 ], [ %next_dtable_ref285, %dtable_check282 ]
  %dtable_ptr284 = load ptr, ptr %dtable_ref283, align 8
  %83 = icmp eq ptr %dtable_ptr284, null
  %next_dtable_ref285 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr284, i32 0, i32 2
  br i1 %83, label %dtable_found286, label %dtable_check282

dtable_found286:                                  ; preds = %dtable_check282
  store ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", ptr %dtable_ref283, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip287

dtable_skip287:                                   ; preds = %dtable_found286, %dtable_skip280
  %next_val288 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  %84 = icmp eq ptr %next_val288, inttoptr (i64 -1 to ptr)
  br i1 %84, label %dtable_check289, label %dtable_skip294

dtable_check289:                                  ; preds = %dtable_check289, %dtable_skip287
  %dtable_ref290 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip287 ], [ %next_dtable_ref292, %dtable_check289 ]
  %dtable_ptr291 = load ptr, ptr %dtable_ref290, align 8
  %85 = icmp eq ptr %dtable_ptr291, null
  %next_dtable_ref292 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr291, i32 0, i32 2
  br i1 %85, label %dtable_found293, label %dtable_check289

dtable_found293:                                  ; preds = %dtable_check289
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", ptr %dtable_ref290, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip294

dtable_skip294:                                   ; preds = %dtable_found293, %dtable_skip287
  %next_val295 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  %86 = icmp eq ptr %next_val295, inttoptr (i64 -1 to ptr)
  br i1 %86, label %dtable_check296, label %dtable_skip301

dtable_check296:                                  ; preds = %dtable_check296, %dtable_skip294
  %dtable_ref297 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip294 ], [ %next_dtable_ref299, %dtable_check296 ]
  %dtable_ptr298 = load ptr, ptr %dtable_ref297, align 8
  %87 = icmp eq ptr %dtable_ptr298, null
  %next_dtable_ref299 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr298, i32 0, i32 2
  br i1 %87, label %dtable_found300, label %dtable_check296

dtable_found300:                                  ; preds = %dtable_check296
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", ptr %dtable_ref297, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip301

dtable_skip301:                                   ; preds = %dtable_found300, %dtable_skip294
  %next_val302 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  %88 = icmp eq ptr %next_val302, inttoptr (i64 -1 to ptr)
  br i1 %88, label %dtable_check303, label %dtable_skip308

dtable_check303:                                  ; preds = %dtable_check303, %dtable_skip301
  %dtable_ref304 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip301 ], [ %next_dtable_ref306, %dtable_check303 ]
  %dtable_ptr305 = load ptr, ptr %dtable_ref304, align 8
  %89 = icmp eq ptr %dtable_ptr305, null
  %next_dtable_ref306 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr305, i32 0, i32 2
  br i1 %89, label %dtable_found307, label %dtable_check303

dtable_found307:                                  ; preds = %dtable_check303
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", ptr %dtable_ref304, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip308

dtable_skip308:                                   ; preds = %dtable_found307, %dtable_skip301
  %next_val309 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  %90 = icmp eq ptr %next_val309, inttoptr (i64 -1 to ptr)
  br i1 %90, label %dtable_check310, label %dtable_skip315

dtable_check310:                                  ; preds = %dtable_check310, %dtable_skip308
  %dtable_ref311 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip308 ], [ %next_dtable_ref313, %dtable_check310 ]
  %dtable_ptr312 = load ptr, ptr %dtable_ref311, align 8
  %91 = icmp eq ptr %dtable_ptr312, null
  %next_dtable_ref313 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr312, i32 0, i32 2
  br i1 %91, label %dtable_found314, label %dtable_check310

dtable_found314:                                  ; preds = %dtable_check310
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", ptr %dtable_ref311, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip315

dtable_skip315:                                   ; preds = %dtable_found314, %dtable_skip308
  %next_val316 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  %92 = icmp eq ptr %next_val316, inttoptr (i64 -1 to ptr)
  br i1 %92, label %dtable_check317, label %dtable_skip322

dtable_check317:                                  ; preds = %dtable_check317, %dtable_skip315
  %dtable_ref318 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip315 ], [ %next_dtable_ref320, %dtable_check317 ]
  %dtable_ptr319 = load ptr, ptr %dtable_ref318, align 8
  %93 = icmp eq ptr %dtable_ptr319, null
  %next_dtable_ref320 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr319, i32 0, i32 2
  br i1 %93, label %dtable_found321, label %dtable_check317

dtable_found321:                                  ; preds = %dtable_check317
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", ptr %dtable_ref318, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip322

dtable_skip322:                                   ; preds = %dtable_found321, %dtable_skip315
  %next_val323 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  %94 = icmp eq ptr %next_val323, inttoptr (i64 -1 to ptr)
  br i1 %94, label %dtable_check324, label %dtable_skip329

dtable_check324:                                  ; preds = %dtable_check324, %dtable_skip322
  %dtable_ref325 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip322 ], [ %next_dtable_ref327, %dtable_check324 ]
  %dtable_ptr326 = load ptr, ptr %dtable_ref325, align 8
  %95 = icmp eq ptr %dtable_ptr326, null
  %next_dtable_ref327 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr326, i32 0, i32 2
  br i1 %95, label %dtable_found328, label %dtable_check324

dtable_found328:                                  ; preds = %dtable_check324
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", ptr %dtable_ref325, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip329

dtable_skip329:                                   ; preds = %dtable_found328, %dtable_skip322
  %next_val330 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  %96 = icmp eq ptr %next_val330, inttoptr (i64 -1 to ptr)
  br i1 %96, label %dtable_check331, label %dtable_skip336

dtable_check331:                                  ; preds = %dtable_check331, %dtable_skip329
  %dtable_ref332 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg32Random", i32 0, i32 2), %dtable_skip329 ], [ %next_dtable_ref334, %dtable_check331 ]
  %dtable_ptr333 = load ptr, ptr %dtable_ref332, align 8
  %97 = icmp eq ptr %dtable_ptr333, null
  %next_dtable_ref334 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr333, i32 0, i32 2
  br i1 %97, label %dtable_found335, label %dtable_check331

dtable_found335:                                  ; preds = %dtable_check331
  store ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", ptr %dtable_ref332, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip336

dtable_skip336:                                   ; preds = %dtable_found335, %dtable_skip329
  %next_val337 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  %98 = icmp eq ptr %next_val337, inttoptr (i64 -1 to ptr)
  br i1 %98, label %dtable_check338, label %dtable_skip343

dtable_check338:                                  ; preds = %dtable_check338, %dtable_skip336
  %dtable_ref339 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip336 ], [ %next_dtable_ref341, %dtable_check338 ]
  %dtable_ptr340 = load ptr, ptr %dtable_ref339, align 8
  %99 = icmp eq ptr %dtable_ptr340, null
  %next_dtable_ref341 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr340, i32 0, i32 2
  br i1 %99, label %dtable_found342, label %dtable_check338

dtable_found342:                                  ; preds = %dtable_check338
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", ptr %dtable_ref339, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip343

dtable_skip343:                                   ; preds = %dtable_found342, %dtable_skip336
  %next_val344 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  %100 = icmp eq ptr %next_val344, inttoptr (i64 -1 to ptr)
  br i1 %100, label %dtable_check345, label %dtable_skip350

dtable_check345:                                  ; preds = %dtable_check345, %dtable_skip343
  %dtable_ref346 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip343 ], [ %next_dtable_ref348, %dtable_check345 ]
  %dtable_ptr347 = load ptr, ptr %dtable_ref346, align 8
  %101 = icmp eq ptr %dtable_ptr347, null
  %next_dtable_ref348 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr347, i32 0, i32 2
  br i1 %101, label %dtable_found349, label %dtable_check345

dtable_found349:                                  ; preds = %dtable_check345
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", ptr %dtable_ref346, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip350

dtable_skip350:                                   ; preds = %dtable_found349, %dtable_skip343
  %next_val351 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  %102 = icmp eq ptr %next_val351, inttoptr (i64 -1 to ptr)
  br i1 %102, label %dtable_check352, label %dtable_skip357

dtable_check352:                                  ; preds = %dtable_check352, %dtable_skip350
  %dtable_ref353 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip350 ], [ %next_dtable_ref355, %dtable_check352 ]
  %dtable_ptr354 = load ptr, ptr %dtable_ref353, align 8
  %103 = icmp eq ptr %dtable_ptr354, null
  %next_dtable_ref355 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr354, i32 0, i32 2
  br i1 %103, label %dtable_found356, label %dtable_check352

dtable_found356:                                  ; preds = %dtable_check352
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", ptr %dtable_ref353, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip357

dtable_skip357:                                   ; preds = %dtable_found356, %dtable_skip350
  %next_val358 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  %104 = icmp eq ptr %next_val358, inttoptr (i64 -1 to ptr)
  br i1 %104, label %dtable_check359, label %dtable_skip364

dtable_check359:                                  ; preds = %dtable_check359, %dtable_skip357
  %dtable_ref360 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip357 ], [ %next_dtable_ref362, %dtable_check359 ]
  %dtable_ptr361 = load ptr, ptr %dtable_ref360, align 8
  %105 = icmp eq ptr %dtable_ptr361, null
  %next_dtable_ref362 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr361, i32 0, i32 2
  br i1 %105, label %dtable_found363, label %dtable_check359

dtable_found363:                                  ; preds = %dtable_check359
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", ptr %dtable_ref360, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip364

dtable_skip364:                                   ; preds = %dtable_found363, %dtable_skip357
  %next_val365 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  %106 = icmp eq ptr %next_val365, inttoptr (i64 -1 to ptr)
  br i1 %106, label %dtable_check366, label %dtable_skip371

dtable_check366:                                  ; preds = %dtable_check366, %dtable_skip364
  %dtable_ref367 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip364 ], [ %next_dtable_ref369, %dtable_check366 ]
  %dtable_ptr368 = load ptr, ptr %dtable_ref367, align 8
  %107 = icmp eq ptr %dtable_ptr368, null
  %next_dtable_ref369 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr368, i32 0, i32 2
  br i1 %107, label %dtable_found370, label %dtable_check366

dtable_found370:                                  ; preds = %dtable_check366
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", ptr %dtable_ref367, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip371

dtable_skip371:                                   ; preds = %dtable_found370, %dtable_skip364
  %next_val372 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  %108 = icmp eq ptr %next_val372, inttoptr (i64 -1 to ptr)
  br i1 %108, label %dtable_check373, label %dtable_skip378

dtable_check373:                                  ; preds = %dtable_check373, %dtable_skip371
  %dtable_ref374 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip371 ], [ %next_dtable_ref376, %dtable_check373 ]
  %dtable_ptr375 = load ptr, ptr %dtable_ref374, align 8
  %109 = icmp eq ptr %dtable_ptr375, null
  %next_dtable_ref376 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr375, i32 0, i32 2
  br i1 %109, label %dtable_found377, label %dtable_check373

dtable_found377:                                  ; preds = %dtable_check373
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", ptr %dtable_ref374, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip378

dtable_skip378:                                   ; preds = %dtable_found377, %dtable_skip371
  %next_val379 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  %110 = icmp eq ptr %next_val379, inttoptr (i64 -1 to ptr)
  br i1 %110, label %dtable_check380, label %dtable_skip385

dtable_check380:                                  ; preds = %dtable_check380, %dtable_skip378
  %dtable_ref381 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Mcg16Random", i32 0, i32 2), %dtable_skip378 ], [ %next_dtable_ref383, %dtable_check380 ]
  %dtable_ptr382 = load ptr, ptr %dtable_ref381, align 8
  %111 = icmp eq ptr %dtable_ptr382, null
  %next_dtable_ref383 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr382, i32 0, i32 2
  br i1 %111, label %dtable_found384, label %dtable_check380

dtable_found384:                                  ; preds = %dtable_check380
  store ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", ptr %dtable_ref381, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Mcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip385

dtable_skip385:                                   ; preds = %dtable_found384, %dtable_skip378
  %next_val386 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  %112 = icmp eq ptr %next_val386, inttoptr (i64 -1 to ptr)
  br i1 %112, label %dtable_check387, label %dtable_skip392

dtable_check387:                                  ; preds = %dtable_check387, %dtable_skip385
  %dtable_ref388 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip385 ], [ %next_dtable_ref390, %dtable_check387 ]
  %dtable_ptr389 = load ptr, ptr %dtable_ref388, align 8
  %113 = icmp eq ptr %dtable_ptr389, null
  %next_dtable_ref390 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr389, i32 0, i32 2
  br i1 %113, label %dtable_found391, label %dtable_check387

dtable_found391:                                  ; preds = %dtable_check387
  store ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", ptr %dtable_ref388, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip392

dtable_skip392:                                   ; preds = %dtable_found391, %dtable_skip385
  %next_val393 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  %114 = icmp eq ptr %next_val393, inttoptr (i64 -1 to ptr)
  br i1 %114, label %dtable_check394, label %dtable_skip399

dtable_check394:                                  ; preds = %dtable_check394, %dtable_skip392
  %dtable_ref395 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip392 ], [ %next_dtable_ref397, %dtable_check394 ]
  %dtable_ptr396 = load ptr, ptr %dtable_ref395, align 8
  %115 = icmp eq ptr %dtable_ptr396, null
  %next_dtable_ref397 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr396, i32 0, i32 2
  br i1 %115, label %dtable_found398, label %dtable_check394

dtable_found398:                                  ; preds = %dtable_check394
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", ptr %dtable_ref395, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip399

dtable_skip399:                                   ; preds = %dtable_found398, %dtable_skip392
  %next_val400 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  %116 = icmp eq ptr %next_val400, inttoptr (i64 -1 to ptr)
  br i1 %116, label %dtable_check401, label %dtable_skip406

dtable_check401:                                  ; preds = %dtable_check401, %dtable_skip399
  %dtable_ref402 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip399 ], [ %next_dtable_ref404, %dtable_check401 ]
  %dtable_ptr403 = load ptr, ptr %dtable_ref402, align 8
  %117 = icmp eq ptr %dtable_ptr403, null
  %next_dtable_ref404 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr403, i32 0, i32 2
  br i1 %117, label %dtable_found405, label %dtable_check401

dtable_found405:                                  ; preds = %dtable_check401
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", ptr %dtable_ref402, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip406

dtable_skip406:                                   ; preds = %dtable_found405, %dtable_skip399
  %next_val407 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  %118 = icmp eq ptr %next_val407, inttoptr (i64 -1 to ptr)
  br i1 %118, label %dtable_check408, label %dtable_skip413

dtable_check408:                                  ; preds = %dtable_check408, %dtable_skip406
  %dtable_ref409 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip406 ], [ %next_dtable_ref411, %dtable_check408 ]
  %dtable_ptr410 = load ptr, ptr %dtable_ref409, align 8
  %119 = icmp eq ptr %dtable_ptr410, null
  %next_dtable_ref411 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr410, i32 0, i32 2
  br i1 %119, label %dtable_found412, label %dtable_check408

dtable_found412:                                  ; preds = %dtable_check408
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", ptr %dtable_ref409, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip413

dtable_skip413:                                   ; preds = %dtable_found412, %dtable_skip406
  %next_val414 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  %120 = icmp eq ptr %next_val414, inttoptr (i64 -1 to ptr)
  br i1 %120, label %dtable_check415, label %dtable_skip420

dtable_check415:                                  ; preds = %dtable_check415, %dtable_skip413
  %dtable_ref416 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip413 ], [ %next_dtable_ref418, %dtable_check415 ]
  %dtable_ptr417 = load ptr, ptr %dtable_ref416, align 8
  %121 = icmp eq ptr %dtable_ptr417, null
  %next_dtable_ref418 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr417, i32 0, i32 2
  br i1 %121, label %dtable_found419, label %dtable_check415

dtable_found419:                                  ; preds = %dtable_check415
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", ptr %dtable_ref416, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip420

dtable_skip420:                                   ; preds = %dtable_found419, %dtable_skip413
  %next_val421 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  %122 = icmp eq ptr %next_val421, inttoptr (i64 -1 to ptr)
  br i1 %122, label %dtable_check422, label %dtable_skip427

dtable_check422:                                  ; preds = %dtable_check422, %dtable_skip420
  %dtable_ref423 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip420 ], [ %next_dtable_ref425, %dtable_check422 ]
  %dtable_ptr424 = load ptr, ptr %dtable_ref423, align 8
  %123 = icmp eq ptr %dtable_ptr424, null
  %next_dtable_ref425 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr424, i32 0, i32 2
  br i1 %123, label %dtable_found426, label %dtable_check422

dtable_found426:                                  ; preds = %dtable_check422
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", ptr %dtable_ref423, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip427

dtable_skip427:                                   ; preds = %dtable_found426, %dtable_skip420
  %next_val428 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  %124 = icmp eq ptr %next_val428, inttoptr (i64 -1 to ptr)
  br i1 %124, label %dtable_check429, label %dtable_skip434

dtable_check429:                                  ; preds = %dtable_check429, %dtable_skip427
  %dtable_ref430 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws128Random", i32 0, i32 2), %dtable_skip427 ], [ %next_dtable_ref432, %dtable_check429 ]
  %dtable_ptr431 = load ptr, ptr %dtable_ref430, align 8
  %125 = icmp eq ptr %dtable_ptr431, null
  %next_dtable_ref432 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr431, i32 0, i32 2
  br i1 %125, label %dtable_found433, label %dtable_check429

dtable_found433:                                  ; preds = %dtable_check429
  store ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", ptr %dtable_ref430, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip434

dtable_skip434:                                   ; preds = %dtable_found433, %dtable_skip427
  %next_val435 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  %126 = icmp eq ptr %next_val435, inttoptr (i64 -1 to ptr)
  br i1 %126, label %dtable_check436, label %dtable_skip441

dtable_check436:                                  ; preds = %dtable_check436, %dtable_skip434
  %dtable_ref437 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip434 ], [ %next_dtable_ref439, %dtable_check436 ]
  %dtable_ptr438 = load ptr, ptr %dtable_ref437, align 8
  %127 = icmp eq ptr %dtable_ptr438, null
  %next_dtable_ref439 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr438, i32 0, i32 2
  br i1 %127, label %dtable_found440, label %dtable_check436

dtable_found440:                                  ; preds = %dtable_check436
  store ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", ptr %dtable_ref437, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip441

dtable_skip441:                                   ; preds = %dtable_found440, %dtable_skip434
  %next_val442 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  %128 = icmp eq ptr %next_val442, inttoptr (i64 -1 to ptr)
  br i1 %128, label %dtable_check443, label %dtable_skip448

dtable_check443:                                  ; preds = %dtable_check443, %dtable_skip441
  %dtable_ref444 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip441 ], [ %next_dtable_ref446, %dtable_check443 ]
  %dtable_ptr445 = load ptr, ptr %dtable_ref444, align 8
  %129 = icmp eq ptr %dtable_ptr445, null
  %next_dtable_ref446 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr445, i32 0, i32 2
  br i1 %129, label %dtable_found447, label %dtable_check443

dtable_found447:                                  ; preds = %dtable_check443
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", ptr %dtable_ref444, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip448

dtable_skip448:                                   ; preds = %dtable_found447, %dtable_skip441
  %next_val449 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  %130 = icmp eq ptr %next_val449, inttoptr (i64 -1 to ptr)
  br i1 %130, label %dtable_check450, label %dtable_skip455

dtable_check450:                                  ; preds = %dtable_check450, %dtable_skip448
  %dtable_ref451 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip448 ], [ %next_dtable_ref453, %dtable_check450 ]
  %dtable_ptr452 = load ptr, ptr %dtable_ref451, align 8
  %131 = icmp eq ptr %dtable_ptr452, null
  %next_dtable_ref453 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr452, i32 0, i32 2
  br i1 %131, label %dtable_found454, label %dtable_check450

dtable_found454:                                  ; preds = %dtable_check450
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", ptr %dtable_ref451, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip455

dtable_skip455:                                   ; preds = %dtable_found454, %dtable_skip448
  %next_val456 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  %132 = icmp eq ptr %next_val456, inttoptr (i64 -1 to ptr)
  br i1 %132, label %dtable_check457, label %dtable_skip462

dtable_check457:                                  ; preds = %dtable_check457, %dtable_skip455
  %dtable_ref458 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip455 ], [ %next_dtable_ref460, %dtable_check457 ]
  %dtable_ptr459 = load ptr, ptr %dtable_ref458, align 8
  %133 = icmp eq ptr %dtable_ptr459, null
  %next_dtable_ref460 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr459, i32 0, i32 2
  br i1 %133, label %dtable_found461, label %dtable_check457

dtable_found461:                                  ; preds = %dtable_check457
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", ptr %dtable_ref458, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip462

dtable_skip462:                                   ; preds = %dtable_found461, %dtable_skip455
  %next_val463 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  %134 = icmp eq ptr %next_val463, inttoptr (i64 -1 to ptr)
  br i1 %134, label %dtable_check464, label %dtable_skip469

dtable_check464:                                  ; preds = %dtable_check464, %dtable_skip462
  %dtable_ref465 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip462 ], [ %next_dtable_ref467, %dtable_check464 ]
  %dtable_ptr466 = load ptr, ptr %dtable_ref465, align 8
  %135 = icmp eq ptr %dtable_ptr466, null
  %next_dtable_ref467 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr466, i32 0, i32 2
  br i1 %135, label %dtable_found468, label %dtable_check464

dtable_found468:                                  ; preds = %dtable_check464
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", ptr %dtable_ref465, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip469

dtable_skip469:                                   ; preds = %dtable_found468, %dtable_skip462
  %next_val470 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  %136 = icmp eq ptr %next_val470, inttoptr (i64 -1 to ptr)
  br i1 %136, label %dtable_check471, label %dtable_skip476

dtable_check471:                                  ; preds = %dtable_check471, %dtable_skip469
  %dtable_ref472 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip469 ], [ %next_dtable_ref474, %dtable_check471 ]
  %dtable_ptr473 = load ptr, ptr %dtable_ref472, align 8
  %137 = icmp eq ptr %dtable_ptr473, null
  %next_dtable_ref474 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr473, i32 0, i32 2
  br i1 %137, label %dtable_found475, label %dtable_check471

dtable_found475:                                  ; preds = %dtable_check471
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", ptr %dtable_ref472, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip476

dtable_skip476:                                   ; preds = %dtable_found475, %dtable_skip469
  %next_val477 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  %138 = icmp eq ptr %next_val477, inttoptr (i64 -1 to ptr)
  br i1 %138, label %dtable_check478, label %dtable_skip483

dtable_check478:                                  ; preds = %dtable_check478, %dtable_skip476
  %dtable_ref479 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws64Random", i32 0, i32 2), %dtable_skip476 ], [ %next_dtable_ref481, %dtable_check478 ]
  %dtable_ptr480 = load ptr, ptr %dtable_ref479, align 8
  %139 = icmp eq ptr %dtable_ptr480, null
  %next_dtable_ref481 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr480, i32 0, i32 2
  br i1 %139, label %dtable_found482, label %dtable_check478

dtable_found482:                                  ; preds = %dtable_check478
  store ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", ptr %dtable_ref479, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip483

dtable_skip483:                                   ; preds = %dtable_found482, %dtable_skip476
  %next_val484 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  %140 = icmp eq ptr %next_val484, inttoptr (i64 -1 to ptr)
  br i1 %140, label %dtable_check485, label %dtable_skip490

dtable_check485:                                  ; preds = %dtable_check485, %dtable_skip483
  %dtable_ref486 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip483 ], [ %next_dtable_ref488, %dtable_check485 ]
  %dtable_ptr487 = load ptr, ptr %dtable_ref486, align 8
  %141 = icmp eq ptr %dtable_ptr487, null
  %next_dtable_ref488 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr487, i32 0, i32 2
  br i1 %141, label %dtable_found489, label %dtable_check485

dtable_found489:                                  ; preds = %dtable_check485
  store ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", ptr %dtable_ref486, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip490

dtable_skip490:                                   ; preds = %dtable_found489, %dtable_skip483
  %next_val491 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  %142 = icmp eq ptr %next_val491, inttoptr (i64 -1 to ptr)
  br i1 %142, label %dtable_check492, label %dtable_skip497

dtable_check492:                                  ; preds = %dtable_check492, %dtable_skip490
  %dtable_ref493 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip490 ], [ %next_dtable_ref495, %dtable_check492 ]
  %dtable_ptr494 = load ptr, ptr %dtable_ref493, align 8
  %143 = icmp eq ptr %dtable_ptr494, null
  %next_dtable_ref495 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr494, i32 0, i32 2
  br i1 %143, label %dtable_found496, label %dtable_check492

dtable_found496:                                  ; preds = %dtable_check492
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", ptr %dtable_ref493, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip497

dtable_skip497:                                   ; preds = %dtable_found496, %dtable_skip490
  %next_val498 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  %144 = icmp eq ptr %next_val498, inttoptr (i64 -1 to ptr)
  br i1 %144, label %dtable_check499, label %dtable_skip504

dtable_check499:                                  ; preds = %dtable_check499, %dtable_skip497
  %dtable_ref500 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip497 ], [ %next_dtable_ref502, %dtable_check499 ]
  %dtable_ptr501 = load ptr, ptr %dtable_ref500, align 8
  %145 = icmp eq ptr %dtable_ptr501, null
  %next_dtable_ref502 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr501, i32 0, i32 2
  br i1 %145, label %dtable_found503, label %dtable_check499

dtable_found503:                                  ; preds = %dtable_check499
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", ptr %dtable_ref500, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip504

dtable_skip504:                                   ; preds = %dtable_found503, %dtable_skip497
  %next_val505 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  %146 = icmp eq ptr %next_val505, inttoptr (i64 -1 to ptr)
  br i1 %146, label %dtable_check506, label %dtable_skip511

dtable_check506:                                  ; preds = %dtable_check506, %dtable_skip504
  %dtable_ref507 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip504 ], [ %next_dtable_ref509, %dtable_check506 ]
  %dtable_ptr508 = load ptr, ptr %dtable_ref507, align 8
  %147 = icmp eq ptr %dtable_ptr508, null
  %next_dtable_ref509 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr508, i32 0, i32 2
  br i1 %147, label %dtable_found510, label %dtable_check506

dtable_found510:                                  ; preds = %dtable_check506
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", ptr %dtable_ref507, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip511

dtable_skip511:                                   ; preds = %dtable_found510, %dtable_skip504
  %next_val512 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  %148 = icmp eq ptr %next_val512, inttoptr (i64 -1 to ptr)
  br i1 %148, label %dtable_check513, label %dtable_skip518

dtable_check513:                                  ; preds = %dtable_check513, %dtable_skip511
  %dtable_ref514 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip511 ], [ %next_dtable_ref516, %dtable_check513 ]
  %dtable_ptr515 = load ptr, ptr %dtable_ref514, align 8
  %149 = icmp eq ptr %dtable_ptr515, null
  %next_dtable_ref516 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr515, i32 0, i32 2
  br i1 %149, label %dtable_found517, label %dtable_check513

dtable_found517:                                  ; preds = %dtable_check513
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", ptr %dtable_ref514, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip518

dtable_skip518:                                   ; preds = %dtable_found517, %dtable_skip511
  %next_val519 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  %150 = icmp eq ptr %next_val519, inttoptr (i64 -1 to ptr)
  br i1 %150, label %dtable_check520, label %dtable_skip525

dtable_check520:                                  ; preds = %dtable_check520, %dtable_skip518
  %dtable_ref521 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip518 ], [ %next_dtable_ref523, %dtable_check520 ]
  %dtable_ptr522 = load ptr, ptr %dtable_ref521, align 8
  %151 = icmp eq ptr %dtable_ptr522, null
  %next_dtable_ref523 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr522, i32 0, i32 2
  br i1 %151, label %dtable_found524, label %dtable_check520

dtable_found524:                                  ; preds = %dtable_check520
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", ptr %dtable_ref521, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip525

dtable_skip525:                                   ; preds = %dtable_found524, %dtable_skip518
  %next_val526 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  %152 = icmp eq ptr %next_val526, inttoptr (i64 -1 to ptr)
  br i1 %152, label %dtable_check527, label %dtable_skip532

dtable_check527:                                  ; preds = %dtable_check527, %dtable_skip525
  %dtable_ref528 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws32Random", i32 0, i32 2), %dtable_skip525 ], [ %next_dtable_ref530, %dtable_check527 ]
  %dtable_ptr529 = load ptr, ptr %dtable_ref528, align 8
  %153 = icmp eq ptr %dtable_ptr529, null
  %next_dtable_ref530 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr529, i32 0, i32 2
  br i1 %153, label %dtable_found531, label %dtable_check527

dtable_found531:                                  ; preds = %dtable_check527
  store ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", ptr %dtable_ref528, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip532

dtable_skip532:                                   ; preds = %dtable_found531, %dtable_skip525
  %next_val533 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  %154 = icmp eq ptr %next_val533, inttoptr (i64 -1 to ptr)
  br i1 %154, label %dtable_check534, label %dtable_skip539

dtable_check534:                                  ; preds = %dtable_check534, %dtable_skip532
  %dtable_ref535 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip532 ], [ %next_dtable_ref537, %dtable_check534 ]
  %dtable_ptr536 = load ptr, ptr %dtable_ref535, align 8
  %155 = icmp eq ptr %dtable_ptr536, null
  %next_dtable_ref537 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr536, i32 0, i32 2
  br i1 %155, label %dtable_found538, label %dtable_check534

dtable_found538:                                  ; preds = %dtable_check534
  store ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", ptr %dtable_ref535, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip539

dtable_skip539:                                   ; preds = %dtable_found538, %dtable_skip532
  %next_val540 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  %156 = icmp eq ptr %next_val540, inttoptr (i64 -1 to ptr)
  br i1 %156, label %dtable_check541, label %dtable_skip546

dtable_check541:                                  ; preds = %dtable_check541, %dtable_skip539
  %dtable_ref542 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip539 ], [ %next_dtable_ref544, %dtable_check541 ]
  %dtable_ptr543 = load ptr, ptr %dtable_ref542, align 8
  %157 = icmp eq ptr %dtable_ptr543, null
  %next_dtable_ref544 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr543, i32 0, i32 2
  br i1 %157, label %dtable_found545, label %dtable_check541

dtable_found545:                                  ; preds = %dtable_check541
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", ptr %dtable_ref542, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip546

dtable_skip546:                                   ; preds = %dtable_found545, %dtable_skip539
  %next_val547 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  %158 = icmp eq ptr %next_val547, inttoptr (i64 -1 to ptr)
  br i1 %158, label %dtable_check548, label %dtable_skip553

dtable_check548:                                  ; preds = %dtable_check548, %dtable_skip546
  %dtable_ref549 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip546 ], [ %next_dtable_ref551, %dtable_check548 ]
  %dtable_ptr550 = load ptr, ptr %dtable_ref549, align 8
  %159 = icmp eq ptr %dtable_ptr550, null
  %next_dtable_ref551 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr550, i32 0, i32 2
  br i1 %159, label %dtable_found552, label %dtable_check548

dtable_found552:                                  ; preds = %dtable_check548
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", ptr %dtable_ref549, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip553

dtable_skip553:                                   ; preds = %dtable_found552, %dtable_skip546
  %next_val554 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  %160 = icmp eq ptr %next_val554, inttoptr (i64 -1 to ptr)
  br i1 %160, label %dtable_check555, label %dtable_skip560

dtable_check555:                                  ; preds = %dtable_check555, %dtable_skip553
  %dtable_ref556 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip553 ], [ %next_dtable_ref558, %dtable_check555 ]
  %dtable_ptr557 = load ptr, ptr %dtable_ref556, align 8
  %161 = icmp eq ptr %dtable_ptr557, null
  %next_dtable_ref558 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr557, i32 0, i32 2
  br i1 %161, label %dtable_found559, label %dtable_check555

dtable_found559:                                  ; preds = %dtable_check555
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", ptr %dtable_ref556, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip560

dtable_skip560:                                   ; preds = %dtable_found559, %dtable_skip553
  %next_val561 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  %162 = icmp eq ptr %next_val561, inttoptr (i64 -1 to ptr)
  br i1 %162, label %dtable_check562, label %dtable_skip567

dtable_check562:                                  ; preds = %dtable_check562, %dtable_skip560
  %dtable_ref563 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip560 ], [ %next_dtable_ref565, %dtable_check562 ]
  %dtable_ptr564 = load ptr, ptr %dtable_ref563, align 8
  %163 = icmp eq ptr %dtable_ptr564, null
  %next_dtable_ref565 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr564, i32 0, i32 2
  br i1 %163, label %dtable_found566, label %dtable_check562

dtable_found566:                                  ; preds = %dtable_check562
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", ptr %dtable_ref563, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip567

dtable_skip567:                                   ; preds = %dtable_found566, %dtable_skip560
  %next_val568 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  %164 = icmp eq ptr %next_val568, inttoptr (i64 -1 to ptr)
  br i1 %164, label %dtable_check569, label %dtable_skip574

dtable_check569:                                  ; preds = %dtable_check569, %dtable_skip567
  %dtable_ref570 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip567 ], [ %next_dtable_ref572, %dtable_check569 ]
  %dtable_ptr571 = load ptr, ptr %dtable_ref570, align 8
  %165 = icmp eq ptr %dtable_ptr571, null
  %next_dtable_ref572 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr571, i32 0, i32 2
  br i1 %165, label %dtable_found573, label %dtable_check569

dtable_found573:                                  ; preds = %dtable_check569
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", ptr %dtable_ref570, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip574

dtable_skip574:                                   ; preds = %dtable_found573, %dtable_skip567
  %next_val575 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  %166 = icmp eq ptr %next_val575, inttoptr (i64 -1 to ptr)
  br i1 %166, label %dtable_check576, label %dtable_skip581

dtable_check576:                                  ; preds = %dtable_check576, %dtable_skip574
  %dtable_ref577 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws16Random", i32 0, i32 2), %dtable_skip574 ], [ %next_dtable_ref579, %dtable_check576 ]
  %dtable_ptr578 = load ptr, ptr %dtable_ref577, align 8
  %167 = icmp eq ptr %dtable_ptr578, null
  %next_dtable_ref579 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr578, i32 0, i32 2
  br i1 %167, label %dtable_found580, label %dtable_check576

dtable_found580:                                  ; preds = %dtable_check576
  store ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", ptr %dtable_ref577, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip581

dtable_skip581:                                   ; preds = %dtable_found580, %dtable_skip574
  %next_val582 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  %168 = icmp eq ptr %next_val582, inttoptr (i64 -1 to ptr)
  br i1 %168, label %dtable_check583, label %dtable_skip588

dtable_check583:                                  ; preds = %dtable_check583, %dtable_skip581
  %dtable_ref584 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip581 ], [ %next_dtable_ref586, %dtable_check583 ]
  %dtable_ptr585 = load ptr, ptr %dtable_ref584, align 8
  %169 = icmp eq ptr %dtable_ptr585, null
  %next_dtable_ref586 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr585, i32 0, i32 2
  br i1 %169, label %dtable_found587, label %dtable_check583

dtable_found587:                                  ; preds = %dtable_check583
  store ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", ptr %dtable_ref584, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip588

dtable_skip588:                                   ; preds = %dtable_found587, %dtable_skip581
  %next_val589 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  %170 = icmp eq ptr %next_val589, inttoptr (i64 -1 to ptr)
  br i1 %170, label %dtable_check590, label %dtable_skip595

dtable_check590:                                  ; preds = %dtable_check590, %dtable_skip588
  %dtable_ref591 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip588 ], [ %next_dtable_ref593, %dtable_check590 ]
  %dtable_ptr592 = load ptr, ptr %dtable_ref591, align 8
  %171 = icmp eq ptr %dtable_ptr592, null
  %next_dtable_ref593 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr592, i32 0, i32 2
  br i1 %171, label %dtable_found594, label %dtable_check590

dtable_found594:                                  ; preds = %dtable_check590
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", ptr %dtable_ref591, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip595

dtable_skip595:                                   ; preds = %dtable_found594, %dtable_skip588
  %next_val596 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  %172 = icmp eq ptr %next_val596, inttoptr (i64 -1 to ptr)
  br i1 %172, label %dtable_check597, label %dtable_skip602

dtable_check597:                                  ; preds = %dtable_check597, %dtable_skip595
  %dtable_ref598 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip595 ], [ %next_dtable_ref600, %dtable_check597 ]
  %dtable_ptr599 = load ptr, ptr %dtable_ref598, align 8
  %173 = icmp eq ptr %dtable_ptr599, null
  %next_dtable_ref600 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr599, i32 0, i32 2
  br i1 %173, label %dtable_found601, label %dtable_check597

dtable_found601:                                  ; preds = %dtable_check597
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", ptr %dtable_ref598, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip602

dtable_skip602:                                   ; preds = %dtable_found601, %dtable_skip595
  %next_val603 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  %174 = icmp eq ptr %next_val603, inttoptr (i64 -1 to ptr)
  br i1 %174, label %dtable_check604, label %dtable_skip609

dtable_check604:                                  ; preds = %dtable_check604, %dtable_skip602
  %dtable_ref605 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip602 ], [ %next_dtable_ref607, %dtable_check604 ]
  %dtable_ptr606 = load ptr, ptr %dtable_ref605, align 8
  %175 = icmp eq ptr %dtable_ptr606, null
  %next_dtable_ref607 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr606, i32 0, i32 2
  br i1 %175, label %dtable_found608, label %dtable_check604

dtable_found608:                                  ; preds = %dtable_check604
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", ptr %dtable_ref605, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip609

dtable_skip609:                                   ; preds = %dtable_found608, %dtable_skip602
  %next_val610 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  %176 = icmp eq ptr %next_val610, inttoptr (i64 -1 to ptr)
  br i1 %176, label %dtable_check611, label %dtable_skip616

dtable_check611:                                  ; preds = %dtable_check611, %dtable_skip609
  %dtable_ref612 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip609 ], [ %next_dtable_ref614, %dtable_check611 ]
  %dtable_ptr613 = load ptr, ptr %dtable_ref612, align 8
  %177 = icmp eq ptr %dtable_ptr613, null
  %next_dtable_ref614 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr613, i32 0, i32 2
  br i1 %177, label %dtable_found615, label %dtable_check611

dtable_found615:                                  ; preds = %dtable_check611
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", ptr %dtable_ref612, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip616

dtable_skip616:                                   ; preds = %dtable_found615, %dtable_skip609
  %next_val617 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  %178 = icmp eq ptr %next_val617, inttoptr (i64 -1 to ptr)
  br i1 %178, label %dtable_check618, label %dtable_skip623

dtable_check618:                                  ; preds = %dtable_check618, %dtable_skip616
  %dtable_ref619 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip616 ], [ %next_dtable_ref621, %dtable_check618 ]
  %dtable_ptr620 = load ptr, ptr %dtable_ref619, align 8
  %179 = icmp eq ptr %dtable_ptr620, null
  %next_dtable_ref621 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr620, i32 0, i32 2
  br i1 %179, label %dtable_found622, label %dtable_check618

dtable_found622:                                  ; preds = %dtable_check618
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", ptr %dtable_ref619, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip623

dtable_skip623:                                   ; preds = %dtable_found622, %dtable_skip616
  %next_val624 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  %180 = icmp eq ptr %next_val624, inttoptr (i64 -1 to ptr)
  br i1 %180, label %dtable_check625, label %dtable_skip630

dtable_check625:                                  ; preds = %dtable_check625, %dtable_skip623
  %dtable_ref626 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Msws8Random", i32 0, i32 2), %dtable_skip623 ], [ %next_dtable_ref628, %dtable_check625 ]
  %dtable_ptr627 = load ptr, ptr %dtable_ref626, align 8
  %181 = icmp eq ptr %dtable_ptr627, null
  %next_dtable_ref628 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr627, i32 0, i32 2
  br i1 %181, label %dtable_found629, label %dtable_check625

dtable_found629:                                  ; preds = %dtable_check625
  store ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", ptr %dtable_ref626, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Msws8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip630

dtable_skip630:                                   ; preds = %dtable_found629, %dtable_skip623
  %next_val631 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  %182 = icmp eq ptr %next_val631, inttoptr (i64 -1 to ptr)
  br i1 %182, label %dtable_check632, label %dtable_skip637

dtable_check632:                                  ; preds = %dtable_check632, %dtable_skip630
  %dtable_ref633 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip630 ], [ %next_dtable_ref635, %dtable_check632 ]
  %dtable_ptr634 = load ptr, ptr %dtable_ref633, align 8
  %183 = icmp eq ptr %dtable_ptr634, null
  %next_dtable_ref635 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr634, i32 0, i32 2
  br i1 %183, label %dtable_found636, label %dtable_check632

dtable_found636:                                  ; preds = %dtable_check632
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", ptr %dtable_ref633, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip637

dtable_skip637:                                   ; preds = %dtable_found636, %dtable_skip630
  %next_val638 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  %184 = icmp eq ptr %next_val638, inttoptr (i64 -1 to ptr)
  br i1 %184, label %dtable_check639, label %dtable_skip644

dtable_check639:                                  ; preds = %dtable_check639, %dtable_skip637
  %dtable_ref640 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip637 ], [ %next_dtable_ref642, %dtable_check639 ]
  %dtable_ptr641 = load ptr, ptr %dtable_ref640, align 8
  %185 = icmp eq ptr %dtable_ptr641, null
  %next_dtable_ref642 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr641, i32 0, i32 2
  br i1 %185, label %dtable_found643, label %dtable_check639

dtable_found643:                                  ; preds = %dtable_check639
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", ptr %dtable_ref640, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip644

dtable_skip644:                                   ; preds = %dtable_found643, %dtable_skip637
  %next_val645 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  %186 = icmp eq ptr %next_val645, inttoptr (i64 -1 to ptr)
  br i1 %186, label %dtable_check646, label %dtable_skip651

dtable_check646:                                  ; preds = %dtable_check646, %dtable_skip644
  %dtable_ref647 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip644 ], [ %next_dtable_ref649, %dtable_check646 ]
  %dtable_ptr648 = load ptr, ptr %dtable_ref647, align 8
  %187 = icmp eq ptr %dtable_ptr648, null
  %next_dtable_ref649 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr648, i32 0, i32 2
  br i1 %187, label %dtable_found650, label %dtable_check646

dtable_found650:                                  ; preds = %dtable_check646
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", ptr %dtable_ref647, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip651

dtable_skip651:                                   ; preds = %dtable_found650, %dtable_skip644
  %next_val652 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  %188 = icmp eq ptr %next_val652, inttoptr (i64 -1 to ptr)
  br i1 %188, label %dtable_check653, label %dtable_skip658

dtable_check653:                                  ; preds = %dtable_check653, %dtable_skip651
  %dtable_ref654 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip651 ], [ %next_dtable_ref656, %dtable_check653 ]
  %dtable_ptr655 = load ptr, ptr %dtable_ref654, align 8
  %189 = icmp eq ptr %dtable_ptr655, null
  %next_dtable_ref656 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr655, i32 0, i32 2
  br i1 %189, label %dtable_found657, label %dtable_check653

dtable_found657:                                  ; preds = %dtable_check653
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", ptr %dtable_ref654, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip658

dtable_skip658:                                   ; preds = %dtable_found657, %dtable_skip651
  %next_val659 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  %190 = icmp eq ptr %next_val659, inttoptr (i64 -1 to ptr)
  br i1 %190, label %dtable_check660, label %dtable_skip665

dtable_check660:                                  ; preds = %dtable_check660, %dtable_skip658
  %dtable_ref661 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip658 ], [ %next_dtable_ref663, %dtable_check660 ]
  %dtable_ptr662 = load ptr, ptr %dtable_ref661, align 8
  %191 = icmp eq ptr %dtable_ptr662, null
  %next_dtable_ref663 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr662, i32 0, i32 2
  br i1 %191, label %dtable_found664, label %dtable_check660

dtable_found664:                                  ; preds = %dtable_check660
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", ptr %dtable_ref661, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip665

dtable_skip665:                                   ; preds = %dtable_found664, %dtable_skip658
  %next_val666 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  %192 = icmp eq ptr %next_val666, inttoptr (i64 -1 to ptr)
  br i1 %192, label %dtable_check667, label %dtable_skip672

dtable_check667:                                  ; preds = %dtable_check667, %dtable_skip665
  %dtable_ref668 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip665 ], [ %next_dtable_ref670, %dtable_check667 ]
  %dtable_ptr669 = load ptr, ptr %dtable_ref668, align 8
  %193 = icmp eq ptr %dtable_ptr669, null
  %next_dtable_ref670 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr669, i32 0, i32 2
  br i1 %193, label %dtable_found671, label %dtable_check667

dtable_found671:                                  ; preds = %dtable_check667
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", ptr %dtable_ref668, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip672

dtable_skip672:                                   ; preds = %dtable_found671, %dtable_skip665
  %next_val673 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  %194 = icmp eq ptr %next_val673, inttoptr (i64 -1 to ptr)
  br i1 %194, label %dtable_check674, label %dtable_skip679

dtable_check674:                                  ; preds = %dtable_check674, %dtable_skip672
  %dtable_ref675 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg128Random", i32 0, i32 2), %dtable_skip672 ], [ %next_dtable_ref677, %dtable_check674 ]
  %dtable_ptr676 = load ptr, ptr %dtable_ref675, align 8
  %195 = icmp eq ptr %dtable_ptr676, null
  %next_dtable_ref677 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr676, i32 0, i32 2
  br i1 %195, label %dtable_found678, label %dtable_check674

dtable_found678:                                  ; preds = %dtable_check674
  store ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", ptr %dtable_ref675, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip679

dtable_skip679:                                   ; preds = %dtable_found678, %dtable_skip672
  %next_val680 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  %196 = icmp eq ptr %next_val680, inttoptr (i64 -1 to ptr)
  br i1 %196, label %dtable_check681, label %dtable_skip686

dtable_check681:                                  ; preds = %dtable_check681, %dtable_skip679
  %dtable_ref682 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip679 ], [ %next_dtable_ref684, %dtable_check681 ]
  %dtable_ptr683 = load ptr, ptr %dtable_ref682, align 8
  %197 = icmp eq ptr %dtable_ptr683, null
  %next_dtable_ref684 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr683, i32 0, i32 2
  br i1 %197, label %dtable_found685, label %dtable_check681

dtable_found685:                                  ; preds = %dtable_check681
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", ptr %dtable_ref682, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip686

dtable_skip686:                                   ; preds = %dtable_found685, %dtable_skip679
  %next_val687 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  %198 = icmp eq ptr %next_val687, inttoptr (i64 -1 to ptr)
  br i1 %198, label %dtable_check688, label %dtable_skip693

dtable_check688:                                  ; preds = %dtable_check688, %dtable_skip686
  %dtable_ref689 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip686 ], [ %next_dtable_ref691, %dtable_check688 ]
  %dtable_ptr690 = load ptr, ptr %dtable_ref689, align 8
  %199 = icmp eq ptr %dtable_ptr690, null
  %next_dtable_ref691 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr690, i32 0, i32 2
  br i1 %199, label %dtable_found692, label %dtable_check688

dtable_found692:                                  ; preds = %dtable_check688
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", ptr %dtable_ref689, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip693

dtable_skip693:                                   ; preds = %dtable_found692, %dtable_skip686
  %next_val694 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  %200 = icmp eq ptr %next_val694, inttoptr (i64 -1 to ptr)
  br i1 %200, label %dtable_check695, label %dtable_skip700

dtable_check695:                                  ; preds = %dtable_check695, %dtable_skip693
  %dtable_ref696 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip693 ], [ %next_dtable_ref698, %dtable_check695 ]
  %dtable_ptr697 = load ptr, ptr %dtable_ref696, align 8
  %201 = icmp eq ptr %dtable_ptr697, null
  %next_dtable_ref698 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr697, i32 0, i32 2
  br i1 %201, label %dtable_found699, label %dtable_check695

dtable_found699:                                  ; preds = %dtable_check695
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", ptr %dtable_ref696, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip700

dtable_skip700:                                   ; preds = %dtable_found699, %dtable_skip693
  %next_val701 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  %202 = icmp eq ptr %next_val701, inttoptr (i64 -1 to ptr)
  br i1 %202, label %dtable_check702, label %dtable_skip707

dtable_check702:                                  ; preds = %dtable_check702, %dtable_skip700
  %dtable_ref703 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip700 ], [ %next_dtable_ref705, %dtable_check702 ]
  %dtable_ptr704 = load ptr, ptr %dtable_ref703, align 8
  %203 = icmp eq ptr %dtable_ptr704, null
  %next_dtable_ref705 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr704, i32 0, i32 2
  br i1 %203, label %dtable_found706, label %dtable_check702

dtable_found706:                                  ; preds = %dtable_check702
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", ptr %dtable_ref703, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip707

dtable_skip707:                                   ; preds = %dtable_found706, %dtable_skip700
  %next_val708 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  %204 = icmp eq ptr %next_val708, inttoptr (i64 -1 to ptr)
  br i1 %204, label %dtable_check709, label %dtable_skip714

dtable_check709:                                  ; preds = %dtable_check709, %dtable_skip707
  %dtable_ref710 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip707 ], [ %next_dtable_ref712, %dtable_check709 ]
  %dtable_ptr711 = load ptr, ptr %dtable_ref710, align 8
  %205 = icmp eq ptr %dtable_ptr711, null
  %next_dtable_ref712 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr711, i32 0, i32 2
  br i1 %205, label %dtable_found713, label %dtable_check709

dtable_found713:                                  ; preds = %dtable_check709
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", ptr %dtable_ref710, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip714

dtable_skip714:                                   ; preds = %dtable_found713, %dtable_skip707
  %next_val715 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  %206 = icmp eq ptr %next_val715, inttoptr (i64 -1 to ptr)
  br i1 %206, label %dtable_check716, label %dtable_skip721

dtable_check716:                                  ; preds = %dtable_check716, %dtable_skip714
  %dtable_ref717 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip714 ], [ %next_dtable_ref719, %dtable_check716 ]
  %dtable_ptr718 = load ptr, ptr %dtable_ref717, align 8
  %207 = icmp eq ptr %dtable_ptr718, null
  %next_dtable_ref719 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr718, i32 0, i32 2
  br i1 %207, label %dtable_found720, label %dtable_check716

dtable_found720:                                  ; preds = %dtable_check716
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", ptr %dtable_ref717, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip721

dtable_skip721:                                   ; preds = %dtable_found720, %dtable_skip714
  %next_val722 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  %208 = icmp eq ptr %next_val722, inttoptr (i64 -1 to ptr)
  br i1 %208, label %dtable_check723, label %dtable_skip728

dtable_check723:                                  ; preds = %dtable_check723, %dtable_skip721
  %dtable_ref724 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg64Random", i32 0, i32 2), %dtable_skip721 ], [ %next_dtable_ref726, %dtable_check723 ]
  %dtable_ptr725 = load ptr, ptr %dtable_ref724, align 8
  %209 = icmp eq ptr %dtable_ptr725, null
  %next_dtable_ref726 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr725, i32 0, i32 2
  br i1 %209, label %dtable_found727, label %dtable_check723

dtable_found727:                                  ; preds = %dtable_check723
  store ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", ptr %dtable_ref724, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip728

dtable_skip728:                                   ; preds = %dtable_found727, %dtable_skip721
  %next_val729 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  %210 = icmp eq ptr %next_val729, inttoptr (i64 -1 to ptr)
  br i1 %210, label %dtable_check730, label %dtable_skip735

dtable_check730:                                  ; preds = %dtable_check730, %dtable_skip728
  %dtable_ref731 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip728 ], [ %next_dtable_ref733, %dtable_check730 ]
  %dtable_ptr732 = load ptr, ptr %dtable_ref731, align 8
  %211 = icmp eq ptr %dtable_ptr732, null
  %next_dtable_ref733 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr732, i32 0, i32 2
  br i1 %211, label %dtable_found734, label %dtable_check730

dtable_found734:                                  ; preds = %dtable_check730
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", ptr %dtable_ref731, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip735

dtable_skip735:                                   ; preds = %dtable_found734, %dtable_skip728
  %next_val736 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  %212 = icmp eq ptr %next_val736, inttoptr (i64 -1 to ptr)
  br i1 %212, label %dtable_check737, label %dtable_skip742

dtable_check737:                                  ; preds = %dtable_check737, %dtable_skip735
  %dtable_ref738 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip735 ], [ %next_dtable_ref740, %dtable_check737 ]
  %dtable_ptr739 = load ptr, ptr %dtable_ref738, align 8
  %213 = icmp eq ptr %dtable_ptr739, null
  %next_dtable_ref740 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr739, i32 0, i32 2
  br i1 %213, label %dtable_found741, label %dtable_check737

dtable_found741:                                  ; preds = %dtable_check737
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", ptr %dtable_ref738, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip742

dtable_skip742:                                   ; preds = %dtable_found741, %dtable_skip735
  %next_val743 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  %214 = icmp eq ptr %next_val743, inttoptr (i64 -1 to ptr)
  br i1 %214, label %dtable_check744, label %dtable_skip749

dtable_check744:                                  ; preds = %dtable_check744, %dtable_skip742
  %dtable_ref745 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip742 ], [ %next_dtable_ref747, %dtable_check744 ]
  %dtable_ptr746 = load ptr, ptr %dtable_ref745, align 8
  %215 = icmp eq ptr %dtable_ptr746, null
  %next_dtable_ref747 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr746, i32 0, i32 2
  br i1 %215, label %dtable_found748, label %dtable_check744

dtable_found748:                                  ; preds = %dtable_check744
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", ptr %dtable_ref745, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip749

dtable_skip749:                                   ; preds = %dtable_found748, %dtable_skip742
  %next_val750 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  %216 = icmp eq ptr %next_val750, inttoptr (i64 -1 to ptr)
  br i1 %216, label %dtable_check751, label %dtable_skip756

dtable_check751:                                  ; preds = %dtable_check751, %dtable_skip749
  %dtable_ref752 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip749 ], [ %next_dtable_ref754, %dtable_check751 ]
  %dtable_ptr753 = load ptr, ptr %dtable_ref752, align 8
  %217 = icmp eq ptr %dtable_ptr753, null
  %next_dtable_ref754 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr753, i32 0, i32 2
  br i1 %217, label %dtable_found755, label %dtable_check751

dtable_found755:                                  ; preds = %dtable_check751
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", ptr %dtable_ref752, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip756

dtable_skip756:                                   ; preds = %dtable_found755, %dtable_skip749
  %next_val757 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  %218 = icmp eq ptr %next_val757, inttoptr (i64 -1 to ptr)
  br i1 %218, label %dtable_check758, label %dtable_skip763

dtable_check758:                                  ; preds = %dtable_check758, %dtable_skip756
  %dtable_ref759 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip756 ], [ %next_dtable_ref761, %dtable_check758 ]
  %dtable_ptr760 = load ptr, ptr %dtable_ref759, align 8
  %219 = icmp eq ptr %dtable_ptr760, null
  %next_dtable_ref761 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr760, i32 0, i32 2
  br i1 %219, label %dtable_found762, label %dtable_check758

dtable_found762:                                  ; preds = %dtable_check758
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", ptr %dtable_ref759, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip763

dtable_skip763:                                   ; preds = %dtable_found762, %dtable_skip756
  %next_val764 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  %220 = icmp eq ptr %next_val764, inttoptr (i64 -1 to ptr)
  br i1 %220, label %dtable_check765, label %dtable_skip770

dtable_check765:                                  ; preds = %dtable_check765, %dtable_skip763
  %dtable_ref766 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip763 ], [ %next_dtable_ref768, %dtable_check765 ]
  %dtable_ptr767 = load ptr, ptr %dtable_ref766, align 8
  %221 = icmp eq ptr %dtable_ptr767, null
  %next_dtable_ref768 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr767, i32 0, i32 2
  br i1 %221, label %dtable_found769, label %dtable_check765

dtable_found769:                                  ; preds = %dtable_check765
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", ptr %dtable_ref766, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip770

dtable_skip770:                                   ; preds = %dtable_found769, %dtable_skip763
  %next_val771 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  %222 = icmp eq ptr %next_val771, inttoptr (i64 -1 to ptr)
  br i1 %222, label %dtable_check772, label %dtable_skip777

dtable_check772:                                  ; preds = %dtable_check772, %dtable_skip770
  %dtable_ref773 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg32Random", i32 0, i32 2), %dtable_skip770 ], [ %next_dtable_ref775, %dtable_check772 ]
  %dtable_ptr774 = load ptr, ptr %dtable_ref773, align 8
  %223 = icmp eq ptr %dtable_ptr774, null
  %next_dtable_ref775 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr774, i32 0, i32 2
  br i1 %223, label %dtable_found776, label %dtable_check772

dtable_found776:                                  ; preds = %dtable_check772
  store ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", ptr %dtable_ref773, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip777

dtable_skip777:                                   ; preds = %dtable_found776, %dtable_skip770
  %next_val778 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  %224 = icmp eq ptr %next_val778, inttoptr (i64 -1 to ptr)
  br i1 %224, label %dtable_check779, label %dtable_skip784

dtable_check779:                                  ; preds = %dtable_check779, %dtable_skip777
  %dtable_ref780 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip777 ], [ %next_dtable_ref782, %dtable_check779 ]
  %dtable_ptr781 = load ptr, ptr %dtable_ref780, align 8
  %225 = icmp eq ptr %dtable_ptr781, null
  %next_dtable_ref782 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr781, i32 0, i32 2
  br i1 %225, label %dtable_found783, label %dtable_check779

dtable_found783:                                  ; preds = %dtable_check779
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", ptr %dtable_ref780, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip784

dtable_skip784:                                   ; preds = %dtable_found783, %dtable_skip777
  %next_val785 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  %226 = icmp eq ptr %next_val785, inttoptr (i64 -1 to ptr)
  br i1 %226, label %dtable_check786, label %dtable_skip791

dtable_check786:                                  ; preds = %dtable_check786, %dtable_skip784
  %dtable_ref787 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip784 ], [ %next_dtable_ref789, %dtable_check786 ]
  %dtable_ptr788 = load ptr, ptr %dtable_ref787, align 8
  %227 = icmp eq ptr %dtable_ptr788, null
  %next_dtable_ref789 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr788, i32 0, i32 2
  br i1 %227, label %dtable_found790, label %dtable_check786

dtable_found790:                                  ; preds = %dtable_check786
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", ptr %dtable_ref787, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip791

dtable_skip791:                                   ; preds = %dtable_found790, %dtable_skip784
  %next_val792 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  %228 = icmp eq ptr %next_val792, inttoptr (i64 -1 to ptr)
  br i1 %228, label %dtable_check793, label %dtable_skip798

dtable_check793:                                  ; preds = %dtable_check793, %dtable_skip791
  %dtable_ref794 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip791 ], [ %next_dtable_ref796, %dtable_check793 ]
  %dtable_ptr795 = load ptr, ptr %dtable_ref794, align 8
  %229 = icmp eq ptr %dtable_ptr795, null
  %next_dtable_ref796 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr795, i32 0, i32 2
  br i1 %229, label %dtable_found797, label %dtable_check793

dtable_found797:                                  ; preds = %dtable_check793
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", ptr %dtable_ref794, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip798

dtable_skip798:                                   ; preds = %dtable_found797, %dtable_skip791
  %next_val799 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  %230 = icmp eq ptr %next_val799, inttoptr (i64 -1 to ptr)
  br i1 %230, label %dtable_check800, label %dtable_skip805

dtable_check800:                                  ; preds = %dtable_check800, %dtable_skip798
  %dtable_ref801 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip798 ], [ %next_dtable_ref803, %dtable_check800 ]
  %dtable_ptr802 = load ptr, ptr %dtable_ref801, align 8
  %231 = icmp eq ptr %dtable_ptr802, null
  %next_dtable_ref803 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr802, i32 0, i32 2
  br i1 %231, label %dtable_found804, label %dtable_check800

dtable_found804:                                  ; preds = %dtable_check800
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", ptr %dtable_ref801, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip805

dtable_skip805:                                   ; preds = %dtable_found804, %dtable_skip798
  %next_val806 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  %232 = icmp eq ptr %next_val806, inttoptr (i64 -1 to ptr)
  br i1 %232, label %dtable_check807, label %dtable_skip812

dtable_check807:                                  ; preds = %dtable_check807, %dtable_skip805
  %dtable_ref808 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip805 ], [ %next_dtable_ref810, %dtable_check807 ]
  %dtable_ptr809 = load ptr, ptr %dtable_ref808, align 8
  %233 = icmp eq ptr %dtable_ptr809, null
  %next_dtable_ref810 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr809, i32 0, i32 2
  br i1 %233, label %dtable_found811, label %dtable_check807

dtable_found811:                                  ; preds = %dtable_check807
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", ptr %dtable_ref808, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip812

dtable_skip812:                                   ; preds = %dtable_found811, %dtable_skip805
  %next_val813 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  %234 = icmp eq ptr %next_val813, inttoptr (i64 -1 to ptr)
  br i1 %234, label %dtable_check814, label %dtable_skip819

dtable_check814:                                  ; preds = %dtable_check814, %dtable_skip812
  %dtable_ref815 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip812 ], [ %next_dtable_ref817, %dtable_check814 ]
  %dtable_ptr816 = load ptr, ptr %dtable_ref815, align 8
  %235 = icmp eq ptr %dtable_ptr816, null
  %next_dtable_ref817 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr816, i32 0, i32 2
  br i1 %235, label %dtable_found818, label %dtable_check814

dtable_found818:                                  ; preds = %dtable_check814
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", ptr %dtable_ref815, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip819

dtable_skip819:                                   ; preds = %dtable_found818, %dtable_skip812
  %next_val820 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  %236 = icmp eq ptr %next_val820, inttoptr (i64 -1 to ptr)
  br i1 %236, label %dtable_check821, label %dtable_skip826

dtable_check821:                                  ; preds = %dtable_check821, %dtable_skip819
  %dtable_ref822 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Pcg16Random", i32 0, i32 2), %dtable_skip819 ], [ %next_dtable_ref824, %dtable_check821 ]
  %dtable_ptr823 = load ptr, ptr %dtable_ref822, align 8
  %237 = icmp eq ptr %dtable_ptr823, null
  %next_dtable_ref824 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr823, i32 0, i32 2
  br i1 %237, label %dtable_found825, label %dtable_check821

dtable_found825:                                  ; preds = %dtable_check821
  store ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", ptr %dtable_ref822, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Pcg16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip826

dtable_skip826:                                   ; preds = %dtable_found825, %dtable_skip819
  %next_val827 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  %238 = icmp eq ptr %next_val827, inttoptr (i64 -1 to ptr)
  br i1 %238, label %dtable_check828, label %dtable_skip833

dtable_check828:                                  ; preds = %dtable_check828, %dtable_skip826
  %dtable_ref829 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip826 ], [ %next_dtable_ref831, %dtable_check828 ]
  %dtable_ptr830 = load ptr, ptr %dtable_ref829, align 8
  %239 = icmp eq ptr %dtable_ptr830, null
  %next_dtable_ref831 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr830, i32 0, i32 2
  br i1 %239, label %dtable_found832, label %dtable_check828

dtable_found832:                                  ; preds = %dtable_check828
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", ptr %dtable_ref829, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip833

dtable_skip833:                                   ; preds = %dtable_found832, %dtable_skip826
  %next_val834 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  %240 = icmp eq ptr %next_val834, inttoptr (i64 -1 to ptr)
  br i1 %240, label %dtable_check835, label %dtable_skip840

dtable_check835:                                  ; preds = %dtable_check835, %dtable_skip833
  %dtable_ref836 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip833 ], [ %next_dtable_ref838, %dtable_check835 ]
  %dtable_ptr837 = load ptr, ptr %dtable_ref836, align 8
  %241 = icmp eq ptr %dtable_ptr837, null
  %next_dtable_ref838 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr837, i32 0, i32 2
  br i1 %241, label %dtable_found839, label %dtable_check835

dtable_found839:                                  ; preds = %dtable_check835
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", ptr %dtable_ref836, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip840

dtable_skip840:                                   ; preds = %dtable_found839, %dtable_skip833
  %next_val841 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  %242 = icmp eq ptr %next_val841, inttoptr (i64 -1 to ptr)
  br i1 %242, label %dtable_check842, label %dtable_skip847

dtable_check842:                                  ; preds = %dtable_check842, %dtable_skip840
  %dtable_ref843 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip840 ], [ %next_dtable_ref845, %dtable_check842 ]
  %dtable_ptr844 = load ptr, ptr %dtable_ref843, align 8
  %243 = icmp eq ptr %dtable_ptr844, null
  %next_dtable_ref845 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr844, i32 0, i32 2
  br i1 %243, label %dtable_found846, label %dtable_check842

dtable_found846:                                  ; preds = %dtable_check842
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", ptr %dtable_ref843, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip847

dtable_skip847:                                   ; preds = %dtable_found846, %dtable_skip840
  %next_val848 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  %244 = icmp eq ptr %next_val848, inttoptr (i64 -1 to ptr)
  br i1 %244, label %dtable_check849, label %dtable_skip854

dtable_check849:                                  ; preds = %dtable_check849, %dtable_skip847
  %dtable_ref850 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip847 ], [ %next_dtable_ref852, %dtable_check849 ]
  %dtable_ptr851 = load ptr, ptr %dtable_ref850, align 8
  %245 = icmp eq ptr %dtable_ptr851, null
  %next_dtable_ref852 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr851, i32 0, i32 2
  br i1 %245, label %dtable_found853, label %dtable_check849

dtable_found853:                                  ; preds = %dtable_check849
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", ptr %dtable_ref850, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip854

dtable_skip854:                                   ; preds = %dtable_found853, %dtable_skip847
  %next_val855 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  %246 = icmp eq ptr %next_val855, inttoptr (i64 -1 to ptr)
  br i1 %246, label %dtable_check856, label %dtable_skip861

dtable_check856:                                  ; preds = %dtable_check856, %dtable_skip854
  %dtable_ref857 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip854 ], [ %next_dtable_ref859, %dtable_check856 ]
  %dtable_ptr858 = load ptr, ptr %dtable_ref857, align 8
  %247 = icmp eq ptr %dtable_ptr858, null
  %next_dtable_ref859 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr858, i32 0, i32 2
  br i1 %247, label %dtable_found860, label %dtable_check856

dtable_found860:                                  ; preds = %dtable_check856
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", ptr %dtable_ref857, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip861

dtable_skip861:                                   ; preds = %dtable_found860, %dtable_skip854
  %next_val862 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  %248 = icmp eq ptr %next_val862, inttoptr (i64 -1 to ptr)
  br i1 %248, label %dtable_check863, label %dtable_skip868

dtable_check863:                                  ; preds = %dtable_check863, %dtable_skip861
  %dtable_ref864 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip861 ], [ %next_dtable_ref866, %dtable_check863 ]
  %dtable_ptr865 = load ptr, ptr %dtable_ref864, align 8
  %249 = icmp eq ptr %dtable_ptr865, null
  %next_dtable_ref866 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr865, i32 0, i32 2
  br i1 %249, label %dtable_found867, label %dtable_check863

dtable_found867:                                  ; preds = %dtable_check863
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", ptr %dtable_ref864, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip868

dtable_skip868:                                   ; preds = %dtable_found867, %dtable_skip861
  %next_val869 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  %250 = icmp eq ptr %next_val869, inttoptr (i64 -1 to ptr)
  br i1 %250, label %dtable_check870, label %dtable_skip875

dtable_check870:                                  ; preds = %dtable_check870, %dtable_skip868
  %dtable_ref871 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc128Random", i32 0, i32 2), %dtable_skip868 ], [ %next_dtable_ref873, %dtable_check870 ]
  %dtable_ptr872 = load ptr, ptr %dtable_ref871, align 8
  %251 = icmp eq ptr %dtable_ptr872, null
  %next_dtable_ref873 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr872, i32 0, i32 2
  br i1 %251, label %dtable_found874, label %dtable_check870

dtable_found874:                                  ; preds = %dtable_check870
  store ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", ptr %dtable_ref871, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc128Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip875

dtable_skip875:                                   ; preds = %dtable_found874, %dtable_skip868
  %next_val876 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  %252 = icmp eq ptr %next_val876, inttoptr (i64 -1 to ptr)
  br i1 %252, label %dtable_check877, label %dtable_skip882

dtable_check877:                                  ; preds = %dtable_check877, %dtable_skip875
  %dtable_ref878 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip875 ], [ %next_dtable_ref880, %dtable_check877 ]
  %dtable_ptr879 = load ptr, ptr %dtable_ref878, align 8
  %253 = icmp eq ptr %dtable_ptr879, null
  %next_dtable_ref880 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr879, i32 0, i32 2
  br i1 %253, label %dtable_found881, label %dtable_check877

dtable_found881:                                  ; preds = %dtable_check877
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", ptr %dtable_ref878, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip882

dtable_skip882:                                   ; preds = %dtable_found881, %dtable_skip875
  %next_val883 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  %254 = icmp eq ptr %next_val883, inttoptr (i64 -1 to ptr)
  br i1 %254, label %dtable_check884, label %dtable_skip889

dtable_check884:                                  ; preds = %dtable_check884, %dtable_skip882
  %dtable_ref885 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip882 ], [ %next_dtable_ref887, %dtable_check884 ]
  %dtable_ptr886 = load ptr, ptr %dtable_ref885, align 8
  %255 = icmp eq ptr %dtable_ptr886, null
  %next_dtable_ref887 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr886, i32 0, i32 2
  br i1 %255, label %dtable_found888, label %dtable_check884

dtable_found888:                                  ; preds = %dtable_check884
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", ptr %dtable_ref885, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip889

dtable_skip889:                                   ; preds = %dtable_found888, %dtable_skip882
  %next_val890 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  %256 = icmp eq ptr %next_val890, inttoptr (i64 -1 to ptr)
  br i1 %256, label %dtable_check891, label %dtable_skip896

dtable_check891:                                  ; preds = %dtable_check891, %dtable_skip889
  %dtable_ref892 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip889 ], [ %next_dtable_ref894, %dtable_check891 ]
  %dtable_ptr893 = load ptr, ptr %dtable_ref892, align 8
  %257 = icmp eq ptr %dtable_ptr893, null
  %next_dtable_ref894 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr893, i32 0, i32 2
  br i1 %257, label %dtable_found895, label %dtable_check891

dtable_found895:                                  ; preds = %dtable_check891
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", ptr %dtable_ref892, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip896

dtable_skip896:                                   ; preds = %dtable_found895, %dtable_skip889
  %next_val897 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  %258 = icmp eq ptr %next_val897, inttoptr (i64 -1 to ptr)
  br i1 %258, label %dtable_check898, label %dtable_skip903

dtable_check898:                                  ; preds = %dtable_check898, %dtable_skip896
  %dtable_ref899 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip896 ], [ %next_dtable_ref901, %dtable_check898 ]
  %dtable_ptr900 = load ptr, ptr %dtable_ref899, align 8
  %259 = icmp eq ptr %dtable_ptr900, null
  %next_dtable_ref901 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr900, i32 0, i32 2
  br i1 %259, label %dtable_found902, label %dtable_check898

dtable_found902:                                  ; preds = %dtable_check898
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", ptr %dtable_ref899, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip903

dtable_skip903:                                   ; preds = %dtable_found902, %dtable_skip896
  %next_val904 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  %260 = icmp eq ptr %next_val904, inttoptr (i64 -1 to ptr)
  br i1 %260, label %dtable_check905, label %dtable_skip910

dtable_check905:                                  ; preds = %dtable_check905, %dtable_skip903
  %dtable_ref906 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip903 ], [ %next_dtable_ref908, %dtable_check905 ]
  %dtable_ptr907 = load ptr, ptr %dtable_ref906, align 8
  %261 = icmp eq ptr %dtable_ptr907, null
  %next_dtable_ref908 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr907, i32 0, i32 2
  br i1 %261, label %dtable_found909, label %dtable_check905

dtable_found909:                                  ; preds = %dtable_check905
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", ptr %dtable_ref906, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip910

dtable_skip910:                                   ; preds = %dtable_found909, %dtable_skip903
  %next_val911 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  %262 = icmp eq ptr %next_val911, inttoptr (i64 -1 to ptr)
  br i1 %262, label %dtable_check912, label %dtable_skip917

dtable_check912:                                  ; preds = %dtable_check912, %dtable_skip910
  %dtable_ref913 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip910 ], [ %next_dtable_ref915, %dtable_check912 ]
  %dtable_ptr914 = load ptr, ptr %dtable_ref913, align 8
  %263 = icmp eq ptr %dtable_ptr914, null
  %next_dtable_ref915 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr914, i32 0, i32 2
  br i1 %263, label %dtable_found916, label %dtable_check912

dtable_found916:                                  ; preds = %dtable_check912
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", ptr %dtable_ref913, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip917

dtable_skip917:                                   ; preds = %dtable_found916, %dtable_skip910
  %next_val918 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  %264 = icmp eq ptr %next_val918, inttoptr (i64 -1 to ptr)
  br i1 %264, label %dtable_check919, label %dtable_skip924

dtable_check919:                                  ; preds = %dtable_check919, %dtable_skip917
  %dtable_ref920 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc64Random", i32 0, i32 2), %dtable_skip917 ], [ %next_dtable_ref922, %dtable_check919 ]
  %dtable_ptr921 = load ptr, ptr %dtable_ref920, align 8
  %265 = icmp eq ptr %dtable_ptr921, null
  %next_dtable_ref922 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr921, i32 0, i32 2
  br i1 %265, label %dtable_found923, label %dtable_check919

dtable_found923:                                  ; preds = %dtable_check919
  store ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", ptr %dtable_ref920, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc64Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip924

dtable_skip924:                                   ; preds = %dtable_found923, %dtable_skip917
  %next_val925 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  %266 = icmp eq ptr %next_val925, inttoptr (i64 -1 to ptr)
  br i1 %266, label %dtable_check926, label %dtable_skip931

dtable_check926:                                  ; preds = %dtable_check926, %dtable_skip924
  %dtable_ref927 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip924 ], [ %next_dtable_ref929, %dtable_check926 ]
  %dtable_ptr928 = load ptr, ptr %dtable_ref927, align 8
  %267 = icmp eq ptr %dtable_ptr928, null
  %next_dtable_ref929 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr928, i32 0, i32 2
  br i1 %267, label %dtable_found930, label %dtable_check926

dtable_found930:                                  ; preds = %dtable_check926
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", ptr %dtable_ref927, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip931

dtable_skip931:                                   ; preds = %dtable_found930, %dtable_skip924
  %next_val932 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  %268 = icmp eq ptr %next_val932, inttoptr (i64 -1 to ptr)
  br i1 %268, label %dtable_check933, label %dtable_skip938

dtable_check933:                                  ; preds = %dtable_check933, %dtable_skip931
  %dtable_ref934 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip931 ], [ %next_dtable_ref936, %dtable_check933 ]
  %dtable_ptr935 = load ptr, ptr %dtable_ref934, align 8
  %269 = icmp eq ptr %dtable_ptr935, null
  %next_dtable_ref936 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr935, i32 0, i32 2
  br i1 %269, label %dtable_found937, label %dtable_check933

dtable_found937:                                  ; preds = %dtable_check933
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", ptr %dtable_ref934, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip938

dtable_skip938:                                   ; preds = %dtable_found937, %dtable_skip931
  %next_val939 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  %270 = icmp eq ptr %next_val939, inttoptr (i64 -1 to ptr)
  br i1 %270, label %dtable_check940, label %dtable_skip945

dtable_check940:                                  ; preds = %dtable_check940, %dtable_skip938
  %dtable_ref941 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip938 ], [ %next_dtable_ref943, %dtable_check940 ]
  %dtable_ptr942 = load ptr, ptr %dtable_ref941, align 8
  %271 = icmp eq ptr %dtable_ptr942, null
  %next_dtable_ref943 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr942, i32 0, i32 2
  br i1 %271, label %dtable_found944, label %dtable_check940

dtable_found944:                                  ; preds = %dtable_check940
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", ptr %dtable_ref941, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip945

dtable_skip945:                                   ; preds = %dtable_found944, %dtable_skip938
  %next_val946 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  %272 = icmp eq ptr %next_val946, inttoptr (i64 -1 to ptr)
  br i1 %272, label %dtable_check947, label %dtable_skip952

dtable_check947:                                  ; preds = %dtable_check947, %dtable_skip945
  %dtable_ref948 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip945 ], [ %next_dtable_ref950, %dtable_check947 ]
  %dtable_ptr949 = load ptr, ptr %dtable_ref948, align 8
  %273 = icmp eq ptr %dtable_ptr949, null
  %next_dtable_ref950 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr949, i32 0, i32 2
  br i1 %273, label %dtable_found951, label %dtable_check947

dtable_found951:                                  ; preds = %dtable_check947
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", ptr %dtable_ref948, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip952

dtable_skip952:                                   ; preds = %dtable_found951, %dtable_skip945
  %next_val953 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  %274 = icmp eq ptr %next_val953, inttoptr (i64 -1 to ptr)
  br i1 %274, label %dtable_check954, label %dtable_skip959

dtable_check954:                                  ; preds = %dtable_check954, %dtable_skip952
  %dtable_ref955 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip952 ], [ %next_dtable_ref957, %dtable_check954 ]
  %dtable_ptr956 = load ptr, ptr %dtable_ref955, align 8
  %275 = icmp eq ptr %dtable_ptr956, null
  %next_dtable_ref957 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr956, i32 0, i32 2
  br i1 %275, label %dtable_found958, label %dtable_check954

dtable_found958:                                  ; preds = %dtable_check954
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", ptr %dtable_ref955, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip959

dtable_skip959:                                   ; preds = %dtable_found958, %dtable_skip952
  %next_val960 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  %276 = icmp eq ptr %next_val960, inttoptr (i64 -1 to ptr)
  br i1 %276, label %dtable_check961, label %dtable_skip966

dtable_check961:                                  ; preds = %dtable_check961, %dtable_skip959
  %dtable_ref962 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip959 ], [ %next_dtable_ref964, %dtable_check961 ]
  %dtable_ptr963 = load ptr, ptr %dtable_ref962, align 8
  %277 = icmp eq ptr %dtable_ptr963, null
  %next_dtable_ref964 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr963, i32 0, i32 2
  br i1 %277, label %dtable_found965, label %dtable_check961

dtable_found965:                                  ; preds = %dtable_check961
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", ptr %dtable_ref962, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip966

dtable_skip966:                                   ; preds = %dtable_found965, %dtable_skip959
  %next_val967 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  %278 = icmp eq ptr %next_val967, inttoptr (i64 -1 to ptr)
  br i1 %278, label %dtable_check968, label %dtable_skip973

dtable_check968:                                  ; preds = %dtable_check968, %dtable_skip966
  %dtable_ref969 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc32Random", i32 0, i32 2), %dtable_skip966 ], [ %next_dtable_ref971, %dtable_check968 ]
  %dtable_ptr970 = load ptr, ptr %dtable_ref969, align 8
  %279 = icmp eq ptr %dtable_ptr970, null
  %next_dtable_ref971 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr970, i32 0, i32 2
  br i1 %279, label %dtable_found972, label %dtable_check968

dtable_found972:                                  ; preds = %dtable_check968
  store ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", ptr %dtable_ref969, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc32Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip973

dtable_skip973:                                   ; preds = %dtable_found972, %dtable_skip966
  %next_val974 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  %280 = icmp eq ptr %next_val974, inttoptr (i64 -1 to ptr)
  br i1 %280, label %dtable_check975, label %dtable_skip980

dtable_check975:                                  ; preds = %dtable_check975, %dtable_skip973
  %dtable_ref976 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip973 ], [ %next_dtable_ref978, %dtable_check975 ]
  %dtable_ptr977 = load ptr, ptr %dtable_ref976, align 8
  %281 = icmp eq ptr %dtable_ptr977, null
  %next_dtable_ref978 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr977, i32 0, i32 2
  br i1 %281, label %dtable_found979, label %dtable_check975

dtable_found979:                                  ; preds = %dtable_check975
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", ptr %dtable_ref976, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip980

dtable_skip980:                                   ; preds = %dtable_found979, %dtable_skip973
  %next_val981 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  %282 = icmp eq ptr %next_val981, inttoptr (i64 -1 to ptr)
  br i1 %282, label %dtable_check982, label %dtable_skip987

dtable_check982:                                  ; preds = %dtable_check982, %dtable_skip980
  %dtable_ref983 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip980 ], [ %next_dtable_ref985, %dtable_check982 ]
  %dtable_ptr984 = load ptr, ptr %dtable_ref983, align 8
  %283 = icmp eq ptr %dtable_ptr984, null
  %next_dtable_ref985 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr984, i32 0, i32 2
  br i1 %283, label %dtable_found986, label %dtable_check982

dtable_found986:                                  ; preds = %dtable_check982
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", ptr %dtable_ref983, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip987

dtable_skip987:                                   ; preds = %dtable_found986, %dtable_skip980
  %next_val988 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  %284 = icmp eq ptr %next_val988, inttoptr (i64 -1 to ptr)
  br i1 %284, label %dtable_check989, label %dtable_skip994

dtable_check989:                                  ; preds = %dtable_check989, %dtable_skip987
  %dtable_ref990 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip987 ], [ %next_dtable_ref992, %dtable_check989 ]
  %dtable_ptr991 = load ptr, ptr %dtable_ref990, align 8
  %285 = icmp eq ptr %dtable_ptr991, null
  %next_dtable_ref992 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr991, i32 0, i32 2
  br i1 %285, label %dtable_found993, label %dtable_check989

dtable_found993:                                  ; preds = %dtable_check989
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", ptr %dtable_ref990, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip994

dtable_skip994:                                   ; preds = %dtable_found993, %dtable_skip987
  %next_val995 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  %286 = icmp eq ptr %next_val995, inttoptr (i64 -1 to ptr)
  br i1 %286, label %dtable_check996, label %dtable_skip1001

dtable_check996:                                  ; preds = %dtable_check996, %dtable_skip994
  %dtable_ref997 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip994 ], [ %next_dtable_ref999, %dtable_check996 ]
  %dtable_ptr998 = load ptr, ptr %dtable_ref997, align 8
  %287 = icmp eq ptr %dtable_ptr998, null
  %next_dtable_ref999 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr998, i32 0, i32 2
  br i1 %287, label %dtable_found1000, label %dtable_check996

dtable_found1000:                                 ; preds = %dtable_check996
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", ptr %dtable_ref997, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1001

dtable_skip1001:                                  ; preds = %dtable_found1000, %dtable_skip994
  %next_val1002 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  %288 = icmp eq ptr %next_val1002, inttoptr (i64 -1 to ptr)
  br i1 %288, label %dtable_check1003, label %dtable_skip1008

dtable_check1003:                                 ; preds = %dtable_check1003, %dtable_skip1001
  %dtable_ref1004 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1001 ], [ %next_dtable_ref1006, %dtable_check1003 ]
  %dtable_ptr1005 = load ptr, ptr %dtable_ref1004, align 8
  %289 = icmp eq ptr %dtable_ptr1005, null
  %next_dtable_ref1006 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1005, i32 0, i32 2
  br i1 %289, label %dtable_found1007, label %dtable_check1003

dtable_found1007:                                 ; preds = %dtable_check1003
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", ptr %dtable_ref1004, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1008

dtable_skip1008:                                  ; preds = %dtable_found1007, %dtable_skip1001
  %next_val1009 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  %290 = icmp eq ptr %next_val1009, inttoptr (i64 -1 to ptr)
  br i1 %290, label %dtable_check1010, label %dtable_skip1015

dtable_check1010:                                 ; preds = %dtable_check1010, %dtable_skip1008
  %dtable_ref1011 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1008 ], [ %next_dtable_ref1013, %dtable_check1010 ]
  %dtable_ptr1012 = load ptr, ptr %dtable_ref1011, align 8
  %291 = icmp eq ptr %dtable_ptr1012, null
  %next_dtable_ref1013 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1012, i32 0, i32 2
  br i1 %291, label %dtable_found1014, label %dtable_check1010

dtable_found1014:                                 ; preds = %dtable_check1010
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", ptr %dtable_ref1011, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1015

dtable_skip1015:                                  ; preds = %dtable_found1014, %dtable_skip1008
  %next_val1016 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  %292 = icmp eq ptr %next_val1016, inttoptr (i64 -1 to ptr)
  br i1 %292, label %dtable_check1017, label %dtable_skip1022

dtable_check1017:                                 ; preds = %dtable_check1017, %dtable_skip1015
  %dtable_ref1018 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc16Random", i32 0, i32 2), %dtable_skip1015 ], [ %next_dtable_ref1020, %dtable_check1017 ]
  %dtable_ptr1019 = load ptr, ptr %dtable_ref1018, align 8
  %293 = icmp eq ptr %dtable_ptr1019, null
  %next_dtable_ref1020 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1019, i32 0, i32 2
  br i1 %293, label %dtable_found1021, label %dtable_check1017

dtable_found1021:                                 ; preds = %dtable_check1017
  store ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", ptr %dtable_ref1018, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc16Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1022

dtable_skip1022:                                  ; preds = %dtable_found1021, %dtable_skip1015
  %next_val1023 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  %294 = icmp eq ptr %next_val1023, inttoptr (i64 -1 to ptr)
  br i1 %294, label %dtable_check1024, label %dtable_skip1029

dtable_check1024:                                 ; preds = %dtable_check1024, %dtable_skip1022
  %dtable_ref1025 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1022 ], [ %next_dtable_ref1027, %dtable_check1024 ]
  %dtable_ptr1026 = load ptr, ptr %dtable_ref1025, align 8
  %295 = icmp eq ptr %dtable_ptr1026, null
  %next_dtable_ref1027 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1026, i32 0, i32 2
  br i1 %295, label %dtable_found1028, label %dtable_check1024

dtable_found1028:                                 ; preds = %dtable_check1024
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", ptr %dtable_ref1025, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1029

dtable_skip1029:                                  ; preds = %dtable_found1028, %dtable_skip1022
  %next_val1030 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  %296 = icmp eq ptr %next_val1030, inttoptr (i64 -1 to ptr)
  br i1 %296, label %dtable_check1031, label %dtable_skip1036

dtable_check1031:                                 ; preds = %dtable_check1031, %dtable_skip1029
  %dtable_ref1032 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1029 ], [ %next_dtable_ref1034, %dtable_check1031 ]
  %dtable_ptr1033 = load ptr, ptr %dtable_ref1032, align 8
  %297 = icmp eq ptr %dtable_ptr1033, null
  %next_dtable_ref1034 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1033, i32 0, i32 2
  br i1 %297, label %dtable_found1035, label %dtable_check1031

dtable_found1035:                                 ; preds = %dtable_check1031
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", ptr %dtable_ref1032, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1036

dtable_skip1036:                                  ; preds = %dtable_found1035, %dtable_skip1029
  %next_val1037 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  %298 = icmp eq ptr %next_val1037, inttoptr (i64 -1 to ptr)
  br i1 %298, label %dtable_check1038, label %dtable_skip1043

dtable_check1038:                                 ; preds = %dtable_check1038, %dtable_skip1036
  %dtable_ref1039 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1036 ], [ %next_dtable_ref1041, %dtable_check1038 ]
  %dtable_ptr1040 = load ptr, ptr %dtable_ref1039, align 8
  %299 = icmp eq ptr %dtable_ptr1040, null
  %next_dtable_ref1041 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1040, i32 0, i32 2
  br i1 %299, label %dtable_found1042, label %dtable_check1038

dtable_found1042:                                 ; preds = %dtable_check1038
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", ptr %dtable_ref1039, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1043

dtable_skip1043:                                  ; preds = %dtable_found1042, %dtable_skip1036
  %next_val1044 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  %300 = icmp eq ptr %next_val1044, inttoptr (i64 -1 to ptr)
  br i1 %300, label %dtable_check1045, label %dtable_skip1050

dtable_check1045:                                 ; preds = %dtable_check1045, %dtable_skip1043
  %dtable_ref1046 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1043 ], [ %next_dtable_ref1048, %dtable_check1045 ]
  %dtable_ptr1047 = load ptr, ptr %dtable_ref1046, align 8
  %301 = icmp eq ptr %dtable_ptr1047, null
  %next_dtable_ref1048 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1047, i32 0, i32 2
  br i1 %301, label %dtable_found1049, label %dtable_check1045

dtable_found1049:                                 ; preds = %dtable_check1045
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", ptr %dtable_ref1046, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1050

dtable_skip1050:                                  ; preds = %dtable_found1049, %dtable_skip1043
  %next_val1051 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  %302 = icmp eq ptr %next_val1051, inttoptr (i64 -1 to ptr)
  br i1 %302, label %dtable_check1052, label %dtable_skip1057

dtable_check1052:                                 ; preds = %dtable_check1052, %dtable_skip1050
  %dtable_ref1053 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1050 ], [ %next_dtable_ref1055, %dtable_check1052 ]
  %dtable_ptr1054 = load ptr, ptr %dtable_ref1053, align 8
  %303 = icmp eq ptr %dtable_ptr1054, null
  %next_dtable_ref1055 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1054, i32 0, i32 2
  br i1 %303, label %dtable_found1056, label %dtable_check1052

dtable_found1056:                                 ; preds = %dtable_check1052
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", ptr %dtable_ref1053, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1057

dtable_skip1057:                                  ; preds = %dtable_found1056, %dtable_skip1050
  %next_val1058 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  %304 = icmp eq ptr %next_val1058, inttoptr (i64 -1 to ptr)
  br i1 %304, label %dtable_check1059, label %dtable_skip1064

dtable_check1059:                                 ; preds = %dtable_check1059, %dtable_skip1057
  %dtable_ref1060 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1057 ], [ %next_dtable_ref1062, %dtable_check1059 ]
  %dtable_ptr1061 = load ptr, ptr %dtable_ref1060, align 8
  %305 = icmp eq ptr %dtable_ptr1061, null
  %next_dtable_ref1062 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1061, i32 0, i32 2
  br i1 %305, label %dtable_found1063, label %dtable_check1059

dtable_found1063:                                 ; preds = %dtable_check1059
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", ptr %dtable_ref1060, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1064

dtable_skip1064:                                  ; preds = %dtable_found1063, %dtable_skip1057
  %next_val1065 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  %306 = icmp eq ptr %next_val1065, inttoptr (i64 -1 to ptr)
  br i1 %306, label %dtable_check1066, label %dtable_skip1071

dtable_check1066:                                 ; preds = %dtable_check1066, %dtable_skip1064
  %dtable_ref1067 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.Sfc8Random", i32 0, i32 2), %dtable_skip1064 ], [ %next_dtable_ref1069, %dtable_check1066 ]
  %dtable_ptr1068 = load ptr, ptr %dtable_ref1067, align 8
  %307 = icmp eq ptr %dtable_ptr1068, null
  %next_dtable_ref1069 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1068, i32 0, i32 2
  br i1 %307, label %dtable_found1070, label %dtable_check1066

dtable_found1070:                                 ; preds = %dtable_check1066
  store ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", ptr %dtable_ref1067, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.Sfc8Random.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1071

dtable_skip1071:                                  ; preds = %dtable_found1070, %dtable_skip1064
  %next_val1072 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  %308 = icmp eq ptr %next_val1072, inttoptr (i64 -1 to ptr)
  br i1 %308, label %dtable_check1073, label %dtable_skip1078

dtable_check1073:                                 ; preds = %dtable_check1073, %dtable_skip1071
  %dtable_ref1074 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1071 ], [ %next_dtable_ref1076, %dtable_check1073 ]
  %dtable_ptr1075 = load ptr, ptr %dtable_ref1074, align 8
  %309 = icmp eq ptr %dtable_ptr1075, null
  %next_dtable_ref1076 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1075, i32 0, i32 2
  br i1 %309, label %dtable_found1077, label %dtable_check1073

dtable_found1077:                                 ; preds = %dtable_check1073
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", ptr %dtable_ref1074, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.set_seed", i32 0, i32 2), align 8
  br label %dtable_skip1078

dtable_skip1078:                                  ; preds = %dtable_found1077, %dtable_skip1071
  %next_val1079 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  %310 = icmp eq ptr %next_val1079, inttoptr (i64 -1 to ptr)
  br i1 %310, label %dtable_check1080, label %dtable_skip1085

dtable_check1080:                                 ; preds = %dtable_check1080, %dtable_skip1078
  %dtable_ref1081 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1078 ], [ %next_dtable_ref1083, %dtable_check1080 ]
  %dtable_ptr1082 = load ptr, ptr %dtable_ref1081, align 8
  %311 = icmp eq ptr %dtable_ptr1082, null
  %next_dtable_ref1083 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1082, i32 0, i32 2
  br i1 %311, label %dtable_found1084, label %dtable_check1080

dtable_found1084:                                 ; preds = %dtable_check1080
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", ptr %dtable_ref1081, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int", i32 0, i32 2), align 8
  br label %dtable_skip1085

dtable_skip1085:                                  ; preds = %dtable_found1084, %dtable_skip1078
  %next_val1086 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  %312 = icmp eq ptr %next_val1086, inttoptr (i64 -1 to ptr)
  br i1 %312, label %dtable_check1087, label %dtable_skip1092

dtable_check1087:                                 ; preds = %dtable_check1087, %dtable_skip1085
  %dtable_ref1088 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1085 ], [ %next_dtable_ref1090, %dtable_check1087 ]
  %dtable_ptr1089 = load ptr, ptr %dtable_ref1088, align 8
  %313 = icmp eq ptr %dtable_ptr1089, null
  %next_dtable_ref1090 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1089, i32 0, i32 2
  br i1 %313, label %dtable_found1091, label %dtable_check1087

dtable_found1091:                                 ; preds = %dtable_check1087
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", ptr %dtable_ref1088, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_bytes", i32 0, i32 2), align 8
  br label %dtable_skip1092

dtable_skip1092:                                  ; preds = %dtable_found1091, %dtable_skip1085
  %next_val1093 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  %314 = icmp eq ptr %next_val1093, inttoptr (i64 -1 to ptr)
  br i1 %314, label %dtable_check1094, label %dtable_skip1099

dtable_check1094:                                 ; preds = %dtable_check1094, %dtable_skip1092
  %dtable_ref1095 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1092 ], [ %next_dtable_ref1097, %dtable_check1094 ]
  %dtable_ptr1096 = load ptr, ptr %dtable_ref1095, align 8
  %315 = icmp eq ptr %dtable_ptr1096, null
  %next_dtable_ref1097 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1096, i32 0, i32 2
  br i1 %315, label %dtable_found1098, label %dtable_check1094

dtable_found1098:                                 ; preds = %dtable_check1094
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", ptr %dtable_ref1095, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_int128", i32 0, i32 2), align 8
  br label %dtable_skip1099

dtable_skip1099:                                  ; preds = %dtable_found1098, %dtable_skip1092
  %next_val1100 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  %316 = icmp eq ptr %next_val1100, inttoptr (i64 -1 to ptr)
  br i1 %316, label %dtable_check1101, label %dtable_skip1106

dtable_check1101:                                 ; preds = %dtable_check1101, %dtable_skip1099
  %dtable_ref1102 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1099 ], [ %next_dtable_ref1104, %dtable_check1101 ]
  %dtable_ptr1103 = load ptr, ptr %dtable_ref1102, align 8
  %317 = icmp eq ptr %dtable_ptr1103, null
  %next_dtable_ref1104 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1103, i32 0, i32 2
  br i1 %317, label %dtable_found1105, label %dtable_check1101

dtable_found1105:                                 ; preds = %dtable_check1101
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", ptr %dtable_ref1102, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_long", i32 0, i32 2), align 8
  br label %dtable_skip1106

dtable_skip1106:                                  ; preds = %dtable_found1105, %dtable_skip1099
  %next_val1107 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  %318 = icmp eq ptr %next_val1107, inttoptr (i64 -1 to ptr)
  br i1 %318, label %dtable_check1108, label %dtable_skip1113

dtable_check1108:                                 ; preds = %dtable_check1108, %dtable_skip1106
  %dtable_ref1109 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1106 ], [ %next_dtable_ref1111, %dtable_check1108 ]
  %dtable_ptr1110 = load ptr, ptr %dtable_ref1109, align 8
  %319 = icmp eq ptr %dtable_ptr1110, null
  %next_dtable_ref1111 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1110, i32 0, i32 2
  br i1 %319, label %dtable_found1112, label %dtable_check1108

dtable_found1112:                                 ; preds = %dtable_check1108
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", ptr %dtable_ref1109, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_short", i32 0, i32 2), align 8
  br label %dtable_skip1113

dtable_skip1113:                                  ; preds = %dtable_found1112, %dtable_skip1106
  %next_val1114 = load ptr, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  %320 = icmp eq ptr %next_val1114, inttoptr (i64 -1 to ptr)
  br i1 %320, label %dtable_check1115, label %dtable_skip1120

dtable_check1115:                                 ; preds = %dtable_check1115, %dtable_skip1113
  %dtable_ref1116 = phi ptr [ getelementptr inbounds (%.introspect, ptr @"$ct.std.math.random.SimpleRandom", i32 0, i32 2), %dtable_skip1113 ], [ %next_dtable_ref1118, %dtable_check1115 ]
  %dtable_ptr1117 = load ptr, ptr %dtable_ref1116, align 8
  %321 = icmp eq ptr %dtable_ptr1117, null
  %next_dtable_ref1118 = getelementptr inbounds { ptr, ptr, ptr }, ptr %dtable_ptr1117, i32 0, i32 2
  br i1 %321, label %dtable_found1119, label %dtable_check1115

dtable_found1119:                                 ; preds = %dtable_check1115
  store ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", ptr %dtable_ref1116, align 8
  store ptr null, ptr getelementptr inbounds ({ ptr, ptr, ptr }, ptr @"$ct.dyn.std.math.random.SimpleRandom.next_byte", i32 0, i32 2), align 8
  br label %dtable_skip1120

dtable_skip1120:                                  ; preds = %dtable_found1119, %dtable_skip1113
  ret void
}

attributes #0 = { nounwind ssp uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!106, !107, !108, !109, !110, !111}
!llvm.dbg.cu = !{!112}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "default_random", linkageName: "std.math.random.default_random", scope: !2, file: !2, line: 65, type: !3, isLocal: false, isDefinition: true, align: 16)
!2 = !DIFile(filename: "math_random.c3", directory: "C:/Program Files/c3c/lib/std/math")
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc64Random", scope: !4, file: !4, line: 43, baseType: !5, align: 8)
!4 = !DIFile(filename: "math.sfc.c3", directory: "C:/Program Files/c3c/lib/std/math/random")
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, align: 64, elements: !7)
!6 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!7 = !{!8}
!8 = !DISubrange(count: 4, lowerBound: 0)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "default_random_initialized", linkageName: "std.math.random.default_random_initialized", scope: !2, file: !2, line: 66, type: !11, isLocal: false, isDefinition: true, align: 1)
!11 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !14, file: !14, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!14 = !DIFile(filename: "math.lcg.c3", directory: "C:/Program Files/c3c/lib/std/math/random")
!15 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !14, file: !14, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!18 = !DIGlobalVariableExpression(var: !19, expr: !DIExpression())
!19 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !14, file: !14, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!20 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !14, file: !14, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!23 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !14, file: !14, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !14, file: !14, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !14, file: !14, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !14, file: !14, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "MUL_MCG128", linkageName: "std.math.random.MUL_MCG128", scope: !34, file: !34, line: 3, type: !15, isLocal: true, isDefinition: true, align: 16)
!34 = !DIFile(filename: "math.mcg.c3", directory: "C:/Program Files/c3c/lib/std/math/random")
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !34, file: !34, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "MUL_MCG32", linkageName: "std.math.random.MUL_MCG32", scope: !34, file: !34, line: 5, type: !20, isLocal: true, isDefinition: true, align: 4)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "MUL_MCG16", linkageName: "std.math.random.MUL_MCG16", scope: !34, file: !34, line: 6, type: !23, isLocal: true, isDefinition: true, align: 2)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !43, file: !43, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!43 = !DIFile(filename: "math.msws.c3", directory: "C:/Program Files/c3c/lib/std/math/random")
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !43, file: !43, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !43, file: !43, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!48 = !DIGlobalVariableExpression(var: !49, expr: !DIExpression())
!49 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !43, file: !43, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !43, file: !43, line: 8, type: !52, isLocal: true, isDefinition: true, align: 1)
!52 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!53 = !DIGlobalVariableExpression(var: !54, expr: !DIExpression())
!54 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !55, file: !55, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!55 = !DIFile(filename: "math.pcg.c3", directory: "C:/Program Files/c3c/lib/std/math/random")
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !55, file: !55, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!58 = !DIGlobalVariableExpression(var: !59, expr: !DIExpression())
!59 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !55, file: !55, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !55, file: !55, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !55, file: !55, line: 9, type: !15, isLocal: true, isDefinition: true, align: 16)
!64 = !DIGlobalVariableExpression(var: !65, expr: !DIExpression())
!65 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !55, file: !55, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!66 = !DIGlobalVariableExpression(var: !67, expr: !DIExpression())
!67 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !55, file: !55, line: 11, type: !20, isLocal: true, isDefinition: true, align: 4)
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !55, file: !55, line: 12, type: !23, isLocal: true, isDefinition: true, align: 2)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_long.ROT_SHIFT", scope: !55, file: !55, line: 28, type: !72, isLocal: true, isDefinition: true, align: 4)
!72 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!73 = !DIGlobalVariableExpression(var: !74, expr: !DIExpression())
!74 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_int.ROT_SHIFT", scope: !55, file: !55, line: 56, type: !72, isLocal: true, isDefinition: true, align: 4)
!75 = !DIGlobalVariableExpression(var: !76, expr: !DIExpression())
!76 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_short.ROT_SHIFT", scope: !55, file: !55, line: 85, type: !72, isLocal: true, isDefinition: true, align: 4)
!77 = !DIGlobalVariableExpression(var: !78, expr: !DIExpression())
!78 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_byte.ROT_SHIFT", scope: !55, file: !55, line: 113, type: !72, isLocal: true, isDefinition: true, align: 4)
!79 = !DIGlobalVariableExpression(var: !80, expr: !DIExpression())
!80 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !81, file: !81, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!81 = !DIFile(filename: "math.seeder.c3", directory: "C:/Program Files/c3c/lib/std/math/random")
!82 = !DIGlobalVariableExpression(var: !83, expr: !DIExpression())
!83 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !81, file: !81, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!84 = !DIGlobalVariableExpression(var: !85, expr: !DIExpression())
!85 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !81, file: !81, line: 6, type: !6, isLocal: true, isDefinition: true, align: 8)
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "random_int", linkageName: "entropy.random_int", scope: !81, file: !81, line: 80, type: !20, isLocal: true, isDefinition: true, align: 4)
!88 = !DIGlobalVariableExpression(var: !89, expr: !DIExpression())
!89 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !4, file: !4, line: 4, type: !15, isLocal: true, isDefinition: true, align: 16)
!90 = !DIGlobalVariableExpression(var: !91, expr: !DIExpression())
!91 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !4, file: !4, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!92 = !DIGlobalVariableExpression(var: !93, expr: !DIExpression())
!93 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !4, file: !4, line: 6, type: !20, isLocal: true, isDefinition: true, align: 4)
!94 = !DIGlobalVariableExpression(var: !95, expr: !DIExpression())
!95 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !4, file: !4, line: 7, type: !23, isLocal: true, isDefinition: true, align: 2)
!96 = !DIGlobalVariableExpression(var: !97, expr: !DIExpression())
!97 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !4, file: !4, line: 8, type: !52, isLocal: true, isDefinition: true, align: 1)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MULTIPLIER", linkageName: "std.math.random.SIMPLE_RANDOM_MULTIPLIER", scope: !100, file: !100, line: 32, type: !101, isLocal: true, isDefinition: true, align: 8)
!100 = !DIFile(filename: "math.simple_random.c3", directory: "C:/Program Files/c3c/lib/std/math/random")
!101 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_ADDEND", linkageName: "std.math.random.SIMPLE_RANDOM_ADDEND", scope: !100, file: !100, line: 33, type: !101, isLocal: true, isDefinition: true, align: 8)
!104 = !DIGlobalVariableExpression(var: !105, expr: !DIExpression())
!105 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MASK", linkageName: "std.math.random.SIMPLE_RANDOM_MASK", scope: !100, file: !100, line: 34, type: !101, isLocal: true, isDefinition: true, align: 8)
!106 = !{i32 1, !"CodeView", i32 1}
!107 = !{i32 2, !"Debug Info Version", i32 3}
!108 = !{i32 2, !"wchar_size", i32 2}
!109 = !{i32 4, !"PIC Level", i32 2}
!110 = !{i32 1, !"uwtable", i32 2}
!111 = !{i32 1, !"MaxTLSAlign", i32 65536}
!112 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !113, splitDebugInlining: false)
!113 = !{!0, !9, !12, !16, !18, !21, !24, !26, !28, !30, !32, !35, !37, !39, !41, !44, !46, !48, !50, !53, !56, !58, !60, !62, !64, !66, !68, !70, !73, !75, !77, !79, !82, !84, !86, !88, !90, !92, !94, !96, !98, !102, !104}
!114 = distinct !DISubprogram(name: "srand", linkageName: "std.math.random.srand", scope: !2, file: !2, line: 71, type: !115, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!115 = !DISubroutineType(types: !116)
!116 = !{null, !6}
!117 = !{}
!118 = !DILocalVariable(name: "seed", arg: 1, scope: !114, file: !2, line: 71, type: !6)
!119 = !DILocation(line: 71, scope: !114)
!120 = !DILocation(line: 371, scope: !121, inlinedAt: !123)
!121 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!122 = !DIFile(filename: "builtin.c3", directory: "C:/Program Files/c3c/lib/std/core")
!123 = !DILocation(line: 73, scope: !114)
!124 = !DILocation(line: 74, scope: !114)
!125 = distinct !DISubprogram(name: "rand", linkageName: "std.math.random.rand", scope: !2, file: !2, line: 80, type: !126, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!126 = !DISubroutineType(types: !127)
!127 = !{!128, !72}
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "CInt", scope: !2, file: !2, line: 21, baseType: !72, align: 4)
!129 = !DILocalVariable(name: "range", arg: 1, scope: !125, file: !2, line: 80, type: !72)
!130 = !DILocation(line: 80, scope: !125)
!131 = !DILocation(line: 179, scope: !132, inlinedAt: !133)
!132 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!133 = !DILocation(line: 82, scope: !125)
!134 = !DILocation(line: 136, scope: !135, inlinedAt: !136)
!135 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!136 = !DILocation(line: 24, scope: !137, inlinedAt: !139)
!137 = distinct !DILexicalBlock(scope: !138, file: !2, line: 27, column: 1)
!138 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!139 = !DILocation(line: 181, scope: !140, inlinedAt: !133)
!140 = distinct !DILexicalBlock(scope: !132, file: !2, line: 180, column: 2)
!141 = !DILocation(line: 28, scope: !138, inlinedAt: !139)
!142 = !DILocation(line: 182, scope: !140, inlinedAt: !133)
!143 = !DILocation(line: 83, scope: !125)
!144 = !DILocation(line: 136, scope: !145, inlinedAt: !146)
!145 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!146 = !DILocation(line: 34, scope: !147, inlinedAt: !143)
!147 = distinct !DILexicalBlock(scope: !148, file: !2, line: 38, column: 1)
!148 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!149 = !DILocation(line: 35, scope: !147, inlinedAt: !143)
!150 = !DILocation(line: 39, scope: !148, inlinedAt: !143)
!151 = !DILocalVariable(name: "mask", scope: !148, file: !2, line: 40, type: !20, align: 4)
!152 = !DILocation(line: 40, scope: !148, inlinedAt: !143)
!153 = !DILocation(line: 41, scope: !148, inlinedAt: !143)
!154 = !DILocation(line: 42, scope: !148, inlinedAt: !143)
!155 = !DILocation(line: 95, scope: !156, inlinedAt: !154)
!156 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !157, file: !157, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!157 = !DIFile(filename: "bits.c3", directory: "C:/Program Files/c3c/lib/std")
!158 = !DILocalVariable(name: "x", scope: !148, file: !2, line: 43, type: !20, align: 4)
!159 = !DILocation(line: 43, scope: !148, inlinedAt: !143)
!160 = !DILocation(line: 44, scope: !148, inlinedAt: !143)
!161 = !DILocation(line: 48, scope: !162, inlinedAt: !143)
!162 = distinct !DILexicalBlock(scope: !148, file: !2, line: 44, column: 2)
!163 = !DILocation(line: 46, scope: !164, inlinedAt: !143)
!164 = distinct !DILexicalBlock(scope: !162, file: !2, line: 45, column: 2)
!165 = !DILocation(line: 49, scope: !148, inlinedAt: !143)
!166 = distinct !DISubprogram(name: "rand_in_range", linkageName: "std.math.random.rand_in_range", scope: !2, file: !2, line: 90, type: !167, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!167 = !DISubroutineType(types: !168)
!168 = !{!128, !72, !72}
!169 = !DILocalVariable(name: "min", arg: 1, scope: !166, file: !2, line: 90, type: !72)
!170 = !DILocation(line: 90, scope: !166)
!171 = !DILocalVariable(name: "max", arg: 2, scope: !166, file: !2, line: 90, type: !72)
!172 = !DILocation(line: 88, scope: !173)
!173 = distinct !DILexicalBlock(scope: !166, file: !2, line: 91, column: 1)
!174 = !DILocation(line: 179, scope: !175, inlinedAt: !176)
!175 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!176 = !DILocation(line: 92, scope: !166)
!177 = !DILocation(line: 136, scope: !178, inlinedAt: !179)
!178 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!179 = !DILocation(line: 24, scope: !180, inlinedAt: !182)
!180 = distinct !DILexicalBlock(scope: !181, file: !2, line: 27, column: 1)
!181 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!182 = !DILocation(line: 181, scope: !183, inlinedAt: !176)
!183 = distinct !DILexicalBlock(scope: !175, file: !2, line: 180, column: 2)
!184 = !DILocation(line: 28, scope: !181, inlinedAt: !182)
!185 = !DILocation(line: 182, scope: !183, inlinedAt: !176)
!186 = !DILocation(line: 136, scope: !187, inlinedAt: !188)
!187 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!188 = !DILocation(line: 55, scope: !189, inlinedAt: !191)
!189 = distinct !DILexicalBlock(scope: !190, file: !2, line: 59, column: 1)
!190 = distinct !DISubprogram(name: "next_in_range", linkageName: "next_in_range", scope: !2, file: !2, line: 58, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!191 = !DILocation(line: 93, scope: !166)
!192 = !DILocation(line: 56, scope: !189, inlinedAt: !191)
!193 = !DILocation(line: 60, scope: !190, inlinedAt: !191)
!194 = !DILocation(line: 136, scope: !195, inlinedAt: !196)
!195 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!196 = !DILocation(line: 34, scope: !197, inlinedAt: !193)
!197 = distinct !DILexicalBlock(scope: !198, file: !2, line: 38, column: 1)
!198 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!199 = !DILocation(line: 35, scope: !197, inlinedAt: !193)
!200 = !DILocation(line: 39, scope: !198, inlinedAt: !193)
!201 = !DILocalVariable(name: "mask", scope: !198, file: !2, line: 40, type: !20, align: 4)
!202 = !DILocation(line: 40, scope: !198, inlinedAt: !193)
!203 = !DILocation(line: 41, scope: !198, inlinedAt: !193)
!204 = !DILocation(line: 42, scope: !198, inlinedAt: !193)
!205 = !DILocation(line: 95, scope: !206, inlinedAt: !204)
!206 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !157, file: !157, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!207 = !DILocalVariable(name: "x", scope: !198, file: !2, line: 43, type: !20, align: 4)
!208 = !DILocation(line: 43, scope: !198, inlinedAt: !193)
!209 = !DILocation(line: 44, scope: !198, inlinedAt: !193)
!210 = !DILocation(line: 48, scope: !211, inlinedAt: !193)
!211 = distinct !DILexicalBlock(scope: !198, file: !2, line: 44, column: 2)
!212 = !DILocation(line: 46, scope: !213, inlinedAt: !193)
!213 = distinct !DILexicalBlock(scope: !211, file: !2, line: 45, column: 2)
!214 = !DILocation(line: 49, scope: !198, inlinedAt: !193)
!215 = distinct !DISubprogram(name: "rnd", linkageName: "std.math.random.rnd", scope: !2, file: !2, line: 96, type: !216, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!216 = !DISubroutineType(types: !217)
!217 = !{!218}
!218 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!219 = !DILocation(line: 179, scope: !220, inlinedAt: !221)
!220 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!221 = !DILocation(line: 98, scope: !215)
!222 = !DILocation(line: 136, scope: !223, inlinedAt: !224)
!223 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!224 = !DILocation(line: 24, scope: !225, inlinedAt: !227)
!225 = distinct !DILexicalBlock(scope: !226, file: !2, line: 27, column: 1)
!226 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!227 = !DILocation(line: 181, scope: !228, inlinedAt: !221)
!228 = distinct !DILexicalBlock(scope: !220, file: !2, line: 180, column: 2)
!229 = !DILocation(line: 28, scope: !226, inlinedAt: !227)
!230 = !DILocation(line: 182, scope: !228, inlinedAt: !221)
!231 = !DILocalVariable(name: "val", scope: !215, file: !2, line: 99, type: !6, align: 8)
!232 = !DILocation(line: 99, scope: !215)
!233 = !DILocation(line: 100, scope: !215)
!234 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg128Random.set_seed", scope: !14, file: !14, line: 18, type: !235, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!235 = !DISubroutineType(types: !236)
!236 = !{null, !237, !239}
!237 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg128Random*", baseType: !238, size: 64, align: 64, dwarfAddressSpace: 0)
!238 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg128Random", scope: !14, file: !14, line: 16, baseType: !15, align: 16)
!239 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !240, identifier: "char[]")
!240 = !{!241, !243}
!241 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !239, baseType: !242, size: 64, align: 64)
!242 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !52, size: 64, align: 64, dwarfAddressSpace: 0)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !239, baseType: !244, size: 64, align: 64, offset: 64)
!244 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !6)
!245 = !DILocation(line: 19, scope: !234)
!246 = !DILocalVariable(name: "self", arg: 1, scope: !234, file: !14, line: 18, type: !237)
!247 = !DILocation(line: 18, scope: !234)
!248 = !DILocalVariable(name: "input", arg: 2, scope: !234, file: !14, line: 18, type: !239)
!249 = !DILocation(line: 20, scope: !234)
!250 = !DILocalVariable(name: "return_value", scope: !251, file: !14, line: 10, type: !15, align: 16)
!251 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!252 = !DILocation(line: 10, scope: !251, inlinedAt: !249)
!253 = !DILocation(line: 371, scope: !254, inlinedAt: !255)
!254 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!255 = !DILocation(line: 11, scope: !251, inlinedAt: !249)
!256 = !DILocation(line: 12, scope: !251, inlinedAt: !249)
!257 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg128Random.next_long", scope: !14, file: !14, line: 24, type: !258, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!258 = !DISubroutineType(types: !259)
!259 = !{!6, !237}
!260 = !DILocation(line: 25, scope: !257)
!261 = !DILocalVariable(name: "self", arg: 1, scope: !257, file: !14, line: 24, type: !237)
!262 = !DILocation(line: 24, scope: !257)
!263 = !DILocalVariable(name: "s", scope: !257, file: !14, line: 26, type: !264, align: 8)
!264 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !15, size: 64, align: 64, dwarfAddressSpace: 0)
!265 = !DILocation(line: 26, scope: !257)
!266 = !DILocalVariable(name: "result", scope: !257, file: !14, line: 27, type: !6, align: 8)
!267 = !DILocation(line: 27, scope: !257)
!268 = !DILocation(line: 28, scope: !257)
!269 = !DILocation(line: 29, scope: !257)
!270 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg128Random.next_bytes", scope: !14, file: !14, line: 35, type: !235, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!271 = !DILocation(line: 35, scope: !270)
!272 = !DILocalVariable(name: "self", arg: 1, scope: !270, file: !14, line: 35, type: !237)
!273 = !DILocalVariable(name: "bytes", arg: 2, scope: !270, file: !14, line: 35, type: !239)
!274 = !DILocation(line: 33, scope: !275)
!275 = distinct !DILexicalBlock(scope: !270, file: !14, line: 35, column: 66)
!276 = !DILocalVariable(name: "len", scope: !277, file: !14, line: 146, type: !244, align: 8)
!277 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!278 = !DILocation(line: 146, scope: !277, inlinedAt: !271)
!279 = !DILocation(line: 148, scope: !277, inlinedAt: !271)
!280 = !DILocation(line: 148, scope: !281, inlinedAt: !271)
!281 = distinct !DILexicalBlock(scope: !277, file: !2, line: 148, column: 2)
!282 = !DILocalVariable(name: "value", scope: !283, file: !14, line: 150, type: !6, align: 8)
!283 = distinct !DILexicalBlock(scope: !281, file: !2, line: 149, column: 2)
!284 = !DILocation(line: 150, scope: !283, inlinedAt: !271)
!285 = !DILocation(line: 35, scope: !283, inlinedAt: !271)
!286 = !DILocation(line: 151, scope: !283, inlinedAt: !271)
!287 = !DILocation(line: 153, scope: !288, inlinedAt: !271)
!288 = distinct !DILexicalBlock(scope: !283, file: !2, line: 152, column: 3)
!289 = !DILocation(line: 154, scope: !288, inlinedAt: !271)
!290 = !DILocation(line: 156, scope: !283, inlinedAt: !271)
!291 = !DILocation(line: 157, scope: !283, inlinedAt: !271)
!292 = !DILocation(line: 158, scope: !283, inlinedAt: !271)
!293 = !DILocation(line: 164, scope: !294, inlinedAt: !295)
!294 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!295 = !DILocation(line: 160, scope: !277, inlinedAt: !271)
!296 = !DILocation(line: 166, scope: !294, inlinedAt: !295)
!297 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg128Random.next_int128", scope: !14, file: !14, line: 36, type: !298, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!298 = !DISubroutineType(types: !299)
!299 = !{!15, !237}
!300 = !DILocation(line: 36, scope: !297)
!301 = !DILocalVariable(name: "self", arg: 1, scope: !297, file: !14, line: 36, type: !237)
!302 = !DILocation(line: 36, scope: !303, inlinedAt: !300)
!303 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!304 = !DILocation(line: 138, scope: !303, inlinedAt: !300)
!305 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg128Random.next_int", scope: !14, file: !14, line: 37, type: !306, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!306 = !DISubroutineType(types: !307)
!307 = !{!20, !237}
!308 = !DILocation(line: 37, scope: !305)
!309 = !DILocalVariable(name: "self", arg: 1, scope: !305, file: !14, line: 37, type: !237)
!310 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg128Random.next_short", scope: !14, file: !14, line: 38, type: !311, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!311 = !DISubroutineType(types: !312)
!312 = !{!23, !237}
!313 = !DILocation(line: 38, scope: !310)
!314 = !DILocalVariable(name: "self", arg: 1, scope: !310, file: !14, line: 38, type: !237)
!315 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg128Random.next_byte", scope: !14, file: !14, line: 39, type: !316, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!316 = !DISubroutineType(types: !317)
!317 = !{!52, !237}
!318 = !DILocation(line: 39, scope: !315)
!319 = !DILocalVariable(name: "self", arg: 1, scope: !315, file: !14, line: 39, type: !237)
!320 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg64Random.set_seed", scope: !14, file: !14, line: 45, type: !321, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !323, !239}
!323 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg64Random*", baseType: !324, size: 64, align: 64, dwarfAddressSpace: 0)
!324 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg64Random", scope: !14, file: !14, line: 43, baseType: !6, align: 8)
!325 = !DILocation(line: 46, scope: !320)
!326 = !DILocalVariable(name: "self", arg: 1, scope: !320, file: !14, line: 45, type: !323)
!327 = !DILocation(line: 45, scope: !320)
!328 = !DILocalVariable(name: "seed", arg: 2, scope: !320, file: !14, line: 45, type: !239)
!329 = !DILocation(line: 47, scope: !320)
!330 = !DILocalVariable(name: "return_value", scope: !331, file: !14, line: 10, type: !6, align: 8)
!331 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!332 = !DILocation(line: 10, scope: !331, inlinedAt: !329)
!333 = !DILocation(line: 371, scope: !334, inlinedAt: !335)
!334 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!335 = !DILocation(line: 11, scope: !331, inlinedAt: !329)
!336 = !DILocation(line: 12, scope: !331, inlinedAt: !329)
!337 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg64Random.next_int", scope: !14, file: !14, line: 51, type: !338, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!338 = !DISubroutineType(types: !339)
!339 = !{!20, !323}
!340 = !DILocation(line: 52, scope: !337)
!341 = !DILocalVariable(name: "self", arg: 1, scope: !337, file: !14, line: 51, type: !323)
!342 = !DILocation(line: 51, scope: !337)
!343 = !DILocalVariable(name: "s", scope: !337, file: !14, line: 53, type: !344, align: 8)
!344 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !6, size: 64, align: 64, dwarfAddressSpace: 0)
!345 = !DILocation(line: 53, scope: !337)
!346 = !DILocalVariable(name: "result", scope: !337, file: !14, line: 54, type: !20, align: 4)
!347 = !DILocation(line: 54, scope: !337)
!348 = !DILocation(line: 55, scope: !337)
!349 = !DILocation(line: 56, scope: !337)
!350 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg64Random.next_bytes", scope: !14, file: !14, line: 62, type: !321, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!351 = !DILocation(line: 62, scope: !350)
!352 = !DILocalVariable(name: "self", arg: 1, scope: !350, file: !14, line: 62, type: !323)
!353 = !DILocalVariable(name: "bytes", arg: 2, scope: !350, file: !14, line: 62, type: !239)
!354 = !DILocation(line: 60, scope: !355)
!355 = distinct !DILexicalBlock(scope: !350, file: !14, line: 62, column: 65)
!356 = !DILocalVariable(name: "len", scope: !357, file: !14, line: 146, type: !244, align: 8)
!357 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!358 = !DILocation(line: 146, scope: !357, inlinedAt: !351)
!359 = !DILocation(line: 148, scope: !357, inlinedAt: !351)
!360 = !DILocation(line: 148, scope: !361, inlinedAt: !351)
!361 = distinct !DILexicalBlock(scope: !357, file: !2, line: 148, column: 2)
!362 = !DILocalVariable(name: "value", scope: !363, file: !14, line: 150, type: !20, align: 4)
!363 = distinct !DILexicalBlock(scope: !361, file: !2, line: 149, column: 2)
!364 = !DILocation(line: 150, scope: !363, inlinedAt: !351)
!365 = !DILocation(line: 62, scope: !363, inlinedAt: !351)
!366 = !DILocation(line: 151, scope: !363, inlinedAt: !351)
!367 = !DILocation(line: 153, scope: !368, inlinedAt: !351)
!368 = distinct !DILexicalBlock(scope: !363, file: !2, line: 152, column: 3)
!369 = !DILocation(line: 154, scope: !368, inlinedAt: !351)
!370 = !DILocation(line: 156, scope: !363, inlinedAt: !351)
!371 = !DILocation(line: 157, scope: !363, inlinedAt: !351)
!372 = !DILocation(line: 158, scope: !363, inlinedAt: !351)
!373 = !DILocation(line: 164, scope: !374, inlinedAt: !375)
!374 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!375 = !DILocation(line: 160, scope: !357, inlinedAt: !351)
!376 = !DILocation(line: 166, scope: !374, inlinedAt: !375)
!377 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg64Random.next_int128", scope: !14, file: !14, line: 63, type: !378, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!378 = !DISubroutineType(types: !379)
!379 = !{!15, !323}
!380 = !DILocation(line: 63, scope: !377)
!381 = !DILocalVariable(name: "self", arg: 1, scope: !377, file: !14, line: 63, type: !323)
!382 = !DILocation(line: 63, scope: !383, inlinedAt: !380)
!383 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!384 = !DILocation(line: 138, scope: !383, inlinedAt: !380)
!385 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg64Random.next_long", scope: !14, file: !14, line: 64, type: !386, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!386 = !DISubroutineType(types: !387)
!387 = !{!6, !323}
!388 = !DILocation(line: 64, scope: !385)
!389 = !DILocalVariable(name: "self", arg: 1, scope: !385, file: !14, line: 64, type: !323)
!390 = !DILocation(line: 64, scope: !391, inlinedAt: !388)
!391 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!392 = !DILocation(line: 139, scope: !391, inlinedAt: !388)
!393 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg64Random.next_short", scope: !14, file: !14, line: 65, type: !394, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!394 = !DISubroutineType(types: !395)
!395 = !{!23, !323}
!396 = !DILocation(line: 65, scope: !393)
!397 = !DILocalVariable(name: "self", arg: 1, scope: !393, file: !14, line: 65, type: !323)
!398 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg64Random.next_byte", scope: !14, file: !14, line: 66, type: !399, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!399 = !DISubroutineType(types: !400)
!400 = !{!52, !323}
!401 = !DILocation(line: 66, scope: !398)
!402 = !DILocalVariable(name: "self", arg: 1, scope: !398, file: !14, line: 66, type: !323)
!403 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg32Random.set_seed", scope: !14, file: !14, line: 72, type: !404, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!404 = !DISubroutineType(types: !405)
!405 = !{null, !406, !239}
!406 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg32Random*", baseType: !407, size: 64, align: 64, dwarfAddressSpace: 0)
!407 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg32Random", scope: !14, file: !14, line: 70, baseType: !20, align: 4)
!408 = !DILocation(line: 73, scope: !403)
!409 = !DILocalVariable(name: "self", arg: 1, scope: !403, file: !14, line: 72, type: !406)
!410 = !DILocation(line: 72, scope: !403)
!411 = !DILocalVariable(name: "seed", arg: 2, scope: !403, file: !14, line: 72, type: !239)
!412 = !DILocation(line: 74, scope: !403)
!413 = !DILocalVariable(name: "return_value", scope: !414, file: !14, line: 10, type: !20, align: 4)
!414 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!415 = !DILocation(line: 10, scope: !414, inlinedAt: !412)
!416 = !DILocation(line: 371, scope: !417, inlinedAt: !418)
!417 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!418 = !DILocation(line: 11, scope: !414, inlinedAt: !412)
!419 = !DILocation(line: 12, scope: !414, inlinedAt: !412)
!420 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg32Random.next_short", scope: !14, file: !14, line: 77, type: !421, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!421 = !DISubroutineType(types: !422)
!422 = !{!23, !406}
!423 = !DILocation(line: 78, scope: !420)
!424 = !DILocalVariable(name: "self", arg: 1, scope: !420, file: !14, line: 77, type: !406)
!425 = !DILocation(line: 77, scope: !420)
!426 = !DILocalVariable(name: "s", scope: !420, file: !14, line: 79, type: !427, align: 8)
!427 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !20, size: 64, align: 64, dwarfAddressSpace: 0)
!428 = !DILocation(line: 79, scope: !420)
!429 = !DILocalVariable(name: "result", scope: !420, file: !14, line: 80, type: !23, align: 2)
!430 = !DILocation(line: 80, scope: !420)
!431 = !DILocation(line: 81, scope: !420)
!432 = !DILocation(line: 82, scope: !420)
!433 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg32Random.next_bytes", scope: !14, file: !14, line: 85, type: !404, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!434 = !DILocation(line: 85, scope: !433)
!435 = !DILocalVariable(name: "self", arg: 1, scope: !433, file: !14, line: 85, type: !406)
!436 = !DILocalVariable(name: "bytes", arg: 2, scope: !433, file: !14, line: 85, type: !239)
!437 = !DILocalVariable(name: "len", scope: !438, file: !14, line: 146, type: !244, align: 8)
!438 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!439 = !DILocation(line: 146, scope: !438, inlinedAt: !434)
!440 = !DILocation(line: 148, scope: !438, inlinedAt: !434)
!441 = !DILocation(line: 148, scope: !442, inlinedAt: !434)
!442 = distinct !DILexicalBlock(scope: !438, file: !2, line: 148, column: 2)
!443 = !DILocalVariable(name: "value", scope: !444, file: !14, line: 150, type: !23, align: 2)
!444 = distinct !DILexicalBlock(scope: !442, file: !2, line: 149, column: 2)
!445 = !DILocation(line: 150, scope: !444, inlinedAt: !434)
!446 = !DILocation(line: 85, scope: !444, inlinedAt: !434)
!447 = !DILocation(line: 151, scope: !444, inlinedAt: !434)
!448 = !DILocation(line: 153, scope: !449, inlinedAt: !434)
!449 = distinct !DILexicalBlock(scope: !444, file: !2, line: 152, column: 3)
!450 = !DILocation(line: 154, scope: !449, inlinedAt: !434)
!451 = !DILocation(line: 156, scope: !444, inlinedAt: !434)
!452 = !DILocation(line: 157, scope: !444, inlinedAt: !434)
!453 = !DILocation(line: 158, scope: !444, inlinedAt: !434)
!454 = !DILocation(line: 164, scope: !455, inlinedAt: !456)
!455 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!456 = !DILocation(line: 160, scope: !438, inlinedAt: !434)
!457 = !DILocation(line: 166, scope: !455, inlinedAt: !456)
!458 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg32Random.next_int128", scope: !14, file: !14, line: 86, type: !459, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!459 = !DISubroutineType(types: !460)
!460 = !{!15, !406}
!461 = !DILocation(line: 86, scope: !458)
!462 = !DILocalVariable(name: "self", arg: 1, scope: !458, file: !14, line: 86, type: !406)
!463 = !DILocation(line: 86, scope: !464, inlinedAt: !461)
!464 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!465 = !DILocation(line: 138, scope: !464, inlinedAt: !461)
!466 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg32Random.next_long", scope: !14, file: !14, line: 87, type: !467, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!467 = !DISubroutineType(types: !468)
!468 = !{!6, !406}
!469 = !DILocation(line: 87, scope: !466)
!470 = !DILocalVariable(name: "self", arg: 1, scope: !466, file: !14, line: 87, type: !406)
!471 = !DILocation(line: 87, scope: !472, inlinedAt: !469)
!472 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!473 = !DILocation(line: 139, scope: !472, inlinedAt: !469)
!474 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg32Random.next_int", scope: !14, file: !14, line: 88, type: !475, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!475 = !DISubroutineType(types: !476)
!476 = !{!20, !406}
!477 = !DILocation(line: 88, scope: !474)
!478 = !DILocalVariable(name: "self", arg: 1, scope: !474, file: !14, line: 88, type: !406)
!479 = !DILocation(line: 88, scope: !480, inlinedAt: !477)
!480 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!481 = !DILocation(line: 140, scope: !480, inlinedAt: !477)
!482 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg32Random.next_byte", scope: !14, file: !14, line: 89, type: !483, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!483 = !DISubroutineType(types: !484)
!484 = !{!52, !406}
!485 = !DILocation(line: 89, scope: !482)
!486 = !DILocalVariable(name: "self", arg: 1, scope: !482, file: !14, line: 89, type: !406)
!487 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg16Random.set_seed", scope: !14, file: !14, line: 95, type: !488, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!488 = !DISubroutineType(types: !489)
!489 = !{null, !490, !239}
!490 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg16Random*", baseType: !491, size: 64, align: 64, dwarfAddressSpace: 0)
!491 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg16Random", scope: !14, file: !14, line: 93, baseType: !23, align: 2)
!492 = !DILocation(line: 96, scope: !487)
!493 = !DILocalVariable(name: "self", arg: 1, scope: !487, file: !14, line: 95, type: !490)
!494 = !DILocation(line: 95, scope: !487)
!495 = !DILocalVariable(name: "seed", arg: 2, scope: !487, file: !14, line: 95, type: !239)
!496 = !DILocation(line: 97, scope: !487)
!497 = !DILocalVariable(name: "return_value", scope: !498, file: !14, line: 10, type: !23, align: 2)
!498 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!499 = !DILocation(line: 10, scope: !498, inlinedAt: !496)
!500 = !DILocation(line: 371, scope: !501, inlinedAt: !502)
!501 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!502 = !DILocation(line: 11, scope: !498, inlinedAt: !496)
!503 = !DILocation(line: 12, scope: !498, inlinedAt: !496)
!504 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg16Random.next_byte", scope: !14, file: !14, line: 100, type: !505, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!505 = !DISubroutineType(types: !506)
!506 = !{!52, !490}
!507 = !DILocation(line: 101, scope: !504)
!508 = !DILocalVariable(name: "self", arg: 1, scope: !504, file: !14, line: 100, type: !490)
!509 = !DILocation(line: 100, scope: !504)
!510 = !DILocalVariable(name: "s", scope: !504, file: !14, line: 102, type: !511, align: 8)
!511 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !23, size: 64, align: 64, dwarfAddressSpace: 0)
!512 = !DILocation(line: 102, scope: !504)
!513 = !DILocalVariable(name: "result", scope: !504, file: !14, line: 103, type: !52, align: 1)
!514 = !DILocation(line: 103, scope: !504)
!515 = !DILocation(line: 104, scope: !504)
!516 = !DILocation(line: 105, scope: !504)
!517 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg16Random.next_bytes", scope: !14, file: !14, line: 108, type: !488, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!518 = !DILocation(line: 108, scope: !517)
!519 = !DILocalVariable(name: "self", arg: 1, scope: !517, file: !14, line: 108, type: !490)
!520 = !DILocalVariable(name: "bytes", arg: 2, scope: !517, file: !14, line: 108, type: !239)
!521 = !DILocalVariable(name: "len", scope: !522, file: !14, line: 146, type: !244, align: 8)
!522 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!523 = !DILocation(line: 146, scope: !522, inlinedAt: !518)
!524 = !DILocation(line: 148, scope: !522, inlinedAt: !518)
!525 = !DILocation(line: 148, scope: !526, inlinedAt: !518)
!526 = distinct !DILexicalBlock(scope: !522, file: !2, line: 148, column: 2)
!527 = !DILocalVariable(name: "value", scope: !528, file: !14, line: 150, type: !52, align: 1)
!528 = distinct !DILexicalBlock(scope: !526, file: !2, line: 149, column: 2)
!529 = !DILocation(line: 150, scope: !528, inlinedAt: !518)
!530 = !DILocation(line: 108, scope: !528, inlinedAt: !518)
!531 = !DILocation(line: 151, scope: !528, inlinedAt: !518)
!532 = !DILocation(line: 153, scope: !533, inlinedAt: !518)
!533 = distinct !DILexicalBlock(scope: !528, file: !2, line: 152, column: 3)
!534 = !DILocation(line: 154, scope: !533, inlinedAt: !518)
!535 = !DILocation(line: 156, scope: !528, inlinedAt: !518)
!536 = !DILocation(line: 157, scope: !528, inlinedAt: !518)
!537 = !DILocation(line: 158, scope: !528, inlinedAt: !518)
!538 = !DILocation(line: 164, scope: !539, inlinedAt: !540)
!539 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!540 = !DILocation(line: 160, scope: !522, inlinedAt: !518)
!541 = !DILocation(line: 166, scope: !539, inlinedAt: !540)
!542 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg16Random.next_int128", scope: !14, file: !14, line: 109, type: !543, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!543 = !DISubroutineType(types: !544)
!544 = !{!15, !490}
!545 = !DILocation(line: 109, scope: !542)
!546 = !DILocalVariable(name: "self", arg: 1, scope: !542, file: !14, line: 109, type: !490)
!547 = !DILocation(line: 109, scope: !548, inlinedAt: !545)
!548 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!549 = !DILocation(line: 138, scope: !548, inlinedAt: !545)
!550 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg16Random.next_long", scope: !14, file: !14, line: 110, type: !551, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!551 = !DISubroutineType(types: !552)
!552 = !{!6, !490}
!553 = !DILocation(line: 110, scope: !550)
!554 = !DILocalVariable(name: "self", arg: 1, scope: !550, file: !14, line: 110, type: !490)
!555 = !DILocation(line: 110, scope: !556, inlinedAt: !553)
!556 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!557 = !DILocation(line: 139, scope: !556, inlinedAt: !553)
!558 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg16Random.next_int", scope: !14, file: !14, line: 111, type: !559, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!559 = !DISubroutineType(types: !560)
!560 = !{!20, !490}
!561 = !DILocation(line: 111, scope: !558)
!562 = !DILocalVariable(name: "self", arg: 1, scope: !558, file: !14, line: 111, type: !490)
!563 = !DILocation(line: 111, scope: !564, inlinedAt: !561)
!564 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!565 = !DILocation(line: 140, scope: !564, inlinedAt: !561)
!566 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg16Random.next_short", scope: !14, file: !14, line: 112, type: !567, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!567 = !DISubroutineType(types: !568)
!568 = !{!23, !490}
!569 = !DILocation(line: 112, scope: !566)
!570 = !DILocalVariable(name: "self", arg: 1, scope: !566, file: !14, line: 112, type: !490)
!571 = !DILocation(line: 112, scope: !572, inlinedAt: !569)
!572 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!573 = !DILocation(line: 141, scope: !572, inlinedAt: !569)
!574 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg128Random.set_seed", scope: !34, file: !34, line: 12, type: !575, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!575 = !DISubroutineType(types: !576)
!576 = !{null, !577, !239}
!577 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg128Random*", baseType: !578, size: 64, align: 64, dwarfAddressSpace: 0)
!578 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg128Random", scope: !34, file: !34, line: 10, baseType: !15, align: 16)
!579 = !DILocation(line: 13, scope: !574)
!580 = !DILocalVariable(name: "self", arg: 1, scope: !574, file: !34, line: 12, type: !577)
!581 = !DILocation(line: 12, scope: !574)
!582 = !DILocalVariable(name: "seed", arg: 2, scope: !574, file: !34, line: 12, type: !239)
!583 = !DILocation(line: 14, scope: !574)
!584 = !DILocalVariable(name: "return_value", scope: !585, file: !34, line: 10, type: !15, align: 16)
!585 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!586 = !DILocation(line: 10, scope: !585, inlinedAt: !583)
!587 = !DILocation(line: 371, scope: !588, inlinedAt: !589)
!588 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!589 = !DILocation(line: 11, scope: !585, inlinedAt: !583)
!590 = !DILocation(line: 12, scope: !585, inlinedAt: !583)
!591 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg128Random.next_bytes", scope: !34, file: !34, line: 20, type: !575, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!592 = !DILocation(line: 21, scope: !591)
!593 = !DILocalVariable(name: "self", arg: 1, scope: !591, file: !34, line: 20, type: !577)
!594 = !DILocation(line: 20, scope: !591)
!595 = !DILocalVariable(name: "bytes", arg: 2, scope: !591, file: !34, line: 20, type: !239)
!596 = !DILocation(line: 18, scope: !597)
!597 = distinct !DILexicalBlock(scope: !591, file: !34, line: 21, column: 1)
!598 = !DILocalVariable(name: "len", scope: !599, file: !34, line: 146, type: !244, align: 8)
!599 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!600 = !DILocation(line: 146, scope: !599, inlinedAt: !601)
!601 = !DILocation(line: 22, scope: !591)
!602 = !DILocation(line: 148, scope: !599, inlinedAt: !601)
!603 = !DILocation(line: 148, scope: !604, inlinedAt: !601)
!604 = distinct !DILexicalBlock(scope: !599, file: !2, line: 148, column: 2)
!605 = !DILocalVariable(name: "value", scope: !606, file: !34, line: 150, type: !6, align: 8)
!606 = distinct !DILexicalBlock(scope: !604, file: !2, line: 149, column: 2)
!607 = !DILocation(line: 150, scope: !606, inlinedAt: !601)
!608 = !DILocation(line: 22, scope: !606, inlinedAt: !601)
!609 = !DILocation(line: 151, scope: !606, inlinedAt: !601)
!610 = !DILocation(line: 153, scope: !611, inlinedAt: !601)
!611 = distinct !DILexicalBlock(scope: !606, file: !2, line: 152, column: 3)
!612 = !DILocation(line: 154, scope: !611, inlinedAt: !601)
!613 = !DILocation(line: 156, scope: !606, inlinedAt: !601)
!614 = !DILocation(line: 157, scope: !606, inlinedAt: !601)
!615 = !DILocation(line: 158, scope: !606, inlinedAt: !601)
!616 = !DILocation(line: 164, scope: !617, inlinedAt: !618)
!617 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!618 = !DILocation(line: 160, scope: !599, inlinedAt: !601)
!619 = !DILocation(line: 166, scope: !617, inlinedAt: !618)
!620 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg128Random.next_long", scope: !34, file: !34, line: 25, type: !621, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!621 = !DISubroutineType(types: !622)
!622 = !{!6, !577}
!623 = !DILocation(line: 26, scope: !620)
!624 = !DILocalVariable(name: "self", arg: 1, scope: !620, file: !34, line: 25, type: !577)
!625 = !DILocation(line: 25, scope: !620)
!626 = !DILocalVariable(name: "s", scope: !620, file: !34, line: 27, type: !264, align: 8)
!627 = !DILocation(line: 27, scope: !620)
!628 = !DILocalVariable(name: "result", scope: !620, file: !34, line: 28, type: !6, align: 8)
!629 = !DILocation(line: 28, scope: !620)
!630 = !DILocation(line: 29, scope: !620)
!631 = !DILocation(line: 30, scope: !620)
!632 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg128Random.next_int128", scope: !34, file: !34, line: 33, type: !633, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!633 = !DISubroutineType(types: !634)
!634 = !{!15, !577}
!635 = !DILocation(line: 33, scope: !632)
!636 = !DILocalVariable(name: "self", arg: 1, scope: !632, file: !34, line: 33, type: !577)
!637 = !DILocation(line: 33, scope: !638, inlinedAt: !635)
!638 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!639 = !DILocation(line: 138, scope: !638, inlinedAt: !635)
!640 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg128Random.next_int", scope: !34, file: !34, line: 34, type: !641, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!641 = !DISubroutineType(types: !642)
!642 = !{!20, !577}
!643 = !DILocation(line: 34, scope: !640)
!644 = !DILocalVariable(name: "self", arg: 1, scope: !640, file: !34, line: 34, type: !577)
!645 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg128Random.next_short", scope: !34, file: !34, line: 35, type: !646, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!646 = !DISubroutineType(types: !647)
!647 = !{!23, !577}
!648 = !DILocation(line: 35, scope: !645)
!649 = !DILocalVariable(name: "self", arg: 1, scope: !645, file: !34, line: 35, type: !577)
!650 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg128Random.next_byte", scope: !34, file: !34, line: 36, type: !651, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!651 = !DISubroutineType(types: !652)
!652 = !{!52, !577}
!653 = !DILocation(line: 36, scope: !650)
!654 = !DILocalVariable(name: "self", arg: 1, scope: !650, file: !34, line: 36, type: !577)
!655 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg64Random.set_seed", scope: !34, file: !34, line: 45, type: !656, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!656 = !DISubroutineType(types: !657)
!657 = !{null, !658, !239}
!658 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg64Random*", baseType: !659, size: 64, align: 64, dwarfAddressSpace: 0)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg64Random", scope: !34, file: !34, line: 43, baseType: !6, align: 8)
!660 = !DILocation(line: 46, scope: !655)
!661 = !DILocalVariable(name: "self", arg: 1, scope: !655, file: !34, line: 45, type: !658)
!662 = !DILocation(line: 45, scope: !655)
!663 = !DILocalVariable(name: "seed", arg: 2, scope: !655, file: !34, line: 45, type: !239)
!664 = !DILocation(line: 47, scope: !655)
!665 = !DILocalVariable(name: "return_value", scope: !666, file: !34, line: 10, type: !6, align: 8)
!666 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!667 = !DILocation(line: 10, scope: !666, inlinedAt: !664)
!668 = !DILocation(line: 371, scope: !669, inlinedAt: !670)
!669 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!670 = !DILocation(line: 11, scope: !666, inlinedAt: !664)
!671 = !DILocation(line: 12, scope: !666, inlinedAt: !664)
!672 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg64Random.next_bytes", scope: !34, file: !34, line: 53, type: !656, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!673 = !DILocation(line: 54, scope: !672)
!674 = !DILocalVariable(name: "self", arg: 1, scope: !672, file: !34, line: 53, type: !658)
!675 = !DILocation(line: 53, scope: !672)
!676 = !DILocalVariable(name: "bytes", arg: 2, scope: !672, file: !34, line: 53, type: !239)
!677 = !DILocation(line: 51, scope: !678)
!678 = distinct !DILexicalBlock(scope: !672, file: !34, line: 54, column: 1)
!679 = !DILocalVariable(name: "len", scope: !680, file: !34, line: 146, type: !244, align: 8)
!680 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!681 = !DILocation(line: 146, scope: !680, inlinedAt: !682)
!682 = !DILocation(line: 55, scope: !672)
!683 = !DILocation(line: 148, scope: !680, inlinedAt: !682)
!684 = !DILocation(line: 148, scope: !685, inlinedAt: !682)
!685 = distinct !DILexicalBlock(scope: !680, file: !2, line: 148, column: 2)
!686 = !DILocalVariable(name: "value", scope: !687, file: !34, line: 150, type: !20, align: 4)
!687 = distinct !DILexicalBlock(scope: !685, file: !2, line: 149, column: 2)
!688 = !DILocation(line: 150, scope: !687, inlinedAt: !682)
!689 = !DILocation(line: 55, scope: !687, inlinedAt: !682)
!690 = !DILocation(line: 151, scope: !687, inlinedAt: !682)
!691 = !DILocation(line: 153, scope: !692, inlinedAt: !682)
!692 = distinct !DILexicalBlock(scope: !687, file: !2, line: 152, column: 3)
!693 = !DILocation(line: 154, scope: !692, inlinedAt: !682)
!694 = !DILocation(line: 156, scope: !687, inlinedAt: !682)
!695 = !DILocation(line: 157, scope: !687, inlinedAt: !682)
!696 = !DILocation(line: 158, scope: !687, inlinedAt: !682)
!697 = !DILocation(line: 164, scope: !698, inlinedAt: !699)
!698 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!699 = !DILocation(line: 160, scope: !680, inlinedAt: !682)
!700 = !DILocation(line: 166, scope: !698, inlinedAt: !699)
!701 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg64Random.next_int", scope: !34, file: !34, line: 58, type: !702, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!702 = !DISubroutineType(types: !703)
!703 = !{!20, !658}
!704 = !DILocation(line: 59, scope: !701)
!705 = !DILocalVariable(name: "self", arg: 1, scope: !701, file: !34, line: 58, type: !658)
!706 = !DILocation(line: 58, scope: !701)
!707 = !DILocalVariable(name: "s", scope: !701, file: !34, line: 60, type: !344, align: 8)
!708 = !DILocation(line: 60, scope: !701)
!709 = !DILocalVariable(name: "result", scope: !701, file: !34, line: 61, type: !20, align: 4)
!710 = !DILocation(line: 61, scope: !701)
!711 = !DILocation(line: 62, scope: !701)
!712 = !DILocation(line: 63, scope: !701)
!713 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg64Random.next_int128", scope: !34, file: !34, line: 66, type: !714, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!714 = !DISubroutineType(types: !715)
!715 = !{!15, !658}
!716 = !DILocation(line: 66, scope: !713)
!717 = !DILocalVariable(name: "self", arg: 1, scope: !713, file: !34, line: 66, type: !658)
!718 = !DILocation(line: 66, scope: !719, inlinedAt: !716)
!719 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!720 = !DILocation(line: 138, scope: !719, inlinedAt: !716)
!721 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg64Random.next_long", scope: !34, file: !34, line: 67, type: !722, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!722 = !DISubroutineType(types: !723)
!723 = !{!6, !658}
!724 = !DILocation(line: 67, scope: !721)
!725 = !DILocalVariable(name: "self", arg: 1, scope: !721, file: !34, line: 67, type: !658)
!726 = !DILocation(line: 67, scope: !727, inlinedAt: !724)
!727 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!728 = !DILocation(line: 139, scope: !727, inlinedAt: !724)
!729 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg64Random.next_short", scope: !34, file: !34, line: 68, type: !730, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!730 = !DISubroutineType(types: !731)
!731 = !{!23, !658}
!732 = !DILocation(line: 68, scope: !729)
!733 = !DILocalVariable(name: "self", arg: 1, scope: !729, file: !34, line: 68, type: !658)
!734 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg64Random.next_byte", scope: !34, file: !34, line: 69, type: !735, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!735 = !DISubroutineType(types: !736)
!736 = !{!52, !658}
!737 = !DILocation(line: 69, scope: !734)
!738 = !DILocalVariable(name: "self", arg: 1, scope: !734, file: !34, line: 69, type: !658)
!739 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg32Random.set_seed", scope: !34, file: !34, line: 76, type: !740, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!740 = !DISubroutineType(types: !741)
!741 = !{null, !742, !239}
!742 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg32Random*", baseType: !743, size: 64, align: 64, dwarfAddressSpace: 0)
!743 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg32Random", scope: !34, file: !34, line: 74, baseType: !20, align: 4)
!744 = !DILocation(line: 77, scope: !739)
!745 = !DILocalVariable(name: "self", arg: 1, scope: !739, file: !34, line: 76, type: !742)
!746 = !DILocation(line: 76, scope: !739)
!747 = !DILocalVariable(name: "seed", arg: 2, scope: !739, file: !34, line: 76, type: !239)
!748 = !DILocation(line: 78, scope: !739)
!749 = !DILocalVariable(name: "return_value", scope: !750, file: !34, line: 10, type: !20, align: 4)
!750 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!751 = !DILocation(line: 10, scope: !750, inlinedAt: !748)
!752 = !DILocation(line: 371, scope: !753, inlinedAt: !754)
!753 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!754 = !DILocation(line: 11, scope: !750, inlinedAt: !748)
!755 = !DILocation(line: 12, scope: !750, inlinedAt: !748)
!756 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg32Random.next_short", scope: !34, file: !34, line: 81, type: !757, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!757 = !DISubroutineType(types: !758)
!758 = !{!23, !742}
!759 = !DILocation(line: 82, scope: !756)
!760 = !DILocalVariable(name: "self", arg: 1, scope: !756, file: !34, line: 81, type: !742)
!761 = !DILocation(line: 81, scope: !756)
!762 = !DILocalVariable(name: "s", scope: !756, file: !34, line: 83, type: !427, align: 8)
!763 = !DILocation(line: 83, scope: !756)
!764 = !DILocalVariable(name: "result", scope: !756, file: !34, line: 84, type: !23, align: 2)
!765 = !DILocation(line: 84, scope: !756)
!766 = !DILocation(line: 85, scope: !756)
!767 = !DILocation(line: 86, scope: !756)
!768 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg32Random.next_bytes", scope: !34, file: !34, line: 92, type: !740, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!769 = !DILocation(line: 92, scope: !768)
!770 = !DILocalVariable(name: "self", arg: 1, scope: !768, file: !34, line: 92, type: !742)
!771 = !DILocalVariable(name: "bytes", arg: 2, scope: !768, file: !34, line: 92, type: !239)
!772 = !DILocation(line: 90, scope: !773)
!773 = distinct !DILexicalBlock(scope: !768, file: !34, line: 92, column: 65)
!774 = !DILocalVariable(name: "len", scope: !775, file: !34, line: 146, type: !244, align: 8)
!775 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!776 = !DILocation(line: 146, scope: !775, inlinedAt: !769)
!777 = !DILocation(line: 148, scope: !775, inlinedAt: !769)
!778 = !DILocation(line: 148, scope: !779, inlinedAt: !769)
!779 = distinct !DILexicalBlock(scope: !775, file: !2, line: 148, column: 2)
!780 = !DILocalVariable(name: "value", scope: !781, file: !34, line: 150, type: !23, align: 2)
!781 = distinct !DILexicalBlock(scope: !779, file: !2, line: 149, column: 2)
!782 = !DILocation(line: 150, scope: !781, inlinedAt: !769)
!783 = !DILocation(line: 92, scope: !781, inlinedAt: !769)
!784 = !DILocation(line: 151, scope: !781, inlinedAt: !769)
!785 = !DILocation(line: 153, scope: !786, inlinedAt: !769)
!786 = distinct !DILexicalBlock(scope: !781, file: !2, line: 152, column: 3)
!787 = !DILocation(line: 154, scope: !786, inlinedAt: !769)
!788 = !DILocation(line: 156, scope: !781, inlinedAt: !769)
!789 = !DILocation(line: 157, scope: !781, inlinedAt: !769)
!790 = !DILocation(line: 158, scope: !781, inlinedAt: !769)
!791 = !DILocation(line: 164, scope: !792, inlinedAt: !793)
!792 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!793 = !DILocation(line: 160, scope: !775, inlinedAt: !769)
!794 = !DILocation(line: 166, scope: !792, inlinedAt: !793)
!795 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg32Random.next_int128", scope: !34, file: !34, line: 93, type: !796, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!796 = !DISubroutineType(types: !797)
!797 = !{!15, !742}
!798 = !DILocation(line: 93, scope: !795)
!799 = !DILocalVariable(name: "self", arg: 1, scope: !795, file: !34, line: 93, type: !742)
!800 = !DILocation(line: 93, scope: !801, inlinedAt: !798)
!801 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!802 = !DILocation(line: 138, scope: !801, inlinedAt: !798)
!803 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg32Random.next_long", scope: !34, file: !34, line: 94, type: !804, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!804 = !DISubroutineType(types: !805)
!805 = !{!6, !742}
!806 = !DILocation(line: 94, scope: !803)
!807 = !DILocalVariable(name: "self", arg: 1, scope: !803, file: !34, line: 94, type: !742)
!808 = !DILocation(line: 94, scope: !809, inlinedAt: !806)
!809 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!810 = !DILocation(line: 139, scope: !809, inlinedAt: !806)
!811 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg32Random.next_int", scope: !34, file: !34, line: 95, type: !812, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!812 = !DISubroutineType(types: !813)
!813 = !{!20, !742}
!814 = !DILocation(line: 95, scope: !811)
!815 = !DILocalVariable(name: "self", arg: 1, scope: !811, file: !34, line: 95, type: !742)
!816 = !DILocation(line: 95, scope: !817, inlinedAt: !814)
!817 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!818 = !DILocation(line: 140, scope: !817, inlinedAt: !814)
!819 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg32Random.next_byte", scope: !34, file: !34, line: 96, type: !820, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!820 = !DISubroutineType(types: !821)
!821 = !{!52, !742}
!822 = !DILocation(line: 96, scope: !819)
!823 = !DILocalVariable(name: "self", arg: 1, scope: !819, file: !34, line: 96, type: !742)
!824 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg16Random.set_seed", scope: !34, file: !34, line: 102, type: !825, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!825 = !DISubroutineType(types: !826)
!826 = !{null, !827, !239}
!827 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg16Random*", baseType: !828, size: 64, align: 64, dwarfAddressSpace: 0)
!828 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg16Random", scope: !34, file: !34, line: 100, baseType: !23, align: 2)
!829 = !DILocation(line: 103, scope: !824)
!830 = !DILocalVariable(name: "self", arg: 1, scope: !824, file: !34, line: 102, type: !827)
!831 = !DILocation(line: 102, scope: !824)
!832 = !DILocalVariable(name: "seed", arg: 2, scope: !824, file: !34, line: 102, type: !239)
!833 = !DILocation(line: 104, scope: !824)
!834 = !DILocalVariable(name: "return_value", scope: !835, file: !34, line: 10, type: !23, align: 2)
!835 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!836 = !DILocation(line: 10, scope: !835, inlinedAt: !833)
!837 = !DILocation(line: 371, scope: !838, inlinedAt: !839)
!838 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!839 = !DILocation(line: 11, scope: !835, inlinedAt: !833)
!840 = !DILocation(line: 12, scope: !835, inlinedAt: !833)
!841 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg16Random.next_byte", scope: !34, file: !34, line: 107, type: !842, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!842 = !DISubroutineType(types: !843)
!843 = !{!52, !827}
!844 = !DILocation(line: 108, scope: !841)
!845 = !DILocalVariable(name: "self", arg: 1, scope: !841, file: !34, line: 107, type: !827)
!846 = !DILocation(line: 107, scope: !841)
!847 = !DILocalVariable(name: "s", scope: !841, file: !34, line: 109, type: !511, align: 8)
!848 = !DILocation(line: 109, scope: !841)
!849 = !DILocalVariable(name: "result", scope: !841, file: !34, line: 110, type: !52, align: 1)
!850 = !DILocation(line: 110, scope: !841)
!851 = !DILocation(line: 111, scope: !841)
!852 = !DILocation(line: 112, scope: !841)
!853 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg16Random.next_bytes", scope: !34, file: !34, line: 115, type: !825, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!854 = !DILocation(line: 115, scope: !853)
!855 = !DILocalVariable(name: "self", arg: 1, scope: !853, file: !34, line: 115, type: !827)
!856 = !DILocalVariable(name: "bytes", arg: 2, scope: !853, file: !34, line: 115, type: !239)
!857 = !DILocalVariable(name: "len", scope: !858, file: !34, line: 146, type: !244, align: 8)
!858 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!859 = !DILocation(line: 146, scope: !858, inlinedAt: !854)
!860 = !DILocation(line: 148, scope: !858, inlinedAt: !854)
!861 = !DILocation(line: 148, scope: !862, inlinedAt: !854)
!862 = distinct !DILexicalBlock(scope: !858, file: !2, line: 148, column: 2)
!863 = !DILocalVariable(name: "value", scope: !864, file: !34, line: 150, type: !52, align: 1)
!864 = distinct !DILexicalBlock(scope: !862, file: !2, line: 149, column: 2)
!865 = !DILocation(line: 150, scope: !864, inlinedAt: !854)
!866 = !DILocation(line: 115, scope: !864, inlinedAt: !854)
!867 = !DILocation(line: 151, scope: !864, inlinedAt: !854)
!868 = !DILocation(line: 153, scope: !869, inlinedAt: !854)
!869 = distinct !DILexicalBlock(scope: !864, file: !2, line: 152, column: 3)
!870 = !DILocation(line: 154, scope: !869, inlinedAt: !854)
!871 = !DILocation(line: 156, scope: !864, inlinedAt: !854)
!872 = !DILocation(line: 157, scope: !864, inlinedAt: !854)
!873 = !DILocation(line: 158, scope: !864, inlinedAt: !854)
!874 = !DILocation(line: 164, scope: !875, inlinedAt: !876)
!875 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!876 = !DILocation(line: 160, scope: !858, inlinedAt: !854)
!877 = !DILocation(line: 166, scope: !875, inlinedAt: !876)
!878 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg16Random.next_int128", scope: !34, file: !34, line: 116, type: !879, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!879 = !DISubroutineType(types: !880)
!880 = !{!15, !827}
!881 = !DILocation(line: 116, scope: !878)
!882 = !DILocalVariable(name: "self", arg: 1, scope: !878, file: !34, line: 116, type: !827)
!883 = !DILocation(line: 116, scope: !884, inlinedAt: !881)
!884 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!885 = !DILocation(line: 138, scope: !884, inlinedAt: !881)
!886 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg16Random.next_long", scope: !34, file: !34, line: 117, type: !887, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!887 = !DISubroutineType(types: !888)
!888 = !{!6, !827}
!889 = !DILocation(line: 117, scope: !886)
!890 = !DILocalVariable(name: "self", arg: 1, scope: !886, file: !34, line: 117, type: !827)
!891 = !DILocation(line: 117, scope: !892, inlinedAt: !889)
!892 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!893 = !DILocation(line: 139, scope: !892, inlinedAt: !889)
!894 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg16Random.next_int", scope: !34, file: !34, line: 118, type: !895, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!895 = !DISubroutineType(types: !896)
!896 = !{!20, !827}
!897 = !DILocation(line: 118, scope: !894)
!898 = !DILocalVariable(name: "self", arg: 1, scope: !894, file: !34, line: 118, type: !827)
!899 = !DILocation(line: 118, scope: !900, inlinedAt: !897)
!900 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!901 = !DILocation(line: 140, scope: !900, inlinedAt: !897)
!902 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg16Random.next_short", scope: !34, file: !34, line: 119, type: !903, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!903 = !DISubroutineType(types: !904)
!904 = !{!23, !827}
!905 = !DILocation(line: 119, scope: !902)
!906 = !DILocalVariable(name: "self", arg: 1, scope: !902, file: !34, line: 119, type: !827)
!907 = !DILocation(line: 119, scope: !908, inlinedAt: !905)
!908 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!909 = !DILocation(line: 141, scope: !908, inlinedAt: !905)
!910 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws128Random.set_seed", scope: !43, file: !43, line: 17, type: !911, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!911 = !DISubroutineType(types: !912)
!912 = !{null, !913, !239}
!913 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws128Random*", baseType: !914, size: 64, align: 64, dwarfAddressSpace: 0)
!914 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws128Random", scope: !43, file: !43, line: 11, size: 512, align: 128, elements: !915, identifier: "std.math.random.Msws128Random")
!915 = !{!916, !917, !918, !919}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !914, file: !43, line: 13, baseType: !15, size: 128, align: 128)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !914, file: !43, line: 13, baseType: !15, size: 128, align: 128, offset: 128)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !914, file: !43, line: 14, baseType: !15, size: 128, align: 128, offset: 256)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !914, file: !43, line: 14, baseType: !15, size: 128, align: 128, offset: 384)
!920 = !DILocation(line: 18, scope: !910)
!921 = !DILocalVariable(name: "self", arg: 1, scope: !910, file: !43, line: 17, type: !913)
!922 = !DILocation(line: 17, scope: !910)
!923 = !DILocalVariable(name: "input", arg: 2, scope: !910, file: !43, line: 17, type: !239)
!924 = !DILocation(line: 19, scope: !910)
!925 = !DILocalVariable(name: "return_value", scope: !926, file: !43, line: 10, type: !927, align: 16)
!926 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!927 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 512, align: 128, elements: !7)
!928 = !DILocation(line: 10, scope: !926, inlinedAt: !924)
!929 = !DILocation(line: 371, scope: !930, inlinedAt: !931)
!930 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!931 = !DILocation(line: 11, scope: !926, inlinedAt: !924)
!932 = !DILocation(line: 212, scope: !933, inlinedAt: !924)
!933 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!934 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws128Random.next_int128", scope: !43, file: !43, line: 23, type: !935, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!935 = !DISubroutineType(types: !936)
!936 = !{!15, !913}
!937 = !DILocation(line: 24, scope: !934)
!938 = !DILocalVariable(name: "self", arg: 1, scope: !934, file: !43, line: 23, type: !913)
!939 = !DILocation(line: 23, scope: !934)
!940 = !DILocalVariable(name: "s0", scope: !934, file: !43, line: 25, type: !15, align: 16)
!941 = !DILocation(line: 25, scope: !934)
!942 = !DILocation(line: 26, scope: !934)
!943 = !DILocation(line: 27, scope: !934)
!944 = !DILocation(line: 163, scope: !945, inlinedAt: !943)
!945 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!946 = !DILocation(line: 28, scope: !934)
!947 = !DILocation(line: 30, scope: !934)
!948 = !DILocalVariable(name: "s1", scope: !934, file: !43, line: 31, type: !15, align: 16)
!949 = !DILocation(line: 31, scope: !934)
!950 = !DILocation(line: 32, scope: !934)
!951 = !DILocation(line: 163, scope: !952, inlinedAt: !950)
!952 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!953 = !DILocation(line: 33, scope: !934)
!954 = !DILocation(line: 35, scope: !934)
!955 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws128Random.next_bytes", scope: !43, file: !43, line: 41, type: !911, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!956 = !DILocation(line: 41, scope: !955)
!957 = !DILocalVariable(name: "self", arg: 1, scope: !955, file: !43, line: 41, type: !913)
!958 = !DILocalVariable(name: "bytes", arg: 2, scope: !955, file: !43, line: 41, type: !239)
!959 = !DILocation(line: 39, scope: !960)
!960 = distinct !DILexicalBlock(scope: !955, file: !43, line: 41, column: 67)
!961 = !DILocalVariable(name: "len", scope: !962, file: !43, line: 146, type: !244, align: 8)
!962 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!963 = !DILocation(line: 146, scope: !962, inlinedAt: !956)
!964 = !DILocation(line: 148, scope: !962, inlinedAt: !956)
!965 = !DILocation(line: 148, scope: !966, inlinedAt: !956)
!966 = distinct !DILexicalBlock(scope: !962, file: !2, line: 148, column: 2)
!967 = !DILocalVariable(name: "value", scope: !968, file: !43, line: 150, type: !15, align: 16)
!968 = distinct !DILexicalBlock(scope: !966, file: !2, line: 149, column: 2)
!969 = !DILocation(line: 150, scope: !968, inlinedAt: !956)
!970 = !DILocation(line: 41, scope: !968, inlinedAt: !956)
!971 = !DILocation(line: 151, scope: !968, inlinedAt: !956)
!972 = !DILocation(line: 153, scope: !973, inlinedAt: !956)
!973 = distinct !DILexicalBlock(scope: !968, file: !2, line: 152, column: 3)
!974 = !DILocation(line: 154, scope: !973, inlinedAt: !956)
!975 = !DILocation(line: 156, scope: !968, inlinedAt: !956)
!976 = !DILocation(line: 157, scope: !968, inlinedAt: !956)
!977 = !DILocation(line: 158, scope: !968, inlinedAt: !956)
!978 = !DILocation(line: 164, scope: !979, inlinedAt: !980)
!979 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!980 = !DILocation(line: 160, scope: !962, inlinedAt: !956)
!981 = !DILocation(line: 166, scope: !979, inlinedAt: !980)
!982 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws128Random.next_long", scope: !43, file: !43, line: 42, type: !983, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!983 = !DISubroutineType(types: !984)
!984 = !{!6, !913}
!985 = !DILocation(line: 42, scope: !982)
!986 = !DILocalVariable(name: "self", arg: 1, scope: !982, file: !43, line: 42, type: !913)
!987 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws128Random.next_int", scope: !43, file: !43, line: 43, type: !988, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!988 = !DISubroutineType(types: !989)
!989 = !{!20, !913}
!990 = !DILocation(line: 43, scope: !987)
!991 = !DILocalVariable(name: "self", arg: 1, scope: !987, file: !43, line: 43, type: !913)
!992 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws128Random.next_short", scope: !43, file: !43, line: 44, type: !993, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!993 = !DISubroutineType(types: !994)
!994 = !{!23, !913}
!995 = !DILocation(line: 44, scope: !992)
!996 = !DILocalVariable(name: "self", arg: 1, scope: !992, file: !43, line: 44, type: !913)
!997 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws128Random.next_byte", scope: !43, file: !43, line: 45, type: !998, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!998 = !DISubroutineType(types: !999)
!999 = !{!52, !913}
!1000 = !DILocation(line: 45, scope: !997)
!1001 = !DILocalVariable(name: "self", arg: 1, scope: !997, file: !43, line: 45, type: !913)
!1002 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws64Random.set_seed", scope: !43, file: !43, line: 55, type: !1003, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1003 = !DISubroutineType(types: !1004)
!1004 = !{null, !1005, !239}
!1005 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws64Random*", baseType: !1006, size: 64, align: 64, dwarfAddressSpace: 0)
!1006 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws64Random", scope: !43, file: !43, line: 49, size: 256, align: 64, elements: !1007, identifier: "std.math.random.Msws64Random")
!1007 = !{!1008, !1009, !1010, !1011}
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1006, file: !43, line: 51, baseType: !6, size: 64, align: 64)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1006, file: !43, line: 51, baseType: !6, size: 64, align: 64, offset: 64)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1006, file: !43, line: 52, baseType: !6, size: 64, align: 64, offset: 128)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1006, file: !43, line: 52, baseType: !6, size: 64, align: 64, offset: 192)
!1012 = !DILocation(line: 56, scope: !1002)
!1013 = !DILocalVariable(name: "self", arg: 1, scope: !1002, file: !43, line: 55, type: !1005)
!1014 = !DILocation(line: 55, scope: !1002)
!1015 = !DILocalVariable(name: "input", arg: 2, scope: !1002, file: !43, line: 55, type: !239)
!1016 = !DILocation(line: 57, scope: !1002)
!1017 = !DILocalVariable(name: "return_value", scope: !1018, file: !43, line: 10, type: !5, align: 16)
!1018 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1019 = !DILocation(line: 10, scope: !1018, inlinedAt: !1016)
!1020 = !DILocation(line: 371, scope: !1021, inlinedAt: !1022)
!1021 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1022 = !DILocation(line: 11, scope: !1018, inlinedAt: !1016)
!1023 = !DILocation(line: 212, scope: !1024, inlinedAt: !1016)
!1024 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1025 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws64Random.next_long", scope: !43, file: !43, line: 60, type: !1026, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1026 = !DISubroutineType(types: !1027)
!1027 = !{!6, !1005}
!1028 = !DILocation(line: 61, scope: !1025)
!1029 = !DILocalVariable(name: "self", arg: 1, scope: !1025, file: !43, line: 60, type: !1005)
!1030 = !DILocation(line: 60, scope: !1025)
!1031 = !DILocalVariable(name: "s0", scope: !1025, file: !43, line: 62, type: !6, align: 8)
!1032 = !DILocation(line: 62, scope: !1025)
!1033 = !DILocation(line: 63, scope: !1025)
!1034 = !DILocation(line: 64, scope: !1025)
!1035 = !DILocation(line: 147, scope: !1036, inlinedAt: !1034)
!1036 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1037 = !DILocation(line: 65, scope: !1025)
!1038 = !DILocation(line: 67, scope: !1025)
!1039 = !DILocalVariable(name: "s1", scope: !1025, file: !43, line: 68, type: !6, align: 8)
!1040 = !DILocation(line: 68, scope: !1025)
!1041 = !DILocation(line: 69, scope: !1025)
!1042 = !DILocation(line: 147, scope: !1043, inlinedAt: !1041)
!1043 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1044 = !DILocation(line: 70, scope: !1025)
!1045 = !DILocation(line: 72, scope: !1025)
!1046 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws64Random.next_bytes", scope: !43, file: !43, line: 78, type: !1003, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1047 = !DILocation(line: 78, scope: !1046)
!1048 = !DILocalVariable(name: "self", arg: 1, scope: !1046, file: !43, line: 78, type: !1005)
!1049 = !DILocalVariable(name: "bytes", arg: 2, scope: !1046, file: !43, line: 78, type: !239)
!1050 = !DILocation(line: 76, scope: !1051)
!1051 = distinct !DILexicalBlock(scope: !1046, file: !43, line: 78, column: 66)
!1052 = !DILocalVariable(name: "len", scope: !1053, file: !43, line: 146, type: !244, align: 8)
!1053 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1054 = !DILocation(line: 146, scope: !1053, inlinedAt: !1047)
!1055 = !DILocation(line: 148, scope: !1053, inlinedAt: !1047)
!1056 = !DILocation(line: 148, scope: !1057, inlinedAt: !1047)
!1057 = distinct !DILexicalBlock(scope: !1053, file: !2, line: 148, column: 2)
!1058 = !DILocalVariable(name: "value", scope: !1059, file: !43, line: 150, type: !6, align: 8)
!1059 = distinct !DILexicalBlock(scope: !1057, file: !2, line: 149, column: 2)
!1060 = !DILocation(line: 150, scope: !1059, inlinedAt: !1047)
!1061 = !DILocation(line: 78, scope: !1059, inlinedAt: !1047)
!1062 = !DILocation(line: 151, scope: !1059, inlinedAt: !1047)
!1063 = !DILocation(line: 153, scope: !1064, inlinedAt: !1047)
!1064 = distinct !DILexicalBlock(scope: !1059, file: !2, line: 152, column: 3)
!1065 = !DILocation(line: 154, scope: !1064, inlinedAt: !1047)
!1066 = !DILocation(line: 156, scope: !1059, inlinedAt: !1047)
!1067 = !DILocation(line: 157, scope: !1059, inlinedAt: !1047)
!1068 = !DILocation(line: 158, scope: !1059, inlinedAt: !1047)
!1069 = !DILocation(line: 164, scope: !1070, inlinedAt: !1071)
!1070 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1071 = !DILocation(line: 160, scope: !1053, inlinedAt: !1047)
!1072 = !DILocation(line: 166, scope: !1070, inlinedAt: !1071)
!1073 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws64Random.next_int128", scope: !43, file: !43, line: 79, type: !1074, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1074 = !DISubroutineType(types: !1075)
!1075 = !{!15, !1005}
!1076 = !DILocation(line: 79, scope: !1073)
!1077 = !DILocalVariable(name: "self", arg: 1, scope: !1073, file: !43, line: 79, type: !1005)
!1078 = !DILocation(line: 79, scope: !1079, inlinedAt: !1076)
!1079 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1080 = !DILocation(line: 138, scope: !1079, inlinedAt: !1076)
!1081 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws64Random.next_int", scope: !43, file: !43, line: 80, type: !1082, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1082 = !DISubroutineType(types: !1083)
!1083 = !{!20, !1005}
!1084 = !DILocation(line: 80, scope: !1081)
!1085 = !DILocalVariable(name: "self", arg: 1, scope: !1081, file: !43, line: 80, type: !1005)
!1086 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws64Random.next_short", scope: !43, file: !43, line: 81, type: !1087, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1087 = !DISubroutineType(types: !1088)
!1088 = !{!23, !1005}
!1089 = !DILocation(line: 81, scope: !1086)
!1090 = !DILocalVariable(name: "self", arg: 1, scope: !1086, file: !43, line: 81, type: !1005)
!1091 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws64Random.next_byte", scope: !43, file: !43, line: 82, type: !1092, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1092 = !DISubroutineType(types: !1093)
!1093 = !{!52, !1005}
!1094 = !DILocation(line: 82, scope: !1091)
!1095 = !DILocalVariable(name: "self", arg: 1, scope: !1091, file: !43, line: 82, type: !1005)
!1096 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws32Random.set_seed", scope: !43, file: !43, line: 91, type: !1097, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1097 = !DISubroutineType(types: !1098)
!1098 = !{null, !1099, !239}
!1099 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws32Random*", baseType: !1100, size: 64, align: 64, dwarfAddressSpace: 0)
!1100 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws32Random", scope: !43, file: !43, line: 85, size: 128, align: 32, elements: !1101, identifier: "std.math.random.Msws32Random")
!1101 = !{!1102, !1103, !1104, !1105}
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1100, file: !43, line: 87, baseType: !20, size: 32, align: 32)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1100, file: !43, line: 87, baseType: !20, size: 32, align: 32, offset: 32)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1100, file: !43, line: 88, baseType: !20, size: 32, align: 32, offset: 64)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1100, file: !43, line: 88, baseType: !20, size: 32, align: 32, offset: 96)
!1106 = !DILocation(line: 92, scope: !1096)
!1107 = !DILocalVariable(name: "self", arg: 1, scope: !1096, file: !43, line: 91, type: !1099)
!1108 = !DILocation(line: 91, scope: !1096)
!1109 = !DILocalVariable(name: "input", arg: 2, scope: !1096, file: !43, line: 91, type: !239)
!1110 = !DILocation(line: 93, scope: !1096)
!1111 = !DILocalVariable(name: "return_value", scope: !1112, file: !43, line: 10, type: !1113, align: 16)
!1112 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1113 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 128, align: 32, elements: !7)
!1114 = !DILocation(line: 10, scope: !1112, inlinedAt: !1110)
!1115 = !DILocation(line: 371, scope: !1116, inlinedAt: !1117)
!1116 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1117 = !DILocation(line: 11, scope: !1112, inlinedAt: !1110)
!1118 = !DILocation(line: 212, scope: !1119, inlinedAt: !1110)
!1119 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1120 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws32Random.next_int", scope: !43, file: !43, line: 97, type: !1121, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1121 = !DISubroutineType(types: !1122)
!1122 = !{!20, !1099}
!1123 = !DILocation(line: 98, scope: !1120)
!1124 = !DILocalVariable(name: "self", arg: 1, scope: !1120, file: !43, line: 97, type: !1099)
!1125 = !DILocation(line: 97, scope: !1120)
!1126 = !DILocalVariable(name: "s0", scope: !1120, file: !43, line: 99, type: !20, align: 4)
!1127 = !DILocation(line: 99, scope: !1120)
!1128 = !DILocation(line: 100, scope: !1120)
!1129 = !DILocation(line: 101, scope: !1120)
!1130 = !DILocation(line: 99, scope: !1131, inlinedAt: !1129)
!1131 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1132 = !DILocation(line: 102, scope: !1120)
!1133 = !DILocation(line: 104, scope: !1120)
!1134 = !DILocalVariable(name: "s1", scope: !1120, file: !43, line: 105, type: !20, align: 4)
!1135 = !DILocation(line: 105, scope: !1120)
!1136 = !DILocation(line: 106, scope: !1120)
!1137 = !DILocation(line: 99, scope: !1138, inlinedAt: !1136)
!1138 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1139 = !DILocation(line: 107, scope: !1120)
!1140 = !DILocation(line: 109, scope: !1120)
!1141 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws32Random.next_bytes", scope: !43, file: !43, line: 115, type: !1097, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1142 = !DILocation(line: 115, scope: !1141)
!1143 = !DILocalVariable(name: "self", arg: 1, scope: !1141, file: !43, line: 115, type: !1099)
!1144 = !DILocalVariable(name: "bytes", arg: 2, scope: !1141, file: !43, line: 115, type: !239)
!1145 = !DILocation(line: 113, scope: !1146)
!1146 = distinct !DILexicalBlock(scope: !1141, file: !43, line: 115, column: 66)
!1147 = !DILocalVariable(name: "len", scope: !1148, file: !43, line: 146, type: !244, align: 8)
!1148 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1149 = !DILocation(line: 146, scope: !1148, inlinedAt: !1142)
!1150 = !DILocation(line: 148, scope: !1148, inlinedAt: !1142)
!1151 = !DILocation(line: 148, scope: !1152, inlinedAt: !1142)
!1152 = distinct !DILexicalBlock(scope: !1148, file: !2, line: 148, column: 2)
!1153 = !DILocalVariable(name: "value", scope: !1154, file: !43, line: 150, type: !20, align: 4)
!1154 = distinct !DILexicalBlock(scope: !1152, file: !2, line: 149, column: 2)
!1155 = !DILocation(line: 150, scope: !1154, inlinedAt: !1142)
!1156 = !DILocation(line: 115, scope: !1154, inlinedAt: !1142)
!1157 = !DILocation(line: 151, scope: !1154, inlinedAt: !1142)
!1158 = !DILocation(line: 153, scope: !1159, inlinedAt: !1142)
!1159 = distinct !DILexicalBlock(scope: !1154, file: !2, line: 152, column: 3)
!1160 = !DILocation(line: 154, scope: !1159, inlinedAt: !1142)
!1161 = !DILocation(line: 156, scope: !1154, inlinedAt: !1142)
!1162 = !DILocation(line: 157, scope: !1154, inlinedAt: !1142)
!1163 = !DILocation(line: 158, scope: !1154, inlinedAt: !1142)
!1164 = !DILocation(line: 164, scope: !1165, inlinedAt: !1166)
!1165 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1166 = !DILocation(line: 160, scope: !1148, inlinedAt: !1142)
!1167 = !DILocation(line: 166, scope: !1165, inlinedAt: !1166)
!1168 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws32Random.next_int128", scope: !43, file: !43, line: 116, type: !1169, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1169 = !DISubroutineType(types: !1170)
!1170 = !{!15, !1099}
!1171 = !DILocation(line: 116, scope: !1168)
!1172 = !DILocalVariable(name: "self", arg: 1, scope: !1168, file: !43, line: 116, type: !1099)
!1173 = !DILocation(line: 116, scope: !1174, inlinedAt: !1171)
!1174 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1175 = !DILocation(line: 138, scope: !1174, inlinedAt: !1171)
!1176 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws32Random.next_long", scope: !43, file: !43, line: 117, type: !1177, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1177 = !DISubroutineType(types: !1178)
!1178 = !{!6, !1099}
!1179 = !DILocation(line: 117, scope: !1176)
!1180 = !DILocalVariable(name: "self", arg: 1, scope: !1176, file: !43, line: 117, type: !1099)
!1181 = !DILocation(line: 117, scope: !1182, inlinedAt: !1179)
!1182 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1183 = !DILocation(line: 139, scope: !1182, inlinedAt: !1179)
!1184 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws32Random.next_short", scope: !43, file: !43, line: 118, type: !1185, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!23, !1099}
!1187 = !DILocation(line: 118, scope: !1184)
!1188 = !DILocalVariable(name: "self", arg: 1, scope: !1184, file: !43, line: 118, type: !1099)
!1189 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws32Random.next_byte", scope: !43, file: !43, line: 119, type: !1190, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1190 = !DISubroutineType(types: !1191)
!1191 = !{!52, !1099}
!1192 = !DILocation(line: 119, scope: !1189)
!1193 = !DILocalVariable(name: "self", arg: 1, scope: !1189, file: !43, line: 119, type: !1099)
!1194 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws16Random.set_seed", scope: !43, file: !43, line: 129, type: !1195, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1195 = !DISubroutineType(types: !1196)
!1196 = !{null, !1197, !239}
!1197 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws16Random*", baseType: !1198, size: 64, align: 64, dwarfAddressSpace: 0)
!1198 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws16Random", scope: !43, file: !43, line: 123, size: 64, align: 16, elements: !1199, identifier: "std.math.random.Msws16Random")
!1199 = !{!1200, !1201, !1202, !1203}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1198, file: !43, line: 125, baseType: !23, size: 16, align: 16)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1198, file: !43, line: 125, baseType: !23, size: 16, align: 16, offset: 16)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1198, file: !43, line: 126, baseType: !23, size: 16, align: 16, offset: 32)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1198, file: !43, line: 126, baseType: !23, size: 16, align: 16, offset: 48)
!1204 = !DILocation(line: 130, scope: !1194)
!1205 = !DILocalVariable(name: "self", arg: 1, scope: !1194, file: !43, line: 129, type: !1197)
!1206 = !DILocation(line: 129, scope: !1194)
!1207 = !DILocalVariable(name: "input", arg: 2, scope: !1194, file: !43, line: 129, type: !239)
!1208 = !DILocation(line: 131, scope: !1194)
!1209 = !DILocalVariable(name: "return_value", scope: !1210, file: !43, line: 10, type: !1211, align: 2)
!1210 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1211 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 64, align: 16, elements: !7)
!1212 = !DILocation(line: 10, scope: !1210, inlinedAt: !1208)
!1213 = !DILocation(line: 371, scope: !1214, inlinedAt: !1215)
!1214 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1215 = !DILocation(line: 11, scope: !1210, inlinedAt: !1208)
!1216 = !DILocation(line: 212, scope: !1217, inlinedAt: !1208)
!1217 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1218 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws16Random.next_short", scope: !43, file: !43, line: 135, type: !1219, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1219 = !DISubroutineType(types: !1220)
!1220 = !{!23, !1197}
!1221 = !DILocation(line: 136, scope: !1218)
!1222 = !DILocalVariable(name: "self", arg: 1, scope: !1218, file: !43, line: 135, type: !1197)
!1223 = !DILocation(line: 135, scope: !1218)
!1224 = !DILocalVariable(name: "s0", scope: !1218, file: !43, line: 137, type: !23, align: 2)
!1225 = !DILocation(line: 137, scope: !1218)
!1226 = !DILocation(line: 138, scope: !1218)
!1227 = !DILocation(line: 139, scope: !1218)
!1228 = !DILocation(line: 115, scope: !1229, inlinedAt: !1227)
!1229 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1230 = !DILocation(line: 140, scope: !1218)
!1231 = !DILocation(line: 142, scope: !1218)
!1232 = !DILocalVariable(name: "s1", scope: !1218, file: !43, line: 143, type: !23, align: 2)
!1233 = !DILocation(line: 143, scope: !1218)
!1234 = !DILocation(line: 144, scope: !1218)
!1235 = !DILocation(line: 115, scope: !1236, inlinedAt: !1234)
!1236 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1237 = !DILocation(line: 145, scope: !1218)
!1238 = !DILocation(line: 147, scope: !1218)
!1239 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws16Random.next_bytes", scope: !43, file: !43, line: 153, type: !1195, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1240 = !DILocation(line: 153, scope: !1239)
!1241 = !DILocalVariable(name: "self", arg: 1, scope: !1239, file: !43, line: 153, type: !1197)
!1242 = !DILocalVariable(name: "bytes", arg: 2, scope: !1239, file: !43, line: 153, type: !239)
!1243 = !DILocation(line: 151, scope: !1244)
!1244 = distinct !DILexicalBlock(scope: !1239, file: !43, line: 153, column: 66)
!1245 = !DILocalVariable(name: "len", scope: !1246, file: !43, line: 146, type: !244, align: 8)
!1246 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1247 = !DILocation(line: 146, scope: !1246, inlinedAt: !1240)
!1248 = !DILocation(line: 148, scope: !1246, inlinedAt: !1240)
!1249 = !DILocation(line: 148, scope: !1250, inlinedAt: !1240)
!1250 = distinct !DILexicalBlock(scope: !1246, file: !2, line: 148, column: 2)
!1251 = !DILocalVariable(name: "value", scope: !1252, file: !43, line: 150, type: !23, align: 2)
!1252 = distinct !DILexicalBlock(scope: !1250, file: !2, line: 149, column: 2)
!1253 = !DILocation(line: 150, scope: !1252, inlinedAt: !1240)
!1254 = !DILocation(line: 153, scope: !1252, inlinedAt: !1240)
!1255 = !DILocation(line: 151, scope: !1252, inlinedAt: !1240)
!1256 = !DILocation(line: 153, scope: !1257, inlinedAt: !1240)
!1257 = distinct !DILexicalBlock(scope: !1252, file: !2, line: 152, column: 3)
!1258 = !DILocation(line: 154, scope: !1257, inlinedAt: !1240)
!1259 = !DILocation(line: 156, scope: !1252, inlinedAt: !1240)
!1260 = !DILocation(line: 157, scope: !1252, inlinedAt: !1240)
!1261 = !DILocation(line: 158, scope: !1252, inlinedAt: !1240)
!1262 = !DILocation(line: 164, scope: !1263, inlinedAt: !1264)
!1263 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1264 = !DILocation(line: 160, scope: !1246, inlinedAt: !1240)
!1265 = !DILocation(line: 166, scope: !1263, inlinedAt: !1264)
!1266 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws16Random.next_int128", scope: !43, file: !43, line: 154, type: !1267, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1267 = !DISubroutineType(types: !1268)
!1268 = !{!15, !1197}
!1269 = !DILocation(line: 154, scope: !1266)
!1270 = !DILocalVariable(name: "self", arg: 1, scope: !1266, file: !43, line: 154, type: !1197)
!1271 = !DILocation(line: 154, scope: !1272, inlinedAt: !1269)
!1272 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1273 = !DILocation(line: 138, scope: !1272, inlinedAt: !1269)
!1274 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws16Random.next_long", scope: !43, file: !43, line: 155, type: !1275, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1275 = !DISubroutineType(types: !1276)
!1276 = !{!6, !1197}
!1277 = !DILocation(line: 155, scope: !1274)
!1278 = !DILocalVariable(name: "self", arg: 1, scope: !1274, file: !43, line: 155, type: !1197)
!1279 = !DILocation(line: 155, scope: !1280, inlinedAt: !1277)
!1280 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1281 = !DILocation(line: 139, scope: !1280, inlinedAt: !1277)
!1282 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws16Random.next_int", scope: !43, file: !43, line: 156, type: !1283, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1283 = !DISubroutineType(types: !1284)
!1284 = !{!20, !1197}
!1285 = !DILocation(line: 156, scope: !1282)
!1286 = !DILocalVariable(name: "self", arg: 1, scope: !1282, file: !43, line: 156, type: !1197)
!1287 = !DILocation(line: 156, scope: !1288, inlinedAt: !1285)
!1288 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1289 = !DILocation(line: 140, scope: !1288, inlinedAt: !1285)
!1290 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws16Random.next_byte", scope: !43, file: !43, line: 157, type: !1291, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1291 = !DISubroutineType(types: !1292)
!1292 = !{!52, !1197}
!1293 = !DILocation(line: 157, scope: !1290)
!1294 = !DILocalVariable(name: "self", arg: 1, scope: !1290, file: !43, line: 157, type: !1197)
!1295 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws8Random.set_seed", scope: !43, file: !43, line: 166, type: !1296, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1296 = !DISubroutineType(types: !1297)
!1297 = !{null, !1298, !239}
!1298 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws8Random*", baseType: !1299, size: 64, align: 64, dwarfAddressSpace: 0)
!1299 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws8Random", scope: !43, file: !43, line: 160, size: 32, align: 8, elements: !1300, identifier: "std.math.random.Msws8Random")
!1300 = !{!1301, !1302, !1303, !1304}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1299, file: !43, line: 162, baseType: !52, size: 8, align: 8)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1299, file: !43, line: 162, baseType: !52, size: 8, align: 8, offset: 8)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1299, file: !43, line: 163, baseType: !52, size: 8, align: 8, offset: 16)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1299, file: !43, line: 163, baseType: !52, size: 8, align: 8, offset: 24)
!1305 = !DILocation(line: 167, scope: !1295)
!1306 = !DILocalVariable(name: "self", arg: 1, scope: !1295, file: !43, line: 166, type: !1298)
!1307 = !DILocation(line: 166, scope: !1295)
!1308 = !DILocalVariable(name: "input", arg: 2, scope: !1295, file: !43, line: 166, type: !239)
!1309 = !DILocation(line: 168, scope: !1295)
!1310 = !DILocalVariable(name: "return_value", scope: !1311, file: !43, line: 10, type: !1312, align: 1)
!1311 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1312 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 32, align: 8, elements: !7)
!1313 = !DILocation(line: 10, scope: !1311, inlinedAt: !1309)
!1314 = !DILocation(line: 371, scope: !1315, inlinedAt: !1316)
!1315 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1316 = !DILocation(line: 11, scope: !1311, inlinedAt: !1309)
!1317 = !DILocation(line: 212, scope: !1318, inlinedAt: !1309)
!1318 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1319 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws8Random.next_byte", scope: !43, file: !43, line: 171, type: !1320, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1320 = !DISubroutineType(types: !1321)
!1321 = !{!52, !1298}
!1322 = !DILocation(line: 172, scope: !1319)
!1323 = !DILocalVariable(name: "self", arg: 1, scope: !1319, file: !43, line: 171, type: !1298)
!1324 = !DILocation(line: 171, scope: !1319)
!1325 = !DILocalVariable(name: "s0", scope: !1319, file: !43, line: 173, type: !52, align: 1)
!1326 = !DILocation(line: 173, scope: !1319)
!1327 = !DILocation(line: 174, scope: !1319)
!1328 = !DILocation(line: 175, scope: !1319)
!1329 = !DILocation(line: 131, scope: !1330, inlinedAt: !1328)
!1330 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1331 = !DILocation(line: 176, scope: !1319)
!1332 = !DILocation(line: 178, scope: !1319)
!1333 = !DILocalVariable(name: "s1", scope: !1319, file: !43, line: 179, type: !52, align: 1)
!1334 = !DILocation(line: 179, scope: !1319)
!1335 = !DILocation(line: 180, scope: !1319)
!1336 = !DILocation(line: 131, scope: !1337, inlinedAt: !1335)
!1337 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1338 = !DILocation(line: 181, scope: !1319)
!1339 = !DILocation(line: 183, scope: !1319)
!1340 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws8Random.next_bytes", scope: !43, file: !43, line: 186, type: !1296, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1341 = !DILocation(line: 186, scope: !1340)
!1342 = !DILocalVariable(name: "self", arg: 1, scope: !1340, file: !43, line: 186, type: !1298)
!1343 = !DILocalVariable(name: "bytes", arg: 2, scope: !1340, file: !43, line: 186, type: !239)
!1344 = !DILocalVariable(name: "len", scope: !1345, file: !43, line: 146, type: !244, align: 8)
!1345 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1346 = !DILocation(line: 146, scope: !1345, inlinedAt: !1341)
!1347 = !DILocation(line: 148, scope: !1345, inlinedAt: !1341)
!1348 = !DILocation(line: 148, scope: !1349, inlinedAt: !1341)
!1349 = distinct !DILexicalBlock(scope: !1345, file: !2, line: 148, column: 2)
!1350 = !DILocalVariable(name: "value", scope: !1351, file: !43, line: 150, type: !52, align: 1)
!1351 = distinct !DILexicalBlock(scope: !1349, file: !2, line: 149, column: 2)
!1352 = !DILocation(line: 150, scope: !1351, inlinedAt: !1341)
!1353 = !DILocation(line: 186, scope: !1351, inlinedAt: !1341)
!1354 = !DILocation(line: 151, scope: !1351, inlinedAt: !1341)
!1355 = !DILocation(line: 153, scope: !1356, inlinedAt: !1341)
!1356 = distinct !DILexicalBlock(scope: !1351, file: !2, line: 152, column: 3)
!1357 = !DILocation(line: 154, scope: !1356, inlinedAt: !1341)
!1358 = !DILocation(line: 156, scope: !1351, inlinedAt: !1341)
!1359 = !DILocation(line: 157, scope: !1351, inlinedAt: !1341)
!1360 = !DILocation(line: 158, scope: !1351, inlinedAt: !1341)
!1361 = !DILocation(line: 164, scope: !1362, inlinedAt: !1363)
!1362 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1363 = !DILocation(line: 160, scope: !1345, inlinedAt: !1341)
!1364 = !DILocation(line: 166, scope: !1362, inlinedAt: !1363)
!1365 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws8Random.next_int128", scope: !43, file: !43, line: 187, type: !1366, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1366 = !DISubroutineType(types: !1367)
!1367 = !{!15, !1298}
!1368 = !DILocation(line: 187, scope: !1365)
!1369 = !DILocalVariable(name: "self", arg: 1, scope: !1365, file: !43, line: 187, type: !1298)
!1370 = !DILocation(line: 187, scope: !1371, inlinedAt: !1368)
!1371 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1372 = !DILocation(line: 138, scope: !1371, inlinedAt: !1368)
!1373 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws8Random.next_long", scope: !43, file: !43, line: 188, type: !1374, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1374 = !DISubroutineType(types: !1375)
!1375 = !{!6, !1298}
!1376 = !DILocation(line: 188, scope: !1373)
!1377 = !DILocalVariable(name: "self", arg: 1, scope: !1373, file: !43, line: 188, type: !1298)
!1378 = !DILocation(line: 188, scope: !1379, inlinedAt: !1376)
!1379 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1380 = !DILocation(line: 139, scope: !1379, inlinedAt: !1376)
!1381 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws8Random.next_int", scope: !43, file: !43, line: 189, type: !1382, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1382 = !DISubroutineType(types: !1383)
!1383 = !{!20, !1298}
!1384 = !DILocation(line: 189, scope: !1381)
!1385 = !DILocalVariable(name: "self", arg: 1, scope: !1381, file: !43, line: 189, type: !1298)
!1386 = !DILocation(line: 189, scope: !1387, inlinedAt: !1384)
!1387 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1388 = !DILocation(line: 140, scope: !1387, inlinedAt: !1384)
!1389 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws8Random.next_short", scope: !43, file: !43, line: 190, type: !1390, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1390 = !DISubroutineType(types: !1391)
!1391 = !{!23, !1298}
!1392 = !DILocation(line: 190, scope: !1389)
!1393 = !DILocalVariable(name: "self", arg: 1, scope: !1389, file: !43, line: 190, type: !1298)
!1394 = !DILocation(line: 190, scope: !1395, inlinedAt: !1392)
!1395 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1396 = !DILocation(line: 141, scope: !1395, inlinedAt: !1392)
!1397 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg128Random.set_seed", scope: !55, file: !55, line: 20, type: !1398, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1398 = !DISubroutineType(types: !1399)
!1399 = !{null, !1400, !239}
!1400 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg128Random*", baseType: !1401, size: 64, align: 64, dwarfAddressSpace: 0)
!1401 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg128Random", scope: !55, file: !55, line: 18, baseType: !15, align: 16)
!1402 = !DILocation(line: 21, scope: !1397)
!1403 = !DILocalVariable(name: "self", arg: 1, scope: !1397, file: !55, line: 20, type: !1400)
!1404 = !DILocation(line: 20, scope: !1397)
!1405 = !DILocalVariable(name: "input", arg: 2, scope: !1397, file: !55, line: 20, type: !239)
!1406 = !DILocation(line: 22, scope: !1397)
!1407 = !DILocalVariable(name: "return_value", scope: !1408, file: !55, line: 10, type: !15, align: 16)
!1408 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1409 = !DILocation(line: 10, scope: !1408, inlinedAt: !1406)
!1410 = !DILocation(line: 371, scope: !1411, inlinedAt: !1412)
!1411 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1412 = !DILocation(line: 11, scope: !1408, inlinedAt: !1406)
!1413 = !DILocation(line: 12, scope: !1408, inlinedAt: !1406)
!1414 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg128Random.next_long", scope: !55, file: !55, line: 26, type: !1415, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1415 = !DISubroutineType(types: !1416)
!1416 = !{!6, !1400}
!1417 = !DILocation(line: 27, scope: !1414)
!1418 = !DILocalVariable(name: "self", arg: 1, scope: !1414, file: !55, line: 26, type: !1400)
!1419 = !DILocation(line: 26, scope: !1414)
!1420 = !DILocalVariable(name: "s", scope: !1414, file: !55, line: 29, type: !264, align: 8)
!1421 = !DILocation(line: 29, scope: !1414)
!1422 = !DILocalVariable(name: "xor", scope: !1414, file: !55, line: 30, type: !15, align: 16)
!1423 = !DILocation(line: 30, scope: !1414)
!1424 = !DILocalVariable(name: "rot", scope: !1414, file: !55, line: 31, type: !52, align: 1)
!1425 = !DILocation(line: 31, scope: !1414)
!1426 = !DILocation(line: 32, scope: !1414)
!1427 = !DILocation(line: 33, scope: !1414)
!1428 = !DILocation(line: 147, scope: !1429, inlinedAt: !1427)
!1429 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1430 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg128Random.next_bytes", scope: !55, file: !55, line: 39, type: !1398, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1431 = !DILocation(line: 39, scope: !1430)
!1432 = !DILocalVariable(name: "self", arg: 1, scope: !1430, file: !55, line: 39, type: !1400)
!1433 = !DILocalVariable(name: "bytes", arg: 2, scope: !1430, file: !55, line: 39, type: !239)
!1434 = !DILocation(line: 37, scope: !1435)
!1435 = distinct !DILexicalBlock(scope: !1430, file: !55, line: 39, column: 66)
!1436 = !DILocalVariable(name: "len", scope: !1437, file: !55, line: 146, type: !244, align: 8)
!1437 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1438 = !DILocation(line: 146, scope: !1437, inlinedAt: !1431)
!1439 = !DILocation(line: 148, scope: !1437, inlinedAt: !1431)
!1440 = !DILocation(line: 148, scope: !1441, inlinedAt: !1431)
!1441 = distinct !DILexicalBlock(scope: !1437, file: !2, line: 148, column: 2)
!1442 = !DILocalVariable(name: "value", scope: !1443, file: !55, line: 150, type: !6, align: 8)
!1443 = distinct !DILexicalBlock(scope: !1441, file: !2, line: 149, column: 2)
!1444 = !DILocation(line: 150, scope: !1443, inlinedAt: !1431)
!1445 = !DILocation(line: 39, scope: !1443, inlinedAt: !1431)
!1446 = !DILocation(line: 151, scope: !1443, inlinedAt: !1431)
!1447 = !DILocation(line: 153, scope: !1448, inlinedAt: !1431)
!1448 = distinct !DILexicalBlock(scope: !1443, file: !2, line: 152, column: 3)
!1449 = !DILocation(line: 154, scope: !1448, inlinedAt: !1431)
!1450 = !DILocation(line: 156, scope: !1443, inlinedAt: !1431)
!1451 = !DILocation(line: 157, scope: !1443, inlinedAt: !1431)
!1452 = !DILocation(line: 158, scope: !1443, inlinedAt: !1431)
!1453 = !DILocation(line: 164, scope: !1454, inlinedAt: !1455)
!1454 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1455 = !DILocation(line: 160, scope: !1437, inlinedAt: !1431)
!1456 = !DILocation(line: 166, scope: !1454, inlinedAt: !1455)
!1457 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg128Random.next_int128", scope: !55, file: !55, line: 40, type: !1458, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1458 = !DISubroutineType(types: !1459)
!1459 = !{!15, !1400}
!1460 = !DILocation(line: 40, scope: !1457)
!1461 = !DILocalVariable(name: "self", arg: 1, scope: !1457, file: !55, line: 40, type: !1400)
!1462 = !DILocation(line: 40, scope: !1463, inlinedAt: !1460)
!1463 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1464 = !DILocation(line: 138, scope: !1463, inlinedAt: !1460)
!1465 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg128Random.next_int", scope: !55, file: !55, line: 41, type: !1466, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1466 = !DISubroutineType(types: !1467)
!1467 = !{!20, !1400}
!1468 = !DILocation(line: 41, scope: !1465)
!1469 = !DILocalVariable(name: "self", arg: 1, scope: !1465, file: !55, line: 41, type: !1400)
!1470 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg128Random.next_short", scope: !55, file: !55, line: 42, type: !1471, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1471 = !DISubroutineType(types: !1472)
!1472 = !{!23, !1400}
!1473 = !DILocation(line: 42, scope: !1470)
!1474 = !DILocalVariable(name: "self", arg: 1, scope: !1470, file: !55, line: 42, type: !1400)
!1475 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg128Random.next_byte", scope: !55, file: !55, line: 43, type: !1476, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1476 = !DISubroutineType(types: !1477)
!1477 = !{!52, !1400}
!1478 = !DILocation(line: 43, scope: !1475)
!1479 = !DILocalVariable(name: "self", arg: 1, scope: !1475, file: !55, line: 43, type: !1400)
!1480 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg64Random.set_seed", scope: !55, file: !55, line: 49, type: !1481, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1481 = !DISubroutineType(types: !1482)
!1482 = !{null, !1483, !239}
!1483 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg64Random*", baseType: !1484, size: 64, align: 64, dwarfAddressSpace: 0)
!1484 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg64Random", scope: !55, file: !55, line: 47, baseType: !6, align: 8)
!1485 = !DILocation(line: 50, scope: !1480)
!1486 = !DILocalVariable(name: "self", arg: 1, scope: !1480, file: !55, line: 49, type: !1483)
!1487 = !DILocation(line: 49, scope: !1480)
!1488 = !DILocalVariable(name: "input", arg: 2, scope: !1480, file: !55, line: 49, type: !239)
!1489 = !DILocation(line: 51, scope: !1480)
!1490 = !DILocalVariable(name: "return_value", scope: !1491, file: !55, line: 10, type: !6, align: 8)
!1491 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1492 = !DILocation(line: 10, scope: !1491, inlinedAt: !1489)
!1493 = !DILocation(line: 371, scope: !1494, inlinedAt: !1495)
!1494 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1495 = !DILocation(line: 11, scope: !1491, inlinedAt: !1489)
!1496 = !DILocation(line: 12, scope: !1491, inlinedAt: !1489)
!1497 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg64Random.next_int", scope: !55, file: !55, line: 54, type: !1498, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1498 = !DISubroutineType(types: !1499)
!1499 = !{!20, !1483}
!1500 = !DILocation(line: 55, scope: !1497)
!1501 = !DILocalVariable(name: "self", arg: 1, scope: !1497, file: !55, line: 54, type: !1483)
!1502 = !DILocation(line: 54, scope: !1497)
!1503 = !DILocalVariable(name: "s", scope: !1497, file: !55, line: 57, type: !344, align: 8)
!1504 = !DILocation(line: 57, scope: !1497)
!1505 = !DILocalVariable(name: "xor", scope: !1497, file: !55, line: 58, type: !6, align: 8)
!1506 = !DILocation(line: 58, scope: !1497)
!1507 = !DILocalVariable(name: "rot", scope: !1497, file: !55, line: 59, type: !52, align: 1)
!1508 = !DILocation(line: 59, scope: !1497)
!1509 = !DILocation(line: 60, scope: !1497)
!1510 = !DILocation(line: 61, scope: !1497)
!1511 = !DILocation(line: 99, scope: !1512, inlinedAt: !1510)
!1512 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1513 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg64Random.next_bytes", scope: !55, file: !55, line: 67, type: !1481, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1514 = !DILocation(line: 67, scope: !1513)
!1515 = !DILocalVariable(name: "self", arg: 1, scope: !1513, file: !55, line: 67, type: !1483)
!1516 = !DILocalVariable(name: "bytes", arg: 2, scope: !1513, file: !55, line: 67, type: !239)
!1517 = !DILocation(line: 65, scope: !1518)
!1518 = distinct !DILexicalBlock(scope: !1513, file: !55, line: 67, column: 65)
!1519 = !DILocalVariable(name: "len", scope: !1520, file: !55, line: 146, type: !244, align: 8)
!1520 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1521 = !DILocation(line: 146, scope: !1520, inlinedAt: !1514)
!1522 = !DILocation(line: 148, scope: !1520, inlinedAt: !1514)
!1523 = !DILocation(line: 148, scope: !1524, inlinedAt: !1514)
!1524 = distinct !DILexicalBlock(scope: !1520, file: !2, line: 148, column: 2)
!1525 = !DILocalVariable(name: "value", scope: !1526, file: !55, line: 150, type: !20, align: 4)
!1526 = distinct !DILexicalBlock(scope: !1524, file: !2, line: 149, column: 2)
!1527 = !DILocation(line: 150, scope: !1526, inlinedAt: !1514)
!1528 = !DILocation(line: 67, scope: !1526, inlinedAt: !1514)
!1529 = !DILocation(line: 151, scope: !1526, inlinedAt: !1514)
!1530 = !DILocation(line: 153, scope: !1531, inlinedAt: !1514)
!1531 = distinct !DILexicalBlock(scope: !1526, file: !2, line: 152, column: 3)
!1532 = !DILocation(line: 154, scope: !1531, inlinedAt: !1514)
!1533 = !DILocation(line: 156, scope: !1526, inlinedAt: !1514)
!1534 = !DILocation(line: 157, scope: !1526, inlinedAt: !1514)
!1535 = !DILocation(line: 158, scope: !1526, inlinedAt: !1514)
!1536 = !DILocation(line: 164, scope: !1537, inlinedAt: !1538)
!1537 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1538 = !DILocation(line: 160, scope: !1520, inlinedAt: !1514)
!1539 = !DILocation(line: 166, scope: !1537, inlinedAt: !1538)
!1540 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg64Random.next_int128", scope: !55, file: !55, line: 68, type: !1541, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1541 = !DISubroutineType(types: !1542)
!1542 = !{!15, !1483}
!1543 = !DILocation(line: 68, scope: !1540)
!1544 = !DILocalVariable(name: "self", arg: 1, scope: !1540, file: !55, line: 68, type: !1483)
!1545 = !DILocation(line: 68, scope: !1546, inlinedAt: !1543)
!1546 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1547 = !DILocation(line: 138, scope: !1546, inlinedAt: !1543)
!1548 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg64Random.next_long", scope: !55, file: !55, line: 69, type: !1549, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1549 = !DISubroutineType(types: !1550)
!1550 = !{!6, !1483}
!1551 = !DILocation(line: 69, scope: !1548)
!1552 = !DILocalVariable(name: "self", arg: 1, scope: !1548, file: !55, line: 69, type: !1483)
!1553 = !DILocation(line: 69, scope: !1554, inlinedAt: !1551)
!1554 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1555 = !DILocation(line: 139, scope: !1554, inlinedAt: !1551)
!1556 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg64Random.next_short", scope: !55, file: !55, line: 70, type: !1557, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1557 = !DISubroutineType(types: !1558)
!1558 = !{!23, !1483}
!1559 = !DILocation(line: 70, scope: !1556)
!1560 = !DILocalVariable(name: "self", arg: 1, scope: !1556, file: !55, line: 70, type: !1483)
!1561 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg64Random.next_byte", scope: !55, file: !55, line: 71, type: !1562, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1562 = !DISubroutineType(types: !1563)
!1563 = !{!52, !1483}
!1564 = !DILocation(line: 71, scope: !1561)
!1565 = !DILocalVariable(name: "self", arg: 1, scope: !1561, file: !55, line: 71, type: !1483)
!1566 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg32Random.set_seed", scope: !55, file: !55, line: 78, type: !1567, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1567 = !DISubroutineType(types: !1568)
!1568 = !{null, !1569, !239}
!1569 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg32Random*", baseType: !1570, size: 64, align: 64, dwarfAddressSpace: 0)
!1570 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg32Random", scope: !55, file: !55, line: 76, baseType: !20, align: 4)
!1571 = !DILocation(line: 79, scope: !1566)
!1572 = !DILocalVariable(name: "self", arg: 1, scope: !1566, file: !55, line: 78, type: !1569)
!1573 = !DILocation(line: 78, scope: !1566)
!1574 = !DILocalVariable(name: "input", arg: 2, scope: !1566, file: !55, line: 78, type: !239)
!1575 = !DILocation(line: 80, scope: !1566)
!1576 = !DILocalVariable(name: "return_value", scope: !1577, file: !55, line: 10, type: !20, align: 4)
!1577 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1578 = !DILocation(line: 10, scope: !1577, inlinedAt: !1575)
!1579 = !DILocation(line: 371, scope: !1580, inlinedAt: !1581)
!1580 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1581 = !DILocation(line: 11, scope: !1577, inlinedAt: !1575)
!1582 = !DILocation(line: 12, scope: !1577, inlinedAt: !1575)
!1583 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg32Random.next_short", scope: !55, file: !55, line: 83, type: !1584, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1584 = !DISubroutineType(types: !1585)
!1585 = !{!23, !1569}
!1586 = !DILocation(line: 84, scope: !1583)
!1587 = !DILocalVariable(name: "self", arg: 1, scope: !1583, file: !55, line: 83, type: !1569)
!1588 = !DILocation(line: 83, scope: !1583)
!1589 = !DILocalVariable(name: "s", scope: !1583, file: !55, line: 86, type: !427, align: 8)
!1590 = !DILocation(line: 86, scope: !1583)
!1591 = !DILocalVariable(name: "xor", scope: !1583, file: !55, line: 87, type: !20, align: 4)
!1592 = !DILocation(line: 87, scope: !1583)
!1593 = !DILocalVariable(name: "rot", scope: !1583, file: !55, line: 88, type: !52, align: 1)
!1594 = !DILocation(line: 88, scope: !1583)
!1595 = !DILocation(line: 89, scope: !1583)
!1596 = !DILocation(line: 90, scope: !1583)
!1597 = !DILocation(line: 115, scope: !1598, inlinedAt: !1596)
!1598 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1599 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg32Random.next_bytes", scope: !55, file: !55, line: 96, type: !1567, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1600 = !DILocation(line: 96, scope: !1599)
!1601 = !DILocalVariable(name: "self", arg: 1, scope: !1599, file: !55, line: 96, type: !1569)
!1602 = !DILocalVariable(name: "bytes", arg: 2, scope: !1599, file: !55, line: 96, type: !239)
!1603 = !DILocation(line: 94, scope: !1604)
!1604 = distinct !DILexicalBlock(scope: !1599, file: !55, line: 96, column: 65)
!1605 = !DILocalVariable(name: "len", scope: !1606, file: !55, line: 146, type: !244, align: 8)
!1606 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1607 = !DILocation(line: 146, scope: !1606, inlinedAt: !1600)
!1608 = !DILocation(line: 148, scope: !1606, inlinedAt: !1600)
!1609 = !DILocation(line: 148, scope: !1610, inlinedAt: !1600)
!1610 = distinct !DILexicalBlock(scope: !1606, file: !2, line: 148, column: 2)
!1611 = !DILocalVariable(name: "value", scope: !1612, file: !55, line: 150, type: !23, align: 2)
!1612 = distinct !DILexicalBlock(scope: !1610, file: !2, line: 149, column: 2)
!1613 = !DILocation(line: 150, scope: !1612, inlinedAt: !1600)
!1614 = !DILocation(line: 96, scope: !1612, inlinedAt: !1600)
!1615 = !DILocation(line: 151, scope: !1612, inlinedAt: !1600)
!1616 = !DILocation(line: 153, scope: !1617, inlinedAt: !1600)
!1617 = distinct !DILexicalBlock(scope: !1612, file: !2, line: 152, column: 3)
!1618 = !DILocation(line: 154, scope: !1617, inlinedAt: !1600)
!1619 = !DILocation(line: 156, scope: !1612, inlinedAt: !1600)
!1620 = !DILocation(line: 157, scope: !1612, inlinedAt: !1600)
!1621 = !DILocation(line: 158, scope: !1612, inlinedAt: !1600)
!1622 = !DILocation(line: 164, scope: !1623, inlinedAt: !1624)
!1623 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1624 = !DILocation(line: 160, scope: !1606, inlinedAt: !1600)
!1625 = !DILocation(line: 166, scope: !1623, inlinedAt: !1624)
!1626 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg32Random.next_int128", scope: !55, file: !55, line: 97, type: !1627, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1627 = !DISubroutineType(types: !1628)
!1628 = !{!15, !1569}
!1629 = !DILocation(line: 97, scope: !1626)
!1630 = !DILocalVariable(name: "self", arg: 1, scope: !1626, file: !55, line: 97, type: !1569)
!1631 = !DILocation(line: 97, scope: !1632, inlinedAt: !1629)
!1632 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1633 = !DILocation(line: 138, scope: !1632, inlinedAt: !1629)
!1634 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg32Random.next_long", scope: !55, file: !55, line: 98, type: !1635, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1635 = !DISubroutineType(types: !1636)
!1636 = !{!6, !1569}
!1637 = !DILocation(line: 98, scope: !1634)
!1638 = !DILocalVariable(name: "self", arg: 1, scope: !1634, file: !55, line: 98, type: !1569)
!1639 = !DILocation(line: 98, scope: !1640, inlinedAt: !1637)
!1640 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1641 = !DILocation(line: 139, scope: !1640, inlinedAt: !1637)
!1642 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg32Random.next_int", scope: !55, file: !55, line: 99, type: !1643, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1643 = !DISubroutineType(types: !1644)
!1644 = !{!20, !1569}
!1645 = !DILocation(line: 99, scope: !1642)
!1646 = !DILocalVariable(name: "self", arg: 1, scope: !1642, file: !55, line: 99, type: !1569)
!1647 = !DILocation(line: 99, scope: !1648, inlinedAt: !1645)
!1648 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1649 = !DILocation(line: 140, scope: !1648, inlinedAt: !1645)
!1650 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg32Random.next_byte", scope: !55, file: !55, line: 100, type: !1651, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1651 = !DISubroutineType(types: !1652)
!1652 = !{!52, !1569}
!1653 = !DILocation(line: 100, scope: !1650)
!1654 = !DILocalVariable(name: "self", arg: 1, scope: !1650, file: !55, line: 100, type: !1569)
!1655 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg16Random.set_seed", scope: !55, file: !55, line: 106, type: !1656, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1656 = !DISubroutineType(types: !1657)
!1657 = !{null, !1658, !239}
!1658 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg16Random*", baseType: !1659, size: 64, align: 64, dwarfAddressSpace: 0)
!1659 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg16Random", scope: !55, file: !55, line: 104, baseType: !23, align: 2)
!1660 = !DILocation(line: 107, scope: !1655)
!1661 = !DILocalVariable(name: "self", arg: 1, scope: !1655, file: !55, line: 106, type: !1658)
!1662 = !DILocation(line: 106, scope: !1655)
!1663 = !DILocalVariable(name: "input", arg: 2, scope: !1655, file: !55, line: 106, type: !239)
!1664 = !DILocation(line: 108, scope: !1655)
!1665 = !DILocalVariable(name: "return_value", scope: !1666, file: !55, line: 10, type: !23, align: 2)
!1666 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1667 = !DILocation(line: 10, scope: !1666, inlinedAt: !1664)
!1668 = !DILocation(line: 371, scope: !1669, inlinedAt: !1670)
!1669 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1670 = !DILocation(line: 11, scope: !1666, inlinedAt: !1664)
!1671 = !DILocation(line: 12, scope: !1666, inlinedAt: !1664)
!1672 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg16Random.next_byte", scope: !55, file: !55, line: 111, type: !1673, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1673 = !DISubroutineType(types: !1674)
!1674 = !{!52, !1658}
!1675 = !DILocation(line: 112, scope: !1672)
!1676 = !DILocalVariable(name: "self", arg: 1, scope: !1672, file: !55, line: 111, type: !1658)
!1677 = !DILocation(line: 111, scope: !1672)
!1678 = !DILocalVariable(name: "s", scope: !1672, file: !55, line: 114, type: !511, align: 8)
!1679 = !DILocation(line: 114, scope: !1672)
!1680 = !DILocalVariable(name: "xor", scope: !1672, file: !55, line: 115, type: !23, align: 2)
!1681 = !DILocation(line: 115, scope: !1672)
!1682 = !DILocalVariable(name: "rot", scope: !1672, file: !55, line: 116, type: !52, align: 1)
!1683 = !DILocation(line: 116, scope: !1672)
!1684 = !DILocation(line: 117, scope: !1672)
!1685 = !DILocation(line: 118, scope: !1672)
!1686 = !DILocation(line: 131, scope: !1687, inlinedAt: !1685)
!1687 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1688 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg16Random.next_bytes", scope: !55, file: !55, line: 121, type: !1656, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1689 = !DILocation(line: 121, scope: !1688)
!1690 = !DILocalVariable(name: "self", arg: 1, scope: !1688, file: !55, line: 121, type: !1658)
!1691 = !DILocalVariable(name: "bytes", arg: 2, scope: !1688, file: !55, line: 121, type: !239)
!1692 = !DILocalVariable(name: "len", scope: !1693, file: !55, line: 146, type: !244, align: 8)
!1693 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1694 = !DILocation(line: 146, scope: !1693, inlinedAt: !1689)
!1695 = !DILocation(line: 148, scope: !1693, inlinedAt: !1689)
!1696 = !DILocation(line: 148, scope: !1697, inlinedAt: !1689)
!1697 = distinct !DILexicalBlock(scope: !1693, file: !2, line: 148, column: 2)
!1698 = !DILocalVariable(name: "value", scope: !1699, file: !55, line: 150, type: !52, align: 1)
!1699 = distinct !DILexicalBlock(scope: !1697, file: !2, line: 149, column: 2)
!1700 = !DILocation(line: 150, scope: !1699, inlinedAt: !1689)
!1701 = !DILocation(line: 121, scope: !1699, inlinedAt: !1689)
!1702 = !DILocation(line: 151, scope: !1699, inlinedAt: !1689)
!1703 = !DILocation(line: 153, scope: !1704, inlinedAt: !1689)
!1704 = distinct !DILexicalBlock(scope: !1699, file: !2, line: 152, column: 3)
!1705 = !DILocation(line: 154, scope: !1704, inlinedAt: !1689)
!1706 = !DILocation(line: 156, scope: !1699, inlinedAt: !1689)
!1707 = !DILocation(line: 157, scope: !1699, inlinedAt: !1689)
!1708 = !DILocation(line: 158, scope: !1699, inlinedAt: !1689)
!1709 = !DILocation(line: 164, scope: !1710, inlinedAt: !1711)
!1710 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1711 = !DILocation(line: 160, scope: !1693, inlinedAt: !1689)
!1712 = !DILocation(line: 166, scope: !1710, inlinedAt: !1711)
!1713 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg16Random.next_int128", scope: !55, file: !55, line: 122, type: !1714, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1714 = !DISubroutineType(types: !1715)
!1715 = !{!15, !1658}
!1716 = !DILocation(line: 122, scope: !1713)
!1717 = !DILocalVariable(name: "self", arg: 1, scope: !1713, file: !55, line: 122, type: !1658)
!1718 = !DILocation(line: 122, scope: !1719, inlinedAt: !1716)
!1719 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1720 = !DILocation(line: 138, scope: !1719, inlinedAt: !1716)
!1721 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg16Random.next_long", scope: !55, file: !55, line: 123, type: !1722, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1722 = !DISubroutineType(types: !1723)
!1723 = !{!6, !1658}
!1724 = !DILocation(line: 123, scope: !1721)
!1725 = !DILocalVariable(name: "self", arg: 1, scope: !1721, file: !55, line: 123, type: !1658)
!1726 = !DILocation(line: 123, scope: !1727, inlinedAt: !1724)
!1727 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1728 = !DILocation(line: 139, scope: !1727, inlinedAt: !1724)
!1729 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg16Random.next_int", scope: !55, file: !55, line: 124, type: !1730, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1730 = !DISubroutineType(types: !1731)
!1731 = !{!20, !1658}
!1732 = !DILocation(line: 124, scope: !1729)
!1733 = !DILocalVariable(name: "self", arg: 1, scope: !1729, file: !55, line: 124, type: !1658)
!1734 = !DILocation(line: 124, scope: !1735, inlinedAt: !1732)
!1735 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1736 = !DILocation(line: 140, scope: !1735, inlinedAt: !1732)
!1737 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg16Random.next_short", scope: !55, file: !55, line: 125, type: !1738, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1738 = !DISubroutineType(types: !1739)
!1739 = !{!23, !1658}
!1740 = !DILocation(line: 125, scope: !1737)
!1741 = !DILocalVariable(name: "self", arg: 1, scope: !1737, file: !55, line: 125, type: !1658)
!1742 = !DILocation(line: 125, scope: !1743, inlinedAt: !1740)
!1743 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1744 = !DILocation(line: 141, scope: !1743, inlinedAt: !1740)
!1745 = distinct !DISubprogram(name: "seeder", linkageName: "std.math.random.seeder", scope: !81, file: !81, line: 20, type: !1746, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1746 = !DISubroutineType(types: !1747)
!1747 = !{null, !239, !239}
!1748 = !DILocalVariable(name: "input", arg: 1, scope: !1745, file: !81, line: 20, type: !239)
!1749 = !DILocation(line: 20, scope: !1745)
!1750 = !DILocalVariable(name: "out_buffer", arg: 2, scope: !1745, file: !81, line: 20, type: !239)
!1751 = !DILocalVariable(name: "out_chars", scope: !1745, file: !81, line: 26, type: !244, align: 8)
!1752 = !DILocation(line: 26, scope: !1745)
!1753 = !DILocalVariable(name: "current", scope: !1754, file: !81, line: 540, type: !1756, align: 8)
!1754 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !1755, file: !1755, line: 538, scopeLine: 538, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1755 = !DIFile(filename: "mem.c3", directory: "C:/Program Files/c3c/lib/std/core")
!1756 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !1757, size: 64, align: 64, dwarfAddressSpace: 0)
!1757 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !81, file: !81, line: 10, size: 320, align: 64, elements: !1758, identifier: "std.core.mem.allocator.TempAllocator")
!1758 = !{!1759, !1766, !1779, !1780, !1781}
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !1757, file: !81, line: 12, baseType: !1760, size: 128, align: 64)
!1760 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !1761, identifier: "Allocator")
!1761 = !{!1762, !1764}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1760, baseType: !1763, size: 64, align: 64)
!1763 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1760, baseType: !1765, size: 64, align: 64, offset: 64)
!1765 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !1757, file: !81, line: 13, baseType: !1767, size: 64, align: 64, offset: 128)
!1767 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !1768, size: 64, align: 64, dwarfAddressSpace: 0)
!1768 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !81, file: !81, line: 22, size: 320, align: 64, elements: !1769, identifier: "std.core.mem.allocator.TempAllocatorPage")
!1769 = !{!1770, !1771, !1772, !1773, !1774, !1775}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !1768, file: !81, line: 24, baseType: !1767, size: 64, align: 64)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1768, file: !81, line: 25, baseType: !1763, size: 64, align: 64, offset: 64)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !1768, file: !81, line: 26, baseType: !244, size: 64, align: 64, offset: 128)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1768, file: !81, line: 27, baseType: !244, size: 64, align: 64, offset: 192)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !1768, file: !81, line: 28, baseType: !244, size: 64, align: 64, offset: 256)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1768, file: !81, line: 29, baseType: !1776, align: 8, offset: 320)
!1776 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, align: 8, elements: !1777)
!1777 = !{!1778}
!1778 = !DISubrange(count: 0, lowerBound: 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1757, file: !81, line: 14, baseType: !244, size: 64, align: 64, offset: 192)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1757, file: !81, line: 15, baseType: !244, size: 64, align: 64, offset: 256)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1757, file: !81, line: 16, baseType: !1776, align: 8, offset: 320)
!1782 = !DILocation(line: 540, scope: !1754, inlinedAt: !1783)
!1783 = !DILocation(line: 27, scope: !1745)
!1784 = !DILocation(line: 396, scope: !1785, inlinedAt: !1782)
!1785 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !1786, file: !1786, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1786 = !DIFile(filename: "mem_allocator.c3", directory: "C:/Program Files/c3c/lib/std/core")
!1787 = !DILocation(line: 398, scope: !1788, inlinedAt: !1782)
!1788 = distinct !DILexicalBlock(scope: !1785, file: !1786, line: 397, column: 2)
!1789 = !DILocation(line: 400, scope: !1785, inlinedAt: !1782)
!1790 = !DILocalVariable(name: "mark", scope: !1754, file: !81, line: 546, type: !244, align: 8)
!1791 = !DILocation(line: 546, scope: !1754, inlinedAt: !1783)
!1792 = !DILocalVariable(name: "words", scope: !1793, file: !81, line: 29, type: !1794, align: 8)
!1793 = distinct !DILexicalBlock(scope: !1745, file: !81, line: 28, column: 2)
!1794 = !DICompositeType(tag: DW_TAG_structure_type, name: "ulong[]", size: 128, align: 64, elements: !1795, identifier: "ulong[]")
!1795 = !{!1796, !1797}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1794, baseType: !344, size: 64, align: 64)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1794, baseType: !244, size: 64, align: 64, offset: 64)
!1798 = !DILocation(line: 29, scope: !1793)
!1799 = !DILocation(line: 726, scope: !1800, inlinedAt: !1798)
!1800 = distinct !DISubprogram(name: "temp_alloc_array", linkageName: "temp_alloc_array", scope: !1755, file: !1755, line: 724, scopeLine: 724, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1801 = !DILocation(line: 30, scope: !1793)
!1802 = !DILocalVariable(name: "words_len_2", scope: !1793, file: !81, line: 31, type: !244, align: 8)
!1803 = !DILocation(line: 31, scope: !1793)
!1804 = !DILocalVariable(name: "i", scope: !1805, file: !81, line: 34, type: !244, align: 8)
!1805 = distinct !DILexicalBlock(scope: !1793, file: !81, line: 34, column: 3)
!1806 = !DILocation(line: 34, scope: !1805)
!1807 = !DILocalVariable(name: "j", scope: !1808, file: !81, line: 36, type: !244, align: 8)
!1808 = distinct !DILexicalBlock(scope: !1805, file: !81, line: 35, column: 3)
!1809 = !DILocation(line: 36, scope: !1808)
!1810 = !DILocation(line: 37, scope: !1808)
!1811 = !DILocalVariable(name: "x", scope: !1812, file: !81, line: 214, type: !6, align: 8)
!1812 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1813 = !DILocation(line: 214, scope: !1812, inlinedAt: !1810)
!1814 = !DILocation(line: 215, scope: !1812, inlinedAt: !1810)
!1815 = !DILocation(line: 216, scope: !1812, inlinedAt: !1810)
!1816 = !DILocation(line: 38, scope: !1808)
!1817 = !DILocalVariable(name: "remaining", scope: !1793, file: !81, line: 42, type: !244, align: 8)
!1818 = !DILocation(line: 42, scope: !1793)
!1819 = !DILocation(line: 43, scope: !1793)
!1820 = !DILocalVariable(name: "rest", scope: !1821, file: !81, line: 45, type: !6, align: 8)
!1821 = distinct !DILexicalBlock(scope: !1793, file: !81, line: 44, column: 3)
!1822 = !DILocation(line: 45, scope: !1821)
!1823 = !DILocation(line: 46, scope: !1821)
!1824 = !DILocation(line: 309, scope: !1825, inlinedAt: !1823)
!1825 = distinct !DILexicalBlock(scope: !1826, file: !1755, line: 312, column: 1)
!1826 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !1755, file: !1755, line: 311, scopeLine: 311, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1827 = !DILocation(line: 313, scope: !1826, inlinedAt: !1823)
!1828 = !DILocation(line: 47, scope: !1821)
!1829 = !DILocation(line: 48, scope: !1821)
!1830 = !DILocalVariable(name: "i", scope: !1831, file: !81, line: 52, type: !1832, align: 8)
!1831 = distinct !DILexicalBlock(scope: !1793, file: !81, line: 52, column: 3)
!1832 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !101)
!1833 = !DILocation(line: 52, scope: !1831)
!1834 = !DILocalVariable(name: "j", scope: !1835, file: !81, line: 54, type: !1832, align: 8)
!1835 = distinct !DILexicalBlock(scope: !1831, file: !81, line: 53, column: 3)
!1836 = !DILocation(line: 54, scope: !1835)
!1837 = !DILocation(line: 55, scope: !1835)
!1838 = !DILocation(line: 56, scope: !1835)
!1839 = !DILocalVariable(name: "i", scope: !1840, file: !81, line: 60, type: !244, align: 8)
!1840 = distinct !DILexicalBlock(scope: !1793, file: !81, line: 60, column: 3)
!1841 = !DILocation(line: 60, scope: !1840)
!1842 = !DILocalVariable(name: "j", scope: !1843, file: !81, line: 62, type: !244, align: 8)
!1843 = distinct !DILexicalBlock(scope: !1840, file: !81, line: 61, column: 3)
!1844 = !DILocation(line: 62, scope: !1843)
!1845 = !DILocation(line: 63, scope: !1843)
!1846 = !DILocation(line: 64, scope: !1843)
!1847 = !DILocation(line: 66, scope: !1793)
!1848 = !DILocation(line: 549, scope: !1849, inlinedAt: !1783)
!1849 = distinct !DILexicalBlock(scope: !1754, file: !1755, line: 548, column: 2)
!1850 = !DILocation(line: 553, scope: !1849, inlinedAt: !1783)
!1851 = distinct !DISubprogram(name: "entropy", linkageName: "std.math.random.entropy", scope: !81, file: !81, line: 75, type: !1852, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1852 = !DISubroutineType(types: !1853)
!1853 = !{!1854}
!1854 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 256, align: 8, elements: !1855)
!1855 = !{!1856}
!1856 = !DISubrange(count: 32, lowerBound: 0)
!1857 = !DILocalVariable(name: "addr", scope: !1851, file: !81, line: 78, type: !1763, align: 8)
!1858 = !DILocation(line: 78, scope: !1851)
!1859 = !DILocation(line: 79, scope: !1851)
!1860 = !DILocation(line: 81, scope: !1851)
!1861 = !DILocalVariable(name: "entropy_data", scope: !1851, file: !81, line: 82, type: !1862, align: 16)
!1862 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 256, align: 32, elements: !1863)
!1863 = !{!1864}
!1864 = !DISubrange(count: 8, lowerBound: 0)
!1865 = !DILocation(line: 82, scope: !1851)
!1866 = !DILocation(line: 212, scope: !1867, inlinedAt: !1868)
!1867 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1868 = !DILocation(line: 72, scope: !1869, inlinedAt: !1870)
!1869 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1870 = !DILocation(line: 83, scope: !1851)
!1871 = !DILocation(line: 212, scope: !1872, inlinedAt: !1873)
!1872 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1873 = !DILocation(line: 72, scope: !1874, inlinedAt: !1875)
!1874 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1875 = !DILocation(line: 84, scope: !1851)
!1876 = !DILocation(line: 212, scope: !1877, inlinedAt: !1878)
!1877 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1878 = !DILocation(line: 72, scope: !1879, inlinedAt: !1880)
!1879 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1880 = !DILocation(line: 85, scope: !1851)
!1881 = !DILocation(line: 212, scope: !1882, inlinedAt: !1883)
!1882 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1883 = !DILocation(line: 72, scope: !1884, inlinedAt: !1885)
!1884 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1885 = !DILocation(line: 86, scope: !1851)
!1886 = !DILocation(line: 87, scope: !1851)
!1887 = !DILocation(line: 88, scope: !1851)
!1888 = !DILocation(line: 212, scope: !1889, inlinedAt: !1890)
!1889 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1890 = !DILocation(line: 72, scope: !1891, inlinedAt: !1887)
!1891 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1892 = !DILocation(line: 212, scope: !1893, inlinedAt: !1894)
!1893 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1894 = !DILocation(line: 72, scope: !1895, inlinedAt: !1896)
!1895 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1896 = !DILocation(line: 89, scope: !1851)
!1897 = !DILocation(line: 212, scope: !1898, inlinedAt: !1899)
!1898 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1899 = !DILocation(line: 72, scope: !1900, inlinedAt: !1901)
!1900 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !81, file: !81, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1901 = !DILocation(line: 90, scope: !1851)
!1902 = !DILocation(line: 212, scope: !1903, inlinedAt: !1904)
!1903 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1904 = !DILocation(line: 92, scope: !1851)
!1905 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc128Random.set_seed", scope: !4, file: !4, line: 15, type: !1906, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1906 = !DISubroutineType(types: !1907)
!1907 = !{null, !1908, !239}
!1908 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc128Random*", baseType: !1909, size: 64, align: 64, dwarfAddressSpace: 0)
!1909 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc128Random", scope: !4, file: !4, line: 13, baseType: !927, align: 16)
!1910 = !DILocation(line: 16, scope: !1905)
!1911 = !DILocalVariable(name: "self", arg: 1, scope: !1905, file: !4, line: 15, type: !1908)
!1912 = !DILocation(line: 15, scope: !1905)
!1913 = !DILocalVariable(name: "input", arg: 2, scope: !1905, file: !4, line: 15, type: !239)
!1914 = !DILocation(line: 17, scope: !1905)
!1915 = !DILocalVariable(name: "return_value", scope: !1916, file: !4, line: 10, type: !927, align: 16)
!1916 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1917 = !DILocation(line: 10, scope: !1916, inlinedAt: !1914)
!1918 = !DILocation(line: 371, scope: !1919, inlinedAt: !1920)
!1919 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1920 = !DILocation(line: 11, scope: !1916, inlinedAt: !1914)
!1921 = !DILocation(line: 12, scope: !1916, inlinedAt: !1914)
!1922 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc128Random.next_int128", scope: !4, file: !4, line: 20, type: !1923, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1923 = !DISubroutineType(types: !1924)
!1924 = !{!15, !1908}
!1925 = !DILocation(line: 21, scope: !1922)
!1926 = !DILocalVariable(name: "self", arg: 1, scope: !1922, file: !4, line: 20, type: !1908)
!1927 = !DILocation(line: 20, scope: !1922)
!1928 = !DILocalVariable(name: "s", scope: !1922, file: !4, line: 22, type: !264, align: 8)
!1929 = !DILocation(line: 22, scope: !1922)
!1930 = !DILocalVariable(name: "result", scope: !1922, file: !4, line: 23, type: !15, align: 16)
!1931 = !DILocation(line: 23, scope: !1922)
!1932 = !DILocation(line: 24, scope: !1922)
!1933 = !DILocation(line: 25, scope: !1922)
!1934 = !DILocation(line: 26, scope: !1922)
!1935 = !DILocation(line: 163, scope: !1936, inlinedAt: !1934)
!1936 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1937 = !DILocation(line: 27, scope: !1922)
!1938 = !DILocation(line: 28, scope: !1922)
!1939 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc128Random.next_bytes", scope: !4, file: !4, line: 34, type: !1906, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1940 = !DILocation(line: 34, scope: !1939)
!1941 = !DILocalVariable(name: "self", arg: 1, scope: !1939, file: !4, line: 34, type: !1908)
!1942 = !DILocalVariable(name: "bytes", arg: 2, scope: !1939, file: !4, line: 34, type: !239)
!1943 = !DILocation(line: 32, scope: !1944)
!1944 = distinct !DILexicalBlock(scope: !1939, file: !4, line: 34, column: 66)
!1945 = !DILocalVariable(name: "len", scope: !1946, file: !4, line: 146, type: !244, align: 8)
!1946 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1947 = !DILocation(line: 146, scope: !1946, inlinedAt: !1940)
!1948 = !DILocation(line: 148, scope: !1946, inlinedAt: !1940)
!1949 = !DILocation(line: 148, scope: !1950, inlinedAt: !1940)
!1950 = distinct !DILexicalBlock(scope: !1946, file: !2, line: 148, column: 2)
!1951 = !DILocalVariable(name: "value", scope: !1952, file: !4, line: 150, type: !15, align: 16)
!1952 = distinct !DILexicalBlock(scope: !1950, file: !2, line: 149, column: 2)
!1953 = !DILocation(line: 150, scope: !1952, inlinedAt: !1940)
!1954 = !DILocation(line: 34, scope: !1952, inlinedAt: !1940)
!1955 = !DILocation(line: 151, scope: !1952, inlinedAt: !1940)
!1956 = !DILocation(line: 153, scope: !1957, inlinedAt: !1940)
!1957 = distinct !DILexicalBlock(scope: !1952, file: !2, line: 152, column: 3)
!1958 = !DILocation(line: 154, scope: !1957, inlinedAt: !1940)
!1959 = !DILocation(line: 156, scope: !1952, inlinedAt: !1940)
!1960 = !DILocation(line: 157, scope: !1952, inlinedAt: !1940)
!1961 = !DILocation(line: 158, scope: !1952, inlinedAt: !1940)
!1962 = !DILocation(line: 164, scope: !1963, inlinedAt: !1964)
!1963 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1964 = !DILocation(line: 160, scope: !1946, inlinedAt: !1940)
!1965 = !DILocation(line: 166, scope: !1963, inlinedAt: !1964)
!1966 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc128Random.next_long", scope: !4, file: !4, line: 35, type: !1967, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1967 = !DISubroutineType(types: !1968)
!1968 = !{!6, !1908}
!1969 = !DILocation(line: 35, scope: !1966)
!1970 = !DILocalVariable(name: "self", arg: 1, scope: !1966, file: !4, line: 35, type: !1908)
!1971 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc128Random.next_int", scope: !4, file: !4, line: 36, type: !1972, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1972 = !DISubroutineType(types: !1973)
!1973 = !{!20, !1908}
!1974 = !DILocation(line: 36, scope: !1971)
!1975 = !DILocalVariable(name: "self", arg: 1, scope: !1971, file: !4, line: 36, type: !1908)
!1976 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc128Random.next_short", scope: !4, file: !4, line: 37, type: !1977, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1977 = !DISubroutineType(types: !1978)
!1978 = !{!23, !1908}
!1979 = !DILocation(line: 37, scope: !1976)
!1980 = !DILocalVariable(name: "self", arg: 1, scope: !1976, file: !4, line: 37, type: !1908)
!1981 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc128Random.next_byte", scope: !4, file: !4, line: 38, type: !1982, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1982 = !DISubroutineType(types: !1983)
!1983 = !{!52, !1908}
!1984 = !DILocation(line: 38, scope: !1981)
!1985 = !DILocalVariable(name: "self", arg: 1, scope: !1981, file: !4, line: 38, type: !1908)
!1986 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc64Random.set_seed", scope: !4, file: !4, line: 45, type: !1987, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1987 = !DISubroutineType(types: !1988)
!1988 = !{null, !1989, !239}
!1989 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc64Random*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1990 = !DILocation(line: 46, scope: !1986)
!1991 = !DILocalVariable(name: "self", arg: 1, scope: !1986, file: !4, line: 45, type: !1989)
!1992 = !DILocation(line: 45, scope: !1986)
!1993 = !DILocalVariable(name: "input", arg: 2, scope: !1986, file: !4, line: 45, type: !239)
!1994 = !DILocation(line: 47, scope: !1986)
!1995 = !DILocalVariable(name: "return_value", scope: !1996, file: !4, line: 10, type: !5, align: 16)
!1996 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1997 = !DILocation(line: 10, scope: !1996, inlinedAt: !1994)
!1998 = !DILocation(line: 371, scope: !1999, inlinedAt: !2000)
!1999 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2000 = !DILocation(line: 11, scope: !1996, inlinedAt: !1994)
!2001 = !DILocation(line: 12, scope: !1996, inlinedAt: !1994)
!2002 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc64Random.next_long", scope: !4, file: !4, line: 50, type: !2003, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2003 = !DISubroutineType(types: !2004)
!2004 = !{!6, !1989}
!2005 = !DILocation(line: 51, scope: !2002)
!2006 = !DILocalVariable(name: "self", arg: 1, scope: !2002, file: !4, line: 50, type: !1989)
!2007 = !DILocation(line: 50, scope: !2002)
!2008 = !DILocalVariable(name: "s", scope: !2002, file: !4, line: 52, type: !344, align: 8)
!2009 = !DILocation(line: 52, scope: !2002)
!2010 = !DILocalVariable(name: "result", scope: !2002, file: !4, line: 53, type: !6, align: 8)
!2011 = !DILocation(line: 53, scope: !2002)
!2012 = !DILocation(line: 54, scope: !2002)
!2013 = !DILocation(line: 55, scope: !2002)
!2014 = !DILocation(line: 56, scope: !2002)
!2015 = !DILocation(line: 147, scope: !2016, inlinedAt: !2014)
!2016 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2017 = !DILocation(line: 57, scope: !2002)
!2018 = !DILocation(line: 58, scope: !2002)
!2019 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc64Random.next_bytes", scope: !4, file: !4, line: 64, type: !1987, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2020 = !DILocation(line: 64, scope: !2019)
!2021 = !DILocalVariable(name: "self", arg: 1, scope: !2019, file: !4, line: 64, type: !1989)
!2022 = !DILocalVariable(name: "bytes", arg: 2, scope: !2019, file: !4, line: 64, type: !239)
!2023 = !DILocation(line: 62, scope: !2024)
!2024 = distinct !DILexicalBlock(scope: !2019, file: !4, line: 64, column: 65)
!2025 = !DILocalVariable(name: "len", scope: !2026, file: !4, line: 146, type: !244, align: 8)
!2026 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2027 = !DILocation(line: 146, scope: !2026, inlinedAt: !2020)
!2028 = !DILocation(line: 148, scope: !2026, inlinedAt: !2020)
!2029 = !DILocation(line: 148, scope: !2030, inlinedAt: !2020)
!2030 = distinct !DILexicalBlock(scope: !2026, file: !2, line: 148, column: 2)
!2031 = !DILocalVariable(name: "value", scope: !2032, file: !4, line: 150, type: !6, align: 8)
!2032 = distinct !DILexicalBlock(scope: !2030, file: !2, line: 149, column: 2)
!2033 = !DILocation(line: 150, scope: !2032, inlinedAt: !2020)
!2034 = !DILocation(line: 64, scope: !2032, inlinedAt: !2020)
!2035 = !DILocation(line: 151, scope: !2032, inlinedAt: !2020)
!2036 = !DILocation(line: 153, scope: !2037, inlinedAt: !2020)
!2037 = distinct !DILexicalBlock(scope: !2032, file: !2, line: 152, column: 3)
!2038 = !DILocation(line: 154, scope: !2037, inlinedAt: !2020)
!2039 = !DILocation(line: 156, scope: !2032, inlinedAt: !2020)
!2040 = !DILocation(line: 157, scope: !2032, inlinedAt: !2020)
!2041 = !DILocation(line: 158, scope: !2032, inlinedAt: !2020)
!2042 = !DILocation(line: 164, scope: !2043, inlinedAt: !2044)
!2043 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2044 = !DILocation(line: 160, scope: !2026, inlinedAt: !2020)
!2045 = !DILocation(line: 166, scope: !2043, inlinedAt: !2044)
!2046 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc64Random.next_int128", scope: !4, file: !4, line: 65, type: !2047, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2047 = !DISubroutineType(types: !2048)
!2048 = !{!15, !1989}
!2049 = !DILocation(line: 65, scope: !2046)
!2050 = !DILocalVariable(name: "self", arg: 1, scope: !2046, file: !4, line: 65, type: !1989)
!2051 = !DILocation(line: 65, scope: !2052, inlinedAt: !2049)
!2052 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2053 = !DILocation(line: 138, scope: !2052, inlinedAt: !2049)
!2054 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc64Random.next_int", scope: !4, file: !4, line: 66, type: !2055, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2055 = !DISubroutineType(types: !2056)
!2056 = !{!20, !1989}
!2057 = !DILocation(line: 66, scope: !2054)
!2058 = !DILocalVariable(name: "self", arg: 1, scope: !2054, file: !4, line: 66, type: !1989)
!2059 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc64Random.next_short", scope: !4, file: !4, line: 67, type: !2060, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2060 = !DISubroutineType(types: !2061)
!2061 = !{!23, !1989}
!2062 = !DILocation(line: 67, scope: !2059)
!2063 = !DILocalVariable(name: "self", arg: 1, scope: !2059, file: !4, line: 67, type: !1989)
!2064 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc64Random.next_byte", scope: !4, file: !4, line: 68, type: !2065, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2065 = !DISubroutineType(types: !2066)
!2066 = !{!52, !1989}
!2067 = !DILocation(line: 68, scope: !2064)
!2068 = !DILocalVariable(name: "self", arg: 1, scope: !2064, file: !4, line: 68, type: !1989)
!2069 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc32Random.set_seed", scope: !4, file: !4, line: 74, type: !2070, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2070 = !DISubroutineType(types: !2071)
!2071 = !{null, !2072, !239}
!2072 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc32Random*", baseType: !2073, size: 64, align: 64, dwarfAddressSpace: 0)
!2073 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc32Random", scope: !4, file: !4, line: 72, baseType: !1113, align: 4)
!2074 = !DILocation(line: 75, scope: !2069)
!2075 = !DILocalVariable(name: "self", arg: 1, scope: !2069, file: !4, line: 74, type: !2072)
!2076 = !DILocation(line: 74, scope: !2069)
!2077 = !DILocalVariable(name: "input", arg: 2, scope: !2069, file: !4, line: 74, type: !239)
!2078 = !DILocation(line: 76, scope: !2069)
!2079 = !DILocalVariable(name: "return_value", scope: !2080, file: !4, line: 10, type: !1113, align: 16)
!2080 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2081 = !DILocation(line: 10, scope: !2080, inlinedAt: !2078)
!2082 = !DILocation(line: 371, scope: !2083, inlinedAt: !2084)
!2083 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2084 = !DILocation(line: 11, scope: !2080, inlinedAt: !2078)
!2085 = !DILocation(line: 12, scope: !2080, inlinedAt: !2078)
!2086 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc32Random.next_int", scope: !4, file: !4, line: 79, type: !2087, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2087 = !DISubroutineType(types: !2088)
!2088 = !{!20, !2072}
!2089 = !DILocation(line: 80, scope: !2086)
!2090 = !DILocalVariable(name: "sfc", arg: 1, scope: !2086, file: !4, line: 79, type: !2072)
!2091 = !DILocation(line: 79, scope: !2086)
!2092 = !DILocalVariable(name: "s", scope: !2086, file: !4, line: 81, type: !427, align: 8)
!2093 = !DILocation(line: 81, scope: !2086)
!2094 = !DILocalVariable(name: "result", scope: !2086, file: !4, line: 82, type: !20, align: 4)
!2095 = !DILocation(line: 82, scope: !2086)
!2096 = !DILocation(line: 83, scope: !2086)
!2097 = !DILocation(line: 84, scope: !2086)
!2098 = !DILocation(line: 85, scope: !2086)
!2099 = !DILocation(line: 99, scope: !2100, inlinedAt: !2098)
!2100 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2101 = !DILocation(line: 86, scope: !2086)
!2102 = !DILocation(line: 87, scope: !2086)
!2103 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc32Random.next_bytes", scope: !4, file: !4, line: 93, type: !2070, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2104 = !DILocation(line: 93, scope: !2103)
!2105 = !DILocalVariable(name: "self", arg: 1, scope: !2103, file: !4, line: 93, type: !2072)
!2106 = !DILocalVariable(name: "bytes", arg: 2, scope: !2103, file: !4, line: 93, type: !239)
!2107 = !DILocation(line: 91, scope: !2108)
!2108 = distinct !DILexicalBlock(scope: !2103, file: !4, line: 93, column: 65)
!2109 = !DILocalVariable(name: "len", scope: !2110, file: !4, line: 146, type: !244, align: 8)
!2110 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2111 = !DILocation(line: 146, scope: !2110, inlinedAt: !2104)
!2112 = !DILocation(line: 148, scope: !2110, inlinedAt: !2104)
!2113 = !DILocation(line: 148, scope: !2114, inlinedAt: !2104)
!2114 = distinct !DILexicalBlock(scope: !2110, file: !2, line: 148, column: 2)
!2115 = !DILocalVariable(name: "value", scope: !2116, file: !4, line: 150, type: !20, align: 4)
!2116 = distinct !DILexicalBlock(scope: !2114, file: !2, line: 149, column: 2)
!2117 = !DILocation(line: 150, scope: !2116, inlinedAt: !2104)
!2118 = !DILocation(line: 93, scope: !2116, inlinedAt: !2104)
!2119 = !DILocation(line: 151, scope: !2116, inlinedAt: !2104)
!2120 = !DILocation(line: 153, scope: !2121, inlinedAt: !2104)
!2121 = distinct !DILexicalBlock(scope: !2116, file: !2, line: 152, column: 3)
!2122 = !DILocation(line: 154, scope: !2121, inlinedAt: !2104)
!2123 = !DILocation(line: 156, scope: !2116, inlinedAt: !2104)
!2124 = !DILocation(line: 157, scope: !2116, inlinedAt: !2104)
!2125 = !DILocation(line: 158, scope: !2116, inlinedAt: !2104)
!2126 = !DILocation(line: 164, scope: !2127, inlinedAt: !2128)
!2127 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2128 = !DILocation(line: 160, scope: !2110, inlinedAt: !2104)
!2129 = !DILocation(line: 166, scope: !2127, inlinedAt: !2128)
!2130 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc32Random.next_int128", scope: !4, file: !4, line: 94, type: !2131, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2131 = !DISubroutineType(types: !2132)
!2132 = !{!15, !2072}
!2133 = !DILocation(line: 94, scope: !2130)
!2134 = !DILocalVariable(name: "self", arg: 1, scope: !2130, file: !4, line: 94, type: !2072)
!2135 = !DILocation(line: 94, scope: !2136, inlinedAt: !2133)
!2136 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2137 = !DILocation(line: 138, scope: !2136, inlinedAt: !2133)
!2138 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc32Random.next_long", scope: !4, file: !4, line: 95, type: !2139, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2139 = !DISubroutineType(types: !2140)
!2140 = !{!6, !2072}
!2141 = !DILocation(line: 95, scope: !2138)
!2142 = !DILocalVariable(name: "self", arg: 1, scope: !2138, file: !4, line: 95, type: !2072)
!2143 = !DILocation(line: 95, scope: !2144, inlinedAt: !2141)
!2144 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2145 = !DILocation(line: 139, scope: !2144, inlinedAt: !2141)
!2146 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc32Random.next_short", scope: !4, file: !4, line: 96, type: !2147, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2147 = !DISubroutineType(types: !2148)
!2148 = !{!23, !2072}
!2149 = !DILocation(line: 96, scope: !2146)
!2150 = !DILocalVariable(name: "self", arg: 1, scope: !2146, file: !4, line: 96, type: !2072)
!2151 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc32Random.next_byte", scope: !4, file: !4, line: 97, type: !2152, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2152 = !DISubroutineType(types: !2153)
!2153 = !{!52, !2072}
!2154 = !DILocation(line: 97, scope: !2151)
!2155 = !DILocalVariable(name: "self", arg: 1, scope: !2151, file: !4, line: 97, type: !2072)
!2156 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc16Random.set_seed", scope: !4, file: !4, line: 103, type: !2157, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2157 = !DISubroutineType(types: !2158)
!2158 = !{null, !2159, !239}
!2159 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc16Random*", baseType: !2160, size: 64, align: 64, dwarfAddressSpace: 0)
!2160 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc16Random", scope: !4, file: !4, line: 101, baseType: !1211, align: 2)
!2161 = !DILocation(line: 104, scope: !2156)
!2162 = !DILocalVariable(name: "self", arg: 1, scope: !2156, file: !4, line: 103, type: !2159)
!2163 = !DILocation(line: 103, scope: !2156)
!2164 = !DILocalVariable(name: "input", arg: 2, scope: !2156, file: !4, line: 103, type: !239)
!2165 = !DILocation(line: 105, scope: !2156)
!2166 = !DILocalVariable(name: "return_value", scope: !2167, file: !4, line: 10, type: !1211, align: 2)
!2167 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2168 = !DILocation(line: 10, scope: !2167, inlinedAt: !2165)
!2169 = !DILocation(line: 371, scope: !2170, inlinedAt: !2171)
!2170 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2171 = !DILocation(line: 11, scope: !2167, inlinedAt: !2165)
!2172 = !DILocation(line: 12, scope: !2167, inlinedAt: !2165)
!2173 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc16Random.next_short", scope: !4, file: !4, line: 109, type: !2174, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2174 = !DISubroutineType(types: !2175)
!2175 = !{!23, !2159}
!2176 = !DILocation(line: 110, scope: !2173)
!2177 = !DILocalVariable(name: "seed", arg: 1, scope: !2173, file: !4, line: 109, type: !2159)
!2178 = !DILocation(line: 109, scope: !2173)
!2179 = !DILocalVariable(name: "s", scope: !2173, file: !4, line: 111, type: !511, align: 8)
!2180 = !DILocation(line: 111, scope: !2173)
!2181 = !DILocalVariable(name: "result", scope: !2173, file: !4, line: 112, type: !23, align: 2)
!2182 = !DILocation(line: 112, scope: !2173)
!2183 = !DILocation(line: 113, scope: !2173)
!2184 = !DILocation(line: 114, scope: !2173)
!2185 = !DILocation(line: 115, scope: !2173)
!2186 = !DILocation(line: 115, scope: !2187, inlinedAt: !2185)
!2187 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2188 = !DILocation(line: 116, scope: !2173)
!2189 = !DILocation(line: 117, scope: !2173)
!2190 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc16Random.next_bytes", scope: !4, file: !4, line: 123, type: !2157, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2191 = !DILocation(line: 123, scope: !2190)
!2192 = !DILocalVariable(name: "self", arg: 1, scope: !2190, file: !4, line: 123, type: !2159)
!2193 = !DILocalVariable(name: "bytes", arg: 2, scope: !2190, file: !4, line: 123, type: !239)
!2194 = !DILocation(line: 121, scope: !2195)
!2195 = distinct !DILexicalBlock(scope: !2190, file: !4, line: 123, column: 65)
!2196 = !DILocalVariable(name: "len", scope: !2197, file: !4, line: 146, type: !244, align: 8)
!2197 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2198 = !DILocation(line: 146, scope: !2197, inlinedAt: !2191)
!2199 = !DILocation(line: 148, scope: !2197, inlinedAt: !2191)
!2200 = !DILocation(line: 148, scope: !2201, inlinedAt: !2191)
!2201 = distinct !DILexicalBlock(scope: !2197, file: !2, line: 148, column: 2)
!2202 = !DILocalVariable(name: "value", scope: !2203, file: !4, line: 150, type: !23, align: 2)
!2203 = distinct !DILexicalBlock(scope: !2201, file: !2, line: 149, column: 2)
!2204 = !DILocation(line: 150, scope: !2203, inlinedAt: !2191)
!2205 = !DILocation(line: 123, scope: !2203, inlinedAt: !2191)
!2206 = !DILocation(line: 151, scope: !2203, inlinedAt: !2191)
!2207 = !DILocation(line: 153, scope: !2208, inlinedAt: !2191)
!2208 = distinct !DILexicalBlock(scope: !2203, file: !2, line: 152, column: 3)
!2209 = !DILocation(line: 154, scope: !2208, inlinedAt: !2191)
!2210 = !DILocation(line: 156, scope: !2203, inlinedAt: !2191)
!2211 = !DILocation(line: 157, scope: !2203, inlinedAt: !2191)
!2212 = !DILocation(line: 158, scope: !2203, inlinedAt: !2191)
!2213 = !DILocation(line: 164, scope: !2214, inlinedAt: !2215)
!2214 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2215 = !DILocation(line: 160, scope: !2197, inlinedAt: !2191)
!2216 = !DILocation(line: 166, scope: !2214, inlinedAt: !2215)
!2217 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc16Random.next_int128", scope: !4, file: !4, line: 124, type: !2218, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2218 = !DISubroutineType(types: !2219)
!2219 = !{!15, !2159}
!2220 = !DILocation(line: 124, scope: !2217)
!2221 = !DILocalVariable(name: "self", arg: 1, scope: !2217, file: !4, line: 124, type: !2159)
!2222 = !DILocation(line: 124, scope: !2223, inlinedAt: !2220)
!2223 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2224 = !DILocation(line: 138, scope: !2223, inlinedAt: !2220)
!2225 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc16Random.next_long", scope: !4, file: !4, line: 125, type: !2226, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2226 = !DISubroutineType(types: !2227)
!2227 = !{!6, !2159}
!2228 = !DILocation(line: 125, scope: !2225)
!2229 = !DILocalVariable(name: "self", arg: 1, scope: !2225, file: !4, line: 125, type: !2159)
!2230 = !DILocation(line: 125, scope: !2231, inlinedAt: !2228)
!2231 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2232 = !DILocation(line: 139, scope: !2231, inlinedAt: !2228)
!2233 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc16Random.next_int", scope: !4, file: !4, line: 126, type: !2234, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2234 = !DISubroutineType(types: !2235)
!2235 = !{!20, !2159}
!2236 = !DILocation(line: 126, scope: !2233)
!2237 = !DILocalVariable(name: "self", arg: 1, scope: !2233, file: !4, line: 126, type: !2159)
!2238 = !DILocation(line: 126, scope: !2239, inlinedAt: !2236)
!2239 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2240 = !DILocation(line: 140, scope: !2239, inlinedAt: !2236)
!2241 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc16Random.next_byte", scope: !4, file: !4, line: 127, type: !2242, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2242 = !DISubroutineType(types: !2243)
!2243 = !{!52, !2159}
!2244 = !DILocation(line: 127, scope: !2241)
!2245 = !DILocalVariable(name: "self", arg: 1, scope: !2241, file: !4, line: 127, type: !2159)
!2246 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc8Random.set_seed", scope: !4, file: !4, line: 134, type: !2247, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2247 = !DISubroutineType(types: !2248)
!2248 = !{null, !2249, !239}
!2249 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc8Random*", baseType: !2250, size: 64, align: 64, dwarfAddressSpace: 0)
!2250 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc8Random", scope: !4, file: !4, line: 132, baseType: !1312, align: 1)
!2251 = !DILocation(line: 135, scope: !2246)
!2252 = !DILocalVariable(name: "self", arg: 1, scope: !2246, file: !4, line: 134, type: !2249)
!2253 = !DILocation(line: 134, scope: !2246)
!2254 = !DILocalVariable(name: "input", arg: 2, scope: !2246, file: !4, line: 134, type: !239)
!2255 = !DILocation(line: 136, scope: !2246)
!2256 = !DILocalVariable(name: "return_value", scope: !2257, file: !4, line: 10, type: !1312, align: 1)
!2257 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !81, file: !81, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2258 = !DILocation(line: 10, scope: !2257, inlinedAt: !2255)
!2259 = !DILocation(line: 371, scope: !2260, inlinedAt: !2261)
!2260 = distinct !DISubprogram(name: "@as_char_view", linkageName: "@as_char_view", scope: !122, file: !122, line: 369, scopeLine: 369, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2261 = !DILocation(line: 11, scope: !2257, inlinedAt: !2255)
!2262 = !DILocation(line: 12, scope: !2257, inlinedAt: !2255)
!2263 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc8Random.next_byte", scope: !4, file: !4, line: 139, type: !2264, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2264 = !DISubroutineType(types: !2265)
!2265 = !{!52, !2249}
!2266 = !DILocation(line: 140, scope: !2263)
!2267 = !DILocalVariable(name: "self", arg: 1, scope: !2263, file: !4, line: 139, type: !2249)
!2268 = !DILocation(line: 139, scope: !2263)
!2269 = !DILocalVariable(name: "s", scope: !2263, file: !4, line: 141, type: !242, align: 8)
!2270 = !DILocation(line: 141, scope: !2263)
!2271 = !DILocalVariable(name: "result", scope: !2263, file: !4, line: 142, type: !52, align: 1)
!2272 = !DILocation(line: 142, scope: !2263)
!2273 = !DILocation(line: 143, scope: !2263)
!2274 = !DILocation(line: 144, scope: !2263)
!2275 = !DILocation(line: 145, scope: !2263)
!2276 = !DILocation(line: 131, scope: !2277, inlinedAt: !2275)
!2277 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2278 = !DILocation(line: 146, scope: !2263)
!2279 = !DILocation(line: 147, scope: !2263)
!2280 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc8Random.next_bytes", scope: !4, file: !4, line: 150, type: !2247, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2281 = !DILocation(line: 150, scope: !2280)
!2282 = !DILocalVariable(name: "self", arg: 1, scope: !2280, file: !4, line: 150, type: !2249)
!2283 = !DILocalVariable(name: "bytes", arg: 2, scope: !2280, file: !4, line: 150, type: !239)
!2284 = !DILocalVariable(name: "len", scope: !2285, file: !4, line: 146, type: !244, align: 8)
!2285 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2286 = !DILocation(line: 146, scope: !2285, inlinedAt: !2281)
!2287 = !DILocation(line: 148, scope: !2285, inlinedAt: !2281)
!2288 = !DILocation(line: 148, scope: !2289, inlinedAt: !2281)
!2289 = distinct !DILexicalBlock(scope: !2285, file: !2, line: 148, column: 2)
!2290 = !DILocalVariable(name: "value", scope: !2291, file: !4, line: 150, type: !52, align: 1)
!2291 = distinct !DILexicalBlock(scope: !2289, file: !2, line: 149, column: 2)
!2292 = !DILocation(line: 150, scope: !2291, inlinedAt: !2281)
!2293 = !DILocation(line: 151, scope: !2291, inlinedAt: !2281)
!2294 = !DILocation(line: 153, scope: !2295, inlinedAt: !2281)
!2295 = distinct !DILexicalBlock(scope: !2291, file: !2, line: 152, column: 3)
!2296 = !DILocation(line: 154, scope: !2295, inlinedAt: !2281)
!2297 = !DILocation(line: 156, scope: !2291, inlinedAt: !2281)
!2298 = !DILocation(line: 157, scope: !2291, inlinedAt: !2281)
!2299 = !DILocation(line: 158, scope: !2291, inlinedAt: !2281)
!2300 = !DILocation(line: 164, scope: !2301, inlinedAt: !2302)
!2301 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2302 = !DILocation(line: 160, scope: !2285, inlinedAt: !2281)
!2303 = !DILocation(line: 166, scope: !2301, inlinedAt: !2302)
!2304 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc8Random.next_int128", scope: !4, file: !4, line: 151, type: !2305, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2305 = !DISubroutineType(types: !2306)
!2306 = !{!15, !2249}
!2307 = !DILocation(line: 151, scope: !2304)
!2308 = !DILocalVariable(name: "self", arg: 1, scope: !2304, file: !4, line: 151, type: !2249)
!2309 = !DILocation(line: 151, scope: !2310, inlinedAt: !2307)
!2310 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2311 = !DILocation(line: 138, scope: !2310, inlinedAt: !2307)
!2312 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc8Random.next_long", scope: !4, file: !4, line: 152, type: !2313, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2313 = !DISubroutineType(types: !2314)
!2314 = !{!6, !2249}
!2315 = !DILocation(line: 152, scope: !2312)
!2316 = !DILocalVariable(name: "self", arg: 1, scope: !2312, file: !4, line: 152, type: !2249)
!2317 = !DILocation(line: 152, scope: !2318, inlinedAt: !2315)
!2318 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2319 = !DILocation(line: 139, scope: !2318, inlinedAt: !2315)
!2320 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc8Random.next_int", scope: !4, file: !4, line: 153, type: !2321, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2321 = !DISubroutineType(types: !2322)
!2322 = !{!20, !2249}
!2323 = !DILocation(line: 153, scope: !2320)
!2324 = !DILocalVariable(name: "self", arg: 1, scope: !2320, file: !4, line: 153, type: !2249)
!2325 = !DILocation(line: 153, scope: !2326, inlinedAt: !2323)
!2326 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2327 = !DILocation(line: 140, scope: !2326, inlinedAt: !2323)
!2328 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc8Random.next_short", scope: !4, file: !4, line: 154, type: !2329, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2329 = !DISubroutineType(types: !2330)
!2330 = !{!23, !2249}
!2331 = !DILocation(line: 154, scope: !2328)
!2332 = !DILocalVariable(name: "self", arg: 1, scope: !2328, file: !4, line: 154, type: !2249)
!2333 = !DILocation(line: 154, scope: !2334, inlinedAt: !2331)
!2334 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2335 = !DILocation(line: 141, scope: !2334, inlinedAt: !2331)
!2336 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.SimpleRandom.set_seed", scope: !100, file: !100, line: 6, type: !2337, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2337 = !DISubroutineType(types: !2338)
!2338 = !{null, !2339, !239}
!2339 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleRandom*", baseType: !2340, size: 64, align: 64, dwarfAddressSpace: 0)
!2340 = !DIDerivedType(tag: DW_TAG_typedef, name: "SimpleRandom", scope: !100, file: !100, line: 3, baseType: !6, align: 8)
!2341 = !DILocation(line: 7, scope: !2336)
!2342 = !DILocalVariable(name: "self", arg: 1, scope: !2336, file: !100, line: 6, type: !2339)
!2343 = !DILocation(line: 6, scope: !2336)
!2344 = !DILocalVariable(name: "seed", arg: 2, scope: !2336, file: !100, line: 6, type: !239)
!2345 = !DILocalVariable(name: "full", scope: !2336, file: !100, line: 8, type: !2346, align: 1)
!2346 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 64, align: 8, elements: !1863)
!2347 = !DILocation(line: 8, scope: !2336)
!2348 = !DILocalVariable(name: ".temp", scope: !2349, file: !100, line: 9, type: !244, align: 8)
!2349 = distinct !DILexicalBlock(scope: !2336, file: !100, line: 9, column: 2)
!2350 = !DILocation(line: 9, scope: !2349)
!2351 = !DILocalVariable(name: "i", scope: !2352, file: !100, line: 9, type: !244, align: 8)
!2352 = distinct !DILexicalBlock(scope: !2349, file: !100, line: 10, column: 2)
!2353 = !DILocation(line: 9, scope: !2352)
!2354 = !DILocalVariable(name: "c", scope: !2352, file: !100, line: 9, type: !52, align: 1)
!2355 = !DILocation(line: 11, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2352, file: !100, line: 10, column: 2)
!2357 = !DILocation(line: 13, scope: !2336)
!2358 = !DILocalVariable(name: "x", scope: !2359, file: !100, line: 214, type: !6, align: 8)
!2359 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !122, file: !122, line: 209, scopeLine: 209, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2360 = !DILocation(line: 214, scope: !2359, inlinedAt: !2357)
!2361 = !DILocation(line: 215, scope: !2359, inlinedAt: !2357)
!2362 = !DILocation(line: 216, scope: !2359, inlinedAt: !2357)
!2363 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.SimpleRandom.next_int", scope: !100, file: !100, line: 16, type: !2364, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2364 = !DISubroutineType(types: !2365)
!2365 = !{!20, !2339}
!2366 = !DILocation(line: 17, scope: !2363)
!2367 = !DILocalVariable(name: "self", arg: 1, scope: !2363, file: !100, line: 16, type: !2339)
!2368 = !DILocation(line: 16, scope: !2363)
!2369 = !DILocalVariable(name: "nextseed", scope: !2363, file: !100, line: 18, type: !6, align: 8)
!2370 = !DILocation(line: 18, scope: !2363)
!2371 = !DILocation(line: 19, scope: !2363)
!2372 = !DILocation(line: 20, scope: !2363)
!2373 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.SimpleRandom.next_bytes", scope: !100, file: !100, line: 26, type: !2337, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2374 = !DILocation(line: 26, scope: !2373)
!2375 = !DILocalVariable(name: "self", arg: 1, scope: !2373, file: !100, line: 26, type: !2339)
!2376 = !DILocalVariable(name: "bytes", arg: 2, scope: !2373, file: !100, line: 26, type: !239)
!2377 = !DILocation(line: 24, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !2373, file: !100, line: 26, column: 66)
!2379 = !DILocalVariable(name: "len", scope: !2380, file: !100, line: 146, type: !244, align: 8)
!2380 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2381 = !DILocation(line: 146, scope: !2380, inlinedAt: !2374)
!2382 = !DILocation(line: 148, scope: !2380, inlinedAt: !2374)
!2383 = !DILocation(line: 148, scope: !2384, inlinedAt: !2374)
!2384 = distinct !DILexicalBlock(scope: !2380, file: !2, line: 148, column: 2)
!2385 = !DILocalVariable(name: "value", scope: !2386, file: !100, line: 150, type: !20, align: 4)
!2386 = distinct !DILexicalBlock(scope: !2384, file: !2, line: 149, column: 2)
!2387 = !DILocation(line: 150, scope: !2386, inlinedAt: !2374)
!2388 = !DILocation(line: 26, scope: !2386, inlinedAt: !2374)
!2389 = !DILocation(line: 151, scope: !2386, inlinedAt: !2374)
!2390 = !DILocation(line: 153, scope: !2391, inlinedAt: !2374)
!2391 = distinct !DILexicalBlock(scope: !2386, file: !2, line: 152, column: 3)
!2392 = !DILocation(line: 154, scope: !2391, inlinedAt: !2374)
!2393 = !DILocation(line: 156, scope: !2386, inlinedAt: !2374)
!2394 = !DILocation(line: 157, scope: !2386, inlinedAt: !2374)
!2395 = !DILocation(line: 158, scope: !2386, inlinedAt: !2374)
!2396 = !DILocation(line: 164, scope: !2397, inlinedAt: !2398)
!2397 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !122, file: !122, line: 161, scopeLine: 161, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2398 = !DILocation(line: 160, scope: !2380, inlinedAt: !2374)
!2399 = !DILocation(line: 166, scope: !2397, inlinedAt: !2398)
!2400 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.SimpleRandom.next_int128", scope: !100, file: !100, line: 27, type: !2401, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2401 = !DISubroutineType(types: !2402)
!2402 = !{!15, !2339}
!2403 = !DILocation(line: 27, scope: !2400)
!2404 = !DILocalVariable(name: "self", arg: 1, scope: !2400, file: !100, line: 27, type: !2339)
!2405 = !DILocation(line: 27, scope: !2406, inlinedAt: !2403)
!2406 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2407 = !DILocation(line: 138, scope: !2406, inlinedAt: !2403)
!2408 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.SimpleRandom.next_long", scope: !100, file: !100, line: 28, type: !2409, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2409 = !DISubroutineType(types: !2410)
!2410 = !{!6, !2339}
!2411 = !DILocation(line: 28, scope: !2408)
!2412 = !DILocalVariable(name: "self", arg: 1, scope: !2408, file: !100, line: 28, type: !2339)
!2413 = !DILocation(line: 28, scope: !2414, inlinedAt: !2411)
!2414 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2415 = !DILocation(line: 139, scope: !2414, inlinedAt: !2411)
!2416 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.SimpleRandom.next_short", scope: !100, file: !100, line: 29, type: !2417, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2417 = !DISubroutineType(types: !2418)
!2418 = !{!23, !2339}
!2419 = !DILocation(line: 29, scope: !2416)
!2420 = !DILocalVariable(name: "self", arg: 1, scope: !2416, file: !100, line: 29, type: !2339)
!2421 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.SimpleRandom.next_byte", scope: !100, file: !100, line: 30, type: !2422, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2422 = !DISubroutineType(types: !2423)
!2423 = !{!52, !2339}
!2424 = !DILocation(line: 30, scope: !2421)
!2425 = !DILocalVariable(name: "self", arg: 1, scope: !2421, file: !100, line: 30, type: !2339)
